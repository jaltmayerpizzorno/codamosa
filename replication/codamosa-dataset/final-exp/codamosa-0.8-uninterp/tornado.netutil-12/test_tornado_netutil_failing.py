# Automatically generated by Pynguin.
import tornado.netutil as module_0
import socket as module_1

def test_case_0():
    try:
        int_0 = -1997
        list_0 = module_0.bind_sockets(int_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'i~r\r;\n_\nW;x'
        socket_0 = module_0.bind_unix_socket(str_0)
        str_1 = "7E)4DiaR UC%4='2c"
        str_2 = 'Q\x0cY<9/(L]DU>m{oOIA'
        str_3 = '%s=%s'
        int_0 = None
        dict_0 = {str_1: socket_0, str_2: str_1, str_3: socket_0, str_0: int_0}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        socket_0 = module_1.socket()
        dict_0 = {}
        callable_0 = module_0.add_accept_handler(socket_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '.4?k:=%\x0c'
        address_family_0 = module_1.AddressFamily.AF_ATMPVC
        int_0 = -641
        resolver_0 = module_0.Resolver()
        awaitable_0 = resolver_0.resolve(str_0, int_0, address_family_0)
        resolver_1 = module_0.Resolver()
        list_0 = [resolver_1, resolver_1]
        default_executor_resolver_0 = module_0.DefaultExecutorResolver(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        blocking_resolver_0 = module_0.BlockingResolver(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
        socket_0 = module_1.socket()
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Usage:\n  python -m tornado.autoreload -m module.to.run [args...]\n  python -m tornado.autoreload path/to/script.py [args...]\n'
        bool_0 = module_0.is_valid_ip(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "ZM)'RJL^dV]A\x0b5X"
        socket_0 = module_0.bind_unix_socket(str_0)
        s_s_l_context_0 = None
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '127.0.0.1'
        bool_0 = module_0.is_valid_ip(str_0)
        var_0 = None
        bool_1 = module_0.is_valid_ip(var_0)
        str_1 = ''
        bool_2 = module_0.is_valid_ip(str_1)
        str_2 = ' '
        bool_3 = module_0.is_valid_ip(str_2)
        str_3 = '\x00'
        bool_4 = module_0.is_valid_ip(str_3)
        socket_0 = module_1.socket()
        callable_0 = None
        callable_1 = module_0.add_accept_handler(socket_0, callable_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -13
        str_0 = None
        socket_0 = module_0.bind_unix_socket(str_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        address_family_0 = module_1.AddressFamily.AF_PACKET
        list_0 = [address_family_0, address_family_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Sw[7Y'
        int_0 = 500
        address_family_0 = module_1.AddressFamily.AF_BLUETOOTH
        str_1 = 'yc\x0b,g\x0bWv\x0bJQI*acB'
        list_0 = [str_0, str_1]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        awaitable_0 = override_resolver_0.resolve(str_0, int_0, address_family_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '2'
        str_1 = 'S+['
        bool_0 = module_0.is_valid_ip(str_0)
        int_0 = None
        bool_1 = module_0.is_valid_ip(str_1)
        list_0 = module_0.bind_sockets(int_0, str_0, bool_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 8080
        var_0 = None
        list_0 = module_0.bind_sockets(int_0, var_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 0
        str_0 = ''
        list_0 = module_0.bind_sockets(int_0, str_0)
        int_1 = 1
        var_0 = list_0[int_0]
        var_1 = var_3.getsockname()[int_1]
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'Sw['
        int_0 = None
        bool_0 = module_0.is_valid_ip(str_0)
        address_family_0 = module_1.AddressFamily.AF_CAN
        int_1 = -659
        bool_1 = True
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0, int_1, int_1, bool_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'Sw['
        int_0 = None
        bool_0 = module_0.is_valid_ip(str_0)
        address_family_0 = module_1.AddressFamily.AF_LLC
        bool_1 = True
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0, int_0, int_0, bool_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '/'
        int_0 = 154
        socket_0 = module_0.bind_unix_socket(str_0, int_0, int_0)
    except BaseException:
        pass