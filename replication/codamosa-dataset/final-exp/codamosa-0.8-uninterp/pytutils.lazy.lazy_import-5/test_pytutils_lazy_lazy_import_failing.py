# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        set_0 = set()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, set_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'msg'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = repr(illegal_use_of_scope_replacer_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 3
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, dict_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'msg'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        bool_0 = True
        var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
        var_1 = repr(illegal_use_of_scope_replacer_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '2gO,e w[xYv&!z44@E'
        str_1 = 'y-t\n'
        bool_0 = True
        scope_replacer_0 = module_0.ScopeReplacer(str_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "\n        :param str prefix: Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, str_0, str_0, str_0]
        dict_1 = {}
        dict_2 = {}
        bytes_0 = b'\xe9\xb6\xf0?tV\xed3\xa3\xc9'
        scope_replacer_0 = module_0.ScopeReplacer(dict_1, dict_2, bytes_0)
        var_0 = scope_replacer_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = globals()
        var_1 = module_0.disallow_proxying()
        str_0 = '\n    from bzrlib import (\n        bzrdir,\n        )\n    '
        var_2 = module_0.lazy_import(var_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 681
        list_0 = []
        import_replacer_0 = module_0.ImportReplacer(int_0, list_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\n    from bzr&ib import (\n        bzrdir,\n        )\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\n        from bzrlib import (\n            errors,\n            osutils,\n            branch,\n            )\n     S  import brlib.branch\n       Z'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        import_processor_0 = module_0.ImportProcessor()
        float_0 = 5724.255311425209
        str_0 = 'u!>:o(+&@--`Y3s'
        var_0 = import_processor_0.lazy_import(float_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n    from bzr#ibfimport osti*s\n\\   import s*s\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\n        from bzrlib import (\n            errors,\n            osutils,\n            branch,\n            )\n        import brlib.branch\n        '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        import_processor_0 = module_0.ImportProcessor()
        scope_replacer_0 = None
        bytes_0 = None
        import_processor_1 = module_0.ImportProcessor(bytes_0)
        import_replacer_0 = module_0.ImportReplacer(scope_replacer_0, import_processor_0, import_processor_0, import_processor_1)
    except BaseException:
        pass

def test_case_14():
    try:
        import_processor_0 = module_0.ImportProcessor()
        scope_replacer_0 = None
        bool_0 = False
        import_processor_1 = module_0.ImportProcessor(bool_0)
        str_0 = "\n    A marker to indicate a LazyModule type.\n    Allows us to check module's with `isinstance(mod, _LazyModuleMarker)`\n    to know if the module is lazy.\n    "
        var_0 = import_processor_0.lazy_import(scope_replacer_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        import_processor_0 = module_0.ImportProcessor()
        scope_replacer_0 = None
        list_0 = [import_processor_0, scope_replacer_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, import_processor_0)
        str_0 = 'II_GLEb)'
        dict_0 = {str_0: import_processor_0}
        bool_0 = False
        str_1 = 'Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        '
        import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, str_1)
        var_0 = import_processor_0.lazy_import(illegal_use_of_scope_replacer_0, import_replacer_0)
    except BaseException:
        pass

def test_case_16():
    try:
        import_processor_0 = module_0.ImportProcessor()
        scope_replacer_0 = None
        bool_0 = False
        str_0 = None
        bytes_0 = b'>\xc8.'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(scope_replacer_0, scope_replacer_0, bytes_0)
        bool_1 = True
        import_replacer_0 = module_0.ImportReplacer(str_0, bool_0, illegal_use_of_scope_replacer_0, bytes_0, bool_1)
    except BaseException:
        pass