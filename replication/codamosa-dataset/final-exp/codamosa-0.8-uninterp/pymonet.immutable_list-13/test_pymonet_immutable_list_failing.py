# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = None
        var_1 = immutable_list_0.unshift(var_0)
        immutable_list_1 = module_0.ImmutableList(immutable_list_0)
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b''
        str_0 = '<]DDCi?7JP1Y9^m'
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.unshift(str_0)
        bool_0 = True
        immutable_list_1 = module_0.ImmutableList(var_0, bool_0)
        list_0 = None
        var_1 = immutable_list_1.append(list_0)
        optional_0 = immutable_list_1.find(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        object_0 = module_1.object()
        bool_0 = False
        str_0 = ',L|\rT_@+Bah>b '
        str_1 = 'Sum'
        dict_0 = {str_0: var_0, str_1: object_0}
        callable_0 = None
        callable_1 = None
        var_1 = None
        immutable_list_0 = module_0.ImmutableList()
        var_2 = immutable_list_0.reduce(callable_1, var_1)
        immutable_list_1 = module_0.ImmutableList()
        var_3 = immutable_list_1.reduce(callable_0, var_2)
        immutable_list_2 = module_0.ImmutableList(var_0)
        var_4 = immutable_list_2.reduce(dict_0, var_3)
        immutable_list_3 = module_0.ImmutableList(var_0, bool_0)
        bool_1 = immutable_list_3.__eq__(object_0)
        str_2 = '\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        '
        immutable_list_4 = module_0.ImmutableList(str_2)
        var_5 = immutable_list_4.__add__(var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = None
        var_1 = immutable_list_0.__len__()
        var_2 = immutable_list_0.unshift(var_0)
        immutable_list_1 = module_0.ImmutableList(immutable_list_0)
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = None
        var_1 = immutable_list_0.append(var_0)
        immutable_list_1 = module_0.ImmutableList(immutable_list_0)
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = None
        var_1 = immutable_list_0.unshift(var_0)
        immutable_list_1 = module_0.ImmutableList()
        str_0 = immutable_list_1.__str__()
        var_2 = immutable_list_1.unshift(var_0)
        var_3 = immutable_list_1.__add__(var_2)
        var_4 = immutable_list_0.append(var_0)
        optional_0 = immutable_list_0.find(callable_0)
        immutable_list_2 = module_0.ImmutableList(var_0, var_2)
        callable_1 = None
        var_5 = immutable_list_2.map(callable_1)
    except BaseException:
        pass

def test_case_6():
    try:
        immutable_list_0 = module_0.ImmutableList()
        str_0 = ''
        optional_0 = immutable_list_0.find(str_0)
        str_1 = immutable_list_0.__str__()
        immutable_list_1 = module_0.ImmutableList()
        str_2 = immutable_list_1.__str__()
        dict_0 = {str_2: str_2}
        var_0 = immutable_list_1.map(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        optional_0 = immutable_list_0.find(callable_0)
        immutable_list_1 = module_0.ImmutableList(var_0)
        str_0 = immutable_list_0.__str__()
        var_1 = immutable_list_0.__len__()
        var_2 = immutable_list_1.unshift(var_0)
        object_0 = module_1.object()
        bool_0 = immutable_list_1.__eq__(object_0)
        immutable_list_2 = module_0.ImmutableList(var_2, bool_0)
        var_3 = immutable_list_2.filter(callable_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.filter(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        callable_0 = None
        str_0 = 'T'
        immutable_list_0 = module_0.ImmutableList(str_0)
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_10():
    try:
        callable_0 = None
        var_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_1 = immutable_list_0.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = None
        immutable_list_0 = module_0.ImmutableList(var_0)
        var_1 = immutable_list_0.unshift(var_0)
        bool_0 = False
        object_0 = module_1.object()
        bool_1 = immutable_list_0.__eq__(object_0)
        immutable_list_1 = module_0.ImmutableList(var_1, bool_0)
        callable_0 = None
        object_1 = module_1.object()
        bool_2 = immutable_list_1.__eq__(object_1)
        var_2 = None
        var_3 = immutable_list_1.reduce(callable_0, var_2)
    except BaseException:
        pass

def test_case_12():
    try:
        callable_0 = None
        bool_0 = False
        var_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_1 = immutable_list_0.reduce(bool_0, var_0)
        str_0 = 'T'
        immutable_list_1 = module_0.ImmutableList(str_0)
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xfc\x11\x94p\x89\x13'
        dict_0 = {}
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(dict_0, bool_0)
        optional_0 = immutable_list_0.find(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x00&\xd0\n\x17$d\xf8\x1da\xd8oO\x97'
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bytes_0, bool_0)
        var_0 = immutable_list_0.to_list()
    except BaseException:
        pass