# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0, str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 508
        list_0 = [int_0, int_0, int_0]
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.set_eightbit_call(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ';'
        style_0 = None
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        var_0 = register_1.__setattr__(str_0, style_0)
        style_1 = module_0.Style()
        var_1 = register_1.__setattr__(str_0, style_0)
        type_0 = None
        register_1.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        str_0 = '&fo\x0cXwboGoOQt'
        list_0 = [str_0]
        str_1 = register_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        str_0 = '&fo\x0cXwboGoOQt'
        style_0 = module_0.Style()
        dict_0 = register_0.as_dict()
        register_1 = module_0.Register()
        list_0 = [style_0, register_0]
        dict_1 = {}
        style_1 = module_0.Style(*list_0, **dict_1)
        var_0 = register_1.__setattr__(str_0, style_1)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        dict_0 = {}
        register_0.unmute()
        list_0 = [dict_0, dict_0, register_0, dict_0]
        str_0 = ''
        str_1 = 'fOQ,^^\x0c+hx=k#\\GYu9CG'
        list_1 = [str_0, str_1, str_0]
        str_2 = register_0.__call__(*list_1)
        register_2 = register_0.copy()
        register_2.set_rgb_call(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        type_0 = None
        callable_0 = None
        register_0.set_renderfunc(type_0, callable_0)
        register_1 = module_0.Register()
        register_2 = register_1.copy()
        register_2.unmute()
        register_3 = module_0.Register()
        type_1 = None
        register_0.set_rgb_call(type_1)
        register_3.mute()
        var_0 = register_3.as_namedtuple()
        str_0 = register_0.__call__()
        tuple_0 = ()
        register_1.set_eightbit_call(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        render_type_0 = module_1.RenderType()
        list_0 = [render_type_0]
        style_0 = module_0.Style(*list_0)
        str_0 = 'K$gYdj6'
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        var_0 = register_1.__setattr__(str_0, style_0)
    except BaseException:
        pass