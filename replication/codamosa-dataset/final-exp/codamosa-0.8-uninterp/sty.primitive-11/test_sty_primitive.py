# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    pass

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    register_0 = module_0.Register()
    str_0 = '&fo\x0cXwboGoOQt'
    style_0 = module_0.Style()
    var_0 = register_0.__setattr__(str_0, style_0)
    str_1 = register_0.__call__()
    dict_0 = register_0.as_dict()
    register_1 = register_0.copy()
    register_0.mute()

def test_case_3():
    register_0 = module_0.Register()

def test_case_4():
    register_0 = module_0.Register()
    register_0.unmute()
    str_0 = '\n    Define RGB Background.\n\n    More info about 24-bit terminal colors: https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit\n\n    :param r: Red.\n    :param g: Green.\n    :param b: Blue.\n    '
    dict_0 = {str_0: str_0}
    str_1 = register_0.__call__(**dict_0)
    register_0.mute()

def test_case_5():
    register_0 = module_0.Register()
    str_0 = '&fo\x0cXwboGoOQt'
    style_0 = module_0.Style()
    var_0 = register_0.__setattr__(str_0, style_0)
    str_1 = register_0.__call__()
    dict_0 = register_0.as_dict()
    str_2 = '\n    Use this function to mute multiple register-objects at once.\n\n    :param objects: Pass multiple register-objects to the function.\n    '
    register_0.mute()
    style_1 = module_0.Style()
    register_0.set_renderfunc(str_2, style_1)

def test_case_6():
    register_0 = module_0.Register()
    dict_0 = register_0.as_dict()

def test_case_7():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    register_3 = module_0.Register()
    register_4 = register_3.copy()
    register_5 = register_4.copy()
    register_6 = register_4.copy()
    register_7 = register_5.copy()
    var_0 = register_7.as_namedtuple()

def test_case_8():
    register_0 = module_0.Register()
    str_0 = '&fo\x0cXwboGoOQt'
    style_0 = module_0.Style()
    var_0 = register_0.__setattr__(str_0, style_0)
    str_1 = register_0.__call__()
    register_1 = module_0.Register()
    dict_0 = register_1.as_dict()
    register_0.unmute()

def test_case_9():
    register_0 = module_0.Register()
    str_0 = '}n][?\rDA+%07<(%:L8Q4'
    bool_0 = False
    register_0.set_renderfunc(str_0, bool_0)
    style_0 = None
    var_0 = register_0.__setattr__(str_0, style_0)
    register_0.mute()
    str_1 = 'A^N8<\x0bShH:]'
    var_1 = register_0.__setattr__(str_1, style_0)
    str_2 = register_0.__call__()
    dict_0 = register_0.as_dict()
    dict_1 = register_0.as_dict()
    register_0.unmute()

def test_case_10():
    register_0 = module_0.Register()
    str_0 = 'fo\x0cXwboGoOQt'
    style_0 = module_0.Style()
    register_1 = register_0.copy()
    var_0 = register_0.__setattr__(str_0, style_0)
    list_0 = [str_0]
    str_1 = register_0.__call__(*list_0)
    style_1 = module_0.Style()
    str_2 = 'Nl;Pgmq%o^p'
    var_1 = register_0.__setattr__(str_2, style_0)
    str_3 = '8O<}%~QxS(1K3ul\\'
    str_4 = '*\x0c\rU\np*Lg\\OsZNOB'
    dict_0 = {str_3: str_4, str_0: str_3}
    type_0 = None
    set_0 = set()
    register_1.set_renderfunc(type_0, set_0)
    float_0 = -3543.05523
    tuple_0 = (style_1, float_0)
    dict_1 = {str_0: style_0, str_3: dict_0, str_2: tuple_0, str_3: float_0}
    str_5 = register_0.__call__(**dict_1)
    register_2 = module_0.Register()
    register_1.set_eightbit_call(type_0)
    dict_2 = register_0.as_dict()
    register_1.mute()

def test_case_11():
    int_0 = 1805
    list_0 = [int_0]
    dict_0 = {}
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    str_0 = register_1.__call__(*list_0, **dict_0)