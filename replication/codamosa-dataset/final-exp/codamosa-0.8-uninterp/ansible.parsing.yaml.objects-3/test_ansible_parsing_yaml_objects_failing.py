# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        dict_0 = {}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        bytes_0 = b'p\x1fI\x18\x110i@\xd8\x0c\xe6\x8a\x14v\x84A\xea'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "\tN7'"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__str__()
        var_1 = ansible_vault_encrypted_unicode_0.islower()
        float_0 = -211.77652
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_2 = ansible_vault_encrypted_unicode_1.title()
        var_3 = ansible_vault_encrypted_unicode_0.isascii()
        var_4 = ansible_vault_encrypted_unicode_0.lower()
        str_0 = None
        var_5 = ansible_vault_encrypted_unicode_1.__lt__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.isnumeric()
        var_1 = ansible_vault_encrypted_unicode_0.isupper()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_2 = ansible_vault_encrypted_unicode_0.__le__(ansible_unicode_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_1.__int__()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1036.835
        float_1 = 0.1
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_1)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.rstrip()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        float_0 = 2399.7
        bytes_0 = b'\xd6\xec{\xc8\xdbu\x8a\n\xc6N\x89\x1d'
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_2.__ge__(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'WP.7gQ'
        float_0 = 2.0
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        list_0 = [str_0]
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_2 = ansible_vault_encrypted_unicode_2.__radd__(ansible_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_2.partition(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__str__()
        var_1 = ansible_vault_encrypted_unicode_0.islower()
        float_0 = -211.77652
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        list_0 = [bool_0, float_0, var_1, bool_0]
        var_3 = ansible_vault_encrypted_unicode_0.__radd__(list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_4 = ansible_vault_encrypted_unicode_1.title()
        var_5 = ansible_vault_encrypted_unicode_0.isascii()
        var_6 = ansible_vault_encrypted_unicode_0.lower()
        var_7 = ansible_vault_encrypted_unicode_0.isidentifier()
        str_0 = None
        var_8 = ansible_vault_encrypted_unicode_1.__lt__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        float_0 = -211.77652
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_2 = ansible_vault_encrypted_unicode_1.title()
        var_3 = ansible_vault_encrypted_unicode_0.isascii()
        var_4 = ansible_vault_encrypted_unicode_0.lower()
        dict_0 = {}
        var_5 = ansible_vault_encrypted_unicode_0.isidentifier()
        str_0 = 'k"\n\\9}8H3'
        var_6 = ansible_vault_encrypted_unicode_1.__contains__(str_0)
        var_7 = ansible_vault_encrypted_unicode_0.rstrip(str_0)
        var_8 = ansible_vault_encrypted_unicode_1.casefold()
        list_0 = [dict_0, var_4, ansible_vault_encrypted_unicode_0, var_0]
        list_1 = None
        var_9 = ansible_vault_encrypted_unicode_0.__eq__(list_1)
        var_10 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        var_11 = ansible_vault_encrypted_unicode_1.__unicode__()
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_12 = ansible_vault_encrypted_unicode_1.__le__(ansible_vault_encrypted_unicode_1)
        var_13 = ansible_vault_encrypted_unicode_1.__ge__(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        dict_0 = {}
        bool_0 = True
        var_0 = ansible_vault_encrypted_unicode_0.endswith(dict_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Gg'
        bytes_0 = b"\x8e\xf0'J\xac\x8c\xe9s9\xb78"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_1.find(str_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'oTMpMEAYj:HP@3DV'
        str_1 = None
        str_2 = ';O0"\r;<"N$Q 5!r'
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_2: str_0}
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.index(dict_0, ansible_unicode_0, ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ']|9V=-1Of8XA&,D>-&'
        str_1 = 'ilIkWK0}*k^]NyuF'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.rstrip()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(ansible_base_y_a_m_l_object_0)
        var_2 = ansible_vault_encrypted_unicode_0.__str__()
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_3 = ansible_vault_encrypted_unicode_1.__str__()
        dict_1 = {}
        var_4 = ansible_vault_encrypted_unicode_1.isalpha()
        bool_1 = False
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_1)
        var_5 = ansible_vault_encrypted_unicode_2.rpartition(dict_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        bool_1 = False
        float_0 = -2440.354
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_0.isascii()
        var_2 = ansible_vault_encrypted_unicode_0.lower()
        list_0 = None
        var_3 = ansible_vault_encrypted_unicode_0.__eq__(list_0)
        var_4 = ansible_vault_encrypted_unicode_1.__unicode__()
        var_5 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        var_6 = ansible_vault_encrypted_unicode_0.isdigit()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_1)
        var_7 = ansible_vault_encrypted_unicode_2.isdecimal()
        var_8 = ansible_vault_encrypted_unicode_2.capitalize()
        var_9 = ansible_vault_encrypted_unicode_2.isupper()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_10 = ansible_vault_encrypted_unicode_1.endswith(ansible_vault_encrypted_unicode_2)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'rWW;\raKzuh#^rh I>zOP'
        tuple_0 = (str_0,)
        bytes_0 = b'I\xc4\xb8\xf2\xe4\xdc\xea\xbe'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.ljust(tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'WP.7gQ'
        float_0 = 2.0
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        list_0 = [str_0]
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_2 = ansible_vault_encrypted_unicode_2.partition(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        bool_0 = False
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.__hash__()
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_3 = ansible_vault_encrypted_unicode_0.title()
        var_4 = ansible_vault_encrypted_unicode_0.isascii()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_5 = ansible_vault_encrypted_unicode_0.rindex(ansible_unicode_0)
        var_6 = ansible_vault_encrypted_unicode_0.isidentifier()
        ansible_unicode_1 = module_0.AnsibleUnicode()
        var_7 = ansible_vault_encrypted_unicode_0.count(ansible_unicode_1)
        list_0 = None
        var_8 = ansible_vault_encrypted_unicode_0.isdigit()
        var_9 = ansible_vault_encrypted_unicode_0.__eq__(list_0)
        var_10 = ansible_vault_encrypted_unicode_0.__unicode__()
        var_11 = ansible_vault_encrypted_unicode_0.__gt__(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 1000.0
        str_0 = 'Dir::Etc::sourcelist'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        list_0 = []
        int_0 = -2032
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_1 = ansible_vault_encrypted_unicode_1.rjust(float_0, *list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = "u+/~'+"
        dict_0 = {str_0: str_0, str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdecimal()
        var_1 = ansible_vault_encrypted_unicode_0.isprintable()
        list_0 = []
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
        var_2 = ansible_vault_encrypted_unicode_0.split(ansible_unicode_0)
    except BaseException:
        pass

def test_case_20():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        str_0 = '1I.Ra\\x\n\x0b#'
        list_0 = [ansible_unicode_0]
        bool_0 = True
        bytes_0 = b'\x16y\x901\xf3~'
        int_0 = 22
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(int_0)
        list_1 = [bytes_0, list_0, str_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_1.__lt__(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        float_0 = -211.77652
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_2 = ansible_vault_encrypted_unicode_1.title()
        var_3 = ansible_vault_encrypted_unicode_0.lower()
        dict_0 = {}
        var_4 = ansible_vault_encrypted_unicode_0.isidentifier()
        list_0 = [dict_0, var_3, ansible_vault_encrypted_unicode_0, var_0]
        list_1 = None
        var_5 = ansible_vault_encrypted_unicode_0.__eq__(list_1)
        var_6 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_7 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        str_0 = 'L_g/:mu[An:Z3(EGT_ '
        var_8 = ansible_vault_encrypted_unicode_0.__ge__(str_0)
        var_9 = ansible_vault_encrypted_unicode_0.__mul__(ansible_mapping_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'Fd&odS'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        str_1 = None
        var_1 = ansible_vault_encrypted_unicode_0.startswith(str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        float_0 = -2440.354
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_0.isascii()
        var_2 = ansible_vault_encrypted_unicode_0.lower()
        dict_0 = {}
        var_3 = ansible_vault_encrypted_unicode_0.isidentifier()
        list_0 = None
        var_4 = ansible_vault_encrypted_unicode_0.__eq__(list_0)
        var_5 = ansible_vault_encrypted_unicode_0.__add__(ansible_vault_encrypted_unicode_0)
        var_6 = ansible_vault_encrypted_unicode_1.__unicode__()
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        float_1 = None
        var_7 = ansible_vault_encrypted_unicode_1.__le__(float_1)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = 2130.914306
        list_0 = [float_0]
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
        set_0 = {ansible_unicode_0}
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.center(set_0, *list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        bool_1 = False
        var_1 = ansible_vault_encrypted_unicode_0.zfill(bool_1)
        var_2 = ansible_vault_encrypted_unicode_0.strip()
        var_3 = ansible_vault_encrypted_unicode_0.isprintable()
        var_4 = ansible_vault_encrypted_unicode_0.isascii()
        var_5 = ansible_vault_encrypted_unicode_0.lower()
        dict_0 = {}
        var_6 = ansible_vault_encrypted_unicode_0.isidentifier()
        list_0 = [dict_0, var_5, ansible_vault_encrypted_unicode_0, var_0]
        list_1 = None
        var_7 = ansible_vault_encrypted_unicode_0.__eq__(list_1)
        var_8 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_9 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        var_10 = ansible_vault_encrypted_unicode_0.__mul__(ansible_mapping_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 7
        list_0 = []
        int_1 = -518
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_1)
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(int_0, list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = True
        dict_0 = {}
        float_0 = 986.739
        dict_1 = {float_0: float_0, bool_0: bool_0}
        set_0 = None
        tuple_0 = (float_0, dict_1, set_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(dict_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        bool_1 = False
        var_1 = ansible_vault_encrypted_unicode_0.strip()
        list_0 = [bool_1]
        var_2 = ansible_vault_encrypted_unicode_0.format_map(list_0)
        var_3 = ansible_vault_encrypted_unicode_0.lower()
        dict_0 = {}
        list_1 = [dict_0, var_3, ansible_vault_encrypted_unicode_0, var_0]
        list_2 = None
        var_4 = ansible_vault_encrypted_unicode_0.__eq__(list_2)
        var_5 = ansible_vault_encrypted_unicode_0.__add__(list_1)
        var_6 = ansible_vault_encrypted_unicode_0.__unicode__()
        var_7 = ansible_vault_encrypted_unicode_0.isdigit()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_8 = ansible_vault_encrypted_unicode_1.isdecimal()
        var_9 = ansible_vault_encrypted_unicode_0.capitalize()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_10 = ansible_vault_encrypted_unicode_2.isupper()
        var_11 = ansible_vault_encrypted_unicode_0.rsplit()
        var_12 = ansible_vault_encrypted_unicode_0.__contains__(list_1)
    except BaseException:
        pass

def test_case_29():
    try:
        set_0 = None
        list_0 = [set_0]
        str_0 = "\n        the 'role', as specified in the ds (or as a bare string), can either\n        be a simple name or a full path. If it is a full path, we use the\n        basename as the role name, otherwise we take the name as-given and\n        append it to the default role path\n        "
        str_1 = 'lc0~\x0bW{d}"n'
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1, str_1: str_1}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.replace(list_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'UP\x0cB6b\tnv'
        dict_0 = {str_0: str_0, str_0: str_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        int_0 = 5492
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.count(ansible_mapping_0)
    except BaseException:
        pass

def test_case_31():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = "u+/~'+"
        dict_0 = {str_0: str_0, str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdecimal()
        str_1 = 'done filtering new block on tags'
        dict_1 = {str_1: str_1, str_1: str_1, str_0: str_1}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_1)
        list_0 = [str_1, str_1, str_1, dict_1]
        str_2 = '%<Hm)s'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_1 = ansible_vault_encrypted_unicode_1.isspace()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_2 = ansible_vault_encrypted_unicode_2.lower()
        str_3 = 'uTV\r\\rgO#MT-\r'
        list_1 = [var_1, str_0, str_3]
        var_3 = ansible_vault_encrypted_unicode_1.__rmod__(list_1)
        var_4 = ansible_vault_encrypted_unicode_2.__repr__()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_5 = ansible_vault_encrypted_unicode_2.__mod__(str_3)
    except BaseException:
        pass

def test_case_33():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__reversed__()
        var_1 = ansible_vault_encrypted_unicode_0.__repr__()
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_2 = ansible_vault_encrypted_unicode_1.islower()
        float_0 = -2440.354
        var_3 = ansible_vault_encrypted_unicode_1.strip()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_4 = ansible_vault_encrypted_unicode_1.isascii()
        var_5 = ansible_vault_encrypted_unicode_1.lower()
        dict_0 = {}
        var_6 = ansible_vault_encrypted_unicode_1.isidentifier()
        list_0 = [dict_0, var_5, ansible_vault_encrypted_unicode_1, var_2]
        bytes_0 = b'\xe5\x826\xec\xa3\x05p\x8d\xbdvK\xe1\xb3jo'
        var_7 = ansible_vault_encrypted_unicode_1.__eq__(bytes_0)
        var_8 = ansible_vault_encrypted_unicode_2.__add__(ansible_unicode_0)
        var_9 = ansible_vault_encrypted_unicode_0.__unicode__()
        var_10 = ansible_vault_encrypted_unicode_2.isspace()
        var_11 = ansible_vault_encrypted_unicode_1.isdigit()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.isnumeric()
        var_1 = ansible_vault_encrypted_unicode_0.islower()
        float_0 = -211.77652
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_3 = ansible_vault_encrypted_unicode_0.isascii()
        var_4 = ansible_vault_encrypted_unicode_0.lower()
        dict_0 = {}
        var_5 = ansible_vault_encrypted_unicode_0.isidentifier()
        str_0 = 'xO\x0b\\/d?6\tkzD'
        var_6 = ansible_vault_encrypted_unicode_1.join(str_0)
        list_0 = None
        var_7 = ansible_vault_encrypted_unicode_0.__eq__(list_0)
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_8 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        str_1 = 'L_g/:mu[An:Z3(EGT_ '
        var_9 = ansible_vault_encrypted_unicode_0.__ge__(str_1)
        var_10 = ansible_vault_encrypted_unicode_0.__mul__(ansible_mapping_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        float_0 = -213.02828636715577
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_2 = ansible_vault_encrypted_unicode_1.title()
        var_3 = ansible_vault_encrypted_unicode_0.isascii()
        var_4 = ansible_vault_encrypted_unicode_0.lower()
        dict_0 = {}
        var_5 = ansible_vault_encrypted_unicode_0.isidentifier()
        str_0 = 'k"\n\\9}8H3'
        var_6 = ansible_vault_encrypted_unicode_0.rstrip(str_0)
        list_0 = [dict_0, var_4, ansible_vault_encrypted_unicode_0, var_0]
        list_1 = None
        var_7 = ansible_vault_encrypted_unicode_0.__eq__(list_1)
        var_8 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        var_9 = ansible_vault_encrypted_unicode_1.__unicode__()
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_10 = ansible_vault_encrypted_unicode_1.__ge__(ansible_vault_encrypted_unicode_0)
        var_11 = ansible_vault_encrypted_unicode_1.__ge__(dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        bool_1 = False
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_0.isascii()
        dict_0 = {}
        var_3 = ansible_vault_encrypted_unicode_0.isdecimal()
        str_0 = 'k"\n\\9}8H3'
        var_4 = ansible_vault_encrypted_unicode_0.rstrip(str_0)
        list_0 = [dict_0, bool_1, ansible_vault_encrypted_unicode_0, var_0]
        list_1 = None
        var_5 = ansible_vault_encrypted_unicode_0.__eq__(list_1)
        var_6 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_7 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        var_8 = ansible_vault_encrypted_unicode_0.find(ansible_vault_encrypted_unicode_0)
        dict_1 = {}
        var_9 = ansible_vault_encrypted_unicode_0.__lt__(dict_1)
    except BaseException:
        pass

def test_case_37():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        bool_1 = False
        float_0 = -211.77652
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        str_0 = '*5s4Yk`?fO'
        var_2 = ansible_vault_encrypted_unicode_1.__ne__(str_0)
        var_3 = ansible_vault_encrypted_unicode_1.isprintable()
        var_4 = ansible_vault_encrypted_unicode_1.isalnum()
        var_5 = ansible_vault_encrypted_unicode_1.title()
        var_6 = ansible_vault_encrypted_unicode_0.rsplit()
        var_7 = ansible_vault_encrypted_unicode_0.isascii()
        dict_0 = {}
        var_8 = ansible_vault_encrypted_unicode_0.isdecimal()
        str_1 = 'k"\n\\9}8H3'
        var_9 = ansible_vault_encrypted_unicode_1.__contains__(str_1)
        var_10 = ansible_vault_encrypted_unicode_0.rstrip(str_1)
        list_0 = [dict_0, bool_1, ansible_vault_encrypted_unicode_0, var_0]
        list_1 = None
        var_11 = ansible_vault_encrypted_unicode_0.istitle()
        var_12 = ansible_vault_encrypted_unicode_0.__eq__(list_1)
        var_13 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_14 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        var_15 = ansible_vault_encrypted_unicode_0.rfind(ansible_vault_encrypted_unicode_1, list_0)
    except BaseException:
        pass

def test_case_38():
    try:
        ansible_mapping_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        str_0 = 'Hb&\\Sc\rMrZnd>h='
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_1.__contains__(ansible_vault_encrypted_unicode_0)
        bytes_0 = b'\xcfF&H'
        str_1 = '/I+'
        dict_0 = {}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_2.count(bytes_0, str_1)
    except BaseException:
        pass

def test_case_39():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        var_1 = ansible_vault_encrypted_unicode_0.__repr__()
        bool_1 = False
        var_2 = ansible_vault_encrypted_unicode_0.splitlines()
        float_0 = -211.77652
        bool_2 = False
        var_3 = ansible_vault_encrypted_unicode_0.__getslice__(bool_2, float_0)
        var_4 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        list_0 = [float_0, ansible_vault_encrypted_unicode_1, bool_1]
        set_0 = {var_0, ansible_vault_encrypted_unicode_1, var_0, bool_1}
        var_5 = ansible_vault_encrypted_unicode_1.replace(list_0, set_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        var_1 = ansible_vault_encrypted_unicode_0.islower()
        var_2 = ansible_vault_encrypted_unicode_0.__hash__()
        var_3 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_4 = ansible_vault_encrypted_unicode_0.title()
        var_5 = ansible_vault_encrypted_unicode_0.isascii()
        var_6 = ansible_vault_encrypted_unicode_0.isidentifier()
        str_0 = 'k6\nN}?8H3'
        var_7 = ansible_vault_encrypted_unicode_0.__contains__(str_0)
        var_8 = ansible_vault_encrypted_unicode_0.rstrip(str_0)
        list_0 = None
        var_9 = ansible_vault_encrypted_unicode_0.__eq__(list_0)
        float_0 = 1819.3
        var_10 = ansible_vault_encrypted_unicode_0.__rmod__(float_0)
        var_11 = ansible_vault_encrypted_unicode_0.__unicode__()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_12 = ansible_vault_encrypted_unicode_0.__gt__(ansible_vault_encrypted_unicode_0)
        var_13 = ansible_vault_encrypted_unicode_0.isdigit()
        int_1 = -2895
        var_14 = ansible_vault_encrypted_unicode_0.__ge__(int_1)
    except BaseException:
        pass