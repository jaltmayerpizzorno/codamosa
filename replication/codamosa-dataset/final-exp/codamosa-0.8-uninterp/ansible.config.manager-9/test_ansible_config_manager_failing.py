# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        dict_0 = {}
        list_0 = []
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_vars(dict_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '/path/to/ini/file.ini'
        var_0 = module_0.get_config_type(str_0)
        str_1 = '/pth/to/yaml/file.yaml'
        var_1 = module_0.get_config_type(str_1)
        str_2 = '/path/to/other/file.txt'
        var_2 = module_0.get_config_type(str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "6E'p(_$>heW47M;5d|7?"
        dict_0 = {str_0: str_0}
        config_manager_0 = module_0.ConfigManager(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        float_0 = -2687.0
        str_0 = '3xg-^1<5F/0G% |v'
        str_1 = None
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_options(float_0, str_0, str_1)
        var_1 = config_manager_0.update_config_data()
        str_2 = 'C'
        set_0 = {bool_0}
        config_manager_1 = module_0.ConfigManager(str_2, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = b'n\x04\xd0Y\x90\x00\xebO'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_options(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'i-i7;Ztwsc'
        int_0 = -4048
        var_0 = config_manager_0.get_plugin_vars(str_0, int_0)
        int_1 = -654
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(str_0, int_1, int_1)
        setting_0 = module_0.Setting()
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definition(tuple_0)
        str_0 = 'ez\rf4=z@*E/'
        var_1 = module_0.find_ini_config_file(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definition(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "-]))'z#"
        set_0 = {str_0}
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definition(str_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b''
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -606
        list_0 = [int_0, int_0]
        var_0 = module_0.get_ini_config_value(list_0, int_0)
        dict_0 = None
        set_0 = {var_0}
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_config_value(dict_0, set_0, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'i-i7;Ztwsc'
        int_0 = -4048
        var_0 = config_manager_0.get_plugin_vars(str_0, int_0)
        int_1 = -654
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(str_0, int_1, int_1)
        var_2 = config_manager_0.update_config_data()
        list_0 = []
        var_3 = config_manager_0.update_config_data(list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        config_manager_0 = module_0.ConfigManager()
        int_0 = None
        bytes_0 = b'\x87\xadM'
        var_0 = module_0.get_ini_config_value(int_0, bytes_0)
        str_0 = '37y@vH@[U;l\x0c[q`"O3'
        int_1 = -4048
        var_1 = config_manager_0.get_plugin_vars(str_0, int_1)
        str_1 = None
        list_0 = None
        str_2 = '}3xT4Ens?am\nz'
        var_2 = module_0.get_ini_config_value(int_1, list_0)
        dict_0 = {str_2: int_1, str_2: config_manager_0, str_1: str_1, str_2: str_2}
        config_manager_1 = module_0.ConfigManager()
        int_2 = None
        int_3 = -1625
        var_3 = config_manager_0.get_plugin_vars(int_2, int_3)
        var_4 = config_manager_0.update_config_data(int_0, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xb0\xa2\xb2\xd9'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value_and_origin(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        config_manager_0 = module_0.ConfigManager()
        int_0 = -4048
        str_0 = None
        tuple_0 = ()
        list_0 = None
        var_0 = config_manager_0.get_plugin_vars(list_0, list_0)
        list_1 = None
        str_1 = '}3xT4Ens?am\nz'
        str_2 = ' sub class for lists '
        dict_0 = {str_2: int_0, str_2: config_manager_0, str_0: str_0, str_1: str_1}
        var_1 = config_manager_0.get_config_value_and_origin(tuple_0, config_manager_0, list_1, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        config_manager_0 = module_0.ConfigManager()
        bool_0 = True
        var_0 = config_manager_0.get_configuration_definition(bool_0)
        config_manager_1 = module_0.ConfigManager()
        int_0 = 3888
        bool_1 = True
        var_1 = config_manager_0.get_config_value(int_0, int_0, bool_1)
    except BaseException:
        pass

def test_case_16():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'i-i7;Ztwsc'
        bool_0 = True
        var_0 = config_manager_0.get_configuration_definition(bool_0)
        config_manager_1 = module_0.ConfigManager()
        bytes_0 = b'\xae\xa6E\xa3\xd8>J\x9d\x93\xe1\xd8\xb5\xb9\xb4'
        float_0 = 1613.89445
        var_1 = config_manager_1.get_config_value(bytes_0, config_manager_0, float_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = '37y@vH@[U;l\x0c[q`"O3'
        int_0 = -4048
        var_0 = config_manager_0.get_plugin_vars(str_0, int_0)
        bool_0 = True
        var_1 = config_manager_0.get_configuration_definition(bool_0)
        bool_1 = True
        config_manager_1 = module_0.ConfigManager()
        bytes_0 = b'>\xa3\xabL\x0b]\x14Wk\xf7\xbc\x18'
        tuple_0 = (bytes_0, bool_1)
        var_2 = config_manager_1.update_config_data(tuple_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        config_manager_0 = module_0.ConfigManager()
        tuple_0 = ()
        bool_0 = True
        var_0 = config_manager_0.get_configuration_definition(bool_0)
        str_0 = '\n    name: fileglob\n    author: Michael DeHaan\n    version_added: "1.4"\n    short_description: list files matching a pattern\n    description:\n        - Matches all files in a single directory, non-recursively, that match a pattern.\n          It calls Python\'s "glob" library.\n    options:\n      _terms:\n        description: path(s) of files to read\n        required: True\n    notes:\n      - Patterns are only supported on files, not directory/paths.\n      - Matching is against local system files on the Ansible controller.\n        To iterate a list of files on a remote node, use the M(ansible.builtin.find) module.\n      - Returns a string list of paths joined by commas, or an empty list if no files match. For a \'true list\' pass C(wantlist=True) to the lookup.\n'
        bytes_0 = b'<\x82'
        bool_1 = True
        var_1 = config_manager_0.get_configuration_definitions(str_0, bytes_0, bool_1)
        int_0 = 574
        var_2 = config_manager_0.get_config_value(tuple_0, int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'i-i7;Ztwsc'
        str_1 = '37y@vH@[U;l\x0c[q`"O3'
        int_0 = -4048
        str_2 = None
        list_0 = None
        str_3 = '}3xT4Ens?am\nz'
        var_0 = module_0.get_ini_config_value(int_0, list_0)
        bool_0 = True
        var_1 = config_manager_0.get_configuration_definition(bool_0)
        str_4 = 'NHceIRN:46'
        dict_0 = {str_0: str_1, str_3: int_0, str_4: config_manager_0, str_2: str_2, str_3: str_3, str_4: list_0}
        var_2 = config_manager_0.get_plugin_options(list_0, dict_0, config_manager_0)
    except BaseException:
        pass

def test_case_20():
    try:
        config_manager_0 = module_0.ConfigManager()
        float_0 = -3548.33
        set_0 = {config_manager_0}
        bool_0 = False
        var_0 = config_manager_0.get_configuration_definition(float_0, set_0, bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'i-i7;Ztwsc'
        str_1 = '>@%b/S:\\\r'
        int_0 = -4048
        str_2 = None
        list_0 = None
        str_3 = '}3xT4Ens?am\nz'
        var_0 = module_0.get_ini_config_value(int_0, list_0)
        bool_0 = True
        dict_0 = {str_3: str_1, str_1: int_0}
        var_1 = config_manager_0.get_plugin_options(list_0, dict_0, dict_0)
        var_2 = config_manager_0.get_configuration_definition(bool_0)
        str_4 = 'NHceIRN:46'
        dict_1 = {str_0: str_1, str_3: int_0, str_4: config_manager_0, str_2: str_2, str_3: str_3, str_4: list_0}
        dict_2 = {str_2: config_manager_0, str_3: str_4, str_3: bool_0}
        list_1 = [dict_2, int_0, int_0]
        config_manager_1 = module_0.ConfigManager()
        int_1 = None
        int_2 = -1625
        var_3 = config_manager_0.get_plugin_vars(int_1, int_2)
        var_4 = config_manager_1.get_config_value(dict_1, list_1, dict_1)
    except BaseException:
        pass

def test_case_22():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = '37y@vH@[U;l\x0c[q`"O3'
        int_0 = -4048
        var_0 = config_manager_0.get_plugin_vars(str_0, int_0)
        str_1 = None
        list_0 = None
        str_2 = '}3xT4Ens?am\nz'
        bool_0 = True
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(str_0, list_0, bool_0)
        var_2 = config_manager_0.get_configuration_definition(bool_0)
        str_3 = 'NHceIRN:46'
        dict_0 = {str_2: int_0, str_3: config_manager_0, str_1: str_1, str_2: str_2}
        dict_1 = {str_1: config_manager_0, str_2: str_3, str_2: bool_0}
        config_manager_1 = module_0.ConfigManager()
        int_1 = None
        int_2 = -1625
        bytes_0 = b'<\x82'
        bool_1 = True
        var_3 = config_manager_1.get_configuration_definitions(str_1, bytes_0, bool_1)
        var_4 = config_manager_0.get_plugin_vars(int_1, int_2)
        var_5 = module_0.find_ini_config_file()
        complex_0 = None
        var_6 = config_manager_1.get_config_value(dict_0, complex_0, dict_1)
    except BaseException:
        pass