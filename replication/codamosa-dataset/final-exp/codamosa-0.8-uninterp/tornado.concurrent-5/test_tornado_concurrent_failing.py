# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import _asyncio as module_1
import concurrent.futures._base as module_2

def test_case_0():
    try:
        callable_0 = None
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_0.shutdown()
        dummy_executor_1 = module_0.DummyExecutor()
        bool_0 = False
        dummy_executor_1.shutdown(bool_0)
        dummy_executor_1.shutdown()
        future_0 = dummy_executor_1.submit(callable_0)
        future_1 = dummy_executor_1.submit(callable_0)
        future_2 = module_1.Future()
    except BaseException:
        pass

def test_case_1():
    try:
        future_0 = module_2.Future()
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        dummy_executor_0 = module_0.DummyExecutor()
        future_1 = dummy_executor_0.submit(future_0)
        dummy_executor_0.shutdown()
        dummy_executor_0.shutdown()
        dict_0 = {}
        callable_0 = module_0.run_on_executor(**dict_0)
        module_0.future_add_done_callback(future_1, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_0.shutdown()
        str_0 = 'u\x0cTzv\x0b=-'
        bool_0 = True
        list_0 = [bool_0, str_0]
        callable_0 = module_0.run_on_executor(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        future_0 = module_2.Future()
        dummy_executor_0 = module_0.DummyExecutor()
        list_0 = [dummy_executor_0]
        callable_0 = module_0.run_on_executor(*list_0)
        dummy_executor_1 = module_0.DummyExecutor()
        future_1 = None
        module_0.chain_future(future_1, future_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 294.85759
        dummy_executor_0 = module_0.DummyExecutor()
        future_0 = dummy_executor_0.submit(float_0)
        tuple_0 = (future_0,)
        list_0 = [tuple_0, dummy_executor_0]
        str_0 = 'KU:#2;q[y7pq<b, '
        str_1 = 'nnwcm'
        str_2 = '`|L(E_DhAg`e'
        dict_0 = {str_0: tuple_0, str_1: str_0, str_2: dummy_executor_0}
        callable_0 = module_0.run_on_executor(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        future_0 = module_2.Future()
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        dummy_executor_0 = module_0.DummyExecutor()
        future_1 = dummy_executor_0.submit(future_0)
        dict_0 = {}
        optional_0 = None
        str_0 = 'k%*/.vQG>O!-aS^'
        list_0 = [dict_0, future_0, dummy_executor_0, future_1]
        int_0 = None
        float_0 = 1158.75
        tuple_0 = (str_0, list_0, int_0, float_0)
        tuple_1 = (dict_0, optional_0, tuple_0)
        module_0.future_set_exc_info(future_1, tuple_1)
    except BaseException:
        pass

def test_case_6():
    try:
        future_0 = module_2.Future()
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_0.shutdown()
        list_0 = [future_0, future_0, dummy_executor_0]
        dummy_executor_0.shutdown()
        dict_0 = {}
        callable_0 = module_0.run_on_executor(**dict_0)
        module_0.future_add_done_callback(future_0, dict_0)
        callable_1 = module_0.run_on_executor()
        bool_0 = None
        dummy_executor_0.shutdown(bool_0)
        future_1 = module_1.Future(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_8():
    try:
        future_0 = module_2.Future()
        dummy_executor_0 = module_0.DummyExecutor()
        bytes_0 = b'\xb8\xe1\x17[\xf8.\x95\x12\xa0h\xf1\x18\xc1\x86)\xb2\xecn\xbb'
        list_0 = [dummy_executor_0]
        callable_0 = module_0.run_on_executor(*list_0)
        module_0.future_add_done_callback(future_0, callable_0)
        callable_1 = module_0.run_on_executor(*list_0)
        dummy_executor_1 = module_0.DummyExecutor()
        module_0.future_set_result_unless_cancelled(future_0, bytes_0)
        str_0 = None
        str_1 = 'RlqY`)njpl]\x0c] IOX'
        str_2 = '/y6NZ"*'
        str_3 = ':.5#-C,9\r0O,mI'
        str_4 = 'Sets the default executor to use with :meth:`run_in_executor`.\n\n        .. versionadded:: 5.0\n        '
        future_1 = None
        list_1 = [str_0, future_1, bytes_0]
        dict_0 = {str_1: future_0, str_2: str_2, str_3: bytes_0, str_4: list_1}
        future_2 = dummy_executor_0.submit(str_0, *list_0, **dict_0)
        module_0.chain_future(future_1, future_1)
    except BaseException:
        pass