# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    str_0 = 'iq%E3y4>WV%Hx.3Fr\x0b!'
    bool_0 = module_0.is_isbn_13(str_0)

def test_case_1():
    str_0 = 'czluw4#1w{$jp'
    bool_0 = module_0.is_isbn_13(str_0)

def test_case_2():
    str_0 = '{name": "Peter"}'
    bool_0 = module_0.is_json(str_0)
    str_1 = '1936091295'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1, bool_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_10()

def test_case_3():
    str_0 = 'is_isbn_13'
    bool_0 = False
    bool_1 = module_0.is_isbn_13(str_0, bool_0)
    bool_2 = module_0.contains_html(str_0)
    bool_3 = module_0.is_isbn(str_0)

def test_case_4():
    str_0 = '6P'
    bool_0 = module_0.is_isbn(str_0)
    bool_1 = module_0.is_isogram(str_0)
    str_1 = 'j\\wY%D0RrP['
    bool_2 = module_0.is_number(str_1)

def test_case_5():
    str_0 = "\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    "
    bool_0 = module_0.is_full_string(str_0)

def test_case_6():
    str_0 = "\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    "
    bool_0 = module_0.is_integer(str_0)
    bool_1 = module_0.is_full_string(str_0)

def test_case_7():
    str_0 = '\n    Custom error raised when received object is not a string as expected.\n    '
    bool_0 = module_0.is_decimal(str_0)
    str_1 = '.rW@hz 0CY`P^:m'
    bool_1 = module_0.is_pangram(str_1)
    bool_2 = None
    bool_3 = module_0.is_isbn(str_1, bool_2)
    str_2 = 'stop'
    bool_4 = True
    bool_5 = module_0.is_isbn_13(str_2, bool_4)

def test_case_8():
    int_0 = -212
    str_0 = 'YFRptg $w(z/{+zoOz'
    bool_0 = module_0.is_slug(int_0, str_0)
    str_1 = "1\x0bB\n \\c?'h"
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_13()
    set_0 = {str_1, str_1, str_1}
    bool_2 = module_0.is_isogram(set_0)
    str_2 = '`/M^$V)k'
    bool_3 = module_0.is_url(str_2)

def test_case_9():
    int_0 = 988
    bool_0 = module_0.is_uuid(int_0)
    str_0 = ''
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    str_1 = '['
    bool_1 = module_0.contains_html(str_1)
    str_2 = '((?<=\\S)\\+(?=\\S)|(?<=\\S)\\+\\s|\\s\\+(?=\\S)|(?<=\\S)-(?=\\S)|(?<=\\S)-\\s|\\s-(?=\\S)|(?<=\\S)/(?=\\S)|(?<=\\S)/\\s|\\s/(?=\\S)|(?<=\\S)\\*(?=\\S)|(?<=\\S)\\*\\s|\\s\\*(?=\\S)|(?<=\\S)=(?=\\S)|(?<=\\S)=\\s|\\s=(?=\\S)|\\s"[^"]+"(?=[^\\s?.:!,;])|(?<=\\S)"[^"]+"\\s|(?<=\\S)"[^"]+"(?=[^\\s?.:!,;])|\\s\\([^)]+\\)(?=[^\\s?.:!,;])|(?<=\\S)\\([^)]+\\)\\s|(?<=\\S)(\\([^)]+\\))(?=[^\\s?.:!,;]))'
    str_3 = '|=2yR\nlov'
    str_4 = 'q&\n\\$7i7_$6A@'
    list_0 = [str_3, str_4, str_1, str_4]
    bool_2 = module_0.is_isogram(list_0)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_4)
    bool_3 = i_s_b_n_checker_1.is_isbn_10()
    bool_4 = module_0.is_url(str_2, list_0)
    bool_5 = False
    bool_6 = module_0.is_uuid(str_2, bool_5)
    int_1 = module_0.words_count(str_2)

def test_case_10():
    str_0 = 'qof;\tS)y\tV2L?sQ^0h'
    list_0 = []
    bool_0 = module_0.is_url(list_0)
    bool_1 = module_0.is_email(str_0)

def test_case_11():
    str_0 = 'qof;\tS)y\tV2L?sQ^0h'
    bool_0 = module_0.is_email(str_0)

def test_case_12():
    str_0 = "\n    Convert a camel case string into a snake case one.\n    (The original string is returned if is not a valid camel case string)\n\n    *Example:*\n\n    >>> camel_case_to_snake('ThisIsACamelStringTest') # returns 'this_is_a_camel_case_string_test'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign to use as separator.\n    :type separator: str\n    :return: Converted string.\n    "
    bool_0 = module_0.is_email(str_0)

def test_case_13():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip(str_0)
    str_1 = '2001:db8:85a3:0000:0000:8a2e:370:7334'
    bool_1 = module_0.is_ip(str_1)
    str_2 = '1.2.3'
    bool_2 = module_0.is_credit_card(str_2)

def test_case_14():
    tuple_0 = ()
    bool_0 = module_0.is_credit_card(tuple_0)

def test_case_15():
    str_0 = 'VISA'
    bool_0 = module_0.is_credit_card(str_0, str_0)
    str_1 = '5105105105105100'
    str_2 = 'MASTERCARD'
    bool_1 = module_0.is_credit_card(str_1, str_2)
    str_3 = '341111111111111'
    str_4 = 'AMERICAN_EXPRESS'
    bool_2 = module_0.is_credit_card(str_3, str_4)
    str_5 = '6011111111111117'
    bool_3 = module_0.is_credit_card(str_5, str_4)

def test_case_16():
    set_0 = set()
    bool_0 = module_0.is_pangram(set_0)
    bytes_0 = b'J\x04'
    bool_1 = module_0.is_uuid(bytes_0)
    bool_2 = module_0.is_string(bytes_0)
    bool_3 = module_0.is_snake_case(bytes_0)
    str_0 = 'L'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_4 = i_s_b_n_checker_0.is_isbn_10()
    bool_5 = module_0.is_pangram(bytes_0)

def test_case_17():
    str_0 = '3ddDWl3'
    bool_0 = module_0.contains_html(str_0)
    bytes_0 = b''
    bool_1 = module_0.is_json(bytes_0)
    bool_2 = module_0.is_url(bytes_0)
    str_1 = 'step'
    bool_3 = module_0.is_integer(str_1)
    bool_4 = module_0.is_uuid(bool_3)
    bool_5 = module_0.is_isogram(str_1)
    bool_6 = module_0.is_snake_case(str_1)
    str_2 = 'asciify'
    bool_7 = module_0.is_integer(str_2)
    bool_8 = module_0.is_ip(str_2)
    bool_9 = module_0.is_uuid(bool_6)
    bool_10 = module_0.is_isbn(str_1)

def test_case_18():
    str_0 = ': iJ@rbZJ1='
    bool_0 = module_0.contains_html(str_0)
    bool_1 = module_0.is_json(str_0)
    bool_2 = module_0.is_isogram(str_0)

def test_case_19():
    bytes_0 = b'\xe7\x91\xeeXkz\x89@\x11\x98\xf4\xda7'
    bool_0 = module_0.is_uuid(bytes_0)

def test_case_20():
    str_0 = '8~!.L[n.\n$vz_\r6;'
    bool_0 = False
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_10()
    bool_2 = module_0.is_ip_v4(i_s_b_n_checker_0)
    str_1 = '6Q@zJ!hw6zK"1M_c'
    list_0 = [str_1]
    bool_3 = module_0.is_isbn(str_1)
    bool_4 = module_0.is_ip(str_1)
    bool_5 = module_0.is_uuid(list_0)
    bool_6 = module_0.is_credit_card(list_0)
    bool_7 = module_0.is_palindrome(str_0, bool_1)
    bool_8 = True
    bool_9 = module_0.is_uuid(bool_6, bool_8)
    bool_10 = module_0.is_json(str_1)
    bool_11 = module_0.is_number(str_1)
    bool_12 = module_0.is_isbn(str_1)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_1, bool_5)

def test_case_21():
    bytes_0 = b'#q'
    bool_0 = module_0.is_ip_v4(bytes_0)

def test_case_22():
    float_0 = 1197.4
    bool_0 = module_0.is_ip(float_0)
    bool_1 = module_0.is_credit_card(float_0)

def test_case_23():
    str_0 = 'a'
    bool_0 = module_0.is_palindrome(str_0)

def test_case_24():
    int_0 = 13
    bool_0 = module_0.is_uuid(int_0)
    bool_1 = module_0.is_uuid(int_0)
    bool_2 = module_0.is_email(int_0)
    bool_3 = module_0.is_palindrome(bool_2)

def test_case_25():
    str_0 = '9780553801477'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    str_1 = '3}5@gmail.cot'
    str_2 = '"my.email"@the-provider.com'
    bool_0 = True
    bool_1 = module_0.is_palindrome(str_1, bool_0)
    str_3 = '"my.e\\@mail"@the-provider.com'
    bool_2 = module_0.is_email(str_2)
    int_0 = module_0.words_count(str_3)
    bool_3 = module_0.is_email(str_3)

def test_case_26():
    str_0 = '3 K7*z\x0b'
    int_0 = module_0.words_count(str_0)
    bool_0 = module_0.is_json(int_0)
    bool_1 = module_0.is_palindrome(str_0)
    str_1 = "NEES$*Dy\x0cnJA8'VY\tZ<&"
    bool_2 = module_0.contains_html(str_1)

def test_case_27():
    str_0 = 'utf-8'
    bool_0 = module_0.is_pangram(str_0)

def test_case_28():
    str_0 = 'yrA/zE-~(Zv*9O\tR'
    bool_0 = module_0.is_slug(str_0)

def test_case_29():
    str_0 = ': iJ@rbZJ1='
    bool_0 = module_0.contains_html(str_0)

def test_case_30():
    str_0 = '09BV{;?.l)c_6;%'
    int_0 = module_0.words_count(str_0)

def test_case_31():
    str_0 = '>ARAa#\tm)xo2'
    bool_0 = False
    bool_1 = module_0.is_isbn_10(str_0, bool_0)
    str_1 = '\x0b?4\tgnS;qA?Wq"%<'
    str_2 = '.S|E\tZF)q%*~GRSt^'
    list_0 = [str_0, str_1, str_0, str_2]
    bool_2 = module_0.is_url(bool_1, list_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_3 = i_s_b_n_checker_0.is_isbn_13()

def test_case_32():
    str_0 = 'D=\\4Ph\\CAaAu)'
    bool_0 = module_0.is_integer(str_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_13()

def test_case_33():
    str_0 = 'utf-8'
    bool_0 = module_0.is_pangram(str_0)
    bool_1 = module_0.is_ip(str_0)

def test_case_34():
    float_0 = -2633.3
    bool_0 = module_0.is_ip(float_0)
    bool_1 = module_0.is_email(bool_0)
    bool_2 = module_0.is_isogram(float_0)
    bool_3 = module_0.is_string(float_0)
    set_0 = {float_0, float_0, bool_2}
    bool_4 = module_0.is_uuid(bool_1)
    bool_5 = module_0.is_credit_card(set_0)
    bool_6 = module_0.is_palindrome(float_0)
    bool_7 = module_0.is_pangram(float_0)
    str_0 = 'SJ\rBR6jkq_'
    bool_8 = module_0.is_integer(str_0)
    bool_9 = module_0.contains_html(str_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_10 = i_s_b_n_checker_0.is_isbn_10()
    bool_11 = module_0.is_json(bool_0)
    bool_12 = module_0.is_url(bool_0)
    bool_13 = module_0.is_ip_v4(bool_1)
    str_1 = '8'
    bool_14 = module_0.is_decimal(str_1)
    str_2 = 'is_number'
    bool_15 = module_0.is_isbn(str_2)

def test_case_35():
    str_0 = 'my.email@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = '@gmail.com'
    bool_1 = module_0.is_email(str_1)
    bool_2 = module_0.is_email(str_1)

def test_case_36():
    str_0 = 'nopRe'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = '255.200.100.999'
    bool_1 = module_0.is_ip_v4(str_1)

def test_case_37():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip(str_0)
    str_1 = '2001:db8:85a3:0000:0000:8a2e:370:7334'
    bool_1 = module_0.is_ip_v4(str_1)
    str_2 = '255.200.100.999'
    bool_2 = module_0.is_ip_v4(str_2)

def test_case_38():
    str_0 = '42'
    bool_0 = module_0.is_integer(str_0)
    str_1 = '42.0'
    bool_1 = module_0.is_integer(str_1)

def test_case_39():
    str_0 = 'http://www.google.com'
    bool_0 = module_0.is_url(str_0)
    str_1 = 'https://www.google.com'
    bool_1 = module_0.is_url(str_1)
    str_2 = 'ftp://ftp.google.com'
    bool_2 = module_0.is_url(str_2)
    str_3 = 'http://www.google.com/'
    str_4 = 'http'
    str_5 = [str_4]
    bool_3 = module_0.is_url(str_3, str_5)
    str_6 = 'https'
    str_7 = 'ftp'
    str_8 = [str_6, str_7]
    bool_4 = module_0.is_url(str_3, str_8)
    str_9 = 'malformedurl.com'
    bool_5 = module_0.is_url(str_9)
    str_10 = './relativeurl'
    bool_6 = module_0.is_url(str_10)
    str_11 = 'https:/'
    bool_7 = module_0.is_url(str_11)
    str_12 = 'google.com'
    bool_8 = module_0.is_url(str_12)
    str_13 = [str_6]
    bool_9 = module_0.is_url(str_12, str_13)

def test_case_40():
    str_0 = '978-0-306-40615-7'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = i_s_b_n_checker_0.is_isbn_13()

def test_case_41():
    set_0 = set()
    bool_0 = module_0.is_full_string(set_0)
    str_0 = '978-0312498580'
    bool_1 = module_0.is_isbn(str_0)
    bool_2 = False
    bool_3 = module_0.is_isbn(str_0, bool_2)
    str_1 = '1506715214'
    bool_4 = module_0.is_isbn(str_1)

def test_case_42():
    str_0 = 'my.email@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = '@gmail.com'
    bool_1 = module_0.is_email(str_1)
    bool_2 = module_0.is_email(str_1)
    bool_3 = module_0.is_email(str_1)
    bool_4 = module_0.is_email(str_0)
    str_2 = 'john..smith@domain.org'
    bool_5 = module_0.is_email(str_1)
    bool_6 = module_0.is_email(str_2)
    bool_7 = module_0.is_email(bool_0)
    bool_8 = module_0.is_email(bool_1)

def test_case_43():
    str_0 = 'my.email@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = 'john.smith@domain.org'
    bool_1 = module_0.is_email(str_1)
    bool_2 = module_0.is_email(str_1)
    bool_3 = module_0.is_email(str_1)
    str_2 = ''
    bool_4 = module_0.is_email(str_2)
    str_3 = ' '
    bool_5 = module_0.is_email(str_3)
    str_4 = 'john.smith@domain'
    bool_6 = module_0.is_email(str_4)
    str_5 = 'john.smith@domain.'
    bool_7 = module_0.is_email(str_5)
    str_6 = 'john..smith@domain.org'
    bool_8 = module_0.is_email(str_6)
    str_7 = 'john.smith.@domain.org'
    bool_9 = module_0.is_email(str_7)
    str_8 = 'john.smith@domain.org.'
    bool_10 = module_0.is_email(str_8)
    str_9 = 'john.smith@domain.org#'
    bool_11 = module_0.is_email(str_9)

def test_case_44():
    str_0 = 'otto'
    bool_0 = module_0.is_palindrome(str_0)
    str_1 = 'i topi non avevano nipoti'
    bool_1 = module_0.is_palindrome(str_1)
    str_2 = 'ROTFL'
    bool_2 = module_0.is_palindrome(str_2)
    str_3 = 'i topi nO nAvevano nipoti'
    bool_3 = True
    bool_4 = module_0.is_palindrome(str_3, bool_3, bool_3)
    str_4 = 'uV\\F)2Xud{'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_4)

def test_case_45():
    str_0 = 'otto'
    bool_0 = module_0.is_palindrome(str_0)
    str_1 = 'i topi non avevano nipoti'
    bool_1 = module_0.is_palindrome(str_1)
    str_2 = 'ROTFL'
    bool_2 = module_0.is_palindrome(str_2)
    str_3 = 'i topi nO nAvevano nipoti'
    bool_3 = True
    bool_4 = module_0.is_palindrome(str_3, bool_3, bool_3)
    bool_5 = module_0.is_email(bool_0)
    bool_6 = module_0.is_email(str_0)
    bool_7 = module_0.is_email(str_1)
    str_4 = '"abc\\ def@gmail.com'
    bool_8 = module_0.is_email(bool_5)
    bool_9 = module_0.is_email(str_4)

def test_case_46():
    str_0 = ''
    bool_0 = module_0.is_email(str_0)
    str_1 = '@'
    bool_1 = module_0.is_email(str_1)
    str_2 = '@gmail.com'
    bool_2 = module_0.is_email(str_2)
    str_3 = '.gmail.com'
    bool_3 = module_0.is_email(str_3)
    str_4 = 'my@email@gmail.com'
    bool_4 = module_0.is_email(str_4)
    bool_5 = module_0.is_ip_v4(bool_1)
    bool_6 = module_0.is_ip_v4(str_3)