# Automatically generated by Pynguin.
import ansible.playbook.role.metadata as module_0

def test_case_0():
    try:
        str_0 = 'dependencies'
        bool_0 = False
        str_1 = {}
        var_0 = {str_0: bool_0, str_0: str_1}
        role_metadata_0 = module_0.RoleMetadata(str_0)
        var_1 = role_metadata_0.load(var_0, bool_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        int_0 = 575
        list_0 = [int_0]
        role_metadata_0 = module_0.RoleMetadata()
        var_0 = role_metadata_0.load(bool_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        role_metadata_0 = module_0.RoleMetadata()
        var_0 = role_metadata_0.serialize()
        str_0 = 'GaEm#rj@^='
        tuple_0 = (str_0,)
        var_1 = role_metadata_0.deserialize(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'allow_duplicates'
        str_1 = 'dependencies'
        bool_0 = True
        str_2 = 'nole'
        str_3 = {}
        str_4 = ''
        str_5 = {str_2: str_4}
        dict_0 = {}
        role_metadata_0 = module_0.RoleMetadata()
        var_0 = role_metadata_0.deserialize(dict_0)
        str_6 = [str_3, str_5, str_0, str_3]
        var_1 = {str_0: bool_0, str_1: str_6}
        var_2 = None
        role_metadata_1 = module_0.RoleMetadata(var_2)
        var_3 = role_metadata_1.load(var_1, var_2, var_2, var_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'allow_duplicates'
        str_1 = 'dependencies'
        bool_0 = True
        str_2 = 'roQl!'
        role_metadata_0 = module_0.RoleMetadata()
        dict_0 = {str_0: str_2}
        str_3 = '\n        Given a dictionary of values, load up the field attributes for\n        this object. As with serialize(), if there are any non-field\n        attribute data members, this method will need to be overridden\n        and extended.\n        '
        int_0 = 581
        list_0 = [dict_0, int_0, bool_0]
        var_0 = role_metadata_0.load(dict_0, str_3, list_0)
        str_4 = 'geringguy.aache'
        str_5 = {str_2: str_4}
        str_6 = [str_4, str_5]
        var_1 = {str_0: bool_0, str_1: str_6}
        var_2 = None
        role_metadata_1 = module_0.RoleMetadata(var_2)
        var_3 = role_metadata_1.load(var_1, var_2, var_2, var_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'dependencies'
        bool_0 = True
        str_1 = 'geerlingguy.java'
        str_2 = {str_0: str_0}
        str_3 = [str_2, str_1, str_2, str_1]
        var_0 = {str_0: bool_0, str_0: str_3}
        role_metadata_0 = module_0.RoleMetadata(str_2)
        var_1 = role_metadata_0.load(var_0, bool_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'allow_duplicates'
        str_1 = 'dependencies'
        bool_0 = True
        str_2 = 'role'
        str_3 = {}
        str_4 = ''
        str_5 = {str_2: str_4}
        str_6 = [str_3, str_5, str_0, str_3]
        var_0 = {str_0: bool_0, str_1: str_6}
        var_1 = None
        role_metadata_0 = module_0.RoleMetadata(var_1)
        var_2 = role_metadata_0.load(var_0, var_1, var_1, var_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'dependencies'
        bool_0 = True
        str_1 = {}
        var_0 = {str_0: bool_0, str_0: str_1}
        role_metadata_0 = module_0.RoleMetadata(str_0)
        var_1 = role_metadata_0.load(var_0, bool_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'allow_duplicates'
        str_1 = 'dependencies'
        bool_0 = True
        var_0 = {str_0: bool_0, str_1: str_1}
        var_1 = None
        role_metadata_0 = module_0.RoleMetadata(var_1)
        var_2 = role_metadata_0.load(var_0, var_1, var_1, var_1)
    except BaseException:
        pass