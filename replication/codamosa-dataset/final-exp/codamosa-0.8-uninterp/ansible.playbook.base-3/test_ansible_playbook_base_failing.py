# Automatically generated by Pynguin.
import ansible.playbook.base as module_0
import ansible.playbook.attribute as module_1
import ansible.parsing.dataloader as module_2

def test_case_0():
    try:
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.load_data(field_attribute_base_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.load_data(dict_0)
        field_attribute_base_1 = module_0.FieldAttributeBase()
        field_attribute_base_2 = module_0.FieldAttributeBase()
        base_meta_0 = module_0.BaseMeta(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '^N'
        float_0 = 948.0
        float_1 = 504.33839731957283
        field_attribute_0 = module_1.FieldAttribute(str_0, str_0, float_0, float_1)
        bytes_0 = None
        bytes_1 = b')\xe2'
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.get_validated_value(field_attribute_base_0, field_attribute_0, bytes_0, bytes_1)
        base_0 = module_0.Base()
        field_attribute_base_1 = module_0.FieldAttributeBase()
        var_1 = base_0.get_path()
        var_2 = base_0.get_dep_chain()
        field_attribute_base_2 = module_0.FieldAttributeBase()
        str_1 = '^Pv(\\Afv}pL'
        dict_0 = {str_0: field_attribute_base_0, str_1: str_0}
        dict_1 = {str_1: field_attribute_base_1, var_2: field_attribute_0, var_0: field_attribute_base_2, field_attribute_base_2: var_2}
        var_3 = field_attribute_base_1.load_data(dict_0, dict_1, base_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -93
        tuple_0 = (int_0,)
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.load_data(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.squash()
        list_0 = [field_attribute_base_0, field_attribute_base_0]
        var_1 = field_attribute_base_0.post_validate(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        field_attribute_base_0 = module_0.FieldAttributeBase()
        str_0 = 'zHALz\t'
        var_0 = field_attribute_base_0.from_attrs(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        field_attribute_base_0 = module_0.FieldAttributeBase()
        str_0 = '7\\VuRz"s%\n'
        var_0 = field_attribute_base_0.deserialize(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.load_data(dict_0)
        field_attribute_base_1 = module_0.FieldAttributeBase()
        base_0 = module_0.Base()
        var_1 = base_0.get_dep_chain()
        base_1 = module_0.Base()
        var_2 = field_attribute_base_1.dump_me(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'pN'
        float_0 = 947.95569218755
        float_1 = 541.5146242794174
        field_attribute_0 = module_1.FieldAttribute(str_0, str_0, float_0, float_1)
        bytes_0 = None
        bytes_1 = b'\x80'
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.get_validated_value(field_attribute_base_0, field_attribute_0, bytes_0, bytes_1)
        field_attribute_base_1 = module_0.FieldAttributeBase()
        field_attribute_base_2 = module_0.FieldAttributeBase()
        field_attribute_base_3 = module_0.FieldAttributeBase()
        data_loader_0 = module_2.DataLoader()
        var_1 = field_attribute_base_1.squash()
        var_2 = field_attribute_base_1.load_data(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        field_attribute_base_0 = module_0.FieldAttributeBase()
        field_attribute_0 = module_1.FieldAttribute()
        var_0 = field_attribute_base_0.dump_me()
        var_1 = field_attribute_base_0.squash()
        var_2 = field_attribute_base_0.dump_attrs()
        var_3 = field_attribute_base_0.get_ds()
        var_4 = field_attribute_base_0.dump_attrs()
        field_attribute_base_1 = module_0.FieldAttributeBase()
        dict_0 = {var_1: var_3}
        var_5 = field_attribute_base_1.preprocess_data(dict_0)
        str_0 = 'value'
        set_0 = set()
        list_0 = [field_attribute_base_1, field_attribute_base_0, str_0]
        var_6 = field_attribute_base_1.load_data(set_0, list_0)
        base_0 = module_0.Base()
        var_7 = base_0.get_search_path()
        var_8 = field_attribute_base_1.copy()
        var_9 = field_attribute_base_1.get_validated_value(str_0, field_attribute_0, str_0, var_3)
        str_1 = '^Pv(\\Afv}pL'
        var_10 = field_attribute_base_1.load_data(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'bool'
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.get_loader()
        float_0 = 541.5146242794174
        var_1 = field_attribute_base_0.serialize()
        field_attribute_0 = module_1.FieldAttribute(str_0, str_0, float_0, float_0)
        bytes_0 = None
        bytes_1 = b')\xe2'
        field_attribute_base_1 = module_0.FieldAttributeBase()
        var_2 = field_attribute_base_1.get_validated_value(field_attribute_base_1, field_attribute_0, bytes_0, bytes_1)
    except BaseException:
        pass