# Automatically generated by Pynguin.
import dataclasses_json.cfg as module_0
import dataclasses_json.undefined as module_1
import marshmallow.fields as module_2

def test_case_0():
    pass

def test_case_1():
    list_0 = []
    list_1 = [list_0, list_0, list_0, list_0]
    list_2 = [list_1, list_0]
    exclude_0 = module_0.Exclude()
    undefined_0 = module_1.Undefined.EXCLUDE
    dict_0 = module_0.config(mm_field=list_2, letter_case=exclude_0, undefined=undefined_0)

def test_case_2():
    bool_0 = True
    global_config_0 = module_0._GlobalConfig()
    bool_1 = False
    dict_0 = None
    exclude_0 = None
    field_0 = module_2.Field(attribute=bool_0, load_only=bool_1, dump_only=bool_0, error_messages=dict_0, metadata=exclude_0)
    str_0 = ' that is not an instance of dataclass_json. Did you mean to recursively serialize this field? If so, make sure to augment '
    dict_1 = module_0.config(mm_field=field_0, letter_case=global_config_0, field_name=str_0)
    global_config_1 = module_0._GlobalConfig()

def test_case_3():
    str_0 = 'NQ(\x0cbg'
    optional_0 = None
    str_1 = 'exclude'
    str_2 = 'G(Ezq7Dp>|v'
    dict_0 = {str_1: str_0, str_2: str_0}
    field_0 = module_2.Field(missing=str_0, data_key=str_0, attribute=str_0, **dict_0)
    str_3 = None
    dict_1 = module_0.config(decoder=optional_0, mm_field=field_0, undefined=str_1, field_name=str_3)