# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        str_0 = 'e\x0b(j6xdOp'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        bytes_0 = b'\xaa\x7f\xe8\xfd\xcb'
        parser_generator_0 = module_0.ParserGenerator(str_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        pgen_grammar_0 = module_0.PgenGrammar()
        str_0 = 'E\x0c'
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'e\x0b(j6xdOp'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_1)
        bytes_0 = b'\xaa\x7f\xe8\xfd\xcb'
        bool_1 = d_f_a_state_1.__eq__(d_f_a_state_0)
        parser_generator_0 = module_0.ParserGenerator(str_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_4():
    try:
        n_f_a_state_0 = None
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        n_f_a_state_0 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_6():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = module_0.NFAState()
        dict_0 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_2: n_f_a_state_2}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_2)
        bool_0 = d_f_a_state_0.__eq__(n_f_a_state_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'e\x0b(j6xdOp'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        dict_0 = {n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        bytes_0 = b'\xaa\x7f\xe8\xfd\xcb'
        parser_generator_0 = module_0.ParserGenerator(str_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        n_f_a_state_0 = module_0.NFAState()
        list_0 = []
        n_f_a_state_0.addarc(n_f_a_state_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = '5R i&k&2"HYTv'
        dict_1 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: dict_0}
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
        d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_3 = None
        d_f_a_state_1.unifystate(d_f_a_state_3, d_f_a_state_1)
        str_1 = "Prepare for parsing.\n\n        This *must* be called before starting to parse.\n\n        The optional argument is an alternative start symbol; it\n        defaults to the grammar's start symbol.\n\n        You can use a Parser instance to parse any number of programs;\n        each time you call setup() the parser is reset to an initial\n        state determined by the (implicit or explicit) start symbol.\n\n        "
        parser_generator_0 = module_0.ParserGenerator(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'e\x0b(j6xdOp'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = None
        n_f_a_state_1.addarc(n_f_a_state_2, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'f'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_1)
        dict_0 = {n_f_a_state_1: str_0}
        dict_1 = {n_f_a_state_0: dict_0}
        d_f_a_state_0 = module_0.DFAState(dict_1, n_f_a_state_0)
        n_f_a_state_2 = None
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_2)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'e\x0b(j6xdOp'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        dict_0 = {n_f_a_state_0: str_0}
        dict_1 = {n_f_a_state_0: dict_0}
        d_f_a_state_0 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)
        d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_0)
        pgen_grammar_0 = module_0.PgenGrammar()
        d_f_a_state_3 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_1.unifystate(d_f_a_state_1, d_f_a_state_3)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        pgen_grammar_0 = None
        str_0 = None
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: pgen_grammar_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'e\x0b(j6xdOp'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_1)
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        dict_0 = {n_f_a_state_1: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_1 = None
        d_f_a_state_0.addarc(d_f_a_state_1, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'e\x0b(j6xdOp'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        dict_0 = {n_f_a_state_0: str_0}
        dict_1 = {n_f_a_state_0: dict_0}
        d_f_a_state_0 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_0)
        d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_1 = "\n        Initializer.  Takes optional type, content, and name.\n\n        The type, if given, must be a symbol type (>= 256).  If the\n        type is None this matches *any* single node (leaf or not),\n        except if content is not None, in which it only matches\n        non-leaf nodes that also match the content pattern.\n\n        The content, if not None, must be a sequence of Patterns that\n        must match the node's children exactly.  If the content is\n        given, the type must not be None.\n\n        If a name is given, the matching node is stored in the results\n        dict under that key.\n        "
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
        n_f_a_state_0.addarc(n_f_a_state_0)
        bool_1 = d_f_a_state_2.__eq__(dict_0)
    except BaseException:
        pass