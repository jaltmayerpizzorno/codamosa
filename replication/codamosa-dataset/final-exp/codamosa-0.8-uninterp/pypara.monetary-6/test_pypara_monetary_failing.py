# Automatically generated by Pynguin.
import pypara.monetary as module_0
import datetime as module_1
import decimal as module_2
import pypara.currencies as module_3

def test_case_0():
    try:
        str_0 = '\x0b/3!g|/NK1B=XQd)\x0b'
        int_0 = -173
        var_0 = None
        list_0 = [str_0, str_0, int_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        list_1 = [list_0, money_0, none_money_0]
        some_price_0 = module_0.SomePrice(*list_1)
        price_0 = some_price_0.abs()
        some_price_1 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        price_0 = module_0.Price()
        money_0 = none_money_0.multiply(var_0)
        date_0 = module_1.date()
    except BaseException:
        pass

def test_case_3():
    try:
        none_price_0 = module_0.NonePrice()
        float_0 = none_price_0.as_float()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(int_0)
        price_1 = price_0.scalar_add(price_0)
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = module_2.Decimal()
        price_2 = none_price_0.positive()
        price_3 = none_price_0.abs()
        some_price_0 = module_0.SomePrice(*list_0)
        price_4 = some_price_0.subtract(price_1)
        price_5 = some_price_0.add(price_4)
        var_1 = price_1.__round__()
        var_2 = None
        price_6 = price_4.divide(var_2)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        monetary_operation_exception_0 = module_0.MonetaryOperationException()
        str_0 = "iA1--L'"
        str_1 = 'PAB'
        str_2 = 'u}bdvqY\rY'
        int_0 = -1930
        currency_type_0 = module_3.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 83
        currency_0 = module_3.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__truediv__(str_0)
        price_2 = price_1.scalar_subtract(monetary_operation_exception_0)
        list_0 = [dict_0, dict_0]
        date_0 = module_1.date(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        list_0 = []
        price_2 = price_1.multiply(list_0)
        bool_0 = none_price_0.lt(price_1)
        none_price_1 = module_0.NonePrice()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_1 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_1)
        int_0 = -4817
        str_0 = '}m_(]<\x0cpS\x0c'
        currency_type_0 = module_3.CurrencyType.MONEY
        int_1 = 850
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        var_1 = None
        price_3 = some_price_0.floor_divide(var_1)
    except BaseException:
        pass

def test_case_7():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        int_0 = 1222
        currency_type_0 = module_3.CurrencyType.CRYPTO
        str_0 = '] '
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        bool_0 = price_1.lt(price_0)
        price_2 = none_price_0.with_qty(decimal_0)
        bool_1 = price_2.__gt__(price_0)
        bool_2 = True
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.convert(currency_0, bool_2)
    except BaseException:
        pass

def test_case_8():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.negative()
        bytes_0 = b'\xa9\xca\xb1gD|\x01\xc9*aX\xacn\xc4'
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.gt(money_0)
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = '}ok/O\r{['
        some_money_1 = module_0.SomeMoney(*list_0)
        str_1 = "l'IdErPg#Un"
        int_0 = None
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        int_1 = -760
        currency_0 = module_3.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        price_0 = none_price_0.convert(currency_0)
        money_1 = some_money_1.add(money_0)
        money_2 = money_1.subtract(money_1)
    except BaseException:
        pass

def test_case_9():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        none_price_1 = module_0.NonePrice()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#D\r%hi4bFW\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        str_1 = '"=WB`9n?#L",D\r'
        int_0 = 664
        currency_type_0 = None
        int_1 = -2504
        currency_0 = module_3.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        str_2 = 'w./2M/j'
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0, str_2)
        price_3 = some_price_0.floor_divide(currency_type_0)
    except BaseException:
        pass

def test_case_10():
    try:
        none_money_0 = module_0.NoneMoney()
        none_money_1 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(none_money_1)
        money_0 = module_0.Money()
        money_1 = none_money_0.subtract(money_0)
        price_1 = price_0.negative()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_11():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.negative()
        none_price_1 = module_0.NonePrice()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        bool_0 = none_money_0.lt(money_1)
        money_3 = some_money_0.subtract(money_2)
    except BaseException:
        pass

def test_case_12():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = money_0.__eq__(str_0)
        money_1 = some_money_0.add(money_0)
        bool_1 = some_price_0.lte(price_3)
        money_2 = money_1.subtract(money_1)
    except BaseException:
        pass

def test_case_13():
    try:
        none_money_0 = module_0.NoneMoney()
        none_money_1 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(none_money_1)
        price_1 = price_0.negative()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_14():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        str_1 = '0}ok/O\r{['
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        int_0 = None
        currency_type_0 = module_3.CurrencyType.CRYPTO
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_3 = none_price_0.with_ccy(currency_0)
        money_2 = some_money_0.add(money_1)
        bool_0 = some_money_0.lte(money_1)
        int_1 = None
        currency_1 = module_3.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_1)
        int_2 = -816
        currency_2 = module_3.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        price_4 = some_price_0.convert(currency_2, currency_2)
    except BaseException:
        pass

def test_case_15():
    try:
        none_money_0 = module_0.NoneMoney()
        float_0 = none_money_0.as_float()
    except BaseException:
        pass

def test_case_16():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        bool_0 = money_0.gt(money_0)
        decimal_0 = module_2.Decimal()
        int_0 = none_money_0.as_integer()
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\xac\x06\x1c\xe8\xb0\x10\xc6\xd9J7\xd3\xda?T\x93\xf4\xa0'
        float_0 = None
        list_0 = [float_0, float_0, float_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.divide(bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        none_money_1 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_0)
        bool_1 = none_money_1.gte(money_0)
        money_1 = none_money_0.add(money_0)
        bool_2 = money_1.gt(money_1)
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice(*list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = []
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(list_0)
        var_0 = price_0.__round__()
    except BaseException:
        pass

def test_case_20():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        price_0 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        bool_0 = some_money_0.lte(money_1)
        int_0 = None
        bool_1 = some_money_0.gte(money_0)
        int_1 = 884
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        str_1 = '7y?"nnS]?i z:\tO'
        currency_0 = module_3.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        money_3 = money_2.positive()
    except BaseException:
        pass

def test_case_21():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        none_price_0 = module_0.NonePrice()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.subtract(money_1)
    except BaseException:
        pass

def test_case_22():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        int_0 = None
        bool_0 = money_0.__gt__(money_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        bool_1 = none_price_0.lt(price_1)
        none_price_1 = module_0.NonePrice()
        price_2 = none_price_1.scalar_add(int_0)
        bool_2 = money_0.gt(money_0)
        price_3 = price_2.scalar_add(price_2)
        var_1 = price_3.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = module_2.Decimal()
        some_price_0 = module_0.SomePrice(*list_0)
        price_4 = some_price_0.subtract(price_3)
        price_5 = some_price_0.add(price_4)
        money_1 = money_0.with_qty(decimal_0)
        price_6 = price_5.negative()
    except BaseException:
        pass

def test_case_23():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__sub__(price_0)
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        none_price_1 = module_0.NonePrice()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        bool_0 = none_money_0.as_boolean()
        price_2 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = money_1.subtract(money_0)
        bool_1 = some_money_0.lte(money_1)
        money_3 = some_money_0.add(money_1)
        bool_2 = some_money_0.lte(money_0)
        bool_3 = price_1.__le__(price_0)
        money_4 = money_2.subtract(money_1)
    except BaseException:
        pass

def test_case_24():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        money_1 = money_0.round()
        var_0 = money_0.__round__()
        none_money_1 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_0)
        bool_1 = none_money_1.gte(money_0)
        money_2 = none_money_0.add(money_0)
        price_0 = module_0.Price()
        price_1 = price_0.negative()
    except BaseException:
        pass

def test_case_25():
    try:
        list_0 = []
        none_money_0 = module_0.NoneMoney()
        list_1 = [list_0, none_money_0, none_money_0]
        some_price_0 = module_0.SomePrice(*list_1)
        price_0 = some_price_0.positive()
        date_0 = module_1.date()
    except BaseException:
        pass

def test_case_26():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b'\xd2'
        list_0 = [none_price_0, none_money_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        bool_0 = price_0.lt(price_1)
        bool_1 = some_price_0.lte(price_1)
        bool_2 = price_1.lt(price_1)
        bool_3 = price_2.lt(price_2)
        price_3 = price_2.subtract(price_2)
        currency_0 = None
        price_4 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'H>i'
        str_1 = '=#yV\rj{'
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        int_0 = -635
        list_0 = []
        decimal_0 = module_2.Decimal(*list_0)
        dict_0 = {}
        none_money_1 = module_0.NoneMoney(**dict_0)
        money_1 = none_money_1.multiply(decimal_0)
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        decimal_1 = module_2.Decimal()
        price_0 = module_0.Price(**dict_0)
        int_1 = 2977
        set_0 = {str_1}
        none_price_0 = module_0.NonePrice()
        price_1 = none_price_0.floor_divide(set_0)
        currency_0 = module_3.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_1)
        price_2 = price_1.subtract(price_0)
        int_2 = price_1.__int__()
    except BaseException:
        pass

def test_case_28():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        none_price_1 = module_0.NonePrice()
        bool_0 = none_price_1.lt(price_1)
        none_price_2 = module_0.NonePrice()
        price_2 = none_price_2.scalar_add(int_0)
        bool_1 = money_0.gt(money_0)
        price_3 = price_1.negative()
        bytes_0 = b'\x91D\x16\xa9(\xb0\xc7`x\x08'
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = module_2.Decimal()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.multiply(decimal_0)
    except BaseException:
        pass

def test_case_29():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        bool_0 = none_money_0.as_boolean()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        none_price_1 = module_0.NonePrice()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        var_1 = None
        money_3 = money_1.__floordiv__(var_1)
    except BaseException:
        pass

def test_case_30():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        int_0 = 1222
        currency_type_0 = module_3.CurrencyType.CRYPTO
        str_0 = '] '
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        bool_0 = price_1.lt(price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
    except BaseException:
        pass

def test_case_31():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        var_1 = None
        price_4 = some_price_0.floor_divide(var_1)
    except BaseException:
        pass

def test_case_32():
    try:
        none_money_0 = module_0.NoneMoney()
        bytes_0 = b'\x98'
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        var_0 = None
        money_0 = some_money_0.divide(var_0)
    except BaseException:
        pass

def test_case_33():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.negative()
        none_price_1 = module_0.NonePrice()
        bool_0 = none_price_1.lt(price_1)
        none_price_2 = module_0.NonePrice()
        price_2 = none_price_2.scalar_add(int_0)
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = module_2.Decimal()
        money_1 = money_0.with_qty(decimal_0)
        dict_0 = {}
        var_1 = None
        some_price_0 = module_0.SomePrice(*list_0, **dict_0)
        price_3 = some_price_0.scalar_add(var_1)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__pos__()
        bool_0 = none_price_0.lt(price_1)
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_1)
        int_1 = -4817
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        bool_1 = price_2.gte(price_1)
        var_1 = price_1.__round__(int_1)
        str_0 = '] '
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_0 = price_1.times(price_0)
        bool_2 = price_2.lte(price_0)
        var_2 = None
        price_3 = some_price_0.floor_divide(var_2)
    except BaseException:
        pass

def test_case_35():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        bool_0 = none_price_0.lt(price_1)
        none_price_1 = module_0.NonePrice()
        price_2 = none_price_1.scalar_add(int_0)
        bool_1 = money_0.gt(money_0)
        price_3 = price_2.scalar_add(price_2)
        var_1 = price_3.__round__()
        bytes_0 = b'\xafn'
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = module_2.Decimal()
        int_1 = 97
        str_0 = '4\\:RU#D\r%hi4bFW\x0buE=.'
        price_4 = none_price_1.abs()
        money_1 = money_0.with_qty(decimal_0)
        str_1 = '0}ok/O\r{\r['
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        int_2 = -139
        currency_0 = module_3.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        bool_2 = price_2.gte(price_1)
        dict_0 = {}
        none_money_1 = module_0.NoneMoney(**dict_0)
        float_0 = -881.579
        money_2 = none_money_0.convert(currency_0, float_0)
        money_3 = money_0.__pos__()
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        money_4 = some_money_0.add(money_0)
        money_5 = some_money_0.subtract(money_2)
        money_6 = some_money_0.with_qty(decimal_0)
    except BaseException:
        pass

def test_case_36():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        none_price_1 = module_0.NonePrice()
        none_price_2 = module_0.NonePrice()
        price_2 = none_price_2.scalar_add(int_0)
        price_3 = price_1.negative()
        bytes_0 = b'\x91D\x16\xa9(\xb0\xc7`x\x08'
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = module_2.Decimal()
        str_0 = '4\\:RU#D\r%hi4bFW\x0buE=.'
        price_4 = none_price_2.positive()
        money_1 = money_0.with_qty(decimal_0)
        str_1 = '\n        Returns a list of code/name tuples.\n        '
        int_1 = -4817
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        int_2 = -139
        currency_0 = module_3.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        dict_0 = {}
        none_money_1 = module_0.NoneMoney(**dict_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_2 = some_money_0.round()
    except BaseException:
        pass

def test_case_37():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        none_price_0 = module_0.NonePrice()
        price_0 = module_0.Price()
        price_1 = none_price_0.add(price_0)
        price_2 = price_1.__abs__()
        none_price_1 = module_0.NonePrice()
        bool_0 = none_price_1.lt(price_2)
    except BaseException:
        pass

def test_case_38():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        some_money_0 = module_0.SomeMoney(*list_0)
        var_1 = None
        int_0 = None
        price_4 = none_price_0.floor_divide(var_1)
        bool_0 = none_price_0.gte(price_4)
        currency_type_0 = module_3.CurrencyType.CRYPTO
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_5 = some_price_0.subtract(price_3)
    except BaseException:
        pass

def test_case_39():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        none_price_1 = module_0.NonePrice()
        bool_0 = none_price_1.lt(price_1)
        none_price_2 = module_0.NonePrice()
        price_2 = none_price_2.scalar_add(int_0)
        bool_1 = money_0.gt(money_0)
        decimal_0 = module_2.Decimal()
        int_1 = 97
        str_0 = '4\\:RU#D\r%hi4bFW\x0buE=.'
        price_3 = none_price_2.positive()
        money_1 = module_0.Money()
        money_2 = money_0.with_qty(decimal_0)
        bool_2 = none_money_0.as_boolean()
        str_1 = '\n        Returns a list &f code/nale tuples[\n        '
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        int_2 = -139
        currency_0 = module_3.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        dict_0 = {}
        none_money_1 = module_0.NoneMoney(**dict_0)
        float_0 = -881.579
        money_3 = none_money_0.convert(currency_0, float_0)
        money_4 = money_1.subtract(money_0)
    except BaseException:
        pass

def test_case_40():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b'\xd2'
        list_0 = [none_price_0, none_money_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = price_0.lt(price_1)
        bool_1 = some_price_0.lte(price_2)
        bool_2 = price_1.lt(price_2)
        int_0 = 2773
        price_3 = some_price_0.round(int_0)
        price_4 = price_1.subtract(price_3)
        currency_0 = None
        price_5 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_41():
    try:
        price_0 = module_0.Price()
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        list_0 = []
        dict_0 = {}
        str_0 = 'TOP'
        int_0 = 1616
        decimal_0 = module_2.Decimal(*list_0)
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_price_0 = module_0.NonePrice()
        price_1 = none_price_0.convert(currency_0)
        var_0 = price_0.__round__(dict_0)
    except BaseException:
        pass

def test_case_42():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        money_1 = none_money_0.abs()
        int_0 = None
        bool_0 = money_0.gt(money_0)
        money_2 = money_0.__add__(money_1)
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        money_3 = none_money_0.scalar_add(int_0)
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        int_1 = 1222
        currency_type_0 = module_3.CurrencyType.CRYPTO
        money_4 = money_0.__pos__()
        str_0 = '] '
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        bool_1 = True
        some_money_0 = module_0.SomeMoney(*list_0)
        money_5 = some_money_0.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = '\x0b/3!g|/NK1B=XQd)\x0b'
        int_0 = -173
        var_0 = None
        list_0 = [str_0, str_0, int_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_44():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        none_price_0 = module_0.NonePrice()
        price_0 = module_0.Price()
        price_1 = none_price_0.add(price_0)
        price_2 = price_1.__abs__()
        float_0 = price_0.__float__()
        var_1 = price_2.__round__()
    except BaseException:
        pass

def test_case_45():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        none_price_1 = module_0.NonePrice()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.add(price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        money_3 = some_money_0.subtract(money_2)
    except BaseException:
        pass

def test_case_46():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        money_1 = money_0.round()
        var_0 = money_0.__round__()
        none_money_1 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_0)
        bool_1 = none_money_1.gte(money_0)
        money_2 = none_money_0.add(money_0)
        price_0 = module_0.Price()
        price_1 = price_0.subtract(price_0)
    except BaseException:
        pass

def test_case_47():
    try:
        none_money_0 = module_0.NoneMoney()
        none_money_1 = module_0.NoneMoney()
        money_0 = none_money_1.negative()
        var_0 = money_0.__round__()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        none_price_1 = module_0.NonePrice()
        bool_0 = none_money_1.gte(money_0)
        bool_1 = money_0.gt(money_0)
        price_2 = price_0.__abs__()
        var_1 = price_2.__round__()
        var_2 = money_0.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        price_3 = price_1.subtract(price_0)
        money_1 = none_money_1.negative()
        some_price_0 = module_0.SomePrice(*list_0)
        some_price_1 = module_0.SomePrice(*list_0)
        price_4 = some_price_1.subtract(price_2)
        price_5 = none_price_1.round()
        price_6 = some_price_1.add(price_4)
        bool_2 = price_4.lt(price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        list_1 = [var_2, bool_0, var_0]
        some_money_1 = module_0.SomeMoney(*list_1)
        money_2 = some_money_1.add(money_0)
        money_3 = some_money_0.subtract(money_2)
    except BaseException:
        pass

def test_case_48():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        bool_0 = none_money_0.gte(money_0)
        bool_1 = money_0.__lt__(money_0)
        bool_2 = money_0.gt(money_0)
        var_1 = money_0.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        money_1 = money_0.with_qty(decimal_0)
        dict_0 = {}
        money_2 = money_0.__pos__()
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        money_3 = some_money_0.add(money_0)
        bool_3 = some_money_0.is_equal(bool_2)
        money_4 = some_money_0.floor_divide(dict_0)
    except BaseException:
        pass

def test_case_49():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = none_money_0.negative()
        none_price_1 = module_0.NonePrice()
        var_0 = price_0.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        money_3 = some_money_0.subtract(money_2)
    except BaseException:
        pass

def test_case_50():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.positive()
    except BaseException:
        pass

def test_case_51():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(int_0)
        bool_0 = money_0.gt(money_0)
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        date_0 = None
        money_1 = none_money_0.with_dov(date_0)
        decimal_0 = module_2.Decimal()
        str_0 = '4\\:RU#D\r%hi4bFW\x0buE=.'
        money_2 = money_0.with_qty(decimal_0)
        str_1 = '0}ok/O\r{\r['
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        int_1 = -139
        currency_0 = module_3.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        dict_0 = {}
        float_0 = -881.579
        money_3 = none_money_0.convert(currency_0, float_0)
        money_4 = money_0.__pos__()
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        money_5 = some_money_0.add(money_3)
        money_6 = money_5.positive()
    except BaseException:
        pass

def test_case_52():
    try:
        none_money_0 = module_0.NoneMoney()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        bool_0 = none_price_0.lt(price_1)
        none_price_1 = module_0.NonePrice()
        price_2 = none_price_1.scalar_add(int_0)
        price_3 = price_2.scalar_add(price_2)
        var_0 = price_3.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = module_2.Decimal()
        some_price_0 = module_0.SomePrice(*list_0)
        price_4 = some_price_0.subtract(price_3)
        price_5 = some_price_0.add(price_4)
        some_money_0 = None
        price_6 = price_5.__mul__(some_money_0)
    except BaseException:
        pass

def test_case_53():
    try:
        none_price_0 = module_0.NonePrice()
        bool_0 = none_price_0.as_boolean()
        none_money_0 = module_0.NoneMoney()
        none_price_1 = module_0.NonePrice()
        price_0 = none_price_1.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b'\xd2'
        list_0 = [none_price_1, none_money_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = money_1.subtract(money_0)
        money_3 = money_2.subtract(money_2)
        bool_1 = some_money_0.lt(money_3)
        bool_2 = some_money_0.gte(money_3)
        bool_3 = price_0.lt(price_1)
        bool_4 = some_price_0.lte(price_2)
        money_4 = money_2.add(money_3)
        money_5 = money_2.subtract(money_4)
        bool_5 = money_1.as_boolean()
        bool_6 = money_4.as_boolean()
        bool_7 = price_1.lt(price_2)
        int_0 = 2773
        price_3 = some_price_0.round(int_0)
        price_4 = price_1.subtract(price_3)
        currency_0 = None
        price_5 = some_price_0.convert(currency_0, price_2)
    except BaseException:
        pass

def test_case_54():
    try:
        none_money_0 = module_0.NoneMoney()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.__abs__()
        bool_0 = none_price_0.lt(price_1)
        none_price_1 = module_0.NonePrice()
        price_2 = none_price_1.scalar_add(int_0)
        price_3 = price_2.scalar_add(price_2)
        var_0 = price_3.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = module_2.Decimal()
        decimal_1 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_4 = some_price_0.subtract(price_3)
        var_1 = price_0.__round__()
        some_money_0 = module_0.SomeMoney(*list_0)
        str_0 = 'CRcV-UQG\\>(uis\rO(P\x0b\r'
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        price_5 = some_price_0.with_ccy(currency_0)
        bool_1 = some_price_0.gte(price_5)
    except BaseException:
        pass

def test_case_55():
    try:
        money_0 = module_0.Money()
        float_0 = money_0.as_float()
    except BaseException:
        pass

def test_case_56():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        price_4 = module_0.Price()
        bool_0 = some_price_0.lte(price_1)
        var_1 = None
        int_0 = None
        currency_type_0 = module_3.CurrencyType.CRYPTO
        bool_1 = price_3.__le__(price_2)
        price_5 = none_price_0.positive()
        currency_type_1 = module_3.CurrencyType.ALTERNATIVE
        str_1 = '7y?"nnS]?i z:\tO'
        currency_0 = module_3.Currency(str_0, str_1, int_0, currency_type_1, decimal_0, int_0)
        str_2 = 'Ud0f>CW4V'
        str_3 = 'mDXy+ZMyz34n<'
        currency_1 = module_3.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        bool_2 = price_2.lt(price_0)
        bool_3 = none_price_0.gte(price_5)
        price_6 = price_3.scalar_subtract(var_1)
    except BaseException:
        pass

def test_case_57():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        int_0 = 1222
        currency_type_0 = module_3.CurrencyType.CRYPTO
        str_0 = '] '
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        bool_0 = price_1.lt(price_0)
        bool_1 = True
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_58():
    try:
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1222
        currency_type_0 = module_3.CurrencyType.CRYPTO
        str_0 = '] '
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        int_1 = 757
        currency_1 = module_3.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_0)
        price_0 = some_price_0.convert(currency_1)
    except BaseException:
        pass

def test_case_59():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.abs()
    except BaseException:
        pass

def test_case_60():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        int_0 = 1222
        currency_type_0 = module_3.CurrencyType.CRYPTO
        str_0 = '('
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        bool_0 = price_1.lt(price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        date_0 = None
        money_0 = some_money_0.convert(currency_0, date_0)
    except BaseException:
        pass

def test_case_61():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        bool_0 = price_0.__bool__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b'\xa9\xca\xb1gD|\x01\xc9*aX\xc4'
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_1 = some_money_0.gt(money_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        float_0 = some_money_0.as_float()
    except BaseException:
        pass

def test_case_62():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        list_0 = [none_money_0]
        money_1 = money_0.multiply(list_0)
        int_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = none_price_0.positive()
        bool_0 = none_price_0.lt(price_1)
        none_price_1 = module_0.NonePrice()
        bool_1 = none_money_0.gte(money_0)
        price_2 = none_price_1.scalar_add(int_0)
        bool_2 = money_0.gt(money_0)
        var_1 = price_1.__round__()
        bytes_0 = b''
        list_1 = [bytes_0, bytes_0, bytes_0]
        int_1 = None
        money_2 = none_money_0.scalar_add(int_1)
        price_3 = price_1.subtract(price_0)
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_1)
        price_4 = some_price_0.subtract(price_2)
        money_3 = money_0.with_qty(decimal_0)
        int_2 = -4817
        bool_3 = price_2.gte(price_1)
        money_4 = money_0.__pos__()
        var_2 = price_1.__round__(int_2)
        int_3 = some_price_0.as_integer()
    except BaseException:
        pass

def test_case_63():
    try:
        money_0 = module_0.Money()
        bool_0 = money_0.__bool__()
        currency_0 = None
        bool_1 = True
        money_1 = money_0.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_64():
    try:
        dict_0 = {}
        money_0 = module_0.Money(**dict_0)
        money_1 = money_0.positive()
    except BaseException:
        pass

def test_case_65():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        money_1 = none_money_0.abs()
        int_0 = None
        none_price_0 = module_0.NonePrice()
        bool_0 = none_money_0.gte(money_0)
        price_0 = none_price_0.scalar_add(int_0)
        bool_1 = money_0.gt(money_0)
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        money_2 = none_money_0.scalar_add(int_0)
        currency_type_0 = module_3.CurrencyType.MONEY
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        money_3 = money_0.with_qty(decimal_0)
        dict_0 = {}
        money_4 = money_0.__pos__()
        str_0 = '0}ok/O\r{['
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        money_5 = none_money_0.negative()
        money_6 = some_money_0.add(money_5)
        str_1 = '4ny*a2j_y'
        int_1 = 446
        int_2 = 3284
        currency_0 = module_3.Currency(str_1, str_0, int_1, currency_type_0, decimal_0, int_2)
        money_7 = some_price_0.times(currency_0)
    except BaseException:
        pass

def test_case_66():
    try:
        decimal_0 = None
        str_0 = '\rhV'
        int_0 = 366
        currency_type_0 = module_3.CurrencyType.CRYPTO
        int_1 = -1384
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        price_1 = price_0.convert(currency_0)
        none_price_1 = module_0.NonePrice()
        price_2 = none_price_1.add(price_1)
        price_3 = price_2.__pos__()
        str_1 = 'ypE'
        str_2 = 'Saint Helena Pound'
        int_2 = 4391
        currency_type_1 = None
        int_3 = 2338
        currency_1 = module_3.Currency(str_1, str_2, int_2, currency_type_1, decimal_0, int_3)
        money_0 = module_0.Money()
        money_1 = money_0.with_ccy(currency_1)
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_67():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        none_price_1 = module_0.NonePrice()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        float_0 = some_price_0.as_float()
    except BaseException:
        pass

def test_case_68():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        some_money_1 = module_0.SomeMoney(*list_0)
        int_0 = money_2.as_integer()
    except BaseException:
        pass

def test_case_69():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        bool_0 = some_money_0.lte(money_1)
        int_0 = None
        currency_type_0 = module_3.CurrencyType.CRYPTO
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        var_1 = None
        money_3 = some_money_0.scalar_subtract(var_1)
    except BaseException:
        pass

def test_case_70():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        bool_0 = some_money_0.lte(money_1)
        bool_1 = some_money_0.lt(money_2)
        date_0 = module_1.date(*list_0)
    except BaseException:
        pass

def test_case_71():
    try:
        var_0 = None
        money_0 = module_0.Money()
        money_1 = money_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_72():
    try:
        var_0 = None
        money_0 = module_0.Money()
        money_1 = money_0.__floordiv__(var_0)
        decimal_0 = module_2.Decimal()
        money_2 = money_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_73():
    try:
        money_0 = module_0.Money()
        decimal_0 = module_2.Decimal()
        none_price_0 = module_0.NonePrice()
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_74():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.add(price_0)
    except BaseException:
        pass

def test_case_75():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        price_4 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_0 = some_price_0.lte(price_1)
        money_2 = some_money_0.add(money_1)
        var_1 = None
        price_5 = price_4.scalar_add(var_1)
    except BaseException:
        pass

def test_case_76():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        price_4 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_0 = some_price_0.lte(price_1)
        money_2 = some_money_0.add(money_1)
        bool_1 = some_money_0.lte(money_1)
        int_0 = None
        bool_2 = price_3.__le__(price_2)
        int_1 = 884
        price_5 = none_price_0.positive()
        currency_type_0 = module_3.CurrencyType.ALTERNATIVE
        str_1 = '\n        Negates the quantity of the monetary value if *defined*, itself otherwise.\n        '
        currency_0 = module_3.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        bool_3 = price_4.as_boolean()
    except BaseException:
        pass

def test_case_77():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.positive()
        var_0 = price_1.__round__()
        bytes_0 = b'2'
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        str_1 = '}ok/O\r{['
        price_4 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_0 = some_price_0.lte(price_1)
        currency_type_0 = module_3.CurrencyType.CRYPTO
        bool_1 = price_4.__le__(price_4)
        decimal_1 = module_2.Decimal()
        int_0 = 31
        int_1 = -739
        currency_0 = module_3.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        str_2 = '8SE\x0b_L`~'
        dict_0 = {str_2: bytes_0}
        some_money_1 = module_0.SomeMoney(**dict_0)
    except BaseException:
        pass

def test_case_78():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.negative()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        none_price_1 = module_0.NonePrice()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.add(price_0)
        price_3 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_0 = some_price_0.lte(price_1)
        money_2 = money_1.subtract(money_0)
        bool_1 = price_3.lt(price_2)
        bool_2 = some_money_0.lte(money_1)
        some_price_1 = module_0.SomePrice(*list_0)
        price_4 = some_price_1.add(price_3)
    except BaseException:
        pass

def test_case_79():
    try:
        str_0 = '+qvW]'
        str_1 = 'l\n\tc&'
        int_0 = -2767
        currency_type_0 = None
        decimal_0 = module_2.Decimal()
        int_1 = 460
        currency_0 = module_3.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        dict_0 = {}
        price_0 = module_0.Price(**dict_0)
        price_1 = price_0.with_ccy(currency_0)
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_2 = none_price_0.negative()
        price_3 = price_2.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_3.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_2 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_1 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_4 = some_price_0.subtract(price_2)
        price_5 = some_price_0.add(price_4)
        price_6 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_0 = some_price_0.lte(price_3)
        money_2 = some_money_0.add(money_1)
        bool_1 = some_money_0.lte(money_1)
        int_2 = None
        bool_2 = price_5.__le__(price_4)
        int_3 = 884
        price_7 = none_price_0.positive()
        currency_type_1 = module_3.CurrencyType.ALTERNATIVE
        str_3 = '\n        Negates the quantity of the monetary value if *defined*, itself otherwise.\n        '
        currency_1 = module_3.Currency(str_2, str_3, int_3, currency_type_1, decimal_1, int_2)
        bool_3 = price_6.as_boolean()
    except BaseException:
        pass

def test_case_80():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__sub__(price_0)
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b'\x98'
        list_0 = [bytes_0, bytes_0, bytes_0]
        bytes_1 = b'\x8e\xcc\xafc\xe1\x9a\x1d\x9d^s \x7f\xa0\r\xc93'
        bool_0 = none_money_0.is_equal(bytes_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        price_4 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_1 = price_4.__gt__(price_3)
        bool_2 = none_money_0.gte(money_0)
        bool_3 = some_money_0.lt(money_0)
        bool_4 = some_price_0.lte(price_1)
        money_2 = money_1.subtract(money_0)
        bool_5 = price_2.lt(price_3)
        bool_6 = some_money_0.lte(money_2)
        money_3 = some_money_0.add(money_1)
        var_1 = None
        money_4 = some_money_0.divide(var_1)
    except BaseException:
        pass

def test_case_81():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        bool_0 = price_0.__bool__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b'\xa9\xca\xb1gD|\x01\xc9*aX\xacn\xc4'
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_1 = some_money_0.gt(money_0)
        some_price_0 = module_0.SomePrice(*list_0)
        date_0 = None
        price_2 = some_price_0.with_dov(date_0)
        price_3 = some_price_0.add(price_2)
    except BaseException:
        pass

def test_case_82():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = none_price_0.add(price_0)
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        price_4 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        bool_0 = some_money_0.lte(money_1)
        price_5 = price_4.__sub__(price_0)
        price_6 = some_price_0.add(price_5)
    except BaseException:
        pass

def test_case_83():
    try:
        price_0 = module_0.Price()
        bool_0 = price_0.__bool__()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_84():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        price_4 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = price_3.lt(price_2)
        bool_1 = some_price_0.lte(price_3)
        bool_2 = price_3.lt(price_1)
        some_money_1 = module_0.SomeMoney(*list_0)
        price_5 = price_4.with_qty(decimal_0)
        currency_0 = None
        price_6 = some_price_0.convert(currency_0, price_1)
    except BaseException:
        pass

def test_case_85():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b''
        list_0 = [none_price_0, none_money_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        int_0 = None
        currency_type_0 = module_3.CurrencyType.CRYPTO
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = money_1.subtract(money_0)
        bool_0 = price_1.lt(price_1)
        money_3 = money_1.subtract(money_1)
        price_3 = price_2.with_ccy(currency_0)
        money_4 = money_1.__pos__()
        bool_1 = price_1.__gt__(price_3)
    except BaseException:
        pass

def test_case_86():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.__pos__()
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        str_0 = 'g4!2h2\x0cTK'
        str_1 = 'BWP'
        str_2 = '-\x0b;7`=Um__O$T'
        str_3 = 'du\r\nM@^\x0b9121w?if<ax'
        dict_0 = {str_0: list_0, str_1: str_1, str_2: list_0, str_3: str_1}
        some_price_0 = module_0.SomePrice(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_87():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b''
        list_0 = [none_price_0, none_money_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~W\x0buE='
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        int_0 = None
        currency_type_0 = module_3.CurrencyType.CRYPTO
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.with_ccy(currency_0)
        bool_0 = price_2.lt(price_2)
        bool_1 = price_0.__le__(price_1)
        bool_2 = some_money_0.lte(money_0)
        money_3 = some_money_0.add(money_1)
        bool_3 = some_money_0.lte(money_2)
    except BaseException:
        pass

def test_case_88():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.__abs__()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__()
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = some_price_0.add(price_2)
        price_4 = module_0.Price()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = some_money_0.add(money_1)
        var_1 = None
        bool_0 = some_money_0.lte(money_1)
        bool_1 = some_money_0.gte(money_1)
        bool_2 = price_3.lt(price_2)
        bool_3 = some_price_0.lte(price_3)
        money_3 = price_4.times(var_1)
    except BaseException:
        pass

def test_case_89():
    try:
        bool_0 = False
        price_0 = module_0.Price()
        price_1 = price_0.multiply(bool_0)
    except BaseException:
        pass

def test_case_90():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b''
        list_0 = [none_price_0, none_money_0, bytes_0]
        str_0 = '4\\:RU#hD\r%hi4b~WuE'
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        int_0 = None
        currency_type_0 = module_3.CurrencyType.CRYPTO
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = money_1.subtract(money_0)
        money_3 = money_2.subtract(money_2)
        bool_0 = some_money_0.lt(money_3)
        bool_1 = some_money_0.gte(money_3)
        bool_2 = price_0.lt(price_1)
        bool_3 = some_price_0.lte(price_2)
        money_4 = money_2.add(money_3)
        money_5 = money_2.subtract(money_4)
        bool_4 = money_1.as_boolean()
        price_3 = price_1.with_ccy(currency_0)
        bool_5 = price_2.lt(price_3)
    except BaseException:
        pass

def test_case_91():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b'\xd2'
        list_0 = [none_price_0, none_money_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        money_1 = none_money_0.negative()
        price_2 = some_price_0.add(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_2 = some_money_0.add(money_0)
        price_3 = price_0.__neg__()
        money_3 = money_2.subtract(money_0)
        money_4 = money_3.subtract(money_3)
        bool_0 = some_money_0.lt(money_4)
        bool_1 = some_money_0.gte(money_4)
        bool_2 = price_0.lt(price_1)
        bool_3 = some_price_0.lte(price_2)
        money_5 = money_3.add(money_4)
        money_6 = money_3.subtract(money_5)
        bool_4 = money_2.as_boolean()
        bool_5 = money_5.as_boolean()
        price_4 = some_price_0.subtract(price_1)
        bool_6 = price_1.lt(price_2)
        bool_7 = money_5.__gt__(money_0)
        price_5 = price_2.subtract(price_2)
        str_0 = '\n        Indicates if the code is a valid currency code.\n        '
        money_7 = money_5.__truediv__(str_0)
        currency_0 = None
        price_6 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_92():
    try:
        bool_0 = False
        money_0 = module_0.Money()
        bool_1 = money_0.is_equal(bool_0)
    except BaseException:
        pass

def test_case_93():
    try:
        none_price_0 = module_0.NonePrice()
        bool_0 = none_price_0.as_boolean()
        none_money_0 = module_0.NoneMoney()
        none_price_1 = module_0.NonePrice()
        price_0 = none_price_1.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b'\xd2'
        list_0 = [none_price_1, none_money_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_1 = some_money_0.lt(money_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        money_1 = some_money_1.add(money_0)
        money_2 = money_1.subtract(money_0)
        money_3 = money_2.subtract(money_2)
        bool_2 = some_money_1.lt(money_3)
        bool_3 = some_money_1.gte(money_3)
        bool_4 = price_0.lt(price_1)
        bool_5 = some_price_0.lte(price_2)
        date_0 = None
        money_4 = money_3.with_dov(date_0)
        money_5 = money_2.add(money_3)
        money_6 = money_2.subtract(money_5)
        bool_6 = money_1.as_boolean()
        bool_7 = money_5.as_boolean()
        bool_8 = money_2.__gt__(money_6)
        price_3 = price_1.subtract(price_1)
        currency_0 = None
        price_4 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_94():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = none_money_0.negative()
        var_0 = price_0.__round__()
        bytes_0 = b'\xd2'
        list_0 = [none_price_0, none_money_0, bytes_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = some_price_0.add(price_1)
        str_0 = '0}ok/O\r{['
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        int_0 = None
        currency_type_0 = module_3.CurrencyType.MONEY
        currency_0 = module_3.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.with_ccy(currency_0)
        money_3 = money_2.subtract(money_2)
        bool_0 = some_money_0.lt(money_3)
    except BaseException:
        pass

def test_case_95():
    try:
        money_0 = module_0.Money()
        int_0 = money_0.as_integer()
    except BaseException:
        pass