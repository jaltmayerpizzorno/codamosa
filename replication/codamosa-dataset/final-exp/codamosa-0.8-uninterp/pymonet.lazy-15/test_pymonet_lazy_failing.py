# Automatically generated by Pynguin.
import pymonet.lazy as module_0
import builtins as module_1

def test_case_0():
    try:
        callable_0 = None
        lazy_0 = module_0.Lazy(callable_0)
        var_0 = lazy_0.to_try()
        list_0 = [var_0]
        var_1 = lazy_0.ap(list_0)
        str_0 = lazy_0.__str__()
        float_0 = -13.1
        var_2 = lazy_0.bind(float_0)
        var_3 = lazy_0.to_either()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = True
        lazy_0 = module_0.Lazy(int_0)
        var_0 = lazy_0.to_either()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x93\xb0\xc5Y\xff>T4\xaa\x97\x10 \x9c\xbbl'
        str_0 = 'tg_\r`\x0bek!z,'
        list_0 = [str_0, str_0, str_0]
        lazy_0 = module_0.Lazy(list_0)
        var_0 = lazy_0.map(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        lazy_0 = module_0.Lazy(callable_0)
        var_0 = lazy_0.to_box()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'U}QqrDtih\n= Nh$?]0S'
        lazy_0 = module_0.Lazy(str_0)
        lazy_1 = module_0.Lazy(lazy_0)
        var_0 = lazy_1.to_maybe()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        '
        lazy_0 = module_0.Lazy(str_0)
        object_0 = module_1.object()
        var_0 = lazy_0.to_try()
        list_0 = [var_0]
        var_1 = lazy_0.to_box(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Uwar+p}v\x0bX3(dRU2'
        set_0 = {str_0, str_0, str_0, str_0}
        lazy_0 = module_0.Lazy(set_0)
        var_0 = lazy_0.to_validation()
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = lambda a: a
        lazy_0 = module_0.Lazy(var_0)
        var_1 = lambda a: a
        list_0 = [lazy_0]
        var_2 = lazy_0.to_maybe(*list_0)
        lazy_1 = module_0.Lazy(var_1)
        bool_0 = lazy_0.__eq__(lazy_1)
        var_3 = lambda a: a
        lazy_2 = module_0.Lazy(var_3)
        var_4 = lambda b: b
        lazy_3 = module_0.Lazy(var_4)
        bool_1 = lazy_2.__eq__(lazy_3)
        var_5 = lambda a: a
        var_6 = lazy_0.to_validation()
        var_7 = lazy_0.to_either()
        lazy_4 = module_0.Lazy(var_5)
        var_8 = None
        bool_2 = lazy_4.__eq__(var_8)
        var_9 = lambda a: a
        lazy_5 = module_0.Lazy(var_9)
        var_10 = lazy_3.to_maybe()
    except BaseException:
        pass