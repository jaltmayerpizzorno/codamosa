# Automatically generated by Pynguin.
import pytutils.log as module_0

def test_case_0():
    try:
        var_0 = module_0.get_logger()
    except BaseException:
        pass

def test_case_1():
    try:
        py_info_0 = module_0._PyInfo()
        var_0 = module_0.configure(py_info_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'LOGGING'
        var_0 = module_0.get_config(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.get_config()
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        str_0 = 'Decorator to wrap a class or instance method with a memoizing\n    callable that saves results in a cache.\n\n    You can also specify a cached exception to cache and re-throw as well.\n\n    Originally from cachetools, but modified to support caching certain exceptions.\n    '
        list_1 = [list_0, list_0, str_0, list_0]
        var_0 = module_0.get_logger(list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        py_info_0 = module_0._PyInfo(**dict_0)
        var_0 = module_0.get_logger(py_info_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '{"version": 1,"disable_existing_loggers": False, "formatters": {}, "handler": {}, "root": {"level": "DEBUG", "handlers": []}}'
        list_0 = [str_0]
        var_0 = module_0.configure(list_0)
    except BaseException:
        pass