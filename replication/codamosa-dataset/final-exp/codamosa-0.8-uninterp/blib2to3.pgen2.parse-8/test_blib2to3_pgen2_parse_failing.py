# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -2899
        int_1 = 786
        parser_0 = module_1.Parser(grammar_0)
        str_0 = 'def'
        var_0 = None
        list_0 = [str_0, var_0]
        tuple_0 = (int_0, int_1, parser_0, list_0)
        var_1 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -1612
        str_0 = ':t.7h'
        list_0 = [grammar_0, grammar_0, grammar_0]
        dict_0 = None
        tuple_0 = (int_0, str_0, list_0, dict_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        str_0 = '\nJ#ZoLmRCKBHe@\x0bSo`H'
        int_0 = parser_0.classify(grammar_0, str_0, grammar_0)
    except BaseException:
        pass

def test_case_3():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'wCAukE~6J#a,2\x0csTn'
        bytes_0 = b'\x0e-\xe7\x7fe\xf5\xe4Z\x80q'
        tuple_0 = (bytes_0,)
        tuple_1 = None
        parse_error_0 = module_1.ParseError(str_0, tuple_0, str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1546
        str_0 = 'M3'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1427
        str_0 = None
        int_1 = -2722
        str_1 = '4\n7&\x0cZK8H'
        int_2 = -1976
        tuple_0 = (int_2, int_0)
        tuple_1 = (str_1, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.shift(int_0, str_0, int_1, tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 519
        tuple_0 = None
        str_0 = None
        int_1 = 4996
        tuple_1 = (int_0, int_1)
        tuple_2 = (str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_0, int_0, tuple_2)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 46
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '%v.'
        int_0 = 35
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        int_1 = 1
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_1, str_0, tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2110
        tuple_0 = (int_0, int_0)
        int_1 = 1
        str_0 = None
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_1, str_0, tuple_1)
    except BaseException:
        pass