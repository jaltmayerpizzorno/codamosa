# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_2():
    str_0 = ":2Qk'EY12=Bi"
    dict_0 = {str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)

def test_case_3():
    a_s_t_0 = module_0.AST()
    str_0 = '\x0c]EkA=6[YGrUUL'
    list_0 = [str_0, a_s_t_0]
    dict_0 = {}
    arg_0 = module_0.arg(*list_0, **dict_0)
    str_1 = 'i\rv*\tCDa;bG'
    dict_1 = {str_1: a_s_t_0, str_1: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    arg_1 = variables_replacer_0.visit_arg(arg_0)
    dict_2 = {str_0: str_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)
    arg_2 = variables_replacer_1.visit_arg(arg_1)
    alias_0 = module_0.alias(*list_0)
    alias_1 = variables_replacer_1.visit_alias(alias_0)
    str_2 = ')'
    str_3 = 'ific5E-*=l"+'
    dict_3 = {str_0: str_0, str_2: a_s_t_0, str_3: a_s_t_0}
    module_1.extend_tree(a_s_t_0, dict_3)
    iterable_0 = module_1.find_variables(a_s_t_0)
    str_4 = '($F0+aSMy2~}'
    dict_4 = {str_4: a_s_t_0}
    module_1.extend_tree(a_s_t_0, dict_4)

def test_case_4():
    str_0 = "u/'\x0bx=f\\EN9v\\]`"
    list_0 = []
    str_1 = '^(\\s*)'
    dict_0 = {str_0: str_0, str_0: list_0, str_0: list_0, str_1: list_0}
    list_1 = [str_1]
    function_def_0 = module_0.FunctionDef(*list_1)
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    variables_replacer_1 = module_1.VariablesReplacer(dict_0)
    function_def_2 = variables_replacer_1.visit_FunctionDef(function_def_1)
    arg_0 = module_0.arg()
    arg_1 = variables_replacer_1.visit_arg(arg_0)
    variables_replacer_2 = module_1.VariablesReplacer(dict_0)
    function_def_3 = variables_replacer_2.visit_FunctionDef(function_def_2)
    variables_replacer_3 = module_1.VariablesReplacer(dict_0)

def test_case_5():
    list_0 = []
    keyword_0 = module_0.keyword(*list_0)
    str_0 = '?'
    str_1 = "'6fip5ce;\\,vM"
    list_1 = None
    dict_0 = {str_0: str_0, str_1: str_0, str_0: list_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    except_handler_0 = module_0.ExceptHandler(*list_0)
    variables_replacer_1 = module_1.VariablesReplacer(dict_0)
    except_handler_1 = variables_replacer_1.visit_ExceptHandler(except_handler_0)
    except_handler_2 = variables_replacer_0.visit_ExceptHandler(except_handler_1)

def test_case_6():
    str_0 = 'extend(vars)\nprint(x, y)'
    var_0 = module_2.parse(str_0)
    str_1 = 'x = 1\nx = 2'
    var_1 = module_2.parse(str_1)
    var_2 = var_1.body
    str_2 = 'vars'
    var_3 = {str_2: var_2}
    module_1.extend_tree(var_0, var_3)

def test_case_7():
    alias_0 = module_0.alias()
    module_1.let(alias_0)

def test_case_8():
    bytes_0 = b'\xa6\xd7]r\xd3\x1f\x05'
    module_1.extend(bytes_0)

def test_case_9():
    a_s_t_0 = module_0.AST()
    str_0 = '\x0c]EkA=6[YGrUUL'
    list_0 = [str_0, a_s_t_0]
    alias_0 = module_0.alias(*list_0)
    str_1 = 'urllib.robotparser'
    str_2 = '0b<?!2'
    dict_0 = {str_1: a_s_t_0, str_2: str_2, str_0: str_0, str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    alias_1 = variables_replacer_0.visit_alias(alias_0)
    str_3 = ')'
    str_4 = '&ific5E-*=l"+'
    dict_1 = {str_0: str_0, str_3: a_s_t_0, str_4: a_s_t_0}
    module_1.extend_tree(a_s_t_0, dict_1)
    iterable_0 = module_1.find_variables(a_s_t_0)
    str_5 = '($F0+aSMy2~}'
    dict_2 = {str_5: a_s_t_0}
    module_1.extend_tree(a_s_t_0, dict_2)

def test_case_10():
    str_0 = 'let(x)\nx += 1\ny = 1'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    var_1 = list(iterable_0)