# Automatically generated by Pynguin.
import py_backwards.utils.snippet as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2
import py_backwards.utils.helpers as module_3

def test_case_0():
    try:
        keyword_0 = None
        str_0 = 'b9N3#i.d'
        dict_0 = {str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '~=]sxUo}23'
        dict_0 = {str_0: str_0, str_0: str_0}
        name_0 = module_1.Name(**dict_0)
        list_0 = [name_0]
        except_handler_0 = module_1.ExceptHandler(*list_0, **dict_0)
        dict_1 = {}
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        str_1 = None
        str_2 = 'c7OWxY|'
        str_3 = 'q\nF:\r|9S;}iM)\n4'
        str_4 = 'uses_query'
        dict_2 = {str_1: str_1, str_1: str_1, str_2: str_3, str_4: str_4}
        variables_replacer_1 = module_0.VariablesReplacer(dict_2)
        except_handler_2 = variables_replacer_1.visit_ExceptHandler(except_handler_1)
    except BaseException:
        pass

def test_case_2():
    try:
        a_s_t_0 = module_1.AST()
        name_0 = None
        str_0 = 'IX-&*'
        str_1 = '\x0bhE/JM)v'
        dict_0 = {str_0: str_0, str_0: a_s_t_0, str_1: str_1}
        module_0.extend_tree(a_s_t_0, dict_0)
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_3():
    try:
        a_s_t_0 = module_1.AST()
        iterable_0 = module_0.find_variables(a_s_t_0)
        function_def_0 = None
        str_0 = 't{Dd'
        str_1 = 'urlsplit'
        list_0 = None
        dict_0 = {str_0: a_s_t_0, str_0: a_s_t_0, str_1: list_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ';a~@l^-'
        dict_0 = {str_0: str_0, str_0: str_0}
        a_s_t_0 = module_1.AST()
        list_0 = [a_s_t_0]
        attribute_0 = module_1.Attribute()
        str_1 = 'six'
        str_2 = 'Compiles:\n        class A(metaclass=B):\n            pass\n    To:\n        class A(_py_backwards_six_with_metaclass(B))\n    \n    '
        dict_1 = {str_1: str_0, str_1: a_s_t_0, str_2: a_s_t_0, str_2: list_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        dict_2 = {str_0: list_0, str_0: str_0}
        variables_replacer_1 = module_0.VariablesReplacer(dict_2)
        attribute_2 = variables_replacer_1.visit_Attribute(attribute_1)
        snippet_0 = module_0.snippet(list_0)
        iterable_0 = module_0.find_variables(a_s_t_0)
        list_1 = snippet_0.get_body(**dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        import_from_0 = module_1.ImportFrom()
        str_0 = '1~<'
        str_1 = '<*kk^NzEs\r\rEeabe32>'
        dict_0 = {str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        class_def_0 = module_1.ClassDef()
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
        variables_replacer_1 = module_0.VariablesReplacer(dict_0)
        class_def_2 = variables_replacer_1.visit_ClassDef(class_def_1)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_6():
    try:
        arg_0 = None
        str_0 = 'W21t\nrx\tMw\nvHg\\.z;'
        str_1 = '*J,ova.#0bD1S{>'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'output'
        dict_0 = {str_0: str_0}
        alias_0 = module_1.alias(**dict_0)
        str_1 = ']bE< ~;)%}cCo!gm\n:f'
        dict_1 = {str_1: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'extend(vars)\nprint(x, y)'
        var_0 = module_2.parse(str_0)
        module_0.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'extend(vars)\nprint(x, y)'
        var_0 = module_2.parse(str_0)
        str_1 = 'x = 1\nx = 2'
        var_1 = module_2.parse(str_1)
        var_2 = var_1.body
        callable_0 = None
        snippet_0 = module_0.snippet(callable_0)
        str_2 = 'vars'
        var_3 = {str_2: var_2}
        module_0.extend_tree(var_0, var_3)
        str_3 = module_3.get_source(var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        attribute_0 = None
        str_0 = None
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        str_1 = 'email.mime.image'
        dict_0 = {}
        a_s_t_0 = module_1.AST(**dict_0)
        iterable_0 = module_0.find_variables(a_s_t_0)
        dict_1 = {str_0: str_0, str_1: str_0, str_0: str_0}
        snippet_0 = module_0.snippet(dict_1)
        list_0 = [str_1, snippet_0, str_0]
        str_2 = '\t}9s^TYtSt2p0KL\\Z'
        str_3 = 'O}"4;Hns J@GBpzS3%'
        str_4 = 'super'
        dict_2 = {str_2: iterable_0, str_1: a_s_t_0, str_3: dict_1, str_4: dict_0}
        import_from_0 = module_1.ImportFrom(*list_0, **dict_2)
        str_5 = None
        dict_3 = {str_1: str_0, str_5: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_3)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        dict_4 = {str_0: str_1}
        variables_replacer_1 = module_0.VariablesReplacer(dict_4)
        import_from_2 = variables_replacer_1.visit_ImportFrom(import_from_1)
        a_s_t_1 = None
        keyword_0 = module_1.keyword()
        str_6 = 'tkinter_font'
        dict_5 = {str_6: a_s_t_1}
        attribute_0 = module_1.Attribute(**dict_0)
        variables_replacer_2 = module_0.VariablesReplacer(dict_5)
        attribute_1 = None
        attribute_2 = variables_replacer_0.visit_Attribute(attribute_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = '{_e$G'
        module_0.let(str_0)
        dict_0 = {}
        a_s_t_0 = module_1.AST(**dict_0)
        iterable_0 = module_0.find_variables(a_s_t_0)
        a_s_t_1 = module_1.AST(**dict_0)
        str_2 = '\n    '
        dict_1 = {str_2: a_s_t_1}
        module_0.extend_tree(a_s_t_1, dict_1)
        dict_2 = {str_0: str_0, str_1: str_0, str_0: str_0}
        snippet_0 = module_0.snippet(dict_2)
        list_0 = [str_1, snippet_0, str_0]
        str_3 = '\t}9s^TYtSt2p0KL\\Z'
        str_4 = 'M8Kwpvd;oE>,&%'
        str_5 = 'super'
        arg_0 = module_1.arg()
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        variables_replacer_1 = module_0.VariablesReplacer(dict_1)
        arg_2 = variables_replacer_1.visit_arg(arg_1)
        dict_3 = {str_3: iterable_0, str_1: a_s_t_0, str_4: dict_2, str_5: dict_0}
        import_from_0 = module_1.ImportFrom(*list_0, **dict_3)
        str_6 = None
        module_0.extend_tree(a_s_t_0, dict_1)
        dict_4 = {str_1: str_0, str_4: str_3, str_5: str_1, str_0: a_s_t_0, str_6: str_0}
        variables_replacer_2 = module_0.VariablesReplacer(dict_4)
        import_from_1 = variables_replacer_2.visit_ImportFrom(import_from_0)
        iterable_1 = module_0.find_variables(a_s_t_0)
        dict_5 = {str_0: str_1}
        variables_replacer_3 = module_0.VariablesReplacer(dict_5)
        import_from_2 = variables_replacer_3.visit_ImportFrom(import_from_1)
        a_s_t_2 = None
        keyword_0 = module_1.keyword()
        str_7 = 'tkinter_font'
        dict_6 = {str_7: a_s_t_2}
        attribute_0 = module_1.Attribute(**dict_0)
        variables_replacer_4 = module_0.VariablesReplacer(dict_6)
        attribute_1 = variables_replacer_2.visit_Attribute(attribute_0)
        class_def_0 = None
        class_def_1 = variables_replacer_2.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ',i$MFuQz'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        a_s_t_0 = module_1.AST()
        module_0.extend_tree(a_s_t_0, dict_0)
        str_1 = 'Z = 6'
        var_0 = module_2.parse(str_1)
        iterable_0 = module_0.find_variables(a_s_t_0)
        str_2 = 'le(x = 1)'
        var_1 = module_2.parse(str_2)
        iterable_1 = module_0.find_variables(var_1)
        var_2 = list(iterable_1)
        str_3 = '\n        let(x = 1)\n        let(y = [1, 2])\n        '
        var_3 = module_2.parse(str_3)
    except BaseException:
        pass