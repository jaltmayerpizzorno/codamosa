# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3

def test_case_0():
    try:
        str_0 = 'type'
        str_1 = {str_0: str_0}
        field_0 = module_0.from_json_schema(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{"$ref": "#/definitions/A"}'
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.from_json_schema(str_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -4
        string_0 = module_2.String(max_length=int_0)
        var_0 = module_0.to_json_schema(string_0)
        field_0 = module_0.from_json_schema(var_0)
        dict_0 = module_0.get_standard_properties(field_0)
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_1 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        field_2 = module_0.enum_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        schema_definitions_0 = None
        field_0 = module_0.from_json_schema(dict_0, schema_definitions_0)
        field_1 = module_0.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.all_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '!y'
        dict_0 = {}
        dict_1 = {str_0: dict_0, str_0: str_0, str_0: dict_0}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        field_1 = module_0.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        schema_definitions_0 = None
        dict_0 = {schema_definitions_0: schema_definitions_0}
        field_0 = module_0.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = None
        var_1 = module_0.to_json_schema(var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        field_0 = module_2.Field()
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_10():
    try:
        field_0 = None
        not_0 = module_3.Not(field_0)
        var_0 = module_0.to_json_schema(not_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -4
        string_0 = module_2.String(max_length=int_0)
        dict_0 = {int_0: int_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        field_1 = module_0.from_json_schema(dict_0, schema_definitions_0)
        var_1 = module_0.to_json_schema(field_1)
        field_2 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '$ref'
        str_1 = {str_0: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.ref_from_json_schema(str_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 3
        int_1 = 30
        string_0 = module_2.String(max_length=int_1, min_length=int_0)
        int_2 = 100
        bool_0 = False
        field_0 = module_0.from_json_schema(bool_0)
        var_0 = module_0.to_json_schema(field_0)
        str_0 = 'ue}Km)-'
        str_1 = 'L '
        str_2 = ':7\tRD=Q)UB'
        dict_0 = {str_1: int_2, str_2: str_2}
        float_0 = module_2.Float(maximum=int_0, exclusive_minimum=int_1, precision=str_0, **dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -1450.77
        dict_0 = {}
        float_1 = module_2.Float(exclusive_maximum=float_0, **dict_0)
        bool_0 = False
        validation_result_0 = float_1.validate_or_error(float_0, strict=bool_0)
        var_0 = module_0.to_json_schema(float_1)
        list_0 = [float_1, bool_0, var_0]
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        schema_definitions_0 = module_1.SchemaDefinitions()
        var_0 = module_0.to_json_schema(schema_definitions_0)
        str_0 = '<v+H98vW'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        never_match_0 = module_3.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'type'
        str_1 = 'string'
        str_2 = {str_0: str_1}
        field_0 = module_0.from_json_schema(str_2)
        string_0 = module_2.String()
        str_3 = 'exclusiveMinimum'
        str_4 = 'number'
        int_0 = 1
        var_0 = {str_0: str_4, str_3: int_0}
        field_1 = module_0.from_json_schema(var_0)
        integer_0 = module_2.Integer(exclusive_minimum=int_0)
        str_5 = '^[A-Z]'
        str_6 = '*'
        var_1 = str_5 + str_6
        var_2 = {str_0: str_1, str_1: var_1}
        field_2 = module_0.from_json_schema(var_2)
        str_7 = '^[A-Z]*'
        string_1 = module_2.String(pattern=str_7)
        str_8 = 'enum'
        str_9 = 'A'
        str_10 = [str_9, str_3]
        str_11 = {str_0: str_1, str_8: str_10}
        field_3 = module_0.from_json_schema(str_11)
        str_12 = [str_9, str_5]
        choice_0 = module_2.Choice(choices=str_12)
        str_13 = 'null'
        str_14 = [str_1, str_13]
        str_15 = {str_0: str_14}
        field_4 = module_0.from_json_schema(str_15)
        string_2 = module_2.String()
        var_3 = None
        var_4 = [string_2, var_3]
        union_0 = module_2.Union()
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -4
        var_0 = None
        string_0 = module_2.String(min_length=int_0, pattern=var_0)
        var_1 = module_0.to_json_schema(string_0)
        bool_0 = True
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.from_json_schema(bool_0, schema_definitions_0)
        any_0 = field_0.serialize(int_0)
        dict_0 = module_0.get_standard_properties(field_0)
        schema_definitions_1 = module_1.SchemaDefinitions()
        field_1 = module_0.type_from_json_schema(dict_0, schema_definitions_1)
        schema_definitions_2 = module_1.SchemaDefinitions()
        str_0 = '@.'
        field_2 = module_2.Field(description=str_0, default=schema_definitions_0)
        var_2 = module_0.to_json_schema(field_2)
    except BaseException:
        pass