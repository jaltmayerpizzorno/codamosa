# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        int_0 = 61
        py_file_error_0 = module_0.PyFileError(int_0)
        bool_0 = False
        payload_too_large_0 = module_0.PayloadTooLarge(py_file_error_0, bool_0)
        list_0 = [py_file_error_0]
        int_1 = 2230
        method_not_supported_0 = module_0.MethodNotSupported(list_0, int_1, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 503
        set_0 = {int_0}
        str_0 = None
        float_0 = -42.328
        request_timeout_0 = module_0.RequestTimeout(float_0)
        server_error_0 = module_0.ServerError(str_0, request_timeout_0)
        unauthorized_0 = module_0.Unauthorized(int_0, set_0, server_error_0)
        float_1 = -2201.7
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(unauthorized_0, unauthorized_0, float_1)
        sanic_exception_0 = module_0.SanicException(header_expectation_failed_0)
        list_0 = []
        content_range_error_0 = module_0.ContentRangeError(sanic_exception_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 3310
        int_1 = -2910
        dict_0 = {int_1: int_0, int_0: int_1}
        py_file_error_0 = module_0.PyFileError(dict_0)
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x96c\xd6\x02\x03\xe2\x0f?H\x86.'
        list_0 = [bytes_0, bytes_0, bytes_0]
        sanic_exception_0 = module_0.SanicException(list_0)
        int_0 = -1010
        str_0 = "~4%,Eq[P'YyM<B;rd"
        var_0 = module_0.abort(int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b''
        float_0 = 1582.0
        py_file_error_0 = module_0.PyFileError(float_0)
        float_1 = -2785.38
        server_error_0 = module_0.ServerError(py_file_error_0, float_1)
        py_file_error_1 = module_0.PyFileError(server_error_0)
        header_expectation_failed_0 = None
        py_file_error_2 = module_0.PyFileError(header_expectation_failed_0)
        list_0 = [bytes_0]
        invalid_signal_0 = module_0.InvalidSignal(list_0)
        bool_0 = False
        load_file_exception_0 = module_0.LoadFileException(invalid_signal_0, bool_0)
        u_r_l_build_error_0 = module_0.URLBuildError(float_0)
        list_1 = [header_expectation_failed_0, load_file_exception_0, invalid_signal_0, float_1]
        not_found_0 = module_0.NotFound(server_error_0)
        payload_too_large_0 = module_0.PayloadTooLarge(list_1, not_found_0)
        request_timeout_0 = module_0.RequestTimeout(payload_too_large_0, bool_0)
        file_not_found_0 = module_0.FileNotFound(load_file_exception_0, invalid_signal_0, u_r_l_build_error_0)
        str_0 = '1(=b'
        dict_0 = {py_file_error_2: u_r_l_build_error_0}
        str_1 = 'AwG2 4<XO,:&dM\\'
        not_found_1 = module_0.NotFound(str_1, request_timeout_0)
        request_timeout_1 = module_0.RequestTimeout(dict_0)
        forbidden_0 = module_0.Forbidden(header_expectation_failed_0, request_timeout_1)
        not_found_2 = module_0.NotFound(forbidden_0)
        payload_too_large_1 = module_0.PayloadTooLarge(file_not_found_0, not_found_2)
        invalid_usage_0 = module_0.InvalidUsage(py_file_error_2, str_0)
        payload_too_large_2 = module_0.PayloadTooLarge(invalid_usage_0)
        not_found_3 = module_0.NotFound(bytes_0, payload_too_large_2)
        float_2 = 1476.67579
        request_timeout_2 = module_0.RequestTimeout(float_2)
        forbidden_1 = module_0.Forbidden(request_timeout_2, invalid_signal_0)
        int_0 = 414
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 584
        set_0 = {int_0, int_0, int_0}
        unauthorized_0 = module_0.Unauthorized(set_0)
        sanic_exception_0 = module_0.SanicException(unauthorized_0, unauthorized_0)
        server_error_0 = module_0.ServerError(sanic_exception_0)
        str_0 = '\n        The port the client connected to, by forwarded ``port`` or\n        ``request.host``.\n\n        Default port is returned as 80 and 443 based on ``request.scheme``.\n\n        :return: port number\n        :rtype: int\n        '
        list_0 = None
        payload_too_large_0 = module_0.PayloadTooLarge(list_0)
        tuple_0 = ()
        request_timeout_0 = module_0.RequestTimeout(server_error_0, payload_too_large_0, tuple_0)
        load_file_exception_0 = module_0.LoadFileException(payload_too_large_0, str_0, unauthorized_0)
        content_range_error_0 = module_0.ContentRangeError(str_0, load_file_exception_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        forbidden_0 = None
        load_file_exception_0 = None
        forbidden_1 = module_0.Forbidden(list_0)
        str_0 = 'pNfj\r)p'
        str_1 = 'secure'
        dict_0 = {str_1: str_0}
        unauthorized_0 = module_0.Unauthorized(load_file_exception_0, forbidden_1, str_0, **dict_0)
        server_error_0 = module_0.ServerError(forbidden_0, unauthorized_0)
        not_found_0 = module_0.NotFound(server_error_0)
        float_0 = 1.0
        method_not_supported_0 = module_0.MethodNotSupported(list_0, not_found_0, float_0)
    except BaseException:
        pass