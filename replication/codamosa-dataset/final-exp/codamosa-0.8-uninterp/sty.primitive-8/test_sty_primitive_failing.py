# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        register_0 = module_0.Register()
        str_0 = ')iBx;8\rb"1!7D\t'
        list_0 = [register_0, register_0, register_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_1 = module_0.Register()
        str_0 = 't~u'
        dict_0 = register_0.as_dict()
        register_2 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        var_1 = register_2.as_namedtuple()
        int_0 = 713
        list_0 = [int_0]
        str_1 = register_0.__call__(*list_0)
        str_2 = register_0.__call__()
        str_3 = '29TgO@3|z'
        register_2.set_renderfunc(str_0, str_3)
        style_0 = module_0.Style()
        str_4 = register_2.__call__()
        var_2 = register_0.as_namedtuple()
        register_3 = module_0.Register()
        var_3 = register_3.as_namedtuple()
        list_1 = [style_0, dict_0]
        style_1 = module_0.Style(*list_1)
        var_4 = register_2.__setattr__(str_2, style_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -43.929318
        type_0 = None
        tuple_0 = None
        set_0 = {float_0, float_0, float_0, tuple_0}
        str_0 = 'ie~'
        list_0 = [str_0]
        str_1 = 'StyleRegister'
        str_2 = '\n        With this method you can add or replace render-functions for a given register-object:\n\n        :param rendertype: The render type for which the new renderfunc is used.\n        :param func: The new render function.\n        '
        dict_0 = {str_1: str_0, str_1: tuple_0, str_1: set_0, str_2: type_0}
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        str_3 = register_2.__call__(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 44
        dict_0 = {int_0: int_0}
        register_0 = module_0.Register()
        register_0.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        register_1.unmute()
        register_2 = register_1.copy()
        str_0 = '!5VoMuL I,z'
        register_0.set_rgb_call(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        dict_0 = register_1.as_dict()
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        str_0 = 'P%\nu\re[qNYaB$'
        style_0 = module_0.Style()
        register_1 = module_0.Register()
        dict_0 = register_0.as_dict()
        list_0 = [str_0]
        type_0 = None
        register_0.set_renderfunc(type_0, list_0)
        register_0.set_eightbit_call(type_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '^%9CqZNj'
        str_1 = 'S:U:zlVBv\x0bn`pZ'
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_2 = register_1.__call__()
        register_2 = module_0.Register()
        register_0.mute()
        register_1.unmute()
        str_3 = register_2.__call__()
        list_0 = [str_0, str_1, str_1, str_1]
        register_3 = module_0.Register()
        str_4 = 'Register'
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_4, style_0)
        style_1 = module_0.Style(*list_0)
        str_5 = 'I!9;{2j=0n'
        style_2 = style_0.__new__(str_5)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '^%9CqZNj'
        str_1 = 'S:U:zlVBv\x0bn`pZ'
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_2 = register_1.__call__()
        register_2 = module_0.Register()
        register_0.mute()
        register_1.unmute()
        str_3 = register_2.__call__()
        list_0 = [str_0, str_1, str_1, str_1]
        register_3 = module_0.Register()
        str_4 = 'Register'
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_4, style_0)
        style_1 = module_0.Style(*list_0)
        str_5 = 'I!9;{2j=0n'
        register_0.unmute()
        style_2 = style_0.__new__(str_5)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_1 = module_0.Register()
        register_0.mute()
        str_0 = 'c'
        dict_0 = register_0.as_dict()
        register_2 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        var_1 = register_2.as_namedtuple()
        str_1 = register_0.__call__()
        str_2 = '29TgO@3|z'
        register_2.set_renderfunc(str_0, str_2)
        style_0 = module_0.Style()
        str_3 = register_2.__call__()
        register_1.mute()
        dict_1 = register_2.as_dict()
        var_2 = register_2.as_namedtuple()
        register_3 = register_2.copy()
        style_1 = module_0.Style()
        var_3 = register_3.__setattr__(str_1, style_1)
        var_4 = register_3.as_namedtuple()
    except BaseException:
        pass

def test_case_10():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        str_0 = '{'
        dict_0 = register_0.as_dict()
        register_1 = register_0.copy()
        register_2 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        var_1 = register_2.as_namedtuple()
        register_1.mute()
        str_1 = '29TgO@3|z'
        register_2.set_renderfunc(str_0, str_1)
        style_0 = module_0.Style()
        str_2 = register_2.__call__()
        dict_1 = {str_2: str_2}
        dict_2 = None
        dict_3 = register_2.as_dict()
        str_3 = '!gx+:3T'
        var_2 = register_2.as_namedtuple()
        style_1 = module_0.Style()
        str_4 = 'I5ee\t*'
        var_3 = register_0.__setattr__(str_4, style_0)
        list_0 = [str_3, str_0, str_4]
        str_5 = register_0.__call__(*list_0)
        register_3 = module_0.Register()
        list_1 = [dict_2, str_1, register_2, dict_1]
        register_0.set_eightbit_call(list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        register_0 = module_0.Register()
        register_0.mute()
        register_1 = register_0.copy()
        str_0 = 'c'
        dict_0 = register_0.as_dict()
        register_2 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        var_1 = register_2.as_namedtuple()
        str_1 = register_0.__call__()
        style_0 = module_0.Style()
        str_2 = '(qg'
        var_2 = register_1.__setattr__(str_2, style_0)
        register_1.mute()
        dict_1 = {str_0: str_0}
        dict_2 = register_2.as_dict()
        var_3 = register_2.as_namedtuple()
        bool_0 = False
        list_0 = [var_3, bool_0, dict_1]
        dict_3 = {}
        style_1 = module_0.Style(*list_0, **dict_3)
        register_3 = module_0.Register()
        register_4 = register_3.copy()
        var_4 = register_4.__setattr__(str_1, style_1)
    except BaseException:
        pass

def test_case_12():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_1 = module_0.Register()
        str_0 = 't~u'
        dict_0 = register_0.as_dict()
        register_2 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        var_1 = register_2.as_namedtuple()
        str_1 = register_0.__call__()
        str_2 = '29TgO@3|z'
        register_2.set_renderfunc(str_0, str_2)
        style_0 = module_0.Style()
        str_3 = register_2.__call__()
        register_1.mute()
        var_2 = register_0.as_namedtuple()
        register_3 = module_0.Register()
        var_3 = register_3.as_namedtuple()
        list_0 = [style_0, dict_0]
        style_1 = module_0.Style(*list_0)
        var_4 = register_2.__setattr__(str_1, style_1)
    except BaseException:
        pass

def test_case_13():
    try:
        type_0 = None
        int_0 = -1982
        register_0 = module_0.Register()
        list_0 = [int_0, int_0, int_0]
        register_1 = module_0.Register()
        register_1.set_renderfunc(type_0, list_0)
        register_2 = module_0.Register()
        register_3 = register_2.copy()
        register_3.mute()
        register_4 = module_0.Register()
        register_5 = register_4.copy()
        register_1.set_rgb_call(type_0)
        str_0 = 'T~Ql\\,)/B#jE5}8)'
        register_6 = register_4.copy()
        style_0 = module_0.Style()
        var_0 = register_2.as_namedtuple()
        style_1 = style_0.__new__(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_1 = module_0.Register()
        str_0 = 't~u'
        dict_0 = register_0.as_dict()
        register_2 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        var_1 = register_2.as_namedtuple()
        int_0 = 713
        list_0 = [int_0]
        str_1 = register_0.__call__(*list_0)
        str_2 = register_0.__call__()
        str_3 = '29TgO@3|z'
        style_0 = module_0.Style()
        var_2 = register_2.__setattr__(str_0, style_0)
        register_2.set_renderfunc(str_0, str_3)
        style_1 = module_0.Style()
        str_4 = register_2.__call__()
        register_1.mute()
        var_3 = register_0.as_namedtuple()
        register_3 = module_0.Register()
        var_4 = register_3.as_namedtuple()
        str_5 = None
        list_1 = [str_5]
        style_2 = module_0.Style(*list_1)
        type_0 = None
        register_0.set_eightbit_call(type_0)
    except BaseException:
        pass