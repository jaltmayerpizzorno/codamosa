# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        bytes_0 = b'\xad\xb2\xc8\xb5\x81\xe7'
        tuple_0 = (bytes_0,)
        config_manager_0 = module_0.ConfigManager()
        str_0 = ':h~'
        dict_0 = {str_0: tuple_0, str_0: tuple_0}
        setting_0 = module_0.Setting(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        config_manager_0 = module_0.ConfigManager(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = '_JS]m)&\n\\+av\x0c \\`ew'
        config_manager_1 = module_0.ConfigManager(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Could not detect a supported package manager from the following list: %s, or the required Python library is not installed. Check warnings for details.'
        dict_0 = {}
        dict_1 = {str_0: dict_0}
        str_1 = '/v\x0c:x'
        list_0 = [dict_0]
        bytes_0 = b'\xb5g\x9c\xb4\x15lZ\x163\xb7'
        float_0 = None
        tuple_0 = (str_1, list_0, bytes_0, float_0)
        config_manager_0 = module_0.ConfigManager(dict_1, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'l|tq4E2ZV'
        float_0 = -1559.0
        list_0 = []
        var_0 = module_0.resolve_path(list_0)
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_configuration_definition(str_0, float_0)
        var_2 = config_manager_0.update_config_data()
        var_3 = module_0.find_ini_config_file()
        plugin_0 = module_0.Plugin()
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        config_manager_0 = module_0.ConfigManager()
        int_0 = None
        list_1 = []
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.get_plugin_vars(int_0, list_1)
        var_1 = config_manager_1.get_configuration_definition(list_0, list_0)
        plugin_0 = module_0.Plugin()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'f\t{dM[1ja!%J/~q<'
        list_0 = [str_0, str_0, str_0]
        int_0 = 11
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value_and_origin(str_0, list_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = None
        str_0 = "q4\r}49;[I|'"
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_vars(str_0, config_manager_0)
        config_manager_1 = module_0.ConfigManager()
        var_1 = config_manager_1.get_configuration_definition(list_0, list_0)
        plugin_0 = module_0.Plugin()
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = None
        str_0 = '&'
        config_manager_0 = module_0.ConfigManager()
        bool_0 = False
        list_0 = [str_0, tuple_0]
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(bool_0, list_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 32602
        str_0 = '&rU p8*Gn\r<eiXd!F'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(int_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        complex_0 = None
        str_0 = 'mobsa6!fL#d'
        var_0 = module_0.get_ini_config_value(complex_0, str_0)
        bytes_0 = None
        str_1 = '~rQdp'
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_plugin_vars(bytes_0, str_1)
        str_2 = '\n- name: Include vars of stuff.yaml into the \'stuff\' variable (2.2).\n  include_vars:\n    file: stuff.yaml\n    name: stuff\n\n- name: Conditionally decide to load in variables into \'plans\' when x is 0, otherwise do not. (2.2)\n  include_vars:\n    file: contingency_plan.yaml\n    name: plans\n  when: x == 0\n\n- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.\n  include_vars: "{{ lookup(\'first_found\', params) }}"\n  vars:\n    params:\n      files:\n        - \'{{ansible_distribution}}.yaml\'\n        - \'{{ansible_os_family}}.yaml\'\n        - default.yaml\n      paths:\n        - \'vars\'\n\n- name: Bare include (free-form)\n  include_vars: myvars.yaml\n\n- name: Include all .json and .jsn files in vars/all and all nested directories (2.3)\n  include_vars:\n    dir: vars/all\n    extensions:\n      - \'json\'\n      - \'jsn\'\n\n- name: Include all default extension files in vars/all and all nested directories and save the output in test. (2.2)\n  include_vars:\n    dir: vars/all\n    name: test\n\n- name: Include default extension files in vars/services (2.2)\n  include_vars:\n    dir: vars/services\n    depth: 1\n\n- name: Include only files matching bastion.yaml (2.2)\n  include_vars:\n    dir: vars\n    files_matching: bastion.yaml\n\n- name: Include all .yaml files except bastion.yaml (2.3)\n  include_vars:\n    dir: vars\n    ignore_files:\n      - \'bastion.yaml\'\n    extensions:\n      - \'yaml\'\n\n- name: Ignore warnings raised for files with unknown extensions while loading (2.7)\n  include_vars:\n    dir: vars\n    ignore_unknown_extensions: True\n    extensions:\n      - \'\'\n      - \'yaml\'\n      - \'yml\'\n      - \'json\'\n'
        var_2 = config_manager_0.update_config_data()
        config_manager_1 = module_0.ConfigManager()
        dict_0 = {}
        int_0 = 3685
        list_0 = [str_1, bytes_0, var_2, dict_0]
        var_3 = config_manager_1.initialize_plugin_configuration_definitions(int_0, config_manager_1, list_0)
        var_4 = module_0.get_ini_config_value(str_2, dict_0)
        str_3 = '&%1&6b;vrsf,['
        str_4 = 'tmppath'
        tuple_0 = (str_3, str_4)
        var_5 = module_0.get_config_type(tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data()
        int_0 = -1877
        var_1 = config_manager_0.update_config_data(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = None
        var_0 = module_0.find_ini_config_file()
        str_0 = '~rQdp'
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_plugin_vars(bytes_0, str_0)
        var_2 = config_manager_0.update_config_data()
        config_manager_1 = module_0.ConfigManager()
        dict_0 = {}
        int_0 = 3685
        list_0 = [str_0, bytes_0, var_2, dict_0]
        var_3 = config_manager_1.initialize_plugin_configuration_definitions(int_0, config_manager_1, list_0)
        list_1 = [list_0, var_2, config_manager_0, var_1]
        setting_0 = module_0.Setting(*list_1)
        str_1 = 'pathspec'
        var_4 = module_0.ensure_type(setting_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = module_0.find_ini_config_file()
        dict_0 = {}
        str_0 = '{'
        list_0 = None
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_config_value(dict_0, str_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = None
        str_0 = '~rQdp'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_vars(bytes_0, str_0)
        str_1 = '\n- name: Include vars of stuff.yaml into the \'stuff\' variable (2.2).\n  include_vars:\n    file: stuff.yaml\n    name: stuff\n\n- name: Conditionally decide to load in variables into \'plans\' when x is 0, otherwise do not. (2.2)\n  include_vars:\n    file: contingency_plan.yaml\n    name: plans\n  when: x == 0\n\n- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.\n  include_vars: "{{ lookup(\'first_found\', params) }}"\n  vars:\n    params:\n      files:\n        - \'{{ansible_distribution}}.yaml\'\n        - \'{{ansible_os_family}}.yaml\'\n        - default.yaml\n      paths:\n        - \'vars\'\n\n- name: Bare include (free-form)\n  include_vars: myvars.yaml\n\n- name: Include all .json and .jsn files in vars/all and all nested directories (2.3)\n  include_vars:\n    dir: vars/all\n    extensions:\n      - \'json\'\n      - \'jsn\'\n\n- name: Include all default extension files in vars/all and all nested directories and save the output in test. (2.2)\n  include_vars:\n    dir: vars/all\n    name: test\n\n- name: Include default extension files in vars/services (2.2)\n  include_vars:\n    dir: vars/services\n    depth: 1\n\n- name: Include only files matching bastion.yaml (2.2)\n  include_vars:\n    dir: vars\n    files_matching: bastion.yaml\n\n- name: Include all .yaml files except bastion.yaml (2.3)\n  include_vars:\n    dir: vars\n    ignore_files:\n      - \'bastion.yaml\'\n    extensions:\n      - \'yaml\'\n\n- name: Ignore warnings raised for files with unknown extensions while loading (2.7)\n  include_vars:\n    dir: vars\n    ignore_unknown_extensions: True\n    extensions:\n      - \'\'\n      - \'yaml\'\n      - \'yml\'\n      - \'json\'\n'
        var_1 = config_manager_0.update_config_data()
        str_2 = None
        str_3 = 'zDn)ONa\r5P]P'
        bool_0 = False
        var_2 = config_manager_0.get_plugin_vars(bool_0, config_manager_0)
        var_3 = module_0.resolve_path(str_3)
        str_4 = 'M@s8NV>19/p}'
        config_manager_1 = module_0.ConfigManager()
        int_0 = 2128
        var_4 = config_manager_0.update_config_data()
        var_5 = config_manager_0.get_plugin_options(int_0, int_0)
        dict_0 = {str_2: var_0}
        int_1 = 3725
        list_0 = [str_0, bytes_0, var_1, dict_0]
        var_6 = config_manager_1.initialize_plugin_configuration_definitions(int_1, config_manager_1, list_0)
        var_7 = module_0.get_ini_config_value(str_1, dict_0)
        list_1 = None
        tuple_0 = (bool_0, dict_0, config_manager_1, list_1)
        var_8 = config_manager_1.update_config_data(str_4, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = None
        str_0 = '~rQdp'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_vars(bytes_0, str_0)
        var_1 = config_manager_0.update_config_data()
        str_1 = 'zDn)ONa\r5P]P'
        var_2 = module_0.resolve_path(str_1)
        str_2 = '6,}yM'
        str_3 = '\r!G\tR^0&1'
        var_3 = config_manager_0.get_plugin_options(bytes_0, bytes_0, str_2, str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = None
        str_0 = '~rQdp'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_vars(bytes_0, str_0)
        str_1 = '\n- name: Include vars of stuff.yaml into the \'stuff\' variable (2.2).\n  include_vars:\n    file: stuff.yaml\n    name: stuff\n\n- name: Conditionally decide to load in variables into \'plans\' when x is 0, otherwise do not. (2.2)\n  include_vars:\n    file: contingency_plan.yaml\n    name: plans\n  when: x == 0\n\n- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.\n  include_vars: "{{ lookup(\'first_found\', params) }}"\n  vars:\n    params:\n      files:\n        - \'{{ansible_distribution}}.yaml\'\n        - \'{{ansible_os_family}}.yaml\'\n        - default.yaml\n      paths:\n        - \'vars\'\n\n- name: Bare include (free-form)\n  include_vars: myvars.yaml\n\n- name: Include all .json and .jsn files in vars/all and all nested directories (2.3)\n  include_vars:\n    dir: vars/all\n    extensions:\n      - \'json\'\n      - \'jsn\'\n\n- name: Include all default extension files in vars/all and all nested directories and save the output in test. (2.2)\n  include_vars:\n    dir: vars/all\n    name: test\n\n- name: Include default extension files in vars/services (2.2)\n  include_vars:\n    dir: vars/services\n    depth: 1\n\n- name: Include only files matching bastion.yaml (2.2)\n  include_vars:\n    dir: vars\n    files_matching: bastion.yaml\n\n- name: Include all .yaml files except bastion.yaml (2.3)\n  include_vars:\n    dir: vars\n    ignore_files:\n      - \'bastion.yaml\'\n    extensions:\n      - \'yaml\'\n\n- name: Ignore warnings raised for files with unknown extensions while loading (2.7)\n  include_vars:\n    dir: vars\n    ignore_unknown_extensions: True\n    extensions:\n      - \'\'\n      - \'yaml\'\n      - \'yml\'\n      - \'json\'\n'
        var_1 = config_manager_0.update_config_data()
        str_2 = None
        str_3 = 'zDn)ONa\r5P]P'
        bool_0 = False
        var_2 = config_manager_0.get_plugin_vars(bool_0, config_manager_0)
        var_3 = module_0.resolve_path(str_3)
        config_manager_1 = module_0.ConfigManager()
        int_0 = 2143
        var_4 = config_manager_0.update_config_data()
        var_5 = config_manager_0.get_plugin_options(int_0, int_0)
        dict_0 = {str_2: var_0}
        int_1 = 3704
        list_0 = [str_0, bytes_0, var_1, dict_0]
        var_6 = config_manager_1.initialize_plugin_configuration_definitions(int_1, config_manager_1, list_0)
        var_7 = module_0.get_ini_config_value(str_1, dict_0)
        var_8 = config_manager_1.update_config_data(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = None
        str_0 = '~rQdp'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_vars(bytes_0, str_0)
        var_1 = config_manager_0.update_config_data()
        str_1 = 'zDn)ONa\r5P]P'
        bool_0 = False
        var_2 = config_manager_0.get_plugin_vars(bool_0, config_manager_0)
        var_3 = module_0.resolve_path(str_1)
        config_manager_1 = module_0.ConfigManager()
        int_0 = 2143
        var_4 = config_manager_0.update_config_data()
        var_5 = config_manager_0.get_plugin_options(int_0, int_0)
        bytes_1 = b'\xf9;\xe2EmdA\xb6'
        var_6 = config_manager_1.get_configuration_definition(bytes_0, bytes_1)
        float_0 = None
        var_7 = config_manager_0.update_config_data(float_0)
        int_1 = -920
        str_2 = '#{kd5[:[Js+b'
        var_8 = config_manager_0.get_config_value(int_1, config_manager_0, str_1, str_2)
    except BaseException:
        pass