# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    config_manager_0 = module_0.ConfigManager()

def test_case_1():
    float_0 = -63.8423
    var_0 = module_0.get_ini_config_value(float_0, float_0)

def test_case_2():
    list_0 = None
    config_manager_0 = module_0.ConfigManager()
    int_0 = None
    list_1 = []
    config_manager_1 = module_0.ConfigManager()
    var_0 = config_manager_1.get_plugin_vars(int_0, list_1)
    var_1 = config_manager_1.get_configuration_definition(list_0, list_0)
    var_2 = module_0.find_ini_config_file()

def test_case_3():
    dict_0 = {}
    str_0 = 'lyM$wH)*pZG."a\t'
    list_0 = [dict_0, dict_0, str_0]
    int_0 = -700
    float_0 = 2532.0
    list_1 = [list_0, list_0, list_0, float_0]
    config_manager_0 = module_0.ConfigManager()
    var_0 = config_manager_0.get_plugin_options(int_0, float_0, list_1)
    int_1 = 400
    var_1 = module_0.get_ini_config_value(list_0, int_1)

def test_case_4():
    tuple_0 = None
    str_0 = '&'
    dict_0 = {str_0: str_0, tuple_0: tuple_0}
    config_manager_0 = module_0.ConfigManager()
    var_0 = config_manager_0.get_plugin_vars(tuple_0, dict_0)

def test_case_5():
    bytes_0 = b'=\xde?\xdb\xa6\xc3HyO\xd1\xe4(m\x8e\x13\x9d\xa4'
    bytes_1 = b'\x14\xd8\xc8\x00w3(\x19\xd3\x90'
    dict_0 = {}
    str_0 = '^'
    tuple_0 = (dict_0, str_0)
    list_0 = [dict_0, bytes_0, bytes_1]
    var_0 = module_0.get_ini_config_value(tuple_0, list_0)
    var_1 = module_0.ensure_type(bytes_0, bytes_1)

def test_case_6():
    str_0 = '\n- name: Include vars of stuff.yaml into the \'stuff\' variable (2.2).\n  include_vars:\n    file: stuff.yaml\n    name: stuff\n\n- name: Conditionally decide to load in variables into \'plans\' when x is 0, otherwise do not. (2.2)\n  include_vars:\n    file: contingency_plan.yaml\n    name: plans\n  when: x == 0\n\n- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.\n  include_vars: "{{ lookup(\'first_found\', params) }}"\n  vars:\n    params:\n      files:\n        - \'{{ansible_distribution}}.yaml\'\n        - \'{{ansible_os_family}}.yaml\'\n        - default.yaml\n      paths:\n        - \'vars\'\n\n- name: Bare include (free-form)\n  include_vars: myvars.yaml\n\n- name: Include all .json and .jsn files in vars/all and all nested directories (2.3)\n  include_vars:\n    dir: vars/all\n    extensions:\n      - \'json\'\n      - \'jsn\'\n\n- name: Include all default extension files in vars/all and all nested directories and save the output in test. (2.2)\n  include_vars:\n    dir: vars/all\n    name: test\n\n- name: Include default extension files in vars/services (2.2)\n  include_vars:\n    dir: vars/services\n    depth: 1\n\n- name: Include only files matching bastion.yaml (2.2)\n  include_vars:\n    dir: vars\n    files_matching: bastion.yaml\n\n- name: Include all .yaml files except bastion.yaml (2.3)\n  include_vars:\n    dir: vars\n    ignore_files:\n      - \'bastion.yaml\'\n    extensions:\n      - \'yaml\'\n\n- name: Ignore warnings raised for files with unknown extensions while loading (2.7)\n  include_vars:\n    dir: vars\n    ignore_unknown_extensions: True\n    extensions:\n      - \'\'\n      - \'yaml\'\n      - \'yml\'\n      - \'json\'\n'
    config_manager_0 = module_0.ConfigManager()
    dict_0 = {}
    var_0 = module_0.get_ini_config_value(str_0, dict_0)
    var_1 = config_manager_0.update_config_data()
    set_0 = None
    str_1 = '5%y'
    str_2 = "p'"
    var_2 = config_manager_0.get_configuration_definition(set_0, str_1, str_2)
    var_3 = module_0.find_ini_config_file()