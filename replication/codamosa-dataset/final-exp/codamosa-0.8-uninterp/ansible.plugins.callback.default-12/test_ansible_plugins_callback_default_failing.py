# Automatically generated by Pynguin.
import ansible.plugins.callback.default as module_0
import ansible.playbook.task_include as module_1

def test_case_0():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.set_options()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xf8j\n\xe5G\x7f\xd6'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_failed(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 89.18
        str_0 = 'oD*i\\p^)NC*`,[)P'
        dict_0 = {}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_notify(str_0, dict_0)
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_1.v2_runner_on_skipped(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callback_module_0 = module_0.CallbackModule()
        int_0 = 903
        var_0 = callback_module_0.v2_runner_on_unreachable(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        list_0 = [str_0, str_0]
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_matched()
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_0.v2_playbook_on_task_start(list_0, callback_module_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = None
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_remaining()
        callback_module_1 = module_0.CallbackModule()
        callback_module_2 = module_0.CallbackModule()
        var_1 = callback_module_2.v2_playbook_on_cleanup_task_start(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 778.49
        set_0 = set()
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_task_start(float_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_handler_task_start(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_cleanup_task_start(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 1784.294
        bytes_0 = b'X-\xeb\xb4g\xd3g\xd2\xfbD\xb3\xc2\xdaT\x00B:\xc0'
        set_0 = {float_0, bytes_0, bytes_0, float_0}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_start(float_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'p\x1a\xbb\xc1\xd9\xcdZ\xee'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_play_start(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_item_on_ok(callback_module_0)
    except BaseException:
        pass

def test_case_12():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_remaining()
        var_1 = callback_module_0.v2_playbook_on_no_hosts_matched()
        tuple_0 = None
        var_2 = callback_module_0.v2_runner_item_on_failed(tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 64
        list_0 = [int_0, int_0, int_0, int_0]
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_item_on_skipped(list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 2.0
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_include(float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 22
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_stats(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_start(callback_module_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 294
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_retry(int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_on_async_poll(callback_module_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'VxL\xe1\xe6\x98\xc2\xea\x93'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_async_ok(bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'kc0.\rK%'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_ok(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = -1425.8407
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_async_failed(float_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = 100.0
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_on_file_diff(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\x8a-\xe7R\x94{\xd6f'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_notify(bytes_0, callback_module_0)
        task_include_0 = module_1.TaskInclude()
        var_1 = callback_module_0.v2_playbook_on_cleanup_task_start(task_include_0)
    except BaseException:
        pass