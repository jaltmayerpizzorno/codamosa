# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    try:
        list_0 = []
        bytes_0 = b' '
        list_1 = [bytes_0]
        blueprint_group_0 = module_0.BlueprintGroup(list_1)
        var_0 = blueprint_group_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2336.89125
        list_0 = [float_0]
        str_0 = None
        tuple_0 = (list_0, str_0)
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.__setitem__(float_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0}
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.__delitem__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        str_0 = 'D)\x0crg&qzVS'
        blueprint_0 = module_1.Blueprint(str_0, int_0)
        str_1 = 'A3|\\`bwfG^e!\n'
        blueprint_1 = module_1.Blueprint(str_1, str_1)
        set_0 = set()
        blueprint_group_0 = module_0.BlueprintGroup(blueprint_1, set_0)
        blueprint_group_0.insert(int_0, blueprint_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "Ds%HdpBc;2z'|pc5&'~"
        bytes_0 = b'\xcb!\xbf\xab\x10\x84\x1b\xe8k5\x94\xb9. \xd3\xc6\xc3'
        str_1 = 'Creates SSLContext instance for usage in asyncio.create_server.\n        See ssl.SSLSocket.__init__ for more details.\n        '
        blueprint_0 = module_1.Blueprint(str_1)
        tuple_0 = ()
        blueprint_group_0 = module_0.BlueprintGroup(tuple_0)
        blueprint_group_0.append(blueprint_0)
        blueprint_1 = module_1.Blueprint(str_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        blueprint_group_0 = module_0.BlueprintGroup()
        float_0 = -898.0
        blueprint_group_1 = module_0.BlueprintGroup(float_0)
        str_0 = 's\x0ccu"xPo+@C>21E'
        int_0 = 460
        blueprint_0 = module_1.Blueprint(str_0, str_0, int_0)
        blueprint_group_1.append(blueprint_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '/bp1'
        str_1 = 'bp2'
        str_2 = '/bp2'
        blueprint_0 = module_1.Blueprint(str_1, str_2)
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.append(blueprint_0)
        blueprint_group_0.append(blueprint_0)
        var_0 = blueprint_group_0.blueprints
        var_1 = len(str_0)
        str_3 = '_middlewares'
        var_2 = hasattr(blueprint_0, str_3)
        var_3 = blueprint_0._middlewares
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = "'5#&R8Y1fT]hC\t-"
        int_0 = 2406
        blueprint_group_0 = module_0.BlueprintGroup(str_0, int_0, str_0)
        var_0 = blueprint_group_0.middleware(**dict_0)
        bytes_0 = b'\x10\xe3[\xa0s\x8fv\xcdG\x1f\xa2\xe4y#\xaf\x18\r:\xc1\x8e'
        blueprint_group_1 = module_0.BlueprintGroup(bytes_0)
        var_1 = blueprint_group_0.middleware()
        str_1 = '-v'
        blueprint_0 = module_1.Blueprint(str_1)
        blueprint_group_0.append(blueprint_0)
        list_0 = [var_0, blueprint_group_1, int_0, str_0]
        var_2 = blueprint_group_0.middleware(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        str_0 = "'5#&R8Y1fT]hC\t-"
        int_0 = 2406
        blueprint_group_0 = module_0.BlueprintGroup(str_0, int_0, str_0)
        var_0 = blueprint_group_0.middleware(**dict_0)
        bytes_0 = b'\x10\xe3[\xa0s\x8fv\xcdG\x1f\xa2\xe4y#\xaf\x18\r:\xc1\x8e'
        blueprint_group_1 = module_0.BlueprintGroup(bytes_0)
        var_1 = blueprint_group_0.middleware()
        str_1 = '-v'
        blueprint_0 = module_1.Blueprint(str_1)
        blueprint_1 = None
        list_0 = [var_0, blueprint_group_1, int_0, str_0]
        var_2 = blueprint_group_0.middleware(*list_0)
        var_3 = blueprint_1.static()
    except BaseException:
        pass