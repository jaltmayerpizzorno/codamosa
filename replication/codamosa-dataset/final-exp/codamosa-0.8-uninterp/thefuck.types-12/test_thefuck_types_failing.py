# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        float_0 = 1501.9165
        str_0 = 'hwK#2T}:Y>cB*;C>^9'
        float_1 = -3575.60632
        str_1 = '6tFe\\mV#\r'
        bool_0 = False
        str_2 = None
        dict_0 = {bool_0: float_1, str_2: float_1}
        list_0 = []
        command_0 = None
        int_0 = -733
        list_1 = [list_0, command_0, int_0]
        str_3 = None
        str_4 = 'JK-ZS+Koe07/)\r|{\n'
        dict_1 = {str_3: str_2, str_2: str_1, str_4: bool_0, str_4: dict_0}
        rule_0 = module_0.Rule(list_0, list_0, command_0, int_0, list_1, dict_1, command_0)
        tuple_0 = (bool_0, dict_0, rule_0)
        command_1 = module_0.Command(tuple_0, dict_0)
        dict_2 = {float_0: str_0, float_0: float_1, float_0: float_1}
        str_5 = 'Creates single script from a list of script parts.\n\n    :type raw_script: [basestring]\n    :rtype: basestring\n\n    '
        bytes_0 = b'mA\xe7G"\xa4T\xd5\x84'
        corrected_command_0 = module_0.CorrectedCommand(dict_2, str_5, bytes_0)
        list_2 = [bytes_0]
        command_2 = module_0.Command(corrected_command_0, list_2)
        var_0 = command_2.__eq__(command_1)
        float_2 = -579.314433
        str_6 = 'Q\x0b=y{x"ek'
        bytes_1 = b'\x8c\xedBN\xcc\x92'
        bytes_2 = b'\x90\x1a\xa3#\x16e_6\x07Z\xe3Q\xc8\xf5'
        list_3 = [bytes_2]
        rule_1 = module_0.Rule(float_1, str_1, float_2, str_6, bytes_1, bytes_2, list_3)
        str_7 = None
        var_1 = rule_1.is_match(str_7)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 0.85
        str_0 = '\\QWHCP'
        command_0 = module_0.Command(float_0, str_0)
        str_1 = 'mZ|#08S-h~upN577D}\t'
        tuple_0 = ()
        str_2 = 'z)v?(7'
        set_0 = set()
        dict_0 = {str_1: command_0}
        rule_0 = module_0.Rule(command_0, str_0, tuple_0, str_2, set_0, dict_0, float_0)
        var_0 = rule_0.is_match(command_0)
        command_1 = module_0.Command(rule_0, command_0)
        int_0 = -440
        corrected_command_0 = module_0.CorrectedCommand(int_0, rule_0, rule_0)
        var_1 = command_1.update(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\tNJ'
        list_0 = [str_0]
        bytes_0 = b'\x80\x13\xfeni\xea('
        set_0 = {bytes_0, bytes_0}
        bool_0 = True
        list_1 = [bool_0, set_0, bytes_0]
        str_1 = 'jjd'
        tuple_0 = (set_0, str_1, str_1)
        tuple_1 = (tuple_0, bool_0)
        float_0 = 888.58
        dict_0 = {}
        str_2 = 'w(Y122'
        list_2 = [bytes_0, str_2, set_0, dict_0]
        rule_0 = module_0.Rule(set_0, float_0, dict_0, str_2, list_2, bytes_0, list_1)
        rule_1 = module_0.Rule(bytes_0, set_0, bool_0, list_1, set_0, tuple_1, rule_0)
        str_3 = '\n\\\ng()e<2v|R!rD=`ve'
        corrected_command_0 = module_0.CorrectedCommand(rule_1, str_3, str_2)
        var_0 = corrected_command_0.run(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'ls .'
        var_0 = None
        command_0 = module_0.Command(str_0, var_0)
        str_1 = 'ls_no_args'
        var_1 = lambda command: str(command.script) == str_0
        str_2 = '-l'
        str_3 = [str_0, str_2, str_2]
        var_2 = lambda command: str_3
        bool_0 = True
        rule_0 = module_0.Rule(str_1, var_1, var_2, bool_0, var_0, var_0, bool_0)
        var_3 = rule_0.get_corrected_commands(command_0)
        var_4 = list(var_3)
    except BaseException:
        pass