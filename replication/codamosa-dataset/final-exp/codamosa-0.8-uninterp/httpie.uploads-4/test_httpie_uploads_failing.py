# Automatically generated by Pynguin.
import httpie.uploads as module_0
import requests_toolbelt.multipart.encoder as module_1
import httpie.cli.dicts as module_2
import typing as module_3
import requests.models as module_4

def test_case_0():
    try:
        str_0 = "A@V+P~A{g'V["
        dict_0 = {str_0: str_0, str_0: str_0}
        bytes_0 = b'\x05J\x19\xad\xf4,\x8d\x01\x8c\xbc'
        var_0 = module_0.prepare_request_body(bytes_0, str_0, dict_0, bytes_0)
        list_0 = [var_0, str_0, var_0, str_0]
        multipart_encoder_0 = module_1.MultipartEncoder(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        multipart_encoder_0 = None
        request_data_dict_0 = module_2.RequestDataDict()
        str_0 = '|k(ok0rf\x0cc'
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(request_data_dict_0, str_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        list_0 = []
        i_o_0 = module_3.IO(*list_0)
        var_0 = i_o_0.read()
        var_1 = module_0.prepare_request_body(request_data_dict_0, var_0, list_0)
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        prepared_request_0 = module_4.PreparedRequest()
        bool_0 = False
        var_2 = module_0.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        multipart_request_data_dict_0 = module_2.MultipartRequestDataDict()
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        callable_0 = None
        var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        chunked_multipart_upload_stream_1 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        var_1 = multipart_encoder_0.to_string()
    except BaseException:
        pass

def test_case_3():
    try:
        prepared_request_0 = module_4.PreparedRequest()
        bool_0 = True
        var_0 = module_0.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x88'
        int_0 = -1467
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(bytes_0, int_0)
        multipart_encoder_0 = module_1.MultipartEncoder(chunked_upload_stream_0)
    except BaseException:
        pass

def test_case_5():
    try:
        multipart_encoder_0 = None
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        multipart_encoder_1 = module_1.MultipartEncoder(iterable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        multipart_request_data_dict_0 = module_2.MultipartRequestDataDict()
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        multipart_encoder_1 = module_1.MultipartEncoder(iterable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'O\xdf-[\x7f2'
        str_0 = 'fNyeO`&\n9K@po\x0cf'
        bool_0 = None
        dict_0 = {str_0: str_0, str_0: bytes_0, str_0: bool_0, str_0: str_0}
        set_0 = {bytes_0, bytes_0, bool_0, bool_0}
        var_0 = module_0.prepare_request_body(bytes_0, dict_0, set_0)
        multipart_encoder_0 = None
        request_data_dict_0 = module_2.RequestDataDict()
        str_1 = '|k(ok0rf\x0cc'
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(request_data_dict_0, str_1)
        iterable_0 = chunked_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        list_0 = []
        i_o_0 = module_3.IO(*list_0)
        var_1 = i_o_0.read()
        var_2 = module_0.prepare_request_body(request_data_dict_0, var_1, list_0)
        multipart_request_data_dict_0 = module_2.MultipartRequestDataDict()
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        multipart_encoder_1 = module_1.MultipartEncoder(chunked_upload_stream_0)
        chunked_multipart_upload_stream_1 = module_0.ChunkedMultipartUploadStream(multipart_encoder_1)
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        prepared_request_0 = module_4.PreparedRequest()
        bool_1 = True
        var_3 = module_0.compress_request(prepared_request_0, bool_1)
    except BaseException:
        pass

def test_case_8():
    try:
        multipart_request_data_dict_0 = module_2.MultipartRequestDataDict()
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        callable_0 = None
        var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        var_1 = multipart_encoder_0.to_string()
    except BaseException:
        pass

def test_case_9():
    try:
        multipart_request_data_dict_0 = module_2.MultipartRequestDataDict()
        i_o_0 = module_3.IO()
        var_0 = i_o_0.__enter__()
        str_0 = 'gQ|z'
        int_0 = 1405
        var_1 = i_o_0.readline(int_0)
        str_1 = 'FSFeo\\s'
        str_2 = 'eL`g<'
        tuple_0 = (var_0,)
        tuple_1 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_2)
        tuple_2 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_1)
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        callable_0 = None
        callable_1 = None
        int_1 = -1923
        list_0 = [i_o_0]
        var_2 = module_0.prepare_request_body(multipart_encoder_0, callable_1, int_1, list_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_3 = module_0.prepare_request_body(str_1, callable_0, int_0, list_0)
        chunked_multipart_upload_stream_1 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_4 = module_0.prepare_request_body(i_o_0, callable_0, int_0, var_1, tuple_0)
        chunked_multipart_upload_stream_2 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_5 = module_0.prepare_request_body(str_1, callable_1)
        prepared_request_0 = module_4.PreparedRequest()
        bool_0 = False
        var_6 = module_0.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        multipart_request_data_dict_0 = module_2.MultipartRequestDataDict()
        str_0 = 'boundary='
        str_1 = '--format-options'
        dict_0 = {str_1: str_1}
        prepared_request_0 = module_4.PreparedRequest()
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(dict_0, prepared_request_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        bytes_0 = b'\xc6\x87)\xa8\x15\x8d\x90\xefQ/\x84M\x931\xe1Q[w'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        i_o_0 = module_3.IO(*list_0)
    except BaseException:
        pass