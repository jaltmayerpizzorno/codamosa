# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    pass

def test_case_1():
    n_f_a_state_0 = module_0.NFAState()

def test_case_2():
    n_f_a_state_0 = module_0.NFAState()
    n_f_a_state_0.addarc(n_f_a_state_0)
    dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
    d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
    n_f_a_state_0.addarc(n_f_a_state_0)

def test_case_3():
    n_f_a_state_0 = module_0.NFAState()
    dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
    d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
    bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
    n_f_a_state_1 = module_0.NFAState()
    n_f_a_state_1.addarc(n_f_a_state_0)

def test_case_4():
    n_f_a_state_0 = module_0.NFAState()
    dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
    n_f_a_state_0.addarc(n_f_a_state_0)
    d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    str_0 = '\n        Compare two nodes for equality.\n\n        This is called by __eq__ and __ne__.  It is only called if the two nodes\n        have the same type.  This must be implemented by the concrete subclass.\n        Nodes should be considered equal if they have the same structure,\n        ignoring the prefix string and other context information.\n        '
    d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
    bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
    n_f_a_state_1 = module_0.NFAState()
    n_f_a_state_2 = module_0.NFAState()
    n_f_a_state_0.addarc(n_f_a_state_0)

def test_case_5():
    n_f_a_state_0 = module_0.NFAState()
    dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
    n_f_a_state_1 = module_0.NFAState()
    n_f_a_state_0.addarc(n_f_a_state_1)
    d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
    d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
    d_f_a_state_1.unifystate(d_f_a_state_1, d_f_a_state_1)
    n_f_a_state_2 = module_0.NFAState()
    n_f_a_state_3 = module_0.NFAState()
    str_0 = ''
    d_f_a_state_1.addarc(d_f_a_state_1, str_0)
    n_f_a_state_4 = module_0.NFAState()
    n_f_a_state_2.addarc(n_f_a_state_3)
    d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)

def test_case_6():
    n_f_a_state_0 = module_0.NFAState()
    dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
    n_f_a_state_0.addarc(n_f_a_state_0)
    d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    str_0 = '\n        Compare two nodes for equality.\n\n        This is called by __eq__ and __ne__.  It is only called if the two nodes\n        have the same type.  This must be implemented by the concrete subclass.\n        Nodes should be considered equal if they have the same structure,\n        ignoring the prefix string and other context information.\n        '
    d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
    n_f_a_state_1 = module_0.NFAState()
    n_f_a_state_0.addarc(n_f_a_state_0)

def test_case_7():
    n_f_a_state_0 = module_0.NFAState()
    dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
    n_f_a_state_0.addarc(n_f_a_state_0)
    str_0 = 'Hk;'
    n_f_a_state_0.addarc(n_f_a_state_0, str_0)
    d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    str_1 = '_'
    d_f_a_state_0.addarc(d_f_a_state_0, str_1)
    d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
    bool_0 = d_f_a_state_1.__eq__(d_f_a_state_0)
    n_f_a_state_1 = module_0.NFAState()
    d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_0)
    d_f_a_state_1.addarc(d_f_a_state_2, str_1)
    n_f_a_state_2 = module_0.NFAState()
    n_f_a_state_3 = module_0.NFAState()
    n_f_a_state_2.addarc(n_f_a_state_3)
    d_f_a_state_2.unifystate(d_f_a_state_1, d_f_a_state_2)