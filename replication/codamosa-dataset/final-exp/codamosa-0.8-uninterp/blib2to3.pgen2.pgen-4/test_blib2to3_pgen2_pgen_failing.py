# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        str_0 = 'Xl(U\tL'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        list_0 = [str_0, str_0, str_0]
        parser_generator_0 = module_0.ParserGenerator(str_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_2():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = None
        pgen_grammar_0 = module_0.PgenGrammar()
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: pgen_grammar_0}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
    except BaseException:
        pass

def test_case_3():
    try:
        n_f_a_state_0 = module_0.NFAState()
        float_0 = 1020.7
        dict_0 = {n_f_a_state_0: float_0, n_f_a_state_0: float_0, n_f_a_state_0: float_0}
        n_f_a_state_1 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = None
        n_f_a_state_0 = module_0.NFAState()
        dict_1 = {n_f_a_state_0: dict_0, n_f_a_state_0: dict_0}
        d_f_a_state_0 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_5():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = module_0.NFAState()
        n_f_a_state_2.addarc(n_f_a_state_1)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(n_f_a_state_2)
    except BaseException:
        pass

def test_case_6():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'yODhl,L^iwErsWM2'
        pgen_grammar_0 = module_0.PgenGrammar()
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        int_0 = 1698
        n_f_a_state_0.addarc(n_f_a_state_1, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'yODhl,L^iwErsWM2'
        n_f_a_state_1 = None
        pgen_grammar_0 = module_0.PgenGrammar()
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        n_f_a_state_2.addarc(n_f_a_state_1)
    except BaseException:
        pass

def test_case_9():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_1)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        str_0 = 'Writing grammar tables to %s'
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_0.addarc(d_f_a_state_1, str_0)
        str_1 = None
        d_f_a_state_1.addarc(d_f_a_state_1, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0 = None
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_1)
        d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_2.unifystate(d_f_a_state_2, d_f_a_state_2)
        str_0 = '_cK&;\tK'
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_1)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_1)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_1)
        str_0 = 'p6'
        n_f_a_state_2 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_3 = module_0.NFAState()
        str_1 = None
        d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_2.addarc(d_f_a_state_1, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = '\n        Compare two nodes for equality.\n\n        This is called by __eq__and __ne__.  It is only called if the two nodes\n        have the same type.  This must be implemented by the concrete subclass.\n        Nodes should be considered equal if they have the same structure,\n        ignoring the prefix string and other context information.\n        '
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_1, str_0)
        str_1 = 'zy+TD\x0c7|x.MkS'
        d_f_a_state_1.addarc(d_f_a_state_1, str_1)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = module_0.NFAState()
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass