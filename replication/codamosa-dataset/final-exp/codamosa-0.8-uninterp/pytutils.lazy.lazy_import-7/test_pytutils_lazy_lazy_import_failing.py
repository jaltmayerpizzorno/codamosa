# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        import_processor_0 = module_0.ImportProcessor()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, import_processor_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'd-\xc2'
        set_0 = {bytes_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, set_0, set_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        import_processor_0 = module_0.ImportProcessor()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, import_processor_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(import_processor_0)
        var_1 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_3():
    try:
        import_processor_0 = module_0.ImportProcessor()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, import_processor_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        var_1 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ']chEyn:7]sA+2\ro'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, str_0)
        var_0 = scope_replacer_0.__call__()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "\n                impot bzrlib.lazy_import\n                my_callable = bzrlib.lazy_import.ScopeReplacerb\n                    globals(), my_factory, 'my_callable')\n                "
        dict_0 = {}
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0)
        bool_0 = False
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_replacer_0, bool_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "\n                import bzrlib.lazy_import\n                my_callable = bzrlib.lazy_import.ScopeReplacer(\n                    globals(), my_factory, 'my_callable')\n                "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\x0c`\n4[Y zAZQSALh|`&s>'
        float_0 = 1026.29
        bytes_0 = b'\xaf!k\xf2\t \xd5Q05\xa3\xe2;\xb8\x90R\x08'
        list_0 = [str_0, float_0, bytes_0]
        import_replacer_0 = module_0.ImportReplacer(float_0, bytes_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 4005.41
        bytes_0 = b'\xe9Px'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(float_0, bytes_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'd+ FRLu4v\\j@_C7f_4'
        set_0 = None
        import_processor_0 = module_0.ImportProcessor()
        list_0 = []
        str_1 = '^c'
        str_2 = 'm'
        dict_0 = {str_0: set_0, str_1: list_0, str_2: list_0}
        import_replacer_0 = module_0.ImportReplacer(str_0, set_0, import_processor_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -345.5330301297968
        str_0 = "y'LY2W(\n+3uvpB,&}b\n"
        var_0 = module_0.lazy_import(float_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "\n                import bzrlib.lazy_import\n                my_callable = bzrlib.lazy_import.ScopeReplacerb\n                    globals(), my_factory, 'my_callable')\n                "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        import_processor_0 = module_0.ImportProcessor(dict_0)
        str_0 = '%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %(blue)s@%(funcName)s:%(lineno)d #%(levelname)s%(reset)s'
        var_0 = module_0.lazy_import(import_processor_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\n    from bzrlib import (\n        errors,\n        osutils,\n        brach,\n        )\n    import bzrlib.branch\n   '
        int_0 = None
        str_1 = '__deepcopy__'
        dict_0 = {str_1: str_0, str_1: str_0, str_1: int_0}
        import_processor_0 = module_0.ImportProcessor()
        float_0 = -86.026
        import_replacer_0 = module_0.ImportReplacer(dict_0, import_processor_0, float_0, import_processor_0)
        var_0 = module_0.lazy_import(int_0, import_replacer_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n    import bzrlib.tests.blackbox\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\n    from b\rli import (\n        errn,        o,utils,\n        brcc,\n      _)\n   import brli.banch   '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        dict_0 = {}
        str_0 = '%(bg_black)s%(log_color)s[%(asctime)s] [%(name)s/%(process)d] %(message)s %blue)s@%(funcName)s:%(lineno)d #q(levelname)s%(reset)s'
        tuple_0 = ()
        dict_1 = {str_0: dict_0, str_0: dict_0, str_0: str_0, str_0: str_0}
        float_0 = None
        list_0 = []
        str_1 = '>{'
        dict_2 = {str_0: list_0, str_1: list_0}
        bytes_0 = b"r\x13r\xa6\x8e\x13\xb4\xa9Q\xee\xcf\x9au'"
        import_replacer_0 = module_0.ImportReplacer(dict_1, float_0, dict_2, bytes_0)
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
        var_0 = module_0.lazy_import(tuple_0, scope_replacer_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x1c\xb2\x08\x10J>Z\\\xd1\xf2\xa5\x89|\xc7?\xf9_'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        import_processor_0 = module_0.ImportProcessor()
        str_0 = 'DXc~ZfTH'
        dict_1 = {str_0: bytes_0, str_0: str_0, str_0: import_processor_0, str_0: str_0, str_0: import_processor_0}
        import_replacer_0 = module_0.ImportReplacer(dict_0, import_processor_0, dict_1)
        var_0 = module_0.lazy_import(bytes_0, import_replacer_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass