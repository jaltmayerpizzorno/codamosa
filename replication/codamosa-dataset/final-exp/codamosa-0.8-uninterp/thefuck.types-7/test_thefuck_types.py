# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\x14Q\xbb7'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    command_0 = module_0.Command(bytes_0, dict_0)

def test_case_2():
    str_0 = 'Nx}Se7\x0b.&bKJ'
    set_0 = {str_0, str_0, str_0, str_0}
    list_0 = [set_0]
    str_1 = "Can't load settings from env"
    int_0 = 1240
    corrected_command_0 = module_0.CorrectedCommand(list_0, str_1, int_0)
    dict_0 = {str_0: set_0, str_0: set_0}
    command_0 = module_0.Command(set_0, dict_0)
    list_1 = [set_0, str_1, list_0, int_0]
    tuple_0 = (list_1, set_0, corrected_command_0, set_0)
    command_1 = module_0.Command(command_0, corrected_command_0)
    str_2 = 'v,}S\x0be:\nd^jx'
    bool_0 = False
    rule_0 = module_0.Rule(str_1, tuple_0, tuple_0, str_2, tuple_0, bool_0, str_1)
    str_3 = '![{U'
    str_4 = 'T'
    dict_1 = {str_1: tuple_0, str_1: int_0, str_3: list_1, str_4: command_0}
    var_0 = command_0.__eq__(dict_1)
    var_1 = corrected_command_0.__eq__(rule_0)
    var_2 = command_0.__repr__()
    var_3 = command_0.update()

def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    command_0 = module_0.Command(dict_0, dict_0)
    bytes_0 = b'D\xf5Q\xf9\xd6'
    command_1 = module_0.Command(command_0, bytes_0)
    command_2 = module_0.Command(bool_0, command_1)
    bytes_1 = b''
    list_0 = [bytes_1, bytes_1, bytes_1]
    str_0 = "'0&J]8`{Ap7!}>kP"
    str_1 = None
    str_2 = 'r'
    str_3 = "may require 'docker login'"
    dict_1 = {str_0: str_0, str_2: str_0, str_3: str_0}
    corrected_command_0 = module_0.CorrectedCommand(str_0, str_1, dict_1)
    tuple_0 = (list_0, corrected_command_0, corrected_command_0)
    bytes_2 = b'^\x8ed\xe1\xc2\xcc\x0c\x0fN-'
    command_3 = module_0.Command(tuple_0, bytes_2)
    var_0 = command_3.__eq__(command_2)

def test_case_4():
    bool_0 = False
    bool_1 = True
    command_0 = module_0.Command(bool_0, bool_1)
    var_0 = command_0.__repr__()

def test_case_5():
    str_0 = 'sh: fuck: command not found'
    command_0 = module_0.Command(str_0, str_0)
    bool_0 = True
    int_0 = 999999
    rule_0 = module_0.Rule(str_0, bool_0, int_0, bool_0, int_0, int_0, bool_0)
    var_0 = rule_0.is_match(command_0)

def test_case_6():
    str_0 = 'Gqb{xK\nd+iQ'
    set_0 = {str_0, str_0}
    str_1 = '#{aK'
    int_0 = -1826
    bool_0 = False
    corrected_command_0 = module_0.CorrectedCommand(int_0, bool_0, str_1)
    str_2 = 'zmH-Gr#AfVl'
    command_0 = module_0.Command(str_0, str_2)
    var_0 = command_0.__repr__()
    bytes_0 = b')h\x10\xc8!\x15\xe8\x97\x01_\x13\xea\x8d'
    dict_0 = {str_1: bytes_0}
    rule_0 = module_0.Rule(set_0, corrected_command_0, str_0, bool_0, bytes_0, set_0, dict_0)
    var_1 = rule_0.__repr__()
    var_2 = rule_0.__eq__(corrected_command_0)
    corrected_command_1 = module_0.CorrectedCommand(set_0, str_0, str_1)

def test_case_7():
    float_0 = -3971.1867
    set_0 = {float_0, float_0}
    int_0 = 1007
    str_0 = '&-Rg\\N-" h-=nVo:kukF'
    dict_0 = {str_0: str_0}
    str_1 = 'heroku'
    corrected_command_0 = module_0.CorrectedCommand(int_0, dict_0, str_1)
    var_0 = corrected_command_0.__eq__(set_0)

def test_case_8():
    str_0 = 'a'
    var_0 = None
    int_0 = 1
    corrected_command_0 = module_0.CorrectedCommand(str_0, var_0, int_0)
    int_1 = 32
    corrected_command_1 = module_0.CorrectedCommand(str_0, var_0, int_1)
    corrected_command_2 = module_0.CorrectedCommand(str_0, var_0, int_1)
    corrected_command_3 = module_0.CorrectedCommand(str_0, str_0, int_1)
    bytes_0 = b'\x89V\x98b\xac\xf8L\x14\x1bN\\hsq;<\x08'
    var_1 = corrected_command_2.run(bytes_0)
    corrected_command_4 = module_0.CorrectedCommand(str_0, str_0, int_0)
    var_2 = corrected_command_0 == corrected_command_1 == corrected_command_3 == corrected_command_2 == corrected_command_2 == corrected_command_3 == corrected_command_4 == corrected_command_1

def test_case_9():
    float_0 = 940.6
    str_0 = 'java'
    str_1 = "rz=cd4V6'XhSIVJ"
    int_0 = -3931
    str_2 = 'ndC89R[\x0b#9Hx\nsqT'
    dict_0 = {float_0: str_0, str_2: int_0}
    str_3 = '8N4\tgrL\t]]P]1 -F!y\r '
    dict_1 = {str_3: str_2}
    tuple_0 = ()
    list_0 = []
    dict_2 = {}
    rule_0 = module_0.Rule(int_0, dict_0, dict_1, tuple_0, list_0, dict_1, dict_2)
    set_0 = {str_1, str_0}
    list_1 = [str_1, float_0]
    bytes_0 = b'I\xf9W\xa9\xa4p\x87Z\x7fq6\xba\xfb\xf4\xe8'
    command_0 = module_0.Command(set_0, bytes_0)
    tuple_1 = ()
    tuple_2 = (str_0, set_0, command_0, tuple_1)
    tuple_3 = (tuple_2,)
    corrected_command_0 = module_0.CorrectedCommand(set_0, list_1, tuple_3)
    var_0 = corrected_command_0.__eq__(rule_0)
    str_4 = '9'
    str_5 = 'e'
    rule_1 = module_0.Rule(str_5, set_0, command_0, str_4, tuple_1, tuple_1, command_0)
    corrected_command_1 = module_0.CorrectedCommand(str_3, set_0, set_0)
    var_1 = rule_1.__eq__(rule_1)

def test_case_10():
    str_0 = None
    bytes_0 = None
    command_0 = module_0.Command(str_0, bytes_0)
    float_0 = 1118.1305
    bytes_1 = b'LG\xfb\xbd4\x89\xcb\x86an\xdb\xd5\xd3||'
    corrected_command_0 = module_0.CorrectedCommand(float_0, bytes_1, str_0)
    bool_0 = False
    str_1 = "\x0b| 'yCn\\sn["
    dict_0 = {str_0: bytes_1, float_0: str_1, bytes_1: bytes_1}
    list_0 = [dict_0, float_0, bytes_1]
    rule_0 = module_0.Rule(str_1, corrected_command_0, bool_0, corrected_command_0, command_0, command_0, list_0)
    var_0 = rule_0.is_match(command_0)

def test_case_11():
    str_0 = "echo 'hi'"
    var_0 = None
    command_0 = module_0.Command(str_0, var_0)
    str_1 = 'test'
    str_2 = 'hi'
    var_1 = lambda com: com.script.endswith(str_2)
    var_2 = lambda com: com.script
    bool_0 = False
    int_0 = 4
    rule_0 = module_0.Rule(str_1, var_1, var_2, bool_0, var_0, int_0, bool_0)
    var_3 = rule_0.is_match(command_0)