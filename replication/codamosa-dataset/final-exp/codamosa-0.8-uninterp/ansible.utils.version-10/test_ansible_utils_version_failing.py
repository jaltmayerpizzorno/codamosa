# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        var_1 = semantic_version_0.__repr__()
        int_0 = -1005
        alpha_0 = module_0._Alpha(int_0)
        list_0 = []
        semantic_version_1 = module_0.SemanticVersion(list_0)
        var_2 = semantic_version_1.from_loose_version(alpha_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        float_0 = -968.1
        numeric_0 = module_0._Numeric(float_0)
        float_1 = -1188.81
        alpha_0 = module_0._Alpha(float_1)
        var_0 = numeric_0.__ne__(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__eq__(semantic_version_0)
        var_2 = semantic_version_0.__repr__()
        int_0 = None
        var_3 = alpha_0.__ne__(int_0)
        var_4 = alpha_0.__le__(alpha_0)
        list_0 = []
        var_5 = semantic_version_0.from_loose_version(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        var_1 = semantic_version_0.__repr__()
        int_0 = None
        str_0 = 'o_&80\ncu\rZMQ7*:zR8'
        alpha_0 = module_0._Alpha(str_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_2 = alpha_1.__lt__(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'a'
        alpha_0 = module_0._Alpha(str_0)
        alpha_1 = module_0._Alpha(str_0)
        alpha_2 = module_0._Alpha(str_0)
        str_1 = 'i%nia;^Ry[g v-8f0#Ml'
        var_0 = alpha_0.__le__(str_1)
        set_0 = set()
        loose_version_0 = module_1.LooseVersion(set_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__ge__(loose_version_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1276
        int_1 = -1073
        numeric_0 = module_0._Numeric(int_1)
        var_0 = numeric_0.__gt__(int_0)
        set_0 = set()
        int_2 = 2651
        alpha_0 = module_0._Alpha(int_2)
        var_1 = alpha_0.__gt__(set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        bool_1 = True
        alpha_0 = module_0._Alpha(bool_1)
        var_0 = alpha_0.__ge__(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        numeric_0 = module_0._Numeric(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = semantic_version_0.from_loose_version(numeric_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 657.8544
        str_0 = 'T@7=_bOne'
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__lt__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        semantic_version_0 = module_0.SemanticVersion(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '.WW?!`HJLR'
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'o_&80\ncu\rZMQ7*:zR8'
        alpha_0 = module_0._Alpha(str_0)
        alpha_1 = module_0._Alpha(alpha_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        var_1 = semantic_version_0.__repr__()
        str_0 = 'o_&80\ncu\rZMQ7*:zR8'
        alpha_0 = module_0._Alpha(str_0)
        alpha_1 = module_0._Alpha(alpha_0)
        semantic_version_1 = module_0.SemanticVersion()
        int_0 = 2536
        var_2 = semantic_version_0.__ne__(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        int_0 = None
        str_0 = 'o_&80\ncu\rZMQ7*:zR8'
        var_1 = semantic_version_0.__lt__(semantic_version_0)
        alpha_0 = module_0._Alpha(str_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_2 = alpha_1.__lt__(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        float_0 = 0.2
        list_0 = [float_0, semantic_version_0]
        tuple_0 = (float_0, list_0)
        var_1 = semantic_version_0.__le__(tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 657.8544
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -1126.0
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__repr__()
        alpha_0 = module_0._Alpha(float_0)
        var_1 = numeric_0.__lt__(alpha_0)
        semantic_version_0 = module_0.SemanticVersion()
        list_0 = [float_0]
        var_2 = semantic_version_0.__ge__(list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = True
        float_0 = -968.1
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__eq__(semantic_version_0)
        var_2 = semantic_version_0.__repr__()
        str_0 = None
        var_3 = numeric_0.__ge__(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -331
        alpha_0 = module_0._Alpha(int_0)
        str_0 = '.%b+6\n(VroW:#0'
        var_0 = alpha_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        float_0 = -968.1706048992455
        numeric_0 = module_0._Numeric(float_0)
        alpha_0 = module_0._Alpha(float_0)
        var_0 = numeric_0.__ge__(alpha_0)
        var_1 = numeric_0.__ne__(float_0)
        var_2 = numeric_0.__ne__(bool_0)
        var_3 = numeric_0.__gt__(numeric_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_4 = semantic_version_0.__eq__(semantic_version_0)
        var_5 = semantic_version_0.__repr__()
        loose_version_0 = module_1.LooseVersion()
        var_6 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = -968.1
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(numeric_0)
        dict_0 = None
        dict_1 = {var_0: dict_0}
        semantic_version_0 = module_0.SemanticVersion(dict_1)
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = False
        float_0 = -968.1706048992455
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(bool_0)
        var_1 = numeric_0.__gt__(numeric_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_2 = semantic_version_0.__eq__(semantic_version_0)
        loose_version_0 = module_1.LooseVersion()
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '1.2.3+1'
        semantic_version_0 = module_0.SemanticVersion(str_0)
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.2.3-alpha'
        loose_version_1 = module_1.LooseVersion(str_1)
        loose_version_2 = module_1.LooseVersion()
        loose_version_3 = module_1.LooseVersion(semantic_version_0)
    except BaseException:
        pass

def test_case_24():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        var_1 = semantic_version_0.__repr__()
        loose_version_0 = module_1.LooseVersion()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '1.2.3-alpha.1+b.2.4'
        semantic_version_0 = module_0.SemanticVersion(str_0)
        str_1 = 'alpha'
        numeric_0 = module_0._Numeric(str_1)
    except BaseException:
        pass