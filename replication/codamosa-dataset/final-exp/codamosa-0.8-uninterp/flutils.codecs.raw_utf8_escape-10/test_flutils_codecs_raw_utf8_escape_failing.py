# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        str_0 = "Increase the version number from a version number string.\n\n    *New in version 0.3*\n\n    Args:\n        version (str): The version number to be bumped.\n        position (int, optional): The position (starting with zero) of the\n            version number component to be increased.  Defaults to: ``2``\n        pre_release (str, Optional): A value of ``a`` or ``alpha`` will\n            create or increase an alpha version number.  A value of ``b`` or\n            ``beta`` will create or increase a beta version number.\n\n    Raises:\n        ValueError: if the given ``version`` is an invalid version number.\n        ValueError: if the given ``position`` does not exist.\n        ValueError: if the given ``prerelease`` is not in:\n            ``a, alpha, b, beta``\n        ValueError: if trying to 'major' part, of a version number, to\n            a pre-release version.\n\n    :rtype:\n        :obj:`str`\n\n        * The increased version number.\n\n    Examples:\n        >>> from flutils.packages import bump_version\n        >>> bump_version('1.2.2')\n        '1.2.3'\n        >>> bump_version('1.2.3', position=1)\n        '1.3'\n        >>> bump_version('1.3.4', position=0)\n        '2.0'\n        >>> bump_version('1.2.3', prerelease='a')\n        '1.2.4a0'\n        >>> bump_version('1.2.4a0', pre_release='a')\n        '1.2.4a1'\n        >>> bump_version('1.2.4a1', pre_release='b')\n        '1.2.4b0'\n        >>> bump_version('1.2.4a1')\n        '1.2.4'\n        >>> bump_version('1.2.4b0')\n        '1.2.4'\n        >>> bump_version('2.1.3', position=1, pre_release='a')\n        '2.2a0'\n        >>> bump_version('1.2b0', position=2)\n        '1.2.1'\n\n    "
        tuple_0 = module_0.encode(str_0)
        dict_0 = {}
        user_string_0 = module_1.UserString(dict_0)
        str_1 = 'You do not have execute permission to run the file: %r'
        tuple_1 = module_0.decode(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.register()
        bytes_0 = b'\x06^;\x18\xa4\xa25W\xb3\xd0\xfb\xb0G\x85\xe4'
        int_0 = 8
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        tuple_1 = module_0.encode(user_string_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'V%iUSl'
        tuple_0 = module_0.encode(str_0, str_0)
        bytes_0 = b'O\xaf\x98\x80\xf5TI\xd5g\xe3'
        tuple_1 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 97
        tuple_0 = module_0.decode(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Z3ON:'
        dict_0 = {str_0: str_0}
        tuple_0 = module_0.encode(str_0)
        module_0.register()
        module_0.register()
        bytes_0 = b''
        tuple_1 = module_0.encode(str_0)
        module_0.register()
        tuple_2 = module_0.encode(str_0)
        int_0 = -621
        tuple_3 = (bytes_0, int_0)
        list_0 = [dict_0, tuple_3, bytes_0, tuple_3]
        tuple_4 = module_0.encode(str_0, str_0)
        tuple_5 = module_0.decode(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'eutf8h'
        module_0.register()
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xca\xb7\r\xa8H\xcd%\xbc)\xc7b\xd1j'
        user_string_0 = module_1.UserString(bytes_0)
        var_0 = user_string_0.isalpha()
        tuple_0 = module_0.encode(user_string_0, user_string_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xe6\x84\xc9\xf9*\xa9S\x99\xe3\x82>~\xd3)\xbc]\x14\xff\xff\xea'
        str_0 = 'QiuR'
        tuple_0 = module_0.decode(bytes_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'A\xd3\x85&\x19V?_'
        str_0 = '7+j4,'
        tuple_0 = module_0.encode(str_0)
        module_0.register()
        module_0.register()
        int_0 = 1003
        tuple_1 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_1)
        tuple_2 = module_0.encode(user_string_0, user_string_0)
        module_0.register()
        module_0.register()
        user_string_1 = None
        tuple_3 = module_0.decode(tuple_1, user_string_1)
    except BaseException:
        pass