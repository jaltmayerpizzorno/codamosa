# Automatically generated by Pynguin.
import semantic_release.hvcs as module_0

def test_case_0():
    pass

def test_case_1():
    base_0 = None
    token_auth_0 = module_0.TokenAuth(base_0)
    bool_0 = False
    var_0 = token_auth_0.__eq__(bool_0)

def test_case_2():
    str_0 = 'Gv|4q`\\KmXYFy7cO'
    optional_0 = module_0.get_domain()
    token_auth_0 = module_0.TokenAuth(str_0)
    gitlab_0 = module_0.Gitlab()
    token_auth_1 = module_0.TokenAuth(gitlab_0)
    var_0 = token_auth_1.__ne__(str_0)
    str_1 = "*l-1'}s[[\rjBRPeA"
    str_2 = '}7mowt1L:XeDmX[+Vd'
    str_3 = "Ce,;Y_/bL'3X@hs"
    bool_0 = module_0.upload_to_release(str_0, str_2, str_1, str_3)
    base_0 = module_0.get_hvcs()
    str_4 = base_0.api_url()

def test_case_3():
    list_0 = []
    github_0 = module_0.Github(*list_0)
    session_0 = github_0.session()
    str_0 = 'GI@`#CK$\t ?@'
    str_1 = '1HP'
    str_2 = ' )(\x0bA;,'
    github_1 = module_0.Github()
    optional_0 = github_1.auth()
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_2: optional_0}
    token_auth_0 = module_0.TokenAuth(dict_0)
    var_0 = token_auth_0.__call__(session_0)
    base_0 = module_0.get_hvcs()
    str_3 = base_0.api_url()

def test_case_4():
    optional_0 = module_0.get_domain()

def test_case_5():
    str_0 = 'Gv|4q`\\KmXYFy7cO'
    bool_0 = module_0.check_build_status(str_0, str_0, str_0)

def test_case_6():
    str_0 = 'fix'
    bool_0 = module_0.post_changelog(str_0, str_0, str_0, str_0)

def test_case_7():
    str_0 = 'z'
    bool_0 = module_0.upload_to_release(str_0, str_0, str_0, str_0)

def test_case_8():
    gitlab_0 = module_0.Gitlab()
    str_0 = gitlab_0.domain()

def test_case_9():
    github_0 = module_0.Github()
    str_0 = github_0.domain()
    str_1 = '\n    Create a requests session.\n    :param raise_for_status: If True, a hook to invoke raise_for_status be installed\n    :param retry: If true, it will use default Retry configuration. if an integer, it will use default Retry\n    configuration with given integer as total retry count. if Retry instance, it will use this instance.\n    :return: configured requests Session\n    '
    gitlab_0 = module_0.Gitlab()
    github_1 = module_0.Github()
    bytes_0 = b'\x19\x1cT\x9f\x87\xee'
    str_2 = gitlab_0.domain()
    token_auth_0 = module_0.TokenAuth(bytes_0)
    str_3 = gitlab_0.api_url()
    bool_0 = github_1.check_build_status(str_0, str_1, str_1)

def test_case_10():
    gitlab_0 = module_0.Gitlab()
    optional_0 = gitlab_0.token()

def test_case_11():
    str_0 = 'z'
    bool_0 = module_0.upload_to_release(str_0, str_0, str_0, str_0)
    optional_0 = module_0.get_token()

def test_case_12():
    str_0 = '(wB|9j)v_DZ`]6e'
    str_1 = '86'
    str_2 = 'v?QVN4aZ<[4?Y-wS{#pO'
    bool_0 = module_0.post_changelog(str_1, str_0, str_0, str_2)
    str_3 = '# Changelog\n\n'
    bool_1 = module_0.upload_to_release(str_0, str_0, str_1, str_3)
    bool_2 = module_0.check_token()
    github_0 = module_0.Github()