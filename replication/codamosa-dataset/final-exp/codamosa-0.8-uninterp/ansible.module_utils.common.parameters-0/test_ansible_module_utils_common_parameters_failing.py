# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = None
        bytes_0 = b'\xf1\x01\x95\xf9\xb7\x0b(\x06|HO)\r]'
        var_0 = module_0.sanitize_keys(tuple_0, bytes_0)
        list_0 = []
        str_0 = 'P'
        dict_0 = {str_0: tuple_0, str_0: var_0, str_0: bytes_0}
        var_1 = module_0.remove_values(list_0, dict_0)
        var_2 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 4334
        list_0 = [int_0, int_0, int_0, int_0]
        var_0 = module_0.sanitize_keys(int_0, list_0)
        str_0 = '%nts0Z&A]>\\Yb4>'
        str_1 = '2.0'
        dict_0 = {str_1: list_0, str_0: int_0}
        var_1 = module_0.sanitize_keys(list_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1041
        str_0 = '5iN._=.\\4ZR0J;'
        list_0 = [str_0, int_0]
        list_1 = [int_0, list_0, int_0]
        var_0 = module_0.env_fallback(*list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        str_0 = "9r6+K&dn\\dq0,/I 'vk"
        var_0 = module_0.set_fallbacks(list_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        tuple_0 = None
        var_0 = module_0.set_fallbacks(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        var_0 = module_0.remove_values(bool_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'ANSIBLE_MODULE_ARGS'
        str_1 = 'AnsibleFallbackNotFound was not raised'
        var_0 = Exception(str_1)
        list_0 = [str_0, str_0]
        var_1 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'foo'
        str_1 = 'bar'
        str_2 = 'fallback'
        str_3 = 'str'
        str_4 = 'from_fallback'
        str_5 = 'from_fallback2'
        str_6 = 'int'
        bool_0 = True
        str_7 = [str_4, str_5]
        var_0 = set(str_7)
        str_8 = 'no_log'
        str_9 = 'env_fallback'
        str_10 = (str_9, str_0)
        var_1 = {str_2: str_3, str_8: bool_0, str_2: str_10}
        str_11 = {str_4: str_6}
        var_2 = {str_0: var_1, str_1: str_11}
        bool_1 = {str_1: bool_0}
        var_3 = module_0.set_fallbacks(var_2, bool_1)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = {}
        var_1 = {}
        var_2 = module_0.set_fallbacks(var_0, var_1)
        var_3 = set()
        str_0 = 'foo'
        str_1 = 'default'
        str_2 = 'bar'
        str_3 = {str_1: str_2}
        str_4 = {str_0: str_3}
        var_4 = {}
        var_5 = module_0.set_fallbacks(str_4, var_4)
        var_6 = set()
        str_5 = {str_0: str_2}
        var_7 = module_0.set_fallbacks(str_1, str_5)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = {}
        var_1 = {}
        var_2 = module_0.set_fallbacks(var_0, var_1)
        var_3 = set()
        str_0 = 'foo'
        str_1 = 'default'
        str_2 = 'bar'
        str_3 = {str_1: str_2}
        str_4 = {str_0: str_3}
        var_4 = {}
        var_5 = module_0.set_fallbacks(str_4, var_4)
        var_6 = set()
        str_5 = {str_1: str_2}
        str_6 = {str_0: str_5}
        str_7 = {str_0: str_2}
        var_7 = module_0.set_fallbacks(str_6, str_7)
        var_8 = set()
        str_8 = 'fallback'
        str_9 = 'baz'
        var_9 = lambda : str_9
        var_10 = {str_1: str_2, str_8: var_9}
        var_11 = {str_0: var_10}
        var_12 = {}
        var_13 = module_0.set_fallbacks(var_11, var_12)
    except BaseException:
        pass