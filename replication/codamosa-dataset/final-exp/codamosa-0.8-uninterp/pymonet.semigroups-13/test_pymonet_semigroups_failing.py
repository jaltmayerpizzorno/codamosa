# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        bool_0 = True
        one_0 = module_0.One(bool_0)
        var_0 = one_0.concat(one_0)
        all_0 = module_0.All(one_0)
        str_0 = 'r+4j?T{"E\x0c|u}I'
        var_1 = one_0.concat(str_0)
        semigroup_0 = module_0.Semigroup(all_0)
        bool_1 = semigroup_0.__eq__(all_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        sum_0 = module_0.Sum(list_0)
        all_0 = module_0.All(sum_0)
        str_0 = sum_0.__str__()
        map_0 = module_0.Map(all_0)
        semigroup_0 = module_0.Semigroup(map_0)
        min_0 = None
        bytes_0 = b'\xc1GK\x99T\xe4:\x01\xb0\xdb\x0b'
        one_0 = module_0.One(bytes_0)
        var_0 = one_0.concat(min_0)
        dict_0 = {}
        str_1 = all_0.__str__()
        max_0 = module_0.Max(dict_0)
        var_1 = semigroup_0.fold(max_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'J\x18\x80\xba\x041a}\xee\x12\xbf\x8b'
        set_0 = {bytes_0, bytes_0}
        min_0 = module_0.Min(set_0)
        min_1 = module_0.Min(min_0)
        sum_0 = module_0.Sum(min_1)
        bool_0 = False
        last_0 = module_0.Last(bool_0)
        sum_1 = module_0.Sum(last_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'p}RM\\I03'
        first_0 = module_0.First(str_0)
        int_0 = 2500
        last_0 = module_0.Last(int_0)
        bool_0 = True
        one_0 = module_0.One(bool_0)
        var_0 = first_0.concat(one_0)
        var_1 = first_0.concat(first_0)
        map_0 = module_0.Map(first_0)
        var_2 = map_0.concat(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    '
        max_0 = module_0.Max(str_0)
        str_1 = 'l`\rO2\t(/+G'
        last_0 = module_0.Last(str_1)
        str_2 = last_0.__str__()
        str_3 = last_0.__str__()
        var_0 = last_0.concat(max_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 4489
        float_0 = 3988.67
        sum_0 = module_0.Sum(float_0)
        tuple_0 = (int_0, sum_0)
        all_0 = module_0.All(tuple_0)
        str_0 = all_0.__str__()
        bytes_0 = b'\x06\xaf\x03\xb3\x8ck\xc2X\x16\x16\t\re\x14V\xb7\xdd^'
        float_1 = 2536.0
        list_0 = [float_1, float_1]
        one_0 = module_0.One(list_0)
        map_0 = module_0.Map(one_0)
        var_0 = map_0.concat(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ':F\nU9xfb/.v#'
        bool_0 = False
        max_0 = module_0.Max(bool_0)
        var_0 = max_0.concat(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -4206.199125
        int_0 = 2735
        first_0 = module_0.First(int_0)
        min_0 = module_0.Min(first_0)
        var_0 = min_0.concat(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = False
        dict_0 = {int_0: int_0}
        all_0 = module_0.All(dict_0)
        list_0 = [int_0, int_0, int_0]
        first_0 = module_0.First(list_0)
        all_1 = module_0.All(first_0)
        all_2 = all_1.concat(all_0)
        one_0 = module_0.One(int_0)
        str_0 = one_0.__str__()
        float_0 = 1784.4
        all_3 = module_0.All(float_0)
        dict_1 = {}
        all_4 = module_0.All(dict_1)
        all_5 = module_0.All(all_4)
        all_6 = all_5.concat(all_3)
        bool_0 = False
        sum_0 = module_0.Sum(bool_0)
        str_1 = sum_0.__str__()
        first_1 = module_0.First(str_0)
        all_7 = module_0.All(first_1)
        all_8 = all_7.concat(all_6)
        min_0 = module_0.Min(all_8)
        var_0 = one_0.concat(min_0)
        bool_1 = False
        first_2 = module_0.First(bool_1)
        str_2 = first_2.__str__()
        var_1 = one_0.concat(first_2)
        list_1 = []
        str_3 = '\nMfH!syN:3Y\rUz:aSsda'
        semigroup_0 = module_0.Semigroup(str_3)
        var_2 = one_0.concat(list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 1551.816
        min_0 = module_0.Min(float_0)
        max_0 = module_0.Max(float_0)
        all_0 = module_0.All(float_0)
        all_1 = all_0.concat(all_0)
        all_2 = all_0.concat(all_1)
        list_0 = [float_0, all_0, float_0, all_0]
        str_0 = min_0.__str__()
        all_3 = module_0.All(list_0)
        all_4 = all_2.concat(all_2)
        all_5 = all_2.concat(all_4)
        list_1 = [float_0, float_0, float_0, float_0]
        all_6 = all_5.concat(all_4)
        one_0 = module_0.One(list_1)
        all_7 = module_0.All(one_0)
        all_8 = all_7.concat(all_3)
        map_0 = module_0.Map(float_0)
        all_9 = module_0.All(map_0)
        all_10 = module_0.All(all_0)
        str_1 = max_0.__str__()
        all_11 = module_0.All(list_1)
        str_2 = max_0.__str__()
        all_12 = all_11.concat(all_0)
        all_13 = all_8.concat(all_12)
        var_0 = min_0.concat(all_1)
        set_0 = None
        last_0 = module_0.Last(set_0)
        map_1 = module_0.Map(last_0)
        str_3 = map_0.__str__()
        str_4 = "PFSMl`FtpN>'\nfMSkgU\x0b"
        var_1 = map_0.concat(str_4)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 1550.4988997582627
        min_0 = module_0.Min(float_0)
        max_0 = module_0.Max(float_0)
        var_0 = max_0.concat(min_0)
        all_0 = module_0.All(float_0)
        all_1 = all_0.concat(all_0)
        all_2 = module_0.All(var_0)
        list_0 = [float_0, all_0, float_0, all_0]
        all_3 = module_0.All(list_0)
        all_4 = module_0.All(max_0)
        all_5 = all_2.concat(all_4)
        list_1 = [float_0, float_0, float_0, float_0]
        one_0 = module_0.One(list_1)
        all_6 = module_0.All(one_0)
        all_7 = all_6.concat(all_3)
        bool_0 = False
        tuple_0 = (bool_0,)
        semigroup_0 = module_0.Semigroup(tuple_0)
        str_0 = max_0.__str__()
        all_8 = all_3.concat(all_2)
        float_1 = 1255.513957
        one_1 = module_0.One(float_1)
        var_1 = min_0.concat(one_1)
        str_1 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: Max[B]\n        :returns: new Max with largest value\n        :rtype: Max[A | B]\n        '
        map_0 = module_0.Map(str_1)
        bytes_0 = b'\xcc\xa2'
        map_1 = module_0.Map(bytes_0)
        str_2 = map_1.__str__()
        int_0 = False
        var_2 = map_0.concat(int_0)
    except BaseException:
        pass