# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.netutil as module_1
import tornado.ioloop as module_2
import socket as module_3
import datetime as module_4
import concurrent.futures._base as module_5
import _asyncio as module_6

def test_case_0():
    try:
        tuple_0 = None
        list_0 = [tuple_0]
        str_0 = 'S&s6I]"m'
        connector_0 = module_0._Connector(list_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 2148
        str_0 = 'G(|}\\hz.\x0bh|\x0ckWWre'
        executor_0 = None
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        awaitable_0 = i_o_loop_0.run_in_executor(executor_0, t_c_p_client_0)
        tuple_0 = (int_0, str_0, awaitable_0, resolver_0)
        list_0 = [tuple_0]
        str_1 = 'J)X#Fy}PjV0E'
        t_c_p_client_0.close()
        int_1 = -2692
        i_o_stream_0 = t_c_p_client_0.connect(str_1, int_1, int_0)
        connector_0 = module_0._Connector(list_0, i_o_stream_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        i_o_loop_0 = module_2.IOLoop(**dict_0)
        t_c_p_client_1 = module_0.TCPClient()
        str_0 = 'J)X#Fy}PjV0E'
        int_0 = -2709
        t_c_p_client_2 = module_0.TCPClient(resolver_0)
        int_1 = 426
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {address_family_0, int_0, resolver_0}
        tuple_0 = (set_0, int_1)
        list_0 = [tuple_0, tuple_0, tuple_0]
        list_1 = [t_c_p_client_0, str_0, tuple_0]
        connector_0 = module_0._Connector(list_0, list_1)
        connector_0.clear_timeouts()
        tuple_1 = ()
        tuple_2 = connector_0.split(list_0)
        connector_0.try_connect(tuple_1)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 60.0
        executor_0 = None
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        awaitable_0 = i_o_loop_0.run_in_executor(executor_0, t_c_p_client_0)
        str_0 = 'J)X#Fy}PjV0E'
        int_0 = -2692
        int_1 = 426
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {address_family_0, int_0, resolver_0}
        tuple_0 = (set_0, int_1)
        list_0 = [tuple_0, tuple_0, tuple_0]
        list_1 = [t_c_p_client_0, str_0, tuple_0]
        connector_0 = module_0._Connector(list_0, list_1)
        bytes_0 = b'{in\x87=\xcc\xc3'
        connector_1 = module_0._Connector(list_0, bytes_0)
        connector_0.set_connect_timeout(float_0)
        connector_0.clear_timeouts()
        str_1 = 'X-Real-Ip'
        i_o_stream_0 = t_c_p_client_0.connect(str_1, int_0, str_1, int_1, float_0)
        timedelta_0 = module_4.timedelta(*list_1, **dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        executor_0 = None
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        awaitable_0 = i_o_loop_0.run_in_executor(executor_0, t_c_p_client_0)
        str_0 = '{)X}Fy\t}Pji0E'
        int_0 = -2692
        t_c_p_client_1 = module_0.TCPClient(resolver_0)
        int_1 = 426
        address_family_0 = module_3.AddressFamily.AF_KEY
        set_0 = {address_family_0, int_0, resolver_0}
        tuple_0 = (set_0, int_1)
        list_0 = [tuple_0, tuple_0, tuple_0]
        list_1 = [t_c_p_client_0, str_0, tuple_0]
        connector_0 = module_0._Connector(list_0, list_1)
        connector_0.clear_timeouts()
        callable_0 = None
        connector_1 = module_0._Connector(list_0, callable_0)
        tuple_1 = connector_1.split(list_0)
        float_0 = -2478.610358
        connector_0.set_timeout(float_0)
        connector_0.try_connect(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        executor_0 = None
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        awaitable_0 = i_o_loop_0.run_in_executor(executor_0, t_c_p_client_0)
        str_0 = '{)X#Fy\t}Pji0E'
        int_0 = -2692
        t_c_p_client_1 = module_0.TCPClient(resolver_0)
        int_1 = 426
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {address_family_0, int_0, resolver_0}
        tuple_0 = (set_0, int_1)
        list_0 = [tuple_0, tuple_0, tuple_0]
        list_1 = [t_c_p_client_0, str_0, tuple_0]
        connector_0 = module_0._Connector(list_0, list_1)
        connector_0.clear_timeouts()
        callable_0 = None
        connector_1 = module_0._Connector(list_0, callable_0)
        tuple_1 = connector_1.split(list_0)
        str_1 = '!UFF8)(q'
        float_0 = -2478.610358
        connector_1.clear_timeout()
        connector_0.set_timeout(float_0)
        connector_0.try_connect(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 60.0
        executor_0 = None
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        awaitable_0 = i_o_loop_0.run_in_executor(executor_0, t_c_p_client_0)
        str_0 = '{)X#Fy\t}Pji0E'
        int_0 = -2692
        t_c_p_client_1 = module_0.TCPClient(resolver_0)
        int_1 = 426
        bool_0 = True
        tuple_0 = (t_c_p_client_1, bool_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        future_0 = module_5.Future()
        connector_0 = module_0._Connector(list_0, future_0)
        connector_0.on_timeout()
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {address_family_0, int_0, resolver_0}
        tuple_1 = (set_0, int_1)
        list_1 = [tuple_0, tuple_1, tuple_1, tuple_1, tuple_1]
        list_2 = [t_c_p_client_0, str_0, tuple_1]
        connector_1 = module_0._Connector(list_1, list_2)
        connector_1.clear_timeouts()
        callable_0 = None
        connector_2 = module_0._Connector(list_1, callable_0)
        tuple_2 = connector_2.split(list_0)
        connector_1.set_timeout(float_0)
        connector_2.try_connect(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        executor_0 = None
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        awaitable_0 = i_o_loop_0.run_in_executor(executor_0, t_c_p_client_0)
        t_c_p_client_1 = module_0.TCPClient(resolver_0)
        bool_0 = True
        tuple_0 = (t_c_p_client_1, bool_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        future_0 = module_5.Future()
        connector_0 = module_0._Connector(list_0, future_0)
        connector_0.on_timeout()
        future_1 = connector_0.start()
    except BaseException:
        pass

def test_case_8():
    try:
        executor_0 = None
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        resolver_0.close()
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        awaitable_0 = i_o_loop_0.run_in_executor(executor_0, t_c_p_client_0)
        str_0 = '{)X#Fy\t}Pji0E'
        int_0 = -2692
        t_c_p_client_1 = module_0.TCPClient(resolver_0)
        int_1 = 426
        bool_0 = True
        tuple_0 = (t_c_p_client_1, bool_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        future_0 = module_5.Future()
        connector_0 = module_0._Connector(list_0, future_0)
        connector_0.on_timeout()
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {address_family_0, int_0, resolver_0}
        tuple_1 = (set_0, int_1)
        list_1 = [tuple_1, tuple_1, tuple_1, tuple_0, tuple_1]
        list_2 = [t_c_p_client_0, str_0, tuple_1]
        connector_1 = module_0._Connector(list_1, list_2)
        connector_1.clear_timeouts()
        connector_0.on_connect_timeout()
        callable_0 = None
        connector_2 = module_0._Connector(list_1, callable_0)
        float_0 = -2478.610358
        connector_0.on_connect_timeout()
        connector_1.set_timeout(float_0)
        connector_1.try_connect(int_1)
    except BaseException:
        pass

def test_case_9():
    try:
        executor_0 = None
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        resolver_0.close()
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        awaitable_0 = i_o_loop_0.run_in_executor(executor_0, t_c_p_client_0)
        str_0 = '{)X#Fy\t}Pji0E'
        int_0 = -2692
        t_c_p_client_1 = module_0.TCPClient(resolver_0)
        int_1 = 426
        bool_0 = True
        tuple_0 = (t_c_p_client_1, bool_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        future_0 = module_5.Future()
        connector_0 = module_0._Connector(list_0, future_0)
        connector_0.on_timeout()
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {address_family_0, int_0, resolver_0}
        tuple_1 = (set_0, int_1)
        list_1 = [tuple_1, tuple_1, tuple_1]
        list_2 = [t_c_p_client_0, str_0, tuple_1]
        connector_1 = module_0._Connector(list_1, list_2)
        connector_1.clear_timeouts()
        connector_0.on_connect_timeout()
        callable_0 = None
        connector_2 = module_0._Connector(list_1, callable_0)
        float_0 = -2478.610358
        connector_1.set_timeout(float_0)
        connector_1.clear_timeout()
        connector_1.try_connect(int_1)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        resolver_0.close()
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        bool_0 = True
        t_c_p_client_1 = module_0.TCPClient()
        tuple_0 = (t_c_p_client_0, bool_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        future_0 = module_5.Future()
        connector_0 = module_0._Connector(list_0, future_0)
        connector_0.on_timeout()
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {resolver_0}
        connector_0.clear_timeouts()
        future_1 = module_6.Future(**dict_0)
        connector_0.on_connect_done(set_0, address_family_0, tuple_0, future_1)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        resolver_0.close()
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        bool_0 = True
        t_c_p_client_1 = module_0.TCPClient()
        tuple_0 = (t_c_p_client_0, bool_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        future_0 = module_5.Future()
        connector_0 = module_0._Connector(list_0, future_0)
        connector_0.on_timeout()
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {resolver_0}
        connector_0.clear_timeouts()
        connector_0.on_connect_timeout()
        str_0 = '!UFF8)(q'
        float_0 = -2514.981325948669
        future_1 = module_6.Future(**dict_0)
        connector_0.on_connect_done(set_0, address_family_0, tuple_0, future_1)
        connector_0.set_timeout(float_0)
        time_0 = module_4.time()
        connector_0.try_connect(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        resolver_0.close()
        dict_1 = {}
        i_o_loop_0 = module_2.IOLoop(**dict_1)
        int_0 = 426
        bool_0 = False
        t_c_p_client_1 = module_0.TCPClient()
        tuple_0 = (t_c_p_client_0, bool_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        future_0 = module_5.Future()
        connector_0 = module_0._Connector(list_0, future_0)
        connector_0.on_timeout()
        address_family_0 = module_3.AddressFamily.AF_SECURITY
        set_0 = {address_family_0, int_0, resolver_0}
        connector_0.clear_timeouts()
        connector_0.on_connect_timeout()
        str_0 = '!UFF8)(q'
        float_0 = -2478.610358
        future_1 = module_6.Future(**dict_0)
        connector_0.on_connect_done(set_0, address_family_0, tuple_0, future_1)
        connector_0.set_timeout(float_0)
        time_0 = module_4.time()
        connector_0.on_timeout()
        connector_0.try_connect(str_0)
    except BaseException:
        pass