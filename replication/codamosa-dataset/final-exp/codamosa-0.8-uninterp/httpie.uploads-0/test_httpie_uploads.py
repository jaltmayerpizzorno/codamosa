# Automatically generated by Pynguin.
import httpie.uploads as module_0
import httpie.cli.dicts as module_1
import requests_toolbelt.multipart.encoder as module_2
import requests.models as module_3

def test_case_0():
    pass

def test_case_1():
    iterable_0 = None
    i_o_0 = None
    chunked_upload_stream_0 = module_0.ChunkedUploadStream(iterable_0, i_o_0)

def test_case_2():
    multipart_encoder_0 = None
    chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
    chunked_multipart_upload_stream_1 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)

def test_case_3():
    callable_0 = None
    bytes_0 = b'\xf8D\x02\xcb.\\\x8b{\x11&F)u\x90u'
    var_0 = module_0.prepare_request_body(bytes_0, callable_0)

def test_case_4():
    multipart_request_data_dict_0 = module_1.MultipartRequestDataDict()
    tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)

def test_case_5():
    request_data_dict_0 = module_1.RequestDataDict()
    multipart_encoder_0 = module_2.MultipartEncoder(request_data_dict_0)
    callable_0 = None
    var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_0)

def test_case_6():
    str_0 = 'k8P\t%,&B'
    bool_0 = False
    request_data_dict_0 = module_1.RequestDataDict()
    multipart_encoder_0 = module_2.MultipartEncoder(request_data_dict_0)
    str_1 = '\n    Possibly converts response data for prettified terminal display.\n\n    See httpie-msgpack for an example converter plugin:\n\n        <https://github.com/rasky/httpie-msgpack>.\n\n    '
    tuple_0 = (multipart_encoder_0, str_1)
    chunked_upload_stream_0 = module_0.ChunkedUploadStream(bool_0, tuple_0)
    iterable_0 = chunked_upload_stream_0.__iter__()
    chunked_upload_stream_1 = module_0.ChunkedUploadStream(str_0, str_0)
    iterable_1 = chunked_upload_stream_1.__iter__()
    iterable_2 = chunked_upload_stream_1.__iter__()
    iterable_3 = chunked_upload_stream_1.__iter__()
    list_0 = []
    multipart_encoder_1 = module_2.MultipartEncoder(list_0)
    int_0 = 591
    var_0 = module_0.prepare_request_body(request_data_dict_0, int_0)

def test_case_7():
    i_o_0 = None
    str_0 = '--max-headers'
    dict_0 = {str_0: i_o_0}
    multipart_request_data_dict_0 = module_1.MultipartRequestDataDict(**dict_0)
    tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)

def test_case_8():
    str_0 = '\x0cp0'
    dict_0 = {str_0: str_0}
    float_0 = 495.79
    multipart_encoder_0 = module_2.MultipartEncoder(dict_0, float_0)
    bytes_0 = b'\x01\xef\x94(\x11^\xc3\xc2%bul\xc3q'
    list_0 = []
    str_1 = 'gMzE'
    var_0 = module_0.prepare_request_body(multipart_encoder_0, bytes_0, list_0, str_1)

def test_case_9():
    str_0 = '-h'
    float_0 = 2399.37074
    int_0 = 1512
    chunked_upload_stream_0 = module_0.ChunkedUploadStream(float_0, int_0)
    bool_0 = True
    float_1 = -1345.8827
    var_0 = module_0.prepare_request_body(str_0, chunked_upload_stream_0, int_0, bool_0, float_1)
    iterable_0 = None
    callable_0 = None
    chunked_upload_stream_1 = module_0.ChunkedUploadStream(iterable_0, callable_0)
    prepared_request_0 = module_3.PreparedRequest()