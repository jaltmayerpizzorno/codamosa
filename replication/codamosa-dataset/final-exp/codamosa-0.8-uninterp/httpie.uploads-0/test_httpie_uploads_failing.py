# Automatically generated by Pynguin.
import httpie.cli.dicts as module_0
import requests_toolbelt.multipart.encoder as module_1
import httpie.uploads as module_2
import requests.models as module_3
import typing as module_4

def test_case_0():
    try:
        str_0 = 'k8P\t%,&B'
        bool_0 = False
        request_data_dict_0 = module_0.RequestDataDict()
        multipart_encoder_0 = module_1.MultipartEncoder(request_data_dict_0)
        str_1 = '\n    Possibly converts response data for prettified terminal display.\n\n    See httpie-msgpack for an example converter plugin:\n\n        <https://github.com/rasky/httpie-msgpack>.\n\n    '
        tuple_0 = (multipart_encoder_0, str_1)
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(bool_0, tuple_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        chunked_upload_stream_1 = module_2.ChunkedUploadStream(str_0, str_0)
        iterable_1 = chunked_upload_stream_1.__iter__()
        iterable_2 = chunked_upload_stream_1.__iter__()
        iterable_3 = chunked_upload_stream_1.__iter__()
        list_0 = []
        int_0 = -1331
        multipart_encoder_1 = module_1.MultipartEncoder(list_0)
        str_2 = '`9A'
        set_0 = {chunked_upload_stream_1, str_1, int_0, bool_0}
        var_0 = module_2.prepare_request_body(str_2, set_0)
        prepared_request_0 = module_3.PreparedRequest()
        multipart_encoder_2 = module_1.MultipartEncoder(iterable_2, prepared_request_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '-h'
        var_0 = None
        optional_0 = None
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        tuple_0 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_1 = None
        dict_0 = {str_1: optional_0}
        str_2 = '(.*?)( *)(:)( *)(.+)'
        var_1 = module_2.prepare_request_body(str_0, dict_0, tuple_0, str_2)
        tuple_1 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        var_2 = module_2.prepare_request_body(str_0, var_0, optional_0)
        i_o_0 = module_4.IO()
        str_3 = 'u/B'
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(i_o_0, str_3)
        iterable_0 = chunked_upload_stream_0.__iter__()
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = False
        var_3 = module_2.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        i_o_0 = module_4.IO()
        bool_0 = i_o_0.isatty()
        callable_0 = None
        var_0 = module_2.prepare_request_body(i_o_0, callable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = None
        var_0 = module_2.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict(**dict_0)
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        bool_0 = False
        multipart_encoder_1 = module_1.MultipartEncoder(chunked_multipart_upload_stream_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '-h'
        var_0 = None
        optional_0 = None
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        tuple_0 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        var_1 = module_2.prepare_request_body(str_0, var_0, optional_0)
        multipart_request_data_dict_1 = None
        list_0 = []
        bytes_0 = b'l\xee\x1e\x93\xdd'
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(list_0, bytes_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        float_0 = -4024.5021
        multipart_encoder_0 = module_1.MultipartEncoder(iterable_0, float_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        i_o_0 = module_4.IO()
        str_1 = 'u/B'
        set_0 = set()
        multipart_encoder_1 = module_1.MultipartEncoder(multipart_request_data_dict_0, set_0)
        chunked_multipart_upload_stream_1 = module_2.ChunkedMultipartUploadStream(multipart_encoder_1)
        iterable_2 = chunked_multipart_upload_stream_1.__iter__()
        set_1 = {optional_0, tuple_0, multipart_request_data_dict_1}
        bool_0 = False
        i_o_0.close()
        chunked_upload_stream_1 = module_2.ChunkedUploadStream(set_1, bool_0)
        iterable_3 = chunked_upload_stream_1.__iter__()
        chunked_upload_stream_2 = module_2.ChunkedUploadStream(i_o_0, str_1)
        prepared_request_0 = module_3.PreparedRequest()
        bool_1 = None
        var_2 = module_2.compress_request(prepared_request_0, bool_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '-h'
        dict_0 = {}
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict(**dict_0)
        str_1 = "Hi!'#d"
        tuple_0 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1)
        tuple_1 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1, str_1)
        list_0 = []
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0, list_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_0 = module_2.prepare_request_body(str_0, list_0)
        list_1 = []
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        i_o_0 = module_4.IO(*list_1, **dict_0)
        iterable_1 = None
        callable_0 = None
        callable_1 = None
        var_1 = module_2.prepare_request_body(multipart_encoder_0, callable_1, chunked_multipart_upload_stream_0)
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(iterable_1, callable_0)
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        multipart_encoder_1 = module_1.MultipartEncoder(iterable_2, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '-h'
        dict_0 = {}
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict(**dict_0)
        str_1 = "Hi!'#d"
        tuple_0 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1)
        tuple_1 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1, str_1)
        list_0 = []
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0, list_0)
        float_0 = 2399.37074
        int_0 = -3609
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(float_0, int_0)
        bool_0 = True
        float_1 = -1345.8827
        var_0 = module_2.prepare_request_body(str_1, chunked_upload_stream_0, int_0, bool_0, float_1)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        list_1 = [tuple_0]
        var_1 = module_2.prepare_request_body(str_0, list_1)
        list_2 = []
        i_o_0 = module_4.IO(*list_2, **dict_0)
        str_2 = ',c:7%Bp>s0\n@pC>'
        chunked_upload_stream_1 = module_2.ChunkedUploadStream(str_2, iterable_0)
        iterable_1 = chunked_upload_stream_1.__iter__()
        iterable_2 = None
        var_2 = module_2.prepare_request_body(str_0, i_o_0, chunked_multipart_upload_stream_0, chunked_multipart_upload_stream_0)
        callable_0 = None
        callable_1 = None
        var_3 = module_2.prepare_request_body(multipart_encoder_0, callable_1, int_0, chunked_multipart_upload_stream_0, chunked_upload_stream_1)
        chunked_upload_stream_2 = module_2.ChunkedUploadStream(iterable_2, callable_0)
        iterable_3 = chunked_multipart_upload_stream_0.__iter__()
        var_4 = module_2.prepare_request_body(multipart_encoder_0, dict_0, multipart_encoder_0, iterable_3)
        prepared_request_0 = module_3.PreparedRequest()
        bool_1 = None
        prepared_request_1 = module_3.PreparedRequest()
        var_5 = module_2.compress_request(prepared_request_1, bool_1)
    except BaseException:
        pass