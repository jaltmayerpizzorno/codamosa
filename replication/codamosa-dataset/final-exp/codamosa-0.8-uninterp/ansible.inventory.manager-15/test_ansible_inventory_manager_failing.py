# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    try:
        str_0 = 'xh'
        int_0 = -1702
        inventory_manager_0 = module_0.InventoryManager(str_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -419
        str_0 = 'oS3pd)gs~/fX!ds#'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0)
        var_0 = inventory_manager_1.add_host(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 59
        str_0 = '?rf'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_0 = inventory_manager_0.add_group(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0]
        inventory_manager_0 = None
        inventory_manager_1 = module_0.InventoryManager(list_0)
        var_0 = inventory_manager_1.subset(inventory_manager_0)
        int_0 = 535000
        float_0 = 360.897
        inventory_manager_2 = module_0.InventoryManager(float_0)
        var_1 = inventory_manager_2.parse_sources(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        inventory_manager_0 = module_0.InventoryManager(bool_0)
        bytes_0 = b'\xc6iF\xf1:\xe2c%'
        var_0 = inventory_manager_0.restrict_to_hosts(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '[A]\x0c'
        dict_0 = {str_0: str_0}
        list_0 = [str_0, str_0, dict_0]
        bool_0 = False
        inventory_manager_0 = module_0.InventoryManager(bool_0)
        var_0 = inventory_manager_0.refresh_inventory()
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0)
        float_0 = 4828.12
        inventory_manager_2 = module_0.InventoryManager(float_0, dict_0)
        var_1 = inventory_manager_2.remove_restriction()
        tuple_0 = (list_0,)
        inventory_manager_3 = module_0.InventoryManager(str_0, dict_0, tuple_0)
        float_1 = -85.7
        set_0 = {str_0}
        var_2 = inventory_manager_3.parse_source(float_1, set_0)
        float_2 = 512.0
        bool_1 = False
        inventory_manager_4 = module_0.InventoryManager(float_2, inventory_manager_1, bool_1)
        var_3 = inventory_manager_1.list_hosts(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        set_0 = {bool_0, bool_0, bool_0}
        inventory_manager_0 = module_0.InventoryManager(bool_0)
        float_0 = None
        var_0 = inventory_manager_0.restrict_to_hosts(float_0)
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0)
        var_1 = inventory_manager_1.refresh_inventory()
        list_0 = [set_0, bool_0, set_0]
        inventory_manager_2 = module_0.InventoryManager(list_0)
        var_2 = inventory_manager_2.get_groups_dict()
        var_3 = inventory_manager_2.clear_pattern_cache()
        var_4 = inventory_manager_2.remove_restriction()
        float_1 = -2467.0
        var_5 = inventory_manager_2.add_host(float_1, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '$l}yiMjn%{w-c,j)XL&'
        dict_0 = {str_0: str_0}
        list_0 = [str_0, str_0, dict_0]
        bool_0 = False
        bool_1 = False
        inventory_manager_0 = module_0.InventoryManager(bool_1)
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0)
        var_0 = inventory_manager_0.refresh_inventory()
        var_1 = inventory_manager_1.subset(bool_0)
        tuple_0 = (list_0,)
        inventory_manager_2 = module_0.InventoryManager(str_0, dict_0, tuple_0)
        var_2 = inventory_manager_2.reconcile_inventory()
        inventory_manager_3 = module_0.InventoryManager(var_1, dict_0)
        var_3 = inventory_manager_1.list_hosts()
        var_4 = inventory_manager_0.list_hosts(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'l:LK6U21aSrz|vo\\SvD'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        list_0 = []
        var_0 = inventory_manager_0.restrict_to_hosts(list_0)
        var_1 = inventory_manager_0.get_groups_dict()
        str_1 = '.le@{d'
        inventory_manager_1 = module_0.InventoryManager(str_1)
        str_2 = '{$1*)'
        var_2 = inventory_manager_0.parse_source(str_2)
        var_3 = module_0.split_host_pattern(inventory_manager_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '$l}yiMjn%{w-c,j)Xh&'
        dict_0 = {str_0: str_0}
        str_1 = 'Xor[-p~a'
        inventory_manager_0 = module_0.InventoryManager(str_1)
        var_0 = inventory_manager_0.list_hosts()
        inventory_manager_1 = module_0.InventoryManager(str_0)
        str_2 = '&GR:BU;=f7;20'
        var_1 = inventory_manager_0.list_hosts(str_2)
        str_3 = '5,@r`b'
        var_2 = inventory_manager_0.get_hosts(str_3)
        var_3 = inventory_manager_0.list_hosts(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '$l}yiMjn%{w-c,j)Xh&'
        dict_0 = {str_0: str_0}
        list_0 = [str_0, str_0, str_0, dict_0]
        bool_0 = False
        bool_1 = False
        inventory_manager_0 = module_0.InventoryManager(bool_1)
        var_0 = inventory_manager_0.list_hosts()
        inventory_manager_1 = module_0.InventoryManager(bool_0)
        var_1 = inventory_manager_1.refresh_inventory()
        var_2 = inventory_manager_1.subset(bool_0)
        tuple_0 = (list_0,)
        inventory_manager_2 = module_0.InventoryManager(str_0, dict_0, tuple_0)
        float_0 = -85.7
        set_0 = {str_0}
        var_3 = inventory_manager_2.parse_source(float_0, set_0)
        var_4 = inventory_manager_2.reconcile_inventory()
        bool_2 = False
        var_5 = inventory_manager_1.parse_source(bool_2)
        var_6 = inventory_manager_1.reconcile_inventory()
        var_7 = inventory_manager_1.subset(inventory_manager_1)
        var_8 = inventory_manager_0.clear_pattern_cache()
        inventory_manager_3 = module_0.InventoryManager(tuple_0)
        var_9 = inventory_manager_1.list_hosts()
        inventory_manager_4 = module_0.InventoryManager(bool_1, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '$l}yiMjn%{w-c,j)Xh&'
        dict_0 = {str_0: str_0}
        bool_0 = False
        inventory_manager_0 = module_0.InventoryManager(bool_0)
        var_0 = inventory_manager_0.parse_sources()
        var_1 = inventory_manager_0.list_hosts()
        var_2 = inventory_manager_0.subset(bool_0)
        inventory_manager_1 = module_0.InventoryManager(dict_0)
        var_3 = inventory_manager_0.clear_caches()
        bytes_0 = b'\t\xdcyo\xce\xfa\x0b@&%XX'
        var_4 = inventory_manager_0.get_hosts(bytes_0, bool_0)
        bool_1 = True
        var_5 = inventory_manager_0.parse_source(bool_1)
        var_6 = inventory_manager_1.list_groups()
        var_7 = inventory_manager_0.subset(inventory_manager_0)
        var_8 = inventory_manager_1.subset(bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        bool_1 = False
        dict_0 = {bool_0: bool_0, bool_1: bool_1, bool_1: bool_1}
        var_0 = module_0.order_patterns(dict_0)
        int_0 = 59
        var_1 = module_0.order_patterns(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '$l}yiMjn%{w-c,j)Xh&'
        bool_0 = False
        inventory_manager_0 = module_0.InventoryManager(bool_0)
        var_0 = inventory_manager_0.clear_caches()
        float_0 = -85.7
        set_0 = {str_0}
        var_1 = inventory_manager_0.parse_source(float_0, set_0)
        var_2 = inventory_manager_0.reconcile_inventory()
        bool_1 = False
        var_3 = inventory_manager_0.parse_source(bool_1)
        str_1 = 'c"l\x0b\rpy}v0fN\r~*v'
        var_4 = inventory_manager_0.list_hosts(str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 233.51
        str_0 = 'Nv_}v"]$xY|@G(k'
        list_0 = [float_0, float_0]
        inventory_manager_0 = module_0.InventoryManager(list_0)
        var_0 = inventory_manager_0.list_groups()
        tuple_0 = ()
        inventory_manager_1 = module_0.InventoryManager(tuple_0)
        var_1 = inventory_manager_0.remove_restriction()
        var_2 = inventory_manager_1.subset(str_0)
        set_0 = None
        int_0 = None
        float_1 = -1648.47
        var_3 = inventory_manager_1.get_hosts(set_0, int_0, float_1, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\t&'
        dict_0 = {str_0: str_0}
        bool_0 = False
        inventory_manager_0 = module_0.InventoryManager(bool_0)
        var_0 = inventory_manager_0.list_hosts()
        var_1 = inventory_manager_0.subset(bool_0)
        inventory_manager_1 = module_0.InventoryManager(dict_0)
        var_2 = inventory_manager_0.clear_caches()
        float_0 = -85.7
        bool_1 = False
        var_3 = inventory_manager_0.parse_source(bool_1)
        var_4 = inventory_manager_1.list_groups()
        bytes_0 = b''
        str_1 = '\x0b^D3Q'
        var_5 = inventory_manager_0.subset(inventory_manager_0)
        var_6 = inventory_manager_1.subset(bytes_0)
        inventory_manager_2 = module_0.InventoryManager(str_1, dict_0)
        var_7 = inventory_manager_0.subset(float_0)
        str_2 = '~[T+cQMX{'
        var_8 = inventory_manager_2.list_hosts(str_2)
        bool_2 = False
        inventory_manager_3 = module_0.InventoryManager(bool_2)
        var_9 = inventory_manager_3.list_hosts()
        inventory_manager_4 = module_0.InventoryManager(float_0)
        var_10 = inventory_manager_4.list_groups()
        str_3 = ";<Nh0=\x0cxN' &]X^"
        var_11 = inventory_manager_4.list_hosts(str_3)
    except BaseException:
        pass