# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        int_0 = 3390
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_0 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'uVFW{0j"|0{msBu#f;3z'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        invalid_pattern_0 = module_0.InvalidPattern(dict_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{c]2W@$t#x!.R'
        list_0 = [str_0, str_0, str_0, str_0]
        invalid_pattern_0 = module_0.InvalidPattern(list_0)
        bytes_0 = b'\x10li\xf4\x1a\x9c\xd4[\x18\xf8s\xb8\xa8r'
        list_1 = [bytes_0, bytes_0]
        invalid_pattern_1 = module_0.InvalidPattern(list_1)
        var_0 = invalid_pattern_1.__eq__(invalid_pattern_0)
        var_1 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'U\xb2\xd4\x89N\xbd\xcf\xd8\x93\xd7\xeaV?'
        lazy_regex_0 = module_0.LazyRegex()
        invalid_pattern_0 = module_0.InvalidPattern(lazy_regex_0)
        var_0 = invalid_pattern_0.__eq__(bytes_0)
        var_1 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 3290.309132
        bytes_0 = b'\xfc\xbb\x8f'
        var_0 = module_0.finditer_public(float_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = set()
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'uV}{0j"0{msBu#f;3'
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getstate__()
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_1 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        lazy_regex_0 = module_0.LazyRegex()
        set_0 = {tuple_0, tuple_0}
        var_0 = lazy_regex_0.__setstate__(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 3290.309132
        bytes_0 = b'\xfc\xbb\x8f'
        var_0 = module_0.finditer_public(float_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'k\x94\xb1{\xdf\xdb\x85S?\xaa;\x16\x90\xe0c'
        lazy_regex_0 = module_0.LazyRegex()
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        lazy_regex_1 = module_0.LazyRegex(set_0)
        var_0 = lazy_regex_1.__getattr__(lazy_regex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        bool_0 = False
        var_0 = module_0.finditer_public(lazy_regex_0, bool_0)
    except BaseException:
        pass