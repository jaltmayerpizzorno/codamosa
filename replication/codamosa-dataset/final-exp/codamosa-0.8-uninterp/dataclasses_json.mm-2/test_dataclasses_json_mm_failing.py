# Automatically generated by Pynguin.
import dataclasses_json.mm as module_0
import marshmallow.base as module_1
import builtins as module_2
import marshmallow.fields as module_3

def test_case_0():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        bytes_0 = b'\x8ehcx\x1f@H\x05\xec\xd9\xb9A\xdf$(\xa3\xa9\xb7M'
        str_0 = '3^jv&u\\& \\nS+9&'
        str_1 = 'k~3a?OJ]Yv'
        bytes_1 = b'\xc4$\xac\xca\x9e\xd4\x82\xccI\xf2\xd7u'
        str_2 = 'R`'
        dict_0 = {}
        str_3 = ' that is not an instance of dataclass_json. Did you mean to recursively serialize this field? If so, make sure to augment '
        dict_1 = {str_0: list_0, str_2: dict_0, str_3: str_1}
        union_field_0 = module_0._UnionField(str_1, bytes_1, dict_1)
        dict_2 = {str_0: bytes_0, str_0: bool_0}
        type_0 = module_0.build_schema(bool_0, list_0, bytes_0, dict_2)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'l7%Dw'
        dict_0 = {str_0: str_0, str_0: str_0}
        schema_f_0 = module_0.SchemaF(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        schema_f_0 = module_0.SchemaF()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        var_0 = None
        list_0 = [var_0, var_0, var_0]
        schema_a_b_c_0 = module_1.SchemaABC()
        tuple_0 = ()
        var_1 = module_0.build_type(bool_0, list_0, schema_a_b_c_0, tuple_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'value of non-optional type '
        var_0 = None
        list_0 = [str_0, var_0, str_0]
        set_0 = set()
        var_1 = module_0.schema(list_0, set_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        str_0 = 'jxLH%Z'
        str_1 = 'F;<u'
        dict_0 = {str_0: str_1}
        timestamp_field_0 = module_0._TimestampField(dump_only=bool_0, error_messages=dict_0)
        bool_1 = True
        str_2 = 'a*6G17.5W05BbfT]D'
        dict_1 = {str_0: bool_1, str_1: dict_0, str_2: dict_0}
        var_0 = timestamp_field_0.deserialize(bool_0, **dict_1)
        var_1 = None
        schema_a_b_c_0 = module_1.SchemaABC()
        tuple_0 = ()
        list_0 = [str_1]
        type_0 = module_2.type(*list_0)
        set_0 = {var_1, tuple_0}
        nested_0 = module_3.Nested(type_0, default=str_2, unknown=str_1, **dict_1)
        var_2 = module_0.build_type(type_0, set_0, nested_0, nested_0, bool_1)
    except BaseException:
        pass