# Automatically generated by Pynguin.
import ansible.parsing.yaml.constructor as module_0
import ansible.parsing.vault as module_1
import yaml.nodes as module_2

def test_case_0():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        str_0 = 'BaQ*-^`u8rEQ%'
        var_0 = ansible_constructor_0.construct_mapping(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'X&,X.Ckp$V"lN'
        bytes_0 = b'\xb3\xf6\x83c\xeb\xa8\xb0\xfb\xe1\xf5\x1d\xfb\xf0C%\x08\x918'
        tuple_0 = (bytes_0,)
        dict_0 = {tuple_0: tuple_0, bytes_0: bytes_0}
        ansible_constructor_0 = module_0.AnsibleConstructor(dict_0)
        var_0 = ansible_constructor_0.construct_yaml_str(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 478
        bool_0 = None
        set_0 = {bool_0, bool_0}
        ansible_constructor_0 = module_0.AnsibleConstructor(set_0)
        var_0 = ansible_constructor_0.construct_vault_encrypted_unicode(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1780
        ansible_constructor_0 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_0.construct_yaml_unsafe(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        bool_0 = True
        tuple_0 = (bool_0,)
        str_0 = 's]x_V>`s}'
        ansible_constructor_1 = module_0.AnsibleConstructor(tuple_0, str_0)
        str_1 = '3*/f:n%\\PRT%2Hjm+XLk'
        var_0 = ansible_constructor_0.construct_yaml_unsafe(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        vault_lib_0 = module_1.VaultLib()
        bool_0 = True
        tuple_0 = (dict_0, vault_lib_0, bool_0)
        ansible_constructor_0 = module_0.AnsibleConstructor(tuple_0)
        str_0 = 'y"b1nF>#}WaEm0.\n/@\ni'
        mapping_node_0 = module_2.MappingNode(ansible_constructor_0, str_0, dict_0)
        ansible_constructor_1 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_1.construct_yaml_unsafe(mapping_node_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        str_0 = 'tag:yaml.org,2002:str'
        var_0 = []
        mapping_node_0 = module_2.MappingNode(str_0, var_0)
        str_1 = 'tag:yaml.org,2002:map'
        var_1 = []
        mapping_node_1 = module_2.MappingNode(str_1, var_1)
        var_2 = ansible_constructor_0.construct_mapping(mapping_node_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xd1\xe1%\x9fRgv\xb2u\xbd\x9a\xda\x01\x9f&3\xd9'
        ansible_constructor_0 = module_0.AnsibleConstructor(bytes_0)
        ansible_vault_encrypted_unicode_0 = None
        var_0 = ansible_constructor_0.construct_yaml_map(ansible_vault_encrypted_unicode_0)
        dict_0 = None
        list_0 = [var_0]
        str_0 = '.\x0b Kx)kjT[6f}\x0b'
        bool_0 = False
        dict_1 = {str_0: bool_0, str_0: ansible_vault_encrypted_unicode_0}
        ansible_constructor_1 = module_0.AnsibleConstructor(dict_1)
        mapping_node_0 = module_2.MappingNode(ansible_constructor_1, ansible_constructor_1)
        mapping_node_1 = module_2.MappingNode(dict_0, list_0, mapping_node_0)
        var_1 = ansible_constructor_0.construct_vault_encrypted_unicode(mapping_node_1)
    except BaseException:
        pass