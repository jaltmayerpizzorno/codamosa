# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.simple_httpclient as module_1
import tornado.ioloop as module_2
import tornado.netutil as module_3
import tornado.httputil as module_4
import tornado.httpclient as module_5
import ssl as module_6

def test_case_0():
    try:
        list_0 = None
        t_c_p_client_0 = module_0.TCPClient()
        h_t_t_p_request_0 = None
        callable_0 = None
        set_0 = set()
        int_0 = None
        h_t_t_p_connection_0 = module_1._HTTPConnection(list_0, h_t_t_p_request_0, callable_0, set_0, int_0, t_c_p_client_0, int_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'vLVnU)!aF,KhS_'
        h_t_t_p_stream_closed_error_0 = module_1.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        str_3 = h_t_t_p_stream_closed_error_0.__str__()
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.close()
        dict_0 = {}
        resolver_0 = module_3.Resolver(**dict_0)
        str_4 = h_t_t_p_stream_closed_error_0.__str__()
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_2)
        h_t_t_p_request_0 = None
        selectable_0 = module_2._Selectable(**dict_0)
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, selectable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'vLVnU)!aF,KhS_'
        h_t_t_p_stream_closed_error_0 = module_1.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        str_3 = h_t_t_p_stream_closed_error_0.__str__()
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        int_0 = 60
        t_c_p_client_0 = None
        dict_0 = {}
        resolver_0 = module_3.Resolver(**dict_0)
        str_4 = '6'
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_4)
        str_5 = h_t_t_p_timeout_error_0.__str__()
        str_6 = h_t_t_p_stream_closed_error_0.__str__()
        str_7 = h_t_t_p_timeout_error_0.__str__()
        simple_async_h_t_t_p_client_1 = module_1.SimpleAsyncHTTPClient()
        h_t_t_p_request_0 = None
        callable_0 = None
        h_t_t_p_headers_0 = module_4.HTTPHeaders()
        h_t_t_p_headers_1 = h_t_t_p_headers_0.copy()
        iterator_0 = h_t_t_p_headers_1.__iter__()
        int_1 = -1291
        h_t_t_p_connection_0 = module_1._HTTPConnection(simple_async_h_t_t_p_client_1, h_t_t_p_request_0, callable_0, iterator_0, int_0, t_c_p_client_0, int_0, int_1)
        h_t_t_p_connection_0.on_connection_close()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'vLVnU)!aF,KhgS_'
        h_t_t_p_stream_closed_error_0 = module_1.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        str_3 = h_t_t_p_stream_closed_error_0.__str__()
        i_o_loop_0 = module_2.IOLoop()
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.close()
        int_0 = 60
        t_c_p_client_0 = None
        str_4 = h_t_t_p_stream_closed_error_0.__str__()
        str_5 = ''
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_5)
        str_6 = h_t_t_p_timeout_error_0.__str__()
        str_7 = 'ciphers'
        str_8 = '[g"$~'
        bool_0 = False
        h_t_t_p_request_0 = module_5.HTTPRequest(str_4, str_7, int_0, str_8, i_o_loop_0, str_1, bool_0)
        set_0 = {str_6}
        int_1 = 2959
        int_2 = -1090
        h_t_t_p_connection_0 = module_1._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, i_o_loop_0, set_0, int_1, t_c_p_client_0, int_2, int_0)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'vLVnU)!aF,KhS_'
        h_t_t_p_stream_closed_error_0 = module_1.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        str_3 = h_t_t_p_stream_closed_error_0.__str__()
        str_4 = ''
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        int_0 = 60
        t_c_p_client_0 = None
        optional_0 = None
        int_1 = 307
        bool_0 = True
        s_s_l_context_0 = module_6.SSLContext()
        h_t_t_p_request_0 = module_5.HTTPRequest(str_3, str_0, str_4, optional_0, int_1, bool_0, str_4, bool_0, s_s_l_context_0)
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, h_t_t_p_request_0)
        str_5 = '6'
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_5)
        str_6 = h_t_t_p_timeout_error_0.__str__()
        str_7 = h_t_t_p_stream_closed_error_0.__str__()
        str_8 = h_t_t_p_timeout_error_0.__str__()
        simple_async_h_t_t_p_client_1 = module_1.SimpleAsyncHTTPClient()
        h_t_t_p_request_1 = None
        callable_0 = None
        h_t_t_p_headers_0 = module_4.HTTPHeaders()
        h_t_t_p_headers_1 = h_t_t_p_headers_0.copy()
        iterator_0 = h_t_t_p_headers_1.__iter__()
        int_2 = -1291
        h_t_t_p_connection_0 = module_1._HTTPConnection(simple_async_h_t_t_p_client_1, h_t_t_p_request_1, callable_0, iterator_0, int_0, t_c_p_client_0, int_0, int_2)
        h_t_t_p_connection_0.on_connection_close()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'vLVnU)!aF,KhS_'
        h_t_t_p_stream_closed_error_0 = module_1.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        str_3 = h_t_t_p_stream_closed_error_0.__str__()
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.close()
        str_4 = ''
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_4)
        str_5 = h_t_t_p_timeout_error_0.__str__()
        str_6 = h_t_t_p_timeout_error_0.__str__()
        bool_0 = False
        str_7 = '>\\[UJxo_'
        bytes_0 = b'\xec\x80g\x0f\xbf\xf6\xdb~p\xa1v-#\xe64\xf8~\xdd'
        none_type_0 = None
        none_type_1 = None
        h_t_t_p_request_0 = module_5.HTTPRequest(str_7, bytes_0, str_4, none_type_0, bool_0, none_type_1, str_7)
        dict_0 = None
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, dict_0)
    except BaseException:
        pass