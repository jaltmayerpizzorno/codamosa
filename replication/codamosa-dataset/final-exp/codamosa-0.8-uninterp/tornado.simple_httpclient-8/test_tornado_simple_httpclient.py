# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.ioloop as module_1
import tornado.httputil as module_2
import tornado.tcpclient as module_3

def test_case_0():
    pass

def test_case_1():
    str_0 = None
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)

def test_case_2():
    str_0 = 'WWE{I7'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = h_t_t_p_timeout_error_0.__str__()

def test_case_3():
    str_0 = 'c@HC!EG<&O'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_4():
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.close()

def test_case_5():
    str_0 = 'vLVnU)!aF,KhS_'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()
    str_2 = h_t_t_p_stream_closed_error_0.__str__()
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    i_o_loop_2 = i_o_loop_1.instance()
    list_0 = [i_o_loop_1]
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient(*list_0)
    simple_async_h_t_t_p_client_0.close()
    int_0 = -666
    str_3 = '__main__'
    str_4 = '\\Q:Ml+5|Y'
    dict_0 = {str_2: str_0, str_3: str_0, str_4: str_4, str_4: str_4}
    simple_async_h_t_t_p_client_0.initialize(int_0, dict_0, int_0, int_0)

def test_case_6():
    str_0 = 'vLVnU)!aF,KhS_'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()
    str_2 = h_t_t_p_stream_closed_error_0.__str__()
    str_3 = h_t_t_p_stream_closed_error_0.__str__()
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    int_0 = 60
    int_1 = -1431
    int_2 = 3473
    h_t_t_p_request_0 = None
    h_t_t_p_headers_0 = module_2.HTTPHeaders()
    callable_0 = None
    t_c_p_client_0 = module_3.TCPClient()
    int_3 = None
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, h_t_t_p_headers_0, callable_0, int_1, t_c_p_client_0, int_2, int_3)
    h_t_t_p_connection_0.on_connection_close()
    tuple_0 = (int_2, int_0)
    int_4 = -1241
    h_t_t_p_connection_1 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, tuple_0, callable_0, int_1, t_c_p_client_0, int_1, int_4)

def test_case_7():
    str_0 = 'vLVnU)!aF,KhS_'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()
    str_2 = h_t_t_p_stream_closed_error_0.__str__()
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    i_o_loop_2 = i_o_loop_1.instance()
    list_0 = [i_o_loop_1]
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient(*list_0)
    simple_async_h_t_t_p_client_0.close()
    int_0 = -666
    float_0 = i_o_loop_2.time()
    str_3 = '__main__'
    str_4 = '\\Q:Ml+5|Y'
    dict_0 = {str_2: str_0, str_3: str_0, str_4: str_4, str_4: str_4}
    simple_async_h_t_t_p_client_0.initialize(int_0, dict_0, int_0, int_0)
    simple_async_h_t_t_p_client_0.close()