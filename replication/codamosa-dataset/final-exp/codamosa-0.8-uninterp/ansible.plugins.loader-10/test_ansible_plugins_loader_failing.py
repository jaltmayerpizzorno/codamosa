# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'U(5'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2460.21689
        list_0 = [float_0]
        str_0 = '~k^h7,'
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(float_0, list_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = '__init__'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '6qW'
        bytes_0 = b'70\xb4\x8d\xba'
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.redirect(bytes_0)
        var_1 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'A*tionBase'
        var_0 = None
        plugin_loader_0 = module_0.PluginLoader(str_0, str_0, var_0, str_0, var_0)
        str_1 = 'd.M:ug'
        var_1 = plugin_loader_0.find_plugin_with_context(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = -689
        str_0 = 'aBs=yWY,}dO3hT|8i'
        dict_0 = {plugin_load_context_0: plugin_load_context_0, int_0: str_0}
        plugin_loader_0 = module_0.PluginLoader(int_0, bytes_0, str_0, dict_0)
        var_0 = plugin_loader_0.__repr__()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = None
        list_0 = []
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.nope(list_0)
        str_0 = 'R+0k<O'
        dict_0 = None
        dict_1 = {str_0: bytes_0, str_0: dict_0, str_0: bytes_0}
        str_1 = "import_playbook parameters cannot be mixed with 'vars' entries for import statements"
        set_0 = {str_1, bytes_0, str_1, bytes_0}
        dict_2 = {bytes_0: set_0}
        str_2 = 'KTZV4TM&HvIB4/?z'
        float_0 = 3851.78654
        plugin_loader_0 = module_0.PluginLoader(str_1, set_0, dict_2, str_2, float_0)
        var_1 = plugin_loader_0.__setstate__(dict_1)
        get_with_context_result_0 = module_0.get_with_context_result()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'fK[]R5*.Tln3c,'
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [str_0, str_0, plugin_load_context_0]
        int_0 = 734
        bytes_0 = b'.\x0e\xe8\xcdaB\x91O>&\xe6V'
        str_1 = 'atomically move src to dest, copying attributes from dest, returns true on success\n        it uses os.rename to ensure this as it is an atomic operation, rest of the function is\n        to work around limitations, corner cases and ensure selinux context is saved if possible'
        int_1 = -1198
        tuple_0 = (int_1,)
        jinja2_loader_0 = module_0.Jinja2Loader(int_0, bytes_0, str_1, tuple_0)
        var_0 = jinja2_loader_0.get(str_0, *list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.get_shell_plugin(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'qW'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        list_0 = [plugin_load_context_1]
        bool_0 = False
        bytes_0 = b'\x1b\x88\xf9'
        bool_1 = True
        str_0 = "\x0bm}8W%Tt]`33kr'A6A>"
        plugin_loader_0 = module_0.PluginLoader(bool_0, bytes_0, bool_1, str_0)
        var_0 = plugin_loader_0.find_plugin_with_context(plugin_load_context_0, plugin_load_context_1, plugin_load_context_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = '/root/.ansible/plugins/doc_fragments/windows'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'c'
        plugin_path_context_0 = None
        var_0 = module_0.get_shell_plugin(plugin_path_context_0, str_0)
        bool_0 = True
        dict_0 = {}
        float_0 = -882.0
        set_0 = {str_0, var_0, plugin_path_context_0, float_0}
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, dict_0, float_0, set_0)
        var_1 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        float_0 = 1560.458701
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        set_0 = {plugin_load_context_0, float_0, bool_0, float_0}
        complex_0 = None
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, bool_0, plugin_load_context_1, complex_0, plugin_load_context_0)
        bytes_0 = b'\xa2\xc0EoK\xf7\x9e'
        var_0 = plugin_load_context_1.record_deprecation(set_0, jinja2_loader_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'E'
        set_0 = {str_0, str_0}
        plugin_path_context_0 = module_0.PluginPathContext(str_0, set_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        float_0 = 100.0
        bool_0 = False
        plugin_loader_0 = module_0.PluginLoader(float_0, bool_0, str_0, plugin_path_context_0)
        var_0 = plugin_loader_0.get(plugin_load_context_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        tuple_0 = ()
        list_0 = []
        var_0 = module_0.add_all_plugin_dirs(list_0)
        int_0 = 1736
        list_1 = [tuple_0, tuple_0]
        float_0 = 1000.0
        plugin_loader_0 = module_0.PluginLoader(tuple_0, int_0, list_1, float_0)
        var_1 = plugin_loader_0.has_plugin(bool_0)
        dict_0 = {int_0: int_0}
        var_2 = plugin_loader_0.has_plugin(dict_0)
        bytes_0 = b'6\xbe\x15\xb1\xadjz\xec'
        var_3 = plugin_loader_0.add_directory(bytes_0)
        var_4 = plugin_loader_0.has_plugin(bool_0)
        var_5 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '_run'
        bytes_0 = b'\n]\x9d\xed\'8\xcc"\xc8\x05<Q"i\x90@\x04\x06'
        str_1 = '$O\n.IK?\x0c@h\\qB x1n'
        list_0 = []
        bool_0 = False
        str_2 = '"Tt\nHY~SKCk\\v.'
        plugin_loader_0 = module_0.PluginLoader(bytes_0, list_0, bool_0, str_1, str_2)
        var_0 = plugin_loader_0.add_directory(str_0)
        var_1 = module_0.get_shell_plugin(str_2)
    except BaseException:
        pass

def test_case_18():
    try:
        tuple_0 = ()
        int_0 = 4096
        str_0 = '&'
        str_1 = 'base'
        str_2 = 'Z('
        dict_0 = {str_0: str_0, str_0: tuple_0, str_1: tuple_0, str_2: str_2}
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, dict_0)
        list_0 = [tuple_0, int_0, tuple_0, plugin_path_context_0]
        str_3 = '=x\tPakY\nkD;'
        str_4 = 'Resolving dependencies...'
        dict_1 = {}
        set_0 = set()
        float_0 = -239.976
        str_5 = 'm+u'
        bytes_0 = b'8\xb0\x9b\xc3\xb9\xd1N\xc5\xf6\x83!'
        plugin_loader_0 = module_0.PluginLoader(str_0, set_0, str_5, bytes_0, list_0)
        var_0 = plugin_loader_0.print_paths()
        plugin_loader_1 = module_0.PluginLoader(str_3, str_4, dict_1, set_0, float_0)
        var_1 = plugin_loader_1.add_directory(list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'iC-U)h]Z3!g'
        str_1 = "EqA'3JUpYy;qp\t"
        int_0 = -2873
        list_0 = [int_0, int_0]
        float_0 = 294.2312
        str_2 = '{j&p?iw'
        bool_0 = False
        plugin_path_context_0 = module_0.PluginPathContext(bool_0, int_0)
        jinja2_loader_0 = module_0.Jinja2Loader(int_0, list_0, float_0, str_0, str_2, plugin_path_context_0)
        var_0 = jinja2_loader_0.find_plugin(str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'E'
        set_0 = {str_0, str_0}
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = 1740
        str_1 = '6qW'
        plugin_load_context_1 = module_0.PluginLoadContext()
        get_with_context_result_0 = None
        float_0 = 528.4123
        tuple_0 = (str_0,)
        float_1 = 624.37346
        plugin_path_context_0 = module_0.PluginPathContext(tuple_0, float_1)
        bytes_0 = b'\xc6\xb5\x88\x16<\xfexpm\xc3p\xda\xc1\x00\x10u\xdb\xdd\xf4\x7f'
        float_2 = 100.0
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_path_context_0, str_1, bytes_0, float_2, int_0)
        int_1 = 321
        bytes_1 = None
        jinja2_loader_1 = module_0.Jinja2Loader(float_0, jinja2_loader_0, int_1, bytes_1, float_0, jinja2_loader_0)
        dict_0 = {}
        str_2 = "8c-s$z]D#|D,qDh'"
        jinja2_loader_2 = module_0.Jinja2Loader(get_with_context_result_0, dict_0, str_1, set_0, str_2)
        var_0 = jinja2_loader_2.find_plugin(jinja2_loader_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '_'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '37,E'
        bool_0 = False
        var_0 = module_0.add_all_plugin_dirs(bool_0)
        plugin_path_context_0 = None
        var_1 = module_0.get_shell_plugin(plugin_path_context_0, str_0)
        jinja2_loader_0 = None
        int_0 = 2749
        bytes_0 = b'B\xf0Kw\xcd\x8d\x9b\xe2\xee\x10R\xa4Ag\xc4\x07'
        bool_1 = True
        list_0 = [jinja2_loader_0, jinja2_loader_0, bytes_0, bool_1, int_0]
        get_with_context_result_0 = module_0.get_with_context_result(*list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'Q'
        plugin_path_context_0 = None
        bool_0 = True
        str_1 = '/input/ansible/plugins/shell/windows'
        list_0 = [str_0]
        float_0 = 1798.64689
        bytes_0 = b'b\x973\xacKk,\xe1|B\x9fD\x94\xb5\xe5\xb6\xc0\xc7'
        plugin_load_context_0 = None
        str_2 = '/usr/share/ansible/plugins/doc_fragments/windows'
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, plugin_load_context_0, plugin_path_context_0, str_2)
        dict_0 = {str_0: list_0}
        plugin_loader_0 = module_0.PluginLoader(float_0, jinja2_loader_0, plugin_load_context_0, plugin_path_context_0, dict_0)
        jinja2_loader_1 = module_0.Jinja2Loader(bool_0, str_1, str_0, list_0, plugin_loader_0)
        var_0 = jinja2_loader_0.all()
        set_0 = {bool_0, plugin_path_context_0}
        var_1 = module_0.get_shell_plugin(set_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'L'
        bool_0 = False
        var_0 = module_0.add_all_plugin_dirs(bool_0)
        plugin_path_context_0 = None
        var_1 = module_0.get_shell_plugin(plugin_path_context_0, str_0)
        jinja2_loader_0 = None
        str_1 = 'vm.stats.vm.v_page_count'
        var_2 = module_0.get_shell_plugin(str_1, jinja2_loader_0)
    except BaseException:
        pass