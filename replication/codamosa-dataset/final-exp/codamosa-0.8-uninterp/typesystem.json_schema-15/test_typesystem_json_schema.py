# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3

def test_case_0():
    pass

def test_case_1():
    dict_0 = None
    dict_1 = {dict_0: dict_0, dict_0: dict_0}
    field_0 = module_0.from_json_schema(dict_1)

def test_case_2():
    bool_0 = True
    field_0 = module_0.from_json_schema(bool_0)

def test_case_3():
    schema_definitions_0 = module_1.SchemaDefinitions()
    dict_0 = {}
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)

def test_case_4():
    dict_0 = {}
    tuple_0 = module_0.get_valid_types(dict_0)

def test_case_5():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'string'
    str_3 = {str_1: str_2}
    str_4 = 'integer'
    str_5 = {str_1: str_4}
    str_6 = [str_3, str_5]
    str_7 = {str_0: str_6}
    var_0 = None
    field_0 = module_0.any_of_from_json_schema(str_7, var_0)

def test_case_6():
    str_0 = '$ref'
    str_1 = '#/definitions/name'
    str_2 = {str_0: str_1}
    field_0 = module_0.from_json_schema(str_2)

def test_case_7():
    field_0 = module_2.Field()
    dict_0 = module_0.get_standard_properties(field_0)

def test_case_8():
    str_0 = 'HuiM!U4na'
    dict_0 = {str_0: str_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_9():
    schema_definitions_0 = module_1.SchemaDefinitions()
    var_0 = module_0.to_json_schema(schema_definitions_0)

def test_case_10():
    bool_0 = True
    string_0 = module_2.String()
    var_0 = module_0.to_json_schema(string_0)

def test_case_11():
    str_0 = 'C)B'
    dict_0 = {str_0: str_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    schema_definitions_1 = module_1.SchemaDefinitions()
    field_1 = module_0.from_json_schema(dict_0, schema_definitions_1)

def test_case_12():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'string'
    str_4 = {}
    str_5 = {str_0: str_4, str_1: str_3, str_2: str_4}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.if_then_else_from_json_schema(str_5, schema_definitions_0)

def test_case_13():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'ele'
    str_3 = 'type'
    str_4 = 'string'
    str_5 = {str_3: str_4}
    str_6 = {str_0: str_4, str_1: str_5, str_2: str_4}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.if_then_else_from_json_schema(str_6, schema_definitions_0)
    var_0 = str(field_0)
    validation_result_0 = field_0.validate_or_error(str_6)

def test_case_14():
    never_match_0 = module_3.NeverMatch()
    var_0 = module_0.to_json_schema(never_match_0)
    string_0 = module_2.String()
    var_1 = module_0.to_json_schema(string_0)

def test_case_15():
    str_0 = 'type'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    field_0 = module_0.from_json_schema(str_2)
    str_3 = 'enum'
    str_4 = ''
    str_5 = {str_0: str_1, str_3: str_1}
    str_6 = 'const'
    str_7 = {str_0: str_1, str_6: str_4}
    field_1 = module_0.from_json_schema(str_7)
    const_0 = module_2.Const(str_4)
    str_8 = '$ref'
    str_9 = '#/foo'
    str_10 = {str_8: str_9}
    field_2 = module_0.from_json_schema(str_10)
    reference_0 = module_1.Reference(str_9)
    str_11 = 'aqAOH'
    str_12 = {str_8: str_9}
    str_13 = [str_12]
    str_14 = {str_0: str_1, str_11: str_13}
    field_3 = module_0.from_json_schema(str_14)
    reference_1 = module_1.Reference(str_9)
    string_0 = module_2.String()
    all_of_0 = module_3.AllOf(str_5)
    str_15 = 'anyOf'
    str_16 = {str_0: str_1, str_15: str_6}
    field_4 = module_0.from_json_schema(str_16)
    string_1 = module_2.String()
    var_0 = module_0.to_json_schema(field_1)

def test_case_16():
    str_0 = '$ref'
    str_1 = 'type'
    str_2 = 'enum'
    str_3 = 'default'
    str_4 = '#/definitions/myRef'
    str_5 = 'string'
    str_6 = 'bar'
    str_7 = 'foo'
    str_8 = [str_6, str_7]
    str_9 = {str_0: str_4, str_1: str_5, str_2: str_8, str_3: str_6}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.enum_from_json_schema(str_9, schema_definitions_0)

def test_case_17():
    str_0 = 'oneOf'
    str_1 = 'default'
    str_2 = 'type'
    str_3 = 'string'
    str_4 = {str_2: str_3}
    str_5 = 'number'
    str_6 = {str_2: str_5}
    str_7 = [str_4, str_6]
    str_8 = 'Default string value'
    str_9 = {str_0: str_7, str_1: str_8}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.one_of_from_json_schema(str_9, schema_definitions_0)
    var_0 = field_0.one_of
    var_1 = len(var_0)

def test_case_18():
    str_0 = 'not'
    str_1 = 'type'
    str_2 = 'string'
    str_3 = {str_1: str_2}
    str_4 = {str_0: str_3}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.not_from_json_schema(str_4, schema_definitions_0)
    str_5 = {str_1: str_2}
    str_6 = {str_0: str_5}
    schema_definitions_1 = module_1.SchemaDefinitions()
    field_1 = module_0.not_from_json_schema(str_6, schema_definitions_1)
    var_0 = field_1.negated

def test_case_19():
    integer_0 = module_2.Integer()
    var_0 = module_0.to_json_schema(integer_0)
    string_0 = module_2.String()
    var_1 = module_0.to_json_schema(string_0)

def test_case_20():
    str_0 = 'type'
    str_1 = 'properties'
    str_2 = 'object'
    str_3 = 'string'
    str_4 = 'number'
    str_5 = {str_0: str_3}
    str_6 = {str_0: str_4}
    str_7 = {str_0: str_2}
    str_8 = {str_3: str_5, str_4: str_6, str_2: str_7}
    str_9 = {str_0: str_2, str_1: str_8}
    field_0 = module_0.from_json_schema(str_9)

def test_case_21():
    str_0 = 'if'
    str_1 = 'properties'
    str_2 = 'required'
    str_3 = 'foo'
    str_4 = 'type'
    str_5 = 'string'
    str_6 = {str_4: str_5}
    str_7 = {str_3: str_6}
    str_8 = {str_1: str_7, str_2: str_1}
    str_9 = {str_0: str_8}
    var_0 = {}
    field_0 = module_0.if_then_else_from_json_schema(str_9, var_0)
    var_1 = {}
    any_0 = field_0.validate(var_1)
    str_10 = 'bar'
    str_11 = {str_3: str_10}
    any_1 = field_0.validate(str_11)
    int_0 = 1
    int_1 = {str_3: int_0}
    any_2 = field_0.validate(int_1)

def test_case_22():
    any_0 = module_2.Any()
    var_0 = module_0.to_json_schema(any_0)
    int_0 = 42
    int_1 = 84
    int_2 = 6
    integer_0 = module_2.Integer(minimum=int_0, maximum=int_1, multiple_of=int_2)
    var_1 = module_0.to_json_schema(integer_0)

def test_case_23():
    any_0 = module_2.Any()
    var_0 = module_0.to_json_schema(any_0)
    never_match_0 = module_3.NeverMatch()
    var_1 = module_0.to_json_schema(never_match_0)
    int_0 = 42
    int_1 = 84
    int_2 = 6
    integer_0 = module_2.Integer(minimum=int_0, maximum=int_1, multiple_of=int_2)
    var_2 = module_0.to_json_schema(integer_0)
    int_3 = 0
    int_4 = 10
    bool_0 = True
    str_0 = ''
    string_0 = module_2.String(allow_blank=bool_0, max_length=int_4, min_length=int_3)
    var_3 = module_0.to_json_schema(string_0)

def test_case_24():
    any_0 = module_2.Any()
    never_match_0 = module_3.NeverMatch()
    var_0 = module_0.to_json_schema(never_match_0)
    choice_0 = module_2.Choice()
    var_1 = module_0.to_json_schema(choice_0)
    string_0 = module_2.String()
    dict_0 = {}
    schema_definitions_0 = module_1.SchemaDefinitions(**dict_0)
    bool_0 = False
    field_0 = module_0.from_json_schema(bool_0, schema_definitions_0)
    bool_1 = False
    field_1 = module_2.Field(allow_null=bool_1)