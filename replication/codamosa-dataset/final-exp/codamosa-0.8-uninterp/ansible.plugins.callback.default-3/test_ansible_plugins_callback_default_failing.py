# Automatically generated by Pynguin.
import ansible.plugins.callback.default as module_0

def test_case_0():
    try:
        callback_module_0 = module_0.CallbackModule()
        float_0 = -436.0
        var_0 = callback_module_0.set_options(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 460
        str_0 = '}zdY"J'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_failed(str_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_ok(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Kme\rJ*\n,`[`C8dzi\x0c|H3'
        set_0 = {str_0, str_0}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_skipped(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'<\xab1s\x9e?%\xf1\xbe\x16ccw\xbe'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_unreachable(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_matched()
        bytes_0 = None
        callback_module_1 = module_0.CallbackModule()
        int_0 = 2982
        var_1 = callback_module_1.v2_playbook_on_notify(bytes_0, int_0)
        str_0 = "bL\x0b~hs'r"
        var_2 = callback_module_1.v2_playbook_on_handler_task_start(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_cleanup_task_start(callback_module_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = None
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_handler_task_start(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = True
        set_0 = {int_0, int_0, int_0}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_start(set_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -1532
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_play_start(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_on_file_diff(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        callback_module_0 = module_0.CallbackModule()
        list_0 = [bool_0, callback_module_0, callback_module_0, callback_module_0]
        var_0 = callback_module_0.v2_runner_item_on_ok(list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '-kHg:P8j4DavWP}@'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_item_on_failed(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'GKGrC(|o6]'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_item_on_skipped(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 0.2
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_include(float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = None
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_stats(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_start(callback_module_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '4z"py]$6^0:'
        set_0 = {str_0}
        list_0 = [set_0]
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_notify(set_0, list_0)
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_1.v2_runner_retry(callback_module_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'q*%>_'
        callback_module_0 = module_0.CallbackModule()
        set_0 = {str_0, callback_module_0}
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_on_async_poll(set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\xaf\xa7\xa7\xf2\xadb\xd71\xf3\xeb\xb6\x13'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_async_failed(bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'icmp_type'
        set_0 = set()
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_notify(str_0, set_0)
        bytes_0 = b'z(\xe5\xe4\xb6p`try\x81\xf9.'
        list_0 = [bytes_0, bytes_0]
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_1.v2_playbook_on_task_start(bytes_0, list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'NWJu}j#qG\rSQ7'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_async_ok(str_0)
    except BaseException:
        pass