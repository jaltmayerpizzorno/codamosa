# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    pass

def test_case_1():
    tuple_0 = ()
    first_0 = module_0.First(tuple_0)

def test_case_2():
    bool_0 = False
    one_0 = module_0.One(bool_0)
    str_0 = one_0.__str__()
    str_1 = one_0.__str__()
    int_0 = 725
    first_0 = module_0.First(int_0)
    sum_0 = module_0.Sum(first_0)
    str_2 = sum_0.__str__()

def test_case_3():
    int_0 = 1
    min_0 = module_0.Min(int_0)
    int_1 = 2
    str_0 = "'ik0IG|*<p~y:>"
    last_0 = module_0.Last(str_0)
    all_0 = module_0.All(last_0)
    str_1 = all_0.__str__()
    min_1 = module_0.Min(int_1)
    var_0 = min_0.concat(min_1)
    var_1 = var_0.value
    min_2 = module_0.Min(int_1)
    min_3 = module_0.Min(int_0)
    var_2 = min_2.concat(min_3)
    var_3 = var_2.value

def test_case_4():
    dict_0 = {}
    all_0 = module_0.All(dict_0)
    set_0 = set()
    last_0 = module_0.Last(set_0)
    first_0 = module_0.First(last_0)
    str_0 = '%XCwUQH'
    tuple_0 = (last_0, first_0, str_0, set_0)
    all_1 = module_0.All(tuple_0)
    bytes_0 = b'\xecY\xb0\xcc\xea\x1a\xde\xdd\x15S\x83\xe1'
    all_2 = module_0.All(bytes_0)
    all_3 = all_2.concat(all_1)
    all_4 = all_3.concat(all_0)
    last_1 = module_0.Last(all_4)
    first_1 = module_0.First(last_1)

def test_case_5():
    bytes_0 = b'\xfdYy"'
    float_0 = -281.69
    min_0 = module_0.Min(float_0)
    tuple_0 = (bytes_0, min_0)
    float_1 = 2150.7
    list_0 = [float_1, float_1]
    sum_0 = module_0.Sum(list_0)
    first_0 = module_0.First(sum_0)
    var_0 = first_0.concat(tuple_0)

def test_case_6():
    str_0 = ']'
    min_0 = module_0.Min(str_0)
    var_0 = min_0.concat(min_0)
    int_0 = -1626
    map_0 = module_0.Map(int_0)
    str_1 = map_0.__str__()

def test_case_7():
    int_0 = -1013
    min_0 = module_0.Min(int_0)
    max_0 = module_0.Max(min_0)
    str_0 = '_q;sLtuPlnM {/F'
    sum_0 = module_0.Sum(str_0)
    tuple_0 = (int_0, max_0, sum_0)
    sum_1 = module_0.Sum(tuple_0)
    max_1 = module_0.Max(sum_1)
    str_1 = max_1.__str__()

def test_case_8():
    int_0 = 1
    max_0 = module_0.Max(int_0)
    int_1 = 2
    max_1 = module_0.Max(int_1)
    var_0 = max_0.concat(max_1)

def test_case_9():
    int_0 = 1
    min_0 = module_0.Min(int_0)
    str_0 = min_0.__str__()
    int_1 = -1
    min_1 = module_0.Min(int_1)
    var_0 = min_0.concat(min_1)
    var_1 = min_1.concat(min_0)
    int_2 = -1
    min_2 = module_0.Min(int_2)

def test_case_10():
    int_0 = 1
    min_0 = module_0.Min(int_0)
    var_0 = min_0.concat(min_0)

def test_case_11():
    dict_0 = {}
    all_0 = module_0.All(dict_0)
    set_0 = set()
    last_0 = module_0.Last(set_0)
    first_0 = module_0.First(last_0)
    str_0 = '%XwUQH'
    tuple_0 = (last_0, first_0, str_0, set_0)
    all_1 = module_0.All(tuple_0)
    map_0 = module_0.Map(dict_0)
    str_1 = map_0.__str__()
    int_0 = True
    min_0 = module_0.Min(int_0)
    semigroup_0 = module_0.Semigroup(min_0)
    max_0 = module_0.Max(semigroup_0)
    one_0 = None
    var_0 = map_0.concat(one_0)

def test_case_12():
    str_0 = 'a'
    str_1 = 'b'
    int_0 = 1
    sum_0 = module_0.Sum(int_0)
    int_1 = 2
    sum_1 = module_0.Sum(int_1)
    sum_2 = {str_0: sum_0, str_1: sum_1}
    map_0 = module_0.Map(sum_2)
    sum_3 = module_0.Sum(int_0)
    sum_4 = sum_0.concat(sum_1)
    sum_5 = {str_0: sum_3, str_1: sum_4}
    map_1 = module_0.Map(sum_5)
    var_0 = map_0.concat(map_1)
    sum_6 = module_0.Sum(int_1)
    int_2 = 4
    sum_7 = module_0.Sum(int_2)
    map_2 = module_0.Map(sum_7)

def test_case_13():
    str_0 = 'x'
    str_1 = 'y'
    str_2 = 'z'
    bool_0 = True
    all_0 = module_0.All(bool_0)
    first_0 = module_0.First(bool_0)
    int_0 = 4
    max_0 = module_0.Max(int_0)
    var_0 = {str_0: all_0, str_1: first_0, str_2: max_0}
    map_0 = module_0.Map(var_0)
    bool_1 = False
    all_1 = module_0.All(bool_1)
    int_1 = 2
    first_1 = module_0.First(int_1)
    max_1 = module_0.Max(bool_0)
    var_1 = {str_0: all_1, str_1: first_1, str_2: max_1}
    map_1 = module_0.Map(var_1)
    var_2 = map_0.concat(map_1)
    bool_2 = False
    all_2 = module_0.All(bool_2)
    max_2 = module_0.Max(bool_0)
    var_3 = {str_0: all_2, str_1: first_0, str_2: max_2}
    map_2 = module_0.Map(var_3)

def test_case_14():
    int_0 = 1
    min_0 = module_0.Min(int_0)
    int_1 = -1
    min_1 = module_0.Min(int_1)
    var_0 = min_0.concat(min_1)
    min_2 = module_0.Min(int_0)