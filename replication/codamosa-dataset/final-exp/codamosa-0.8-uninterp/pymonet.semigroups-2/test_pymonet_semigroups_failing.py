# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        str_0 = '%]G1W'
        str_1 = 'j*{g'
        semigroup_0 = module_0.Semigroup(str_1)
        bool_0 = semigroup_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 204.93
        semigroup_0 = module_0.Semigroup(float_0)
        float_1 = -1104.1
        last_0 = module_0.Last(float_1)
        var_0 = semigroup_0.fold(last_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '~R\\c'
        sum_0 = module_0.Sum(str_0)
        bytes_0 = b'\xad\xac\xa4\xac\x9dw\x98\xa6_ZR\x9a'
        last_0 = module_0.Last(bytes_0)
        sum_1 = module_0.Sum(last_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = None
        one_0 = module_0.One(dict_0)
        float_0 = -209.0
        var_0 = one_0.concat(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 175.0
        min_0 = module_0.Min(float_0)
        list_0 = [float_0]
        map_0 = None
        int_0 = -1173
        list_1 = None
        first_0 = module_0.First(list_1)
        tuple_0 = (int_0, first_0)
        list_2 = [tuple_0]
        last_0 = module_0.Last(list_2)
        tuple_1 = (map_0, last_0)
        last_1 = module_0.Last(tuple_1)
        var_0 = last_1.concat(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 13
        int_1 = -301
        str_0 = 'N\nk%R\nek,rm(xQ\r$4;'
        last_0 = module_0.Last(str_0)
        dict_0 = {int_1: int_1, int_1: last_0, int_1: last_0}
        semigroup_0 = module_0.Semigroup(dict_0)
        map_0 = module_0.Map(semigroup_0)
        var_0 = map_0.concat(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        last_0 = module_0.Last(bool_0)
        set_0 = None
        str_0 = last_0.__str__()
        str_1 = None
        all_0 = module_0.All(str_1)
        all_1 = all_0.concat(all_0)
        str_2 = last_0.__str__()
        tuple_0 = (set_0, str_1, all_0)
        str_3 = all_0.__str__()
        map_0 = module_0.Map(tuple_0)
        var_0 = map_0.concat(last_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ']'
        max_0 = None
        first_0 = module_0.First(max_0)
        str_1 = '$'
        one_0 = module_0.One(str_1)
        var_0 = one_0.concat(first_0)
        min_0 = module_0.Min(str_0)
        var_1 = min_0.concat(min_0)
        semigroup_0 = module_0.Semigroup(min_0)
        bool_0 = semigroup_0.__eq__(min_0)
    except BaseException:
        pass