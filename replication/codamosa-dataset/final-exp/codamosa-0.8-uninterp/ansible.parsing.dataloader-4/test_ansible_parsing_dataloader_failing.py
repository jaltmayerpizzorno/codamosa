# Automatically generated by Pynguin.
import ansible.parsing.dataloader as module_0

def test_case_0():
    try:
        data_loader_0 = module_0.DataLoader()
        set_0 = {data_loader_0, data_loader_0}
        var_0 = data_loader_0.load_from_file(set_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = "L3%eY$'G96(\tcaJ4*YXX"
        str_1 = "V\\<' s"
        set_0 = {str_1, str_1}
        int_0 = 256
        var_0 = data_loader_0.path_dwim_relative(str_0, str_1, set_0, int_0)
        float_0 = 4190.0
        var_1 = data_loader_0.is_directory(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'role_path'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.list_directory(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.is_executable(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = None
        tuple_0 = (dict_0,)
        list_0 = [dict_0]
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.set_basedir(list_0)
        data_loader_1 = module_0.DataLoader()
        var_1 = data_loader_1.is_executable(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_basedir()
        int_0 = -2440
        var_1 = data_loader_0.get_real_file(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        data_loader_0 = module_0.DataLoader()
        display_0 = None
        list_0 = [data_loader_0]
        str_0 = ')23k]g'
        var_0 = data_loader_0.path_dwim_relative_stack(display_0, list_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b"\xb0\xc2\x9b \xdc\x80\xa3\x95\xee;[8\xa5\xa9`'\x1bY\xb6\xba"
        data_loader_0 = module_0.DataLoader()
        int_0 = None
        data_loader_1 = module_0.DataLoader()
        var_0 = data_loader_1.path_dwim_relative_stack(bytes_0, data_loader_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        data_loader_0 = module_0.DataLoader()
        display_0 = None
        list_0 = [data_loader_0]
        str_0 = '/6zc\\9+Gl2tUYw:\t'
        var_0 = data_loader_0.path_dwim_relative_stack(display_0, list_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_real_file(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '/tmp/test.yml'
        var_0 = data_loader_0.get_real_file(str_0, str_0)
        bool_0 = False
        set_0 = set()
        var_1 = data_loader_0.path_dwim_relative_stack(bool_0, set_0, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = 'fake_file'
        var_0 = data_loader_0.get_real_file(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        data_loader_0 = module_0.DataLoader()
        int_0 = -2440
        var_0 = data_loader_0.get_real_file(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = 'Snv6X/$y%rF}'
        bool_0 = False
        set_0 = set()
        float_0 = None
        var_0 = data_loader_0.path_dwim_relative_stack(str_0, bool_0, set_0, float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Tq0<s9vy3WxpXm'
        dict_0 = None
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.load_from_file(str_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        tuple_0 = ()
        str_0 = '\x0bk'
        data_loader_0 = module_0.DataLoader()
        str_1 = '\x0cU:EU'
        int_0 = -2542
        var_0 = data_loader_0.path_dwim_relative_stack(str_1, str_0, tuple_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '/tmp/test.yml'
        tuple_0 = None
        var_0 = data_loader_0.get_real_file(str_0, tuple_0)
        bytes_0 = b'\xca\xc6Nc\x8a'
        str_1 = ''
        str_2 = "_kr3tf*Qa,B/MZD^l'"
        var_1 = data_loader_0.path_dwim_relative_stack(bytes_0, str_1, str_0, str_2)
        float_0 = -1812.3
        data_loader_1 = module_0.DataLoader()
        var_2 = data_loader_1.get_real_file(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = "(m2d'dXIONFEB"
        data_loader_0 = module_0.DataLoader()
        str_1 = '/tmp/test.yml'
        tuple_0 = None
        var_0 = data_loader_0.cleanup_tmp_file(tuple_0)
        var_1 = data_loader_0.cleanup_all_tmp_files()
        str_2 = 'a\n'
        var_2 = data_loader_0.find_vars_files(str_2, str_0, str_1)
        bytes_0 = b''
        bool_0 = False
        var_3 = data_loader_0.load_from_file(bytes_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '!kx'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0]
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        data_loader_1 = module_0.DataLoader()
        var_1 = data_loader_1.set_basedir(list_0)
        tuple_0 = ()
        var_2 = data_loader_1.cleanup_tmp_file(tuple_0)
        str_1 = 'x_/VB<RM^vZPL1*'
        str_2 = ''
        str_3 = 'aaYT$,^d h'
        var_3 = data_loader_0.path_dwim_relative(str_1, str_2, str_3)
        data_loader_2 = module_0.DataLoader()
        data_loader_3 = module_0.DataLoader()
        data_loader_4 = module_0.DataLoader()
        data_loader_5 = module_0.DataLoader()
        bytes_0 = b'~\x01\x9c\xf6FO\x80\xc8\xad\xe3\xc9,I\x0c\xb7c'
        var_4 = data_loader_0.is_executable(bytes_0)
    except BaseException:
        pass

def test_case_19():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = 'yRC?}1g^'
        bytes_0 = b''
        bool_0 = True
        var_0 = data_loader_0.load_from_file(bytes_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        data_loader_0 = module_0.DataLoader()
        display_0 = None
        list_0 = [data_loader_0]
        str_0 = '~m3k]g'
        var_0 = data_loader_0.path_dwim_relative_stack(display_0, list_0, str_0)
    except BaseException:
        pass