# Automatically generated by Pynguin.
import pathlib as module_0
import isort.exceptions as module_1
import builtins as module_2

def test_case_0():
    pass

def test_case_1():
    path_0 = module_0.Path()
    str_0 = 'em^O2?*Et,50"+/$-'
    invalid_settings_path_0 = module_1.InvalidSettingsPath(str_0)
    unsupported_encoding_0 = module_1.UnsupportedEncoding(path_0)

def test_case_2():
    str_0 = 'Zoym,wW/L)O>hd5\x0cy@'
    str_1 = '\t]UweBI'
    str_2 = '0_X\\l; K6'
    file_skip_setting_0 = module_1.FileSkipSetting(str_2)
    missing_section_0 = module_1.MissingSection(str_0, str_1)
    str_3 = None
    existing_syntax_errors_0 = module_1.ExistingSyntaxErrors(str_3)
    str_4 = '--lbt'
    file_skipped_0 = module_1.FileSkipped(str_4, str_4)
    unsupported_encoding_0 = module_1.UnsupportedEncoding(str_2)

def test_case_3():
    str_0 = 'i$.V'
    file_skip_comment_0 = module_1.FileSkipComment(str_0)
    existing_syntax_errors_0 = module_1.ExistingSyntaxErrors(str_0)
    str_1 = ' returned '
    assignments_format_mismatch_0 = module_1.AssignmentsFormatMismatch(str_1)
    str_2 = 'C;'
    str_3 = '*.{py}'
    introduced_syntax_errors_0 = module_1.IntroducedSyntaxErrors(str_3)
    formatting_plugin_does_not_exist_0 = module_1.FormattingPluginDoesNotExist(str_2)
    invalid_settings_path_0 = module_1.InvalidSettingsPath(str_3)

def test_case_4():
    str_0 = '%*`az=~@Xql'
    file_skip_setting_0 = module_1.FileSkipSetting(str_0)

def test_case_5():
    str_0 = ',1<al)W68m+&V'
    file_skip_comment_0 = module_1.FileSkipComment(str_0)

def test_case_6():
    str_0 = 'Sn2]0\x0b~xoDZSIbF8'
    file_skip_comment_0 = module_1.FileSkipComment(str_0)
    type_0 = None
    literal_sort_type_mismatch_0 = module_1.LiteralSortTypeMismatch(type_0, type_0)
    str_1 = ',1cI'
    invalid_settings_path_0 = module_1.InvalidSettingsPath(str_1)
    str_2 = None
    str_3 = '21(fRU!(/4Io*v`hUH&'
    profile_does_not_exist_0 = module_1.ProfileDoesNotExist(str_3)
    profile_does_not_exist_1 = module_1.ProfileDoesNotExist(str_2)
    invalid_settings_path_1 = module_1.InvalidSettingsPath(str_1)
    str_4 = ''
    file_skip_comment_1 = module_1.FileSkipComment(str_4)

def test_case_7():
    str_0 = 'aF^*t%'
    str_1 = 't7'
    missing_section_0 = module_1.MissingSection(str_0, str_1)
    str_2 = None
    exception_0 = module_2.Exception()
    literal_parsing_failure_0 = module_1.LiteralParsingFailure(str_1, exception_0)
    unsupported_encoding_0 = module_1.UnsupportedEncoding(str_2)
    str_3 = 'P}k @Mu">9#I>/c Mm'
    file_skipped_0 = module_1.FileSkipped(str_3, str_1)
    str_4 = "'c%$N%@(faae2Mr"
    literal_parsing_failure_1 = module_1.LiteralParsingFailure(str_4, exception_0)
    str_5 = ' paths'
    existing_syntax_errors_0 = module_1.ExistingSyntaxErrors(str_5)
    missing_section_1 = module_1.MissingSection(str_2, str_5)
    introduced_syntax_errors_0 = module_1.IntroducedSyntaxErrors(str_0)

def test_case_8():
    str_0 = 'foo'
    str_1 = 'value'
    str_2 = 'source'
    str_3 = 'bar'
    str_4 = 'baz'
    str_5 = {str_1: str_3, str_2: str_4}
    str_6 = {str_0: str_5}
    unsupported_settings_0 = module_1.UnsupportedSettings(str_6)

def test_case_9():
    str_0 = ''
    unsupported_encoding_0 = module_1.UnsupportedEncoding(str_0)

def test_case_10():
    str_0 = '9\\'
    str_1 = '2u(7I/J'
    missing_section_0 = module_1.MissingSection(str_0, str_1)