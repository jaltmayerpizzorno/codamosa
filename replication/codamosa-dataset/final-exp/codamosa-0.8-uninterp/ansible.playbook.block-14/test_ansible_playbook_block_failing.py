# Automatically generated by Pynguin.
import ansible.playbook.block as module_0
import ansible.playbook.role as module_1

def test_case_0():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        set_0 = None
        tuple_0 = (set_0,)
        int_0 = -2408
        block_0 = module_0.Block(bool_0, dict_0, tuple_0, int_0)
        var_0 = block_0.serialize()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 161.964972
        str_0 = 'R\r:F'
        block_0 = module_0.Block(float_0, str_0)
        var_0 = block_0.serialize()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = None
        str_0 = 'rhnplugin'
        block_0 = module_0.Block(str_0)
        var_0 = block_0.__eq__(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        bytes_0 = b'\x85\xa2\xbe\xb2\xd0E\xb2\x90\xe0\xa0PU'
        set_1 = {bytes_0}
        list_0 = [bytes_0, set_0, set_1]
        block_0 = module_0.Block(list_0)
        var_0 = block_0.get_vars()
        str_0 = ' create and open a file in an editor that will be encrypted with the provided vault secret when closed'
        block_1 = module_0.Block(bytes_0, set_1, str_0)
        var_1 = block_1.__ne__(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = None
        block_0 = module_0.Block()
        var_0 = block_0.__repr__()
        var_1 = block_0.load(set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'?X\xc6p\x8a`)6\xd9\xc2f\x7f\xcb\x0c\x989\xd6'
        set_0 = set()
        block_0 = module_0.Block(set_0)
        bytes_1 = b'\xbd\x00'
        var_0 = block_0.load(block_0, bytes_1, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'required_if'
        float_0 = -847.919689
        list_0 = [float_0, float_0, str_0, str_0]
        block_0 = module_0.Block(str_0, float_0, list_0)
        var_0 = block_0.serialize()
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
        block_0 = module_0.Block(set_0)
        str_0 = '--sleep'
        block_1 = module_0.Block(block_0, str_0)
        var_0 = block_1.all_parents_static()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -397.137
        list_0 = [float_0, float_0]
        tuple_0 = ()
        block_0 = module_0.Block(float_0, list_0, list_0, tuple_0)
        var_0 = block_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xadr'
        block_0 = module_0.Block()
        int_0 = 1695
        str_0 = "2df,nVo$'I\x0c"
        block_1 = module_0.Block(int_0, str_0, block_0, str_0)
        var_0 = block_1.copy(bytes_0)
        int_1 = 3308
        block_2 = module_0.Block(str_0, int_1)
        var_1 = block_2.serialize()
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 1880.0
        bytes_0 = b'+\x9b\xd9h`S\x1b}Vt\xa7\x82\xdc\xc7\x07|'
        set_0 = {bytes_0}
        tuple_0 = (set_0,)
        int_0 = 261
        block_0 = module_0.Block(bytes_0, tuple_0, int_0)
        tuple_1 = (float_0, block_0)
        block_1 = module_0.Block(tuple_1)
        bool_0 = True
        block_2 = module_0.Block(bool_0)
        var_0 = block_2.__repr__()
        var_1 = block_1.copy()
        var_2 = block_1.get_vars()
        str_0 = 'H#'
        bool_1 = True
        block_3 = module_0.Block(str_0, bool_1)
        bool_2 = True
        var_3 = block_3.set_loader(bool_2)
    except BaseException:
        pass

def test_case_11():
    try:
        block_0 = module_0.Block()
        var_0 = block_0.is_block(block_0)
        block_1 = module_0.Block(block_0, block_0, block_0)
        var_1 = block_1.get_include_params()
        str_0 = 'normal'
        int_0 = -4830
        dict_0 = {}
        var_2 = block_0.get_first_parent_include()
        block_2 = module_0.Block(int_0, dict_0, dict_0)
        var_3 = block_0.__ne__(block_0)
        var_4 = block_0.filter_tagged_tasks(str_0)
        block_3 = module_0.Block()
        var_5 = block_3.__eq__(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'block'
        str_1 = 'tasks'
        str_2 = 'name'
        str_3 = 'action'
        str_4 = 'args'
        str_5 = 'B'
        str_6 = 'shell'
        str_7 = 'hdi'
        str_8 = '/home'
        str_9 = {str_7: str_8}
        str_10 = {str_2: str_5, str_3: str_6, str_4: str_9}
        str_11 = [str_10]
        str_12 = {str_1: str_11}
        str_13 = [str_12]
        str_14 = {str_0: str_13}
        bool_0 = False
        block_0 = module_0.Block(bool_0)
        var_0 = block_0.load_data(str_14)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        list_0 = []
        bool_0 = False
        dict_0 = {str_0: bool_0, bool_0: bool_0}
        bool_1 = False
        float_0 = 684.473
        block_0 = module_0.Block(dict_0, bool_1, float_0)
        var_0 = block_0.set_loader(list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b"\xf4\x1c\x13\x10's`o"
        set_0 = {bytes_0, bytes_0}
        block_0 = module_0.Block(set_0)
        var_0 = block_0.filter_tagged_tasks(bytes_0)
        bool_0 = None
        var_1 = block_0.get_include_params()
        str_0 = 'Rz\x0bB'
        var_2 = block_0.set_loader(str_0)
        var_3 = block_0.__repr__()
        var_4 = block_0.has_tasks()
        block_1 = module_0.Block(block_0)
        var_5 = block_1.copy(bytes_0)
        var_6 = block_1.has_tasks()
        str_1 = 'pULAGm'
        dict_0 = {var_3: var_2, str_0: var_4, var_2: bool_0, var_4: str_1}
        var_7 = block_0.deserialize(dict_0)
        str_2 = '(_1TwJ'
        block_2 = module_0.Block(str_2, block_1, block_0)
        var_8 = block_2.serialize()
        var_9 = block_1.serialize()
        str_3 = 'fgqwn1?0\n'
        bytes_1 = b'\xa7\xa9\xd7q'
        block_3 = module_0.Block(str_3, bool_0, bytes_1, set_0)
        var_10 = block_3.serialize()
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        bytes_0 = b'\xa1\x9b\x1c\x17\xfebD'
        str_0 = '<xM<OG'
        bool_1 = False
        dict_0 = {bool_1: str_0, bool_0: bool_0, str_0: str_0}
        role_0 = module_1.Role()
        tuple_0 = (bool_1, dict_0, role_0, bytes_0)
        int_0 = 1350
        block_0 = module_0.Block(tuple_0, int_0)
        role_1 = module_1.Role(bytes_0, str_0, block_0)
        block_1 = module_0.Block(role_1, dict_0)
        str_1 = 'ui_envra'
        block_2 = module_0.Block(bool_0, block_1, str_1)
        var_0 = block_2.serialize()
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = None
        list_0 = [bool_0, bool_0, bool_0]
        block_0 = module_0.Block(list_0)
        var_0 = block_0.__repr__()
        var_1 = block_0.all_parents_static()
        block_1 = module_0.Block(block_0)
        str_0 = '(_1TwJ'
        str_1 = 'look_for_keys'
        block_2 = module_0.Block(str_0, block_0, str_1)
        var_2 = block_2.serialize()
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b"\xf4\x1c\x13\x10's`o"
        set_0 = {bytes_0, bytes_0}
        block_0 = module_0.Block(set_0)
        var_0 = block_0.filter_tagged_tasks(bytes_0)
        bool_0 = None
        var_1 = block_0.get_include_params()
        str_0 = 'Rz\x0bB'
        var_2 = block_0.set_loader(str_0)
        var_3 = block_0.__repr__()
        var_4 = block_0.has_tasks()
        block_1 = module_0.Block(block_0, var_3, set_0)
        var_5 = block_1.copy(bytes_0)
        var_6 = block_1.has_tasks()
        str_1 = 'pULAGm'
        dict_0 = {var_3: var_2, str_0: var_4, var_2: bool_0, var_4: str_1}
        var_7 = block_0.deserialize(dict_0)
        str_2 = "2df,nVo$'I\x0c"
        block_2 = module_0.Block(str_2, block_1, block_0)
        var_8 = block_0.get_vars()
        var_9 = block_2.serialize()
    except BaseException:
        pass