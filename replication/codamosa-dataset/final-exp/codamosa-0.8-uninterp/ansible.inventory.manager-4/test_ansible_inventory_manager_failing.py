# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    try:
        bytes_0 = b'k\x18\xae\x92/\xad\xf5'
        tuple_0 = ()
        int_0 = 32601
        tuple_1 = ()
        dict_0 = {tuple_1: int_0}
        inventory_manager_0 = module_0.InventoryManager(int_0, tuple_1, dict_0)
        var_0 = inventory_manager_0.add_host(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        inventory_manager_0 = module_0.InventoryManager(dict_0)
        bytes_0 = b'\xb5\xe2\x0e\x0b\xa1\xd51\xd9\xee\xa8G\xdd\xbc'
        var_0 = inventory_manager_0.restrict_to_hosts(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'error loading facts as JSON or ini - please check content: %s'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = None
        str_1 = 'R'
        set_0 = {str_0, str_1, str_0}
        tuple_0 = (bytes_0, str_1, set_0, dict_0)
        inventory_manager_0 = module_0.InventoryManager(dict_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        str_0 = 'lkj<\tk,=h,?-fp'
        list_0 = [str_0, set_0]
        dict_0 = {str_0: set_0}
        inventory_manager_0 = module_0.InventoryManager(dict_0)
        var_0 = inventory_manager_0.restrict_to_hosts(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '?BXMo4dUIX'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        str_1 = 'r0J{>\x0cOBrF]'
        var_0 = inventory_manager_0.subset(str_1)
        var_1 = inventory_manager_0.refresh_inventory()
        var_2 = inventory_manager_0.refresh_inventory()
        var_3 = inventory_manager_0.get_hosts()
        bool_0 = False
        var_4 = inventory_manager_0.restrict_to_hosts(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        int_0 = 200
        int_1 = -210
        float_0 = -3183.3
        tuple_0 = (bool_0, int_0, int_1, float_0)
        inventory_manager_0 = module_0.InventoryManager(tuple_0)
        int_2 = 2023
        str_0 = 'pus'
        var_0 = inventory_manager_0.get_hosts(int_2, bool_0, str_0)
        float_1 = 1727.53
        list_0 = [float_1, float_1]
        set_0 = {inventory_manager_0}
        var_1 = inventory_manager_0.parse_source(set_0)
        dict_0 = {float_1: var_0, tuple_0: list_0}
        inventory_manager_1 = module_0.InventoryManager(dict_0)
        var_2 = inventory_manager_1.reconcile_inventory()
        inventory_manager_2 = module_0.InventoryManager(list_0, str_0)
        var_3 = inventory_manager_2.remove_restriction()
        var_4 = inventory_manager_2.list_groups()
        var_5 = inventory_manager_2.refresh_inventory()
        var_6 = inventory_manager_2.list_hosts()
        var_7 = inventory_manager_2.add_group(str_0)
        var_8 = inventory_manager_2.reconcile_inventory()
        str_1 = '(lr<\x0c@\\}L?C0$'
        bytes_0 = b'.\x18\xf3\xac\xda\xeaX\xcfp'
        var_9 = inventory_manager_2.subset(float_0)
        var_10 = inventory_manager_1.add_host(str_1, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 523.0
        list_0 = []
        inventory_manager_0 = module_0.InventoryManager(float_0, list_0)
        var_0 = inventory_manager_0.get_groups_dict()
        set_0 = set()
        str_0 = 'kjfTc'
        inventory_manager_1 = module_0.InventoryManager(set_0, str_0)
        var_1 = inventory_manager_1.list_hosts()
        var_2 = inventory_manager_1.remove_restriction()
        bool_0 = True
        int_0 = -210
        float_1 = -3183.3
        tuple_0 = (bool_0, int_0, int_0, float_1)
        inventory_manager_2 = module_0.InventoryManager(tuple_0)
        var_3 = inventory_manager_2.reconcile_inventory()
        float_2 = 1727.53
        list_1 = [float_2, float_2]
        var_4 = inventory_manager_1.subset(inventory_manager_2)
        str_1 = 'jR_BE6Q@K*U>,'
        float_3 = -171.828
        var_5 = inventory_manager_2.get_hosts(inventory_manager_2, float_3)
        float_4 = 1664.0
        var_6 = inventory_manager_2.subset(set_0)
        dict_0 = {float_4: var_3, tuple_0: list_1, tuple_0: list_0}
        var_7 = inventory_manager_1.parse_source(list_0)
        inventory_manager_3 = module_0.InventoryManager(dict_0)
        inventory_manager_4 = module_0.InventoryManager(list_1, str_1)
        var_8 = inventory_manager_3.remove_restriction()
        var_9 = inventory_manager_0.clear_pattern_cache()
        var_10 = inventory_manager_0.clear_pattern_cache()
        var_11 = inventory_manager_4.refresh_inventory()
        var_12 = inventory_manager_3.list_hosts(list_0)
        var_13 = inventory_manager_0.restrict_to_hosts(inventory_manager_4)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 523.0
        list_0 = []
        inventory_manager_0 = module_0.InventoryManager(float_0, list_0)
        var_0 = inventory_manager_0.get_groups_dict()
        str_0 = 'kfTc'
        var_1 = inventory_manager_0.list_hosts()
        var_2 = inventory_manager_0.remove_restriction()
        bool_0 = False
        int_0 = -210
        bool_1 = True
        inventory_manager_1 = module_0.InventoryManager(bool_1)
        tuple_0 = (bool_0, int_0, int_0, float_0)
        var_3 = inventory_manager_1.clear_caches()
        inventory_manager_2 = module_0.InventoryManager(tuple_0)
        inventory_manager_3 = module_0.InventoryManager(tuple_0, str_0)
        str_1 = 'jR_BE6Q@w*U>,'
        float_1 = -171.828
        var_4 = inventory_manager_2.get_hosts(inventory_manager_2, float_1)
        var_5 = inventory_manager_3.parse_source(list_0)
        str_2 = 'x'
        var_6 = inventory_manager_2.list_hosts(str_2)
        inventory_manager_4 = module_0.InventoryManager(list_0, str_1)
        dict_0 = {}
        var_7 = inventory_manager_4.subset(dict_0)
        var_8 = inventory_manager_3.reconcile_inventory()
        var_9 = inventory_manager_0.remove_restriction()
        var_10 = inventory_manager_0.list_groups()
        var_11 = inventory_manager_0.refresh_inventory()
        var_12 = inventory_manager_4.list_hosts()
        var_13 = inventory_manager_2.list_hosts()
        var_14 = inventory_manager_4.list_hosts(str_1)
        var_15 = inventory_manager_2.restrict_to_hosts(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        set_0 = set()
        bool_0 = True
        int_0 = None
        inventory_manager_0 = module_0.InventoryManager(int_0)
        str_0 = "S(P0)*?*'"
        var_0 = inventory_manager_0.remove_restriction()
        str_1 = 'd^xX|+znIin,\x0b'
        inventory_manager_1 = module_0.InventoryManager(str_0, str_1)
        var_1 = inventory_manager_1.refresh_inventory()
        int_1 = -223
        float_0 = -3187.972618621379
        tuple_0 = (bool_0, int_1, int_1, float_0)
        inventory_manager_2 = module_0.InventoryManager(tuple_0)
        str_2 = 'jRXBE6Q<K*U>,'
        float_1 = 512.0
        var_2 = inventory_manager_2.get_hosts(inventory_manager_2, float_1)
        var_3 = inventory_manager_2.subset(set_0)
        var_4 = inventory_manager_1.parse_source(list_0)
        str_3 = 'x'
        var_5 = inventory_manager_2.list_hosts(str_3)
        inventory_manager_3 = module_0.InventoryManager(list_0, str_2)
        dict_0 = {}
        var_6 = inventory_manager_3.subset(dict_0)
        var_7 = inventory_manager_3.reconcile_inventory()
        var_8 = inventory_manager_3.refresh_inventory()
        str_4 = '\n*\x0cIruT(.5h'
        var_9 = inventory_manager_3.list_hosts(str_4)
        var_10 = inventory_manager_3.list_hosts()
        bytes_0 = b'\xb6/\xd0\xeb\xde\xc5;\x00'
        var_11 = module_0.split_host_pattern(bytes_0)
        str_5 = 'H}%OkO$#Dac'
        str_6 = 'hVO'
        inventory_manager_4 = module_0.InventoryManager(str_5, str_6, bytes_0)
        var_12 = inventory_manager_1.restrict_to_hosts(bool_0)
    except BaseException:
        pass