# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0
import datetime as module_1

def test_case_0():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'G{\\7LW#Q#f\nRx|eWf'
        list_0 = None
        list_1 = [str_0, str_0, str_0, list_0]
        var_0 = module_0.to_nice_yaml(str_0, *list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'PgisWQB70g0Mv/ CB sY'
        var_0 = module_0.to_nice_yaml(str_0)
        complex_0 = None
        int_0 = 1317
        var_1 = module_0.regex_findall(complex_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '6#aJ=)V'
        var_0 = module_0.comment(str_0)
        str_1 = 'HAYjF3+uugQA]X"'
        str_2 = 'rescued'
        dict_0 = {str_2: var_0, str_0: str_0}
        list_0 = [str_2, str_0, str_1]
        var_1 = module_0.to_json(dict_0, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -382.8
        list_0 = [float_0]
        var_0 = module_0.to_nice_json(list_0)
        str_0 = ')G1%^W;)>1dvT%'
        bool_0 = True
        bool_1 = None
        var_1 = module_0.get_encrypted_password(float_0, str_0, bool_0, bool_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = None
        var_0 = module_0.randomize_list(bytes_0)
        filter_module_0 = module_0.FilterModule()
        str_0 = "SO@4h6Fbhu\\`Ya'"
        var_1 = module_0.to_datetime(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '~'
        list_0 = []
        dict_0 = {str_0: list_0}
        var_0 = module_0.regex_search(str_0, str_0, *list_0, **dict_0)
        filter_module_0 = module_0.FilterModule(*list_0)
        var_1 = filter_module_0.filters()
        int_0 = 4
        var_2 = module_0.strftime(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        time_0 = module_1.time()
        str_0 = '<CTg'
        var_0 = module_0.strftime(time_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 17
        float_0 = -2311.0
        set_0 = {int_0, int_0, int_0, float_0}
        var_0 = module_0.ternary(int_0, float_0, set_0)
        bool_0 = True
        float_1 = 1229.323783
        var_1 = module_0.regex_escape(float_1)
        str_0 = '$'
        list_0 = [str_0, bool_0, var_1]
        var_2 = module_0.get_hash(list_0)
        str_1 = '98t'
        dict_0 = {str_0: int_0, str_1: str_1, str_0: float_0, str_1: str_1}
        var_3 = module_0.regex_escape(dict_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = None
        bool_0 = False
        str_0 = '\n'
        set_0 = set()
        var_0 = module_0.rand(bytes_0, bool_0, str_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = set()
        var_0 = module_0.rand(set_0, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b"tHf)\xbe\xcc\xddN\xcf\xc0\x04\xc9;'+\xb7\x83FS"
        filter_module_0 = None
        str_0 = '"7GuErx'
        tuple_0 = ()
        var_0 = module_0.rand(filter_module_0, bytes_0, str_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'j"9Qp42\\)[(p'
        var_0 = module_0.mandatory(str_0)
        str_1 = 'aj`C):P?UEn%'
        str_2 = None
        dict_0 = {str_1: str_0, str_2: str_0}
        float_0 = 965.8
        bytes_0 = None
        var_1 = module_0.rand(dict_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = None
        bool_0 = False
        str_0 = ''
        set_0 = set()
        var_0 = module_0.rand(bytes_0, bool_0, str_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        tuple_0 = ()
        bytes_0 = b']'
        var_0 = module_0.get_hash(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '/etc/ansible/hosts'
        var_0 = module_0.fileglob(str_0)
        filter_module_0 = module_0.FilterModule()
        str_1 = '\tNb=yq5V'
        dict_0 = {str_1: filter_module_0}
        int_0 = -1680
        var_1 = module_0.get_hash(int_0)
        var_2 = module_0.get_hash(filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        list_0 = []
        var_0 = module_0.from_yaml(list_0)
        filter_module_0 = module_0.FilterModule()
        var_1 = filter_module_0.filters()
        float_0 = -406.44741
        dict_0 = {}
        dict_1 = {}
        str_0 = 'q<!h }I*S*'
        var_2 = module_0.get_encrypted_password(float_0, dict_0, dict_1, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\xf8\xf8JU4\x83\xc3\xb3\xc6+'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        str_0 = '{rw'
        var_0 = module_0.to_uuid(list_0, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = "EF;wf('L\rP"
        filter_module_0 = None
        var_0 = module_0.extract(filter_module_0, str_0, filter_module_0)
    except BaseException:
        pass

def test_case_19():
    try:
        set_0 = set()
        int_0 = 1717
        var_0 = module_0.do_groupby(set_0, int_0, int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        var_0 = module_0.b64encode(bool_0)
        tuple_0 = (bool_0,)
        var_1 = module_0.regex_replace(tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        str_0 = '\nattributes:\n    action_group:\n      description: Action is part of action_group(s), for convenient setting of module_defaults.\n      support: N/A\n      membership: []\n'
        var_0 = module_0.to_bool(str_0)
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.b64decode(dict_0, filter_module_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'u\xd2\xc1A/`\x98D\xa3s'
        int_0 = -1628
        str_0 = "EF=;f(d'L\rP"
        filter_module_0 = None
        dict_0 = {str_0: bytes_0, str_0: str_0, str_0: bytes_0, str_0: int_0, str_0: bytes_0, str_0: filter_module_0}
        var_0 = module_0.subelements(dict_0, str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'k'
        var_0 = module_0.to_bool(str_0)
        float_0 = -2058.76656
        var_1 = module_0.subelements(float_0, str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'k'
        var_0 = module_0.to_bool(str_0)
        dict_0 = {}
        list_0 = [dict_0, dict_0, str_0, str_0]
        var_1 = module_0.subelements(list_0, dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '-Qi'
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = 1777.43
        var_0 = module_0.quote(float_0)
        list_0 = None
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        float_0 = 512.0
        var_0 = module_0.regex_replace()
        var_1 = module_0.path_join(float_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ','
        bytes_0 = b'32\xf3\xb5e\x95L\xdc;\x94kC\x81\n\xaa\x0f'
        filter_module_0 = module_0.FilterModule()
        float_0 = -964.7687
        list_0 = [float_0, float_0, float_0]
        tuple_0 = (str_0, float_0, list_0)
        var_0 = module_0.b64encode(tuple_0)
        list_1 = [filter_module_0, bytes_0]
        var_1 = module_0.get_hash(list_1)
        filter_module_1 = module_0.FilterModule()
        var_2 = module_0.to_uuid(filter_module_1, bytes_0)
    except BaseException:
        pass

def test_case_29():
    try:
        tuple_0 = None
        var_0 = module_0.from_yaml_all(tuple_0)
        int_0 = -3585
        list_0 = None
        var_1 = module_0.regex_search(int_0, list_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '@)\n'
        var_0 = module_0.from_yaml_all(str_0)
        list_0 = []
        dict_0 = {str_0: str_0}
        var_1 = module_0.regex_search(str_0, str_0, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'GB4t\r'
        var_0 = module_0.path_join(str_0)
        float_0 = -132.0
        bool_0 = False
        var_1 = module_0.extract(float_0, bool_0, float_0)
    except BaseException:
        pass

def test_case_32():
    try:
        tuple_0 = ()
        str_0 = ''
        list_0 = [tuple_0, str_0, str_0]
        dict_0 = {}
        var_0 = module_0.combine(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'V'
        dict_0 = {str_0: str_0}
        filter_module_0 = module_0.FilterModule()
        list_0 = [str_0]
        int_0 = 182
        var_0 = module_0.extract(filter_module_0, list_0, dict_0, int_0)
    except BaseException:
        pass

def test_case_34():
    try:
        float_0 = -1896.46996
        list_0 = []
        var_0 = module_0.b64encode(list_0)
        int_0 = False
        tuple_0 = (int_0,)
        var_1 = module_0.rand(float_0, tuple_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_35():
    try:
        set_0 = set()
        var_0 = module_0.to_uuid(set_0)
        int_0 = -1628
        str_0 = None
        list_0 = [int_0, str_0]
        bytes_0 = b'q\x0b\x1a\x0ck\xec\x13\x1a\xbb!\xcd\x15e]'
        var_1 = module_0.randomize_list(bytes_0, list_0)
        list_1 = [list_0, set_0]
        var_2 = module_0.combine(*list_1)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 'Z'
        dict_0 = {}
        list_0 = [str_0]
        list_1 = [str_0, dict_0, str_0, list_0]
        float_0 = 0.1
        var_0 = module_0.randomize_list(list_1, float_0)
        var_1 = module_0.quote(dict_0)
        bool_0 = False
        int_0 = 2192
        var_2 = module_0.to_nice_yaml(int_0)
        var_3 = module_0.b64decode(bool_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '~%0l{X'
        str_1 = ',.7zZT&]45\'qk5Dq]"U'
        bytes_0 = b'U7\xd9\xc6\xde\xcc@\xe0\xabFs'
        var_0 = module_0.regex_findall(str_0, str_1, bytes_0)
        str_2 = '/tc/ansible/hosts'
        var_1 = module_0.fileglob(str_2)
        filter_module_0 = module_0.FilterModule()
        str_3 = '\tNb=yq5V'
        dict_0 = {str_3: filter_module_0}
        int_0 = -1680
        var_2 = module_0.get_hash(int_0)
        var_3 = module_0.get_hash(filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = "Do[Y'o4\x0b'GkP'\x0c.UY\\-$"
        var_0 = module_0.to_bool(str_0)
        bytes_0 = b's\xc1vd\xec'
        complex_0 = None
        var_1 = module_0.get_encrypted_password(bytes_0, complex_0)
    except BaseException:
        pass

def test_case_39():
    try:
        bytes_0 = b'u\xd2\xc1A/`\x98D\xa3s'
        filter_module_0 = None
        var_0 = module_0.quote(filter_module_0)
        int_0 = 3787
        list_0 = [int_0, bytes_0]
        tuple_0 = ()
        var_1 = module_0.subelements(bytes_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 1
        list_0 = [int_0]
        var_0 = module_0.path_join(list_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = '~d'
        list_0 = [str_0]
        dict_0 = {str_0: str_0}
        var_0 = module_0.regex_search(str_0, str_0, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_42():
    try:
        bytes_0 = b'u\xd2\xc1A/`\x98D\xa3s'
        int_0 = -1628
        str_0 = "EF=;f(d'L\rP"
        str_1 = 'aIW\rOV|'
        dict_0 = {str_1: str_0, str_1: bytes_0}
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(dict_0)
        filter_module_0 = None
        dict_1 = {str_0: bytes_0, str_0: str_0, str_0: bytes_0, str_0: int_0, str_0: bytes_0, str_0: filter_module_0}
        str_2 = '[EU?2'
        var_1 = module_0.subelements(dict_1, str_2)
    except BaseException:
        pass

def test_case_43():
    try:
        bytes_0 = None
        bool_0 = False
        list_0 = []
        str_0 = 'krN3'
        list_1 = [str_0, bytes_0, list_0, str_0]
        var_0 = module_0.flatten(list_1)
        str_1 = 'Uj\x0b%!\r"1G}9Ft]hyFnu'
        dict_0 = {str_1: list_0, str_0: bytes_0, str_1: bool_0}
        var_1 = module_0.to_yaml(list_0, **dict_0)
    except BaseException:
        pass

def test_case_44():
    try:
        bytes_0 = b'u\xd2\xc1A/`\x98\x16D\xa3s'
        int_0 = -1628
        tuple_0 = None
        dict_0 = {tuple_0: bytes_0, tuple_0: tuple_0, tuple_0: int_0}
        float_0 = 145.2
        set_0 = set()
        var_0 = module_0.ternary(dict_0, float_0, set_0, float_0)
        var_1 = module_0.get_encrypted_password(dict_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'V'
        var_0 = module_0.from_yaml_all(str_0)
        list_0 = []
        str_1 = ']N`^V,O+U]'
        dict_0 = {str_0: str_1}
        var_1 = module_0.regex_search(str_1, str_1, *list_0, **dict_0)
        var_2 = module_0.combine(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'gZ/Pa2:N"[ =1)1a\t'
        var_0 = module_0.to_bool(str_0)
        list_0 = [var_0, var_0, str_0]
        list_1 = [var_0, str_0, list_0]
        float_0 = -2690.0
        bytes_0 = None
        dict_0 = {var_0: list_0}
        var_1 = module_0.regex_findall(float_0, bytes_0, dict_0, list_1)
    except BaseException:
        pass

def test_case_47():
    try:
        float_0 = -1.0
        list_0 = [float_0, float_0]
        list_1 = [list_0]
        var_0 = module_0.randomize_list(list_1)
        str_0 = 'yG?[|z'
        list_2 = [str_0, str_0, str_0, str_0]
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(list_2)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = ''
        list_0 = [str_0]
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.mandatory(list_0)
        list_1 = [var_0, list_0, filter_module_0, filter_module_0]
        list_2 = []
        var_1 = module_0.subelements(list_1, list_2)
    except BaseException:
        pass

def test_case_49():
    try:
        bytes_0 = b'\x13\xad?\xf2'
        filter_module_0 = None
        bool_0 = False
        str_0 = '+h4'
        str_1 = '.f"1Sj4n9\'s6yru'
        var_0 = module_0.ternary(filter_module_0, bool_0, str_0, str_1)
        var_1 = module_0.path_join(bytes_0)
    except BaseException:
        pass

def test_case_50():
    try:
        bool_0 = None
        list_0 = []
        var_0 = module_0.ternary(bool_0, list_0, list_0)
        tuple_0 = None
        var_1 = module_0.b64decode(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_51():
    try:
        int_0 = 2428
        bytes_0 = b'T\x0b\xc2\x92\xfa:k'
        bool_0 = True
        float_0 = 0.0
        str_0 = '0o~+`.R5@8'
        tuple_0 = (bool_0, float_0, str_0)
        list_0 = [int_0, int_0, tuple_0, str_0]
        str_1 = 'w$KgO$TtC"6g'
        dict_0 = {str_0: tuple_0, str_1: list_0}
        var_0 = module_0.extract(bytes_0, list_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = '1'
        var_0 = module_0.to_bool(str_0)
        int_0 = 1
        var_1 = module_0.to_bool(int_0)
        str_1 = 'YES'
        var_2 = module_0.to_bool(str_1)
        list_0 = [int_0]
        time_0 = module_1.time(*list_0)
        str_2 = ''
        var_3 = module_0.strftime(str_2, int_0)
        var_4 = module_0.strftime(time_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = 'fizzbuzz'
        str_1 = 'fizz'
        var_0 = module_0.regex_replace(str_0, str_1, str_0)
        bool_0 = True
        var_1 = module_0.regex_replace(str_0, str_1, str_0, bool_0)
        var_2 = module_0.regex_replace(str_0, str_1, str_0, bool_0)
        var_3 = module_0.regex_replace(str_0, str_1, str_0, bool_0, bool_0)
        float_0 = 1438630152.0
        filter_module_0 = None
        var_4 = module_0.strftime(filter_module_0, float_0)
    except BaseException:
        pass

def test_case_54():
    try:
        float_0 = 870.30136
        int_0 = 1018
        var_0 = module_0.rand(float_0, int_0)
        str_0 = 'posix_extended'
        var_1 = module_0.regex_escape(float_0, str_0)
    except BaseException:
        pass

def test_case_55():
    try:
        bool_0 = False
        str_0 = 'IP?C=Lo;H0ROo-\r'
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_1 = 'posix_basic'
        str_2 = 'j3z-Jk1'
        dict_0 = {str_1: filter_module_0, str_1: str_0, str_2: str_0}
        var_1 = filter_module_0.filters()
        dict_1 = {str_0: dict_0, filter_module_0: str_2, str_2: bool_0, str_2: bool_0}
        str_3 = 'qUScl<#l`jE'
        list_0 = []
        var_2 = module_0.subelements(dict_1, str_3, list_0)
    except BaseException:
        pass

def test_case_56():
    try:
        bool_0 = True
        str_0 = 'IP?C=Lo;H0ROo-\r'
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_1 = '"&ii]2k'
        str_2 = 'j3z-Jk1'
        dict_0 = {str_1: filter_module_0, str_1: str_0, str_2: str_0}
        var_1 = filter_module_0.filters()
        dict_1 = {str_0: dict_0, filter_module_0: str_2, str_2: bool_0, str_2: bool_0}
        str_3 = 'qUScl<#l`jE'
        list_0 = [var_1]
        var_2 = module_0.subelements(dict_1, str_3, list_0)
    except BaseException:
        pass

def test_case_57():
    try:
        bool_0 = False
        set_0 = {bool_0}
        list_0 = [set_0]
        float_0 = 60.0
        var_0 = module_0.combine()
        list_1 = [bool_0, list_0, float_0, set_0]
        var_1 = module_0.flatten(list_0, list_1)
        var_2 = module_0.mandatory(set_0)
        str_0 = 'ost_list'
        var_3 = module_0.comment(str_0)
        str_1 = ')h)'
        dict_0 = {str_0: str_1}
        int_0 = 1477
        str_2 = 'W$&\x0b6\rX^K9s5K('
        str_3 = 'I+,/m||^\x0c.suz\n\rbx'
        dict_1 = {str_2: var_1, str_3: str_1, str_2: str_0}
        bytes_0 = b'`\xd7\xc3\xa7(z\xca^\xa5E\xf5'
        var_4 = module_0.rand(dict_0, int_0, dict_1, bytes_0)
    except BaseException:
        pass