# Automatically generated by Pynguin.
import ansible.module_utils.common.text.converters as module_0

def test_case_0():
    try:
        bool_0 = False
        var_0 = module_0.to_bytes(bool_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1156.008
        set_0 = {float_0, float_0}
        str_0 = 'No inventory was parsed, please check your configuration and options.'
        var_0 = module_0.to_text(set_0, str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xad\xf5(!\x84g\xfb;\xfe\xd7k'
        list_0 = [bytes_0, bytes_0]
        var_0 = module_0.to_text(bytes_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'A-'
        var_0 = module_0.container_to_bytes(str_0)
        set_0 = {var_0, var_0}
        var_1 = module_0.jsonify(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'minor'
        list_0 = [str_0]
        int_0 = -1457
        var_0 = module_0.container_to_bytes(list_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 838
        str_0 = 'X*'
        tuple_0 = (int_0, str_0)
        list_0 = [tuple_0, int_0]
        var_0 = module_0.container_to_bytes(list_0)
        list_1 = []
        list_2 = [list_1, list_1, list_1, list_1]
        bytes_0 = b'3\xc2\x82\x1c'
        var_1 = module_0.to_text(list_2, bytes_0)
        str_1 = 'job'
        str_2 = 'j\x0c'
        tuple_1 = (str_1, str_2, list_1)
        var_2 = module_0.jsonify(tuple_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        var_0 = module_0.to_bytes(str_0)
        str_1 = 'test'
        var_1 = module_0.to_bytes(str_1)
        bytes_0 = b'test'
        var_2 = module_0.to_bytes(bytes_0)
        str_2 = 'ሴ'
        str_3 = 'utf-8'
        var_3 = module_0.to_bytes(str_2, str_3)
        str_4 = 'latin-1'
        var_4 = module_0.to_bytes(str_2, str_4)
        str_5 = 'ሴ'
        str_6 = 'latin-1'
        str_7 = 'surrogateescape'
        var_5 = module_0.to_bytes(str_5, str_6, str_7)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'A-'
        var_0 = module_0.container_to_bytes(str_0)
        bool_0 = True
        complex_0 = None
        set_0 = {bool_0, var_0}
        var_1 = module_0.to_text(str_0)
        var_2 = module_0.to_bytes(bool_0, complex_0, str_0, set_0)
    except BaseException:
        pass