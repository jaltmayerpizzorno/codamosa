

# Generated at 2022-06-22 12:01:15.872417
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    from ansible.parsing.yaml.loader import AnsibleLoader
    from ansible.vars.unsafe_proxy import AnsibleUnsafeText
    from ansible.module_utils.common.text.converters import native, to_text
    from jinja2.nodes import Name, Const
    from jinja2.compiler import CodeGenerator


# Generated at 2022-06-22 12:01:28.367163
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # No args
    assert ansible_native_concat([]) is None

    # One arg
    assert ansible_native_concat([0]) == 0
    assert ansible_native_concat(['a']) == 'a'

    # Two args
    assert ansible_native_concat(['a', 0]) == 'a'
    assert ansible_native_concat([0, 'a']) == 0
    assert ansible_native_concat(['a', 'b']) == 'ab'

    # Three args
    assert ansible_native_concat(['a', 0, 'b']) == 'a'
    assert ansible_native_concat([0, 'a', 'b']) == 0
    assert ansible_native_concat(['a', 'b', 0]) == 'ab'
   

# Generated at 2022-06-22 12:01:37.789883
# Unit test for function ansible_native_concat
def test_ansible_native_concat():

    class TestClass(object):
        def __init__(self, value):
            self.value = value

        def __str__(self):
            return self.value

    # returns None if no nodes are passed
    assert ansible_native_concat([]) == None

    # returns the value of the node if only one is passed
    assert ansible_native_concat(["test"]) == "test"

    # returns the value of the node if only one is passed
    assert ansible_native_concat(["123"]) == 123

    # returns the value of the node if only one is passed (even if it can't be parsed by literal_eval)
    assert ansible_native_concat(["test123"]) == "test123"

    # concatenates nodes

# Generated at 2022-06-22 12:01:50.617011
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    import sys
    if sys.version_info[0] < 3:
        assert ansible_native_concat([1]) == 1
        assert ansible_native_concat([1, 2, 3]) == 123
        assert ansible_native_concat([123, 'xyz']) == '123xyz'
        assert ansible_native_concat(['abc', 123]) == 'abc123'

        assert ansible_native_concat(['abc', 'def']) == 'abcdef'
        assert ansible_native_concat(['abc', 1, 'def']) == 'abc1def'
        assert ansible_native_concat([1, 'def']) == '1def'
        assert ansible_native_concat(['abc', 1]) == 'abc1'

# Generated at 2022-06-22 12:02:02.886135
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    import jinja2
    from jinja2 import Environment
    assert Environment(undefined=StrictUndefined).from_string(
        '{{ [10, 20] | map("int") | sum }}'
    ).render() == '30'

    assert Environment(undefined=StrictUndefined).from_string(
        '{{ ["10", "20"] | map("int") | sum }}'
    ).render() == '30'

    assert Environment(undefined=StrictUndefined).from_string(
        '{{ ["10", 20] | map("int") | sum }}'
    ).render() == 'jp_fail_on_undefined'


# Generated at 2022-06-22 12:02:14.065579
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    """
    This function unit tests the function ansible_native_concat.

    NOTICE: Since that function is also used internally by Jinja2 templates,
    when a new case is added here, you should check if a similar case needs
    to be added in tests/unit/module_utils/nxos/facts/nxos.py
    """
    # Test different types
    assert ansible_native_concat([1]) == 1
    assert ansible_native_concat([2, 3]) == "23"
    assert ansible_native_concat([True, False]) == "TrueFalse"
    assert ansible_native_concat([None]) == "None"
    assert ansible_native_concat([None, None]) == "NoneNone"

    # Test different strings

# Generated at 2022-06-22 12:02:26.158868
# Unit test for function ansible_native_concat

# Generated at 2022-06-22 12:02:34.039820
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    import sys
    # The generated bytecode is Python version dependent,
    # so we have to use Python version specific expected result
    # when running the tests.

# Generated at 2022-06-22 12:02:45.955158
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat(n for n in [1, 2]) == [1, 2]
    assert ansible_native_concat([1, u'', 2]) == [1, 2]
    assert ansible_native_concat([1, '2']) == 1
    assert ansible_native_concat(['"a"', 2]) == 'a'
    assert ansible_native_concat([1, '"a"']) == '1a'
    assert ansible_native_concat([1, '"a"', 2]) == '1a2'
    assert ansible_native_concat([1, '"a', 2]) == "1a'2"
    assert ansible_native_concat([1, "'a'", 2]) == '1a2'



# Generated at 2022-06-22 12:02:54.599131
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # pylint: disable=protected-access
    string_literal = 'foo'
    attr = ast.Attribute(attr=string_literal,
                         ctx=ast.Load(),
                         value=ast.Name(id='bar', ctx=ast.Load()))
    generator_literal = ast.GeneratorExp(elt=attr, generators=[ast.comprehension(target=ast.Name(id='foo', ctx=ast.Store()), iter=ast.Name(id='bar', ctx=ast.Load()))])
    str_concat = ast.BinOp(left=string_literal, op=ast.Add(), right=ast.Num(n=1))
    list_concat = ast.List(elts=[attr, generator_literal], ctx=ast.Load())
    set_concat

# Generated at 2022-06-22 12:03:08.265586
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([]) is None
    assert ansible_native_concat([container_to_text(1)]) == 1
    assert ansible_native_concat([container_to_text("1")]) == "1"
    assert ansible_native_concat([container_to_text("1"), container_to_text("2")]) == "12"
    assert ansible_native_concat([container_to_text("1"), container_to_text("2")], container_to_text("3")) == "123"
    assert ansible_native_concat([container_to_text("1"), container_to_text("2")], [container_to_text("3"), container_to_text("4")]) == "1234"

# Generated at 2022-06-22 12:03:18.060968
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([u'1', u'2']) == u'12'
    assert ansible_native_concat([u'1']) == u'1'
    assert ansible_native_concat((u'1', u'2')) == u'12'
    assert ansible_native_concat((u'1',)) == u'1'

    assert ansible_native_concat((u'1', u'2.3')) == u'1 2.3'
    assert ansible_native_concat((u'1', 123)) == u'1 123'
    assert ansible_native_concat((u'1\n', u'2')) == u'1\n2'

    assert ansible_native_concat([u'1', u'2']) == u'12'

# Generated at 2022-06-22 12:03:29.290047
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # Test the handling of StrictUndefined.
    # It should not be thrown until it is accessed.
    class TestUndef(StrictUndefined):
        def __radd__(self, other):
            str(self)
            return other

    u = TestUndef()
    # Make sure the StrictUndefined exception is not thrown here.
    out = ansible_native_concat([u])
    assert isinstance(out, StrictUndefined)
    assert isinstance(u, StrictUndefined)

    # Try to evaluate it.
    # This will throw StrictUndefined because of accessing it.
    try:
        value = ' '.join([to_text(out), 'foo'])
    except Exception as e:
        assert type(e) == StrictUndefined
    else:
        assert False

    # The remaining

# Generated at 2022-06-22 12:03:40.579558
# Unit test for function ansible_native_concat

# Generated at 2022-06-22 12:03:51.794619
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([
        'a',
        'b',
    ]) == 'ab'
    assert ansible_native_concat([
        1,
        'b',
    ]) == 1
    assert ansible_native_concat([
        u'a',
        u'b',
    ]) == u'ab'
    assert ansible_native_concat([
        u'a',
        u'b',
        'c',
    ]) == u'abc'

    assert ansible_native_concat(iter([
        u'a',
        u'b',
    ])) == u'ab'
    assert ansible_native_concat(iter([
        u'a',
        u'b',
        'c',
    ])) == u'abc'
    assert ansible_native

# Generated at 2022-06-22 12:04:03.205108
# Unit test for function ansible_native_concat
def test_ansible_native_concat():

    # General cases
    assert ansible_native_concat([1])     == 1
    assert ansible_native_concat([[1]])   == 1
    assert ansible_native_concat([1,2])   == 1
    assert ansible_native_concat((1,2))   == 1
    assert ansible_native_concat([[1,2]]) == 1
    assert ansible_native_concat((1,2))   == 1
    assert ansible_native_concat([[1,2,3]]) == [1, 2, 3]
    assert ansible_native_concat([str(1)]) == "1"
    assert ansible_native_concat([str(1),str(2)]) == "1"

# Generated at 2022-06-22 12:04:12.304726
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([]) is None
    assert ansible_native_concat(['foo']) == 'foo'
    assert ansible_native_concat(['foo', 'bar']) == 'foobar'
    assert ansible_native_concat([1, 2]) == 12
    assert ansible_native_concat(['', 'foo']) == 'foo'
    assert ansible_native_concat(['foo', ' ']) == 'foo '
    assert ansible_native_concat(['foo ', 'bar']) == 'foo bar'
    assert ansible_native_concat(['foo ', ' bar']) == 'foo  bar'
    assert ansible_native_concat(['foo', ' bar']) == 'foo bar'

# Generated at 2022-06-22 12:04:15.748445
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    """Test ansible_native_concat function by comparing its output with
    Python builtin type.
    """

    assert ansible_native_concat(["a", "b", "c"]) == "a"
    assert ansible_native_concat(["a", "b", "c"][1:]) == "b"

    assert ansible_native_concat([0, 1, 2]) == 0
    assert ansible_native_concat([0, 1, 2][1:]) == 1

    assert ansible_native_concat([0, 1, 2] + ["a", "b", "c"]) == 0

    assert ansible_native_concat([0, 1, 2] + ["a", "b", "c"][1:]) == 0

# Generated at 2022-06-22 12:04:27.268274
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([u'a']) == u'a'
    assert ansible_native_concat([u'a', u'b']) == u'ab'
    assert ansible_native_concat([u'a', u'b', u'c']) == u'abc'
    assert ansible_native_concat([u'a', 1, u'b']) == u'a1b'
    assert ansible_native_concat([u'a', 1, None]) == u'a1None'
    assert ansible_native_concat([u'"a"', u'"b"']) == u'"ab"'
    assert ansible_native_concat([u'"a"', u'"b"', u'"c"']) == u'"abc"'

# Generated at 2022-06-22 12:04:35.971355
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    from ansible.module_utils.common.text.converters import to_text
    from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode

    # no args
    out = ansible_native_concat([])
    assert out is None

    # single object
    out = ansible_native_concat([1])
    assert out == 1

    out = ansible_native_concat(['foo'])
    assert out == 'foo'

    # multiple objects, concat string
    out = ansible_native_concat(['foo', 'bar'])
    assert out == 'foobar'

    # multiple objects, concat, literal_eval
    out = ansible_native_concat([u'{', u'"foo":', u'1}'])

# Generated at 2022-06-22 12:04:49.846642
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    """Tests for function ansible_native_concat"""

    # simple string concat
    assert 'abcd' == ansible_native_concat(['ab', 'cd'])
    assert 'abcd' == ansible_native_concat(['a', 'b', 'c', 'd'])

    # simple int
    assert 83 == ansible_native_concat(['8', '3'])
    assert 83 == ansible_native_concat(['8', 3])
    assert 83 == ansible_native_concat([8, '3'])
    assert 83 == ansible_native_concat([8, 3])

    # simple dict
    assert dict(a=1, b=2, c=3) == ansible_native_concat(['a=1', 'b=2', 'c=3'])

# Generated at 2022-06-22 12:05:00.039275
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    nodes = ['[', '"', 'a', '",', ' "ansible"', ']']
    assert ansible_native_concat(nodes) == ["a", "ansible"]
    nodes = ['["a",', ' ', '"ansible"]']
    assert ansible_native_concat(nodes) == ["a", "ansible"]
    nodes = ['[', '"a",', ' "ansible"', ']']
    assert ansible_native_concat(nodes) == ["a", "ansible"]
    nodes = ['[', '"a"', ' ', ',', ' "ansible"]']
    assert ansible_native_concat(nodes) == ["a", "ansible"]
    nodes = ['["a"', ' ', ',', ' "ansible"]']
    assert ansible_native_

# Generated at 2022-06-22 12:05:09.946176
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    def assert_equal_value(actual, expected):
        assert actual == expected, '{} != {}'.format(
            container_to_text(actual, format=None),
            container_to_text(expected, format=None)
        )

    # empty
    assert_equal_value(ansible_native_concat([]), None)
    assert_equal_value(ansible_native_concat(''), None)
    assert_equal_value(ansible_native_concat({}), None)

    # single element
    assert_equal_value(ansible_native_concat(['foo']), 'foo')
    assert_equal_value(ansible_native_concat('foo'), 'foo')

# Generated at 2022-06-22 12:05:22.981303
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # Ensure that we always get a single element list
    assert ansible_native_concat([]) == []
    assert ansible_native_concat([42]) == 42
    assert ansible_native_concat([None]) is None
    assert ansible_native_concat(['foo']) == 'foo'
    assert ansible_native_concat([u'bar']) == u'bar'
    assert ansible_native_concat([[1, 2]]) == [1, 2]
    assert ansible_native_concat([{'a': 1}]) == {'a': 1}
    assert ansible_native_concat([object()]) == "[object Object]"

    # list/dict should remain

# Generated at 2022-06-22 12:05:34.793591
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    """Test that ansible_native_concat handles all of our types
    """
    from ansible.module_utils.six import text_type
    from ansible.module_utils.common.text.converters import to_html, to_yaml
    import datetime
    import calendar
    import copy

    def check_equal(a, b):
        assert a == b, "%s != %s" % (a, b)

    def check_not_equal(a, b):
        assert a != b, "%s == %s" % (a, b)

    # Generate a list of all different types that we expect to work
    # TODO: This is not an exhaustive list. Add more tests as we find things that are broken.

# Generated at 2022-06-22 12:05:38.240208
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    from ansible.template import Templar
    from ansible.parsing.yaml.objects import AnsibleUnicode, AnsibleVaultEncryptedUnicode

    # Datastructure for testing:
    # [
    #   [list of nodes before the last node],
    #   last_node,
    #   expected_output,
    #   test_name
    # ]

# Generated at 2022-06-22 12:05:47.395875
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    nodes = [1, 2, 3, 4]
    assert ansible_native_concat(nodes) == 1234

    nodes = [2, 3, 4]
    assert ansible_native_concat(nodes) == 23

    nodes = [True, 3.14, 'a']
    assert ansible_native_concat(nodes) == 'True3.14a'

    nodes = ['True', '3.14', 'a']
    assert ansible_native_concat(nodes) is True

    nodes = ['(', '3.14', ')', [3.14, 3.14], ']']
    assert ansible_native_concat(nodes) == [3.14, 3.14]


# Generated at 2022-06-22 12:05:56.278858
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # Boolean
    assert ansible_native_concat(['true']) is True
    # Numerics
    assert ansible_native_concat(['1']) == 1
    assert ansible_native_concat(['1.0']) == 1.0
    # Strings
    assert ansible_native_concat([u'foo']) == u'foo'
    assert ansible_native_concat([u'foo']) == u'foo'
    assert ansible_native_concat([r'\t']) == r'\t'
    # None
    assert ansible_native_concat([u'null']) is None
    # Dictionaries
    assert ansible_native_concat([u'{foo: 1}']) == {u'foo': 1}
    # Lists
    assert ansible

# Generated at 2022-06-22 12:06:07.172245
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    native_concat = ansible_native_concat
    assert native_concat([]) == None
    assert native_concat([42]) == 42
    assert native_concat([3.14]) == 3.14
    assert native_concat([None]) is None
    assert native_concat([True]) is True
    assert native_concat([False]) is False
    assert native_concat([[]]) == []
    assert native_concat([{}]) == {}
    assert native_concat([u'foo']) == u'foo'
    assert native_concat([u'foo', u'bar']) == u'foobar'
    assert native_concat([3, 1, 4]) == 314
    assert native_concat([3, 1, 4, 1, 5]) == 31415
    assert native_concat

# Generated at 2022-06-22 12:06:16.941860
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert u'A' == ansible_native_concat([u'A'])
    assert '1' == ansible_native_concat(['1'])
    assert u'A1' == ansible_native_concat([u'A', u'1'])
    assert u'1A' == ansible_native_concat([u'1', u'A'])
    assert u'A1' == ansible_native_concat([u'A', 1])
    assert u'1A' == ansible_native_concat([1, u'A'])
    assert u'A1' == ansible_native_concat(['A', u'1'])
    assert u'1A' == ansible_native_concat([u'1', 'A'])
    assert u'A1' == ansible

# Generated at 2022-06-22 12:06:34.282588
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    def make_node(value):
        return value

# Generated at 2022-06-22 12:06:45.557795
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    import pytest
    from jinja2.runtime import Context
    from jinja2 import nodes

    # plain text
    assert ansible_native_concat([_UndefinedMock('a')]) == 'a'
    assert ansible_native_concat([_UndefinedMock('a'), _UndefinedMock('b')]) == 'ab'
    assert ansible_native_concat([_UndefinedMock('a'),
                                  _UndefinedMock('b'),
                                  _UndefinedMock('c')]) == 'abc'

    # strings
    assert ansible_native_concat([_UndefinedMock('a'), _UndefinedMock('1')]) == 'a1'

# Generated at 2022-06-22 12:06:52.945180
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # Make sure we can combine strings
    assert ansible_native_concat(['foo', 'bar', 'baz']) == u'foobarbaz'

    # Make sure we can add non-strings
    assert ansible_native_concat(['foo', 123, 'bar']) == u'foo123bar'

    # Make sure we can mix types and operators
    assert ansible_native_concat(['foo', 'bar', 2, ' + 2 = ', 2 + 2]) == u'foobar2 + 2 = 4'

    # Make sure we can combine and evaluate mathematical expressions
    assert ansible_native_concat(['3', ' + 2 = ', 3 + 2]) == 5

    # Make sure we can evaluate true boolean values
    assert ansible_native_concat(['True']) is True

    # Make sure we can evaluate

# Generated at 2022-06-22 12:07:03.705576
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    import datetime

    class Foo(string_types):
        pass


# Generated at 2022-06-22 12:07:15.517431
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([]) is None

    assert ansible_native_concat([1]) == 1
    assert ansible_native_concat([['a']]) == ['a']

    assert ansible_native_concat([1, 2]) == '12'
    assert ansible_native_concat([1, ['a', 'b']]) == '1ab'
    assert ansible_native_concat([1, 2, 'c']) == '12c'

    assert ansible_native_concat([1, 2, [3, 4], 5]) == '1234'
    assert ansible_native_concat([1, 2, [3, 4], ['a', 'b']]) == '1234ab'

# Generated at 2022-06-22 12:07:27.122308
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([1, 2]) == 1
    assert ansible_native_concat([u'a', u'b']) == u'ab'
    assert ansible_native_concat([1, u'a']) == u'1a'
    assert ansible_native_concat([u'[', 'a', ',' 'b', ']']) == u'[a,b]'
    assert ansible_native_concat(['[', "'a'", ',', "'b'", ']']) == u'["a", "b"]'
    assert ansible_native_concat([u"'", u'[a, "', u'b"]']) == u'\\"[a, \\"b\\"]'

# Generated at 2022-06-22 12:07:39.224761
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    import ast
    import types
    from jinja2.runtime import StrictUndefined

    assert ansible_native_concat([]) is None
    assert ansible_native_concat([1]) == 1
    assert ansible_native_concat([1, 2]) == '12'
    assert ansible_native_concat([1, 2, 3]) == '123'
    assert ansible_native_concat(['a', 'b']) == 'ab'
    assert ansible_native_concat([1, 'b', True]) == '1bTrue'
    assert isinstance(ansible_native_concat([1, 'b', True]), string_types)
    assert ansible_native_concat([None, None]) == 'NoneNone'

# Generated at 2022-06-22 12:07:50.219850
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat(["spam", "eggs"]) == "spam eggs"
    assert ansible_native_concat(["spam", 1]) == "spam 1"
    assert ansible_native_concat(["spam", 1, u"eggs"]) == "spam 1eggs"
    assert ansible_native_concat(["spam", None]) == "spam None"
    assert ansible_native_concat(["spam", ansible_native_concat(["eggs"])]) == "spam eggs"
    assert ansible_native_concat([[]]) is None
    assert ansible_native_concat([""]) == ""
    assert ansible_native_concat(["True"]) is True

# Generated at 2022-06-22 12:08:02.666401
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # Assert concatenation of native types works correctly.
    assert ansible_native_concat([1, 2, 3]) == 123
    assert ansible_native_concat(['a', 'b', 'c']) == 'abc'
    assert ansible_native_concat([['a'], ['b'], ['c']]) == 'abc'
    assert ansible_native_concat(['a', 1, ['b']]) == 'a1b'

    # Assert literal_eval works correctly.
    assert ansible_native_concat(['[1, 2, 3]']) == [1, 2, 3]
    assert ansible_native_concat(['{"a": 1}']) == {'a': 1}

# Generated at 2022-06-22 12:08:13.284671
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([]), None
    assert ansible_native_concat([1]), 1
    assert ansible_native_concat([1, 1, 1]), 3
    assert ansible_native_concat([1, '1', True]), '1True'
    assert ansible_native_concat([1, '1', True]), '1True'
    assert ansible_native_concat([-1, '0xFFFFFFFF', 16]), 4294967295
    assert ansible_native_concat([-1, '0o37777777777', 8]), 4294967295
    assert ansible_native_concat([True, 1, '0b1', 2]), '101'
    assert ansible_native_concat(['True', '1', '0b1', 2]), 'True10b1'

# Generated at 2022-06-22 12:08:30.840324
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    from jinja2.runtime import Undefined

    # Test empty list
    obj = ansible_native_concat([])
    assert obj is None

    # Test how literal_eval handles strings
    obj = ansible_native_concat(['"42"'])
    assert obj == '"42"'

    obj = ansible_native_concat(['42'])
    assert obj == 42

    obj = ansible_native_concat(['"0xFF"'])
    assert obj == '"0xFF"'

    obj = ansible_native_concat(['[1, 2, 3]'])
    assert obj == [1, 2, 3]

    obj = ansible_native_concat(['["a", "b", "c"]'])
    assert obj == ['a', 'b', 'c']


# Generated at 2022-06-22 12:08:42.325947
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # Simple literals test
    assert ansible_native_concat([1, 2]) == 12
    assert ansible_native_concat(['1', 2]) == 12
    assert ansible_native_concat([True, 1]) == 1
    assert ansible_native_concat([True, False, True]) is True
    assert ansible_native_concat([True, False, False]) is False
    assert ansible_native_concat(['1', 2]) == 12
    assert ansible_native_concat(['1', '2']) == 12
    assert ansible_native_concat(['1', '2', 3]) == '123'
    assert ansible_native_concat(['a', 'b', 'c']) == 'abc'

# Generated at 2022-06-22 12:08:54.205665
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    from jinja2.nodes import TemplateData, Name

    assert ansible_native_concat([]) == None

    assert ansible_native_concat([
        TemplateData('a')
    ]) == 'a'

    assert ansible_native_concat([
        TemplateData('a'),
        TemplateData('b')
    ]) == 'ab'

    assert ansible_native_concat([
        TemplateData('a'),
        TemplateData('b'),
        TemplateData('12')
    ]) == 'ab12'

    assert ansible_native_concat([
        TemplateData('True')
    ]) == True

    assert ansible_native_concat([
        TemplateData('true')
    ]) == 'true'


# Generated at 2022-06-22 12:09:06.137813
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    from ansible.module_utils.common.text.ast_parser import parse_value, literal_eval_safe
    from ansible.module_utils.common.text.converters import to_native
    from ansible.module_utils.common.text.converters import to_text
    from ansible.module_utils.common.text.formatters import to_json, to_yaml

    import ast


# Generated at 2022-06-22 12:09:17.217473
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat('a') == 'a'
    assert ansible_native_concat(['a']) == 'a'
    assert ansible_native_concat(['a', 'b', 'c']) == 'abc'
    assert ansible_native_concat(['a', 1, 'b', 'c']) == 'a1bc'
    assert ansible_native_concat(['a', 1, 'b', 'c', 'd', 2]) == 'a1bcd2'

    assert ansible_native_concat(['a', 'b', 'c']) == 'abc'
    assert ansible_native_concat(['a', 1, 'b', 'c']) == 'a1bc'

# Generated at 2022-06-22 12:09:24.908848
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([]) is None
    assert ansible_native_concat([1]) == 1
    assert ansible_native_concat([u'foo', u'bar']) == u'foobar'
    assert ansible_native_concat([u'{"foo": "bar"}']) == {u'foo': u'bar'}
    assert ansible_native_concat([u'{ "foo": "bar" }']) == u'{ "foo": "bar" }'

# Generated at 2022-06-22 12:09:35.804272
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    from ansible.module_utils.common._collections_compat import MutableSequence
    class CustomList(MutableSequence):
        @property
        def nodes(self):
            return [i for i in self]

    nodes = CustomList([1, 2, 3])
    assert ansible_native_concat(nodes) == '123'
    assert ansible_native_concat(nodes.nodes) == '123'
    assert ansible_native_concat(iter(nodes)) == '123'

    nodes = CustomList([1, 2, 3])
    assert ansible_native_concat(iter(nodes)) == '123'

    nodes = CustomList([1, 2, 3])
    assert ansible_native_concat(nodes) == '123'


# Generated at 2022-06-22 12:09:45.432811
# Unit test for function ansible_native_concat

# Generated at 2022-06-22 12:09:55.351827
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    class TestUndefined(StrictUndefined):
        def __str__(self):
            raise self._undefined_exception()

    undefined = TestUndefined()


# Generated at 2022-06-22 12:10:05.986979
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([]) is None
    assert ansible_native_concat(['a']) == 'a'
    assert ansible_native_concat([123]) == 123
    assert ansible_native_concat(['a', 'b']) == 'ab'
    assert ansible_native_concat(['a', 123]) == 'a123'
    assert ansible_native_concat(['a', 'b', 'c']) == 'abc'
    assert ansible_native_concat([123, 'b', 'c']) == '123bc'
    assert ansible_native_concat([123, 'b', 'c', 12.4]) == '123bc12.4'

# Generated at 2022-06-22 12:10:21.771459
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    from ansible.template import Templar
    from ansible.vars.reserved import Reserved

    # If we want to test Reserved values, we need to create them explicitly
    # as a template and then call _fail_on_undefined() on it.
    # See https://github.com/ansible/ansible/issues/70765
    def _test_reserved(expr, expected):
        rval = Reserved(expr, Templar(None))
        assert _fail_on_undefined(rval) == expected

    assert ansible_native_concat([]) is None

    # single value
    assert ansible_native_concat([42]) == 42
    assert ansible_native_concat([42.5]) == 42.5
    assert ansible_native_concat([None]) is None

# Generated at 2022-06-22 12:10:33.227972
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([NativeJinjaText('hello')]) == 'hello'
    assert ansible_native_concat(['hello']) == 'hello'
    assert ansible_native_concat(['hello', 'world']) == 'helloworld'
    assert ansible_native_concat([123, 'hello', 'world']) == '123helloworld'
    assert ansible_native_concat([123, 'hello', 'world']) == '123helloworld'
    assert ansible_native_concat(['1', '2', '3']) == 123

    # Test escaped quotes
    assert ansible_native_concat(["'hello'"]) == "'hello'"
    assert ansible_native_concat(['"hello"']) == '"hello"'
    assert ansible_native_

# Generated at 2022-06-22 12:10:41.716758
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    # Try to evaluate if a list of strings and objects
    # concatenated as a string can be parsed by ast.literal_eval
    assert ansible_native_concat(['[', '1', ', ', '2', ']']) == [1, 2]
    assert ansible_native_concat(['{"a":', '1', ', "b":', '2', '}']) == {'a': 1, 'b': 2}
    # Python's ast.literal_eval cannot evaluate set because it's mutable
    assert ansible_native_concat(['{', '1', ', ', '2', '}']) == '{1, 2}'
    assert ansible_native_concat(['[', '1', ', ', 'None', ']']) == [1, None]
    assert ansible_native_concat

# Generated at 2022-06-22 12:10:53.372756
# Unit test for function ansible_native_concat

# Generated at 2022-06-22 12:11:05.813155
# Unit test for function ansible_native_concat
def test_ansible_native_concat():
    assert ansible_native_concat([1, 2]) == 1
    assert ansible_native_concat([None]) == None
    assert ansible_native_concat([1, "", 2]) == 12
    assert ansible_native_concat(["a", "b", "c"]) == "abc"
    assert ansible_native_concat([1.5, 2.5]) == 1.5
    assert ansible_native_concat([{"x": 1}, {"y": 2}]) == {"x": 1}
    assert ansible_native_concat(["a", 3, "b", {"y": 2}]) == "a3by"
    assert ansible_native_concat(["a", 3, "b", {"y": 2}]) == "a3by"