# Automatically generated by Pynguin.
import ansible.plugins.lookup.sequence as module_0

def test_case_0():
    try:
        int_0 = 326
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '<qq0GoRv'
        var_0 = lookup_module_0.run(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'f'
        str_1 = [str_0, str_0]
        var_0 = lookup_module_0.run(str_1, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'become_plugins'
        lookup_module_0 = module_0.LookupModule(str_0)
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'1I\xa6|\x07O\x94\x85\x0cU\x022\x16@_'
        list_0 = [bytes_0, bytes_0, bytes_0]
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.run(bytes_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'start=1 end=1001/100 format=%02d'
        str_1 = [str_0]
        var_0 = {}
        var_1 = {}
        var_2 = lookup_module_0.run(str_1, var_0, **var_1)
    except BaseException:
        pass

def test_case_7():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '2-9/F:hos[%02d'
        str_1 = [str_0, str_0]
        var_0 = lookup_module_0.run(str_1, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xaf}\xd7\xde\xb16/\xf7\x86+'
        lookup_module_0 = module_0.LookupModule(bytes_0)
        str_0 = '2-9/2:host%~2Cd'
        str_1 = [str_0, str_0, str_0]
        var_0 = lookup_module_0.run(str_1, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '2-9/2:q(st%02d'
        var_0 = dict()
        var_1 = dict()
        str_1 = 'start=2 count=5 stride=-2'
        str_2 = [str_1]
        var_2 = lookup_module_0.run(str_2, str_1)
        var_3 = dict()
        var_4 = lookup_module_0.run(str_0, var_3)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\n- name: List variables that start with qz_\n  debug: msg="{{ lookup(\'varnames\', \'^qz_.+\')}}"\n  vars:\n    qz_1: hello\n    qz_2: world\n    qa_1: "I won\'t show"\n    qz_: "I won\'t show either"\n\n- name: Show all variables\n  debug: msg="{{ lookup(\'varnames\', \'.+\')}}"\n\n- name: Show variables with \'hosts\' in their names\n  debug: msg="{{ lookup(\'varnames\', \'hosts\')}}"\n\n- name: Find several related variables that end specific way\n  debug: msg="{{ lookup(\'varnames\', \'.+_zone$\', \'.+_location$\') }}"\n\n'
        lookup_module_0 = module_0.LookupModule(str_0)
        str_1 = '07}nf'
        dict_0 = {str_0: str_1, lookup_module_0: str_1, str_1: lookup_module_0, lookup_module_0: str_1}
        var_0 = lookup_module_0.run(str_1, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        str_0 = '4::host02d'
        var_1 = lookup_module_0.parse_simple_args(str_0)
        var_2 = lookup_module_0.sanity_check()
    except BaseException:
        pass