# Automatically generated by Pynguin.
import dataclasses_json.mm as module_0
import builtins as module_1
import marshmallow.fields as module_2

def test_case_0():
    try:
        int_0 = 1877
        list_0 = None
        str_0 = None
        str_1 = 'cls'
        str_2 = '6'
        dict_0 = {str_0: str_1, str_2: str_0}
        union_field_0 = module_0._UnionField(int_0, list_0, dict_0)
        list_1 = []
        schema_f_0 = module_0.SchemaF(*list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_f_0 = module_0.SchemaF()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -2746.483528739548
        var_0 = None
        list_0 = [var_0, var_0, float_0]
        var_1 = module_0.build_type(float_0, var_0, list_0, list_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        str_1 = ''
        str_2 = '}Y3wN\r=H\x0c1U)\\6{nxq'
        int_0 = -2093
        str_3 = 'nlB62xd9g@'
        dict_0 = {str_2: str_1, str_0: str_1, str_1: str_2, str_3: str_3}
        dict_1 = {int_0: dict_0, str_1: str_3, str_3: str_1}
        var_0 = module_0.schema(int_0, dict_0, dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        bool_1 = False
        str_0 = 'letter_case'
        str_1 = '(GU'
        str_2 = 'CatchAllVar'
        str_3 = '\n        Returns a 2 dictionaries: defined and undefined parameters\n        '
        dict_0 = {str_0: str_1, str_2: str_1, str_3: str_0}
        optional_0 = None
        iso_field_0 = module_0._IsoField(load_default=bool_1, required=bool_0, load_only=bool_1, error_messages=dict_0, metadata=optional_0)
        list_0 = []
        str_4 = '\n    Based on the code in the `dataclasses` module to handle optional-parens\n    decorators. See example below:\n\n    @dataclass_json\n    @dataclass_json(letter_case=LetterCase.CAMEL)\n    class Example:\n        ...\n    '
        union_field_0 = module_0._UnionField(list_0, str_4, str_2)
        dict_1 = {str_4: dict_0}
        int_0 = 618
        type_0 = module_0.build_schema(dict_0, union_field_0, dict_1, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -476.98034705927154
        iso_field_0 = module_0._IsoField(missing=float_0, dump_default=float_0)
        str_0 = '.'
        var_0 = iso_field_0.serialize(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = None
        bool_0 = None
        bool_1 = True
        optional_0 = None
        iso_field_0 = module_0._IsoField(dump_default=bool_0, attribute=optional_0)
        timestamp_field_0 = module_0._TimestampField(dump_default=var_0, required=bool_1, load_only=bool_1, dump_only=bool_1)
        str_0 = 'c/f1,$L"BY=VcS,?WfAK'
        set_0 = {iso_field_0}
        var_1 = timestamp_field_0.serialize(str_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        bool_0 = None
        bool_1 = False
        list_0 = [var_0]
        type_0 = module_1.type(*list_0)
        str_0 = 'THegYuz8@&T4D~f*HX]>'
        dict_0 = {str_0: str_0}
        str_1 = 'exclude'
        str_2 = 'Tu'
        dict_1 = {str_1: bool_0, str_2: dict_0}
        timestamp_field_0 = module_0._TimestampField(dump_default=str_0, data_key=type_0, validate=dict_0, allow_none=bool_0, dump_only=bool_1, **dict_1)
        iso_field_0 = module_0._IsoField(dump_default=bool_0, attribute=str_0)
        str_3 = 'ba1mMV+-'
        var_1 = iso_field_0.serialize(str_3, bool_1)
        str_4 = 'N:\nrUGFW,'
        var_2 = iso_field_0.serialize(str_4, str_4)
        str_5 = 'D\rMY1B'
        var_3 = timestamp_field_0.serialize(str_5, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = None
        bool_0 = None
        bool_1 = False
        optional_0 = None
        iso_field_0 = module_0._IsoField(dump_default=bool_0, attribute=optional_0)
        timestamp_field_0 = module_0._TimestampField(dump_default=var_0, required=bool_1, load_only=bool_1, dump_only=bool_1)
        str_0 = 'N:\nrUGFW,'
        optional_1 = None
        var_1 = iso_field_0.serialize(str_0, timestamp_field_0, optional_1)
        str_1 = 'qII\\l'
        var_2 = iso_field_0.serialize(str_1, str_1)
        bool_2 = True
        int_0 = -1189
        str_2 = 'D\rMY1B'
        var_3 = timestamp_field_0.serialize(str_2, bool_0)
        str_3 = '<u:qX\x0bsv'
        dict_0 = {str_0: optional_0, str_2: timestamp_field_0, str_0: int_0, str_3: str_3}
        union_field_0 = module_0._UnionField(timestamp_field_0, bool_2, int_0, **dict_0)
        iso_field_1 = module_0._IsoField(allow_none=bool_0, load_only=bool_0, dump_only=bool_0)
        dict_1 = None
        list_0 = [bool_1]
        int_1 = 3480
        type_var_0 = None
        bytearray_0 = module_1.bytearray(*list_0)
        field_0 = module_2.Field(load_only=bool_0, error_messages=dict_1, metadata=type_var_0)
        type_0 = module_1.type(*list_0)
        set_0 = {optional_0, int_1}
        int_2 = False
        var_4 = module_0.build_type(type_0, set_0, set_0, type_0, int_2)
    except BaseException:
        pass