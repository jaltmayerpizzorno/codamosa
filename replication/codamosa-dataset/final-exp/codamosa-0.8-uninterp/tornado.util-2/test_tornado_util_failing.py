# Automatically generated by Pynguin.
import tornado.util as module_0
import builtins as module_1

def test_case_0():
    try:
        object_dict_0 = module_0.ObjectDict()
        var_0 = module_0.timedelta_to_seconds(object_dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'(\x17\xb4V\xd4h\x882"\xea>\n\x19\xc9\xa9'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_1 = gzip_decompressor_0.decompress(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        str_0 = 'os.missing_module'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '0gX:'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        object_dict_0 = module_0.ObjectDict()
        str_0 = None
        str_1 = None
        str_2 = None
        base_exception_0 = None
        dict_0 = {str_0: str_0, str_1: str_1, str_2: base_exception_0}
        str_3 = 'R=\x0b,;M=XE. C-\x0cuC*`XR'
        module_0.exec_in(object_dict_0, dict_0, str_3)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'os'
        dict_0 = None
        module_0.exec_in(str_0, dict_0)
        any_0 = module_0.import_object(str_0)
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        bytes_0 = b"\x08\xacTu\x04Q\xec#\x8f\x176\xc9*\x8e'\xd8VD\x1cg"
        str_1 = 'EaEZ=}YjD_67\ru'
        arg_replacer_0 = module_0.ArgReplacer(bytes_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        var_0 = module_0.doctests()
        list_0 = None
        bytes_0 = gzip_decompressor_0.flush()
        bool_0 = True
        tuple_0 = (list_0, bool_0, list_0, bool_0)
        var_1 = module_0.raise_exc_info(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        timeout_error_0 = module_0.TimeoutError()
        var_0 = module_0.raise_exc_info(timeout_error_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ', u- #EB=X2'
        str_1 = module_0.re_unescape(str_0)
        var_0 = module_0.doctests()
        int_0 = 1412
        arg_replacer_0 = module_0.ArgReplacer(int_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        configurable_0 = module_0.Configurable()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'w22'
        arg_replacer_0 = module_0.ArgReplacer(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1412
        object_dict_0 = module_0.ObjectDict()
        list_0 = [object_dict_0, int_0, int_0, object_dict_0]
        base_exception_0 = module_1.BaseException(*list_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        str_0 = 'D>UHb&/>$\x0b'
        any_0 = object_dict_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'os.path.bas=name'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '1'
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        object_dict_0 = module_0.ObjectDict()
        object_dict_0.__setattr__(str_0, str_0)
        str_1 = module_0.re_unescape(str_0)
        optional_1 = module_0.errno_from_exception(base_exception_0)
        dict_0 = {str_0: str_1}
        sequence_0 = None
        tuple_0 = (base_exception_0, sequence_0, dict_0)
        var_0 = module_0.raise_exc_info(tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        timeout_error_0 = module_0.TimeoutError()
        object_dict_0 = module_0.ObjectDict()
        str_0 = 'F\\&&'
        str_1 = module_0.re_unescape(str_0)
        object_dict_1 = module_0.ObjectDict()
        var_0 = module_0.doctests()
        var_1 = module_0.raise_exc_info(object_dict_1)
    except BaseException:
        pass

def test_case_15():
    try:
        base_exception_0 = module_1.BaseException()
        str_0 = ";r\\auPhN'Cc+$f@p9L_+"
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = lambda x, y, z=1: (x, y, z)
        str_0 = 'y'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 1
        int_1 = 2
        int_2 = (int_0, int_1)
        var_1 = {}
        any_0 = arg_replacer_0.get_old_value(int_2, var_1)
        int_3 = (int_0,)
        any_1 = arg_replacer_0.get_old_value(int_3, int_1)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = lambda x, y, z=1: (x, y, z)
        str_0 = 'y'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        object_dict_0 = module_0.ObjectDict()
        int_0 = 0
        set_0 = {int_0, str_0, str_0}
        dict_0 = {}
        tuple_0 = arg_replacer_0.replace(arg_replacer_0, set_0, dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = lambda x, y, z=1: (x, y, z)
        str_0 = 'V'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 1
        gzip_decompressor_0 = module_0.GzipDecompressor()
        dict_0 = None
        tuple_0 = arg_replacer_0.replace(int_0, gzip_decompressor_0, dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = lambda x, y, z=1: (x, y, z)
        str_0 = 'y'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        bytes_0 = b'\x98\xe2KN\xfag\x9e\xa1]\x01l\xa4\x0c\xf5\xd2[4\xa0'
        dict_0 = {}
        tuple_0 = arg_replacer_0.replace(str_0, bytes_0, dict_0)
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_1 = b'@u\x97\x0b\xc4\xf3,\x1d\x80\x15'
        bytes_2 = gzip_decompressor_0.decompress(bytes_1)
    except BaseException:
        pass