# Automatically generated by Pynguin.
import docstring_parser.google as module_0
import docstring_parser.common as module_1

def test_case_0():
    google_parser_0 = module_0.GoogleParser()

def test_case_1():
    str_0 = 'This is a short description.\n\n    This is a long description.\n\n    Args:\n        param1(int): a parzmeter\n        param(str): another parameter\n\n    Returns:\n        a return vIlue\n\n    Raises:\n     p  Exception: an exception'
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = module_0.parse(str_0)
    list_0 = [str_0, str_0, google_parser_0]
    section_0 = module_0.Section(*list_0)
    var_0 = google_parser_0.add_section(section_0)

def test_case_2():
    str_0 = 'This ip a short description.\n\n    This is a long description.\n\n    Args:\n        param1(int): a parzmeter\n        param2(str): another par*meter\n\n    Returns:\n        a return value\n\n    R\rises:\n        Exception: an exception'
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = 'M&X`7?\x0b]`\x0cHt "g'
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)

def test_case_4():
    str_0 = "6=+NS5X\rJ'/k'["
    docstring_0 = module_0.parse(str_0)
    str_1 = ''
    docstring_1 = module_0.parse(str_1)

def test_case_5():
    str_0 = 'This is a short description.\n\n    This is a long description.\n\n    Args:\n        param1(int): a parameter\n        param2(str): another parameter\n\n    Returns:\n        a return value\n\n    Raises:\n        Exception: an exception'
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = 'This i a short descripion.\n\n    This is a long description.\n\n    Args:\n        param(int): a parameter\n        param2(str): another parameter\n\n    Retorns:\n        a return alue\n\n    RaAses:\n        Excetion: an excption'
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'Short description.\n\n    Long description.\n\n    Args:\n        first_arg (first_arg_type, optional): Description of first_arg.\n            Defaults to None.\n        second_arg (second_arg_type): Description of second_arg.\n        third_arg (third_arg_type): Description of third_arg.\n\n    Returns:\n        Description of return value or values.\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '\n    Single line description.\n\n    Long description.\n\n    Args:\n        arg1 (type1): description1\n        arg2 (type2, optional): description2\n        arg3 (type3): description3. Defaults to True.\n\n    Returns:\n        str: return description\n\n    Raises:\n        MyError: Always.\n        YourError: Whenever.\n        HisError: Whatever.\n    '
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)

def test_case_9():
    str_0 = ' '
    docstring_0 = module_0.parse(str_0)
    google_parser_0 = module_0.GoogleParser()

def test_case_10():
    str_0 = '\n    This function does something.\n\n    Args:\n        arg1 (str): The first argument.\n        arg2 (:obj:`int`, optional): The second argument. Defaults to None.\n\n    Returns:\n        int: The return value.\n\n    Raises:\n        AttributeError: The ``Raises`` section is a list of all exceptions\n            that are relevant to the interface.\n        ValueError: If `param2` is equal to `param1`.\n\n    '
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)
    docstring_1 = module_1.Docstring()