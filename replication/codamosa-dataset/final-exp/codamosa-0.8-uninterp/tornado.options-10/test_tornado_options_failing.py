# Automatically generated by Pynguin.
import tornado.options as module_0
import builtins as module_1
import typing as module_2

def test_case_0():
    try:
        str_0 = '~C!?xui8z*v%iuD!up.'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '--value=YoVoY'
        str_1 = [str_0, str_0]
        list_0 = module_0.parse_command_line(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'mi~+\x0cu6O2x N^>:}g,'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '}\r} xm.'
        str_1 = '>QA'
        dict_0 = option_parser_0.group_dict(str_1)
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '@W-@cF3-S'
        option_parser_0 = module_0.OptionParser()
        str_1 = 'Sqp|'
        option_parser_0.__setitem__(str_1, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\r'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = '--value=YoVoY'
        set_0 = option_parser_0.groups()
        option_parser_1 = module_0.OptionParser()
        list_0 = module_0.parse_command_line(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = None
        mockable_0 = option_parser_0.mockable()
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_0.__setitem__(str_0, option_parser_0)
    except BaseException:
        pass

def test_case_7():
    try:
        error_0 = module_0.Error()
        str_0 = "0'+Za@y;\\8H>"
        bool_0 = True
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        tuple_0 = None
        iterable_0 = option_parser_0.items()
        any_0 = None
        bool_1 = False
        bool_2 = False
        option_parser_0.define(str_0, any_0, bool_1, bool_2)
        module_0.define(str_0, tuple_0, str_0)
        module_0.parse_config_file(str_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'bar'
        option_parser_0.define(str_0)
        var_0 = dict(option_parser_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '.RtxnD5}\t~'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '/input/tornado/options.py'
        module_0.print_help()
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        option_parser_1 = module_0.OptionParser()
        set_1 = option_parser_1.groups()
        dict_0 = option_parser_1.as_dict()
        mockable_0 = module_0._Mockable(option_parser_1)
        option_parser_1.print_help()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '"\\N?U1S0}$mo|y_nr6'
        option_0 = module_0._Option(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '/input/tornado/log.py'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        module_0.print_help()
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        dict_0 = option_parser_0.as_dict()
        mockable_0 = module_0._Mockable(option_parser_0)
        option_parser_0.print_help()
        str_0 = '6'
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        callable_0 = None
        module_0.add_parse_callback(callable_0)
        str_0 = 'Kq{X+$dq`MM5*:=s\x0bp\r'
        option_parser_0 = module_0.OptionParser()
        set_0 = {str_0, option_parser_0, option_parser_0, str_0}
        option_parser_0.__setattr__(str_0, set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help()
        str_0 = 'efnF`NP\t.}9}fI+2KR['
        str_1 = None
        dict_0 = option_parser_0.as_dict()
        str_2 = "?I\t'P+5`"
        dict_1 = {str_1: option_parser_0}
        option_parser_1 = module_0.OptionParser()
        option_parser_1.run_parse_callbacks()
        option_0 = module_0._Option(str_2, str_2, dict_1)
        any_0 = option_0.value()
        module_0.define(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '/input/tornado/options.py'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '--value=YoVoY'
        option_parser_0 = module_0.OptionParser()
        list_0 = module_0.parse_command_line(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        module_0.print_help(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '`\nav8hU'
        bool_0 = True
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '/input/tornado/options.py'
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        dict_0 = option_parser_0.as_dict()
        bool_0 = False
        list_0 = []
        list_1 = option_parser_0.parse_command_line(list_0, bool_0)
        option_parser_1 = module_0.OptionParser()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '/input/tornado/options.py'
        bool_0 = None
        module_0.parse_config_file(str_0, bool_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        set_0 = option_parser_1.groups()
        dict_0 = option_parser_0.as_dict()
        mockable_0 = module_0._Mockable(option_parser_0)
        option_parser_2 = module_0.OptionParser()
        str_1 = 'v\\;Q*RnnG:@S"X'
        any_0 = option_parser_2.__getitem__(str_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '/input/tornado/options.py'
        bool_0 = True
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0, bool_0)
        iterable_0 = option_parser_0.items()
        option_parser_0.__setattr__(str_0, iterable_0)
    except BaseException:
        pass

def test_case_25():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        dict_0 = option_parser_0.as_dict()
        iterator_0 = option_parser_1.__iter__()
        str_0 = 'foo'
        list_0 = [str_0]
        list_1 = option_parser_0.parse_command_line(list_0)
        option_0 = module_0._Option(str_0, iterator_0, str_0, str_0, str_0, str_0)
        option_0.set(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '0{0)E\x0b'
        option_0 = module_0._Option(str_0, str_0, str_0)
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        list_0 = [str_0, str_0]
        any_0 = option_0.value()
        list_1 = [option_0]
        type_0 = module_1.type(*list_1)
        option_1 = module_0._Option(str_0, any_0, type_0, str_0, str_0, str_0)
        option_1.set(list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'foo'
        iterator_0 = option_parser_0.__iter__()
        option_0 = module_0._Option(str_0, iterator_0, str_0, str_0, str_0, str_0)
        str_1 = '%)a\nHD\x0caIL Ze&k'
        any_0 = option_0.parse(str_1)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ''
        option_parser_0 = module_0.OptionParser()
        dict_0 = {str_0: str_0, str_0: str_0}
        int_0 = None
        str_1 = '%)r$A'
        bool_0 = False
        option_parser_0.define(str_0, dict_0, int_0, str_1, bool_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        text_i_o_0 = module_2.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        str_0 = '0{0)E\x0b'
        option_0 = module_0._Option(str_0, str_0, str_0)
        option_0.set(text_i_o_1)
        text_i_o_2 = text_i_o_0.__enter__()
        option_parser_0 = module_0.OptionParser()
        str_1 = 'A'
        option_parser_1 = module_0.OptionParser()
        str_2 = None
        str_3 = 'S\x0cmo?C'
        list_0 = [str_1, str_1]
        any_0 = option_0.value()
        list_1 = option_parser_0.parse_command_line(list_0)
        iterator_0 = option_parser_1.__iter__()
        option_1 = module_0._Option(str_3, iterator_0, str_3, str_1, str_1, str_3)
        list_2 = [option_1]
        type_0 = module_1.type(*list_2)
        option_2 = module_0._Option(str_1, any_0, type_0, str_2, str_2, str_1)
        option_2.set(list_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'name'
        str_1 = 'default'
        str_2 = 'type'
        str_3 = 'help'
        str_4 = 'metavar'
        str_5 = 'multiple'
        str_6 = 'group'
        str_7 = 'callback'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0, str_1, str_2, str_3, str_4, str_5, str_6, str_7)
        str_8 = 'test_OptionParser_define running...'
        var_0 = print(str_8)
        str_9 = 'output is:'
        var_1 = print(str_9)
        var_2 = print(none_type_0)
    except BaseException:
        pass