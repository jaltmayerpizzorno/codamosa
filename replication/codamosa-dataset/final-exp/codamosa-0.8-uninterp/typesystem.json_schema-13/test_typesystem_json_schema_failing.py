# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.json_schema as module_1
import typesystem.fields as module_2
import decimal as module_3

def test_case_0():
    try:
        dict_0 = None
        str_0 = 'b([I'
        bool_0 = False
        dict_1 = {str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_1)
        field_0 = module_1.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_1.to_json_schema(field_0)
        field_1 = module_1.enum_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'if'
        str_1 = 'then'
        str_2 = 'type'
        str_3 = 'const'
        str_4 = 'boolean'
        bool_0 = True
        var_0 = {str_2: str_4, str_3: bool_0}
        str_5 = {str_2: str_1}
        var_1 = {str_0: var_0, str_1: str_5}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.if_then_else_from_json_schema(var_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        str_0 = 'if'
        dict_1 = {str_0: dict_0, str_0: str_0, str_0: dict_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_1)
        iterator_0 = schema_definitions_0.__iter__()
        field_0 = module_1.from_json_schema(dict_0, iterator_0)
        schema_definitions_1 = None
        field_1 = module_1.all_of_from_json_schema(dict_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_1.to_json_schema(field_0)
        field_1 = module_1.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        tuple_0 = module_1.get_valid_types(dict_0)
        schema_definitions_0 = None
        field_0 = module_1.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        complex_0 = None
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
        dict_1 = {complex_0: complex_0, complex_0: complex_0, complex_0: field_0}
        field_1 = module_1.not_from_json_schema(dict_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_1.to_json_schema(field_0)
        field_1 = module_1.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\x81\x9fH'
        var_0 = module_1.to_json_schema(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'oneOf'
        str_1 = {str_0: str_0}
        str_2 = {str_0: str_1}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.one_of_from_json_schema(str_2, schema_definitions_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'AO_Y] n%WT3%@'
        field_0 = module_2.Field(title=str_0)
        var_0 = module_1.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.from_json_schema(dict_0)
        var_0 = module_1.to_json_schema(field_0)
        dict_1 = None
        field_1 = module_1.from_json_schema(dict_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'type'
        str_1 = 'properties'
        str_2 = 'object'
        str_3 = 'prop'
        str_4 = '$ref'
        str_5 = '#/definitions/String'
        str_6 = {str_4: str_5}
        str_7 = {str_3: str_6}
        str_8 = 'string'
        str_9 = {str_0: str_2, str_1: str_7, str_4: str_8}
        field_0 = module_1.from_json_schema(str_9)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        field_0 = module_1.from_json_schema(bool_0)
        var_0 = module_1.to_json_schema(field_0)
        dict_0 = None
        var_1 = module_1.to_json_schema(field_0)
        var_2 = None
        var_3 = module_1.to_json_schema(var_2, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'oneOf'
        str_1 = 'not'
        str_2 = 'type'
        str_3 = 'boolean'
        str_4 = {str_2: str_3}
        str_5 = 'null'
        str_6 = {str_2: str_5}
        str_7 = [str_4, str_6]
        str_8 = 'integer'
        str_9 = {str_2: str_8}
        str_10 = {str_0: str_7, str_1: str_9}
        field_0 = module_1.from_json_schema(str_10)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'anyOf'
        dict_0 = {str_0: str_0, str_0: str_0}
        tuple_0 = module_1.get_valid_types(dict_0)
        str_1 = 'closed'
        field_0 = module_1.from_json_schema(dict_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_1 = module_1.any_of_from_json_schema(str_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_16():
    try:
        dict_0 = None
        int_0 = -837
        float_0 = module_2.Float(maximum=int_0)
        var_0 = module_1.to_json_schema(float_0)
        str_0 = None
        bool_0 = False
        dict_1 = {}
        decimal_0 = module_3.Decimal()
        dict_2 = {}
        dict_3 = {dict_0: float_0, decimal_0: dict_2, decimal_0: dict_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.type_from_json_schema(dict_3, schema_definitions_0)
        schema_definitions_1 = module_0.SchemaDefinitions(**dict_1)
        field_1 = module_1.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_17():
    try:
        string_0 = module_2.String()
        string_1 = module_2.String()
        object_0 = module_2.Object(properties=string_1)
        var_0 = module_1.to_json_schema(object_0)
    except BaseException:
        pass