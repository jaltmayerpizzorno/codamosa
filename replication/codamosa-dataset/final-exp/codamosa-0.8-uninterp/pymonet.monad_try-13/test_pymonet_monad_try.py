# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_1():
    set_0 = None
    bool_0 = True
    bool_1 = False
    try_0 = module_0.Try(bool_0, bool_1)
    var_0 = try_0.filter(set_0)
    bytes_0 = b'\x17\xa9d\x1b<S'
    list_0 = [bytes_0, set_0]
    bool_2 = try_0.__eq__(list_0)

def test_case_2():
    set_0 = None
    bool_0 = True
    bool_1 = False
    float_0 = -1102.4
    set_1 = {bool_1}
    try_0 = module_0.Try(set_1, bool_1)
    var_0 = try_0.map(float_0)
    try_1 = module_0.Try(bool_0, bool_1)
    var_1 = try_1.filter(set_0)
    var_2 = try_1.get()

def test_case_3():
    bool_0 = False
    str_0 = '*b ;\\t_u<&\nc'
    bool_1 = False
    try_0 = module_0.Try(str_0, bool_1)
    var_0 = try_0.bind(bool_0)

def test_case_4():
    bool_0 = True
    bool_1 = True
    try_0 = module_0.Try(bool_1, bool_1)
    bool_2 = False
    try_1 = module_0.Try(try_0, bool_2)
    var_0 = try_1.on_success(bool_0)

def test_case_5():
    int_0 = -1209
    bytes_0 = b'\xe2\xee\x04HuI\xd59\xed]\xc3\xbc\xcdp\xef\xe1\x04\x18'
    bool_0 = True
    try_0 = module_0.Try(bytes_0, bool_0)
    var_0 = try_0.on_fail(int_0)

def test_case_6():
    float_0 = -1123.878
    complex_0 = None
    set_0 = set()
    tuple_0 = (complex_0, set_0, float_0)
    bytes_0 = b'4fs,y\xb2K\xeb\xd9'
    bool_0 = False
    tuple_1 = (float_0, tuple_0, bytes_0, bool_0)
    try_0 = module_0.Try(tuple_1, bool_0)
    var_0 = try_0.get()

def test_case_7():
    str_0 = None
    bool_0 = True
    dict_0 = {str_0: str_0, str_0: bool_0, bool_0: str_0, str_0: bool_0}
    bytes_0 = b'r\xa2\xde\xc2w\xd4\xda\x8e\x0cX\xc7\xe7\xe6\x82'
    tuple_0 = (bytes_0,)
    bool_1 = True
    try_0 = module_0.Try(tuple_0, bool_1)
    var_0 = try_0.get_or_else(dict_0)

def test_case_8():
    float_0 = -177.046
    int_0 = -1558
    bool_0 = True
    str_0 = '9lGi}B{oC0~o@Yvc'
    dict_0 = {}
    dict_1 = {str_0: str_0, str_0: float_0, str_0: dict_0, int_0: dict_0}
    try_0 = module_0.Try(dict_1, bool_0)
    dict_2 = {}
    bool_1 = False
    try_1 = module_0.Try(dict_2, bool_1)
    bool_2 = try_1.__eq__(try_0)
    bool_3 = True
    bytes_0 = b'T"\x0f\x88\xde\xea\x85t\x95\xbb\xe6~0'
    try_2 = module_0.Try(bytes_0, bool_3)
    try_3 = module_0.Try(float_0, bool_3)
    str_1 = try_3.__str__()
    int_1 = 1621
    var_0 = try_3.on_fail(int_1)