# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        bool_0 = False
        try_0 = module_0.Try(bool_0, bool_0)
        str_0 = try_0.__str__()
        var_0 = try_0.filter(str_0)
        bool_1 = True
        try_1 = module_0.Try(bool_0, bool_1)
        var_1 = try_1.filter(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'YDA!\x0b1\\WsPZPG>'
        float_0 = 4232.98
        bool_0 = True
        try_0 = module_0.Try(float_0, bool_0)
        var_0 = try_0.map(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '"BJ(\t5{z@&i"'
        str_1 = 'FZ#mLdQY1 VSxv\n#hX'
        bool_0 = True
        try_0 = module_0.Try(str_0, bool_0)
        var_0 = try_0.bind(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = None
        bool_0 = True
        bool_1 = True
        try_0 = module_0.Try(bool_0, bool_1)
        var_0 = try_0.on_success(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        int_0 = -3334
        try_0 = module_0.Try(int_0, bool_0)
        var_0 = try_0.filter(bool_0)
        var_1 = try_0.get()
        float_0 = None
        var_2 = try_0.on_fail(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        try_0 = module_0.Try(bool_0, bool_0)
        var_0 = try_0.filter(try_0)
        bool_1 = True
        try_1 = module_0.Try(try_0, bool_1)
        var_1 = try_1.filter(try_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        try_0 = module_0.Try(bool_0, bool_0)
        str_0 = try_0.__str__()
        var_0 = try_0.get_or_else(try_0)
        var_1 = try_0.filter(str_0)
        list_0 = []
        bool_1 = True
        try_1 = module_0.Try(list_0, bool_1)
        var_2 = try_1.filter(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        bytes_0 = b'\x0c\x8c\xa8\xcbI\x83\xce{\xa3\x91@\xda\xdeQ'
        bytes_1 = b'\x89\xec\xebA\xb8\xb1\x8cf\x99\xa1\x81`\xb8?\x99Y;U7~'
        bool_0 = False
        try_0 = module_0.Try(bytes_1, bool_0)
        var_0 = try_0.map(bytes_0)
        bool_1 = False
        try_1 = module_0.Try(set_0, bool_1)
        try_2 = module_0.Try(bool_1, bool_1)
        bool_2 = try_1.__eq__(try_1)
        bool_3 = try_2.__eq__(bytes_1)
        str_0 = try_2.__str__()
        float_0 = -3694.22
        float_1 = 1087.307
        var_1 = try_1.get_or_else(float_1)
        float_2 = 718.82865
        bool_4 = False
        try_3 = module_0.Try(float_2, bool_4)
        str_1 = 'a'
        var_2 = try_3.bind(str_1)
        str_2 = try_3.__str__()
        var_3 = try_3.filter(float_0)
        var_4 = try_3.get()
        bool_5 = True
        var_5 = try_1.on_fail(bool_5)
    except BaseException:
        pass