# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 1658
    var_0 = module_0.jdump(int_0)

def test_case_2():
    bytes_0 = b'\x89\xc0Jd\x0f\xbd\xb4\xa3(\xd9Ee\xa8\xb3'
    str_0 = '\n        Adds arguments to the ssh command and displays a caller-supplied explanation of why.\n\n        :arg b_command: A list containing the command to add the new arguments to.\n            This list will be modified by this method.\n        :arg b_args: An iterable of new arguments to add.  This iterable is used\n            more than once so it must be persistent (ie: a list is okay but a\n            StringIO would not)\n        :arg explanation: A text string containing explaining why the arguments\n            were added.  It will be displayed with a high enough verbosity.\n        .. note:: This function does its work via side-effect.  The b_command list has the new arguments appended.\n        '
    var_0 = module_0.add_collection_plugins(bytes_0, str_0)

def test_case_3():
    float_0 = 1485.019594
    doc_c_l_i_0 = module_0.DocCLI(float_0)

def test_case_4():
    str_0 = '5a'
    doc_c_l_i_0 = module_0.DocCLI(str_0)
    var_0 = doc_c_l_i_0.init_parser()

def test_case_5():
    str_0 = 'http://localhost:6789'
    doc_c_l_i_0 = module_0.DocCLI(str_0)
    var_0 = doc_c_l_i_0.run()

def test_case_6():
    str_0 = 'inventory'
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    doc_c_l_i_0 = module_0.DocCLI(list_0)
    var_0 = doc_c_l_i_0.get_all_plugins_of_type(str_0)

def test_case_7():
    str_0 = '5a'
    doc_c_l_i_0 = module_0.DocCLI(str_0)
    bool_0 = True
    str_1 = '\x0b0'
    str_2 = 'to use pkcs11_provider you must specify a password/pin'
    dict_0 = {str_1: str_0, str_2: str_2}
    int_0 = -1623
    var_0 = doc_c_l_i_0.find_plugins(bool_0, dict_0, int_0)

def test_case_8():
    str_0 = 'http://localhost:6789'
    bytes_0 = b'\xb7\xff\xda\xd8\xbaK\xea\xbe:\xb5\xb8QT[\x01\xa9\xe1\xa4'
    int_0 = 1245
    str_1 = '\tM.A;8'
    list_0 = [str_1, str_1, str_1, str_0]
    doc_c_l_i_0 = module_0.DocCLI(list_0)
    var_0 = doc_c_l_i_0.format_snippet(bytes_0, int_0, str_0)
    doc_c_l_i_1 = module_0.DocCLI(str_0)
    var_1 = doc_c_l_i_1.run()

def test_case_9():
    str_0 = None
    dict_0 = {}
    str_1 = '\n    **Deprecated** Use :py:func:`platform.system` directly.\n\n    :returns: Name of the platform the module is running on in a native string\n\n    Returns a native string that labels the platform ("Linux", "Solaris", etc). Currently, this is\n    the result of calling :py:func:`platform.system`.\n    '
    int_0 = 2726
    dict_1 = {str_1: dict_0, str_0: int_0}
    set_0 = {str_0, int_0, str_1}
    float_0 = 4125.123
    doc_c_l_i_0 = module_0.DocCLI(float_0)
    var_0 = doc_c_l_i_0.add_fields(dict_0, dict_0, str_1, dict_1, set_0)

def test_case_10():
    var_0 = None
    str_0 = '.6kVDLC9XU'
    list_0 = None
    str_1 = 'RsHnC.FL_0LIj=\\-FV'
    list_1 = [var_0, var_0, var_0, var_0]
    doc_c_l_i_0 = module_0.DocCLI(list_1)
    var_1 = doc_c_l_i_0.namespace_from_plugin_filepath(str_0, list_0, str_1)