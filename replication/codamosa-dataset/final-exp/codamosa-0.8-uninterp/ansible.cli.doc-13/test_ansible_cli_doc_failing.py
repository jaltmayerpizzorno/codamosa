# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        str_0 = '2oi\n'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        float_0 = 627.0
        var_0 = doc_c_l_i_0.display_plugin_list(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = None
        int_0 = 3704
        dict_1 = {}
        plugin_not_found_0 = module_0.PluginNotFound(**dict_1)
        list_0 = [plugin_not_found_0, dict_1]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        doc_c_l_i_1 = module_0.DocCLI(doc_c_l_i_0)
        var_0 = doc_c_l_i_1.get_plugin_metadata(dict_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        float_0 = -326.6379
        str_0 = 'Filename portion of cron_file ("%s") should consist'
        int_0 = -2397
        doc_c_l_i_0 = module_0.DocCLI(int_0)
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(float_0, int_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'DM\x0c[WOTT'
        bytes_0 = b'\xdd'
        var_0 = module_0.add_collection_plugins(str_0, bytes_0)
        str_1 = '\re+]-<S2x#O&/av'
        float_0 = -1240.0642
        int_0 = -504
        set_0 = {bytes_0}
        tuple_0 = (float_0, int_0, set_0, set_0)
        bool_0 = False
        list_0 = [str_0]
        bytes_1 = b'pi\xed&\xed\xe6\xef\xe6"\x95\xc0.\x95w'
        list_1 = [bytes_0, bytes_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_1)
        var_1 = doc_c_l_i_0.format_plugin_doc(str_1, tuple_0, bool_0, list_0, int_0, bytes_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        dict_0 = {str_0: str_0}
        int_0 = 2726
        dict_1 = {str_0: dict_0, str_0: int_0}
        set_0 = {str_0, int_0, str_0}
        float_0 = 4125.123
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.add_fields(dict_0, dict_0, str_0, dict_1, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xbf*\x03w\xc7\xe7\xf1 I\xa3\xe6\xe1 \r\xd9'
        str_0 = 'keyword'
        str_1 = 'Yfi2?>mh!pJu\x0b8`,'
        str_2 = 'block_used'
        dict_0 = {str_1: str_1, str_1: str_0, str_1: str_1, str_2: bytes_0}
        set_0 = {bytes_0, bytes_0}
        doc_c_l_i_0 = module_0.DocCLI(set_0)
        var_0 = doc_c_l_i_0.get_role_man_text(str_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'SoA'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        list_0 = []
        var_0 = doc_c_l_i_0.get_man_text(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        role_mixin_0 = module_0.RoleMixin()
        var_0 = module_0.jdump(role_mixin_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2752
        float_0 = 312.51670832598285
        str_0 = 'T}>}O\t&yZEw2udJMy'
        list_0 = []
        list_1 = [int_0, int_0]
        set_0 = {float_0}
        complex_0 = None
        var_0 = module_0.add_collection_plugins(set_0, complex_0)
        doc_c_l_i_0 = module_0.DocCLI(list_1)
        var_1 = doc_c_l_i_0.format_snippet(float_0, str_0, list_0)
        str_1 = 'lookup'
        var_2 = doc_c_l_i_0.format_snippet(int_0, str_1, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'inventory'
        tuple_0 = ()
        list_0 = [tuple_0, str_0, tuple_0, tuple_0, tuple_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        dict_0 = {str_0: list_0}
        bytes_0 = b'\xa3O\xa4\x85E\xab80'
        var_0 = doc_c_l_i_0.get_man_text(dict_0, bytes_0)
    except BaseException:
        pass