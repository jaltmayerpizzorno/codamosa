# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        bytes_0 = b'\x90'
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '}Il~:H7flH**\x0b1('
        str_1 = 'month'
        str_2 = 'G7 5s8'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_0}
        int_0 = 2
        int_1 = 1249
        str_3 = 'R27{LS~?S\np'
        token_0 = module_0.Token(dict_0, int_0, int_1, str_3)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        bool_0 = False
        int_0 = 2326
        token_0 = module_0.Token(bool_0, int_0, int_0)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ',-)'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        dict_token_0 = module_0.DictToken(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x1d\x18\t\x88\x95<\r\x1a>4\xd5\x8a\xc5\xa1'
        int_0 = 2663
        int_1 = 863
        scalar_token_0 = module_0.ScalarToken(bytes_0, int_0, int_1)
        int_2 = -2027
        int_3 = -2407
        list_token_0 = module_0.ListToken(scalar_token_0, int_2, int_3)
        int_4 = -350
        int_5 = 286
        scalar_token_1 = module_0.ScalarToken(bytes_0, int_4, int_5)
        dict_0 = {}
        list_0 = [dict_0]
        list_1 = [list_0]
        bytes_1 = b'"\xc6\xb9\xe9\xc7R\x1f\xf0'
        int_6 = -3613
        scalar_token_2 = module_0.ScalarToken(bytes_1, int_6, int_6)
        bool_0 = False
        int_7 = 2389
        scalar_token_3 = module_0.ScalarToken(bool_0, int_7, int_7)
        int_8 = -929
        int_9 = 5
        token_0 = module_0.Token(scalar_token_2, int_9, int_4)
        int_10 = 682
        str_0 = '[l2Cot\r!Go%W^Gw7<m'
        scalar_token_4 = module_0.ScalarToken(scalar_token_3, int_8, int_10, str_0)
        str_1 = token_0.__repr__()
        int_11 = None
        list_token_1 = module_0.ListToken(int_11, int_6, int_1)
        token_1 = token_0.lookup_key(list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        int_0 = 6
        str_0 = 'W;ef'
        token_0 = module_0.Token(list_0, int_0, int_0, str_0)
        bool_0 = token_0.__eq__(list_0)
        bool_1 = token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/\\]I'
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        dict_token_0 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = None
        int_0 = 1
        int_1 = 3
        str_0 = 'ab'
        scalar_token_0 = module_0.ScalarToken(var_0, int_0, int_1, str_0)
        int_2 = 3
        scalar_token_1 = module_0.ScalarToken(var_0, int_2, int_2, str_0)
        bool_0 = scalar_token_0.__eq__(scalar_token_1)
        scalar_token_2 = module_0.ScalarToken(int_0, int_0, int_1, str_0)
        bool_1 = scalar_token_2.__eq__(scalar_token_2)
        scalar_token_3 = module_0.ScalarToken(int_0, int_0, int_1, str_0)
        scalar_token_4 = [scalar_token_3]
        list_token_0 = module_0.ListToken(scalar_token_4, int_0, int_1, str_0)
        scalar_token_5 = [scalar_token_1]
        list_token_1 = module_0.ListToken(scalar_token_5, int_0, int_1, str_0)
        any_0 = scalar_token_4.__hash__()
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        int_0 = None
        bool_0 = True
        scalar_token_0 = module_0.ScalarToken(bool_0, int_0, int_0)
        any_0 = scalar_token_0.__hash__()
        list_0 = [dict_0, dict_0, dict_0]
        dict_token_0 = module_0.DictToken(*list_0)
        int_1 = -3590
        str_0 = '@i3\\E'
        token_0 = module_0.Token(dict_0, int_0, int_1, str_0)
        int_2 = -2210
        list_token_0 = module_0.ListToken(list_0, int_0, int_2)
        bool_1 = scalar_token_0.__eq__(list_token_0)
    except BaseException:
        pass