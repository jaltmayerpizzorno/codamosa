# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0
import ansible.utils.display as module_1
import builtins as module_2

def test_case_0():
    try:
        float_0 = -3307.417
        bool_0 = True
        var_0 = module_0.unique(float_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 60
        list_0 = [int_0, int_0]
        list_1 = [list_0, int_0]
        tuple_0 = (list_1,)
        int_1 = -335
        float_0 = 2562.8
        var_0 = module_0.union(tuple_0, int_1, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b''
        float_0 = 872.71206
        var_0 = module_0.min(bytes_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'I'
        var_0 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "u=Q'?\x0cI7`uZ"
        list_0 = [str_0, str_0, str_0, str_0]
        tuple_0 = (list_0,)
        float_0 = 2621.568
        var_0 = module_0.power(tuple_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/'
        var_0 = module_0.inversepower(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x1e\xa2\xff#@\xean\xfc\x9d\xd0]7"r\x80\x05\x94\xf4'
        list_0 = [bytes_0, bytes_0]
        var_0 = module_0.human_readable(bytes_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '.qk\x0cOV-57y+|8N-O76+['
        var_0 = module_0.human_to_bytes(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'The human_to_bytes function should return the expected number of bytes.'
        list_0 = [str_0]
        int_0 = -35
        var_0 = module_0.rekey_on_member(list_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -1516.9706
        str_0 = ''
        list_0 = [float_0]
        var_0 = module_0.rekey_on_member(float_0, str_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = None
        bool_0 = True
        var_0 = module_0.logarithm(bool_0)
        var_1 = module_0.rekey_on_member(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        var_0 = module_0.logarithm(bool_0)
        str_0 = '^z~n#ED),'
        var_1 = module_0.rekey_on_member(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        int_0 = 15
        bytes_0 = b'\xcco\x9a\xf2\xaf\x07\nF"'
        complex_0 = None
        var_1 = module_0.intersect(int_0, bytes_0, complex_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'w\x0cWcqjMdI?!1,9`c'
        str_1 = 'xp,zb}[\x0b\nC(0l[Iikt'
        dict_0 = {str_1: str_0}
        str_2 = 't'
        list_0 = [str_0, str_2]
        var_0 = module_0.symmetric_difference(dict_0, str_2, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = None
        set_0 = {int_0, int_0, int_0, int_0}
        str_0 = 'A\tA"IA??0MJ?<qs"vW'
        str_1 = 'Ly.&PtVT^|87Y'
        var_0 = module_0.symmetric_difference(set_0, str_0, str_1)
        bool_0 = True
        set_1 = {bool_0, bool_0, bool_0}
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'\x06\xde\x07.t\r\x84\x1e\xf0\xe4a\x91\x10\xbc\x8f\x80\xb8\xd0\x83'
        float_0 = 554.8584997298871
        list_0 = [bytes_0, bytes_0]
        list_1 = [list_0]
        var_1 = module_0.min(float_0, list_1)
        list_2 = [set_1, bool_0, bytes_0]
        var_2 = module_0.symmetric_difference(bytes_0, list_2, list_2)
        filter_module_1 = module_0.FilterModule()
        var_3 = module_0.rekey_on_member(filter_module_1, set_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\tsg0P4bKdx9{'
        display_0 = None
        str_1 = '>hWpFip>8.'
        set_0 = {str_0, str_1}
        var_0 = module_0.difference(display_0, str_1, set_0)
        var_1 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        bytes_0 = b'O\xa1\xc4\xd4\x1c\x82\x92\xde\x01\xa7'
        var_0 = module_0.intersect(set_0, set_0, bytes_0)
        var_1 = module_0.inversepower(set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        bool_0 = True
        var_0 = module_0.unique(dict_0, dict_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        filter_module_0 = module_0.FilterModule()
        int_0 = 1737
        bool_0 = False
        list_0 = [int_0, bool_0]
        var_0 = module_0.unique(int_0, int_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'Sends a OPTIONS request. Returns :class:`HTTPResponse` object.\n\n        :arg url: URL to request\n        :kwarg \\*\\*kwargs: Optional arguments that ``open`` takes.\n        :returns: HTTPResponse\n        '
        bool_0 = False
        var_0 = module_0.inversepower(str_0, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '$9W\x0bm6S."'
        float_0 = 1428.852
        set_0 = {filter_module_0, float_0, float_0, str_0, str_0}
        bytes_0 = b'\xea\x96\xbf\x7ft\x99\xb0\x02'
        str_1 = 'VR?&rw5wYL6y'
        dict_0 = {str_1: set_0, str_1: str_1, str_1: bytes_0, str_0: bytes_0}
        str_2 = 'S'
        str_3 = 'n$BCs'
        var_0 = module_0.difference(dict_0, str_2, str_3)
        list_0 = [set_0, filter_module_0, filter_module_0, float_0]
        filter_module_1 = module_0.FilterModule(*list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'\x1e\xdc\x84\xd8+\x87'
        int_0 = -1113
        var_0 = module_0.human_readable(bytes_0, filter_module_0, int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0}
        list_0 = [bool_0, set_0, bool_0]
        str_0 = '30 =r>DByn_'
        var_0 = module_0.unique(list_0, str_0)
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'\x06\xde\x07.t\r\x84\x1e\xf0\xe4a\x91\x10\xbc\x8f\x80\xb8\xd0\x83'
        float_0 = 554.8584997298871
        list_1 = [set_0, bool_0, bytes_0]
        var_1 = module_0.symmetric_difference(bytes_0, list_1, list_1)
        bytes_1 = b'l\xa1'
        var_2 = module_0.max(str_0, bytes_1)
        filter_module_1 = module_0.FilterModule()
        list_2 = [set_0, filter_module_1, float_0]
        dict_0 = {str_0: list_2}
        list_3 = [str_0, var_0, var_0, bool_0]
        var_3 = module_0.rekey_on_member(dict_0, list_3)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = False
        var_0 = module_0.logarithm(bool_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = True
        var_0 = module_0.logarithm(bool_0)
        str_0 = '^z~n#ED),'
        list_0 = []
        display_0 = module_1.Display()
        var_1 = module_0.rekey_on_member(list_0, display_0)
        var_2 = module_0.human_to_bytes(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 2131
        str_0 = 'xp,zb}[\x0b\nC(0l[Iikt'
        set_0 = {int_0, str_0}
        var_0 = module_0.human_to_bytes(int_0, set_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = -1801.0471
        float_1 = 2316.38
        var_0 = module_0.power(float_0, float_1)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'a'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_2 = [str_1, str_0]
        str_3 = 'overwrite'
        var_0 = module_0.rekey_on_member(str_2, str_1, str_3)
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0}
        list_0 = [bool_0, set_0, bool_0]
        str_0 = '30 =r>DByn_'
        var_0 = module_0.unique(list_0, str_0)
        float_0 = 554.8584997298871
        dict_0 = {str_0: list_0, str_0: float_0, str_0: str_0}
        var_1 = module_0.max(dict_0, str_0)
        list_1 = module_2.list()
        var_2 = module_0.logarithm(float_0)
        tuple_0 = (dict_0,)
        var_3 = module_0.rekey_on_member(tuple_0, float_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0}
        list_0 = [bool_0, set_0, bool_0]
        str_0 = '30 =r>DByn_'
        var_0 = module_0.unique(list_0, str_0)
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'\x06\xde\x07.t\r\x84\x1e\xf0\xe4aL\x10\xbc\xf9\x80\xb8\xd0\x83'
        list_1 = []
        var_1 = module_0.symmetric_difference(filter_module_0, list_1, list_0)
        float_0 = 554.8584997298871
        var_2 = filter_module_0.filters()
        list_2 = [bytes_0, bytes_0]
        list_3 = [list_2]
        var_3 = module_0.min(float_0, list_3)
        list_4 = [set_0, bool_0, bytes_0]
        str_1 = 'I7-'
        dict_0 = {str_0: list_0, str_0: float_0, str_0: str_1}
        var_4 = module_0.max(dict_0, str_1)
        var_5 = module_0.symmetric_difference(bytes_0, list_4, list_4)
        filter_module_1 = module_0.FilterModule()
        display_0 = module_1.Display(dict_0)
        var_6 = module_0.logarithm(float_0)
        tuple_0 = (dict_0,)
        var_7 = module_0.rekey_on_member(tuple_0, float_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = ''
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_2 = [str_1, str_1, str_0, str_1, str_0, str_1]
        str_3 = 'overwrite'
        var_0 = module_0.rekey_on_member(str_2, str_0, str_3)
    except BaseException:
        pass

def test_case_31():
    try:
        list_0 = []
        int_0 = 10
        var_0 = module_0.logarithm(list_0, int_0)
    except BaseException:
        pass