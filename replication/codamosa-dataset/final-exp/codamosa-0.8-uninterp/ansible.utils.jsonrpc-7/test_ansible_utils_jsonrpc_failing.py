# Automatically generated by Pynguin.
import ansible.utils.jsonrpc as module_0

def test_case_0():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        float_0 = None
        var_0 = json_rpc_server_0.handle_request(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{"jsonrpc":"2.0", "method":"_run", "params":[[{"name":"R1","port":22,"passwd":"lab123"}], {"task": {"name":"config replace", "src":"R1_new.cfg"}}], "id":0}'
        var_0 = json_rpc_server_0.handle_request(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0]
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.register(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.parse_error()
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.invalid_params(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.internal_error()
    except BaseException:
        pass

def test_case_6():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{"jsonrpc": "2.0", "method": "test", "params": [{"key": "value"}], "id": 1}'
        var_0 = json_rpc_server_0.handle_request(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '{"jsonrpc": "2.0", "method": "rpc.echo", "params": {"001": 123}}'
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.handle_request(str_0)
    except BaseException:
        pass