# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        float_0 = -1415.0
        int_0 = 903
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(float_0, int_0, int_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        import_processor_0 = module_0.ImportProcessor()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, import_processor_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        str_1 = 'Rl2a{z|O;C9Q'
        float_0 = 2325.0
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_1, float_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        var_1 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        str_0 = ''
        dict_0 = {}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, dict_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(tuple_0)
        var_1 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = {}
        str_0 = 'C,e6.Tpg\\=z|uo'
        scope_replacer_0 = module_0.ScopeReplacer(var_0, var_0, str_0)
        var_1 = scope_replacer_0.__setattr__(scope_replacer_0, scope_replacer_0)
    except BaseException:
        pass

def test_case_6():
    try:
        import_processor_0 = module_0.ImportProcessor()
        import_processor_1 = module_0.ImportProcessor(import_processor_0)
        scope_replacer_0 = None
        bool_0 = False
        str_0 = 'W`BE*.{2Q'
        list_0 = [scope_replacer_0, str_0]
        dict_0 = {import_processor_1: scope_replacer_0}
        import_replacer_0 = module_0.ImportReplacer(scope_replacer_0, bool_0, str_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xc2'
        int_0 = 196
        import_replacer_0 = module_0.ImportReplacer(bytes_0, bytes_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -680
        import_processor_0 = module_0.ImportProcessor(int_0)
        str_0 = "\n    Update and/or insert query parameters in a URL.\n\n    >>> update_query_params('http://example.com?foo=bar&biz=baz', dict(foo='stuff'))\n    'http://example.com?...foo=stuff...'\n\n    :param url: URL\n    :type url: str\n    :param kwargs: Query parameters\n    :type kwargs: dict\n    :return: Modified URL\n    :rtype: str\n    "
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\n    from bzrlib import (\n        config,\n        )\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Suo G>]H"73QuBU0{\x0b'
        dict_0 = {str_0: str_0, str_0: str_0}
        float_0 = -1153.0608680562073
        dict_1 = {}
        bool_0 = True
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, bool_0)
        import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, dict_1, illegal_use_of_scope_replacer_0)
        var_0 = module_0.lazy_import(illegal_use_of_scope_replacer_0, import_replacer_0, dict_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n    from bzrlib import (\n      i config,\n        )\n y  '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'xG\n#?~'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '(ql.-Jc\x0c<u|~dx#tQiL'
        tuple_0 = (str_0,)
        int_0 = 1000
        var_0 = module_0.lazy_import(tuple_0, str_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'rK+>'
        tuple_0 = (str_0,)
        str_1 = '\n    Efficiently advance an iterator n-steps ahead. If n is none, consume entirely.\n    Consumes at C level (and therefore speed) in cpython.\n    '
        int_0 = 54
        var_0 = module_0.lazy_import(tuple_0, str_1, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = {}
        var_1 = lambda o, s, n: o
        scope_replacer_0 = module_0.ScopeReplacer(var_0, var_1, var_1)
        var_2 = scope_replacer_0.__setattr__(var_1, scope_replacer_0)
    except BaseException:
        pass

def test_case_16():
    try:
        illegal_use_of_scope_replacer_0 = None
        str_0 = 'Suo G>]H"73QuBU0{\x0b'
        dict_0 = {str_0: str_0}
        float_0 = -1117.0
        dict_1 = {}
        import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, dict_1, illegal_use_of_scope_replacer_0)
        var_0 = module_0.lazy_import(illegal_use_of_scope_replacer_0, import_replacer_0, dict_1)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = {}
        var_1 = lambda o, s, n: o
        import_processor_0 = None
        dict_0 = {var_1: var_0, var_1: var_0, var_1: var_1}
        list_0 = [var_1, var_1, var_0]
        int_0 = -1
        float_0 = -591.15784
        bool_0 = False
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, float_0, bool_0)
        bytes_0 = b'l\xe9\x84\xc3S\xcd\xbe\xfe\x11\x1bX'
        import_replacer_0 = module_0.ImportReplacer(list_0, int_0, illegal_use_of_scope_replacer_0, bytes_0)
        str_0 = ")T'\n3\nKp"
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, str_0)
        var_2 = scope_replacer_0.__getattribute__(import_processor_0)
    except BaseException:
        pass