# Automatically generated by Pynguin.
import semantic_release.hvcs as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '/HmU-s<LBqS7$4m.'
    gitlab_0 = module_0.Gitlab()
    token_auth_0 = module_0.TokenAuth(gitlab_0)
    var_0 = token_auth_0.__eq__(str_0)
    github_0 = module_0.Github()
    session_0 = github_0.session()

def test_case_2():
    optional_0 = module_0.get_token()
    str_0 = 'Sd'
    str_1 = 'F'
    bool_0 = module_0.upload_to_release(str_0, str_0, str_0, str_1)
    list_0 = [bool_0]
    token_auth_0 = module_0.TokenAuth(list_0)
    str_2 = None
    token_auth_1 = module_0.TokenAuth(str_2)
    float_0 = -248.641
    var_0 = token_auth_0.__ne__(float_0)
    token_auth_2 = module_0.TokenAuth(token_auth_1)
    optional_1 = module_0.get_token()

def test_case_3():
    optional_0 = module_0.get_domain()

def test_case_4():
    github_0 = module_0.Github()
    str_0 = github_0.api_url()

def test_case_5():
    github_0 = module_0.Github()
    session_0 = github_0.session()

def test_case_6():
    var_0 = None
    bool_0 = module_0.check_build_status(var_0, var_0, var_0)

def test_case_7():
    str_0 = None
    str_1 = '\n    Parse a changelog dictionary for the given version.\n\n    :param from_version: The version before where the changelog starts.\n                         The changelog will be generated from the commit after this one.\n    :param to_version: The last version included in the changelog.\n    :return: A dict with changelog sections and commits\n    '
    bool_0 = module_0.post_changelog(str_0, str_0, str_1, str_1)

def test_case_8():
    str_0 = "'H ns<1zf*moP"
    bool_0 = module_0.upload_to_release(str_0, str_0, str_0, str_0)

def test_case_9():
    gitlab_0 = module_0.Gitlab()
    str_0 = gitlab_0.domain()

def test_case_10():
    gitlab_0 = module_0.Gitlab()
    str_0 = gitlab_0.api_url()

def test_case_11():
    optional_0 = module_0.get_token()
    gitlab_0 = module_0.Gitlab()
    str_0 = gitlab_0.domain()
    base_0 = module_0.get_hvcs()
    optional_1 = module_0.get_domain()
    base_1 = module_0.get_hvcs()

def test_case_12():
    bool_0 = module_0.check_token()
    str_0 = None
    str_1 = 'eX'
    str_2 = '9!/n]kt\t$U1@V3!AA='
    bool_1 = module_0.post_changelog(str_0, str_1, str_0, str_2)

def test_case_13():
    list_0 = []
    gitlab_0 = module_0.Gitlab(*list_0)
    optional_0 = gitlab_0.token()
    str_0 = 'sOStimuT<u?BgzBKP'
    str_1 = "' -p '"
    str_2 = None
    bool_0 = module_0.post_changelog(str_0, str_1, str_1, str_2)
    base_0 = module_0.Base(*list_0)
    str_3 = gitlab_0.domain()
    str_4 = ']<[C['
    token_auth_0 = module_0.TokenAuth(str_4)