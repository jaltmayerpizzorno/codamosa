# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = -1042
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)

def test_case_2():
    float_0 = -683.726103
    bool_0 = False
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.to_either()

def test_case_3():
    var_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(var_0, bool_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)

def test_case_4():
    list_0 = None
    bytes_0 = b'%'
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.ap(list_0)

def test_case_5():
    bytes_0 = b'\xbf\x81Ot\x07O\x08\xbb\xcd\x9b\xa8>\x8eA\x89\xec\x94~\x17'
    bytes_1 = b'\xeb\xf7\x913fd-f\xb8P\xd8\xfe\x96h\xb6\xcf62'
    bool_0 = True
    maybe_0 = module_0.Maybe(bytes_1, bool_0)
    var_0 = maybe_0.map(bytes_0)

def test_case_6():
    int_0 = -5763
    str_0 = 'JLYB}(vJ`2O8d<x9(=]x'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.filter(int_0)

def test_case_7():
    var_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(var_0, bool_0)
    str_0 = 'G*^k4Z6\t'
    var_1 = maybe_0.get_or_else(str_0)
    object_0 = module_1.object()
    bool_1 = maybe_0.__eq__(object_0)

def test_case_8():
    bytes_0 = b"\x02P7(j\xb0\x0f'\x0e\xa5\x8a"
    set_0 = {bytes_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_either()

def test_case_9():
    int_0 = -1000
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_box()

def test_case_10():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_box()

def test_case_11():
    str_0 = '\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        '
    set_0 = {str_0, str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.to_try()
    str_1 = '@&WsK29tDA@g^ioHvh}k'
    dict_0 = {str_0: var_0, str_0: str_0, str_1: var_0}
    var_1 = maybe_0.map(dict_0)
    var_2 = maybe_0.to_try()
    var_3 = maybe_0.to_validation()
    object_0 = module_1.object()
    bytes_0 = b'\x93\x19\xffa\xe5\x92}\xbfR\xb0d\xbc:'
    list_0 = [set_0, object_0, var_0, bytes_0]
    var_4 = maybe_0.get_or_else(list_0)
    str_2 = '@2^2k'
    var_5 = maybe_0.bind(str_2)
    callable_0 = None
    var_6 = maybe_0.bind(callable_0)

def test_case_12():
    int_0 = 5
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    bool_1 = True
    maybe_2 = module_0.Maybe(int_0, bool_1)
    maybe_3 = module_0.Maybe(int_0, bool_1)
    maybe_4 = module_0.Maybe(int_0, bool_0)
    maybe_5 = module_0.Maybe(int_0, bool_1)
    var_0 = maybe_4 == maybe_5
    maybe_6 = module_0.Maybe(int_0, bool_0)
    var_1 = None
    maybe_7 = module_0.Maybe(var_1, bool_0)
    var_2 = maybe_6 == maybe_7
    maybe_8 = module_0.Maybe(int_0, bool_1)
    maybe_9 = module_0.Maybe(var_1, bool_1)
    var_3 = maybe_8 == maybe_9