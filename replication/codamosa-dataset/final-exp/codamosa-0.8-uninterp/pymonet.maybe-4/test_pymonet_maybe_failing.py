# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = ''
        bool_0 = False
        maybe_0 = module_0.Maybe(bool_0, bool_0)
        object_0 = module_1.object()
        bool_1 = maybe_0.__eq__(object_0)
        var_0 = maybe_0.map(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        object_0 = module_1.object()
        tuple_0 = ()
        bool_0 = True
        set_0 = {bool_0, tuple_0, bool_0, bool_0}
        bool_1 = True
        maybe_0 = module_0.Maybe(set_0, bool_1)
        var_0 = maybe_0.to_try()
        maybe_1 = module_0.Maybe(tuple_0, bool_0)
        float_0 = 1296.42735
        var_1 = maybe_1.bind(float_0)
        var_2 = maybe_0.to_try()
        var_3 = maybe_1.map(object_0)
    except BaseException:
        pass

def test_case_2():
    try:
        object_0 = module_1.object()
        float_0 = 2698.039
        bool_0 = False
        maybe_0 = module_0.Maybe(float_0, bool_0)
        var_0 = maybe_0.ap(object_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = None
        bool_0 = False
        maybe_0 = module_0.Maybe(var_0, bool_0)
        object_0 = None
        var_1 = maybe_0.get_or_else(object_0)
        var_2 = maybe_0.to_either()
        callable_0 = None
        var_3 = maybe_0.map(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        object_0 = None
        list_0 = []
        bool_0 = True
        maybe_0 = module_0.Maybe(list_0, bool_0)
        bool_1 = False
        maybe_1 = module_0.Maybe(maybe_0, bool_1)
        bool_2 = maybe_1.__eq__(object_0)
        var_0 = None
        bool_3 = None
        maybe_2 = module_0.Maybe(var_0, bool_3)
        var_1 = maybe_2.to_lazy()
        maybe_3 = module_0.Maybe(var_0, bool_3)
        maybe_4 = module_0.Maybe(var_0, bool_3)
        str_0 = None
        var_2 = maybe_3.map(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        object_0 = None
        list_0 = []
        bool_0 = True
        maybe_0 = module_0.Maybe(list_0, bool_0)
        bool_1 = False
        maybe_1 = module_0.Maybe(maybe_0, bool_1)
        bool_2 = maybe_1.__eq__(object_0)
        var_0 = None
        maybe_2 = module_0.Maybe(var_0, bool_0)
        var_1 = maybe_2.to_lazy()
        maybe_3 = module_0.Maybe(var_0, bool_2)
        maybe_4 = module_0.Maybe(var_0, bool_0)
        str_0 = None
        var_2 = maybe_3.map(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = None
        bool_0 = False
        maybe_0 = module_0.Maybe(var_0, bool_0)
        float_0 = -116.9
        bool_1 = True
        maybe_1 = module_0.Maybe(float_0, bool_1)
        var_1 = maybe_1.to_try()
        var_2 = maybe_1.map(maybe_1)
        object_0 = module_1.object()
        bool_2 = True
        var_3 = maybe_1.to_lazy()
        maybe_2 = module_0.Maybe(maybe_1, bool_2)
        bool_3 = maybe_2.__eq__(object_0)
        var_4 = None
        var_5 = maybe_1.map(var_4)
        var_6 = None
        var_7 = maybe_1.to_box()
        var_8 = maybe_1.to_validation()
        callable_0 = None
        var_9 = maybe_1.to_try()
        bool_4 = False
        maybe_3 = module_0.Maybe(var_6, bool_4)
        var_10 = maybe_1.filter(callable_0)
        set_0 = set()
        var_11 = maybe_0.get_or_else(set_0)
        maybe_4 = module_0.Maybe(var_6, bool_0)
        var_12 = maybe_4.to_try()
        var_13 = maybe_1.to_either()
        var_14 = maybe_0.filter(callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '#'
        bool_0 = False
        maybe_0 = module_0.Maybe(str_0, bool_0)
        var_0 = maybe_0.to_validation()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -1624
        str_0 = '\n        Returns successful Validation with value and empty errors list.\n\n        :params value: value to store in Validation\n        :type value: A\n        :returns: Successful Validation\n        :rtype: Validation[A, []]\n        '
        bool_0 = False
        maybe_0 = module_0.Maybe(str_0, bool_0)
        var_0 = maybe_0.to_either()
        set_0 = {str_0, int_0}
        var_1 = maybe_0.filter(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -844
        bool_0 = False
        object_0 = module_1.object()
        dict_0 = {int_0: int_0, bool_0: bool_0, bool_0: int_0, bool_0: int_0}
        maybe_0 = module_0.Maybe(dict_0, bool_0)
        bool_1 = maybe_0.__eq__(object_0)
        maybe_1 = module_0.Maybe(int_0, bool_0)
        list_0 = []
        var_0 = maybe_1.bind(list_0)
    except BaseException:
        pass