# Automatically generated by Pynguin.
import pytutils.env as module_0
import collections as module_1

def test_case_0():
    generator_0 = module_0.parse_env_file_contents()

def test_case_1():
    str_0 = "?\x0b'~=iK#5\rpYW@sg"
    str_1 = module_0.expand(str_0)

def test_case_2():
    str_0 = "\n    Proxies mutable access to another mapping and allows for attribute-style access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'test': True}>}>\n\n    "
    generator_0 = module_0.parse_env_file_contents(str_0)
    ordered_dict_0 = module_0.load_env_file(str_0, generator_0)

def test_case_3():
    str_0 = 'THISIS=~/a/test'
    str_1 = [str_0]
    generator_0 = module_0.parse_env_file_contents(str_1)
    var_0 = tuple(generator_0)
    str_2 = "THISIS='~/a/test'"
    str_3 = [str_2]
    generator_1 = module_0.parse_env_file_contents(str_3)
    var_1 = tuple(generator_1)
    str_4 = 'THISIS="~/a/test"'
    str_5 = [str_4]
    generator_2 = module_0.parse_env_file_contents(str_5)
    var_2 = tuple(generator_2)
    str_6 = 'THISIS="~/a/test\ntest2"'
    str_7 = [str_6]
    generator_3 = module_0.parse_env_file_contents(str_7)
    var_3 = tuple(generator_3)

def test_case_4():
    str_0 = 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST'
    str_1 = [str_0, str_0, str_0]
    generator_0 = module_0.parse_env_file_contents(str_1)
    var_0 = list(generator_0)

def test_case_5():
    str_0 = 'TEST=${HOME}/yeee'
    str_1 = 'V"\\-D&kZ3zMy'
    str_2 = 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST'
    str_3 = [str_0, str_1, str_2]
    var_0 = None
    ordered_dict_0 = module_0.load_env_file(str_3, var_0)
    ordered_dict_1 = module_1.OrderedDict()

def test_case_6():
    str_0 = 'TEST=${HOME}/yeee'
    str_1 = 'THISIS=~/a/test'
    str_2 = 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST'
    str_3 = [str_0, str_1, str_2]
    var_0 = dict()
    ordered_dict_0 = module_0.load_env_file(str_3, var_0)