# Automatically generated by Pynguin.
import string_utils.generation as module_0

def test_case_0():
    try:
        int_0 = -394
        bool_0 = True
        str_0 = module_0.uuid(bool_0)
        generator_0 = module_0.roman_range(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -35
        str_0 = module_0.random_string(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -2130
        str_0 = module_0.secure_random_hex(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 2972
        generator_0 = module_0.roman_range(int_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1930
        int_1 = -2789
        generator_0 = module_0.roman_range(int_0, int_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 7
        generator_0 = module_0.roman_range(int_0)
        var_0 = list(generator_0)
        int_1 = 1
        int_2 = -1
        generator_1 = module_0.roman_range(int_1, int_0, int_2)
        var_1 = list(generator_1)
        int_3 = None
        generator_2 = module_0.roman_range(int_3)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = None
        str_0 = module_0.random_string(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 517
        str_0 = module_0.random_string(int_0)
        int_1 = None
        str_1 = module_0.secure_random_hex(int_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1
        int_1 = -1
        int_2 = 3999
        generator_0 = module_0.roman_range(int_2)
        var_0 = list(generator_0)
        var_1 = range(int_0, int_1)
        var_2 = [roman_encode(i) for i in var_1]
        generator_1 = module_0.roman_range(int_0, int_2)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 7
        generator_0 = module_0.roman_range(int_0)
        var_0 = list(generator_0)
        var_1 = list(generator_0)
        generator_1 = module_0.roman_range(int_0)
        int_1 = 4000
        var_2 = range(int_1, int_1)
        var_3 = [roman_encode(i) for i in var_2]
        generator_2 = module_0.roman_range(int_0, int_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2
        generator_0 = module_0.roman_range(int_0)
        var_0 = list(generator_0)
        int_1 = 915
        int_2 = -1
        generator_1 = module_0.roman_range(int_1, int_0, int_2)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 10
        int_1 = 1
        int_2 = -2
        generator_0 = module_0.roman_range(int_1, int_0, int_2)
        var_0 = next(generator_0)
        var_1 = next(generator_0)
        var_2 = next(generator_0)
        var_3 = next(var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 7
        generator_0 = module_0.roman_range(int_0)
        var_0 = list(generator_0)
        int_1 = 1
        int_2 = -3985
        generator_1 = module_0.roman_range(int_1, int_0, int_2)
    except BaseException:
        pass