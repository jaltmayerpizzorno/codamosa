# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0
import collections as module_1

def test_case_0():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_0 = 'AI18\n\nlu9r)\x0c'
        list_0 = [str_0]
        var_0 = module_0.find_unresolved_requires(str_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -848
        tuple_0 = (int_0, int_0)
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        base_fact_collector_0 = module_0.BaseFactCollector(tuple_0, int_0)
        var_0 = base_fact_collector_0.collect_with_namespace()
        var_1 = module_0.collector_classes_from_gather_subset(int_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b"@\x94\x9a\x84\xd6n0'\xd6orm\xae\xf7\x8c>\xfe\x9a\xa2\x9c"
        str_0 = None
        var_0 = module_0.collector_classes_from_gather_subset(bytes_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = '+l Y!\t777etjQ;pLe'
        var_1 = module_0.build_fact_id_to_collector_map(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'SR'
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_0 = module_0.find_unresolved_requires(str_0, unresolved_fact_dep_0)
    except BaseException:
        pass

def test_case_5():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        int_0 = None
        list_0 = [int_0, cycle_found_in_fact_deps_0]
        dict_0 = {}
        var_0 = module_0.resolve_requires(list_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'yhbWvi 6\r'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.build_dep_data(dict_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_0 = '4?wZ)H7h_)M{*\t*v.'
        str_1 = 'sms5y?"'
        var_0 = module_0.resolve_requires(str_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'c[T4zleutV.]{'
        set_0 = {str_0, str_0, str_0}
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        unresolved_fact_dep_1 = None
        var_0 = module_0.get_collector_names(unresolved_fact_dep_1, set_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'uO\tW\x0bUFq37'
        str_1 = 'all'
        dict_0 = {str_0: str_0, str_1: str_1}
        var_0 = module_0.tsort(dict_0)
        unresolved_fact_dep_0 = None
        var_1 = module_0.build_dep_data(str_0, unresolved_fact_dep_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        collector_not_found_error_0 = module_0.CollectorNotFoundError(**dict_0)
        str_0 = '%J#MM@#jmA,"G[i:\rW'
        str_1 = "F*K#h'%H\x0b?)AUWS9"
        list_0 = [str_1]
        var_0 = module_0.get_collector_names(collector_not_found_error_0, str_0, str_1, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = '+> Y!\t777;tjQ;pLe'
        str_1 = '!network'
        var_1 = module_0.get_collector_names(str_1, str_0, str_1)
        str_2 = 'wXN'
        str_3 = None
        dict_0 = {str_0: var_1, str_3: var_1, str_0: var_0}
        var_2 = module_0.find_unresolved_requires(str_2, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'C;;\n2I/k|}@"jft\x0c'
        str_1 = '6W(;'
        str_2 = '3H`XNd'
        str_3 = 'Zn+&uRF[%~n'
        set_0 = set()
        dict_0 = {str_1: str_2, str_0: str_2, str_1: str_2, str_3: set_0}
        var_0 = module_0.select_collector_classes(dict_0, dict_0)
        int_0 = 4950
        dict_1 = {str_0: str_1, str_1: str_1, str_2: int_0, str_2: str_0}
        base_fact_collector_0 = module_0.BaseFactCollector(dict_1)
        list_0 = [str_0]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
        str_4 = '_k?u3>B9]R'
        var_1 = module_0.build_dep_data(cycle_found_in_fact_deps_0, str_4)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = 'd'
        str_4 = [str_1]
        var_0 = set(str_4)
        str_5 = [str_2]
        var_1 = set(str_5)
        var_2 = set(str_2)
        var_3 = set()
        var_4 = {str_0: var_0, str_1: var_1, str_2: var_2, str_3: var_3}
        var_5 = module_0.tsort(var_4)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        int_0 = -398
        base_fact_collector_0 = module_0.BaseFactCollector()
        bytes_0 = b'V4\xebB\xa7'
        str_0 = 'T'
        str_1 = "',PE}hZ5p{"
        dict_0 = {str_1: var_0, str_1: int_0}
        tuple_0 = (dict_0,)
        var_1 = module_0.collector_classes_from_gather_subset(base_fact_collector_0, int_0, bytes_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '+l Yt\t777`tjQ;\tL}'
        str_1 = {str_0, str_0, str_0, str_0, str_0, str_0}
        defaultdict_0 = module_1.defaultdict()
        tuple_0 = ()
        base_fact_collector_0 = module_0.BaseFactCollector(tuple_0)
        str_2 = '!network'
        var_0 = module_0.get_collector_names(str_2, str_0, str_2)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        set_0 = {base_fact_collector_0}
        var_1 = module_0.collector_classes_from_gather_subset(set_0)
        var_2 = module_0.collector_classes_from_gather_subset(set_0, tuple_0)
        bool_0 = True
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_3 = module_0.collector_classes_from_gather_subset(tuple_0, str_1, bool_0, unresolved_fact_dep_0, cycle_found_in_fact_deps_0, collector_not_found_error_0)
    except BaseException:
        pass