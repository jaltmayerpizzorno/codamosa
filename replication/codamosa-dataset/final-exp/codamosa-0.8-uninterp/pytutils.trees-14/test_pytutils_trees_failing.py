# Automatically generated by Pynguin.
import pytutils.trees as module_0

def test_case_0():
    try:
        str_0 = "\n    Parses env file content.\n\n    From honcho.\n\n    >>> lines = ['TEST=${HOME}/yeee', 'THISIS=~/a/test', 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST']\n    >>> load_env_file(lines, write_environ=dict())\n    OrderedDict([('TEST', '.../yeee'),\n             ('THISIS', '.../a/test'),\n             ('YOLO',\n              '.../swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST')])\n\n    "
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = set()
        tree_0 = module_0.Tree()
        var_0 = tree_0.__setitem__(set_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'W-BxlfOD4j:D~Y7'
        bool_0 = False
        var_0 = module_0.set_tree_node(str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        var_0 = module_0.tree()
        tree_0 = module_0.Tree()
        dict_0 = {}
        int_0 = -1566
        registry_tree_0 = module_0.RegistryTree(str_0)
        list_0 = [str_0, tree_0, registry_tree_0]
        var_1 = tree_0.__getitem__(dict_0, int_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        str_0 = 'h8kJ.F`umuo\tvZp'
        dict_0 = {bool_0: str_0, str_0: str_0}
        str_1 = 'Qf+wn"EO/zxgi'
        str_2 = 'ski'
        str_3 = "DP[||-k\ru\r_'1k"
        var_0 = module_0.get_tree_node(dict_0, str_1, str_2, str_3)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Impossible to format dict due to missing elements: %r'
        tree_0 = module_0.Tree()
        float_0 = -76.2247
        tree_1 = module_0.Tree(str_0, tree_0, float_0)
    except BaseException:
        pass