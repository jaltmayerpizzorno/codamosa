# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import concurrent.futures._base as module_1

def test_case_0():
    try:
        str_0 = '\x0c@'
        future_0 = None
        list_0 = [future_0, future_0]
        list_1 = [str_0, str_0]
        dummy_executor_0 = module_0.DummyExecutor()
        future_1 = dummy_executor_0.submit(list_0, *list_1)
        bool_0 = module_0.is_future(future_1)
        bytes_0 = b'\xe8Mu!Sj.\x1cz$\xc3&&\x9c\xc1\xcd\x01'
        future_2 = dummy_executor_0.submit(bytes_0, *list_1)
        str_1 = '2\n\thFP;FNENM\\P<%bmy'
        set_0 = None
        tuple_0 = (str_1, set_0, str_0)
        module_0.future_set_exc_info(future_1, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        future_0 = module_1.Future()
        float_0 = -2877.14507
        list_0 = []
        dummy_executor_0 = module_0.DummyExecutor(*list_0)
        module_0.future_set_result_unless_cancelled(future_0, float_0)
        dummy_executor_1 = module_0.DummyExecutor()
        bytes_0 = b"\xa3't"
        module_0.future_add_done_callback(future_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        future_0 = module_1.Future()
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_0.shutdown()
        var_0 = None
        dummy_executor_0.shutdown()
        module_0.future_set_result_unless_cancelled(future_0, var_0)
        dict_0 = {}
        dummy_executor_1 = module_0.DummyExecutor(**dict_0)
        list_0 = [var_0]
        callable_0 = module_0.run_on_executor(*list_0, **dict_0)
        module_0.future_add_done_callback(future_0, callable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = module_0.run_on_executor()
        bool_0 = module_0.is_future(callable_0)
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_1 = module_0.DummyExecutor()
        future_0 = None
        list_0 = [future_0]
        future_1 = dummy_executor_1.submit(callable_0, *list_0)
        list_1 = None
        bool_1 = module_0.is_future(list_1)
        bool_2 = module_0.is_future(future_1)
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        callable_0 = module_0.run_on_executor()
        str_0 = '0N+'
        dict_0 = {}
        list_0 = [str_0, str_0, dict_0, callable_0]
        dummy_executor_1 = module_0.DummyExecutor()
        callable_1 = None
        future_0 = dummy_executor_1.submit(callable_1)
        callable_2 = module_0.run_on_executor(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        callable_0 = module_0.run_on_executor()
        str_0 = '0N+'
        dict_0 = {str_0: callable_0, str_0: str_0, str_0: callable_0}
        list_0 = [str_0, str_0, dict_0, callable_0]
        dummy_executor_1 = module_0.DummyExecutor()
        callable_1 = None
        future_0 = dummy_executor_1.submit(callable_1)
        callable_2 = module_0.run_on_executor(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_7():
    try:
        callable_0 = module_0.run_on_executor()
        bool_0 = module_0.is_future(callable_0)
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_1 = module_0.DummyExecutor()
        future_0 = module_1.Future()
        callable_1 = None
        module_0.future_add_done_callback(future_0, callable_1)
        dummy_executor_0.shutdown()
        future_1 = None
        future_2 = dummy_executor_0.submit(future_1)
        bool_1 = module_0.is_future(future_1)
        int_0 = None
        module_0.future_set_result_unless_cancelled(future_2, int_0)
    except BaseException:
        pass