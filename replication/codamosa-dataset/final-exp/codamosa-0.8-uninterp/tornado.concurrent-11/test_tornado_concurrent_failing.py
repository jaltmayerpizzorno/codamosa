# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import concurrent.futures._base as module_1
import builtins as module_2

def test_case_0():
    try:
        base_exception_0 = None
        bool_0 = module_0.is_future(base_exception_0)
        future_0 = module_1.Future()
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_0.shutdown()
        set_0 = {future_0, future_0}
        float_0 = None
        tuple_0 = (set_0, base_exception_0, float_0)
        module_0.future_set_exc_info(future_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        list_0 = []
        str_0 = '\n\t{%oO'
        callable_0 = module_0.run_on_executor()
        str_1 = 'QN,)\t+E8Fa75g GP!P'
        callable_1 = module_0.run_on_executor(*list_0)
        dict_0 = {str_0: list_0, str_0: dummy_executor_0, str_1: str_1, str_0: str_0}
        future_0 = module_1.Future()
        base_exception_0 = module_2.BaseException(*list_0)
        module_0.future_set_exception_unless_cancelled(future_0, base_exception_0)
        dummy_executor_1 = module_0.DummyExecutor()
        list_1 = [dummy_executor_0]
        callable_2 = module_0.run_on_executor(*list_1)
        set_0 = {dummy_executor_0, str_1, str_0}
        bool_0 = module_0.is_future(callable_1)
        future_1 = dummy_executor_1.submit(set_0, **dict_0)
        callable_3 = None
        module_0.future_add_done_callback(future_0, callable_3)
    except BaseException:
        pass

def test_case_2():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        str_0 = 'QN,)\t+E8Fa75 GP!P'
        dummy_executor_1 = module_0.DummyExecutor()
        list_0 = [dummy_executor_0, dummy_executor_0, str_0]
        callable_0 = module_0.run_on_executor(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        list_0 = []
        str_0 = '\n\t{%oO'
        str_1 = 'QN,)\t+E8Fa75g GP!P'
        callable_0 = module_0.run_on_executor(*list_0)
        dict_0 = {str_0: list_0, str_0: dummy_executor_0, str_1: str_1, str_0: str_1}
        dummy_executor_1 = module_0.DummyExecutor()
        list_1 = [dummy_executor_0]
        callable_1 = module_0.run_on_executor(*list_1)
        bool_0 = module_0.is_future(callable_0)
        var_0 = None
        future_0 = dummy_executor_1.submit(callable_1, *list_1, **dict_0)
        module_0.future_set_result_unless_cancelled(future_0, var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        future_0 = None
        dummy_executor_0 = module_0.DummyExecutor()
        list_0 = [future_0, future_0, dummy_executor_0, future_0]
        str_0 = 'openid.oauth.scope'
        str_1 = 'CZ`,:R'
        str_2 = "oz,ol}>0Hj&K'bVZ\x0bgLe"
        dict_0 = {str_0: dummy_executor_0, str_1: future_0, str_2: dummy_executor_0}
        callable_0 = module_0.run_on_executor(*list_0, **dict_0)
    except BaseException:
        pass