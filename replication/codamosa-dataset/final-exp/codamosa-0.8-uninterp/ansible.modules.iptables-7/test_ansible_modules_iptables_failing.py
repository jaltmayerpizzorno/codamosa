# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        str_0 = '/etc/rc.conf'
        tuple_0 = (str_0,)
        bytes_0 = None
        float_0 = -2070.945
        dict_0 = {tuple_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.append_param(tuple_0, bytes_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = 'f{'
        complex_0 = None
        set_0 = {complex_0, str_0, bool_0}
        list_0 = [bool_0, set_0]
        var_0 = module_0.append_param(bool_0, str_0, complex_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        dict_0 = {set_0: set_0, set_0: set_0, set_0: set_0}
        str_0 = 'UR2MMpWiwp\r,S9h$,'
        int_0 = 32600
        tuple_0 = (str_0, int_0)
        var_0 = module_0.append_tcp_flags(set_0, dict_0, tuple_0)
        str_1 = None
        list_0 = [set_0]
        var_1 = module_0.insert_rule(str_1, set_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 4799.451
        list_0 = [float_0]
        str_0 = 'G1;}0lw08\x0c'
        var_0 = module_0.append_csv(float_0, list_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        complex_0 = None
        dict_0 = None
        str_0 = '(=\nm\n|0\t'
        int_0 = 522
        var_0 = module_0.append_match_flag(dict_0, str_0, str_0, int_0)
        set_0 = {complex_0, str_0, bool_0}
        list_0 = [bool_0, set_0]
        bytes_0 = b'1\x82z\x19P\x9a6HD\x94\xca\xa5=|\xf5\xdex\x97'
        list_1 = []
        var_1 = module_0.append_match(bytes_0, list_1, str_0)
        var_2 = module_0.append_param(bool_0, str_0, complex_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        dict_0 = None
        str_0 = 'FU'
        int_0 = 522
        var_0 = module_0.append_match_flag(dict_0, str_0, str_0, int_0)
        str_1 = "deT03#'R.,LN7"
        var_1 = module_0.append_match(dict_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '}BF\x0c/JtS/5w#'
        bytes_0 = b'\xb9\x07y\xfc-\xd6\xdf\x8d\x94\xfe\x18+\xc2\x0c\xb2|\xd58'
        tuple_0 = (bytes_0,)
        set_0 = {str_0}
        int_0 = 973
        var_0 = module_0.append_jump(tuple_0, set_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -1341
        float_0 = 655.7778
        set_0 = {int_0, float_0, float_0}
        var_0 = module_0.append_wait(int_0, float_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'N'
        var_0 = module_0.construct_rule(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -1395.33695
        bytes_0 = b'\x99s\x7f\x96\\\n|A-\xba\x807\xfc<\x89R\x12\x05\x13L'
        str_0 = ''
        var_0 = module_0.insert_rule(float_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\x04\x84\x90A\xc49\xbf2R'
        str_0 = 'HbLL:_a\n52B6Fd>7'
        dict_0 = {bytes_0: str_0, bytes_0: str_0}
        var_0 = module_0.check_present(bytes_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        bytes_0 = None
        str_0 = None
        tuple_0 = (str_0,)
        var_0 = module_0.append_csv(bool_0, bytes_0, tuple_0)
        str_1 = '}'
        list_0 = []
        bytes_1 = b'\xf6\xe3!\xa6\x13b\x99\xb3N\xe0t'
        var_1 = module_0.append_rule(str_1, list_0, bytes_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'IUz\\0 ?xrH|S*'
        str_1 = "uC@EXzkvomN'Gv"
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        var_0 = module_0.remove_rule(str_0, str_1, tuple_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '/sbin/iptables'
        var_0 = {}
        str_1 = 'chain'
        str_2 = 'policy'
        str_3 = 'table'
        str_4 = 'INPUT'
        str_5 = 'DROP'
        str_6 = 'filter'
        str_7 = {str_1: str_4, str_2: str_5, str_3: str_6}
        var_1 = module_0.set_chain_policy(str_0, var_0, str_7)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'5\xf5\n"\xe8c\xe5t\xde'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        int_0 = -1263
        bool_0 = None
        var_0 = module_0.get_chain_policy(list_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        str_0 = "!`G>3fmV+HT'/!4"
        dict_0 = {str_0: bool_0, str_0: bool_0, str_0: str_0}
        var_0 = module_0.append_tcp_flags(str_0, str_0, dict_0)
        str_1 = 'YT\\I:NxP/pl~'
        var_1 = module_0.get_iptables_version(str_1, str_1)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        dict_0 = None
        str_0 = 'Fh'
        int_0 = 522
        bool_1 = False
        tuple_0 = (bool_0, bool_1)
        list_0 = None
        bool_2 = False
        var_0 = module_0.append_wait(tuple_0, list_0, bool_2)
        var_1 = module_0.append_match_flag(dict_0, str_0, str_0, int_0)
        bytes_0 = b"\x8bIv\x93'\x05z"
        str_1 = '9w6D^bg0#\x0ck@Ewk'
        int_1 = -1359
        int_2 = 33
        var_2 = module_0.append_param(str_1, bytes_0, int_1, int_2)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        dict_0 = None
        str_0 = 'Fh'
        int_0 = 522
        var_0 = module_0.append_match_flag(dict_0, str_0, str_0, int_0)
        var_1 = module_0.flush_table(bool_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = False
        str_0 = "!`G>3fmV+HT'/!4"
        dict_0 = {str_0: bool_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.append_tcp_flags(str_0, str_0, dict_0)
        str_1 = 'f'
        str_2 = ''
        int_0 = 4562
        var_1 = module_0.append_match_flag(str_2, int_0, int_0, str_1)
        int_1 = None
        bytes_0 = b'\x92\xdc\r\xac\xdc'
        dict_1 = None
        var_2 = module_0.append_match_flag(dict_1, str_1, str_1, int_1)
        tuple_0 = ()
        var_3 = module_0.append_param(bytes_0, str_0, tuple_0, str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'ipv4'
        str_1 = '-I'
        int_0 = 8
        str_2 = '8G'
        var_0 = dict(ip_version=str_0, chain=str_0, table=str_0, action=str_1, rule_num=int_0, log_prefix=str_1, limit_burst=int_0, ctstate=str_2, protocol=str_1, destination_port=str_2, syn=str_1, jump=str_0, comment=str_1)
        str_3 = 'iptables'
        var_1 = module_0.push_arguments(str_3, str_1, var_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'filter'
        str_1 = 'FORWARD'
        str_2 = '192.168.1.100/24'
        var_0 = dict(table=str_0, chain=str_1, source=str_2)
        str_3 = '/sbin/iptables'
        str_4 = '-C'
        var_1 = module_0.push_arguments(str_3, str_4, var_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'iptables'
        str_1 = '-A'
        str_2 = [str_0, str_1]
        str_3 = 'flags'
        str_4 = 'flags_set'
        str_5 = 'ACK'
        str_6 = 'SYN'
        str_7 = 'FIN'
        str_8 = [str_5, str_7, str_6, str_7]
        str_9 = [str_5, str_8, str_6, str_7]
        str_10 = {str_3: str_8, str_4: str_9}
        str_11 = '--tcp-flags'
        var_0 = module_0.append_tcp_flags(str_2, str_10, str_11)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = None
        str_0 = 'table'
        str_1 = 'chain'
        str_2 = 'filter'
        str_3 = 'INPUT'
        str_4 = {str_0: str_2, str_1: str_3}
        var_1 = module_0.get_chain_policy(var_0, var_0, str_4)
    except BaseException:
        pass