# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -3220
        str_0 = 'I"NE(I=uyvh*'
        str_1 = None
        int_1 = 250
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_1, tuple_0)
        bool_0 = False
        list_0 = [bool_0]
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -270
        str_0 = '+L,of:O`%>sHRyGE\x0cw"'
        tuple_0 = ()
        optional_0 = None
        tuple_1 = (int_0, str_0, tuple_0, optional_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_1)
    except BaseException:
        pass

def test_case_2():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -138
        str_0 = None
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 19
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.shift(int_0, dict_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 2345
        int_1 = 1730
        tuple_0 = (int_0, int_1)
        list_0 = [tuple_0, tuple_0]
        list_1 = [list_0]
        int_2 = 1675
        int_3 = -2315
        int_4 = 712
        dict_0 = {int_2: int_3, int_1: int_4}
        tuple_1 = (list_1, dict_0)
        str_0 = '8@aP^9'
        tuple_2 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_1, int_4, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 904
        str_0 = '7!E`XAaF'
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        var_0 = grammar_0.copy()
        parser_0 = module_1.Parser(grammar_0, var_0)
        int_1 = parser_0.classify(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = None
        str_0 = 'wd|N'
        none_type_0 = None
        str_1 = 'u'
        int_0 = -1881
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_1, tuple_0)
        parse_error_0 = module_1.ParseError(str_0, none_type_0, str_0, tuple_1)
        bytes_0 = b'k\xf8\xdc\xa1\xfe\x9c\xb2\xa2\xc3R\x8d\x0c+'
        parser_0 = module_1.Parser(grammar_0, bytes_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        str_0 = '"<\x0c]'
        int_0 = 1
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        str_0 = '?r'
        int_1 = -175
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        str_1 = None
        parser_0 = module_1.Parser(grammar_0, str_1)
        parser_1 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_1, tuple_1)
    except BaseException:
        pass