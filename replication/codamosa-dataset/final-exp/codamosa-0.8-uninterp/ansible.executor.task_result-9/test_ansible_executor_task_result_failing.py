# Automatically generated by Pynguin.
import ansible.executor.task_result as module_0

def test_case_0():
    try:
        int_0 = -1119
        str_0 = 'LSB Version:'
        task_result_0 = module_0.TaskResult(int_0, str_0, str_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        str_0 = 'name'
        str_1 = 'debugger'
        str_2 = {str_0: str_0, str_1: str_0}
        task_result_0 = module_0.TaskResult(str_2, var_0, str_2, str_2)
        var_1 = task_result_0.needs_debugger(task_result_0)
        var_2 = task_result_0.is_changed()
        var_3 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        str_0 = 'name'
        str_1 = 'debugger'
        str_2 = {str_0: str_0, str_1: str_0}
        task_result_0 = module_0.TaskResult(str_2, var_0, str_2, str_2)
        var_1 = task_result_0.is_skipped()
        var_2 = task_result_0.needs_debugger()
        var_3 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '-J\'BzWM;(D"'
        task_result_0 = module_0.TaskResult(str_0, str_0, str_0)
        var_0 = task_result_0.needs_debugger()
        var_1 = task_result_0.is_failed()
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = None
        str_0 = 'skip_reason'
        str_1 = {str_0: str_0, str_0: str_0}
        task_result_0 = module_0.TaskResult(str_1, var_0, str_1, str_1)
        var_1 = task_result_0.needs_debugger(str_1)
        var_2 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        bytes_0 = b"\xe2>T\xc2\xe5\xee\xe1\x9a\xbd.\x07\xc6\t't"
        list_0 = []
        str_0 = ''
        task_result_0 = module_0.TaskResult(bytes_0, list_0, str_0)
        var_0 = task_result_0.needs_debugger(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'failed'
        bool_0 = True
        bool_1 = {str_0: bool_0}
        task_result_0 = module_0.TaskResult(str_0, str_0, bool_1)
        var_0 = task_result_0.is_failed()
        set_0 = {str_0, bool_0}
        var_1 = task_result_0.needs_debugger(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'debugger'
        str_1 = 'on_failed'
        str_2 = {str_0: str_0, str_0: str_1}
        task_result_0 = module_0.TaskResult(str_2, str_2, str_2, str_2)
        var_0 = task_result_0.needs_debugger(str_2)
        var_1 = task_result_0.clean_copy()
    except BaseException:
        pass