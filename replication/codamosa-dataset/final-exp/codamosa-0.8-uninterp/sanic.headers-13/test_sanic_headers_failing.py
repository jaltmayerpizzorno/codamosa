# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        int_0 = 1
        str_0 = 'EJOJl}3 S10AI~#ue'
        str_1 = 'T'
        tuple_0 = module_0.parse_content_header(str_1)
        tuple_1 = module_0.parse_host(str_0)
        tuple_2 = module_0.parse_host(str_0)
        tuple_3 = (str_0, int_0, str_0)
        dict_0 = {tuple_3: int_0, tuple_3: int_0, tuple_3: int_0, tuple_3: tuple_3}
        optional_0 = module_0.parse_forwarded(int_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        int_0 = 771
        optional_0 = module_0.parse_xforwarded(dict_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '_scheme'
        str_1 = module_0.fwd_normalize_address(str_0)
        int_0 = 1558
        dict_0 = {str_1: str_0}
        optional_0 = module_0.parse_xforwarded(int_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -544
        str_0 = "bD<u#1%LF{'.?8 c_r"
        str_1 = 'v'
        str_2 = ". Parameter names cannot use '__'."
        dict_0 = {str_0: str_0, str_1: str_1, str_2: int_0}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -847
        dict_0 = {}
        str_0 = 'x+?P"sa;?nk'
        tuple_0 = module_0.parse_host(str_0)
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
        bool_0 = False
        optional_0 = module_0.parse_forwarded(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1939
        str_0 = '\n\x0bmR+Xcl'
        tuple_0 = module_0.parse_content_header(str_0)
        int_1 = -458
        bytes_0 = module_0.format_http1_response(int_0, int_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'pdv'
        str_1 = module_0.fwd_normalize_address(str_0)
        dict_0 = module_0.fwd_normalize(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'n<sNnZ\x0bD ()f _=%/'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = '\t"Oht\n'
        str_2 = module_0.fwd_normalize_address(str_1)
        tuple_1 = module_0.parse_content_header(str_2)
        tuple_2 = (tuple_1, tuple_0)
        dict_0 = module_0.fwd_normalize(tuple_2)
        str_3 = 'T(+Lgv (rF?M O('
        tuple_3 = module_0.parse_content_header(str_3)
        str_4 = 'b1ues'
        tuple_4 = (str_4, dict_0)
        tuple_5 = (tuple_4, tuple_2)
        dict_1 = module_0.fwd_normalize(tuple_5)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'X-Forwarded-Fkr'
        var_0 = ()
        str_1 = 'PROXIES_COUNT'
        str_2 = 'REAL_IP_HEADER'
        int_0 = -19
        var_1 = {str_1: int_0, str_0: str_0, str_2: str_0}
        var_2 = type(str_0, var_0, var_1)
        optional_0 = module_0.parse_xforwarded(str_1, var_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        var_0 = ()
        str_1 = 'PROXIES_COUNT'
        str_2 = 'REAL_IP_HEADER'
        int_0 = 43
        var_1 = {str_1: int_0, str_0: str_0, str_2: str_0}
        var_2 = type(str_0, var_0, var_1)
        optional_0 = module_0.parse_xforwarded(str_0, var_2)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'unknown'
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ')$e01}'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = ()
        str_2 = 'PROXIES_COUNT'
        str_3 = 'REAL_IP_HEADER'
        int_0 = -19
        var_1 = {str_2: int_0, str_3: str_3, str_3: str_3}
        var_2 = type(str_2, var_0, var_1)
        optional_0 = module_0.parse_xforwarded(str_1, var_2)
    except BaseException:
        pass