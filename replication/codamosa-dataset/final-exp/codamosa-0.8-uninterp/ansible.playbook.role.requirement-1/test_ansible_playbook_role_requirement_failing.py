# Automatically generated by Pynguin.
import ansible.playbook.role.requirement as module_0

def test_case_0():
    try:
        bytes_0 = b'\xd9\xe6\xd1\x0e'
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.repo_url_to_role_name(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x92\x85\xba\xb8\xa9E\x16K\x16\xe4\x8a'
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.scm_archive_role(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -597
        dict_0 = {int_0: int_0, int_0: int_0}
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        str_0 = 'rw5D5=jh(\tv\t.C&os7:'
        var_1 = role_requirement_0.role_yaml_parse(str_0)
        role_requirement_1 = module_0.RoleRequirement()
        role_requirement_2 = module_0.RoleRequirement()
        role_requirement_3 = module_0.RoleRequirement()
        role_requirement_4 = module_0.RoleRequirement()
        var_2 = role_requirement_4.scm_archive_role(role_requirement_1)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.repo_url_to_role_name(dict_0)
        var_1 = role_requirement_0.role_yaml_parse(dict_0)
        str_0 = "I 4B4niF'!]Ad\reya)Es"
        var_2 = role_requirement_0.repo_url_to_role_name(str_0)
        var_3 = role_requirement_0.role_yaml_parse(str_0)
        str_1 = 'Return a random password string of length containing only chars\n\n    :kwarg length: The number of characters in the new password.  Defaults to 20.\n    :kwarg chars: The characters to choose from.  The default is all ascii\n        letters, ascii digits, and these symbols ``.,:-_``\n    '
        var_4 = role_requirement_0.role_yaml_parse(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.repo_url_to_role_name(dict_0)
        var_1 = role_requirement_0.role_yaml_parse(dict_0)
        str_0 = '\n---\nmodule: stat\nversion_added: "1.3"\nshort_description: Retrieve file or file system status\ndescription:\n     - Retrieves facts for a file similar to the Linux/Unix \'stat\' command.\n     - For Windows targets, use the M(ansible.windows.win_stat) module instead.\noptions:\n  path:\n    description:\n      - The full path of the file/object to get the facts of.\n    type: path\n    required: true\n    aliases: [ dest, name ]\n  follow:\n    description:\n      - Whether to follow symlinks.\n    type: bool\n    default: no\n  get_checksum:\n    description:\n      - Whether to return a checksum of the file.\n    type: bool\n    default: yes\n    version_added: "1.8"\n  checksum_algorithm:\n    description:\n      - Algorithm to determine checksum of file.\n      - Will throw an error if the host is unable to use specified algorithm.\n      - The remote host has to support the hashing method specified, C(md5)\n        can be unavailable if the host is FIPS-140 compliant.\n    type: str\n    choices: [ md5, sha1, sha224, sha256, sha384, sha512 ]\n    default: sha1\n    aliases: [ checksum, checksum_algo ]\n    version_added: "2.0"\n  get_mime:\n    description:\n      - Use file magic and return data about the nature of the file. this uses\n        the \'file\' utility found on most Linux/Unix systems.\n      - This will add both `mime_type` and \'charset\' fields to the return, if possible.\n      - In Ansible 2.3 this option changed from \'mime\' to \'get_mime\' and the default changed to \'Yes\'.\n    type: bool\n    default: yes\n    aliases: [ mime, mime_type, mime-type ]\n    version_added: "2.1"\n  get_attributes:\n    description:\n      - Get file attributes using lsattr tool if present.\n    type: bool\n    default: yes\n    aliases: [ attr, attributes ]\n    version_added: "2.3"\nextends_documentation_fragment:\n  -  action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nseealso:\n- module: ansible.builtin.file\n- module: ansible.windows.win_stat\nauthor: Bruce Pennypacker (@bpennypacker)\n'
        var_2 = role_requirement_0.repo_url_to_role_name(str_0)
        float_0 = 4188.627
        var_3 = role_requirement_0.role_yaml_parse(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.repo_url_to_role_name(dict_0)
        str_0 = 'QDzW0(h\tO%14$>&c&:v'
        var_1 = role_requirement_0.role_yaml_parse(dict_0)
        str_1 = 'fDxPx{@~m'
        var_2 = role_requirement_0.repo_url_to_role_name(str_1)
        var_3 = role_requirement_0.role_yaml_parse(str_0)
        str_2 = '^8f,[\n$4\r,KZ['
        var_4 = role_requirement_0.role_yaml_parse(str_2)
        role_requirement_1 = module_0.RoleRequirement()
        var_5 = role_requirement_0.role_yaml_parse(var_3)
        str_3 = '8 \x0cG_%2Q!G]QNqk'
        var_6 = role_requirement_1.role_yaml_parse(str_3)
        role_requirement_2 = module_0.RoleRequirement()
        bool_0 = True
        var_7 = role_requirement_1.scm_archive_role(bool_0, role_requirement_0)
    except BaseException:
        pass