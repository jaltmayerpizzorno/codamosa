# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    pass

def test_case_1():
    float_0 = 636.80813
    str_0 = 'REQUEST_ID_HEADER'
    file_not_found_0 = None
    request_timeout_0 = module_0.RequestTimeout(file_not_found_0)
    forbidden_0 = module_0.Forbidden(request_timeout_0)
    content_range_error_0 = None
    header_not_found_0 = module_0.HeaderNotFound(float_0, str_0, content_range_error_0)
    py_file_error_0 = module_0.PyFileError(header_not_found_0)
    load_file_exception_0 = None
    header_not_found_1 = module_0.HeaderNotFound(load_file_exception_0)

def test_case_2():
    str_0 = None
    dict_0 = {}
    list_0 = None
    unauthorized_0 = module_0.Unauthorized(dict_0, list_0)
    var_0 = module_0.add_status_code(str_0)

def test_case_3():
    str_0 = 'Test Message'
    int_0 = -2036
    header_expectation_failed_0 = module_0.HeaderExpectationFailed(int_0)
    invalid_usage_0 = module_0.InvalidUsage(header_expectation_failed_0)
    bytes_0 = None
    invalid_usage_1 = module_0.InvalidUsage(invalid_usage_0, invalid_usage_0, bytes_0)
    tuple_0 = (invalid_usage_1,)
    str_1 = ''
    dict_0 = {str_1: invalid_usage_1}
    unauthorized_0 = module_0.Unauthorized(str_0, invalid_usage_1, tuple_0, **dict_0)
    py_file_error_0 = module_0.PyFileError(unauthorized_0)