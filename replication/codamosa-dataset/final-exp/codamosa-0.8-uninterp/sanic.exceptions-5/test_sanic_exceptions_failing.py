# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        int_0 = 503
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 2936
        sanic_exception_0 = None
        not_found_0 = module_0.NotFound(int_0, sanic_exception_0)
        float_0 = -2528.0
        dict_0 = None
        request_timeout_0 = None
        list_0 = None
        file_not_found_0 = module_0.FileNotFound(dict_0, request_timeout_0, list_0)
        complex_0 = None
        method_not_supported_0 = module_0.MethodNotSupported(not_found_0, float_0, complex_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        invalid_signal_0 = module_0.InvalidSignal(str_0)
        set_0 = {str_0}
        int_0 = -1697
        list_0 = [str_0, invalid_signal_0, int_0, set_0]
        float_0 = 3001.0
        bool_0 = True
        file_not_found_0 = module_0.FileNotFound(list_0, float_0, bool_0)
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(list_0)
        content_range_error_0 = module_0.ContentRangeError(file_not_found_0, header_expectation_failed_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        str_0 = 'v3&\rC2e8+0QTDK'
        invalid_range_type_0 = module_0.InvalidRangeType(list_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1194.6
        bytes_0 = b'\xb7\xac\x7f\xcd0\xe9=/\xb3'
        request_timeout_0 = module_0.RequestTimeout(bytes_0)
        dict_0 = {}
        request_timeout_1 = module_0.RequestTimeout(request_timeout_0, request_timeout_0, dict_0)
        set_0 = set()
        tuple_0 = ()
        py_file_error_0 = module_0.PyFileError(tuple_0)
        int_0 = 1247
        unauthorized_0 = module_0.Unauthorized(float_0, py_file_error_0, int_0)
        py_file_error_1 = module_0.PyFileError(set_0)
        unauthorized_1 = module_0.Unauthorized(py_file_error_1)
        int_1 = -1035
        var_0 = module_0.abort(int_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        tuple_0 = (bool_0,)
        str_0 = '-_\t[3'
        dict_0 = {str_0: bool_0}
        py_file_error_0 = module_0.PyFileError(dict_0)
        server_error_0 = module_0.ServerError(py_file_error_0)
        int_0 = -1463
        list_0 = [bool_0, int_0, tuple_0]
        tuple_1 = (tuple_0, int_0, list_0)
        sanic_exception_0 = None
        service_unavailable_0 = module_0.ServiceUnavailable(sanic_exception_0)
        sanic_exception_1 = module_0.SanicException(tuple_1, service_unavailable_0)
        py_file_error_1 = module_0.PyFileError(sanic_exception_1)
        not_found_0 = module_0.NotFound(py_file_error_1)
        py_file_error_2 = module_0.PyFileError(not_found_0)
        invalid_range_type_0 = None
        u_r_l_build_error_0 = module_0.URLBuildError(bool_0, invalid_range_type_0)
        server_error_1 = module_0.ServerError(u_r_l_build_error_0)
        payload_too_large_0 = module_0.PayloadTooLarge(int_0)
        u_r_l_build_error_1 = module_0.URLBuildError(payload_too_large_0)
        int_1 = 1795
        tuple_2 = ()
        str_1 = 'k'
        payload_too_large_1 = module_0.PayloadTooLarge(tuple_2, str_1)
        bytes_0 = b'tG{\xf5j:\x8d\xa4\x94Xa\x00r'
        var_0 = module_0.abort(int_1, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '21.3.2'
        unauthorized_0 = module_0.Unauthorized(str_0)
        str_1 = 'dwBz#5Nwl4.6c'
        not_found_0 = module_0.NotFound(str_1)
        list_0 = [str_1, str_1, not_found_0, str_1]
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(list_0)
        service_unavailable_0 = module_0.ServiceUnavailable(header_expectation_failed_0)
        header_not_found_0 = None
        payload_too_large_0 = module_0.PayloadTooLarge(header_not_found_0)
        bytes_0 = b'g\x84\x1er\x01!\xb4\x89'
        py_file_error_0 = module_0.PyFileError(bytes_0)
        not_found_1 = module_0.NotFound(payload_too_large_0)
        header_not_found_1 = module_0.HeaderNotFound(unauthorized_0, service_unavailable_0, payload_too_large_0)
        str_2 = 'uHa\rqxaUUO@#U'
        unauthorized_1 = module_0.Unauthorized(str_2, header_not_found_1)
    except BaseException:
        pass