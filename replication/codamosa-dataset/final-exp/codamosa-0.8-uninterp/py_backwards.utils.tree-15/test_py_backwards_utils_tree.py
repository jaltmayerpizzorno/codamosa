# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.utils.tree as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'def foo(x, y):\n  return x + y'
    var_0 = module_0.parse(str_0)
    int_0 = 0
    var_1 = var_0.body[int_0]
    a_s_t_0 = module_1.get_parent(var_0, var_1)
    var_2 = var_1.body[int_0]
    var_3 = var_2.value
    a_s_t_1 = module_1.get_parent(var_0, var_3)

def test_case_2():
    str_0 = 'def foo(x, y):\n  return x + y'
    var_0 = module_0.parse(str_0)
    int_0 = 0
    var_1 = var_0.body[int_0]
    a_s_t_0 = module_1.get_parent(var_0, var_1)
    var_2 = var_1.body[int_0]
    var_3 = var_2.value
    module_1.insert_at(int_0, a_s_t_0, a_s_t_0)
    a_s_t_1 = module_1.get_parent(var_0, var_3)
    a_s_t_2 = module_1.get_parent(a_s_t_1, a_s_t_1)
    module_1.insert_at(int_0, a_s_t_2, a_s_t_1)
    tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_1)

def test_case_3():
    str_0 = 'def foo(x, y):\n  return x + y'
    var_0 = module_0.parse(str_0)
    int_0 = -1
    var_1 = var_0.body[int_0]
    a_s_t_0 = module_1.get_parent(var_0, var_1)
    var_2 = var_1.body[int_0]
    module_1.replace_at(int_0, a_s_t_0, a_s_t_0)
    var_3 = var_2.value
    a_s_t_1 = module_1.get_parent(var_0, var_3)
    bool_0 = False
    int_1 = 132
    module_1.insert_at(int_1, a_s_t_0, a_s_t_1)
    a_s_t_2 = module_1.get_parent(a_s_t_0, a_s_t_0, bool_0)
    float_0 = 518.2
    var_4 = module_1.get_closest_parent_of(a_s_t_2, a_s_t_1, float_0)