# Automatically generated by Pynguin.
import py_backwards.utils.tree as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        a_s_t_0 = None
        tuple_0 = module_0.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_1():
    try:
        a_s_t_0 = module_1.AST()
        a_s_t_1 = module_0.get_parent(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_2():
    try:
        a_s_t_0 = module_1.AST()
        int_0 = None
        module_0.insert_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -744
        str_0 = '#k:w"Yq`dVX\tWN8AxN'
        bytes_0 = b'M\xdb5JUn\xb0,\x9f\xa1e\x14'
        str_1 = 'a-kh\x0b="\x0b"<?x'
        str_2 = '\\oynH+C'
        str_3 = '`4Wk+x4]PTS'
        dict_0 = {str_0: bytes_0, str_1: int_0, str_2: bytes_0, str_3: str_0}
        a_s_t_0 = module_1.AST(**dict_0)
        a_s_t_1 = module_1.AST()
        module_0.replace_at(int_0, a_s_t_0, a_s_t_1)
    except BaseException:
        pass

def test_case_4():
    try:
        a_s_t_0 = module_1.AST()
        list_0 = [a_s_t_0]
        var_0 = module_0.get_closest_parent_of(a_s_t_0, a_s_t_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'def foo(x, y):\n  return x + y'
        var_0 = module_2.parse(str_0)
        a_s_t_0 = module_0.get_parent(var_0, var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'def foo(x, y):\n  return x + y'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        a_s_t_0 = module_0.get_parent(var_0, var_1)
        var_2 = var_1.body[int_0]
        var_3 = var_2.value
        a_s_t_1 = module_0.get_parent(var_0, var_3)
        var_4 = module_0.get_closest_parent_of(a_s_t_1, a_s_t_1, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'def foo(x, y):\n  return x + y'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        a_s_t_0 = module_0.get_parent(var_0, var_1)
        var_2 = var_1.body[int_0]
        var_3 = var_2.value
        module_0.insert_at(int_0, a_s_t_0, a_s_t_0)
        a_s_t_1 = module_0.get_parent(var_0, var_3)
        tuple_0 = None
        var_4 = module_0.get_closest_parent_of(a_s_t_0, a_s_t_1, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'def foo(x, y):\n  return x + y'
        var_0 = module_2.parse(str_0)
        int_0 = -1
        var_1 = var_0.body[int_0]
        a_s_t_0 = module_0.get_parent(var_0, var_1)
        var_2 = var_1.body[int_0]
        var_3 = var_2.value
        a_s_t_1 = module_0.get_parent(var_0, var_3)
        tuple_0 = module_0.get_non_exp_parent_and_index(a_s_t_0, a_s_t_1)
        a_s_t_2 = module_0.get_parent(a_s_t_1, a_s_t_1)
        int_1 = 588
        list_0 = [a_s_t_2, a_s_t_2, a_s_t_2, a_s_t_2]
        module_0.insert_at(int_1, a_s_t_1, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'def foo(x, y):\n  return x + y'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        a_s_t_0 = module_0.get_parent(var_0, var_1)
        var_2 = var_1.body[int_0]
        var_3 = var_2.value
        a_s_t_1 = module_0.get_parent(var_0, var_3)
        bool_0 = True
        a_s_t_2 = module_0.get_parent(a_s_t_0, a_s_t_1)
        a_s_t_3 = module_0.get_parent(a_s_t_2, a_s_t_2, bool_0)
        bool_1 = True
        a_s_t_4 = module_0.get_parent(a_s_t_0, a_s_t_3, bool_1)
    except BaseException:
        pass