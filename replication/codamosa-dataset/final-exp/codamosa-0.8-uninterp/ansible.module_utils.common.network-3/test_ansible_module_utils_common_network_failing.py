# Automatically generated by Pynguin.
import ansible.module_utils.common.network as module_0

def test_case_0():
    try:
        tuple_0 = None
        var_0 = module_0.to_masklen(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "4N~qh:>FaJq<GG_'[g"
        var_0 = module_0.to_subnet(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        bool_0 = True
        var_0 = module_0.to_subnet(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '-IW+\\(TSFTlXsk'
        bytes_0 = b'\x04\xc5\xcedJ\x9e\x14'
        var_0 = module_0.is_netmask(bytes_0)
        var_1 = module_0.to_ipv6_subnet(str_0)
        bytes_1 = b'VY\x01\xa6\xe8$p\x91\x18\t\xf2)\x1fF\xa4\xb9'
        var_2 = module_0.to_netmask(bytes_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = None
        var_0 = module_0.to_ipv6_subnet(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Validate ``parameters`` against argument spec.\n\n        Error messages in the :class:`ValidationResult` may contain no_log values and should be\n        sanitized with :func:`~ansible.module_utils.common.parameters.sanitize_keys` before logging or displaying.\n\n        :arg parameters: Parameters to validate against the argument spec\n        :type parameters: dict[str, dict]\n\n        :return: :class:`ValidationResult` containing validated parameters.\n\n        :Simple Example:\n\n            .. code-block:: text\n\n                argument_spec = {\n                    \'name\': {\'type\': \'str\'},\n                    \'age\': {\'type\': \'int\'},\n                }\n\n                parameters = {\n                    \'name\': \'bo\',\n                    \'age\': \'42\',\n                }\n\n                validator = ArgumentSpecValidator(argument_spec)\n                result = validator.validate(parameters)\n\n                if result.error_messages:\n                    sys.exit("Validation failed: {0}".format(", ".join(result.error_messages))\n\n                valid_params = result.validated_parameters\n        '
        var_0 = module_0.to_ipv6_network(str_0)
        int_0 = -1028
        var_1 = module_0.to_masklen(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'f0B%N$\x0crD.|F\x0b'
        var_0 = module_0.to_ipv6_network(str_0)
        bytes_0 = b'G\xea\xa7ZM\x98\xe8\x01\xf6\xd7\xfe\xee-vVI\xa0\x94\xfc'
        bool_0 = False
        var_1 = module_0.to_subnet(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 2391.63299
        var_0 = module_0.to_bits(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        var_0 = module_0.is_netmask(list_0)
        str_0 = '-@v/PF!\\'
        var_1 = module_0.to_ipv6_network(str_0)
        str_1 = '7_FED.vM>\n;$'
        var_2 = module_0.is_mac(str_1)
        bytes_0 = b'm\x87\x15x\xa8\xfc \xcf"\x00'
        var_3 = module_0.to_bits(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = ()
        int_0 = 1534
        var_0 = module_0.to_subnet(int_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Ap\r4`ahx'
        var_0 = module_0.to_bits(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'f0B%N$\x0crD.|F\x0b'
        var_0 = module_0.to_ipv6_network(str_0)
        str_1 = 'P=dxu\t|r,}L'
        int_0 = -4114
        str_2 = 'ogSbq@#7'
        tuple_0 = (str_2,)
        var_1 = module_0.to_subnet(str_1, int_0, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '255.B55.255.0'
        var_0 = module_0.to_masklen(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '55.B5\r.255.0'
        var_0 = module_0.to_masklen(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 3173.2296
        list_0 = [float_0, float_0, float_0]
        bool_0 = True
        var_0 = module_0.to_netmask(bool_0)
        str_0 = 'Failure for %s %s: rc=%s %s'
        tuple_0 = (float_0, list_0, str_0)
        var_1 = module_0.is_netmask(tuple_0)
        var_2 = module_0.to_ipv6_subnet(str_0)
        str_1 = 'f0u%N$\x0crD.|F\x0b'
        var_3 = module_0.to_ipv6_network(str_1)
        var_4 = module_0.is_netmask(list_0)
        str_2 = '2'
        var_5 = module_0.to_bits(str_2)
        str_3 = '%9JD_;l2Yo<Og7?'
        var_6 = module_0.to_subnet(str_3, str_0)
    except BaseException:
        pass