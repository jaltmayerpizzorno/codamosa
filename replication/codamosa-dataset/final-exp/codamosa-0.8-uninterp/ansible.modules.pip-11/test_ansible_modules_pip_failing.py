# Automatically generated by Pynguin.
import ansible.modules.pip as module_0

def test_case_0():
    try:
        set_0 = set()
        str_0 = ' k\x0br:0rCW1) m'
        bool_0 = True
        var_0 = module_0.setup_virtualenv(set_0, str_0, bool_0, set_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        package_0 = None
        list_0 = [package_0, package_0]
        str_0 = '__main__'
        package_1 = module_0.Package(list_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ansile.modules.pip'
        package_0 = module_0.Package(str_0)
        var_0 = package_0.is_satisfied_by(package_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'S\xc3\\\xa2@\xf3'
        tuple_0 = (bytes_0,)
        int_0 = 716
        package_0 = module_0.Package(tuple_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ans8ile.modules.pip'
        package_0 = module_0.Package(str_0)
        var_0 = package_0.__str__()
        int_0 = -1320
        var_1 = package_0.is_satisfied_by(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1106.0
        package_0 = module_0.Package(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'setuptools'
        str_1 = '36.2.0'
        package_0 = module_0.Package(str_0, str_1)
        var_0 = package_0.has_version_specifier
        str_2 = 'setuptools>=36.2.0'
        package_1 = module_0.Package(str_2)
        package_2 = module_0.Package(str_2)
        var_1 = package_2.is_satisfied_by(str_1)
        package_3 = module_0.Package(str_2)
        str_3 = '36.3.0'
        var_2 = package_3.is_satisfied_by(str_3)
        package_4 = module_0.Package(str_2)
        str_4 = '36.1.0'
        var_3 = package_4.is_satisfied_by(str_4)
        package_5 = module_0.Package(package_3)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'setuptools'
        package_0 = module_0.Package(str_0, str_0)
        var_0 = package_0.has_version_specifier
        str_1 = 'setuptools>=36.2.0'
        package_1 = module_0.Package(str_1)
        package_2 = module_0.Package(str_1)
        var_1 = package_2.is_satisfied_by(str_1)
        package_3 = module_0.Package(str_1)
        str_2 = '36.3.0'
        var_2 = package_3.is_satisfied_by(str_2)
        bool_0 = False
        complex_0 = None
        list_0 = [bool_0, complex_0, str_2]
        var_3 = package_1.is_satisfied_by(list_0)
    except BaseException:
        pass