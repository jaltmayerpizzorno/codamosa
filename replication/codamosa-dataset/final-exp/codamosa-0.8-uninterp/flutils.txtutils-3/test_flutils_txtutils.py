# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_2():
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)

def test_case_3():
    str_0 = ',=?\rUWCaO7eOj[f/P'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_4():
    str_0 = '(+[X\nE=BCgA$>J10.0'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_5():
    str_0 = 'uS\ns}}o\x0cHh2;"f8b@DN'
    int_0 = 2507
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, bool_0)
    str_1 = '\nCV@ISzHd#}cy0{'
    list_0 = ansi_text_wrapper_0.wrap(str_1)

def test_case_6():
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    str_0 = '#xQRB? \x0c/g1;ZuDe|x*v'
    str_1 = ansi_text_wrapper_0.fill(str_0)
    set_0 = set()
    int_0 = module_0.len_without_ansi(set_0)
    list_0 = ansi_text_wrapper_0.wrap(str_1)
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(max_lines=int_0)
    list_1 = ansi_text_wrapper_1.wrap(str_1)

def test_case_7():
    str_0 = ''
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_8():
    str_0 = 'I '
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_9():
    str_0 = 'B'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)
    str_2 = "X\x0byFl$'`@2"
    bool_1 = True
    int_0 = 4109
    str_3 = '~\x0bW*m'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, bool_0, bool_1, placeholder=str_3)
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_2, bool_0, bool_1, int_0)
    int_1 = 1743
    ansi_text_wrapper_3 = module_0.AnsiTextWrapper(max_lines=int_1)
    str_4 = 'OK\x0b8anA<:'
    list_0 = ansi_text_wrapper_3.wrap(str_4)

def test_case_10():
    str_0 = '\x1b[38p5;209mfoo,ar\x1b[0\t'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_11():
    str_0 = '#xQRB? \x0c/g1;ZuDe|x*v'
    int_0 = -1448
    set_0 = set()
    int_1 = module_0.len_without_ansi(set_0)
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    str_1 = 'Replace the calling :term:`cherry-pick-definition package module` with\n    a :term:`cherry-picking module`.\n\n    Use this function when there is a need to :term:`cherry-pick` modules.\n    This means the loading and executing, of a module, will be postponed\n    until an attribute is accessed.\n\n    Args:\n        namespace (:obj:`dict`): This should always be set to\n            :obj:`globals() <globals>`\n\n    :rtype: :obj:`None`\n\n    .. Warning:: For projects where startup time is critical, this function\n        allows for potentially minimizing the cost of loading a module if it\n        is never used. For projects where startup time is not essential, the\n        use of this function is heavily discouraged due to error messages\n        created during loading being postponed and thus occurring out of\n        context.\n\n    Example:\n        It is recommended to first build the root package (``__init__.py``)\n        as a normally desired root package. (Make sure that no functions\n        or classes are defined.  If needed, define these in a submodule).  For\n        example (``mymodule/__init__.py``)::\n\n            """This is the mymodule docstring."""\n\n            from mymodule import mysubmoduleone\n            import mymodule.mysubmoduletwo as two\n            from mymodule.mysubmodulethree import afunction\n            from mymodule.mysubmodulethree import anotherfunction as anotherfuc\n\n            MYVAL = 123\n\n        To use the ``cherry_pick`` function, the root package module\n        (``__init__.py``) must be converted to a\n        :term:`cherry-pick-definition package module`. This example is the\n        result of rewriting the root package (above)::\n\n            """This is the mymodule docstring."""\n\n            from flutils.moduleutils import cherry_pick\n\n            MYVAL = 123\n\n            __attr_map__ = (\n                \'mymodule.mysubmoduleone\',\n                \'mymodule.mysubmoduletwo,two\',\n                \'mymodule.mysubmodulethree:afunction\',\n                \'mymodule.mysubmodulethree:anotherfunction,anotherfuc\'\n            )\n            __additional_attrs__ = dict(\n                MYVAL=MYVAL\n            )\n\n            cherry_pick(globals())\n\n        As you can see, the imports were each rewritten to a\n        :term:`foreign-name` and place in the ``__attr_map__`` :obj:`tuple`.\n\n        Then, ``MYVAL`` was put in the ``__additional_attrs__`` dictionary.\n        Use this dictionary to pass any values to\n        :term:`cherry-picking module`.\n\n        And finally the ``cherry_pick`` function was called with\n        :obj:`globals() <globals>` as the only argument.\n\n        The result is the expected usage of ``mymodule``::\n\n            >> import mymodule\n            >> mymodule.anotherfunc()\n            foo bar\n\n        To test if a cherry-picked module has been loaded, or not::\n\n            >> import sys\n            >> sys.modules.get(\'mymodule.mysubmodulethree\')\n\n        If you get nothing back, it means the cherry-picked module has not been\n        loaded.\n\n        Please be aware that there are some cases when all of the\n        cherry-picked modules will be loaded automatically. Using any\n        program that automatically inspects the cherry-picking module\n        will cause the all of the cherry-picked modules to be loaded.\n        Programs such as ipython and pycharm will do this.\n    '
    list_0 = ansi_text_wrapper_0.wrap(str_1)
    list_1 = ansi_text_wrapper_0.wrap(str_0)
    list_2 = ansi_text_wrapper_0.wrap(str_1)