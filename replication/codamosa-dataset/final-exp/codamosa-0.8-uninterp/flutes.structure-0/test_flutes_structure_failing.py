# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        str_0 = None
        var_0 = module_0.no_map_instance(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        bool_0 = True
        module_0.register_no_map_class(bool_0)
        tuple_0 = (int_0,)
        var_0 = module_0.no_map_instance(tuple_0)
        dict_0 = {}
        bytes_0 = b"\xae!\xbd+\x82R\xa3\xc8k\r\tnH.\xa1\xe9F'{"
        var_1 = module_0.map_structure_zip(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = None
        set_0 = set()
        var_0 = module_0.map_structure(tuple_0, set_0)
        bytes_0 = None
        float_0 = -312.07
        var_1 = module_0.map_structure_zip(bytes_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0cc@SeW'
        var_0 = module_0.map_structure(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = None
        bytes_0 = b';\x89K'
        var_0 = module_0.map_structure_zip(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'M'
        float_0 = 0.1
        int_0 = -1147
        tuple_0 = (float_0, int_0, str_0)
        var_0 = module_0.map_structure(str_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        tuple_0 = ()
        str_0 = ''
        module_0.register_no_map_class(str_0)
        dict_0 = {bool_0: tuple_0, tuple_0: bool_0, bool_0: tuple_0, tuple_0: tuple_0, tuple_0: bool_0, tuple_0: tuple_0}
        var_0 = module_0.map_structure(bool_0, dict_0)
        list_0 = [var_0]
        var_1 = module_0.map_structure_zip(str_0, list_0)
        var_2 = module_0.no_map_instance(str_0)
        int_0 = 32768
        str_1 = '__len__ is not available before the iterable is depleted'
        var_3 = module_0.map_structure_zip(int_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        int_0 = 414
        dict_0 = None
        set_0 = {int_0, bool_0}
        bytes_0 = b'\xd9\xb1\xad\xec\x0f\xf7`\xb1\xfa\xe5\xc0\xcf'
        list_0 = [bytes_0]
        str_0 = 'YdDy<}%'
        list_1 = [str_0]
        float_0 = -1164.485
        tuple_0 = (set_0, list_0, list_1, float_0)
        var_0 = module_0.map_structure(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = None
        module_0.register_no_map_class(float_0)
        list_0 = []
        list_1 = [list_0, list_0]
        float_1 = 0.0
        module_0.register_no_map_class(float_1)
        var_0 = module_0.map_structure_zip(list_0, list_1)
        bytes_0 = b'\xf9\n\xe2g\x9b\x18\xc4\xf2k\x90'
        float_2 = -1938.73613
        var_1 = module_0.map_structure_zip(bytes_0, float_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Hj0B'
        float_0 = 0.1
        int_0 = -3534
        tuple_0 = (str_0, float_0, int_0, int_0)
        tuple_1 = (tuple_0, tuple_0)
        var_0 = module_0.map_structure_zip(tuple_1, tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        tuple_0 = ()
        var_0 = module_0.no_map_instance(tuple_0)
        str_0 = ''
        module_0.register_no_map_class(str_0)
        dict_0 = {bool_0: tuple_0, tuple_0: bool_0, bool_0: var_0, tuple_0: var_0, var_0: bool_0, var_0: var_0}
        var_1 = module_0.map_structure(bool_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tuple_0 = ()
        var_0 = module_0.no_map_instance(tuple_0)
        var_1 = None
        list_0 = [var_1, var_1, var_1]
        list_1 = [var_0]
        var_2 = module_0.map_structure_zip(list_0, list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\nNo output was generated.'
        module_0.register_no_map_class(str_0)
        str_1 = 'Y6wn/_'
        var_0 = module_0.no_map_instance(str_1)
        str_2 = ',M,IEHV'
        bytes_0 = b'\xfd<\xc3\xd8\x8f\xc9'
        module_0.register_no_map_class(bytes_0)
        list_0 = [str_0, str_2, str_0]
        var_1 = None
        int_0 = -2923
        int_1 = 449
        dict_0 = {var_1: int_0, var_1: int_0, var_1: int_0, var_1: int_1}
        list_1 = module_0.reverse_map(dict_0)
        list_2 = [list_0, var_1]
        tuple_0 = (list_2,)
        var_2 = module_0.map_structure_zip(list_2, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = None
        bool_0 = True
        set_0 = {var_0}
        list_0 = [var_0, var_0, var_0]
        bytes_0 = b'\x87\x9f\xd6\xba7\xb9\xeeK@'
        set_1 = {bytes_0}
        tuple_0 = (set_0, list_0, bytes_0, set_1)
        var_1 = module_0.map_structure_zip(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        tuple_0 = ()
        str_0 = ''
        int_0 = 458
        var_0 = None
        module_0.register_no_map_class(str_0)
        int_1 = -1329
        dict_0 = {var_0: int_0, var_0: int_0, var_0: int_0, var_0: int_1}
        list_0 = module_0.reverse_map(dict_0)
        dict_1 = {bool_0: tuple_0, tuple_0: bool_0, bool_0: tuple_0, tuple_0: tuple_0, tuple_0: bool_0, tuple_0: tuple_0}
        var_1 = module_0.map_structure(bool_0, dict_1)
        list_1 = [var_1]
        var_2 = module_0.map_structure_zip(str_0, list_1)
        str_1 = 'mx4/OM7Xtc*RcF'
        var_3 = module_0.no_map_instance(str_1)
        var_4 = module_0.no_map_instance(var_3)
        int_2 = 32750
        str_2 = '__len__ is not available before the iterable is depleted'
        var_5 = module_0.map_structure_zip(int_2, str_2)
    except BaseException:
        pass