# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0

def test_case_0():
    pass

def test_case_1():
    route_mixin_0 = module_0.RouteMixin()

def test_case_2():
    list_0 = []
    route_mixin_0 = module_0.RouteMixin(*list_0)
    str_0 = '\t$*\x0b_BJeDbN'
    float_0 = -846.08264
    str_1 = 'L]'
    str_2 = 'Ar>m-xy7'
    str_3 = '\n        Run the HTTP Server and listen until keyboard interrupt or term\n        signal. On termination, drain connections before closing.\n\n        :param host: Address to host on\n        :type host: str\n        :param port: Port to host on\n        :type port: int\n        :param debug: Enables debug output (slows server)\n        :type debug: bool\n        :param auto_reload: Reload app whenever its source code is changed.\n                            Enabled by default in debug mode.\n        :type auto_relaod: bool\n        :param ssl: SSLContext, or location of certificate and key\n                    for SSL encryption of worker(s)\n        :type ssl: SSLContext or dict\n        :param sock: Socket for the server to accept connections from\n        :type sock: socket\n        :param workers: Number of processes received before it is respected\n        :type workers: int\n        :param protocol: Subclass of asyncio Protocol class\n        :type protocol: type[Protocol]\n        :param backlog: a number of unaccepted connections that the system\n                        will allow before refusing new connections\n        :type backlog: int\n        :param register_sys_signals: Register SIG* events\n        :type register_sys_signals: bool\n        :param access_log: Enables writing access logs (slows server)\n        :type access_log: bool\n        :param unix: Unix socket to listen on instead of TCP port\n        :type unix: str\n        :return: Nothing\n        '
    dict_0 = {str_1: route_mixin_0, str_2: route_mixin_0, str_3: float_0}
    route_mixin_1 = module_0.RouteMixin(**dict_0)
    route_mixin_2 = module_0.RouteMixin()
    var_0 = route_mixin_2.put(str_0, float_0, str_0)

def test_case_3():
    str_0 = 'G"WNF$;M?Z\t~6vV^'
    int_0 = 956
    route_mixin_0 = module_0.RouteMixin()
    var_0 = route_mixin_0.head(str_0, int_0, str_0)

def test_case_4():
    str_0 = ''
    list_0 = []
    route_mixin_0 = module_0.RouteMixin(*list_0)
    var_0 = route_mixin_0.options(str_0)