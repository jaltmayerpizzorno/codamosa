# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0
import pathlib as module_1
import sanic.compat as module_2
import sanic.response as module_3

def test_case_0():
    try:
        str_0 = '4)'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1234
        str_0 = '*\\IA\x0c:,rx0]cR:Hl'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_websocket_route(int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = 'W`lUKb&Rs`'
        int_0 = 2574
        var_0 = route_mixin_0.add_websocket_route(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        bytes_0 = b'\xf7\xcc\xc4\xb5\x19Q`eOf\xb1\x9c\xa2\xca'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.get(str_0, str_0, bytes_0)
        route_mixin_1 = module_0.RouteMixin()
        str_1 = 'WEBSOCKET_MAX_QUEUE'
        route_mixin_2 = module_0.RouteMixin()
        var_1 = route_mixin_2.add_route(str_1, str_1, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'line'
        route_mixin_0 = module_0.RouteMixin()
        route_mixin_1 = module_0.RouteMixin()
        var_0 = route_mixin_1.post(str_0, route_mixin_0, str_0)
        str_1 = 'A8\x0bgN'
        list_0 = [str_1, str_1, str_1]
        route_mixin_2 = module_0.RouteMixin()
        var_1 = route_mixin_2.add_route(list_0, str_1, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.patch(str_0)
        var_1 = route_mixin_0.static(route_mixin_0, route_mixin_0, route_mixin_0, route_mixin_0, route_mixin_0, route_mixin_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '4)'
        route_mixin_0 = module_0.RouteMixin()
        str_1 = ''
        var_0 = route_mixin_0.delete(str_1, str_0)
        var_1 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.static(route_mixin_0, route_mixin_0, route_mixin_0, route_mixin_0, route_mixin_0, route_mixin_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xfd\xf1Z\xea\\GG\xc9@\x0c\x82J\xecT\x97\xa1\xaf\xa3'
        tuple_0 = ()
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.static(bytes_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'A8\x0bgN'
        list_0 = [str_0, str_0, str_0]
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(list_0, str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        bool_0 = True
        str_1 = '+;1fG\x0b61;'
        str_2 = 'WEBSOCKET_MAX_QUEUE'
        dict_0 = {str_2: str_1, str_1: str_1, str_1: str_1, str_2: bool_0, str_1: str_1}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        var_0 = route_mixin_0.delete(str_0, str_0, str_0, bool_0)
        list_0 = [str_1]
        route_mixin_1 = module_0.RouteMixin(*list_0)
        bool_1 = False
        var_1 = route_mixin_1.put(str_1, bool_1)
        route_mixin_2 = module_0.RouteMixin(**dict_0)
        str_3 = 'Nnm0pRo_L'
        var_2 = route_mixin_0.delete(str_3)
        route_mixin_3 = module_0.RouteMixin()
        pure_path_0 = module_1.PurePath(*list_0)
        str_4 = '4}o0\x0b'
        var_3 = route_mixin_0.add_route(pure_path_0, str_4, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '4)'
        route_mixin_0 = module_0.RouteMixin()
        str_1 = ''
        var_0 = route_mixin_0.delete(str_1, str_0)
        str_2 = '>=Dc3,-i'
        str_3 = 'h++'
        bool_0 = False
        int_0 = -1112
        var_1 = route_mixin_0.add_route(str_2, str_3, bool_0, int_0, str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        bool_0 = False
        str_1 = 'o:D>?+L&L.\\\x0c!X\nE~T'
        str_2 = '+;1fG\x0b61;'
        str_3 = 'WEBSOCKET_MAX_QUEUE'
        dict_0 = {str_3: str_2, str_1: str_1, str_2: str_2, str_3: bool_0, str_1: str_2}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        var_0 = route_mixin_0.delete(str_0, str_0, str_0, bool_0)
        list_0 = [str_1]
        route_mixin_1 = module_0.RouteMixin(*list_0)
        bool_1 = False
        var_1 = route_mixin_1.put(str_2, bool_1)
        route_mixin_2 = module_0.RouteMixin(**dict_0)
        route_mixin_3 = module_0.RouteMixin()
        str_4 = '/E\r,Pr7=\\-[Kk'
        var_2 = route_mixin_3.post(str_4)
        int_0 = None
        str_5 = '|/aBt0+'
        bool_2 = False
        var_3 = route_mixin_1.add_route(list_0, str_5, int_0, bool_2)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ''
        bool_0 = False
        str_1 = 'o:D>?+L&L.\\\x0c!X\nE~T'
        str_2 = 'WEBSOCKET_MAX_QUEUE'
        dict_0 = {str_2: str_0, str_1: str_1, str_0: str_0, str_2: bool_0, str_1: str_0}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        var_0 = route_mixin_0.delete(str_0, str_0, str_0, bool_0)
        route_mixin_1 = module_0.RouteMixin()
        bytes_0 = b'\xec\xcf&\xa4\x93~'
        var_1 = route_mixin_0.add_websocket_route(str_2, str_1, bytes_0, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ''
        bool_0 = True
        str_1 = 'o:D>?+L&L.\\\x0c!X\nE~T'
        str_2 = '+;1fG\x0b61;'
        dict_0 = {str_1: str_2, str_1: str_1, str_2: str_2, str_1: bool_0, str_1: str_2}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        var_0 = route_mixin_0.delete(str_0, str_0, str_0, bool_0)
        list_0 = [str_1]
        route_mixin_1 = module_0.RouteMixin(*list_0)
        bool_1 = False
        var_1 = route_mixin_1.put(str_2, bool_1)
        route_mixin_2 = module_0.RouteMixin(**dict_0)
        str_3 = '2O\n'
        var_2 = route_mixin_1.delete(str_2, bool_0)
        route_mixin_3 = module_0.RouteMixin()
        int_0 = 308
        str_4 = '.#\x0c~;"Y1Jo\x0b?2B'
        var_3 = route_mixin_2.add_route(str_4, str_0, int_0, str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        bool_0 = True
        str_1 = 'o:D>?+L&L.\\\x0c!X\nE~T'
        str_2 = '+;1fG\x0b61;'
        str_3 = 'WEBSOCKET_MAX_QUEUE'
        dict_0 = {str_3: str_2, str_1: str_1, str_2: str_2, str_3: bool_0, str_1: str_2}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        var_0 = route_mixin_0.delete(str_0, str_0, str_0, bool_0)
        str_4 = 'cNcT+'
        route_mixin_1 = module_0.RouteMixin(**dict_0)
        str_5 = '2O\n'
        str_6 = ''
        route_mixin_2 = module_0.RouteMixin()
        int_0 = 1194
        list_0 = [str_6, str_5, str_0, bool_0]
        tuple_0 = (int_0, list_0)
        pure_path_0 = module_1.PurePath()
        var_1 = route_mixin_1.add_route(tuple_0, str_3, pure_path_0, str_4, int_0, str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        route_mixin_0 = module_0.RouteMixin()
        var_0 = print(route_mixin_0)
        str_0 = 'uri'
        str_1 = 'file_or_directory'
        str_2 = 'pattern=r"/?.+"'
        str_3 = 'use_modified_since=True'
        str_4 = 'use_content_range=False'
        str_5 = 'stream_large_files=False'
        str_6 = 'name="static"'
        str_7 = 'host=None'
        str_8 = 'strict_slashes=None'
        str_9 = 'content_type=None'
        str_10 = 'apply=True'
        var_1 = route_mixin_0.static(str_0, str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        bool_0 = False
        str_1 = 'o:D>?+L&L.\\\x0c!X\nE~T'
        str_2 = '+;1fG\x0b61;'
        str_3 = 'WEBSOCKET_MAX_QUEUE'
        dict_0 = {str_3: str_2, str_1: str_1, str_2: str_2, str_3: bool_0, str_1: str_2}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        var_0 = route_mixin_0.delete(str_0, str_0, str_0, bool_0)
        list_0 = [str_1]
        route_mixin_1 = module_0.RouteMixin(*list_0)
        bool_1 = False
        var_1 = route_mixin_1.put(str_2, bool_1)
        route_mixin_2 = module_0.RouteMixin(**dict_0)
        bytes_0 = b''
        pure_path_0 = module_1.PurePath()
        str_4 = 'protocol.connection_task uncaught'
        route_mixin_3 = module_0.RouteMixin()
        str_5 = 'connection'
        header_0 = module_2.Header()
        h_t_t_p_response_0 = module_3.HTTPResponse(str_4)
        tuple_0 = (bytes_0, header_0, h_t_t_p_response_0, route_mixin_2)
        var_2 = route_mixin_0.add_websocket_route(str_5, str_4, str_4, bool_1, tuple_0)
    except BaseException:
        pass