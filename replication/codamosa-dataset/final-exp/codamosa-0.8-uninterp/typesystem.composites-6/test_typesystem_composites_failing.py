# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = 'MZylh.Wp=RD: YVAo'
        list_0 = []
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = {}
        any_0 = module_1.Any()
        any_1 = [any_0, any_0]
        one_of_0 = module_0.OneOf(any_1)
        any_2 = one_of_0.validate(var_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Must be greater than or equal to {minimum}.'
        bool_0 = True
        field_0 = module_1.Field(title=str_0, default=str_0, allow_null=bool_0)
        not_0 = module_0.Not(field_0)
        str_1 = '('
        str_2 = '9\x0b{{'
        bool_1 = True
        field_1 = module_1.Field(title=str_1, description=str_2, default=str_2, allow_null=bool_1)
        list_0 = [field_1, field_1, field_1]
        all_of_0 = module_0.AllOf(list_0)
        any_0 = all_of_0.validate(not_0)
    except BaseException:
        pass

def test_case_3():
    try:
        any_0 = module_1.Any()
        not_0 = module_0.Not(any_0)
        str_0 = 'Hello'
        any_1 = not_0.validate(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'x|K'
        field_0 = module_1.Field(title=str_0, default=str_0)
        str_1 = '4\x0cyl\\yNnvPT_:S'
        str_2 = 'Union'
        dict_0 = {str_1: str_0, str_2: field_0}
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        never_match_0 = module_0.NeverMatch()
        str_0 = 'q\t'
        never_match_1 = module_0.NeverMatch()
        field_0 = module_1.Field(title=str_0, description=str_0)
        if_then_else_0 = module_0.IfThenElse(field_0, field_0)
        any_0 = module_1.Any()
        list_0 = []
        all_of_0 = module_0.AllOf(list_0)
        any_1 = [never_match_1, any_0, any_0]
        one_of_0 = module_0.OneOf(any_1)
        list_1 = []
        all_of_1 = module_0.AllOf(list_1)
        all_of_2 = module_0.AllOf(list_0)
        field_1 = None
        not_0 = module_0.Not(field_1)
        one_of_1 = module_0.OneOf(any_0)
        any_2 = any_0.get_default_value()
        any_3 = one_of_0.validate(any_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '<H0O}8}3({fnjrq3 8'
        field_0 = module_1.Field(title=str_0)
        str_1 = 'allow_null'
        str_2 = 'xQE2xVm~'
        dict_0 = {str_0: str_0, str_1: field_0, str_2: field_0}
        not_0 = module_0.Not(field_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        field_0 = None
        list_0 = [field_0, field_0]
        one_of_0 = module_0.OneOf(list_0)
        str_0 = 'fG heQo#_qCU'
        bool_0 = False
        field_1 = module_1.Field(title=str_0, allow_null=bool_0)
        str_1 = 'allow_null'
        str_2 = 'z>gjJS|$WE\n\t'
        str_3 = 'u\nOE<;+Kf%ilXo>r,KCS'
        dict_0 = {str_1: bool_0, str_2: str_1, str_3: str_3}
        if_then_else_0 = module_0.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '<H0O}8}3({fnjrq3 8'
        field_0 = module_1.Field(title=str_0)
        str_1 = 'allow_null'
        union_0 = field_0.__or__(field_0)
        dict_0 = {str_1: str_1}
        never_match_0 = module_0.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '<H0O}8}3({fnjrq3 8'
        field_0 = module_1.Field(title=str_0)
        str_1 = 'allow_null'
        bool_0 = False
        field_1 = module_1.Field(description=str_0, allow_null=bool_0)
        list_0 = [field_0, field_1]
        dict_0 = {str_1: str_1, str_1: str_0}
        all_of_0 = module_0.AllOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '<H0O}8}3({fnjrq3 8'
        field_0 = module_1.Field(title=str_0)
        str_1 = 'allow_null'
        list_0 = None
        str_2 = 'Y+jlRf'
        dict_0 = {str_1: field_0, str_2: field_0, str_1: str_0}
        one_of_0 = module_0.OneOf(list_0, **dict_0)
    except BaseException:
        pass