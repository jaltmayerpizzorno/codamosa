# Automatically generated by Pynguin.
import py_backwards.utils.snippet as module_0
import typed_ast.ast3 as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    try:
        arg_0 = None
        str_0 = None
        str_1 = ']t'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'extend(ars)\nx = 1\nx = 2'
        var_0 = module_1.parse(str_0)
        str_1 = 'x = 1\nx = 2'
        var_1 = module_1.parse(str_1)
        keyword_0 = module_2.keyword()
        dict_0 = {}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
        str_2 = 'vars'
        var_2 = {str_2: var_1}
        module_0.extend_tree(var_0, var_2)
    except BaseException:
        pass

def test_case_2():
    try:
        import_from_0 = module_2.ImportFrom()
        str_0 = '_a0x\r]DlHK'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'extend(vars)\nx = 1\nx = 2'
        var_0 = module_1.parse(str_0)
        str_1 = 'etejnd'
        a_s_t_0 = module_2.AST()
        iterable_0 = module_0.find_variables(a_s_t_0)
        var_1 = module_1.parse(str_1)
        class_def_0 = module_2.ClassDef()
        str_2 = "('g50`fTh^K'Zc\\"
        dict_0 = {str_2: str_2}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
        str_3 = 'vars'
        var_2 = {str_3: var_1}
        module_0.extend_tree(var_0, var_2)
        var_3 = module_1.dump(var_1)
        list_0 = [var_1]
        alias_0 = module_2.alias(*list_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'let(a=2); let(b=3); a+b'
        var_0 = module_1.parse(str_0)
        str_1 = ',P'
        str_2 = 'a_0'
        str_3 = 'b_0'
        a_s_t_0 = module_2.AST()
        dict_0 = {str_3: str_1, str_2: a_s_t_0}
        iterable_0 = module_0.find_variables(a_s_t_0)
        str_4 = {str_1: str_2, str_1: str_3}
        a_s_t_1 = module_2.AST()
        iterable_1 = module_0.find_variables(a_s_t_1)
        module_0.extend_tree(var_0, str_4)
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        except_handler_0 = None
        variables_replacer_1 = module_0.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_1.visit_ExceptHandler(except_handler_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'extend(vars)\nx = 1\nx = 2'
        var_0 = module_1.parse(str_0)
        module_0.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        keyword_0 = module_2.keyword()
        str_0 = 'Compiling "{}"'
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        variables_replacer_1 = module_0.VariablesReplacer(dict_0)
        keyword_1 = variables_replacer_1.visit_keyword(keyword_0)
        snippet_0 = module_0.snippet(keyword_1)
        str_1 = '\x0c1J))'
        str_2 = 'fphlW?]\\=#'
        str_3 = 'install_opener'
        str_4 = '5kh!B'
        dict_1 = {str_3: str_3, str_4: str_4, str_2: str_0, str_1: str_1}
        list_0 = [str_3, snippet_0]
        class_def_0 = module_2.ClassDef(*list_0)
        variables_replacer_2 = module_0.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_2.visit_ClassDef(class_def_0)
        class_def_2 = variables_replacer_1.visit_ClassDef(class_def_1)
        list_1 = snippet_0.get_body(**dict_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'extend(vars)\nx = 1\nx = 2'
        var_0 = module_1.parse(str_0)
        var_1 = module_1.parse(str_0)
        str_1 = 'vars'
        var_2 = {str_1: var_1}
        module_0.let(str_1)
        module_0.extend_tree(var_0, var_2)
        var_3 = module_1.dump(var_1)
        module_0.extend(var_2)
        a_s_t_0 = module_2.AST()
        iterable_0 = module_0.find_variables(a_s_t_0)
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        var_4 = module_1.dump(variables_replacer_0)
    except BaseException:
        pass

def test_case_8():
    try:
        except_handler_0 = module_2.ExceptHandler()
        str_0 = '{red}Permission denied to "{output}"{reset}'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        a_s_t_0 = module_2.AST()
        str_1 = '-m*'
        str_2 = '`"7T;gcR+qFI\';'
        dict_1 = {str_1: str_1, str_2: str_1, str_2: a_s_t_0, str_1: str_1}
        module_0.extend_tree(a_s_t_0, dict_1)
        module_0.let(str_1)
        variables_replacer_1 = module_0.VariablesReplacer(dict_1)
        iterable_0 = module_0.find_variables(a_s_t_0)
        list_0 = [str_2, iterable_0, str_1]
        import_from_0 = module_2.ImportFrom(*list_0)
        import_from_1 = variables_replacer_1.visit_ImportFrom(import_from_0)
        str_3 = "bp'vyeM/\\"
        str_4 = 'Skip transformer "{}"'
        except_handler_1 = module_2.ExceptHandler()
        except_handler_2 = variables_replacer_1.visit_ExceptHandler(except_handler_1)
        dict_2 = {str_3: str_3, str_4: str_3, str_3: str_4, str_2: str_3}
        import_from_2 = None
        variables_replacer_2 = module_0.VariablesReplacer(dict_2)
        import_from_3 = variables_replacer_2.visit_ImportFrom(import_from_2)
    except BaseException:
        pass

def test_case_9():
    try:
        except_handler_0 = module_2.ExceptHandler()
        str_0 = '{red}Permission denied to "{output}"{reset}'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        a_s_t_0 = module_2.AST()
        str_1 = '-m*'
        dict_1 = {str_1: str_1, str_0: str_1, str_0: a_s_t_0, str_1: str_1}
        list_0 = []
        dict_2 = {str_0: a_s_t_0}
        attribute_0 = module_2.Attribute(*list_0, **dict_2)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        module_0.extend_tree(a_s_t_0, dict_1)
        module_0.let(str_1)
        variables_replacer_1 = module_0.VariablesReplacer(dict_1)
        iterable_0 = module_0.find_variables(a_s_t_0)
        list_1 = [str_1, iterable_0, str_1]
        import_from_0 = module_2.ImportFrom(*list_1)
        import_from_1 = variables_replacer_1.visit_ImportFrom(import_from_0)
        str_2 = "bp'vyeM/\\"
        str_3 = 'Skip transformer "{}"'
        except_handler_1 = module_2.ExceptHandler()
        except_handler_2 = variables_replacer_1.visit_ExceptHandler(except_handler_1)
        dict_3 = {str_2: str_2, str_3: str_2, str_2: str_3, str_2: str_2}
        import_from_2 = None
        variables_replacer_2 = module_0.VariablesReplacer(dict_3)
        import_from_3 = variables_replacer_2.visit_ImportFrom(import_from_2)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        class_def_0 = module_2.ClassDef(*list_0)
        name_0 = module_2.Name()
        str_0 = None
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'let(a=2); let(b=3); a+b'
        var_0 = module_1.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
    except BaseException:
        pass