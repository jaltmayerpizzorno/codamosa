# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        float_0 = -1543.0888
        list_0 = [float_0, float_0, float_0]
        bytes_0 = b'\x18\x04\xa1\x1b\xef1\x92\x19'
        list_1 = None
        str_0 = 'b\n=`Ew1$BF%949j G0HF'
        var_0 = module_0.unique(list_0, bytes_0, list_1, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.unique(dict_0, filter_module_0, filter_module_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -269.274998
        bool_0 = True
        dict_0 = None
        tuple_0 = (bool_0, dict_0, dict_0, dict_0)
        str_0 = '0>z%squ'
        var_0 = module_0.intersect(float_0, tuple_0, str_0)
        str_1 = "\rm@'%7D-"
        var_1 = module_0.power(float_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '%].=[P'
        str_1 = '}%\tsIr%D\tl8'
        dict_0 = {}
        str_2 = '&D5pb]u|{db\t'
        set_0 = {str_0, str_0, str_0, str_2}
        tuple_0 = (dict_0, str_2, dict_0, set_0)
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.difference(str_1, dict_0, list_0)
        filter_module_0 = module_0.FilterModule()
        int_0 = -261
        dict_1 = None
        var_1 = module_0.difference(filter_module_0, int_0, dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        filter_module_0 = module_0.FilterModule()
        set_0 = {filter_module_0}
        str_0 = None
        str_1 = '+l'
        str_2 = '1L\x0c @?NR(Q%j&B#`P7^'
        dict_0 = {str_0: str_1, str_2: set_0, str_0: set_0}
        bytes_0 = b'\x115\xc1l\xcc*\xf4\xe9'
        var_0 = module_0.difference(dict_0, str_2, bytes_0)
        str_3 = '0oqli]\x0bRPw\nlYKo0p2'
        str_4 = "k'M:=Y#mMH-#&x)~3"
        var_1 = module_0.symmetric_difference(set_0, str_3, str_4)
        var_2 = module_0.logarithm(filter_module_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '%].=[P'
        dict_0 = {}
        str_1 = 'R!:C(L\x0bZ1Z'
        str_2 = 'chRlR:m,vj'
        var_0 = module_0.union(dict_0, str_1, str_2)
        var_1 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -3
        var_0 = module_0.min(int_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        var_0 = module_0.logarithm(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -269.274998
        str_0 = '0>z%squ'
        var_0 = module_0.power(float_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x99|"#'
        var_0 = module_0.inversepower(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '}%\tsIr%D\tl8'
        dict_0 = {}
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_1 = 'tQ$688K{\\B=gzPm!q#9S'
        int_0 = 301
        var_1 = module_0.inversepower(int_0, int_0)
        set_0 = {str_0, str_0, str_0, str_1, str_0}
        tuple_0 = (dict_0, str_1, dict_0, set_0)
        var_2 = module_0.rekey_on_member(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '~B[@0;tj@0N'
        var_0 = module_0.human_readable(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 3311.0
        str_0 = 'X}ws*(*8zoS'
        var_0 = module_0.human_to_bytes(float_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        str_0 = 'tQ$688K{\\B=gzPm!q#9S'
        set_0 = {str_0, str_0, str_0, str_0, str_0}
        tuple_0 = (dict_0, str_0, dict_0, set_0)
        var_0 = module_0.rekey_on_member(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 331.07
        str_0 = 'ojPWSHfMKs'
        var_0 = module_0.rekey_on_member(float_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'fFP]}7rMvu_\r3'
        tuple_0 = (str_0, str_0)
        bool_0 = True
        var_0 = module_0.rekey_on_member(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 540.64199
        var_0 = module_0.logarithm(float_0)
        filter_module_0 = module_0.FilterModule()
        str_0 = '{'
        var_1 = filter_module_0.filters()
        display_0 = module_1.Display()
        var_2 = module_0.human_readable(filter_module_0, str_0, display_0)
    except BaseException:
        pass

def test_case_17():
    try:
        dict_0 = None
        list_0 = []
        filter_module_0 = module_0.FilterModule(*list_0)
        float_0 = 2821.074
        list_1 = [float_0, filter_module_0, dict_0, filter_module_0]
        var_0 = module_0.symmetric_difference(dict_0, filter_module_0, list_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '%].=[P'
        dict_0 = {}
        str_1 = '&D5pb]u|{db\t'
        set_0 = {str_0, str_0, str_0, str_1}
        tuple_0 = (dict_0, str_1, dict_0, set_0)
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.difference(str_1, dict_0, list_0)
        var_1 = module_0.logarithm(list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'tJFb!X[A5n"E{d*'
        filter_module_0 = module_0.FilterModule()
        float_0 = 532.61
        tuple_0 = (filter_module_0, str_0, float_0)
        set_0 = {filter_module_0}
        var_0 = module_0.symmetric_difference(str_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = -1543.0888
        float_1 = 485.43112
        var_0 = module_0.logarithm(float_0, float_1)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        bytes_0 = b'\xf2\xed\x07\xaf\xf3]\xc3;'
        var_1 = module_0.max(bytes_0, bytes_0)
        int_0 = 301
        var_2 = module_0.inversepower(int_0, int_0)
        set_0 = set()
        var_3 = module_0.logarithm(int_0)
        str_0 = '+J.Ds7j]'
        var_4 = module_0.min(set_0, str_0)
        list_0 = [var_0, var_1]
        var_5 = module_0.unique(int_0, list_0, int_0)
        var_6 = module_0.difference(list_0, set_0, dict_0)
        bytes_1 = b'\xfb\xd8\xc4z\xbfT\x1b\xc2\xd0\t\x0bl\xf0Z\x08\x99\xa1}'
        var_7 = module_0.rekey_on_member(bytes_1, dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = "\x0b'3U*YL)GNqj<4]t`i^"
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = '\n        Example of contents of /etc/iscsi/initiatorname.iscsi:\n\n        ## DO NOT EDIT OR REMOVE THIS FILE!\n        ## If you remove this file, the iSCSI daemon will not start.\n        ## If you change the InitiatorName, existing access control lists\n        ## may reject this initiator.  The InitiatorName must be unique\n        ## for each iSCSI initiator.  Do NOT duplicate iSCSI InitiatorNames.\n        InitiatorName=iqn.1993-08.org.debian:01:44a42c8ddb8b\n\n        Example of output from the AIX lsattr command:\n\n        # lsattr -E -l iscsi0\n        disc_filename  /etc/iscsi/targets            Configuration file                            False\n        disc_policy    file                          Discovery Policy                              True\n        initiator_name iqn.localhost.hostid.7f000002 iSCSI Initiator Name                          True\n        isns_srvnames  auto                          iSNS Servers IP Addresses                     True\n        isns_srvports                                iSNS Servers Port Numbers                     True\n        max_targets    16                            Maximum Targets Allowed                       True\n        num_cmd_elems  200                           Maximum number of commands to queue to driver True\n\n        Example of output from the HP-UX iscsiutil command:\n\n        #iscsiutil -l\n        Initiator Name             : iqn.1986-03.com.hp:mcel_VMhost3.1f355cf6-e2db-11e0-a999-b44c0aef5537\n        Initiator Alias            :\n\n        Authentication Method      : None\n        CHAP Method                : CHAP_UNI\n        Initiator CHAP Name        :\n        CHAP Secret              U :\n        NAS Hostname               :\n        NAS Secret                 :\n        Radius Server Hostname     :\n        Header Digest              : None, CRC32C (default)\n        Data Digest                : None, CRC32C (default)\n        SLP Scope list for iSLPD   :\n        '
        var_0 = module_0.rekey_on_member(dict_0, str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '%].=[P'
        dict_0 = {}
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_1 = 'tQ$688K{\\B=gzm!q#9S'
        bytes_0 = b'\xf2\xed\x07\xaf\xf3]\xc1\xc3,\xc3'
        var_1 = module_0.max(bytes_0, bytes_0)
        int_0 = 301
        var_2 = module_0.inversepower(int_0, int_0)
        set_0 = set()
        var_3 = module_0.logarithm(int_0)
        str_2 = '+!J.Ds7Mj]'
        var_4 = module_0.min(set_0, str_2)
        set_1 = {str_0, str_0, str_0, str_1}
        tuple_0 = (dict_0, str_1, dict_0, set_1)
        list_0 = [var_0, var_1]
        var_5 = module_0.unique(list_0, tuple_0)
        var_6 = module_0.rekey_on_member(dict_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '}%\tsIr%D\tl8'
        str_1 = 'QKb6g_c>C37<'
        dict_0 = {}
        int_0 = 2740
        list_0 = [dict_0, dict_0, int_0]
        var_0 = module_0.difference(str_1, list_0, list_0)
        dict_1 = {}
        str_2 = "&D5pb]'\rd|{dbc"
        set_0 = {str_0, str_0, str_0, str_2}
        tuple_0 = (dict_1, str_2, dict_1, set_0)
        list_1 = [tuple_0, tuple_0]
        var_1 = module_0.difference(str_0, dict_1, list_1)
        str_3 = 'R!:C(L\x0bZ1Z'
        dict_2 = {str_1: str_1, str_3: set_0}
        str_4 = None
        var_2 = module_0.unique(dict_2, str_4, dict_2)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '7}9r2'
        int_0 = -1035
        var_0 = module_0.human_to_bytes(str_0, int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = -449
        display_0 = module_1.Display(int_0)
        dict_0 = {display_0: display_0, display_0: display_0}
        str_0 = 'IK\x0c\x0c/B]Lf4+p)0C'
        var_0 = module_0.min(dict_0, str_0)
        list_0 = [str_0]
        str_1 = '?|N=XV}$+A_rJK ApT[I'
        str_2 = 'oKgAMl\t\x0c6" ^d!*t'
        bool_0 = False
        dict_1 = {str_1: str_1, str_2: dict_0, str_2: bool_0}
        var_1 = module_0.unique(list_0, dict_1, bool_0, list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = False
        int_0 = -610
        var_0 = module_0.power(bool_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '}%\tsIr%D\tl8'
        dict_0 = {}
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_1 = 'tQ$688K{\\B=gzm!q#9S'
        bytes_0 = b'\xf2\xed\x07\xaf\xf3]\xc1\xc3,\xc3'
        var_1 = module_0.max(bytes_0, bytes_0)
        int_0 = 301
        var_2 = module_0.inversepower(int_0, int_0)
        set_0 = set()
        var_3 = module_0.logarithm(int_0)
        var_4 = module_0.min(set_0, str_1)
        set_1 = {str_0, str_0, str_0, str_1}
        tuple_0 = (dict_0, str_1, dict_0, set_1)
        list_0 = [tuple_0, tuple_0]
        list_1 = [var_0, var_1]
        var_5 = module_0.unique(list_1, tuple_0)
        var_6 = module_0.difference(str_0, dict_0, list_0)
        var_7 = module_0.rekey_on_member(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = b'%'
        bool_0 = False
        var_0 = module_0.inversepower(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '\n    GNU Hurd specific subclass of Hardware. Define memory and mount facts\n    based on procfs compatibility translator mimicking the interface of\n  F the Linux kernel.\n    '
        filter_module_0 = module_0.FilterModule()
        str_1 = {str_0: str_0}
        str_2 = [str_1, str_1]
        var_0 = module_0.rekey_on_member(str_2, str_0)
    except BaseException:
        pass