# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.ioloop as module_1
import tornado.netutil as module_2
import _asyncio as module_3
import tornado.gen as module_4
import socket as module_5
import concurrent.futures._base as module_6

def test_case_0():
    try:
        list_0 = []
        bool_0 = False
        connector_0 = module_0._Connector(list_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = 'tm(E'
        int_0 = 718
        resolver_0 = module_2.Resolver()
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0)
        t_c_p_client_1 = module_0.TCPClient()
        list_0 = []
        tuple_0 = (list_0,)
        list_1 = [tuple_0, tuple_0, tuple_0, tuple_0]
        float_0 = 1700.4936
        connector_0 = module_0._Connector(list_1, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        i_o_loop_0 = module_1.IOLoop(**dict_0)
        set_0 = None
        tuple_0 = (set_0,)
        list_0 = []
        future_0 = module_3.Future(*list_0)
        bytes_0 = b'KFf\xffrC\x81\xcep\xf2j'
        tuple_1 = (bytes_0,)
        address_family_0 = None
        tuple_2 = (tuple_1, address_family_0)
        list_1 = [tuple_2, tuple_2, tuple_2]
        connector_0 = module_0._Connector(list_1, tuple_1)
        connector_0.on_connect_done(i_o_loop_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_3():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = 'Ff%A`'
        int_0 = 2105
        t_c_p_client_0 = module_0.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, int_0, str_0)
        str_1 = '3*/<'
        tuple_0 = (i_o_loop_0, i_o_stream_0, str_1)
        callable_0 = module_4.coroutine(tuple_0)
        list_0 = []
        tuple_1 = (list_0, list_0)
        tuple_2 = (callable_0, tuple_1)
        list_1 = [tuple_2, tuple_2]
        callable_1 = None
        connector_0 = module_0._Connector(list_1, callable_1)
        future_0 = connector_0.start()
    except BaseException:
        pass

def test_case_4():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = 'Ff%A`'
        int_0 = 2105
        t_c_p_client_0 = module_0.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, int_0, str_0)
        str_1 = '3*/<'
        tuple_0 = (i_o_loop_0, i_o_stream_0, str_1)
        t_c_p_client_1 = module_0.TCPClient()
        t_c_p_client_1.close()
        callable_0 = module_4.coroutine(tuple_0)
        list_0 = []
        tuple_1 = (list_0, list_0)
        tuple_2 = (callable_0, tuple_1)
        tuple_3 = (i_o_loop_0, i_o_stream_0)
        list_1 = [tuple_3, tuple_2]
        connector_0 = module_0._Connector(list_1, tuple_0)
        connector_0.on_timeout()
    except BaseException:
        pass

def test_case_5():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = 'Ff%A`'
        int_0 = 2105
        t_c_p_client_0 = module_0.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, int_0, str_0)
        str_1 = '%a %b %d %H:%M:%S %Y'
        tuple_0 = (i_o_loop_0, i_o_stream_0, str_1)
        t_c_p_client_1 = module_0.TCPClient()
        t_c_p_client_1.close()
        i_o_loop_0.install()
        callable_0 = module_4.coroutine(tuple_0)
        list_0 = []
        tuple_1 = (list_0, list_0)
        tuple_2 = (callable_0, tuple_1)
        list_1 = [tuple_2, tuple_2]
        t_c_p_client_2 = module_0.TCPClient(list_1)
        float_0 = 0.3
        connector_0 = module_0._Connector(list_1, float_0)
        connector_1 = module_0._Connector(list_1, t_c_p_client_2)
        connector_1.clear_timeouts()
        address_family_0 = module_5.AddressFamily.AF_NETBEUI
        str_2 = '#'
        list_2 = [list_1, address_family_0]
        i_o_stream_1 = t_c_p_client_2.connect(str_2, int_0, list_2, int_0)
        connector_1.on_connect_timeout()
        callable_1 = None
        list_3 = [tuple_2, tuple_2, tuple_2]
        connector_2 = module_0._Connector(list_3, callable_1)
        connector_1.clear_timeout()
        connector_3 = module_0._Connector(list_3, callable_1)
        connector_1.on_connect_timeout()
        connector_4 = module_0._Connector(list_1, callable_1)
        connector_4.close_streams()
        connector_0.on_timeout()
        future_0 = module_6.Future()
        connector_1.try_connect(future_0)
    except BaseException:
        pass