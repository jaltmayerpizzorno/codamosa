# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    pass

def test_case_1():
    blueprint_group_0 = module_0.BlueprintGroup()

def test_case_2():
    blueprint_group_0 = module_0.BlueprintGroup()
    list_0 = []
    blueprint_group_1 = module_0.BlueprintGroup(list_0)
    str_0 = 'G10d`$?$'
    blueprint_0 = module_1.Blueprint(str_0, str_0, str_0)
    str_1 = '\r+'
    int_0 = 2
    blueprint_group_2 = module_0.BlueprintGroup()
    var_0 = blueprint_group_2.middleware()
    var_1 = blueprint_group_1.__iter__()
    blueprint_1 = module_1.Blueprint(str_1, str_1, int_0)
    blueprint_group_3 = module_0.BlueprintGroup()
    blueprint_group_3.append(blueprint_1)

def test_case_3():
    blueprint_group_0 = module_0.BlueprintGroup()
    var_0 = blueprint_group_0.middleware()
    int_0 = blueprint_group_0.__len__()

def test_case_4():
    str_0 = '|+87!j1Tyj*qp5F`'
    str_1 = ')hvY{vO^ &'
    blueprint_group_0 = module_0.BlueprintGroup(str_1)
    int_0 = blueprint_group_0.__len__()
    str_2 = None
    blueprint_group_1 = module_0.BlueprintGroup()
    int_1 = blueprint_group_1.__len__()
    int_2 = 0
    blueprint_0 = module_1.Blueprint(str_0, str_2, int_2)
    blueprint_group_2 = module_0.BlueprintGroup()
    blueprint_group_2.append(blueprint_0)

def test_case_5():
    bytes_0 = b"\n/\xe7L\xfd\xaf\xd6\x13'\xdf3u\xa9k\xd4\xf4\xbf\x7f\xbc"
    list_0 = [bytes_0, bytes_0]
    blueprint_group_0 = module_0.BlueprintGroup()
    var_0 = blueprint_group_0.middleware(*list_0)

def test_case_6():
    blueprint_group_0 = module_0.BlueprintGroup()
    list_0 = [blueprint_group_0, blueprint_group_0]
    bytes_0 = b'\xb4Y\x91B'
    tuple_0 = (blueprint_group_0, list_0, bytes_0)
    list_1 = [tuple_0, list_0, tuple_0]
    blueprint_group_1 = module_0.BlueprintGroup()
    var_0 = blueprint_group_1.middleware(*list_1)
    list_2 = [var_0]
    var_1 = blueprint_group_0.middleware(*list_2)

def test_case_7():
    blueprint_group_0 = module_0.BlueprintGroup()
    list_0 = [blueprint_group_0, blueprint_group_0]
    bytes_0 = b'\xb4Y\x91B'
    tuple_0 = (blueprint_group_0, list_0, bytes_0)
    list_1 = [tuple_0, list_0, tuple_0]
    blueprint_group_1 = module_0.BlueprintGroup()
    str_0 = 'x-forwarded-path'
    optional_0 = None
    blueprint_0 = module_1.Blueprint(str_0, str_0, optional_0)
    blueprint_group_0.append(blueprint_0)
    var_0 = blueprint_group_1.middleware(*list_1)
    list_2 = [var_0]
    var_1 = blueprint_group_0.middleware(*list_2)