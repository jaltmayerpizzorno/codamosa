# Automatically generated by Pynguin.
import mimesis.providers.choice as module_0

def test_case_0():
    try:
        str_0 = '3uEb!PL-O'
        dict_0 = {str_0: str_0}
        choice_0 = module_0.Choice(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        int_0 = -169
        choice_0 = module_0.Choice()
        var_0 = choice_0.__call__(bytes_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        optional_0 = None
        choice_0 = module_0.Choice()
        bool_0 = None
        choice_1 = module_0.Choice()
        var_0 = choice_1.__call__(optional_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        int_0 = 636
        choice_0 = module_0.Choice()
        str_0 = 'W++E~^RzCNhv'
        var_0 = choice_0.__call__(str_0, bool_0)
        bytes_0 = b'_\r\xb5\xb3`\x1d\x1b\xcf\x12\xe5\xfdU'
        var_1 = choice_0.__call__(bytes_0)
        var_2 = choice_0.__call__(bytes_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        int_0 = 442
        bool_0 = False
        choice_0 = module_0.Choice()
        var_0 = choice_0.__call__(list_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        choice_0 = module_0.Choice()
        int_0 = -1958
        str_0 = '<?1--6/'
        bool_1 = True
        var_0 = choice_0.__call__(str_0, bool_1)
        choice_1 = module_0.Choice()
        list_0 = [choice_1, bool_0, bool_1, var_0]
        var_1 = choice_0.__call__(list_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        choice_0 = module_0.Choice()
        tuple_0 = (bool_0, choice_0)
        int_0 = 86
        bool_1 = None
        var_0 = choice_0.__call__(tuple_0, int_0, bool_1)
        choice_1 = module_0.Choice()
        bytes_0 = b'_\r\xb5\xb3`\x1d\x1b\xcf\x12\xe5\xfdU'
        var_1 = choice_0.__call__(bytes_0)
        var_2 = choice_0.__call__(bytes_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        choice_0 = module_0.Choice()
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = [str_0, str_1, str_2]
        var_0 = choice_0.__call__(str_3)
        choice_1 = module_0.Choice()
        str_4 = [str_0, str_1, str_2]
        int_0 = 1
        var_1 = choice_1.__call__(str_4, int_0)
        choice_2 = module_0.Choice()
        str_5 = 'abc'
        bool_0 = True
        var_2 = choice_2.__call__(str_5, bool_0)
        choice_3 = module_0.Choice()
        int_1 = 2
        var_3 = choice_3.__call__(str_5, int_1)
        choice_4 = module_0.Choice()
        str_6 = (str_0, str_1, str_2)
        int_2 = 5
        var_4 = choice_4.__call__(str_6, int_2)
        choice_5 = module_0.Choice()
        str_7 = 'aabbbccccddddd'
        int_3 = 4
        bool_1 = True
        var_5 = choice_5.__call__(str_7, int_3, bool_1)
        choice_6 = module_0.Choice()
        str_8 = [str_0, str_1, str_2]
        int_4 = -1
        var_6 = choice_6.__call__(str_8, int_4)
    except BaseException:
        pass