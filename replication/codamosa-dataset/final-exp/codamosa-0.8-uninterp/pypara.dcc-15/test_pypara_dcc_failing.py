# Automatically generated by Pynguin.
import datetime as module_0
import pypara.currencies as module_1
import pypara.dcc as module_2

def test_case_0():
    try:
        date_0 = module_0.date()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ';ad*H\x0b'
        str_1 = None
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        date_0 = None
        list_0 = [str_1]
        list_1 = [str_0, currency_type_0, str_1, currency_type_0]
        d_c_c_0 = module_2.DCC(*list_1)
        decimal_0 = d_c_c_0.calculate_daily_fraction(date_0, date_0, date_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        date_0 = None
        decimal_0 = module_2.dcfc_act_act(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_0.date(*list_0)
        decimal_0 = module_2.dcfc_30_360_german(date_0, date_0, date_0)
        decimal_1 = module_2.dcfc_30_e_plus_360(date_0, date_0, date_0)
        date_1 = module_0.date(*list_0)
        decimal_2 = module_2.dcfc_act_act_icma(date_0, date_1, date_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'D?/C0n>9M L\x0c7J'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [str_0, dict_0, dict_0, dict_0]
        d_c_c_0 = module_2.DCC(*list_0)
        d_c_c_registry_machinery_0 = module_2.DCCRegistryMachinery()
        d_c_c_registry_machinery_0.register(d_c_c_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '#6e'
        d_c_c_registry_machinery_0 = module_2.DCCRegistryMachinery()
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
        list_0 = [d_c_c_registry_machinery_0, str_0, str_0, str_0]
        optional_1 = d_c_c_registry_machinery_0.find(str_0)
        d_c_c_0 = module_2.DCC(*list_0)
        d_c_c_registry_machinery_0.register(d_c_c_0)
        d_c_c_registry_machinery_0.register(d_c_c_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_0.date(*list_0)
        decimal_0 = module_2.dcfc_30_360_german(date_0, date_0, date_0)
        decimal_1 = module_2.dcfc_act_360(date_0, date_0, date_0)
        decimal_2 = module_2.dcfc_act_act(date_0, date_0, date_0, decimal_1)
        decimal_3 = module_2.dcfc_act_365_a(date_0, date_0, date_0)
        decimal_4 = module_2.dcfc_act_act_icma(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_0.date(*list_0)
        decimal_0 = module_2.dcfc_30_360_german(date_0, date_0, date_0)
        decimal_1 = module_2.dcfc_act_365_f(date_0, date_0, date_0)
        date_1 = module_0.date(*list_0)
        decimal_2 = module_2.dcfc_act_act_icma(date_0, date_1, date_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_0.date(*list_0)
        decimal_0 = module_2.dcfc_nl_365(date_0, date_0, date_0)
        decimal_1 = module_2.dcfc_30_360_isda(date_0, date_0, date_0)
        decimal_2 = module_2.dcfc_act_act_icma(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_0.date(*list_0)
        decimal_0 = module_2.dcfc_nl_365(date_0, date_0, date_0)
        decimal_1 = module_2.dcfc_act_act_icma(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_0.date(*list_0)
        decimal_0 = module_2.dcfc_30_360_german(date_0, date_0, date_0)
        decimal_1 = module_2.dcfc_nl_365(date_0, date_0, date_0)
        date_1 = module_0.date(*list_0)
        decimal_2 = module_2.dcfc_act_act_icma(date_0, date_1, date_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_0.date(*list_0)
        list_1 = [date_0, bool_0, date_0, list_0]
        dict_0 = {}
        d_c_c_0 = module_2.DCC(*list_1, **dict_0)
        decimal_0 = d_c_c_0.calculate_fraction(date_0, date_0, date_0)
    except BaseException:
        pass