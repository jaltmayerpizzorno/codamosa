# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        bool_0 = False
        int_0 = -784
        int_1 = 9000
        ansible_version_0 = module_0.AnsibleVersion(bool_0, int_0, bool_0, int_1)
        str_0 = 'Qj;w\tGK%hkeYZ^3[h'
        bytes_0 = b'n\x06\n\x82\x13i\xda\rC\x88\xaf%B\x7f\xf2\x9c\x98'
        var_0 = ansible_version_0.__call__(bytes_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '--diff'
        sorting_help_formatter_0 = None
        unrecognized_argument_0 = module_0.UnrecognizedArgument(str_0, sorting_help_formatter_0)
        var_0 = module_0.add_runas_prompt_options(unrecognized_argument_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.version()
        str_0 = '\t'
        bytes_0 = b'\x1c\xbb\x8b\xb4\x8bS{0\x81\xf0u:\x81\xb5A+\xa0\x1b-'
        bool_0 = False
        str_1 = ')'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bool_0, str_1, bytes_0)
        list_0 = None
        str_2 = 't%^fhA3!g}o<f'
        dict_0 = {str_2: var_0, str_2: list_0}
        var_1 = unrecognized_argument_0.__call__(bytes_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '(.+)'
        dict_0 = {str_0: str_0}
        list_0 = [str_0, dict_0, dict_0, str_0]
        prepend_list_action_0 = module_0.PrependListAction(dict_0, list_0)
        float_0 = 2676.002087
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = None
        dict_0 = {}
        bytes_0 = b'i5\xc2\x9eZ\xebx\xcc'
        list_0 = [tuple_0, bytes_0, dict_0, tuple_0]
        prepend_list_action_0 = module_0.PrependListAction(tuple_0, dict_0, bytes_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 36
        str_0 = '71bq=S$("dMy!\t4|'
        dict_0 = {int_0: str_0, int_0: int_0}
        bool_0 = False
        prepend_list_action_0 = module_0.PrependListAction(str_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -552
        var_0 = module_0.version(int_0)
        str_0 = '\n- name: Set _found_file to the first existing file, raising an error if a file is not found\n  set_fact:\n    _found_file: "{{ lookup(\'first_found\', findme) }}"\n  vars:\n    findme:\n      - /path/to/foo.txt\n      - bar.txt  # will be looked in files/ dir relative to role and/or play\n      - /path/to/biz.txt\n\n- name: Set _found_file to the first existing file, or an empty list if no files found\n  set_fact:\n    _found_file: "{{ lookup(\'first_found\', files, paths=[\'/extra/path\'], skip=True) }}"\n  vars:\n    files:\n      - /path/to/foo.txt\n      - /path/to/bar.txt\n\n- name: Include tasks only if one of the files exist, otherwise skip the task\n  include_tasks:\n    file: "{{ item }}"\n  with_first_found:\n    files:\n     - path/tasks.yaml\n     - path/other_tasks.yaml\n    skip: True\n\n- name: Include tasks only if one of the files exists, otherwise skip\n  include_tasks: \'{{ tasks_file }}\'\n  when: tasks_file != ""\n  vars:\n    tasks_file: "{{ lookup(\'first_found\', files=[\'tasks.yaml\', \'other_tasks.yaml\'], errors=\'ignore\') }}"\n\n- name: |\n        copy first existing file found to /some/file,\n        looking in relative directories from where the task is defined and\n        including any play objects that contain it\n  copy:\n    src: "{{ lookup(\'first_found\', findme) }}"\n    dest: /some/file\n  vars:\n    findme:\n      - foo\n      - "{{ inventory_hostname }}"\n      - bar\n\n- name: same copy but specific paths\n  copy:\n    src: "{{ lookup(\'first_found\', params) }}"\n    dest: /some/file\n  vars:\n    params:\n      files:\n        - foo\n        - "{{ inventory_hostname }}"\n        - bar\n      paths:\n        - /tmp/production\n        - /tmp/staging\n\n- name: INTERFACES | Create Ansible header for /etc/network/interfaces\n  template:\n    src: "{{ lookup(\'first_found\', findme) }}"\n    dest: "/etc/foo.conf"\n  vars:\n    findme:\n      - "{{ ansible_virtualization_type }}_foo.conf"\n      - "default_foo.conf"\n\n- name: read vars from first file found, use \'vars/\' relative subdir\n  include_vars: "{{ lookup(\'first_found\', params) }}"\n  vars:\n    params:\n      files:\n        - \'{{ ansible_distribution }}.yml\'\n        - \'{{ ansible_os_family }}.yml\'\n        - default.yml\n      paths:\n        - \'vars\'\n'
        float_0 = 3558.61
        int_1 = -682
        int_2 = -1587
        bytes_0 = b'\x0e\xacO\x9d+i\x9eKk\xbc_\xde'
        int_3 = None
        list_0 = [bytes_0, bytes_0]
        ansible_version_0 = module_0.AnsibleVersion(bytes_0, int_3, list_0)
        var_1 = module_0.version()
        str_1 = 'lsz=!itVeTbls1'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(ansible_version_0, str_1, ansible_version_0, list_0)
        unrecognized_argument_1 = module_0.UnrecognizedArgument(float_0, unrecognized_argument_0, ansible_version_0, list_0)
        ansible_version_1 = module_0.AnsibleVersion(int_1, int_2, str_0, unrecognized_argument_1)
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_1, int_3)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'w\xde[\xd9\x91\x84\x9d\xcd'
        var_0 = module_0.add_verbosity_options(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -1895.77815
        var_0 = module_0.add_async_options(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = module_0.version()
        var_1 = module_0.unfrack_path()
        str_0 = 'sparc64'
        var_2 = module_0.add_basedir_options(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x1c\xbb\x8b\xb4\x8bS{0\x81\xf0u:\x81\xb5A+\xa0\x1b-'
        list_0 = [bytes_0]
        var_1 = module_0.add_check_options(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        sorting_help_formatter_0 = None
        var_0 = module_0.add_fork_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x1c\xbb\x8b\xb4\x8bS{0\x81\xf0u:\x81\xb5A+\xa0\x1b-'
        bool_0 = True
        str_0 = ')'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bool_0, str_0, bytes_0)
        list_0 = None
        dict_0 = {str_0: unrecognized_argument_0}
        ansible_version_0 = module_0.AnsibleVersion(unrecognized_argument_0, list_0, dict_0)
        bytes_1 = None
        dict_1 = {str_0: var_0, str_0: bytes_1}
        prepend_list_action_0 = module_0.PrependListAction(dict_1, str_0, str_0)
        int_0 = -288
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(int_0)
        var_1 = module_0.add_module_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'm(:\x0c4V'
        var_0 = module_0.add_output_options(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b''
        var_0 = module_0.add_runas_options(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '=&>Ld\rH 9]pS)hE'
        var_0 = module_0.add_runas_prompt_options(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        tuple_0 = None
        var_0 = module_0.add_runtask_options(tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'e2(`~YrrxI:+'
        set_0 = {str_0}
        dict_0 = {}
        ansible_version_0 = None
        list_0 = [set_0]
        bool_0 = True
        unrecognized_argument_0 = module_0.UnrecognizedArgument(set_0, dict_0, ansible_version_0, str_0, list_0, ansible_version_0, bool_0, bool_0)
        float_0 = None
        unrecognized_argument_1 = module_0.UnrecognizedArgument(unrecognized_argument_0, float_0, list_0)
        var_0 = module_0.add_subset_options(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = module_0.version()
        str_0 = 'D'
        bytes_0 = b'\x1c\xbb\x8b\xb4\x8bS{0\x81\xf0u:\x81\xb5A+\xa0\x1b-'
        bool_0 = False
        str_1 = ')'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bool_0, str_1, bytes_0)
        dict_0 = {str_0: var_0, str_1: bytes_0}
        prepend_list_action_0 = module_0.PrependListAction(dict_0, str_0, str_1)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bool_0, bool_0)
        var_1 = sorting_help_formatter_0.add_arguments(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x1c\xbb\x8b\xb4\x8bS{0\x81\xf0u:\x81\xb5A+\xa0\x1b-'
        bool_0 = False
        str_0 = ')'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bool_0, str_0, bytes_0)
        list_0 = None
        dict_0 = {str_0: unrecognized_argument_0}
        ansible_version_0 = module_0.AnsibleVersion(unrecognized_argument_0, list_0, dict_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(list_0)
        var_1 = module_0.add_tasknoplay_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = module_0.version()
        str_0 = 'm1'
        bytes_0 = b'\xbe2\xb3\x15\xd3\x16'
        var_1 = module_0.ensure_value(str_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'D'
        bytes_0 = b'\x1c\xbb\x8b\xb4\x8bS{0\x81\xf0u:\x81\xb5A+\xa0\x1b-'
        bool_0 = True
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bool_0, str_0, bytes_0)
        list_0 = None
        dict_0 = {str_0: unrecognized_argument_0}
        ansible_version_0 = module_0.AnsibleVersion(unrecognized_argument_0, list_0, dict_0)
        float_0 = None
        prepend_list_action_0 = module_0.PrependListAction(dict_0, str_0, str_0)
        var_0 = prepend_list_action_0.__call__(bytes_0, ansible_version_0, float_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = -306
        var_0 = module_0.add_connect_options(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'Bp\xe1\xec\xf5`\xb0Y\xc9\x17\xd8o\xe8'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bytes_0)
        list_0 = []
        var_0 = sorting_help_formatter_0.add_arguments(list_0)
        complex_0 = None
        var_1 = module_0.add_subset_options(complex_0)
    except BaseException:
        pass

def test_case_24():
    try:
        var_0 = module_0.version()
        str_0 = 'D'
        bytes_0 = b'\x1c\xbb\x8b\xb4\x8bS{0\x81\xf0u:\x81\xb5A+\xa0\x1b-'
        bool_0 = True
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bool_0, str_0, bytes_0)
        list_0 = None
        float_0 = 1519.938115
        var_1 = module_0.add_runas_prompt_options(list_0, float_0)
    except BaseException:
        pass

def test_case_25():
    try:
        tuple_0 = ()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(tuple_0)
        var_0 = module_0.add_fork_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = False
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bool_0)
        var_0 = module_0.add_basedir_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_27():
    try:
        float_0 = -87.0
        list_0 = [float_0, float_0, float_0]
        tuple_0 = None
        tuple_1 = (tuple_0,)
        sorting_help_formatter_0 = None
        list_1 = []
        argument_parser_0 = module_1.ArgumentParser(tuple_1, list_0, sorting_help_formatter_0, list_1)
        var_0 = module_0.add_check_options(argument_parser_0)
    except BaseException:
        pass

def test_case_28():
    try:
        float_0 = None
        prepend_list_action_0 = None
        str_0 = 'XG6va[b'
        str_1 = None
        dict_0 = {str_0: float_0, str_1: str_0}
        argument_parser_0 = module_1.ArgumentParser(float_0, prepend_list_action_0, str_0, dict_0)
        var_0 = module_0.add_runtask_options(argument_parser_0)
        float_1 = 1.5
        var_1 = module_0.add_basedir_options(float_1)
    except BaseException:
        pass

def test_case_29():
    try:
        var_0 = module_0.version()
        str_0 = 'D'
        bytes_0 = b'\x1c\xbb\x8b\xb4\x8bS{0\x81\xf0u:\x81\xb5A+\xa0\x1b-'
        float_0 = None
        dict_0 = {str_0: var_0, str_0: bytes_0}
        list_0 = [float_0, str_0, str_0, float_0]
        str_1 = '*,7M<t'
        argument_parser_0 = module_1.ArgumentParser(list_0, str_1)
        var_1 = module_0.add_connect_options(argument_parser_0)
        prepend_list_action_0 = module_0.PrependListAction(dict_0, str_0, str_0)
        int_0 = -3351
        int_1 = 1024
        set_0 = {int_0, prepend_list_action_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(int_1, set_0)
    except BaseException:
        pass