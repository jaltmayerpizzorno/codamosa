# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        float_0 = -1036.65
        str_0 = '4#I>KF|'
        validation_0 = module_0.Validation(float_0, str_0)
        var_0 = validation_0.__str__()
        str_1 = '\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        '
        int_0 = -673
        set_0 = {str_1}
        validation_1 = module_0.Validation(set_0, set_0)
        var_1 = validation_1.to_either()
        var_2 = validation_1.is_fail()
        float_1 = 3023.8
        validation_2 = module_0.Validation(int_0, float_1)
        float_2 = 1539.482665
        validation_3 = module_0.Validation(float_2, validation_0)
        var_3 = validation_3.is_fail()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = '$'
        float_0 = 3900.15215
        validation_0 = module_0.Validation(str_0, float_0)
        var_0 = validation_0.map(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xe8=\xfdB\xad\x86X\x88\x01\xfdW@\xab\xc6\x1e\x03U\x18'
        str_0 = '\rZv(t*O=~8^NUWjB'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [str_0]
        str_1 = '$UOTy+A8j5_%nL'
        set_0 = None
        int_0 = 3326
        tuple_0 = (set_0, str_1, int_0)
        tuple_1 = (list_0, bytes_0, str_1, tuple_0)
        str_2 = '\x0c\x0bar%h}u8$rA|@\\]`'
        validation_0 = module_0.Validation(tuple_1, str_2)
        var_0 = validation_0.is_fail()
        validation_1 = module_0.Validation(dict_0, dict_0)
        var_1 = validation_1.bind(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '0G7v*D\ncJF;< ZUMu\nB'
        bool_0 = False
        list_0 = [str_0]
        int_0 = -3623
        validation_0 = module_0.Validation(bool_0, int_0)
        var_0 = validation_0.ap(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        bool_0 = False
        bool_1 = False
        bytes_0 = b'_\x96\xd7\x16\xeef{M\x82\x19'
        validation_0 = module_0.Validation(bytes_0, dict_0)
        tuple_0 = (bool_1, validation_0, dict_0)
        validation_1 = module_0.Validation(bool_0, tuple_0)
        validation_2 = module_0.Validation(dict_0, validation_1)
        var_0 = validation_2.to_try()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "Y e[GY:D^'t?d~!"
        bool_0 = True
        validation_0 = module_0.Validation(str_0, bool_0)
        var_0 = validation_0.__eq__(bool_0)
        str_1 = 'VQPX4+MCi.2P'
        list_0 = []
        validation_1 = module_0.Validation(str_1, list_0)
        var_1 = validation_1.__str__()
        bytes_0 = b'\x99!\xc8K\xca\x96'
        set_0 = {str_0}
        validation_2 = module_0.Validation(bytes_0, set_0)
        var_2 = validation_2.to_maybe()
        set_1 = {str_0, str_0, str_0, str_0}
        validation_3 = module_0.Validation(str_0, set_1)
        var_3 = validation_3.to_box()
        str_2 = 'R9L73vNoFK'
        var_4 = validation_3.map(str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -2366.80604
        dict_0 = None
        int_0 = False
        str_0 = 'M$T+Z,'
        bool_0 = False
        str_1 = '\n    Maybe type is the most common way of representing nothingness (or the null ype).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    '
        validation_0 = module_0.Validation(str_1, dict_0)
        set_0 = set()
        bytes_0 = b'\\\xbf\x9b\x0e'
        validation_1 = module_0.Validation(set_0, bytes_0)
        var_0 = validation_1.__eq__(validation_1)
        str_2 = '.:]TH\x0c\x0b,hD'
        int_1 = True
        bool_1 = False
        validation_2 = module_0.Validation(int_1, bool_1)
        float_1 = 2466.6
        validation_3 = module_0.Validation(bytes_0, float_1)
        validation_4 = module_0.Validation(str_2, validation_3)
        tuple_0 = (str_0, float_0, bool_0, validation_4)
        bytes_1 = b'S\x92\xeb;\x9ds\xe7\xe1\r\x0eL\xdd\xd3\xf1\x07\xf2S\x98\x95'
        validation_5 = module_0.Validation(tuple_0, bytes_1)
        var_1 = validation_5.bind(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "Y e[GY:D^'t?d~!"
        bool_0 = True
        bool_1 = True
        validation_0 = module_0.Validation(str_0, bool_1)
        var_0 = validation_0.__eq__(bool_0)
        list_0 = []
        validation_1 = module_0.Validation(str_0, list_0)
        var_1 = validation_1.__str__()
        var_2 = validation_1.to_either()
        bytes_0 = b'\x99!\xc8K\xca\x96'
        set_0 = {str_0}
        validation_2 = module_0.Validation(bytes_0, set_0)
        var_3 = validation_2.to_maybe()
        set_1 = {str_0, str_0, str_0, str_0}
        validation_3 = module_0.Validation(str_0, set_1)
        var_4 = validation_3.to_box()
        str_1 = 'R9L73vNoFK'
        var_5 = validation_3.map(str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "Y e[GY:D^'t?d~!"
        bool_0 = True
        bool_1 = True
        validation_0 = module_0.Validation(str_0, bool_1)
        var_0 = validation_0.__eq__(bool_0)
        list_0 = []
        validation_1 = module_0.Validation(str_0, list_0)
        var_1 = validation_1.__str__()
        var_2 = validation_1.to_either()
        bytes_0 = b'\x99!\xc8K\xca\x96'
        set_0 = {str_0}
        validation_2 = module_0.Validation(bytes_0, set_0)
        var_3 = validation_1.to_maybe()
        set_1 = {str_0, str_0, str_0, str_0}
        validation_3 = module_0.Validation(str_0, set_1)
        var_4 = validation_3.to_box()
        str_1 = 'R9L73vNoFK'
        var_5 = validation_3.map(str_1)
    except BaseException:
        pass