# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        list_0 = []
        list_1 = None
        all_of_0 = module_0.AllOf(list_1)
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(one_of_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        field_0 = None
        list_0 = [field_0, field_0]
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0]
        all_of_0 = module_0.AllOf(any_1)
        field_0 = module_1.Field()
        if_then_else_0 = module_0.IfThenElse(all_of_0, field_0)
        str_0 = ''
        any_2 = if_then_else_0.validate(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        field_0 = module_1.Field()
        str_0 = 'allow_blk'
        dict_0 = {str_0: str_0, str_0: field_0}
        if_then_else_0 = module_0.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Must be an integer.'
        field_0 = module_1.Field()
        if_then_else_0 = module_0.IfThenElse(field_0)
        bool_0 = False
        any_0 = if_then_else_0.validate(str_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        field_0 = module_1.Field()
        never_match_0 = module_0.NeverMatch()
        str_0 = 'allow_blk'
        dict_0 = {str_0: field_0, str_0: never_match_0}
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, field_0)
        if_then_else_1 = module_0.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0]
        one_of_0 = module_0.OneOf(any_1)
        int_0 = 1
        any_2 = one_of_0.validate(int_0)
        never_match_0 = module_0.NeverMatch()
        never_match_1 = [never_match_0]
        one_of_1 = module_0.OneOf(never_match_1)
        int_1 = 1
        any_3 = one_of_1.validate(int_1)
    except BaseException:
        pass

def test_case_7():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0]
        one_of_0 = module_0.OneOf(any_1)
        str_0 = 'x'
        any_2 = one_of_0.validate(str_0)
        any_3 = module_1.Any()
        any_4 = module_1.Any()
        any_5 = [any_3, any_4]
        one_of_1 = module_0.OneOf(any_5)
        any_6 = one_of_1.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        any_0 = module_1.Any()
        any_1 = module_1.Any()
        any_2 = [any_0, any_1]
        all_of_0 = module_0.AllOf(any_2)
        not_0 = module_0.Not(all_of_0)
        int_0 = 2
        bool_0 = True
        any_3 = not_0.validate(int_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0]
        all_of_0 = module_0.AllOf(any_1)
        never_match_0 = module_0.NeverMatch()
        list_0 = []
        never_match_1 = module_0.NeverMatch()
        any_2 = all_of_0.validate(never_match_1)
        one_of_0 = module_0.OneOf(list_0)
        any_3 = all_of_0.validate(any_0)
        all_of_1 = module_0.AllOf(list_0)
        bool_0 = True
        str_0 = 'ZV>kj nx=R<f):'
        str_1 = 'field'
        str_2 = 'allow_null'
        field_0 = module_1.Field(allow_null=bool_0)
        dict_0 = {str_0: list_0, str_1: str_1, str_2: all_of_0, str_1: field_0}
        not_0 = module_0.Not(field_0, **dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        never_match_0 = module_0.NeverMatch()
        never_match_1 = module_0.NeverMatch()
        if_then_else_0 = module_0.IfThenElse(never_match_0, never_match_1, never_match_0)
        var_0 = None
        any_0 = if_then_else_0.validate(var_0)
    except BaseException:
        pass

def test_case_11():
    try:
        any_0 = module_1.Any()
        str_0 = "' i\x0c+sjZn\nCHIm`"
        field_0 = module_1.Field(title=str_0, description=str_0)
        any_1 = field_0.serialize(any_0)
        any_2 = any_0.get_default_value()
        any_3 = [any_0]
        all_of_0 = module_0.AllOf(any_3)
        field_1 = module_1.Field()
        bool_0 = False
        any_4 = field_1.get_default_value()
        if_then_else_0 = module_0.IfThenElse(all_of_0, field_1)
        list_0 = [field_0]
        never_match_0 = module_0.NeverMatch()
        one_of_0 = module_0.OneOf(list_0)
        all_of_1 = module_0.AllOf(list_0)
        str_1 = 'allow_null'
        str_2 = 'ivl?PD>:O>stJmdI'
        str_3 = 'allow_blak'
        dict_0 = {str_1: bool_0, str_2: all_of_1, str_3: field_1}
        one_of_1 = module_0.OneOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        any_0 = module_1.Any()
        str_0 = 'allow_null'
        field_0 = module_1.Field(title=str_0, description=str_0)
        any_1 = field_0.serialize(any_0)
        any_2 = any_0.get_default_value()
        any_3 = [any_0]
        all_of_0 = module_0.AllOf(any_3)
        field_1 = module_1.Field()
        any_4 = field_1.get_default_value()
        if_then_else_0 = module_0.IfThenElse(all_of_0, field_1)
        list_0 = []
        one_of_0 = module_0.OneOf(list_0)
        all_of_1 = module_0.AllOf(list_0)
        all_of_2 = module_0.AllOf(list_0)
        str_1 = 'allow_blak'
        dict_0 = {str_1: all_of_2, str_0: field_1}
        all_of_3 = module_0.AllOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        any_0 = module_1.Any()
        str_0 = 'allow_null'
        field_0 = module_1.Field(title=str_0, description=str_0)
        any_1 = field_0.serialize(any_0)
        any_2 = any_0.get_default_value()
        dict_0 = {str_0: any_2}
        never_match_0 = module_0.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        any_0 = module_1.Any()
        str_0 = 'allow_null'
        field_0 = module_1.Field(title=str_0, description=str_0)
        any_1 = field_0.serialize(any_0)
        any_2 = any_0.get_default_value()
        any_3 = [any_0]
        all_of_0 = module_0.AllOf(any_3)
        field_1 = module_1.Field()
        str_1 = '&@Y*l{5CNke*d\'"^i`q2'
        str_2 = 'jk8:w0:G'
        not_0 = module_0.Not(field_0)
        dict_0 = {str_1: any_2, str_1: field_0, str_2: any_3, str_0: not_0}
        if_then_else_0 = module_0.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass