# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        str_0 = 'iptmb7es'
        float_0 = 1358.181961716743
        set_0 = {str_0}
        var_0 = module_0.append_param(str_0, str_0, set_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'H'
        str_0 = None
        float_0 = 1577.62193
        var_0 = module_0.append_match_flag(bytes_0, str_0, float_0, float_0)
        bytes_1 = b'Z'
        int_0 = -1332
        var_1 = module_0.get_iptables_version(bytes_1, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'iptmb7es'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        float_0 = 1358.181961716743
        set_0 = {str_0}
        list_0 = []
        int_0 = -4025
        var_0 = module_0.append_csv(list_0, dict_0, int_0)
        var_1 = module_0.append_param(str_0, str_0, set_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 689.5986
        bytes_0 = b'\x11\x0e99\x7f'
        var_0 = module_0.append_match(float_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'M1m0wKF\x0c-k'
        list_0 = [str_0, str_0, str_0]
        float_0 = 0.001
        float_1 = 512.0
        var_0 = module_0.append_jump(float_0, float_1, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/sbin/iptables'
        str_1 = '-I'
        var_0 = dict(table=str_1, chain=str_1, protocol=str_1, destination_port=str_1, jump=str_1, rule_num=str_1)
        var_1 = module_0.push_arguments(str_0, str_1, var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        bool_0 = False
        bool_1 = True
        var_0 = module_0.remove_rule(dict_0, bool_0, bool_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'dO6v?Rk{wgQn'
        str_1 = '7l@*'
        list_0 = []
        var_0 = module_0.check_present(str_0, str_1, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'68Y\x0eoFk\x9f\xd0\xeb\xc5\xfc\xe5\xdft\x94'
        str_0 = ''
        int_0 = -3986
        set_0 = set()
        var_0 = module_0.append_match_flag(str_0, int_0, set_0, bytes_0)
        list_0 = [bytes_0, bytes_0]
        dict_0 = {}
        int_1 = None
        var_1 = module_0.append_tcp_flags(list_0, dict_0, int_1)
        float_0 = 1273.319203
        list_1 = [var_0]
        dict_1 = {}
        var_2 = module_0.append_wait(list_1, dict_1, int_0)
        bool_0 = False
        var_3 = module_0.append_match(list_1, bool_0, list_1)
        str_1 = '<Aa;&u*"E'
        var_4 = module_0.append_rule(set_0, float_0, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '{'
        bytes_0 = None
        bool_0 = False
        var_0 = module_0.insert_rule(str_0, bytes_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        str_1 = 'Available'
        int_0 = -3971
        var_0 = module_0.flush_table(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\x17\xa2\xbeb\xc1-\xb2\xc6*\xdf\x9d'
        int_0 = 1217
        str_0 = 'r\\9D)lQ'
        str_1 = 'sz*-v5n\\'
        tuple_0 = (int_0, str_1, int_0, bytes_0)
        bool_0 = False
        tuple_1 = (int_0, str_0, tuple_0, bool_0)
        var_0 = module_0.get_chain_policy(bytes_0, tuple_1, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        bool_1 = False
        var_0 = module_0.get_iptables_version(dict_0, bool_1)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        str_0 = "ci`pX0SDp+t\x0cTM1NM?'"
        float_0 = -1729.36
        var_0 = module_0.set_chain_policy(set_0, str_0, float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'iptmb7es'
        float_0 = 1358.181961716743
        set_0 = {str_0}
        int_0 = -2309
        bool_0 = False
        list_0 = [int_0, set_0, bool_0]
        var_0 = module_0.append_tcp_flags(int_0, bool_0, list_0)
        var_1 = module_0.append_param(str_0, str_0, set_0, float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'iptables'
        var_0 = None
        str_1 = 'table'
        str_2 = 'chain'
        str_3 = 'policy'
        float_0 = -4465.2431
        tuple_0 = None
        int_0 = 3869
        var_1 = module_0.append_csv(float_0, tuple_0, int_0)
        str_4 = 'filter'
        str_5 = 'INPUT'
        str_6 = 'DROP'
        str_7 = {str_1: str_4, str_2: str_5, str_3: str_6}
        var_2 = module_0.set_chain_policy(str_0, var_0, str_7)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'\x0c+\xdc&\xa5\xbe-\xea\xa85\xdfw\x07\x99l$\n>\x90'
        str_0 = '{!#]DC=T`!#Af5jr\nVb'
        int_0 = -4010
        set_0 = {str_0, str_0, int_0}
        var_0 = module_0.append_match_flag(str_0, int_0, set_0, bytes_0)
        int_1 = 532
        set_1 = set()
        tuple_0 = (set_1,)
        dict_0 = {int_1: int_1}
        int_2 = None
        var_1 = module_0.append_match_flag(dict_0, set_1, tuple_0, int_2)
        var_2 = module_0.append_tcp_flags(tuple_0, str_0, tuple_0)
        str_1 = 'vJR:*\x0bd`s'
        str_2 = "\r'\n[-<Qf\x0c8mv"
        var_3 = module_0.append_param(str_1, str_2, int_1, int_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '/sbin/iptables'
        str_1 = ''
        str_2 = 'filter'
        float_0 = 0.0001
        bool_0 = True
        var_0 = module_0.append_tcp_flags(bool_0, str_2, float_0)
        str_3 = 'INPUT'
        str_4 = 'tcp'
        bool_1 = False
        str_5 = ''
        var_1 = module_0.append_jump(bool_0, bool_1, str_5)
        str_6 = '8080'
        str_7 = 'ACCEPT'
        str_8 = '5'
        var_2 = dict(table=str_2, chain=str_3, protocol=str_4, destination_port=str_6, jump=str_7, rule_num=str_8)
        var_3 = module_0.push_arguments(str_0, str_1, var_2)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '/sbin/iptables'
        str_1 = 'FWT3'
        str_2 = 'filter'
        str_3 = 'INPUT'
        str_4 = 'tcp'
        str_5 = '8080'
        str_6 = 'ACCEPT'
        var_0 = dict(table=str_2, chain=str_3, protocol=str_4, destination_port=str_5, jump=str_6, rule_num=str_3)
        var_1 = module_0.push_arguments(str_0, str_1, var_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '-I'
        str_1 = 'filter'
        str_2 = 'INPUT'
        str_3 = 'tcp'
        str_4 = '8080'
        str_5 = 'ACCEPT'
        str_6 = ''
        var_0 = dict(table=str_1, chain=str_2, protocol=str_3, destination_port=str_4, jump=str_5, rule_num=str_6)
        var_1 = module_0.push_arguments(str_1, str_0, var_0)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = []
        var_1 = None
        str_0 = '--foo'
        bool_0 = True
        var_2 = module_0.append_match_flag(var_0, var_1, str_0, bool_0)
        str_1 = 'negate'
        str_2 = '--foo'
        bool_1 = True
        var_3 = module_0.append_match_flag(str_0, str_1, str_2, bool_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'wait'
        str_1 = '1'
        str_2 = {str_0: str_1}
        var_0 = module_0.construct_rule(str_2)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'iptables'
        var_0 = None
        str_1 = 'table'
        str_2 = 'chain'
        str_3 = 'policy'
        str_4 = 'filter'
        str_5 = 'INPUT'
        str_6 = 'DROP'
        str_7 = {str_1: str_4, str_2: str_5, str_3: str_6}
        var_1 = module_0.set_chain_policy(str_0, var_0, str_7)
    except BaseException:
        pass