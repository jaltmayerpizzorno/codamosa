# Automatically generated by Pynguin.
import ansible.module_utils.urls as module_0
import urllib.parse as module_1

def test_case_0():
    try:
        dict_0 = {}
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(h_t_t_p_s_client_auth_handler_0)
        var_0 = custom_h_t_t_p_s_handler_0.https_open(h_t_t_p_s_client_auth_handler_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(bool_0, list_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        list_1 = [s_s_l_validation_error_0, s_s_l_validation_error_0, s_s_l_validation_error_0]
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(list_0)
        dict_0 = {}
        connection_error_0 = module_0.ConnectionError(*list_1, **dict_0)
        str_0 = 'DIz\x0bivI2f/6Mag'
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(str_0)
        var_1 = h_t_t_p_s_client_auth_handler_0.https_open(connection_error_0)
    except BaseException:
        pass

def test_case_3():
    try:
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(custom_h_t_t_p_s_handler_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = None
        no_s_s_l_error_0 = module_0.NoSSLError()
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(no_s_s_l_error_0)
        list_0 = [no_s_s_l_error_0, unix_h_t_t_p_connection_0, unix_h_t_t_p_connection_0]
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(unix_h_t_t_p_connection_0, list_0)
        var_0 = s_s_l_validation_handler_0.http_request(set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        request_0 = module_0.Request()
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(request_0)
        var_0 = request_0.head(unix_h_t_t_p_handler_0)
    except BaseException:
        pass

def test_case_6():
    try:
        proxy_error_0 = module_0.ProxyError()
        var_0 = module_0.generic_urlparse(proxy_error_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'http://foo:bar@ex~ple.com:808{/baz'
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        var_0 = parse_result_dotted_dict_0.as_list()
        var_1 = module_1.urlparse(str_0)
        var_2 = module_0.generic_urlparse(var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        request_0 = module_0.Request()
        str_0 = 'ftp'
        var_0 = request_0.options(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -1756.0144
        tuple_0 = None
        str_0 = 'I:2vI?$&hTS>*PXK/`K'
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        var_0 = module_0.build_ssl_validation_error(float_0, tuple_0, str_0, custom_h_t_t_p_s_handler_0)
    except BaseException:
        pass

def test_case_10():
    try:
        request_0 = module_0.Request()
        var_0 = request_0.options(request_0)
    except BaseException:
        pass

def test_case_11():
    try:
        request_0 = None
        var_0 = module_0.get_channel_binding_cert_hash(request_0)
        proxy_error_0 = module_0.ProxyError()
        set_0 = {proxy_error_0, proxy_error_0, proxy_error_0}
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(set_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(unix_h_t_t_p_s_connection_0)
        float_0 = 1.0
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(float_0)
        request_1 = module_0.Request(custom_h_t_t_p_s_handler_0)
    except BaseException:
        pass

def test_case_12():
    try:
        request_0 = module_0.Request()
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        var_0 = module_0.url_argument_spec()
        int_0 = 713
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(int_0)
        str_0 = 'sq*,e1.;:'
        var_1 = request_0.options(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        s_s_l_validation_error_0 = None
        list_0 = [s_s_l_validation_error_0, s_s_l_validation_error_0, s_s_l_validation_error_0]
        bool_0 = True
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bool_0)
        tuple_0 = ()
        var_0 = module_0.fetch_url(list_0, unix_h_t_t_p_connection_0, unix_h_t_t_p_connection_0, tuple_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ';F7oLyU'
        var_0 = module_0.generic_urlparse(str_0)
        tuple_0 = ()
        list_0 = [tuple_0]
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        missing_module_error_0 = module_0.MissingModuleError(list_0, s_s_l_validation_error_0)
        bytes_0 = b'\x9e\xafF\x1e/\xa5L\x95\x98\xdc\x92'
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(missing_module_error_0, bytes_0)
        custom_h_t_t_p_s_handler_1 = module_0.CustomHTTPSHandler(custom_h_t_t_p_s_handler_0)
        str_1 = '8{T74GUlc<I@'
        str_2 = ')>ReW!ApZ%O8CFN'
        var_1 = module_0.generic_urlparse(str_2)
        str_3 = '^|?q'
        str_4 = None
        dict_0 = {str_0: var_0, str_1: var_0, str_3: str_0, str_4: str_0}
        float_0 = 946.0
        connection_error_0 = module_0.ConnectionError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(connection_error_0)
        request_0 = module_0.Request(dict_0, float_0, unix_h_t_t_p_s_connection_0)
        list_1 = [var_0]
        no_s_s_l_error_0 = module_0.NoSSLError(*list_1)
        bytes_1 = b'\xaa\xe7\x85\xfa\xf2\x8a>g`\xa4\xfdlV\x93/\x08\xa4'
        request_with_method_0 = module_0.RequestWithMethod(bytes_0, bytes_1, bytes_0, float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'next_link'
        list_0 = [str_0]
        connection_error_0 = module_0.ConnectionError(*list_0)
        str_1 = 'g@RS/w\r$z:)V'
        str_2 = 'e`a[e'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(str_1, str_2)
        var_0 = s_s_l_validation_handler_0.make_context(str_0, connection_error_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'api.github.com'
        int_0 = 443
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(str_0, int_0)
        missing_module_error_0 = None
        var_0 = s_s_l_validation_handler_0.validate_proxy_response(missing_module_error_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = 4837.680575
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        var_0 = module_0.rfc2822_date_string(float_0, s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_18():
    try:
        connection_error_0 = module_0.ConnectionError()
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(connection_error_0)
        var_0 = unix_h_t_t_p_connection_0.__call__()
    except BaseException:
        pass

def test_case_19():
    try:
        request_0 = module_0.Request()
        str_0 = 'l^\r`Lv%{m\r#wqxFIw1'
        var_0 = request_0.put(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '9Ph96R<y1uY"x}\tgZox'
        var_0 = module_0.prepare_multipart(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        list_0 = None
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        str_0 = 'ih#170xNbR9m5QtP+c'
        dict_0 = {str_0: list_0, str_0: h_t_t_p_s_client_auth_handler_0}
        bool_0 = False
        float_0 = 100.0
        dict_1 = {}
        str_1 = 'Linux'
        h_t_t_p_s_client_auth_handler_1 = module_0.HTTPSClientAuthHandler(dict_1, str_1)
        request_0 = module_0.Request(bool_0, float_0, h_t_t_p_s_client_auth_handler_1)
        var_0 = request_0.post(list_0, h_t_t_p_s_client_auth_handler_0, **dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        connection_error_0 = module_0.ConnectionError()
        no_s_s_l_error_0 = module_0.NoSSLError()
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(no_s_s_l_error_0)
        str_0 = 'PI3{'
        dict_0 = {str_0: unix_h_t_t_p_connection_0}
        bool_0 = False
        var_0 = module_0.fetch_file(unix_h_t_t_p_connection_0, str_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        missing_module_error_0 = None
        list_0 = None
        str_0 = 'kVLdo/\nY.Rq'
        dict_0 = {str_0: missing_module_error_0}
        list_1 = [missing_module_error_0, list_0, dict_0, list_0]
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(list_0)
        s_s_l_validation_handler_0 = None
        set_0 = {s_s_l_validation_handler_0, missing_module_error_0}
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        float_0 = None
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(float_0)
        tuple_0 = (h_t_t_p_s_client_auth_handler_0, custom_h_t_t_p_s_handler_0, unix_h_t_t_p_handler_0, h_t_t_p_s_client_auth_handler_0)
        request_0 = module_0.Request(list_0, list_0, unix_h_t_t_p_s_connection_0, set_0, tuple_0, list_1)
        var_0 = request_0.options(list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        missing_module_error_0 = None
        list_0 = None
        str_0 = 'kVLdo/\nY.Rq'
        dict_0 = {str_0: missing_module_error_0}
        list_1 = [missing_module_error_0, list_0, dict_0, list_0]
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(list_0)
        s_s_l_validation_handler_0 = None
        set_0 = {s_s_l_validation_handler_0, missing_module_error_0}
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        request_0 = module_0.Request(list_0, set_0, unix_h_t_t_p_s_connection_0, custom_h_t_t_p_s_handler_0, list_0, set_0, custom_h_t_t_p_s_handler_0, list_1)
        var_0 = request_0.options(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        request_0 = module_0.Request()
        str_0 = 'ft'
        str_1 = ",>a*iwM{W'h:xa"
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        var_0 = module_0.basic_auth_header(str_1, parse_result_dotted_dict_0)
        var_1 = request_0.get(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        request_0 = module_0.Request()
        str_0 = 'ftp'
        var_0 = request_0.get(str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'x~q&Dg]Wx4`|Lx|zrF^'
        proxy_error_0 = module_0.ProxyError()
        bool_0 = False
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bool_0)
        bool_1 = True
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        missing_module_error_0 = module_0.MissingModuleError(parse_result_dotted_dict_0, parse_result_dotted_dict_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(unix_h_t_t_p_connection_0, bool_1, missing_module_error_0)
        var_0 = s_s_l_validation_handler_0.make_context(str_0, proxy_error_0)
    except BaseException:
        pass

def test_case_28():
    try:
        proxy_error_0 = module_0.ProxyError()
        request_with_method_0 = None
        var_0 = module_0.getpeercert(proxy_error_0, request_with_method_0)
    except BaseException:
        pass

def test_case_29():
    try:
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(h_t_t_p_s_client_auth_handler_0)
        set_0 = {custom_h_t_t_p_s_handler_0, h_t_t_p_s_client_auth_handler_0, h_t_t_p_s_client_auth_handler_0}
        bytes_0 = b'\x8f\xd8z\xf6'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(custom_h_t_t_p_s_handler_0, set_0, bytes_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'Lxovs98D=\\'
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(str_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_31():
    try:
        request_0 = module_0.Request()
        bytes_0 = b'\x90\x8f@Y\xe8e\x90h\x1cb\x85\xee\x1c\xf4\xab\x91\x03'
        var_0 = request_0.delete(bytes_0)
    except BaseException:
        pass

def test_case_32():
    try:
        request_0 = module_0.Request()
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        var_0 = request_0.patch(parse_result_dotted_dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        request_0 = module_0.Request()
        no_s_s_l_error_0 = module_0.NoSSLError()
        list_0 = [request_0, no_s_s_l_error_0]
        tuple_0 = (list_0,)
        str_0 = 'tz_offset'
        var_0 = module_0.build_ssl_validation_error(no_s_s_l_error_0, tuple_0, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(bool_0, list_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(list_0)
        dict_0 = {}
        no_s_s_l_error_0 = module_0.NoSSLError(**dict_0)
        connection_error_0 = module_0.ConnectionError()
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(connection_error_0)
        unix_h_t_t_p_s_connection_0 = None
        dict_1 = {unix_h_t_t_p_s_connection_0: no_s_s_l_error_0}
        var_1 = unix_h_t_t_p_handler_0.http_open(dict_1)
    except BaseException:
        pass

def test_case_35():
    try:
        missing_module_error_0 = None
        str_0 = 'kVLo/\nY.Rq'
        dict_0 = {str_0: missing_module_error_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        var_0 = module_0.prepare_multipart(dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        missing_module_error_0 = None
        list_0 = None
        str_0 = 'kVLdo/\nY.Rq'
        dict_0 = {str_0: missing_module_error_0}
        list_1 = [missing_module_error_0, list_0, dict_0, list_0]
        bool_0 = True
        var_0 = module_0.atexit_remove_file(bool_0)
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_37():
    try:
        request_0 = module_0.Request()
        str_0 = 'https'
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        list_0 = [str_0, request_0]
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(request_0)
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0)
        var_0 = custom_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_38():
    try:
        request_0 = module_0.Request()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        no_s_s_l_error_0 = module_0.NoSSLError()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(custom_h_t_t_p_s_handler_0, no_s_s_l_error_0)
        int_0 = -1362
        str_0 = 'O62a}E~>\\Yw/('
        var_0 = s_s_l_validation_handler_0.validate_proxy_response(int_0, str_0)
    except BaseException:
        pass

def test_case_39():
    try:
        request_0 = module_0.Request()
        str_0 = 'sq;,e1.;:'
        set_0 = set()
        dict_0 = {str_0: set_0}
        list_0 = [request_0, request_0, request_0]
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_0)
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, parse_result_dotted_dict_0)
        var_0 = s_s_l_validation_handler_0.make_context(set_0, dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        request_0 = module_0.Request()
        str_0 = 'sq*,e1.;:'
        var_0 = request_0.options(str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bool_0 = True
        tuple_0 = None
        custom_h_t_t_p_s_handler_0 = None
        var_0 = module_0.open_url(bool_0, tuple_0, custom_h_t_t_p_s_handler_0)
    except BaseException:
        pass

def test_case_42():
    try:
        request_0 = module_0.Request()
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        int_0 = 27
        str_0 = 'J\\/iVW^n'
        bytes_0 = b'\x9eP6Qy~"\x0b\xfe@\x01\x14'
        str_1 = '\r'
        str_2 = 'f5b='
        dict_0 = {str_1: int_0, str_0: request_0, str_2: request_0}
        str_3 = '~7'
        request_with_method_0 = None
        var_0 = module_0.open_url(str_0, str_0, bytes_0, request_0, dict_0, str_3, dict_0, request_with_method_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'http://foo:bar@ex~mple.com:808{/baz'
        var_0 = module_1.urlparse(str_0)
        var_1 = module_0.generic_urlparse(var_0)
    except BaseException:
        pass

def test_case_44():
    try:
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        str_0 = '-o'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_0)
        connection_error_0 = None
        parse_result_dotted_dict_0 = None
        missing_module_error_0 = module_0.MissingModuleError(connection_error_0, parse_result_dotted_dict_0)
        list_0 = []
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(list_0)
        set_0 = {h_t_t_p_s_client_auth_handler_0, parse_result_dotted_dict_0}
        var_0 = module_0.open_url(unix_h_t_t_p_handler_0, missing_module_error_0, unix_h_t_t_p_s_connection_0, list_0, set_0)
    except BaseException:
        pass