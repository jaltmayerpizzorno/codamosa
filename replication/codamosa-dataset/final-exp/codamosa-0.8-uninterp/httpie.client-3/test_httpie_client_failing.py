# Automatically generated by Pynguin.
import argparse as module_0
import pathlib as module_1
import httpie.client as module_2
import httpie.cli.dicts as module_3

def test_case_0():
    try:
        str_0 = 'colors'
        str_1 = 'j}ukJ{J,'
        dict_0 = {str_0: str_0, str_1: str_0}
        namespace_0 = module_0.Namespace(**dict_0)
        path_0 = module_1.Path()
        iterable_0 = module_2.collect_messages(namespace_0, path_0)
        dict_1 = {str_0: str_0, str_0: str_0}
        namespace_1 = module_0.Namespace(**dict_1)
        var_0 = module_2.max_headers(namespace_1)
        namespace_2 = module_0.Namespace()
        path_1 = module_1.Path()
        set_0 = None
        set_1 = {set_0}
        iterable_1 = module_2.collect_messages(namespace_2, path_1, set_1)
        request_headers_dict_0 = module_3.RequestHeadersDict(iterable_1)
    except BaseException:
        pass

def test_case_1():
    try:
        namespace_0 = module_0.Namespace()
        request_headers_dict_0 = module_2.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_2():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_2.make_send_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_3():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_2.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_4():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_2.make_request_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_5():
    try:
        request_headers_dict_0 = module_3.RequestHeadersDict()
        str_0 = 'F6!h&W%{,3'
        request_headers_dict_1 = module_2.finalize_headers(request_headers_dict_0)
        str_1 = None
        str_2 = module_2.ensure_path_as_is(str_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        request_headers_dict_0 = module_3.RequestHeadersDict()
        request_headers_dict_1 = module_2.finalize_headers(request_headers_dict_0)
        str_0 = None
        str_1 = ';k0XUH`522[C)pH`y'
        str_2 = module_2.ensure_path_as_is(str_0, str_1)
        request_headers_dict_2 = module_2.finalize_headers(request_headers_dict_0)
        namespace_0 = module_0.Namespace()
        namespace_1 = None
        dict_0 = module_2.make_send_kwargs_mergeable_from_env(namespace_1)
    except BaseException:
        pass

def test_case_7():
    try:
        namespace_0 = module_0.Namespace()
        bool_0 = False
        str_0 = '7)q'
        session_0 = module_2.build_requests_session(bool_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        str_0 = 'j|'
        dict_1 = {str_0: str_0}
        request_headers_dict_0 = module_3.RequestHeadersDict(dict_0, **dict_1)
        request_headers_dict_1 = module_2.finalize_headers(request_headers_dict_0)
        request_headers_dict_2 = module_2.finalize_headers(request_headers_dict_1)
        namespace_0 = module_0.Namespace()
        path_0 = module_1.Path()
        bool_0 = None
        session_0 = module_2.build_requests_session(bool_0)
        var_0 = module_2.dump_request(dict_0)
        request_headers_dict_3 = module_3.RequestHeadersDict()
        request_headers_dict_4 = module_2.finalize_headers(request_headers_dict_3)
        request_headers_dict_5 = module_2.finalize_headers(request_headers_dict_4)
        var_1 = namespace_0.__contains__(path_0)
        str_1 = '\x0b*~sR-d8*XV#/75+W'
        bool_1 = False
        session_1 = module_2.build_requests_session(bool_1, str_1)
    except BaseException:
        pass