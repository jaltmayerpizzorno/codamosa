# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.fields as module_1
import typesystem.schemas as module_2
import typesystem.composites as module_3

def test_case_0():
    pass

def test_case_1():
    iterator_0 = None
    int_0 = 403
    dict_0 = {iterator_0: iterator_0, iterator_0: int_0}
    field_0 = module_0.from_json_schema(dict_0)

def test_case_2():
    str_0 = None
    string_0 = module_1.String(format=str_0)
    var_0 = module_0.to_json_schema(string_0)
    schema_definitions_0 = module_2.SchemaDefinitions()
    bool_0 = False
    field_0 = module_0.from_json_schema(bool_0)
    bool_1 = field_0.has_default()
    var_1 = module_0.to_json_schema(field_0)

def test_case_3():
    dict_0 = {}
    tuple_0 = module_0.get_valid_types(dict_0)

def test_case_4():
    dict_0 = {}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)

def test_case_5():
    any_0 = module_1.Any()
    str_0 = 'not'
    var_0 = {}
    var_1 = {str_0: var_0}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.not_from_json_schema(var_1, schema_definitions_0)

def test_case_6():
    iterator_0 = None
    int_0 = 389
    dict_0 = {iterator_0: iterator_0, iterator_0: int_0}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_7():
    iterator_0 = None
    int_0 = 389
    dict_0 = {iterator_0: iterator_0, iterator_0: int_0}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    dict_1 = module_0.get_standard_properties(field_0)
    field_1 = module_0.from_json_schema(dict_1)
    dict_2 = module_0.get_standard_properties(field_0)
    var_0 = module_0.to_json_schema(field_1)

def test_case_8():
    list_0 = []
    one_of_0 = module_3.OneOf(list_0)
    var_0 = module_0.to_json_schema(one_of_0)

def test_case_9():
    str_0 = None
    string_0 = module_1.String(format=str_0)
    var_0 = module_0.to_json_schema(string_0)

def test_case_10():
    str_0 = 'type'
    str_1 = 'properties'
    str_2 = 'object'
    str_3 = 'field'
    str_4 = 'if'
    str_5 = 'pattern'
    str_6 = 'string'
    str_7 = '^a'
    str_8 = {str_0: str_6, str_5: str_7}
    str_9 = '^b'
    str_10 = {str_0: str_6, str_5: str_9}
    str_11 = '^c'
    str_12 = {str_0: str_6, str_5: str_11}
    str_13 = {str_4: str_8, str_6: str_10, str_9: str_12}
    str_14 = {str_3: str_13}
    str_15 = {str_0: str_2, str_1: str_14}
    field_0 = module_0.from_json_schema(str_15)
    any_0 = field_0.validate(str_14)
    str_16 = 'abd'
    str_17 = {str_3: str_16}
    any_1 = field_0.validate(str_17)
    str_18 = 'adc'
    str_19 = {str_3: str_18}
    any_2 = field_0.validate(str_19)
    str_20 = 'add'
    str_21 = {str_3: str_20}
    any_3 = field_0.validate(str_21)

def test_case_11():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'integer'
    str_3 = {str_1: str_2}
    str_4 = [str_3]
    str_5 = {str_0: str_4}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.any_of_from_json_schema(str_5, schema_definitions_0)

def test_case_12():
    dict_0 = {}
    tuple_0 = module_0.get_valid_types(dict_0)
    iterator_0 = None
    str_0 = None
    string_0 = module_1.String(format=str_0)
    var_0 = module_0.to_json_schema(string_0)
    const_0 = module_1.Const(iterator_0)
    var_1 = module_0.to_json_schema(const_0)

def test_case_13():
    float_0 = 1.0
    var_0 = dict(const=float_0)
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.const_from_json_schema(var_0, schema_definitions_0)
    const_0 = module_1.Const(float_0)
    var_1 = dict(const=float_0)
    schema_definitions_1 = module_2.SchemaDefinitions()
    field_1 = module_0.const_from_json_schema(var_1, schema_definitions_1)
    const_1 = module_1.Const(float_0)
    str_0 = 'a'
    var_2 = dict(const=str_0)
    schema_definitions_2 = module_2.SchemaDefinitions()
    field_2 = module_0.const_from_json_schema(var_2, schema_definitions_2)
    const_2 = module_1.Const(str_0)
    bool_0 = True
    var_3 = dict(const=bool_0)
    schema_definitions_3 = module_2.SchemaDefinitions()
    field_3 = module_0.const_from_json_schema(var_3, schema_definitions_3)
    bool_1 = True
    const_3 = module_1.Const(bool_1)

def test_case_14():
    str_0 = 'allOf'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    str_3 = 'pattern'
    str_4 = '^[A-Z]'
    str_5 = {str_3: str_4}
    str_6 = [str_2, str_5]
    str_7 = {str_0: str_6}
    var_0 = None
    field_0 = module_0.all_of_from_json_schema(str_7, var_0)
    var_1 = len(str_1)

def test_case_15():
    bool_0 = False
    bool_1 = True
    field_0 = module_0.from_json_schema(bool_1)
    var_0 = print(field_0)
    str_0 = 'enum'
    int_0 = 2
    int_1 = 3
    var_1 = [bool_1, int_0, int_1]
    var_2 = {str_0: var_1}
    field_1 = module_0.from_json_schema(var_2)
    var_3 = print(field_1)
    str_1 = 'type'
    var_4 = [bool_1, int_0, int_1]
    str_2 = 'integer'
    var_5 = {str_0: var_4, str_1: str_2}
    field_2 = module_0.from_json_schema(var_5)
    var_6 = print(field_2)
    str_3 = 'minimum'
    str_4 = 'maximum'
    int_2 = 20
    var_7 = {str_1: str_2, str_3: bool_1, str_4: int_2}
    field_3 = module_0.from_json_schema(var_7)
    var_8 = print(field_3)
    str_5 = 'if'
    str_6 = 'then'
    str_7 = 'const'
    bool_2 = {str_7: bool_1}
    bool_3 = {str_7: bool_1}
    bool_4 = {str_5: bool_2, str_6: bool_3}
    field_4 = module_0.from_json_schema(bool_4)
    var_9 = print(field_4)
    bool_5 = {str_7: bool_0}
    bool_6 = {str_7: bool_1}
    bool_7 = {str_5: bool_5, str_6: bool_6}
    field_5 = module_0.from_json_schema(bool_7)
    var_10 = print(field_5)

def test_case_16():
    bool_0 = True
    field_0 = module_0.from_json_schema(bool_0)
    any_0 = module_1.Any()
    bool_1 = False
    field_1 = module_0.from_json_schema(bool_1)
    never_match_0 = module_3.NeverMatch()
    var_0 = {}
    field_2 = module_0.from_json_schema(var_0)
    any_1 = module_1.Any()
    str_0 = '$ref'
    str_1 = '#/definitions/test'
    str_2 = {str_0: str_1}
    field_3 = module_0.from_json_schema(str_2)
    any_2 = module_1.Any()
    str_3 = 'const'
    bool_2 = {str_3: bool_0}
    field_4 = module_0.from_json_schema(bool_2)
    const_0 = module_1.Const(bool_0)
    str_4 = 'type'
    str_5 = 'items'
    str_6 = 'array'
    str_7 = {str_0: str_1}
    str_8 = {str_4: str_6, str_5: str_7}
    field_5 = module_0.from_json_schema(str_8)
    any_3 = module_1.Any()
    str_9 = 'definitions'
    str_10 = {str_0: str_1}
    str_11 = 'test'
    str_12 = 'number'
    str_13 = {str_4: str_12}
    str_14 = {str_11: str_13}
    str_15 = {str_4: str_6, str_5: str_10, str_9: str_14}
    field_6 = module_0.from_json_schema(str_15)
    array_0 = module_1.Array()

def test_case_17():
    str_0 = 'type'
    str_1 = 'integer'
    str_2 = {str_0: str_1}
    field_0 = module_0.from_json_schema(str_2)
    str_3 = 'number'
    str_4 = {str_0: str_3}
    field_1 = module_0.from_json_schema(str_4)
    str_5 = 'boolean'
    str_6 = {str_0: str_5}
    field_2 = module_0.from_json_schema(str_6)
    str_7 = 'null'
    str_8 = {str_0: str_7}
    field_3 = module_0.from_json_schema(str_8)
    str_9 = 'string'
    str_10 = {str_0: str_9}
    field_4 = module_0.from_json_schema(str_10)
    var_0 = module_0.to_json_schema(field_0)

def test_case_18():
    str_0 = 'type'
    str_1 = 'integer'
    str_2 = {str_0: str_1}
    field_0 = module_0.from_json_schema(str_2)
    str_3 = 'boolean'
    str_4 = {str_0: str_3}
    field_1 = module_0.from_json_schema(str_4)
    str_5 = 'null'
    str_6 = {str_0: str_5}
    field_2 = module_0.from_json_schema(str_6)
    str_7 = 'array'
    str_8 = {str_0: str_7}
    field_3 = module_0.from_json_schema(str_8)
    field_4 = module_0.from_json_schema(str_4)
    str_9 = 'items'
    var_0 = {}
    var_1 = {str_0: str_7, str_9: var_0}
    field_5 = module_0.from_json_schema(var_1)

def test_case_19():
    int_0 = 0
    int_1 = 10
    int_2 = 5
    integer_0 = module_1.Integer(minimum=int_0, maximum=int_1)
    var_0 = module_0.to_json_schema(integer_0)
    bool_0 = True
    integer_1 = module_1.Integer(minimum=int_0, maximum=int_1)
    var_1 = module_0.to_json_schema(integer_1)

def test_case_20():
    int_0 = 3
    bool_0 = False
    integer_0 = module_1.Integer(minimum=int_0)
    var_0 = module_0.to_json_schema(integer_0)
    bool_1 = True
    integer_1 = module_1.Integer(minimum=int_0)
    var_1 = module_0.to_json_schema(integer_1)
    string_0 = module_1.String(min_length=int_0)
    var_2 = module_0.to_json_schema(string_0)
    str_0 = 'foo'
    integer_2 = module_1.Integer(minimum=int_0)
    integer_3 = {str_0: integer_2}
    object_0 = module_1.Object(properties=integer_3)
    var_3 = module_0.to_json_schema(object_0)