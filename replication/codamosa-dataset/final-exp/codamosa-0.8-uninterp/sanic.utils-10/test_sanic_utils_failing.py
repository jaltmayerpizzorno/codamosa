# Automatically generated by Pynguin.
import sanic.utils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = 'HTTP/1.0'
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        path_0 = module_1.Path()
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '9qf]PR6$.SFZOY}l '
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'ig>cDckZ['
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b"\xce\xc6'\xafC\xce\xe8D\x97\xc3h\xce"
        var_0 = module_0.load_module_from_file_location(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Create unix socket.\n    :param path: filesystem path\n    :param backlog: Maximum number of connections to queue\n    :return: socket.socket object\n    '
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'tests/test-utils/dummy_config.py'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 't'
        bool_0 = module_0.str_to_bool(str_0)
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '/some/path/${some_env_var}'
        str_1 = 'some_env_var_value'
        var_0 = module_0.load_module_from_file_location(str_0, str_1)
    except BaseException:
        pass