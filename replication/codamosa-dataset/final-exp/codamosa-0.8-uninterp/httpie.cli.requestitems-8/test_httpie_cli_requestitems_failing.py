# Automatically generated by Pynguin.
import httpie.cli.requestitems as module_0
import httpie.cli.argtypes as module_1

def test_case_0():
    try:
        str_0 = 'In addition to :class:`EncodedStream` behaviour, this stream applies\n    content processing.\n\n    Useful for long-lived HTTP responses that stream by lines\n    such as the Twitter streaming API.\n\n    '
        str_1 = 'data'
        request_items_0 = module_0.RequestItems()
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_1)
        str_2 = module_0.process_empty_header_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_0)
        str_1 = module_0.process_empty_header_arg(key_value_arg_0)
        str_2 = module_0.process_data_embed_file_contents_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'H)z0&<M,zQKI'
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_0)
        str_1 = module_0.process_query_param_arg(key_value_arg_0)
        tuple_0 = module_0.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{\n        "key1": "value1",\n        "key2": [\n            "value2",\n            "value3"\n        ],\n        "key3": {\n            "key31": "value31",\n            "key32": "value32"\n        }\n    }'
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_0)
        tuple_0 = module_0.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '-(\n a['
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_0)
        str_1 = module_0.process_data_item_arg(key_value_arg_0)
        tuple_0 = module_0.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_0)
        str_1 = module_0.process_data_embed_file_contents_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_0)
        var_0 = module_0.process_data_embed_raw_json_file_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_7():
    try:
        key_value_arg_0 = None
        var_0 = module_0.process_data_raw_json_embed_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '-?jeys\taa\x0b'
        str_1 = ''
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_1)
        str_2 = module_0.load_text_file(key_value_arg_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'b8)h]oN[p|jzUTS '
        str_1 = 'jl$'
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_1, str_0)
        var_0 = module_0.process_data_raw_json_embed_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'ZL^)\n\n7#O'
        str_1 = 'A)8@b!@q/bJai'
        request_items_0 = module_0.RequestItems(str_1)
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_0)
        tuple_0 = module_0.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ':<Jlf'
        str_1 = None
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_1)
        optional_0 = module_0.process_header_arg(key_value_arg_0)
        var_0 = module_0.load_json(key_value_arg_0, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = "h^sAiD4'cgOlA+h"
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_0)
        optional_0 = module_0.process_header_arg(key_value_arg_0)
        str_2 = 'fuIkjH\'\n"u3\tw'
        key_value_arg_1 = module_1.KeyValueArg(str_1, str_0, str_1, str_2)
        str_3 = module_0.process_data_embed_file_contents_arg(key_value_arg_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'test.txt'
        str_1 = 'wb'
        var_0 = open(str_0, str_1)
        str_2 = 'p\x0byr'
        str_3 = None
        str_4 = ''
        key_value_arg_0 = module_1.KeyValueArg(str_2, str_0, str_3, str_4)
        var_1 = module_0.process_data_embed_raw_json_file_arg(key_value_arg_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n    Optional key-value pairs to be included in the request. The separator used\n    determines the type:\n\n    \':\' HTTP headers:\n\n        Referer:http://httpie.org  Cookie:foo=bar  User-Agent:bacon/1.0\n\n    \'==\' URL parameters to be appended to the request URI:\n\n        search==httpie\n\n    \'=\' Data fields to be serialized into a JSON object (with --json, -j)\n        or form data (with --form, -f):\n\n        name=HTTPie  language=Python  description=\'CLI HTTP client\'\n\n    \':=\' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:=\'["red", "green", "blue"]\'\n\n    \'@\' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@\'~/Documents/CV.pdf;type=application/pdf\'\n\n    \'=@\' A data field like \'=\', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    \':=@\' A raw JSON field like \':=\', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '
        str_1 = None
        key_value_arg_0 = module_1.KeyValueArg(str_0, str_0, str_0, str_1)
        tuple_0 = module_0.process_file_upload_arg(key_value_arg_0)
    except BaseException:
        pass