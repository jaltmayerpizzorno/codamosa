# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        float_0 = 355.65264
        var_0 = module_0.unique(float_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x15\xa8\x07\xa2O\xca]{\x03%\xfdH4E\xc0\xa6\xd4\x14'
        list_0 = []
        str_0 = '\tWrn?HO3'
        var_0 = module_0.intersect(bytes_0, str_0, str_0)
        var_1 = module_0.human_to_bytes(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'qt2Et\t\x0b\r`'
        float_0 = -178.0
        var_0 = module_0.symmetric_difference(str_0, str_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0cL?in1<vlcx$h!~?\\'
        bytes_0 = None
        float_0 = None
        var_0 = module_0.union(str_0, bytes_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\t0y=y\\M'
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.min(str_0, filter_module_0)
    except BaseException:
        pass

def test_case_5():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.max(filter_module_0, filter_module_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -2000
        bytes_0 = b'\xe7\x1e?'
        var_0 = module_0.logarithm(int_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        var_0 = module_0.logarithm(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'qm'
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        list_0 = [str_0]
        list_1 = [list_0, list_0, list_0, str_0]
        var_1 = module_0.power(list_0, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -1013
        var_0 = module_0.inversepower(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ':s3)_>6GzW\x0bF_j5KJsov'
        list_0 = []
        var_0 = module_0.inversepower(str_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'v/Nw1*k<$mde.Dj'
        int_0 = 1552
        float_0 = 795.8
        var_0 = module_0.human_readable(str_0, int_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'\xbf\xab\x9eP=X\xb0\x10t'
        tuple_0 = (filter_module_0, bytes_0)
        var_0 = module_0.human_readable(list_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        var_0 = module_0.human_to_bytes(dict_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x15\xa8\x07\xa2O\xca]{\x03%\xfdH4E\xc0\xa6\xd4\x14'
        var_0 = module_0.rekey_on_member(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'v/Nw1*k<$mde.Dj'
        float_0 = 471.606043
        bytes_0 = b'\x13\x81=]Mk\xc5\xc9~\x1e2x\x02\x0ca\x8fG\xee'
        var_0 = module_0.difference(str_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '8*^f#V7rnP%UTmE'
        list_0 = [str_0]
        str_1 = 'l)NLG'
        float_0 = 0.001
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = module_0.rekey_on_member(list_0, str_1, float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = None
        tuple_0 = None
        list_0 = []
        var_0 = module_0.difference(bool_0, tuple_0, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\x15\xa8\x07\xa2O\xca]{\x03\xfdH4E\xc0\xa6\xd4\x14'
        dict_0 = {}
        str_0 = 'D\t\x0b_Eqj2n[Uh/W](|'
        dict_1 = {str_0: str_0, str_0: bytes_0}
        var_0 = module_0.difference(dict_0, dict_1, dict_1)
        int_0 = 2035
        set_0 = {str_0, str_0, bytes_0}
        var_1 = module_0.union(str_0, int_0, set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\x15\xa8\x07\xa2O\xca]{\x03%\xfdH4\xe4E\xc0\xa6\xd4\x14'
        str_0 = 'qt2Et\t\x0b\r`'
        dict_0 = {str_0: bytes_0}
        var_0 = module_0.rekey_on_member(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'\x15\xa8\x07\xa2O\xca]{\x03%\xfdH4E\xc0\xa6\xd4\x14'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        str_0 = 'MIT'
        dict_0 = {}
        var_0 = module_0.difference(list_0, str_0, dict_0)
        var_1 = module_0.rekey_on_member(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'\x8dS}j\xde\xc7R\x1e`8\x88\xa4\xc3\r\xe1\xa1\x95'
        float_0 = None
        str_0 = 'line replaced'
        str_1 = '\\(policy ([A-Z]+)\\)'
        str_2 = 'LR'
        dict_0 = {str_1: float_0, str_0: bytes_0, str_2: bytes_0, str_1: bytes_0}
        dict_1 = {str_0: bytes_0, str_0: float_0, str_0: dict_0, str_2: str_2}
        dict_2 = {}
        var_0 = module_0.rekey_on_member(dict_1, dict_2)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 3
        str_0 = 'x'
        str_1 = 'y'
        int_1 = {str_1: int_0, str_0: int_0}
        int_2 = {str_0: int_1, str_1: int_1}
        var_0 = module_0.rekey_on_member(int_2, str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = None
        list_0 = [bool_0, bool_0, bool_0]
        bool_1 = True
        int_0 = 248
        var_0 = module_0.unique(bool_0, list_0, bool_1, int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = 1275.81
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.rekey_on_member(float_0, filter_module_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'kwcU'
        bytes_0 = b'^\xf3'
        bytes_1 = b'\x8dS}j\xf3\xc7R\x1e`8\x88\xf0\xc3\r\xe1\xa1\x95'
        bytes_2 = b'a!Zr^&\x85\x7f'
        list_0 = [bytes_0, bytes_2, bytes_0]
        filter_module_0 = module_0.FilterModule()
        set_0 = {str_0}
        var_0 = module_0.symmetric_difference(bytes_1, set_0, list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = b'\x8dS}j\xde\xc7R\x1e`8\x88\xa4\xc3\r\xe1\xa1\x95'
        str_0 = 'line replaced'
        str_1 = '\\(policy ([A-Z]+)\\)'
        dict_0 = {str_1: str_0, bytes_0: str_0}
        bool_0 = False
        var_0 = module_0.inversepower(dict_0, bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        float_0 = 0.2
        int_0 = 1493
        str_0 = '9ka\x0bZ5.rc_3eioVx!'
        var_0 = module_0.human_to_bytes(float_0, int_0, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        float_0 = 421.15
        list_0 = [float_0, float_0, float_0]
        float_1 = None
        tuple_0 = (list_0, float_1)
        bytes_0 = b'Yr\xde\xb3\xfa\x8d'
        tuple_1 = (tuple_0, bytes_0, list_0)
        list_1 = [tuple_1, float_1]
        str_0 = '+EF-f<'
        str_1 = None
        str_2 = '\x0ca=j&Zy[Koe&sx2i<\n6t'
        float_2 = -2044.0007
        dict_0 = {str_0: str_0, str_1: str_1, str_2: float_2}
        var_0 = module_0.symmetric_difference(list_1, str_0, dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        float_0 = 1273.52893
        float_1 = 1137.84
        var_0 = module_0.power(float_1, float_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = None
        list_0 = [bool_0, bool_0, bool_0]
        bool_1 = False
        int_0 = 248
        var_0 = module_0.unique(bool_0, list_0, bool_1, int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'a'
        int_0 = {}
        bytes_0 = b'\xd3\xf7P\x88M\x81\xa93R&\xc1\xb0\x02\xd4W'
        list_0 = []
        str_1 = 'O=GXE1W,\\|gf})\n1z"{b'
        dict_0 = {}
        var_0 = module_0.min(list_0, str_1, **dict_0)
        var_1 = module_0.max(str_0, bytes_0)
        int_1 = [int_0, int_0]
        bool_0 = True
        var_2 = module_0.logarithm(bool_0)
        bool_1 = False
        var_3 = module_0.unique(str_0, int_1, str_0, bool_1)
        var_4 = module_0.rekey_on_member(int_1, str_0)
    except BaseException:
        pass