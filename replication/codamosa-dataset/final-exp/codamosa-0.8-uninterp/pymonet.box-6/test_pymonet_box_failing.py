# Automatically generated by Pynguin.
import pymonet.box as module_0
import builtins as module_1

def test_case_0():
    try:
        float_0 = 1903.76
        list_0 = [float_0, float_0]
        box_0 = module_0.Box(list_0)
        var_0 = box_0.to_maybe()
        object_0 = module_1.object()
        bool_0 = box_0.__eq__(object_0)
        var_1 = box_0.to_validation()
        str_0 = '\n        Returns first element of ImmutableList that passed\n        info argument returns True\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> bool\n        :returns: A\n        '
        var_2 = box_0.map(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ru6Q  y?'
        str_1 = 'Maybe[T]'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
        str_2 = '0%52.\r'
        bytes_0 = b'\x10\xd4\x06\xe9'
        dict_1 = {str_2: bytes_0, str_2: str_2}
        box_0 = module_0.Box(dict_1)
        var_0 = box_0.bind(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        str_0 = None
        list_0 = [bool_0]
        box_0 = module_0.Box(list_0)
        var_0 = box_0.ap(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '} &e&<8n'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0, str_0]
        box_0 = module_0.Box(list_0)
        var_0 = box_0.to_lazy()
        object_0 = module_1.object(**dict_0)
    except BaseException:
        pass