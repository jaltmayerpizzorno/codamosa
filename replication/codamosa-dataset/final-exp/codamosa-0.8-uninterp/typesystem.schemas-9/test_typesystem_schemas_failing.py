# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1
import builtins as module_2

def test_case_0():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        any_0 = schema_definitions_0.__getitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(bool_0, bool_0)
        list_0 = []
        schema_metaclass_0 = module_0.SchemaMetaclass(*list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Ly8$'
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        list_0 = [schema_definitions_0]
        schema_definitions_1 = module_0.SchemaDefinitions()
        schema_definitions_1.__delitem__(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        validation_error_0 = None
        list_0 = [validation_error_0, validation_error_0, validation_error_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(bool_0, bool_0)
        str_0 = 'forms/input.html'
        dict_0 = {str_0: str_0}
        schema_0 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        any_0 = schema_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        schema_0 = module_0.Schema()
        list_0 = [schema_0, schema_0, schema_0]
        schema_metaclass_0 = module_0.SchemaMetaclass(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = -2391
        reference_0 = module_0.Reference(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'John Doe'
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        reference_0 = module_0.Reference(str_0, iterator_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 've&,T5'
        field_0 = module_1.Field(description=str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_0 = module_0.Schema()
        bool_0 = None
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = "Unit test for Schema's eq method have passed"
        var_0 = print(str_0)
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(var_0)
    except BaseException:
        pass

def test_case_11():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        str_0 = 'i?\x0c'
        schema_0 = module_0.Schema()
        iterator_1 = schema_0.__iter__()
        iterator_2 = schema_0.__iter__()
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(iterator_1)
        int_0 = schema_0.__len__()
        schema_metaclass_0 = module_0.SchemaMetaclass()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '`\nTo'
        list_0 = [str_0]
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = None
        str_0 = '["'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(bytes_0)
        str_1 = 'Must be a valid datetime format.'
        list_0 = [str_1]
        schema_0 = module_0.Schema(*list_0)
        iterator_0 = schema_0.__iter__()
        str_2 = 'L6j#p:$:ocz12'
        dict_0 = {str_2: str_2, str_2: str_2}
        list_1 = [dict_0, dict_0, dict_0]
        schema_definitions_0 = module_0.SchemaDefinitions(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        schema_0 = module_0.Schema()
        str_0 = '>17O6H1'
        field_0 = module_1.Field(description=str_0, default=schema_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        field_1 = module_1.Field(title=str_0)
        str_1 = 'AW#El\\i5>>#oO'
        dict_0 = {str_1: field_1}
        schema_definitions_1 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_1.__setitem__(str_1, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        str_1 = 'H1'
        field_0 = module_1.Field(title=str_1)
        str_2 = '"&9[+@'
        str_3 = 'fT^X"rb5=[U*VlF2ESu.'
        dict_0 = {str_2: str_2, str_3: schema_0, str_1: schema_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_0.__len__()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_1 = module_0.Schema()
        bool_0 = schema_1.__eq__(schema_definitions_0)
        list_0 = [schema_1]
        str_4 = schema_0.__repr__()
        schema_definitions_1 = module_0.SchemaDefinitions(*list_0)
        schema_2 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '"&9[+@'
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(schema_definitions_0)
        list_0 = [schema_0]
        str_1 = schema_0.__repr__()
        schema_definitions_1 = module_0.SchemaDefinitions(*list_0)
        list_1 = [schema_0]
        schema_1 = module_0.Schema(*list_1)
        type_0 = module_2.type(*list_0)
        reference_0 = module_0.Reference(str_1, type_0)
        any_0 = reference_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        bool_0 = schema_0.__eq__(schema_0)
        str_1 = 'H1'
        iterator_0 = schema_0.__iter__()
        field_0 = module_1.Field(title=str_1)
        str_2 = '"&9[+@'
        str_3 = 'fT^X"rb5=[U*VlF2ESu.'
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_0.__len__()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_1 = module_0.Schema()
        int_1 = schema_definitions_0.__len__()
        list_0 = [schema_1]
        str_4 = schema_0.__repr__()
        list_1 = [schema_1]
        schema_2 = module_0.Schema(*list_1)
        reference_0 = module_0.Reference(str_3)
        schema_definitions_0.__setitem__(bool_0, list_1)
        schema_definitions_0.__setitem__(reference_0, str_0)
        type_0 = module_2.type(*list_0)
        reference_1 = module_0.Reference(str_4, type_0)
        any_0 = reference_1.validate(str_2, strict=bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        bool_0 = schema_0.__eq__(schema_0)
        str_1 = 'H1'
        field_0 = module_1.Field(title=str_1)
        str_2 = 'fT^X"rb5=[U*VlF2ESu.'
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_0.__len__()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_1 = module_0.Schema()
        bool_1 = schema_1.__eq__(schema_definitions_0)
        list_0 = [schema_1]
        str_3 = schema_0.__repr__()
        str_4 = schema_0.__repr__()
        schema_definitions_1 = module_0.SchemaDefinitions(*list_0)
        list_1 = [schema_1]
        schema_2 = module_0.Schema(*list_1)
        reference_0 = module_0.Reference(str_2)
        schema_definitions_0.__setitem__(bool_1, list_1)
        schema_definitions_1.__setitem__(reference_0, str_0)
        type_0 = module_2.type(*list_0)
        reference_1 = module_0.Reference(str_3, type_0)
        any_0 = reference_1.validate(schema_2, strict=bool_1)
        schema_metaclass_0 = module_0.SchemaMetaclass()
    except BaseException:
        pass

def test_case_19():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        bool_0 = schema_0.__eq__(schema_0)
        str_1 = 'H1'
        field_0 = module_1.Field(title=str_0, default=str_0)
        str_2 = '"&9[+@'
        dict_0 = {str_2: str_2, str_0: schema_0, str_1: schema_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_0.__len__()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_1 = module_0.Schema()
        bool_1 = schema_1.__eq__(schema_definitions_0)
        schema_definitions_1 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_1.__iter__()
        list_0 = [schema_1]
        str_3 = schema_0.__repr__()
        schema_definitions_2 = module_0.SchemaDefinitions(*list_0)
        list_1 = [schema_1]
        schema_2 = module_0.Schema(*list_1)
        schema_definitions_0.__setitem__(bool_1, list_1)
        type_0 = module_2.type(*list_0)
        reference_0 = module_0.Reference(str_3, type_0)
        schema_definitions_2.__setitem__(reference_0, type_0)
        any_0 = reference_0.validate(schema_2, strict=bool_1)
        schema_definitions_3 = module_0.SchemaDefinitions(**dict_0)
        any_1 = reference_0.validate(list_1)
    except BaseException:
        pass