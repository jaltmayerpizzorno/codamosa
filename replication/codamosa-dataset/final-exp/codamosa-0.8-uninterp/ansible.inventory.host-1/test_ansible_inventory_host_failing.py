# Automatically generated by Pynguin.
import ansible.inventory.host as module_0

def test_case_0():
    try:
        host_0 = module_0.Host()
        str_0 = '0T4*\x0c&EDHb-uq;'
        var_0 = host_0.__ne__(str_0)
        var_1 = host_0.__hash__()
        host_1 = module_0.Host()
        var_2 = host_0.populate_ancestors()
        float_0 = None
        var_3 = host_1.remove_group(float_0)
        var_4 = host_0.serialize()
        var_5 = host_0.__repr__()
        var_6 = host_1.get_vars()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 127
        set_0 = {int_0, int_0}
        host_0 = module_0.Host(set_0)
        var_0 = host_0.__str__()
        var_1 = host_0.get_name()
        var_2 = host_0.get_name()
        str_0 = '*,GDn,t<kR7}E6'
        host_1 = module_0.Host(host_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1072.0
        host_0 = module_0.Host()
        var_0 = host_0.deserialize(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x94O\x7f\x80\x08g\x18\xb9\x8dd\xed\\'
        list_0 = [bytes_0]
        host_0 = module_0.Host(bytes_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        host_0 = module_0.Host(bool_0)
        var_0 = host_0.get_vars()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        host_0 = module_0.Host()
        var_0 = host_0.__getstate__()
        str_0 = '0242ac11-001b-bbb2-d02a-000000000325'
        str_1 = '0242ac11-001b-bbb2-d02a-000000001fce'
        list_0 = []
        dict_0 = {str_0: bool_0, str_1: list_0}
        var_1 = host_0.deserialize(dict_0)
        int_0 = 472
        var_2 = host_0.__ne__(int_0)
        var_3 = host_0.populate_ancestors(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '[a-fA-F0-9]'
        set_0 = {str_0, str_0, str_0}
        str_1 = '<sG 3|}fyoa'
        host_0 = module_0.Host(str_1)
        var_0 = host_0.__eq__(set_0)
        list_0 = [str_0]
        host_1 = module_0.Host(list_0)
        int_0 = 19
        host_2 = module_0.Host(str_0)
        var_1 = host_2.__getstate__()
        var_2 = host_2.get_magic_vars()
        var_3 = host_2.populate_ancestors()
        bytes_0 = b'\xa9\x80X\x08\x98\x1e"\x1a/\xda>\xb7'
        str_2 = '9e\r|'
        var_4 = host_2.get_vars()
        host_3 = module_0.Host(str_2)
        var_5 = host_0.get_groups()
        var_6 = host_2.remove_group(host_1)
        var_7 = host_1.serialize()
        var_8 = host_2.__hash__()
        var_9 = host_1.__ne__(host_0)
        var_10 = host_3.serialize()
        var_11 = host_2.populate_ancestors()
        var_12 = host_3.set_variable(bytes_0, int_0)
        float_0 = 474.1
        list_1 = [list_0, str_2, var_6]
        host_4 = module_0.Host(float_0, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__repr__()
        list_0 = [host_0, var_0, host_0]
        bool_0 = True
        var_1 = host_0.__str__()
        var_2 = host_0.__eq__(bool_0)
        var_3 = host_0.populate_ancestors(list_0)
        str_0 = '/7MxUYT\r.Nx3ce'
        var_4 = host_0.remove_group(list_0)
        var_5 = host_0.remove_group(str_0)
        var_6 = host_0.populate_ancestors()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'test'
        host_0 = module_0.Host(str_0)
        str_1 = 'v1'
        int_0 = 1
        var_0 = host_0.set_variable(str_1, int_0)
        str_2 = 'v2'
        int_1 = 2
        var_1 = host_0.set_variable(str_2, int_1)
        str_3 = 'v3'
        str_4 = 'k1'
        str_5 = 'k2'
        int_2 = {str_4: int_0, str_5: int_1}
        var_2 = host_0.set_variable(str_3, int_2)
        var_3 = host_0.set_variable(str_3, int_0)
        var_4 = host.get_vars()[str_1]
    except BaseException:
        pass