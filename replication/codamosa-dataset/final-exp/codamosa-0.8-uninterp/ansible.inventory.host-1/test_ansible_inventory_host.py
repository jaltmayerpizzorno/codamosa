# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    host_0 = module_0.Host()

def test_case_1():
    host_0 = module_0.Host()
    var_0 = host_0.__getstate__()

def test_case_2():
    host_0 = module_0.Host()
    var_0 = host_0.__hash__()
    dict_0 = {}
    var_1 = host_0.__setstate__(dict_0)

def test_case_3():
    str_0 = 'rmtree failed: %s'
    host_0 = module_0.Host(str_0)
    set_0 = {host_0}
    var_0 = host_0.__eq__(set_0)
    var_1 = host_0.get_vars()
    host_1 = module_0.Host()
    var_2 = host_1.__hash__()

def test_case_4():
    host_0 = module_0.Host()
    var_0 = host_0.__hash__()

def test_case_5():
    str_0 = 'a'
    group_0 = module_1.Group(str_0)
    group_1 = module_1.Group(str_0)
    var_0 = group_1.add_child_group(group_0)
    host_0 = module_0.Host(str_0)
    var_1 = host_0.add_group(group_0)
    var_2 = host_0.remove_group(group_0)
    var_3 = host_0.__repr__()

def test_case_6():
    str_0 = 'W.@?G>LbECI..K?'
    float_0 = 1226.5014
    host_0 = module_0.Host(float_0)
    var_0 = host_0.remove_group(str_0)
    host_1 = module_0.Host()
    var_1 = host_1.get_name()

def test_case_7():
    host_0 = module_0.Host()
    var_0 = host_0.populate_ancestors()
    host_1 = module_0.Host(host_0)
    var_1 = host_1.__getstate__()

def test_case_8():
    str_0 = 'd'
    group_0 = module_1.Group(str_0)
    str_1 = 'test_host'
    host_0 = module_0.Host(str_1)
    var_0 = host_0.add_group(group_0)

def test_case_9():
    tuple_0 = None
    host_0 = module_0.Host()
    var_0 = host_0.remove_group(tuple_0)

def test_case_10():
    str_0 = 'sTYA(_b}]40q0zl_gL'
    int_0 = 3641
    host_0 = module_0.Host(str_0, int_0)
    var_0 = host_0.get_groups()

def test_case_11():
    str_0 = 'rmtree failed: %s'
    host_0 = module_0.Host(str_0)
    var_0 = host_0.get_vars()
    host_1 = module_0.Host()

def test_case_12():
    str_0 = 'host'
    host_0 = module_0.Host(str_0)
    str_1 = 'foo'
    str_2 = 'bar'
    var_0 = host_0.set_variable(str_1, str_2)
    var_1 = host_0.get_vars()
    var_2 = host_0.get_vars()
    list_0 = [host_0]
    var_3 = host_0.populate_ancestors(list_0)
    str_3 = 'something'
    int_0 = 42
    int_1 = {str_3: int_0}
    str_4 = 'vars'
    var_4 = host_0.set_variable(str_4, int_1)
    var_5 = host_0.get_vars()
    int_2 = 43
    host_1 = module_0.Host(int_2)
    host_2 = module_0.Host()

def test_case_13():
    str_0 = '[a-fA-F0-9]'
    list_0 = [str_0]
    host_0 = module_0.Host(list_0)
    int_0 = 19
    var_0 = host_0.remove_group(int_0)
    var_1 = host_0.__getstate__()
    host_1 = module_0.Host(str_0)
    var_2 = host_1.__getstate__()
    var_3 = host_1.get_magic_vars()
    var_4 = host_1.populate_ancestors()
    str_1 = ':+zB`|/r\rf^9;eE^8'
    var_5 = host_1.get_vars()
    host_2 = module_0.Host(str_1)
    var_6 = host_2.get_groups()
    host_3 = module_0.Host()
    var_7 = host_2.remove_group(str_1)
    var_8 = host_2.serialize()
    var_9 = host_3.__hash__()
    var_10 = host_2.__ne__(list_0)
    var_11 = host_3.serialize()
    var_12 = host_3.__str__()
    var_13 = host_1.serialize()
    host_4 = module_0.Host()
    var_14 = host_4.populate_ancestors(str_1)
    bool_0 = True
    bool_1 = True
    host_5 = module_0.Host(host_1, bool_0)
    var_15 = host_5.set_variable(int_0, bool_1)
    host_6 = module_0.Host(bool_0)

def test_case_14():
    str_0 = 'localhost'
    host_0 = module_0.Host(str_0)
    str_1 = 'foo'
    group_0 = module_1.Group(str_1)
    var_0 = host_0.add_group(group_0)
    var_1 = host_0.add_group(group_0)
    var_2 = host_0.serialize()
    host_1 = module_0.Host()
    var_3 = host_1.deserialize(var_2)

def test_case_15():
    str_0 = 'a'
    group_0 = module_1.Group(str_0)
    group_1 = module_1.Group(str_0)
    host_0 = module_0.Host(str_0)
    var_0 = host_0.add_group(group_1)
    var_1 = host_0.get_magic_vars()

def test_case_16():
    str_0 = 'host'
    host_0 = module_0.Host(str_0)
    var_0 = host_0.get_vars()
    str_1 = 'something'
    int_0 = 42
    int_1 = {str_1: int_0}
    str_2 = 'vars'
    var_1 = host_0.set_variable(str_2, int_1)
    int_2 = 43
    int_3 = {str_1: int_2}
    var_2 = host_0.set_variable(str_2, int_3)
    var_3 = host_0.get_vars()

def test_case_17():
    str_0 = 'testhost'
    host_0 = module_0.Host(str_0)
    str_1 = 'test1'
    group_0 = module_1.Group(str_1)
    str_2 = 'test2'
    group_1 = module_1.Group(str_2)
    str_3 = 'test3'
    group_2 = module_1.Group(str_3)
    str_4 = 'test4'
    group_3 = module_1.Group(str_4)
    var_0 = group_0.add_child_group(group_1)
    var_1 = group_1.add_child_group(group_2)
    var_2 = group_2.add_child_group(group_3)
    var_3 = host_0.add_group(group_1)
    var_4 = host_0.add_group(group_2)
    var_5 = host_0.add_group(group_3)

def test_case_18():
    str_0 = 'test'
    host_0 = module_0.Host(str_0)
    var_0 = host_0.vars
    var_1 = len(var_0)
    str_1 = 'key1'
    str_2 = 'value1'
    var_2 = host_0.set_variable(str_1, str_2)
    str_3 = 'key2'
    str_4 = 'value2'
    var_3 = host_0.set_variable(str_3, str_4)
    str_5 = 'key3'
    str_6 = 'value3'
    var_4 = host_0.set_variable(str_5, str_6)
    str_7 = 'key4'
    str_8 = 'value4'
    var_5 = host_0.set_variable(str_7, str_8)
    str_9 = 'key5'
    str_10 = 'value5'
    var_6 = host_0.set_variable(str_9, str_10)
    var_7 = host_0.vars
    var_8 = len(var_7)
    str_11 = 'value6'
    var_9 = host_0.set_variable(str_1, str_11)
    var_10 = host_0.vars
    var_11 = len(var_10)
    str_12 = 'key6'
    str_13 = 'key7'
    str_14 = 'value7'
    str_15 = {str_12: str_11, str_13: str_14}
    var_12 = host_0.set_variable(str_1, str_15)
    var_13 = host_0.vars
    var_14 = len(var_13)

def test_case_19():
    str_0 = 'aU'
    group_0 = module_1.Group(str_0)
    str_1 = ''
    float_0 = -1602.72
    host_0 = module_0.Host(float_0)
    group_1 = module_1.Group(str_1)
    group_2 = module_1.Group(str_0)
    var_0 = group_1.add_child_group(group_2)
    var_1 = group_2.add_child_group(group_0)
    str_2 = '2<\x0c;;m3uJ"[I=#>bLt'
    bytes_0 = None
    tuple_0 = (str_2, bytes_0)
    str_3 = '/e\tEA%0'
    dict_0 = {str_0: float_0, str_0: str_0, str_1: tuple_0, str_3: str_2}
    var_2 = host_0.__setstate__(dict_0)
    var_3 = host_0.__getstate__()
    var_4 = host_0.populate_ancestors()
    str_4 = 'test_host'
    var_5 = host_0.__str__()
    host_1 = module_0.Host(str_4)
    var_6 = host_1.add_group(group_0)
    var_7 = host_1.add_group(group_2)
    var_8 = group_1.serialize()
    var_9 = host_1.remove_group(group_0)
    var_10 = group_1.__repr__()
    var_11 = host_1.set_variable(group_1, bytes_0)
    var_12 = host_1.get_magic_vars()