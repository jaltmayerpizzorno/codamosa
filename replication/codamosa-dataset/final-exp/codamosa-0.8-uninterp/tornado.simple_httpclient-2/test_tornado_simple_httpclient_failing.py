# Automatically generated by Pynguin.
import tornado.httpclient as module_0
import tornado.ioloop as module_1
import tornado.simple_httpclient as module_2
import tornado.tcpclient as module_3
import tornado.httputil as module_4
import ssl as module_5
import socket as module_6
import concurrent.futures._base as module_7

def test_case_0():
    try:
        str_0 = '>G\ngeU$"PV#ni,/?/'
        callable_0 = None
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, str_0, str_0, callable_0, str_0, str_0, str_0)
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, i_o_loop_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '>G\ngeU$"PV#ni,/?/'
        callable_0 = None
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, str_0, str_0, callable_0, str_0, str_0, str_0)
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        bool_0 = None
        int_0 = -2224
        h_t_t_p_request_1 = module_0.HTTPRequest(str_0, str_0, str_0, callable_0, int_0, str_0, bool_0, str_0)
        callable_1 = None
        list_0 = [bool_0]
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient(*list_0)
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_1, callable_1)
    except BaseException:
        pass

def test_case_2():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = "~ia!QN$j'\n^+"
        h_t_t_p_timeout_error_0 = module_2.HTTPTimeoutError(str_0)
        str_1 = h_t_t_p_timeout_error_0.__str__()
        str_2 = 'bWt\x0c;4S5=z(\x0b'
        h_t_t_p_stream_closed_error_0 = module_2.HTTPStreamClosedError(str_2)
        i_o_loop_1 = i_o_loop_0.instance()
        str_3 = h_t_t_p_timeout_error_0.__str__()
        str_4 = "(`zm'z"
        h_t_t_p_stream_closed_error_1 = module_2.HTTPStreamClosedError(str_4)
        str_5 = h_t_t_p_stream_closed_error_1.__str__()
        i_o_loop_2 = i_o_loop_1.instance()
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        str_6 = '(J^;9+C'
        bytes_0 = b'\n\xa0\x8dy<\xe0\xb0\xc9-\x0c\xe5'
        int_0 = -1025
        simple_async_h_t_t_p_client_0.close()
        bool_0 = None
        str_7 = None
        dict_0 = None
        float_0 = 2698.0
        h_t_t_p_request_0 = module_0.HTTPRequest(str_7, dict_0, str_0, str_2, str_3, bool_0, str_5, str_1, str_3, bool_0, str_6, bool_0, float_0, bool_0)
        callable_0 = None
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
        t_c_p_client_0 = module_3.TCPClient()
        int_1 = -308
        h_t_t_p_connection_0 = module_2._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, simple_async_h_t_t_p_client_0, callable_0, int_0, t_c_p_client_0, int_0, int_1)
        h_t_t_p_connection_0.data_received(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = "~ia!QN$j'\n^+"
        h_t_t_p_timeout_error_0 = module_2.HTTPTimeoutError(str_0)
        str_1 = h_t_t_p_timeout_error_0.__str__()
        str_2 = h_t_t_p_timeout_error_0.__str__()
        str_3 = 'bWt\x0c;4S5=z(\x0b'
        h_t_t_p_stream_closed_error_0 = module_2.HTTPStreamClosedError(str_3)
        dict_0 = {}
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient(**dict_0)
        simple_async_h_t_t_p_client_0.close()
        i_o_loop_1 = i_o_loop_0.instance()
        str_4 = h_t_t_p_timeout_error_0.__str__()
        str_5 = "(`zm'z"
        h_t_t_p_stream_closed_error_1 = module_2.HTTPStreamClosedError(str_5)
        str_6 = h_t_t_p_stream_closed_error_1.__str__()
        i_o_loop_2 = i_o_loop_1.instance()
        simple_async_h_t_t_p_client_1 = module_2.SimpleAsyncHTTPClient()
        str_7 = '(J^;9+C'
        list_0 = []
        async_h_t_t_p_client_0 = module_0.AsyncHTTPClient(*list_0)
        int_0 = -1025
        simple_async_h_t_t_p_client_1.close()
        bool_0 = None
        str_8 = None
        dict_1 = None
        float_0 = 2698.0
        h_t_t_p_request_0 = module_0.HTTPRequest(str_8, dict_1, str_0, str_3, str_4, bool_0, str_6, str_1, str_4, bool_0, str_7, bool_0, float_0, bool_0)
        simple_async_h_t_t_p_client_1.initialize(int_0)
        callable_0 = None
        simple_async_h_t_t_p_client_1.fetch_impl(h_t_t_p_request_0, callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = "~ia!QN$j'\n^+"
        h_t_t_p_timeout_error_0 = module_2.HTTPTimeoutError(str_0)
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        str_1 = h_t_t_p_timeout_error_0.__str__()
        str_2 = '3l'
        h_t_t_p_stream_closed_error_0 = module_2.HTTPStreamClosedError(str_2)
        i_o_loop_1 = i_o_loop_0.instance()
        str_3 = '=<o+!*jOX'
        h_t_t_p_headers_0 = module_4.HTTPHeaders()
        bool_0 = False
        s_s_l_context_0 = module_5.SSLContext()
        h_t_t_p_request_0 = module_0.HTTPRequest(str_3, h_t_t_p_headers_0, str_3, str_3, bool_0, str_0, str_0, bool_0, s_s_l_context_0)
        address_family_0 = module_6.AddressFamily.AF_ATMPVC
        executor_0 = module_7.Executor()
        t_c_p_client_0 = module_3.TCPClient()
        int_0 = -849
        int_1 = 1792
        h_t_t_p_connection_0 = module_2._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, address_family_0, executor_0, int_1, t_c_p_client_0, int_0, int_1)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_5():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = "~ia!QN$j'\n^+"
        h_t_t_p_timeout_error_0 = module_2.HTTPTimeoutError(str_0)
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        str_1 = h_t_t_p_timeout_error_0.__str__()
        str_2 = '3l'
        h_t_t_p_stream_closed_error_0 = module_2.HTTPStreamClosedError(str_2)
        i_o_loop_1 = i_o_loop_0.instance()
        str_3 = '=<o+!*jOX'
        h_t_t_p_headers_0 = module_4.HTTPHeaders()
        bool_0 = False
        s_s_l_context_0 = module_5.SSLContext()
        h_t_t_p_request_0 = module_0.HTTPRequest(str_3, h_t_t_p_headers_0, str_3, str_3, bool_0, str_0, str_0, bool_0, s_s_l_context_0)
        executor_0 = module_7.Executor()
        int_0 = -2875
        int_1 = -967
        callable_0 = None
        float_0 = 737.0
        t_c_p_client_0 = None
        h_t_t_p_connection_0 = module_2._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_0, float_0, int_0, t_c_p_client_0, int_0, int_1)
        h_t_t_p_connection_0.on_connection_close()
    except BaseException:
        pass

def test_case_6():
    try:
        i_o_loop_0 = module_1.IOLoop()
        str_0 = "~i!QN$j'\n^+"
        h_t_t_p_timeout_error_0 = module_2.HTTPTimeoutError(str_0)
        str_1 = h_t_t_p_timeout_error_0.__str__()
        str_2 = h_t_t_p_timeout_error_0.__str__()
        str_3 = 'bWt\x0c;4S5=z(\x0b'
        h_t_t_p_stream_closed_error_0 = module_2.HTTPStreamClosedError(str_3)
        i_o_loop_1 = i_o_loop_0.instance()
        str_4 = h_t_t_p_timeout_error_0.__str__()
        str_5 = "(`zm'z"
        h_t_t_p_stream_closed_error_1 = module_2.HTTPStreamClosedError(str_5)
        str_6 = h_t_t_p_stream_closed_error_1.__str__()
        i_o_loop_2 = i_o_loop_1.instance()
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        str_7 = '(J^;9+C'
        int_0 = -1025
        str_8 = h_t_t_p_stream_closed_error_1.__str__()
        simple_async_h_t_t_p_client_0.close()
        bool_0 = None
        str_9 = None
        dict_0 = None
        float_0 = 2698.0
        h_t_t_p_request_0 = module_0.HTTPRequest(str_9, dict_0, str_0, str_3, str_4, bool_0, str_6, str_1, str_4, bool_0, str_7, bool_0, float_0, bool_0)
        int_1 = None
        dict_1 = {str_1: int_0}
        simple_async_h_t_t_p_client_0.initialize(int_0, dict_0, int_1, dict_1)
        callable_0 = None
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
    except BaseException:
        pass