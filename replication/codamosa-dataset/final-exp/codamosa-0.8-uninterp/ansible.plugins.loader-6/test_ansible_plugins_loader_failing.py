# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        str_0 = '<t_MHfhnV3=t+:{/'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'JfO\r{%\\D13nU4\tR>7f/;'
        int_0 = 8192
        plugin_load_context_0 = module_0.PluginLoadContext()
        set_0 = set()
        float_0 = -753.2865
        jinja2_loader_0 = module_0.Jinja2Loader(int_0, plugin_load_context_0, set_0, float_0)
        var_0 = jinja2_loader_0.find_plugin(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 875.749
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = True
        list_0 = []
        str_0 = '/p\nng{in/shell_plugins/windows'
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, list_0, str_0)
        var_0 = plugin_loader_0.has_plugin(float_0)
        var_1 = module_0.get_shell_plugin(plugin_loader_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        bytes_0 = b'\x96@\xd3\x88)\xb5g\xd1.\xfd\xe2q_'
        bytes_1 = b'\xf1)'
        list_0 = [bool_0, bytes_0, bool_0]
        tuple_0 = (bool_0, bytes_0, bytes_1, list_0)
        int_0 = 27
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_1 = True
        bool_2 = True
        plugin_loader_0 = module_0.PluginLoader(int_0, plugin_load_context_0, bool_1, bool_2)
        var_0 = plugin_loader_0.format_paths(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '{TkpK'
        float_0 = -171.5235
        bytes_0 = b'\x0e\xa8\xb3'
        plugin_loader_0 = module_0.PluginLoader(str_0, float_0, float_0, str_0, bytes_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -296.0
        int_0 = 123
        var_0 = module_0.add_dirs_to_loader(float_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '^test_PluginLoader_get_with_context\\(\\)\\s*-\\s*(.*)$'
        int_0 = 11
        str_1 = 'p#!-\\&t{18\t1>A@d>c'
        int_1 = -2745
        tuple_0 = ()
        float_0 = 1.5
        plugin_loader_0 = module_0.PluginLoader(str_1, int_1, tuple_0, int_1, float_0)
        var_0 = plugin_loader_0.find_plugin(int_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\x92\xbctB\xf9\x01Q1\x15'
        str_0 = '65AL4'
        tuple_0 = ()
        plugin_loader_0 = module_0.PluginLoader(bytes_0, bytes_0, str_0, tuple_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'View more details about a specific role.'
        dict_0 = {str_0: str_0}
        int_0 = -1140
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_1 = '\x0bco7xJxaC<Q'
        plugin_loader_0 = module_0.PluginLoader(int_0, str_0, plugin_load_context_0, int_0, str_1)
        var_0 = plugin_loader_0.all()
        tuple_0 = ()
        set_0 = {str_0, int_0, int_0, int_0}
        str_2 = '\t6XwmSLufZ%'
        jinja2_loader_0 = module_0.Jinja2Loader(str_2, dict_0, tuple_0, str_0, int_0)
        var_1 = plugin_loader_0.find_plugin(set_0, jinja2_loader_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '__init__'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'miutes'
        dict_0 = {str_0: str_0, str_0: str_0}
        int_0 = -1755
        bytes_0 = b'\xfaR\xef\x1fMA\xb8~\x14]@tR'
        set_0 = {int_0, bytes_0, str_0}
        jinja2_loader_0 = module_0.Jinja2Loader(int_0, bytes_0, int_0, set_0)
        var_0 = jinja2_loader_0.find_plugin(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = None
        float_0 = 639.8529
        bool_0 = True
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(list_0, float_0, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'wYV%#^{n'
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = False
        dict_0 = {str_0: bool_0}
        bool_1 = False
        var_0 = plugin_load_context_0.record_deprecation(bool_0, dict_0, bool_1)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 90
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = False
        bytes_0 = b'P^\xd7\x10\x11='
        list_0 = [plugin_load_context_0]
        bool_1 = True
        set_0 = {bytes_0}
        list_1 = [list_0, list_0]
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, list_0, bool_1, set_0, list_1, bool_0)
        plugin_loader_0 = module_0.PluginLoader(bool_0, bool_1, int_0, list_1, bool_1)
        float_0 = 3104.194718526811
        plugin_loader_1 = module_0.PluginLoader(bool_0, plugin_loader_0, float_0, list_1)
        float_1 = 3913.7941
        plugin_loader_2 = module_0.PluginLoader(jinja2_loader_0, bytes_0, float_1, list_0)
        plugin_load_context_1 = module_0.PluginLoadContext()
        tuple_0 = (set_0, list_0, jinja2_loader_0)
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_1, tuple_0)
        str_0 = 'q\x0b^!Rq<VX+g['
        plugin_load_context_2 = None
        str_1 = '='
        str_2 = "4te?)P4x'o#C"
        dict_0 = {str_0: plugin_load_context_2, str_0: tuple_0, str_1: plugin_load_context_2, str_2: tuple_0}
        var_0 = plugin_loader_0.find_plugin(plugin_path_context_0, float_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = []
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.redirect(list_0)
        bool_0 = True
        var_1 = module_0.add_all_plugin_dirs(bool_0)
        str_0 = '5'
        var_2 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'View more details about a specific role.'
        int_0 = -1140
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_1 = 665
        str_1 = '\x0bco7xJxaC<Q'
        plugin_loader_0 = module_0.PluginLoader(int_0, str_0, plugin_load_context_0, int_1, str_1)
        var_0 = plugin_loader_0.all()
        var_1 = plugin_loader_0.__getstate__()
        bytes_0 = b'\x03j'
        var_2 = plugin_loader_0.find_plugin_with_context(bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        str_1 = '9+uK=/dsNf'
        list_0 = None
        dict_0 = {str_0: str_0, str_1: list_0}
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        bool_0 = True
        int_0 = -1420
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, plugin_load_context_1, bool_0, int_0)
        var_0 = plugin_loader_0.__setstate__(dict_0)
        str_2 = '|5'
        dict_1 = {str_2: str_2, str_2: str_2}
        plugin_load_context_2 = module_0.PluginLoadContext()
        var_1 = plugin_load_context_2.redirect(dict_1)
        var_2 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        str_1 = 'HG'
        bytes_0 = b'6s1\xcd\x9f*'
        int_0 = 2664
        list_0 = [bytes_0]
        plugin_path_context_0 = module_0.PluginPathContext(int_0, list_0)
        dict_1 = {}
        jinja2_loader_0 = module_0.Jinja2Loader(str_1, bytes_0, plugin_path_context_0, dict_1)
        var_0 = jinja2_loader_0.get(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        list_0 = [plugin_load_context_1]
        var_0 = module_0.get_shell_plugin(plugin_load_context_1, list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'xxmJ\n'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '__init__'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        dict_0 = {}
        float_0 = 1403.736307
        str_0 = '"Y7$9y'
        str_1 = '&:\x0c ,\t$e7I \r'
        jinja2_loader_0 = module_0.Jinja2Loader(float_0, str_0, float_0, str_1)
        var_0 = jinja2_loader_0.all(**dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = 3572
        list_0 = [plugin_load_context_0, plugin_load_context_0, plugin_load_context_0]
        str_0 = '/pynguin/shell_plugins/windows'
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, list_0, str_0)
        dict_0 = {}
        var_0 = plugin_loader_0.add_directory(str_0, dict_0)
        var_1 = module_0.get_shell_plugin(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = 3348.1
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = True
        list_0 = [plugin_load_context_0]
        str_0 = '/pynguin/shell_plugins/windows'
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, list_0, str_0)
        var_0 = plugin_loader_0.has_plugin(float_0, plugin_loader_0)
        var_1 = plugin_loader_0.find_plugin_with_context(float_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '"w<nCZQ{/-\t.P;fd\'e//'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = 3348.1
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\xab\xe9r\x90\x04\x8b\t\x0b\xb2\x90\xf9'
        var_0 = plugin_load_context_0.redirect(bytes_0)
        int_0 = True
        bool_0 = False
        str_0 = 'Qe3~Q0/2+,B<m[*&e,'
        str_1 = '42h]kj|aVx7'
        dict_0 = {str_1: bool_0}
        plugin_loader_0 = module_0.PluginLoader(bool_0, str_0, dict_0, float_0)
        dict_1 = {}
        str_2 = '/root/.ansible/plugins/doc_fragments/windows'
        list_0 = None
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_loader_0, dict_1, str_2, float_0, list_0)
        bool_1 = False
        var_1 = plugin_load_context_0.resolve(jinja2_loader_0, list_0, bool_1, dict_1)
        list_1 = [plugin_load_context_0, plugin_load_context_0, plugin_load_context_0]
        str_3 = '/pynguin/shell_plugins/windows'
        str_4 = 'Path %s is owned by user %s, not by user %s as expected\n'
        var_2 = plugin_loader_0.format_paths(str_4)
        str_5 = 'L'
        tuple_0 = ()
        float_1 = 1.0
        plugin_loader_1 = module_0.PluginLoader(tuple_0, plugin_load_context_0, plugin_load_context_0, float_1)
        var_3 = plugin_loader_1.all()
        var_4 = plugin_loader_1.format_paths(str_5)
        plugin_loader_2 = module_0.PluginLoader(plugin_load_context_0, int_0, list_1, str_3)
        var_5 = plugin_loader_0.has_plugin(dict_0)
        var_6 = plugin_loader_2.has_plugin(float_0)
        int_1 = 5005
        complex_0 = None
        plugin_path_context_0 = module_0.PluginPathContext(int_1, complex_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 4096
        bool_0 = True
        str_0 = '~s'
        str_1 = 'yebsdOwW)(J]\rLR!XQ'
        str_2 = 'search_regex'
        dict_0 = {str_1: bool_0, str_2: bool_0, str_1: str_2}
        set_0 = {int_0, str_0}
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, str_0, dict_0, bool_0, set_0)
        list_0 = [int_0, dict_0, str_1]
        str_3 = 'L17?m'
        int_1 = 436
        bytes_0 = b''
        set_1 = set()
        plugin_loader_0 = module_0.PluginLoader(int_1, bytes_0, set_1, str_3)
        str_4 = '3w-\x0c+Cy'
        str_5 = 'M\tAsi.tkvAx6'
        dict_1 = {str_4: plugin_loader_0, str_5: bytes_0}
        plugin_load_context_0 = module_0.PluginLoadContext()
        jinja2_loader_1 = module_0.Jinja2Loader(plugin_loader_0, dict_1, plugin_load_context_0, plugin_load_context_0)
        str_6 = ".'_%2s{"
        tuple_0 = ()
        tuple_1 = (str_6, tuple_0, str_5)
        str_7 = 'https://galaxy.ansible.com'
        plugin_path_context_0 = module_0.PluginPathContext(tuple_1, str_7)
        jinja2_loader_2 = module_0.Jinja2Loader(str_3, jinja2_loader_1, str_6, plugin_path_context_0)
        var_0 = jinja2_loader_2.get(jinja2_loader_0, *list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 's'
        str_1 = None
        str_2 = 'powershell'
        var_0 = module_0.get_shell_plugin(str_2)
        str_3 = 'F~<)'
        bool_0 = False
        plugin_load_context_0 = None
        plugin_loader_0 = None
        list_0 = [plugin_loader_0, str_0]
        plugin_path_context_0 = module_0.PluginPathContext(bool_0, list_0)
        list_1 = [plugin_load_context_0, plugin_path_context_0, bool_0, str_1]
        int_0 = 4098
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, list_1, plugin_loader_0, int_0, str_1)
        var_1 = jinja2_loader_0.find_plugin(str_3)
    except BaseException:
        pass

def test_case_29():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        bool_0 = False
        str_0 = "'&{A<d<"
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = []
        str_1 = '0Q&&iAC\\jGt,'
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, list_0, str_1, plugin_load_context_0)
        dict_0 = {}
        var_1 = jinja2_loader_0.all(**dict_0)
        dict_1 = {str_1: str_0}
        int_0 = 1197
        float_0 = -723.33
        plugin_path_context_0 = module_0.PluginPathContext(int_0, float_0)
        int_1 = -2816
        plugin_loader_0 = module_0.PluginLoader(str_0, jinja2_loader_0, dict_1, int_1)
        var_2 = plugin_load_context_0.nope(plugin_load_context_0)
        var_3 = plugin_loader_0.all(**dict_0)
        var_4 = plugin_loader_0.format_paths(bool_0)
    except BaseException:
        pass