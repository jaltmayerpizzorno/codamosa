# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'wKJQ'
    str_1 = module_0.doctest(str_0)
    str_2 = ''
    str_3 = module_0.parent(str_0)
    int_0 = -614
    dict_0 = {str_2: int_0}
    parser_0 = module_0.Parser(dict_0)
    int_1 = -2178
    dict_1 = {str_0: str_2, str_2: str_1, str_2: str_2, str_2: str_0}
    parser_1 = module_0.Parser(int_1, dict_1, dict_1)
    str_4 = '\nq\x0b5@D|Q_YvA 0rAXBJ'
    ann_assign_0 = None
    parser_0.globals(str_4, ann_assign_0)

def test_case_2():
    bool_0 = False
    parser_0 = module_0.Parser(bool_0)
    str_0 = ''
    parser_0.parse(str_0, str_0)
    parser_1 = module_0.Parser()

def test_case_3():
    bool_0 = False
    parser_0 = module_0.Parser(bool_0)
    str_0 = parser_0.compile()
    str_1 = 'S'
    parser_0.parse(str_1, str_1)

def test_case_4():
    str_0 = '\x0b/Aw1S]5+q'
    str_1 = module_0.code(str_0)

def test_case_5():
    str_0 = 'dz096HmxB6y2'
    str_1 = module_0.doctest(str_0)

def test_case_6():
    expr_0 = module_1.expr()
    str_0 = module_0.const_type(expr_0)

def test_case_7():
    bool_0 = True
    str_0 = 'OEX>hsk"MI>'
    str_1 = '-v2_N<G48.3a[omO'
    bool_1 = module_0.is_public_family(str_0)
    dict_0 = {str_0: str_1}
    parser_0 = module_0.Parser(bool_0, dict_0)
    resolver_0 = module_0.Resolver(str_1, dict_0)

def test_case_8():
    list_0 = None
    list_1 = [list_0]
    dict_0 = {}
    subscript_0 = module_1.Subscript(*list_1, **dict_0)
    str_0 = 'D@7Oo*wl6C=`D4'
    dict_1 = {}
    resolver_0 = module_0.Resolver(str_0, dict_1)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)

def test_case_9():
    parser_0 = module_0.Parser()
    str_0 = parser_0.compile()

def test_case_10():
    str_0 = '*nW2[rC\r<fOIu8xk#)+<'
    expr_0 = module_1.expr()
    str_1 = module_0.const_type(expr_0)
    import_from_0 = module_1.ImportFrom()
    dict_0 = {str_0: str_0}
    parser_0 = module_0.Parser(dict_0)
    var_0 = parser_0.__repr__()
    parser_0.imports(str_0, import_from_0)

def test_case_11():
    str_0 = '*nW2[rC\r<fOIu8xk#)+<'
    expr_0 = module_1.expr()
    dict_0 = {str_0: str_0}
    parser_0 = module_0.Parser(dict_0)
    str_1 = ';^'
    list_0 = [dict_0, expr_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    parser_0.globals(str_1, ann_assign_0)

def test_case_12():
    bool_0 = False
    parser_0 = module_0.Parser(bool_0)
    str_0 = parser_0.compile()
    float_0 = 365.1
    dict_0 = {str_0: float_0, str_0: bool_0, str_0: str_0}
    expr_0 = module_1.expr(**dict_0)
    str_1 = 'contextlib.AsyncContextManager'
    list_0 = [str_0, float_0, str_1]
    assign_0 = module_1.Assign(*list_0, **dict_0)
    parser_0.globals(str_1, assign_0)

def test_case_13():
    str_0 = 'RPZ@7]*ZRG"c_)'
    list_0 = []
    dict_0 = {str_0: list_0, str_0: str_0, str_0: str_0}
    list_1 = [dict_0]
    bool_0 = True
    str_1 = '$6wvgG'
    dict_1 = {str_1: str_1}
    str_2 = 'oV~efR'
    set_0 = {str_1, str_2, str_2, str_2}
    dict_2 = {str_1: set_0, str_2: set_0, str_2: set_0}
    parser_0 = module_0.Parser(bool_0, dict_1, dict_2, dict_1)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_14():
    str_0 = '\\Lx(>77@r ?a4#>B'
    expr_0 = module_1.expr()
    bool_0 = False
    str_1 = 'x'
    dict_0 = {str_1: str_0}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    str_2 = parser_0.resolve(str_0, expr_0)
    str_3 = parser_0.compile()
    str_4 = parser_0.compile()

def test_case_15():
    str_0 = 'Q).u[COS\ri7\x0c1'
    str_1 = module_0.doctest(str_0)
    str_2 = '+dGtY`6pO'
    int_0 = -614
    dict_0 = {str_0: str_2, str_2: str_1, str_2: str_2, str_2: str_0}
    parser_0 = module_0.Parser(int_0, dict_0, dict_0)
    str_3 = '\nq\x0b5@D|Q_YvA 0rAXBJ'
    ann_assign_0 = None
    parser_0.globals(str_3, ann_assign_0)

def test_case_16():
    str_0 = 'int'
    bool_0 = module_0.is_public_family(str_0)

def test_case_17():
    str_0 = 'dz096HmxB6y2'
    str_1 = module_0.esc_underscore(str_0)
    str_2 = module_0.doctest(str_0)

def test_case_18():
    str_0 = ';O'
    list_0 = [str_0, str_0]
    name_0 = module_1.Name(*list_0)
    str_1 = 'Copyright (C) 2020-2021'
    str_2 = 'd'
    str_3 = ',p{\\'
    str_4 = 'ofg\t'
    str_5 = "/Ej_'<9|Y@V\\mgzx4"
    dict_0 = {str_0: str_1, str_2: str_3, str_4: str_5}
    resolver_0 = module_0.Resolver(str_1, dict_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    str_6 = '*@?'
    resolver_1 = module_0.Resolver(str_0, dict_0, str_6)

def test_case_19():
    str_0 = 'Q).u[COS\ri7\x0c1'
    str_1 = module_0.doctest(str_0)
    str_2 = '+dGtY`6pO'
    int_0 = -614
    dict_0 = {str_0: str_2, str_2: str_1, str_2: str_2, str_2: str_0}
    parser_0 = module_0.Parser(int_0, dict_0, dict_0)
    str_3 = parser_0.compile()
    ann_assign_0 = None
    parser_0.globals(str_2, ann_assign_0)

def test_case_20():
    str_0 = 'it'
    bool_0 = module_0.is_public_family(str_0)

def test_case_21():
    str_0 = ''
    list_0 = [str_0, str_0, str_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    str_1 = 'F#n~/31ey`]|%\td|;O'
    bool_0 = False
    str_2 = 'dtX_c,\tVIBoL*ES[9k'
    dict_0 = {str_1: str_2, str_1: str_1}
    set_0 = {str_0}
    str_3 = '-&1{Wx-2qYYgDpkBhy'
    str_4 = '-UR0I\x0b:C\t.'
    str_5 = "Bt\\vO];'1@7i=\twR<t"
    set_1 = {str_4, str_0, str_5, str_5}
    dict_1 = {str_2: set_0, str_2: set_0, str_3: set_0, str_4: set_1}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1, dict_0, dict_0, dict_0)
    str_6 = module_0.esc_underscore(str_0)
    bool_1 = False
    int_0 = 12
    bool_2 = False
    dict_2 = {str_0: str_1}
    parser_1 = module_0.Parser(bool_1, int_0, bool_2, dict_2)
    var_0 = parser_1.__post_init__()
    str_7 = 'AS'
    import_from_0 = module_1.ImportFrom(*list_0)
    parser_0.imports(str_7, import_from_0)

def test_case_22():
    arguments_0 = module_1.arguments()
    list_0 = [arguments_0]
    attribute_0 = module_1.Attribute(*list_0)
    str_0 = '}'
    str_1 = ']IeOm{c'
    str_2 = 'n\t+r@;i>x\rN&_2TIoc!'
    str_3 = None
    dict_0 = {str_1: str_2, str_3: str_1}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
    str_4 = module_0.doctest(str_2)
    str_5 = '\\km0,w'
    bool_0 = module_0.is_public_family(str_5)

def test_case_23():
    bool_0 = False
    parser_0 = module_0.Parser(bool_0)
    str_0 = parser_0.compile()
    str_1 = '\t>KZR'
    float_0 = 365.1
    str_2 = '<w!fqn}l.av'
    dict_0 = {str_1: float_0, str_2: str_0}
    expr_0 = module_1.expr(**dict_0)
    str_3 = module_0.const_type(expr_0)
    parser_1 = module_0.Parser()
    str_4 = 'contextlib.AsyncContextManager'
    list_0 = [str_3, float_0, str_4]
    assign_0 = module_1.Assign(*list_0, **dict_0)
    parser_1.globals(str_4, assign_0)

def test_case_24():
    str_0 = 'S'
    str_1 = '\t{R'
    bool_0 = True
    int_0 = -1608
    parser_0 = module_0.Parser(bool_0, int_0)
    parser_0.parse(str_0, str_0)
    str_2 = parser_0.compile()
    arguments_0 = module_1.arguments()
    str_3 = module_0.parent(str_1)

def test_case_25():
    str_0 = 'abc'
    bool_0 = module_0.is_public_family(str_0)
    str_1 = 'abc.Abc'
    bool_1 = module_0.is_public_family(str_1)
    str_2 = 'abc._Abc'
    bool_2 = module_0.is_public_family(str_2)
    str_3 = 'ab6c.__Abc'
    bool_3 = module_0.is_public_family(str_3)
    str_4 = 'abc.__abcd__'
    bool_4 = module_0.is_public_family(str_4)