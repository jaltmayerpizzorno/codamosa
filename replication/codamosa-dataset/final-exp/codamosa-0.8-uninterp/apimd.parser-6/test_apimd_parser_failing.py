# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    try:
        str_0 = ',w'
        bool_0 = module_0.is_magic(str_0)
        str_1 = '{_/\\t~\x0bKPy$n'
        str_2 = 'E-Xq &Nn$.+\x0c^2;`Bc'
        int_0 = -1595
        str_3 = module_0.parent(str_2, level=int_0)
        str_4 = 'E4d6#Aqq'
        str_5 = '2^009(l}'
        list_0 = [str_1, str_4, str_5]
        iterable_0 = None
        str_6 = module_0.table(*list_0, items=iterable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = 'OEX>hsk"MI>'
        bool_1 = module_0.is_public_family(str_0)
        ann_assign_0 = None
        str_1 = None
        dict_0 = {str_0: str_1}
        parser_0 = module_0.Parser(bool_0, dict_0)
        parser_0.globals(str_0, ann_assign_0)
        attribute_0 = None
        resolver_0 = module_0.Resolver(str_1, dict_0)
        a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ':w{,'
        expr_0 = module_1.expr()
        list_0 = [str_0, expr_0, str_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        dict_0 = {}
        str_1 = 'z~YVBp3\x0bG('
        set_0 = {str_1, str_1}
        dict_1 = {str_0: set_0, str_0: set_0, str_0: set_0}
        parser_0 = module_0.Parser(dict_0, dict_0, dict_1)
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ' async '
        str_1 = 'UC:!PZvf'
        str_2 = None
        str_3 = '|_}'
        dict_0 = {str_2: str_3}
        parser_0 = module_0.Parser(dict_0)
        parser_0.parse(str_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'wDxA'
        list_0 = [str_0, str_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        bool_0 = False
        parser_0 = module_0.Parser(bool_0)
        var_0 = parser_0.__post_init__()
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_5():
    try:
        expr_0 = module_1.expr()
        str_0 = ''
        import_0 = module_1.Import()
        dict_0 = {}
        parser_0 = module_0.Parser(dict_0)
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ':KQ'
        str_1 = module_0.doctest(str_0)
        str_2 = ''
        int_0 = -614
        dict_0 = {str_2: int_0}
        parser_0 = module_0.Parser(dict_0)
        str_3 = 'store_true'
        str_4 = module_0.doctest(str_3)
        str_5 = '7Z[<Q'
        str_6 = 'ih^R#\t4X03dOHOE'
        str_7 = '3\r%Kc-q1%cs\th'
        dict_1 = {str_6: int_0, str_7: str_0, str_1: parser_0}
        class_def_0 = module_1.ClassDef(**dict_1)
        parser_0.api(str_5, class_def_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0]
        ann_assign_0 = module_1.AnnAssign(*list_0)
        str_1 = 'F#n~/31ey`]|%\td|;O'
        bool_0 = False
        dict_0 = {str_1: str_1, str_1: str_1}
        str_2 = '-&x1{Wx-2qYYgDpkBhy'
        str_3 = "'D"
        arguments_0 = module_1.arguments(*list_0)
        import_from_0 = module_1.ImportFrom()
        bool_1 = None
        int_0 = 2482
        str_4 = 'fDV$V4jsC3y[UU'
        int_1 = -1763
        str_5 = 'x|m~~\'Igh4",$oK'
        int_2 = -1498
        dict_1 = {str_2: int_0, str_4: int_1, str_5: int_1, str_5: int_2}
        parser_0 = module_0.Parser(bool_0, int_0, dict_1, dict_0, dict_0)
        parser_0.func_api(str_5, str_3, arguments_0, import_from_0, has_self=bool_1, cls_method=bool_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'y'
        dict_0 = {str_0: str_0}
        arguments_0 = module_1.arguments(**dict_0)
        expr_0 = module_1.expr()
        bool_0 = False
        int_0 = -703
        str_1 = 'UpKyW*'
        dict_1 = {str_1: str_1}
        parser_0 = module_0.Parser(int_0, dict_1)
        parser_0.func_api(str_0, str_0, arguments_0, expr_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ':w{,'
        expr_0 = module_1.expr()
        list_0 = [expr_0, expr_0, expr_0, expr_0]
        tuple_0 = ()
        import_0 = None
        list_1 = [tuple_0, import_0, str_0]
        bool_0 = True
        str_1 = '\\^t3C!:9nDGymQWy'
        str_2 = 'b]2H_?99:O'
        str_3 = '`M\\Y-`v"1|!P'
        str_4 = 'typing.KeysView'
        str_5 = '5u%xP\x0b6s(%6 M'
        dict_0 = {str_1: str_2, str_3: str_4, str_4: str_3, str_3: str_5}
        str_6 = 'frozenset'
        dict_1 = {str_6: str_3}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_1)
        parser_0.class_api(str_0, str_0, list_0, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'S'
        bool_0 = True
        int_0 = -1608
        parser_0 = module_0.Parser(bool_0, int_0)
        parser_0.parse(str_0, str_0)
        parser_1 = module_0.Parser()
        bool_1 = False
        arguments_0 = module_1.arguments()
        str_1 = 'UK'
        module_x_var_0 = None
        parser_0.load_docstring(str_0, module_x_var_0)
        list_0 = [str_1, bool_1]
        import_0 = module_1.Import(*list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '1VJ\n3}!D+ZPV5g{g'
        bool_0 = False
        str_1 = ''
        int_0 = None
        dict_0 = {str_1: int_0, str_1: int_0}
        parser_0 = module_0.Parser(bool_0, dict_0)
        bool_1 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'O[\rIoV}&d\\&nn9^/IS'
        int_0 = 3
        str_1 = 'lYM~-{XO2dQor'
        async_function_def_0 = module_1.AsyncFunctionDef()
        str_2 = 'Parser'
        str_3 = 'uoyBr!eOfr'
        set_0 = {str_3, str_3}
        str_4 = '"TG\rc2%HGT@9'
        dict_0 = {str_2: set_0, str_1: set_0, str_4: set_0}
        str_5 = 'collections.abc.ValuesView'
        str_6 = 'kh'
        str_7 = 'U)bI(TP \n0>'
        str_8 = 'U IU{$Kw@'
        dict_1 = {str_5: str_2, str_6: str_4, str_7: str_1, str_8: str_0}
        parser_0 = module_0.Parser(int_0, dict_0, dict_1)
        parser_0.api(str_1, async_function_def_0, prefix=str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ':KJQ'
        str_1 = module_0.doctest(str_0)
        str_2 = ''
        int_0 = -614
        dict_0 = {str_2: int_0}
        bool_0 = False
        str_3 = 'Xe8&<NO+I'
        str_4 = '+i\taU{W\x0cnHG3]W]8H{Y'
        dict_1 = {str_3: str_4, str_1: str_4}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_1, dict_1, dict_1)
        str_5 = parser_0.compile()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'a1P@'
        dict_0 = {}
        list_0 = [str_0]
        constant_0 = module_1.Constant(*list_0)
        str_1 = '5g\x0c0!1pP'
        str_2 = "]\x0bBH(bH7`+\x0bcuN9]H4'"
        str_3 = '\t9rT/~gD5$$<\x0c'
        str_4 = '<C%R ,o\x0bDI}X( '
        dict_1 = {str_2: str_3, str_4: str_2, str_1: str_3}
        str_5 = '5{_6HqG}HFwpEd'
        resolver_0 = module_0.Resolver(str_1, dict_1, str_5)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        parser_0 = module_0.Parser(dict_0)
        bool_0 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ':KJQ'
        str_1 = module_0.doctest(str_0)
        str_2 = ''
        int_0 = -614
        dict_0 = {str_2: int_0}
        str_3 = module_0.code(str_2)
        bool_0 = False
        str_4 = 'Xe8&<NO+I'
        str_5 = '+i\taU{W\x0cnHG3]W]8H{Y'
        dict_1 = {str_4: str_5, str_1: str_5}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_1, dict_1, dict_1)
        str_6 = parser_0.compile()
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        parser_0 = module_0.Parser(bool_0)
        str_0 = parser_0.compile()
        str_1 = 'S'
        str_2 = '\t>KZR'
        float_0 = 365.1
        str_3 = '<w!fqn}l.av'
        dict_0 = {str_2: float_0, str_3: str_0}
        expr_0 = module_1.expr(**dict_0)
        str_4 = module_0.const_type(expr_0)
        bool_1 = True
        int_0 = -1608
        parser_1 = module_0.Parser(bool_1, int_0)
        parser_1.parse(str_1, str_1)
        parser_2 = module_0.Parser()
        bool_2 = False
        arguments_0 = module_1.arguments()
        parser_1.parse(str_0, str_1)
        module_x_var_0 = None
        parser_1.load_docstring(str_1, module_x_var_0)
        list_0 = [str_4, bool_2]
        import_0 = module_1.Import(*list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        list_0 = [bool_0]
        constant_0 = module_1.Constant(*list_0)
        str_0 = ' I'
        str_1 = 'set'
        str_2 = None
        str_3 = '%(log_color)s%(message)s'
        dict_0 = {str_1: str_0, str_2: str_3}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        bool_1 = False
        str_4 = None
        int_0 = 8
        dict_1 = {str_4: int_0}
        str_5 = 'SCRo;EP7'
        str_6 = '\n'
        str_7 = "]>Wf3],Tb'y"
        str_8 = ''
        dict_2 = {str_4: str_5, str_6: str_7, str_8: str_5, str_5: str_8}
        str_9 = ')IR\x0c'
        set_0 = None
        dict_3 = {str_9: set_0, str_9: set_0, str_7: set_0, str_7: set_0}
        parser_0 = module_0.Parser(bool_1, dict_1, dict_2, dict_2, dict_3)
        bool_2 = parser_0.is_public(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = False
        parser_0 = module_0.Parser(bool_0)
        str_0 = parser_0.compile()
        str_1 = 'S'
        str_2 = ''
        str_3 = ''
        list_0 = [str_0, str_1]
        arguments_0 = module_1.arguments(*list_0)
        expr_0 = module_1.expr()
        parser_0.func_api(str_2, str_3, arguments_0, expr_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        attribute_0 = module_1.Attribute()
        str_0 = 'zmk1Y$5wpfP55'
        str_1 = 'typing.Iterable'
        str_2 = 'V '
        list_0 = []
        str_3 = 'idOb'
        str_4 = None
        list_1 = [str_3, str_4, str_1]
        constant_0 = module_1.Constant()
        list_2 = [attribute_0, attribute_0]
        subscript_0 = module_1.Subscript(*list_2)
        str_5 = 'd+Wu\r%qC>&?r5^/'
        str_6 = 'Js\nYDmzUE\x0c_I/{h;c'
        str_7 = ''
        dict_0 = {str_6: str_1, str_0: str_7}
        resolver_0 = module_0.Resolver(str_5, dict_0)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
        str_8 = '|L@FK*:^;x_h b"'
        str_9 = module_0.code(str_8)
        list_3 = [list_1, constant_0, a_s_t_0, attribute_0]
        bool_0 = True
        int_0 = 1152
        set_0 = {str_1, str_0}
        str_10 = 'LRqDw]k)*'
        dict_1 = {str_0: set_0, str_10: set_0, str_4: set_0}
        str_11 = '|6'
        str_12 = 'y1'
        str_13 = '_yL%v08%!q]2*1o'
        str_14 = 'U~$\\E9*"2;eP)7/'
        dict_2 = {str_11: str_2, str_12: str_12, str_13: str_14}
        parser_0 = module_0.Parser(bool_0, int_0, bool_0, dict_1, dict_2, dict_2)
        parser_0.class_api(str_1, str_2, list_0, list_3)
        iterable_0 = None
        str_15 = module_0.table(items=iterable_0)
    except BaseException:
        pass

def test_case_20():
    try:
        attribute_0 = module_1.Attribute()
        str_0 = 'zmk1Y$5wpfP55'
        str_1 = 'typing.Iterable'
        str_2 = 'V '
        str_3 = None
        constant_0 = module_1.Constant()
        list_0 = [attribute_0, attribute_0]
        subscript_0 = module_1.Subscript(*list_0)
        str_4 = 'd+Wu\r%qC>&?r5^/'
        str_5 = 'Js\nYDmzUE\x0c_I/{h;c'
        str_6 = ''
        dict_0 = {str_5: str_1, str_0: str_6}
        resolver_0 = module_0.Resolver(str_4, dict_0)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
        str_7 = '|L@FK*:^;x_h b"'
        str_8 = module_0.code(str_7)
        bool_0 = True
        int_0 = 1152
        set_0 = {str_1, str_0}
        str_9 = 'LRqDw]k)*'
        dict_1 = {str_0: set_0, str_9: set_0, str_3: set_0}
        str_10 = '|6'
        str_11 = 'y1'
        str_12 = '_yL%v08%!q]2*1o'
        str_13 = 'U~$\\E9*"2;eP)7/'
        dict_2 = {str_10: str_2, str_11: str_11, str_12: str_13}
        parser_0 = module_0.Parser(bool_0, int_0, bool_0, dict_1, dict_2, dict_2)
        iterable_0 = None
        str_14 = '#+P7'
        str_15 = '8cX^"_'
        str_16 = None
        list_1 = [str_2, str_14, str_15, str_16]
        str_17 = module_0.table(*list_1, items=iterable_0)
    except BaseException:
        pass

def test_case_21():
    try:
        name_0 = module_1.Name()
        str_0 = '!A'
        int_0 = -2429
        str_1 = 'qZNX'
        str_2 = '\r,'
        int_1 = 4872
        str_3 = 'N('
        int_2 = -3821
        dict_0 = {str_0: int_0, str_1: int_0, str_2: int_1, str_3: int_2}
        list_0 = [name_0, name_0, dict_0]
        str_4 = 'Mi>]`*Ga~-_\nR_AcI'
        dict_1 = {str_2: dict_0, str_4: int_2}
        subscript_0 = module_1.Subscript(*list_0, **dict_1)
        str_5 = '{:'
        str_6 = "89W2I?W/s75s>J]1'Q@"
        str_7 = "]w-i5UU\x0bi#r',Q3!o;"
        str_8 = None
        str_9 = '\n05b]5{9(q2N'
        dict_2 = {str_5: str_5, str_6: str_7, str_5: str_8, str_8: str_9}
        resolver_0 = module_0.Resolver(str_5, dict_2)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'V\\Oe'
        bool_0 = module_0.is_magic(str_0)
        list_0 = [str_0, str_0, bool_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        str_1 = None
        int_0 = -704
        bool_1 = False
        str_2 = 'v2u0FE!+j-\t3\\{$'
        str_3 = "\x0bD39/K6a'-y{3I*"
        int_1 = None
        dict_0 = {str_2: int_0, str_3: int_1}
        str_4 = "';k2;T\x0c^~$7ci\x0c+z22"
        str_5 = 'F'
        dict_1 = {str_4: str_5}
        parser_0 = module_0.Parser(bool_0, int_0, bool_1, dict_0, dict_1)
        parser_0.api(str_0, function_def_0, prefix=str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = False
        parser_0 = module_0.Parser(bool_0)
        str_0 = parser_0.compile()
        str_1 = module_0.doctest(str_0)
        list_0 = []
        import_0 = module_1.Import()
        str_2 = '__'
        dict_0 = {}
        assign_0 = module_1.Assign(**dict_0)
        list_1 = [import_0, bool_0, assign_0, assign_0]
        ann_assign_0 = module_1.AnnAssign(*list_1, **dict_0)
        parser_0.globals(str_2, ann_assign_0)
        class_def_0 = module_1.ClassDef()
        list_2 = [import_0, class_def_0]
        parser_0.class_api(str_0, str_0, list_0, list_2)
        float_0 = 365.1
        dict_1 = {str_1: float_0, str_1: float_0, str_1: str_0, str_0: str_0, str_1: bool_0}
        bool_1 = module_0.is_public_family(str_0)
        str_3 = module_0.code(str_2)
        str_4 = module_0.esc_underscore(str_3)
        expr_0 = module_1.expr(**dict_1)
        str_5 = module_0.const_type(expr_0)
        int_0 = -1613
        parser_1 = module_0.Parser(bool_0, int_0)
        parser_1.parse(str_2, str_2)
        module_x_var_0 = None
        parser_1.load_docstring(str_0, module_x_var_0)
        parser_1.imports(str_0, import_0)
    except BaseException:
        pass