# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n    This function calculates the sum of two numbers\n\n    Parameters\n    ----------\n    x : int\n        The first number\n    y : float, optional\n        The second number. Defaults to 0.\n\n    Returns\n    -------\n    int\n        Sum of the two numbers\n\n    See Also\n    --------\n    sum : Computes the sum of all the numbers passed in arguments\n\n    Examples\n    --------\n    >>> sum2(3, 99)\n    102\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_3():
    str_0 = '\n    This function calculates the sum of two numbers\n\n    Parameters\n    ----------\n    x : int\n        The first number\n    y : float, optional\n        The second number. Defaults to 0.\n\n    Returns\n    -------\n    int\n        Sum of the two numbers\n\n    See Also\n    --------\n    sum : Computes the sum of all the numbers passed in arguments\n\n    Examples\n    --------\n    >>> sum2(3, 99)\n    102\n    '
    docstring_0 = module_0.parse(str_0)
    section_0 = module_0.Section(str_0, str_0)
    numpydoc_parser_0 = module_0.NumpydocParser()
    var_0 = numpydoc_parser_0.add_section(section_0)

def test_case_4():
    str_0 = '[a, , c]\n\nParameters\n----------\nd : int\n    X coort.\n\nRaises\n------\nVaueError\n    If x is not divisible by 2\nm\nReturns\n-------\nNone i x is divisible b 2, else 0'
    docstring_0 = module_0.parse(str_0)
    str_1 = None
    docstring_1 = module_0.parse(str_1)

def test_case_5():
    str_0 = '\x0c-1j \x0cG\t7n|.'
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_6():
    str_0 = '[a, , c]\n\nParamebers\n----------\nd : int\n    X coort.\n\nRaiss\n------\nVaueErro\n    Ifx is not divisibGe by 2\nm \nReturns\n-------\nNone i x is divisible b 2, else 0'
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = "@\x0c=jf'QK"
    str_1 = '\\s*(.+?)\\s*\\(\\s*(.*[^\\s]+)\\s*\\)'
    raises_section_0 = module_0.RaisesSection(str_0, str_1)
    str_2 = ' '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_2)
    str_3 = 'exception'
    str_4 = 'warnings'
    deprecation_section_0 = module_0.DeprecationSection(str_4, str_3)
    section_0 = module_0.Section(str_2, str_1)
    iterable_0 = section_0.parse(str_2)
    str_5 = '.*/=2\x0cxCO\nO| Zj&ve6Y'
    k_v_section_0 = module_0._KVSection(str_3, str_5)
    str_6 = '|'
    docstring_1 = module_0.parse(str_6)
    dict_0 = None
    iterable_1 = k_v_section_0.parse(str_5)
    numpydoc_parser_1 = module_0.NumpydocParser()
    numpydoc_parser_2 = module_0.NumpydocParser(dict_0)

def test_case_8():
    str_0 = 'deprecated'
    str_1 = 'deprecation'
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_1)
    str_2 = 'deprecated:: 0.1.0 \n   description'
    iterable_0 = deprecation_section_0.parse(str_2)
    var_0 = next(iterable_0)

def test_case_9():
    str_0 = 'Title'
    str_1 = 'key'
    k_v_section_0 = module_0._KVSection(str_0, str_1)
    str_2 = 'key\n    value\n'
    iterable_0 = k_v_section_0.parse(str_2)
    var_0 = None
    var_1 = next(iterable_0, var_0)

def test_case_10():
    str_0 = '[a, , c]\n\nParameters\n----------\nd : int\n    X coord.\n\nRaises\n------\nVaueError\n    If x is not divisible by 2\nm   \nReturns\n-------\nNone if x is divisible by 2, else 0'
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = '[, , c]\n\nParameters\n----------\nd : int\n    X coort.\n\nRaises\n-----\nVaueError\n    If x is not divisible by 2\nm  \nReturns\n-------\nNone i x is divisible b 2, else 0'
    docstring_0 = module_0.parse(str_0)

def test_case_12():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '[a, b, c]|\nParameters\n----------\nx : int\n    X coord.'
    raises_section_0 = module_0.RaisesSection(str_0, str_0)
    docstring_0 = module_0.parse(str_0)
    str_1 = '\\TVt2Kqxi'
    docstring_1 = numpydoc_parser_0.parse(str_1)