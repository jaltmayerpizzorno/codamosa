# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = 1759
    list_0 = []
    node_0 = module_0.Node(int_0, list_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    iterator_0 = negated_pattern_0.generate_matches(node_2)

def test_case_2():
    int_0 = 29
    str_0 = 'Nl7o#H;:V\x0c^8'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_3():
    int_0 = 25
    str_0 = 'Nl7o#H;:V\x0c^8'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern()
    leaf_1 = leaf_0.clone()

def test_case_4():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_5():
    int_0 = 33
    str_0 = 'utf-8-sig'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_6():
    var_0 = []
    int_0 = 256
    node_pattern_0 = module_0.NodePattern(int_0, var_0)

def test_case_7():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_8():
    int_0 = 33
    str_0 = "T-'Z] P5Y"
    negated_pattern_0 = module_0.NegatedPattern()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    str_1 = 'utf-8-sig'
    grammar_0 = module_1.Grammar()
    list_0 = [grammar_0]
    leaf_0 = module_0.Leaf(int_0, str_0)
    list_1 = [leaf_0]
    int_1 = 1813
    node_0 = module_0.Node(int_1, list_1, negated_pattern_0, str_1, list_0)

def test_case_9():
    str_0 = 'bare_name'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_10():
    int_0 = 33
    str_0 = 'h=x7+>0'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_11():
    str_0 = 'bare_name'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_12():
    int_0 = 33
    str_0 = "2/'J A$;8mi]"
    negated_pattern_0 = module_0.NegatedPattern()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_13():
    str_0 = 'q'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)

def test_case_14():
    str_0 = 'P9b'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)

def test_case_15():
    int_0 = 33
    str_0 = 'P9b'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    tuple_0 = (int_0, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    var_0 = leaf_pattern_0.match(leaf_0)
    int_1 = 2772
    str_1 = leaf_0.__repr__()
    int_2 = -1541
    list_0 = [leaf_0]
    node_0 = module_0.Node(int_1, list_0, any_0)
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)
    node_1 = node_0.clone()
    node_1.update_sibling_maps()
    node_0.insert_child(int_2, leaf_0)
    node_0.append_child(node_0)
    int_3 = 796
    iterator_0 = node_1.post_order()
    wildcard_pattern_1 = module_0.WildcardPattern(str_1, int_3)
    leaf_1 = leaf_0.clone()
    grammar_0 = module_1.Grammar()
    tuple_2 = (int_1, str_0, tuple_1, list_0)
    var_1 = module_0.convert(grammar_0, tuple_2)

def test_case_16():
    int_0 = 255
    str_0 = 'a_value'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.post_order()
    var_0 = list(iterator_0)

def test_case_17():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 0
    iterator_0 = leaf_0.pre_order()
    var_0 = list(iterator_0)[int_1]