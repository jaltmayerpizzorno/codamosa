# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1
import os as module_2

def test_case_0():
    try:
        int_0 = 1560
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -3041
        str_0 = 'unindent does not match any outer indentation level'
        leaf_0 = module_0.Leaf(int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_3():
    try:
        node_0 = None
        int_0 = 1960
        list_0 = []
        node_1 = module_0.Node(int_0, list_0)
        node_1.append_child(node_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1771
        list_0 = []
        list_1 = [list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_2.clone()
        str_0 = node_3.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 13
        str_0 = 'Ot8'
        str_1 = '2ju5:-P{CK<C(_!X'
        leaf_0 = module_0.Leaf(int_0, str_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -2635
        str_0 = 'e,G?.`D{%k_"1tfIho'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        tuple_2 = (int_0, int_0, tuple_1, int_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 2284
        optional_0 = None
        list_0 = [int_0, optional_0]
        none_type_0 = None
        tuple_0 = (int_0, optional_0, list_0, none_type_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_9():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1478
        wildcard_pattern_0 = module_0.WildcardPattern(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -673
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = []
        int_0 = -2106
        node_pattern_0 = module_0.NodePattern(int_0, var_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 30
        str_0 = 'X'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = 'Nl7o#H;:V\x0c^8'
        str_2 = leaf_0.__str__()
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0, str_1)
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -1114
        str_0 = 'Aq'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 1771
        list_0 = []
        list_1 = [list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        str_0 = node_0.__str__()
        node_3 = node_2.clone()
        node_4 = node_3.clone()
        node_5 = node_4.clone()
        node_6 = node_5.clone()
        str_1 = 'v/S\thfF\t9*!MOPR'
        leaf_0 = module_0.Leaf(int_0, str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'f4OA8E^/p/\r<SdKB%o29'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 25
        str_0 = 'Nl7o#H;:V\x0c^8'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern()
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_1, leaf_1, leaf_1, leaf_0]
        bytes_0 = b'u\xb7\x9d\xd3b\x92@\xcf}v'
        node_0 = module_0.Node(int_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 256
        int_1 = 25
        str_0 = 'Nl7o#H;:V\x0c^T'
        leaf_0 = module_0.Leaf(int_1, str_0)
        grammar_0 = module_1.Grammar()
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'h=x7>0'
        negated_pattern_0 = module_0.NegatedPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = 2726
        list_0 = []
        int_1 = -2759
        node_0 = module_0.Node(int_0, list_0, int_1, str_0)
        str_1 = node_0.__repr__()
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 33
        str_0 = 'P9'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        leaf_0 = None
        var_0 = leaf_pattern_0.match(leaf_0)
        int_1 = 792
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_1)
        list_0 = []
        int_2 = 2362
        wildcard_pattern_2 = module_0.WildcardPattern(str_0, int_0, int_2, str_0)
        bool_0 = wildcard_pattern_2.match_seq(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 25
        list_0 = [int_0, int_0, int_0, int_0]
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(list_0)
        str_0 = 'Nl7o#H;:V\x0c^T'
        leaf_0 = module_0.Leaf(int_0, str_0)
        grammar_0 = module_1.Grammar()
        str_1 = leaf_0.__repr__()
        iterator_0 = leaf_0.leaves()
        str_2 = leaf_0.__str__()
        leaf_1 = leaf_0.clone()
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 256
        int_1 = 25
        str_0 = 'Nl7o#H;:V\x0c^8'
        leaf_0 = module_0.Leaf(int_1, str_0)
        grammar_0 = module_1.Grammar()
        str_1 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern()
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_1, leaf_1, leaf_1, leaf_0]
        bytes_0 = b'u\xb7\x9d\xd3b\x92@\xcf}v'
        node_0 = module_0.Node(int_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'r7>0'
        negated_pattern_0 = module_0.NegatedPattern()
        grammar_0 = module_1.Grammar()
        bool_0 = negated_pattern_0.match_seq(str_0, grammar_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        bool_1 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 25
        str_0 = 'Nl7o#H;:V\x0c^8'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0)
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 10
        str_0 = 'h!x7>'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        str_1 = None
        tuple_0 = (int_0, int_0)
        str_2 = 'UX:__BYa@^qYu)zN1+q}'
        tuple_1 = (str_1, tuple_0)
        list_0 = [tuple_0]
        leaf_0 = module_0.Leaf(int_0, str_2, tuple_1, str_2, list_0)
        leaf_1 = leaf_0.clone()
        bool_0 = wildcard_pattern_0.match(leaf_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'bare_name'
        negated_pattern_0 = module_0.NegatedPattern(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -2635
        str_0 = 'e,G?.`D{%k_"1tfIho'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        int_1 = None
        tuple_2 = (int_0, int_0, tuple_1, int_1)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'GW<CuV"'
        bool_0 = False
        dict_0 = {str_0: bool_0, str_0: bool_0}
        wildcard_pattern_0 = module_0.WildcardPattern(dict_0)
        any_0 = wildcard_pattern_0.optimize()
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_30():
    try:
        none_type_0 = None
        leaf_pattern_0 = module_0.LeafPattern(none_type_0)
        int_0 = 3855
        list_0 = []
        str_0 = '\x0b\t-mq\ncrX$['
        node_0 = module_0.Node(int_0, list_0, str_0, str_0)
        node_1 = node_0.clone()
        node_0.insert_child(int_0, node_1)
        str_1 = '8/O7CxJ8)~2n1w6"v/BP'
        leaf_0 = module_0.Leaf(int_0, str_1)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 1771
        list_0 = []
        list_1 = [list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_0.set_child(int_0, node_1)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 33
        str_0 = "2/'J A$;8mi]"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        grammar_0 = module_1.Grammar()
        bool_0 = wildcard_pattern_0.match(int_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'Nl7o#;:V\x0ceT'
        grammar_0 = module_1.Grammar()
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 58
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        bool_0 = False
        bool_1 = wildcard_pattern_0.match(bool_0, wildcard_pattern_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '\tsba\ne_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 59
        str_1 = "u[hM'%m;babO0G"
        leaf_0 = module_0.Leaf(int_0, str_1)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        leaf_3 = leaf_1.clone()
        int_1 = 1149
        list_0 = [leaf_2, leaf_0, leaf_1]
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_1)
        any_0 = wildcard_pattern_1.optimize()
        node_0 = module_0.Node(int_1, list_0, any_0)
        node_1 = node_0.clone()
        bool_0 = wildcard_pattern_0.match(node_1, int_1)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 1255
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 33
        str_0 = 'h=7+>'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        str_1 = '\x0bV'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_1)
        var_0 = leaf_pattern_0.match(leaf_0)
        int_1 = 2772
        any_1 = wildcard_pattern_0.optimize()
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_1)
        bool_0 = wildcard_pattern_0.match(leaf_pattern_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 33
        str_0 = '!>SDC8T*|btP*:|'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
        var_0 = leaf_pattern_0.match(leaf_0, leaf_0)
        var_1 = leaf_pattern_0.match(leaf_0)
        leaf_1 = leaf_0.clone()
        str_1 = leaf_0.__repr__()
        list_0 = []
        wildcard_pattern_1 = module_0.WildcardPattern(str_0)
        list_1 = [list_0, tuple_1, wildcard_pattern_0, leaf_0]
        path_like_0 = module_2.PathLike(*list_1)
    except BaseException:
        pass

def test_case_39():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -477
        str_0 = 'x4}Y{nN?o`[1L^<mQ]36'
        str_1 = '/Efu5QnH'
        var_0 = grammar_0.copy()
        int_1 = -176
        var_1 = grammar_0.copy()
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_1, tuple_0)
        dict_0 = {int_0: int_1}
        tuple_2 = (int_0, str_0, tuple_1, dict_0)
        var_2 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_40():
    try:
        list_0 = []
        list_1 = [list_0]
        wildcard_pattern_0 = module_0.WildcardPattern(list_1)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 33
        str_0 = 'P9b'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
        var_0 = leaf_pattern_0.match(leaf_0)
        int_1 = 2772
        str_1 = leaf_0.__repr__()
        list_0 = [leaf_0]
        node_0 = module_0.Node(int_1, list_0, any_0)
        dict_0 = {}
        bool_0 = wildcard_pattern_0.match_seq(dict_0)
        node_1 = node_0.clone()
        node_1.update_sibling_maps()
        int_2 = -2691
        wildcard_pattern_1 = module_0.WildcardPattern(str_1, int_2)
    except BaseException:
        pass

def test_case_42():
    try:
        leaf_0 = None
        list_0 = [leaf_0, leaf_0, leaf_0, leaf_0]
        set_0 = set()
        negated_pattern_0 = module_0.NegatedPattern()
        iterator_0 = negated_pattern_0.generate_matches(set_0)
        list_1 = []
        iterator_1 = module_0.generate_matches(list_1, list_0)
        grammar_0 = module_1.Grammar()
        int_0 = -312
        str_0 = '\rv%'
        str_1 = 'M=u>SXb!qfV90!(>b4'
        tuple_0 = (int_0, str_0, str_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = 33
        str_0 = 'P9b'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
        var_0 = leaf_pattern_0.match(leaf_0)
        int_1 = 2772
        str_1 = leaf_0.__repr__()
        list_0 = [leaf_0]
        node_0 = module_0.Node(int_1, list_0, any_0)
        dict_0 = {}
        bool_0 = wildcard_pattern_0.match_seq(dict_0)
        node_1 = node_0.clone()
        node_1.update_sibling_maps()
        any_1 = wildcard_pattern_0.optimize()
        int_2 = 796
        wildcard_pattern_1 = module_0.WildcardPattern(str_1, int_1, int_2)
    except BaseException:
        pass

def test_case_44():
    try:
        int_0 = 10
        str_0 = '1.0'
        var_0 = None
        var_1 = []
        leaf_0 = module_0.Leaf(int_0, str_0, var_0, var_0, var_1)
        iterator_0 = leaf_0.leaves()
        var_2 = next(iterator_0)
        var_3 = next(iterator_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'JCC"yC'
        none_type_0 = None
        node_pattern_0 = module_0.NodePattern(none_type_0, str_0)
    except BaseException:
        pass

def test_case_46():
    try:
        var_0 = []
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 256
        node_pattern_0 = module_0.NodePattern(int_0, var_0)
        str_0 = 'Ur'
        int_1 = 623
        list_0 = []
        node_0 = module_0.Node(int_1, list_0, str_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        iterator_0 = node_1.leaves()
        node_3 = node_2.clone()
        node_4 = node_2.clone()
        node_0.append_child(node_2)
        str_1 = node_0.__repr__()
    except BaseException:
        pass

def test_case_47():
    try:
        int_0 = 33
        str_0 = 'P9b'
        str_1 = None
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_1, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 916
        list_0 = []
        any_1 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_1, list_0, any_1, str_0)
        var_0 = leaf_pattern_0.match(node_0)
        tuple_0 = (int_0, int_0)
        grammar_0 = module_1.Grammar()
        optional_0 = None
        list_1 = None
        tuple_1 = (int_0, str_0, optional_0, list_1)
        var_1 = module_0.convert(grammar_0, tuple_1)
        tuple_2 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_2)
        var_2 = leaf_pattern_0.match(leaf_0)
        iterator_0 = leaf_0.leaves()
        var_3 = leaf_pattern_0.match(leaf_0, iterator_0)
    except BaseException:
        pass