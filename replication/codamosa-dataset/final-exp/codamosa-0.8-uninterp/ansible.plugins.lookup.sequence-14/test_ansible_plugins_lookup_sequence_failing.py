# Automatically generated by Pynguin.
import ansible.plugins.lookup.sequence as module_0

def test_case_0():
    try:
        bytes_0 = b'\x1dl2\x8d'
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.run(bytes_0, lookup_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ' '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        lookup_module_0 = module_0.LookupModule(**dict_0)
        var_0 = lookup_module_0.parse_kv_args(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'start=5'
        var_0 = lookup_module_0.run(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'start=5'
        str_1 = [str_0]
        var_0 = lookup_module_0.run(str_1, lookup_module_0)
    except BaseException:
        pass

def test_case_4():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'Coj\t8" .pr2{k!1?a\r'
        var_0 = lookup_module_0.run(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'l^4fOsV*\\*DE$\x0c,niN'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = 'ansible.utils.display.initialize_locale has not been called, this may result in incorrectly calculated text widths that can cause Display to print incorrect line lengths'
        str_2 = '0<ll<'
        bool_0 = True
        dict_1 = {str_1: str_1, str_1: dict_0}
        lookup_module_0 = module_0.LookupModule(**dict_1)
        var_0 = lookup_module_0.run(str_2, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'count'
        str_1 = 'stride'
        str_2 = 'start'
        str_3 = 'end'
        str_4 = 'format'
        str_5 = '3'
        str_6 = '1'
        str_7 = '0'
        str_8 = 'C'
        str_9 = '%d'
        str_10 = {str_0: str_5, str_1: str_6, str_2: str_7, str_3: str_8, str_4: str_9}
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(str_10)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = dict()
        lookup_module_0 = module_0.LookupModule()
        str_0 = '5a-1'
        int_0 = -3222
        list_0 = [str_0, int_0, int_0]
        str_1 = 'eBG#t['
        var_1 = lookup_module_0.generate_sequence()
        set_0 = {int_0, str_1}
        var_2 = lookup_module_0.run(list_0, set_0)
    except BaseException:
        pass