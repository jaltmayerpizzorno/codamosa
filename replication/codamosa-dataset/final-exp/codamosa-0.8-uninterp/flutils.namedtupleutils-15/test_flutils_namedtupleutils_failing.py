# Automatically generated by Pynguin.
import flutils.namedtupleutils as module_0
import types as module_1
import builtins as module_2
import collections as module_3
import collections.abc as module_4

def test_case_0():
    try:
        float_0 = 3278.565551
        var_0 = module_0.to_namedtuple(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 3278.565551
        list_0 = [float_0]
        var_0 = module_0.to_namedtuple(list_0)
        var_1 = module_0.to_namedtuple(list_0)
        var_2 = module_0.to_namedtuple(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '7f}9'
        var_0 = module_0.to_namedtuple(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x84\xcc\xb1x>=i\xc6O;\x1f\x8f\x1f\x0f\xf9\xac\x0b\x80\xb4'
        bytes_1 = b'z\xe9\xf8\r\x8d\xd8m\xffk\xb9\xbe\x1f{\xc9\x04\xdf\x94G\xe9'
        list_0 = [bytes_0, bytes_1, bytes_0]
        dict_0 = {bytes_0: list_0, bytes_0: list_0}
        set_0 = {bytes_1, bytes_1, bytes_1, bytes_0}
        tuple_0 = (list_0, dict_0, set_0)
        var_0 = module_0.to_namedtuple(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1055.35
        str_0 = 'zsek7Q\x0b'
        simple_namespace_0 = module_1.SimpleNamespace()
        var_0 = module_0.to_namedtuple(simple_namespace_0)
        tuple_0 = ()
        tuple_1 = (str_0, tuple_0, tuple_0)
        var_1 = module_0.to_namedtuple(simple_namespace_0)
        var_2 = module_0.to_namedtuple(tuple_1)
        list_0 = [str_0, var_2, str_0, str_0, tuple_0]
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_1 = [float_0, str_0, var_0, str_0, var_0, list_0, dict_0]
        var_3 = module_0.to_namedtuple(list_1)
        var_4 = module_0.to_namedtuple(simple_namespace_0)
        var_5 = module_0.to_namedtuple(simple_namespace_0)
        dict_1 = module_2.dict(**dict_0)
        var_6 = module_0.to_namedtuple(simple_namespace_0)
        var_7 = module_0.to_namedtuple(list_1)
        var_8 = module_0.to_namedtuple(dict_1)
        var_9 = module_0.to_namedtuple(simple_namespace_0)
        list_2 = [float_0, float_0, float_0, dict_0, var_3]
        var_10 = module_0.to_namedtuple(list_2)
        var_11 = module_0.to_namedtuple(simple_namespace_0)
        dict_2 = {float_0: float_0, float_0: float_0}
        list_3 = [dict_2, float_0, float_0, float_0]
        dict_3 = {}
        list_4 = [dict_3, list_3, list_3]
        simple_namespace_1 = module_1.SimpleNamespace(*list_4, **dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'a'
        ordered_dict_0 = module_3.OrderedDict()
        var_0 = module_0.to_namedtuple(ordered_dict_0)
        str_1 = 'b'
        int_0 = 1
        str_2 = 'CQF9L'
        dict_0 = {str_2: int_0, str_2: str_0, str_2: int_0}
        tuple_0 = (dict_0,)
        var_1 = module_0.to_namedtuple(tuple_0)
        int_1 = {str_0: int_0, str_1: int_0}
        var_2 = module_0.to_namedtuple(int_1)
        str_3 = 'VO>!^}Gif.h+'
        bool_0 = False
        list_0 = [str_0, int_0, var_2, bool_0]
        str_4 = '}x'
        dict_1 = {str_3: list_0, str_4: str_3}
        mapping_0 = module_4.Mapping(**dict_1)
    except BaseException:
        pass