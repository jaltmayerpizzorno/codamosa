# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    try:
        str_0 = None
        str_1 = module_0.esc_underscore(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'logger'
        str_1 = ';&\t4s.a\\f0'
        bool_0 = module_0.is_magic(str_1)
        str_2 = "M'f3{@k\\"
        str_3 = ',+Jg"b '
        dict_0 = {str_0: str_0, str_2: str_1, str_3: bool_0}
        constant_0 = module_1.Constant(**dict_0)
        str_4 = '[`l<m\x0b\n8hvL\x0bJH~'
        str_5 = 'B6Yj$g\r'
        str_6 = 'XJE\\NL3k\x0cP~@J\x0bW~">5'
        str_7 = '9\\s4a m"[\x0cx[.Vq{~9'
        dict_1 = {str_7: str_0, str_6: str_3, str_5: str_6, str_1: str_0, str_7: str_2, str_4: str_2}
        resolver_0 = module_0.Resolver(str_4, dict_1, str_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_2():
    try:
        import_from_0 = None
        list_0 = [import_from_0, import_from_0]
        name_0 = module_1.Name(*list_0)
        dict_0 = {}
        str_0 = 'H>iEIS5[qn'
        dict_1 = {str_0: str_0}
        parser_0 = module_0.Parser(dict_0, dict_1, dict_1)
        str_1 = 'og>Wzob'
        str_2 = 'Rg'
        str_3 = "%cLV5#o\x0bYzC'8dK"
        dict_2 = {str_1: str_2, str_2: str_3}
        resolver_0 = module_0.Resolver(str_1, dict_2)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        subscript_0 = module_1.Subscript()
        a_s_t_1 = resolver_0.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_3():
    try:
        subscript_0 = module_1.Subscript()
        str_0 = '\nF7DCIFs@JN`1 D/W_b&'
        dict_0 = {}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'MIb{?GGm]-faEo/'
        list_0 = [str_0]
        dict_0 = {str_0: str_0}
        parser_0 = module_0.Parser(dict_0)
        str_1 = module_0.esc_underscore(str_0)
        str_2 = parser_0.compile()
        import_0 = module_1.Import(*list_0)
        parser_0.imports(str_2, import_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'typing.TypeVar'
        list_0 = [str_0, str_0, str_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        dict_0 = {}
        dict_1 = {}
        parser_0 = module_0.Parser(dict_0, dict_1)
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '_Ib{?GGm]-faMEo/'
        list_0 = [str_0]
        dict_0 = {str_0: str_0}
        parser_0 = module_0.Parser(dict_0)
        assign_0 = module_1.Assign(*list_0)
        parser_0.globals(str_0, assign_0)
        expr_0 = module_1.expr(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        bool_1 = True
        str_0 = 'W!Fn6d;fGt!_d'
        dict_0 = {str_0: str_0}
        parser_0 = module_0.Parser(bool_0, bool_1, dict_0, dict_0, dict_0, dict_0)
        str_1 = '_/smA"{1O~\x0cZ'
        function_def_0 = module_1.FunctionDef()
        parser_0.api(str_1, function_def_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'eC~h'
        list_0 = [str_0, str_0, str_0, str_0]
        str_1 = 'vqMrr.*\t]WDUuGv$'
        async_function_def_0 = module_1.AsyncFunctionDef()
        dict_0 = {str_1: async_function_def_0}
        arguments_0 = module_1.arguments(*list_0, **dict_0)
        none_type_0 = None
        bool_0 = True
        bool_1 = False
        dict_1 = {}
        parser_0 = module_0.Parser(bool_1, dict_1)
        parser_0.func_api(str_0, str_0, arguments_0, none_type_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'uMH#\\-h'
        bool_0 = True
        dict_0 = {str_0: str_0}
        parser_0 = module_0.Parser(bool_0, bool_0, dict_0, dict_0, dict_0, dict_0)
        parser_0.parse(str_0, str_0)
        str_1 = module_0.parent(str_0)
        expr_0 = module_1.expr()
        list_0 = [expr_0, expr_0, expr_0]
        list_1 = None
        parser_0.class_api(str_0, str_0, list_0, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ']+'
        bool_0 = True
        str_1 = None
        str_2 = 'b+'
        dict_0 = {str_1: str_2}
        parser_0 = module_0.Parser(bool_0, bool_0, dict_0)
        bool_1 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'typing.TypeVar'
        list_0 = [str_0, str_0, str_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        dict_0 = {}
        dict_1 = {str_0: dict_0}
        async_function_def_0 = module_1.AsyncFunctionDef(**dict_1)
        str_1 = '(NTGF ;I:C(&WF'
        int_0 = 0
        str_2 = ']g'
        int_1 = 0
        str_3 = 'f0'
        dict_2 = {str_0: int_0, str_2: int_1, str_3: int_0}
        parser_0 = module_0.Parser(dict_2)
        parser_0.api(str_0, async_function_def_0, prefix=str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "T|'}"
        str_1 = '`!_Q<dm1yc;9{Ccjco'
        list_0 = [str_0]
        assign_0 = module_1.Assign(*list_0)
        bool_0 = True
        str_2 = 'a\\'
        str_3 = "/\t352NH ?'\rIyRWFGM"
        str_4 = '^^/_:/X'
        str_5 = "H'X%%S2ffQmo"
        dict_0 = {str_0: str_2, str_3: str_0, str_4: str_5}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
        parser_0.globals(str_1, assign_0)
        str_6 = 'D(E<ne\n/'
        import_from_0 = module_1.ImportFrom(*list_0)
        parser_0.imports(str_6, import_from_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '_Ib{?GGm]-faMEo/'
        list_0 = [str_0]
        ann_assign_0 = module_1.AnnAssign(*list_0)
        dict_0 = {str_0: str_0}
        parser_0 = module_0.Parser(dict_0)
        parser_0.globals(str_0, ann_assign_0)
        str_1 = 'e9S'
        parser_0.parse(str_0, str_1)
        expr_0 = module_1.expr()
        str_2 = parser_0.compile()
        assign_0 = module_1.Assign()
        list_1 = [expr_0, expr_0, expr_0]
        list_2 = None
        parser_0.class_api(str_2, str_0, list_1, list_2)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        str_0 = None
        str_1 = 'SC'
        str_2 = 'cn\n\x0bQ.F%$;#!x)O,h3'
        dict_0 = {str_2: str_1}
        resolver_0 = module_0.Resolver(str_1, dict_0, str_0)
        parser_0 = module_0.Parser(bool_0, dict_0)
        str_3 = 'DgfNP;\\=$Z~J\\3'
        str_4 = '}`'
        str_5 = 'bm'
        set_0 = {str_5, str_1}
        str_6 = '}\r%L\x0bPz*K#]w"a\x0c'
        str_7 = 't7('
        str_8 = 'T'
        set_1 = {str_4, str_7, str_8, str_1}
        str_9 = 'KPj'
        str_10 = 'F0.JX'
        set_2 = {str_10}
        dict_1 = {str_4: set_0, str_6: set_1, str_9: set_2}
        list_0 = [str_2, dict_1]
        dict_2 = {}
        import_from_0 = module_1.ImportFrom(*list_0, **dict_2)
        parser_0.imports(str_3, import_from_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'x'
        list_0 = [str_0]
        ann_assign_0 = module_1.AnnAssign(*list_0)
        dict_0 = {str_0: str_0}
        constant_0 = module_1.Constant(*list_0)
        resolver_0 = module_0.Resolver(str_0, dict_0, str_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        parser_0 = module_0.Parser(dict_0)
        parser_0.globals(str_0, ann_assign_0)
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = module_0.esc_underscore(str_0)
        str_2 = 'e9S'
        parser_0.parse(str_0, str_2)
        expr_0 = module_1.expr(**dict_1)
        expr_1 = module_1.expr()
        list_1 = [expr_1, expr_1, expr_0, expr_1]
        assign_0 = module_1.Assign()
        str_3 = 'y!a:ON;MLSVM'
        list_2 = [expr_0, dict_1, assign_0, dict_1]
        name_0 = module_1.Name(*list_0, **dict_1)
        resolver_1 = module_0.Resolver(str_0, dict_0)
        a_s_t_1 = resolver_1.visit_Name(name_0)
        str_4 = 'Fc)Pq%9-jFf\n01ko~,'
        list_3 = [str_3, str_0, str_4, str_3]
        list_4 = [list_2, list_3]
        parser_0.class_api(str_2, str_1, list_1, list_4)
        assign_1 = module_1.Assign(*list_0)
        import_0 = module_1.Import()
        parser_0.imports(str_2, import_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'MIb{?GGm]-faEo/'
        list_0 = [str_0]
        bool_0 = module_0.is_public_family(str_0)
        sequence_0 = None
        iterator_0 = module_0.walk_body(sequence_0)
        ann_assign_0 = module_1.AnnAssign(*list_0)
        dict_0 = {str_0: str_0}
        parser_0 = module_0.Parser(dict_0)
        parser_0.globals(str_0, ann_assign_0)
        str_1 = module_0.esc_underscore(str_0)
        str_2 = ' >VJ*'
        dict_1 = {str_2: iterator_0}
        function_def_0 = module_1.FunctionDef(*list_0, **dict_1)
        str_3 = 'Yq!z9L6{/p\x0cW'
        parser_0.api(str_0, function_def_0, prefix=str_3)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        parser_0 = module_0.Parser(bool_0)
        str_0 = 'uLtDc'
        var_0 = parser_0.__post_init__()
        list_0 = []
        stmt_0 = None
        list_1 = [stmt_0]
        parser_0.class_api(str_0, str_0, list_0, list_1)
        str_1 = 'C@fYM|(`fr1*'
        list_2 = [stmt_0, list_1]
        arguments_0 = module_1.arguments(*list_2)
        import_0 = module_1.Import()
        bool_1 = False
        parser_0.func_api(str_1, str_0, arguments_0, import_0, has_self=bool_1, cls_method=bool_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '@'
        str_1 = 'MIb{?GGm]-faEo/'
        dict_0 = {str_0: str_0}
        int_0 = 89
        str_2 = 'gL'
        list_0 = [str_0, str_1, dict_0]
        dict_1 = {str_1: int_0, str_1: list_0, str_2: list_0}
        assign_0 = module_1.Assign(*list_0, **dict_1)
        parser_0 = module_0.Parser(dict_0)
        parser_0.globals(str_2, assign_0)
        str_3 = module_0.esc_underscore(str_0)
        parser_0.parse(str_0, str_0)
    except BaseException:
        pass