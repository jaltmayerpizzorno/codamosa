# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = None
    either_0 = module_0.Either(var_0)

def test_case_2():
    object_0 = module_1.object()
    bool_0 = True
    list_0 = [bool_0]
    either_0 = module_0.Either(list_0)
    bool_1 = either_0.__eq__(object_0)

def test_case_3():
    str_0 = None
    str_1 = 'u<M \x0bT"aOiP(\n$_y'
    dict_0 = {str_0: str_0, str_1: str_1}
    str_2 = 'l0[,VJUX=&ue'
    right_0 = module_0.Right(str_2)
    bool_0 = right_0.is_left()
    list_0 = [dict_0, str_1, dict_0, str_0]
    either_0 = module_0.Either(list_0)
    var_0 = either_0.to_try()

def test_case_4():
    list_0 = []
    either_0 = module_0.Either(list_0)
    var_0 = either_0.to_lazy()
    var_1 = either_0.is_right()

def test_case_5():
    dict_0 = None
    left_0 = module_0.Left(dict_0)
    bool_0 = True
    left_1 = module_0.Left(bool_0)
    var_0 = left_1.map(left_0)

def test_case_6():
    object_0 = module_1.object()
    int_0 = 1675
    var_0 = None
    left_0 = module_0.Left(var_0)
    either_0 = module_0.Either(int_0)
    bool_0 = False
    left_1 = module_0.Left(bool_0)
    var_1 = either_0.to_lazy()
    bool_1 = left_1.is_left()
    bool_2 = either_0.__eq__(object_0)
    either_1 = module_0.Either(var_0)
    bool_3 = False
    var_2 = left_1.map(bool_3)
    left_2 = module_0.Left(var_0)

def test_case_7():
    var_0 = None
    either_0 = module_0.Either(var_0)
    object_0 = module_1.object()
    right_0 = module_0.Right(var_0)
    tuple_0 = (either_0, object_0, right_0)
    right_1 = module_0.Right(tuple_0)
    bool_0 = right_1.is_right()
    int_0 = -1914
    right_2 = module_0.Right(int_0)
    var_1 = right_2.to_validation()
    bytes_0 = b'\xc4\x86\xdb\x1a\xd6\xeb\x13\x13\x97\xae\xf52Q\xb1\x15K^F.'
    left_0 = module_0.Left(bytes_0)
    bool_1 = left_0.is_right()
    object_1 = module_1.object()
    either_1 = module_0.Either(object_1)

def test_case_8():
    object_0 = None
    bool_0 = False
    int_0 = 2398
    right_0 = module_0.Right(int_0)
    left_0 = module_0.Left(right_0)
    var_0 = left_0.to_maybe()
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    either_0 = module_0.Either(list_0)
    var_1 = either_0.is_right()
    bool_1 = either_0.__eq__(object_0)

def test_case_9():
    bytes_0 = b'5Y9KH\x93\xff8\x1b'
    str_0 = 'NasrU|'
    list_0 = [str_0]
    right_0 = module_0.Right(list_0)
    var_0 = right_0.to_validation()
    either_0 = module_0.Either(str_0)
    bool_0 = right_0.is_right()
    var_1 = either_0.is_right()
    var_2 = either_0.to_lazy()
    bool_1 = right_0.is_left()
    left_0 = module_0.Left(bytes_0)

def test_case_10():
    var_0 = lambda arg: arg + arg
    var_1 = lambda arg: arg + arg
    int_0 = 1
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    bool_0 = left_0.__eq__(left_1)
    callable_0 = None
    var_2 = left_0.map(callable_0)
    left_2 = module_0.Left(var_2)
    list_0 = [int_0]
    left_3 = module_0.Left(list_0)
    var_3 = None
    right_0 = module_0.Right(var_3)
    right_1 = module_0.Right(var_3)

def test_case_11():
    var_0 = lambda arg: arg + arg
    var_1 = lambda arg: arg + arg
    int_0 = 1
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    bool_0 = left_0.__eq__(left_1)
    left_2 = module_0.Left(int_0)
    int_1 = 2
    left_3 = module_0.Left(int_1)
    bool_1 = left_2.__eq__(left_3)
    left_4 = module_0.Left(int_0)
    right_0 = module_0.Right(int_0)
    bool_2 = left_4.__eq__(right_0)
    var_2 = None
    left_5 = module_0.Left(var_2)
    right_1 = module_0.Right(var_2)
    right_2 = module_0.Right(var_2)