# Automatically generated by Pynguin.
import pysnooper.utils as module_0

def test_case_0():
    try:
        float_0 = 1435.148
        var_0 = module_0.shitcode(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        var_0 = module_0.get_repr_function(bool_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        bool_0 = True
        str_1 = '.@?ogUjfi3.+'
        dict_0 = {str_0: bool_0, str_0: bool_0, str_1: str_0, str_0: str_1}
        var_0 = module_0.normalize_repr(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        set_0 = set()
        var_0 = module_0.shitcode(set_0)
        var_1 = module_0.get_shortish_repr(set_0)
        list_0 = [set_0]
        str_1 = 'uJ_1VWpYLw~c'
        tuple_0 = None
        bytes_0 = None
        var_2 = module_0.truncate(tuple_0, bytes_0)
        dict_0 = {str_0: str_1, str_1: var_1}
        tuple_1 = (dict_0, str_1, list_0, str_1)
        var_3 = module_0.get_shortish_repr(str_1, tuple_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "W7lR@fyV!#%\nX\x0b(gz;'9"
        tuple_0 = ()
        var_0 = module_0.truncate(str_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = None
        var_1 = type(var_0)
        str_0 = 'fish'
        var_2 = (var_1, var_1)
        var_3 = (var_2,)
        list_0 = [str_0]
        var_4 = module_0.ensure_tuple(list_0)
        var_5 = module_0.get_repr_function(var_0, var_3)
        var_6 = lambda x: str_0
        var_7 = (var_0,)
        var_8 = module_0.get_repr_function(var_0, var_7)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 641.6215
        str_0 = '(N'
        var_0 = module_0.normalize_repr(str_0)
        var_1 = module_0.ensure_tuple(float_0)
        dict_0 = None
        writable_stream_0 = module_0.WritableStream(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'xU;Vd2WaveQu!NaPv4 _'
        var_0 = module_0.shitcode(str_0)
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = None
        var_1 = type(var_0)
        str_0 = '{indent}Source path:... {source_path}'
        var_2 = module_0.ensure_tuple(str_0)
        var_3 = (var_1, var_1)
        var_4 = (var_3,)
        var_5 = module_0.get_repr_function(var_0, var_4)
        var_6 = lambda x: var_1
        dict_0 = None
        list_0 = [var_3, str_0, str_0, var_5]
        var_7 = module_0.get_shortish_repr(dict_0, list_0)
        list_1 = [var_1, var_0, str_0, var_2]
        writable_stream_0 = module_0.WritableStream(*list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Hu\nVs<7\tG>r*k_L'
        bool_0 = True
        var_0 = module_0.truncate(str_0, bool_0)
        set_0 = set()
        var_1 = module_0.shitcode(set_0)
        var_2 = module_0.get_shortish_repr(set_0)
        list_0 = [set_0]
        str_1 = 'uJ_1VWpYLw~c'
        str_2 = "HT'"
        dict_0 = {str_0: str_1, str_2: var_2}
        str_3 = 'M\nUe~P*b'
        str_4 = '/g=D7>6~t.@br=\x0biy@%'
        tuple_0 = (dict_0, str_3, list_0, str_4)
        var_3 = module_0.get_shortish_repr(str_1, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = None
        var_1 = type(var_0)
        str_0 = 'fish'
        var_2 = lambda x: str_0
        var_3 = (var_1, var_2)
        var_4 = (var_3,)
        var_5 = module_0.get_repr_function(var_0, var_4)
        var_6 = lambda x: str_0
        var_7 = (var_0, var_6)
        var_8 = (var_7,)
        list_0 = [var_2, var_4, var_5]
        float_0 = 809.77
        var_9 = module_0.truncate(list_0, float_0)
        var_10 = module_0.get_repr_function(var_0, var_8)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'sk=Z#9};w'
        str_1 = ' ^0u]"0\\U&B]wy\n __"@'
        dict_0 = {str_0: str_0, str_1: str_1}
        list_0 = [dict_0, str_0]
        var_0 = module_0.get_shortish_repr(dict_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ','
        set_0 = set()
        var_0 = module_0.shitcode(set_0)
        var_1 = module_0.get_shortish_repr(set_0)
        list_0 = [set_0]
        str_1 = 'uJH1VWRYLw~c'
        str_2 = 'Aqxlg7uy'
        dict_0 = {str_0: str_1, str_2: var_1}
        str_3 = 'M\nUe~P*b'
        str_4 = '~g=D7>6~t.@)r=\x0biy@%'
        tuple_0 = (dict_0, str_3, list_0, str_4)
        list_1 = [str_2, set_0, tuple_0, list_0]
        bytes_0 = b'\xf7\x11\xefK\x9e'
        list_2 = [bytes_0, str_4, var_1, var_1]
        var_2 = module_0.get_shortish_repr(list_1, set_0, bytes_0, list_2)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = None
        var_1 = type(var_0)
        var_2 = lambda x: var_0
        var_3 = (var_1, var_2)
        var_4 = (var_3,)
        var_5 = module_0.get_repr_function(var_3, var_4)
        var_6 = (var_0,)
        var_7 = module_0.get_repr_function(var_0, var_6)
    except BaseException:
        pass