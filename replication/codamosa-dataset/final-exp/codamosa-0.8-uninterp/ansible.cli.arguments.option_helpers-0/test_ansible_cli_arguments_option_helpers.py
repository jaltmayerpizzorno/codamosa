# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = module_0.unfrack_path()

def test_case_2():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_runtask_options(argument_parser_0)
    var_1 = argument_parser_0.parse_args()

def test_case_3():
    var_0 = module_0.version()

def test_case_4():
    var_0 = module_0.version()
    int_0 = 0
    dict_0 = {var_0: var_0, int_0: var_0, var_0: var_0, var_0: int_0}
    var_1 = module_0.create_base_parser(dict_0)

def test_case_5():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_inventory_options(argument_parser_0)
    str_0 = 'localhost,'
    str_1 = [str_0, str_0]
    var_1 = argument_parser_0.parse_args(str_1)

def test_case_6():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_subset_options(argument_parser_0)
    str_0 = '-t'
    str_1 = 'tag1'
    str_2 = 'tag2'
    str_3 = [str_0, str_1, str_0, str_2]
    var_1 = argument_parser_0.parse_args(str_3)

def test_case_7():
    str_0 = 'Ansible Runner'
    argument_parser_0 = module_1.ArgumentParser(str_0)
    var_0 = module_0.add_runas_options(argument_parser_0)
    str_1 = '-b'
    str_2 = '-u'
    str_3 = 'root'
    str_4 = '--become-method'
    str_5 = 'su'
    str_6 = '--become-user'
    str_7 = 'admin'
    str_8 = [str_1, str_2, str_3, str_4, str_5, str_6, str_7]
    var_1 = argument_parser_0.parse_args(str_8)

def test_case_8():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_vault_options(argument_parser_0)

def test_case_9():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_fork_options(argument_parser_0)

def test_case_10():
    str_0 = 'parser'
    argument_parser_0 = module_1.ArgumentParser(str_0)
    str_1 = 'description'
    sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_1)
    var_0 = argument_parser_0._actions
    var_1 = sorting_help_formatter_0.add_arguments(var_0)

def test_case_11():
    bool_0 = True
    str_0 = 'Cannot delete user "%s".'
    float_0 = -2116.507213
    prepend_list_action_0 = module_0.PrependListAction(bool_0, str_0, float_0)
    bytes_0 = b'1\xae\xfa'
    var_0 = module_0.version(bytes_0)
    str_1 = '$:ZS> Ql|.|vz<[a{'
    var_1 = prepend_list_action_0.__call__(float_0, prepend_list_action_0, str_1, prepend_list_action_0)

def test_case_12():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_meta_options(argument_parser_0)
    str_0 = '--force-handlers'
    str_1 = '--flush-cache'
    str_2 = [str_0, str_1]
    var_1 = argument_parser_0.parse_args(str_2)

def test_case_13():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_output_options(argument_parser_0)

def test_case_14():
    bool_0 = False
    str_0 = 'Cannot delete user "%s".'
    float_0 = -2116.507213
    prepend_list_action_0 = module_0.PrependListAction(bool_0, str_0, float_0)
    bytes_0 = b'1\xae\xfa'
    int_0 = -1484
    int_1 = 677
    set_0 = {bool_0, int_0, int_1, float_0}
    var_0 = prepend_list_action_0.__call__(int_0, prepend_list_action_0, set_0)
    var_1 = module_0.version(bytes_0)
    list_0 = []
    float_1 = 1181.999268
    int_2 = -2922
    ansible_version_0 = module_0.AnsibleVersion(list_0, float_1, list_0, bool_0, int_2)
    set_1 = set()
    unrecognized_argument_0 = module_0.UnrecognizedArgument(str_0, str_0, set_1)
    str_1 = '$:ZS> Ql|.|vz<[a{'
    var_2 = prepend_list_action_0.__call__(float_0, prepend_list_action_0, str_1, prepend_list_action_0)

def test_case_15():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_tasknoplay_options(argument_parser_0)
    str_0 = '--task-timeout'
    str_1 = '120'
    str_2 = [str_0, str_1]
    var_1 = argument_parser_0.parse_args(str_2)

def test_case_16():
    bool_0 = False
    str_0 = 'Canno deMete user "%s\t.'
    float_0 = -1463.957479
    prepend_list_action_0 = module_0.PrependListAction(bool_0, str_0, float_0)
    bytes_0 = b'1\xae\xfa'
    var_0 = module_0.version(bytes_0)
    list_0 = []
    int_0 = -2922
    ansible_version_0 = module_0.AnsibleVersion(list_0, float_0, list_0, bool_0, int_0)
    bytes_1 = b'\x14D~\x8f\x06\xa9\x06vd3'
    set_0 = {int_0}
    unrecognized_argument_0 = module_0.UnrecognizedArgument(str_0, str_0, set_0)
    dict_0 = {float_0: float_0, bytes_0: var_0}
    str_1 = 'xdG'
    str_2 = '9O)3/X,KE\r3O|'
    dict_1 = {str_2: bytes_1, str_2: float_0}
    argument_parser_0 = module_1.ArgumentParser(dict_1, list_0)
    str_3 = 'Ho"1.k\x0bBR0)]~Qn<j'
    var_1 = ansible_version_0.__call__(argument_parser_0, str_3, ansible_version_0, bytes_0)
    tuple_0 = (dict_0, str_1, bytes_1, float_0)
    bytes_2 = b'\xb4K\x84\xc2\xabc-2\xff\xcd\x1bn \x90D\x91\x10'
    argument_parser_1 = module_1.ArgumentParser(dict_0, bytes_2)
    float_1 = 3092.54799
    list_1 = [str_1, tuple_0]
    bool_1 = False
    unrecognized_argument_1 = module_0.UnrecognizedArgument(argument_parser_1, bytes_1, unrecognized_argument_0, float_1, list_1, bool_1)
    str_4 = '!@~>\t'
    dict_2 = {str_4: str_0}
    str_5 = '\r-H6l[&7^-8tr'
    argument_parser_2 = module_1.ArgumentParser(dict_2, str_5, set_0, prepend_list_action_0)
    var_2 = module_0.add_inventory_options(argument_parser_2)
    list_2 = []
    var_3 = prepend_list_action_0.__call__(tuple_0, prepend_list_action_0, list_2, float_0)
    str_6 = 'Xnu'
    prepend_list_action_1 = module_0.PrependListAction(unrecognized_argument_0, unrecognized_argument_0, str_6, str_6, set_0, bool_0)
    namespace_0 = module_1.Namespace()
    sorting_help_formatter_0 = module_0.SortingHelpFormatter(dict_0, int_0, int_0)
    var_4 = sorting_help_formatter_0.add_arguments(namespace_0)

def test_case_17():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_vault_options(argument_parser_0)
    str_0 = '--vault-id'
    str_1 = 'vaultid1234'
    str_2 = 'vaultid4321'
    str_3 = '--ask-vault-password'
    str_4 = '--vault-password-file'
    str_5 = 'passwdfile'
    str_6 = [str_0, str_1, str_0, str_2, str_3, str_4, str_5]
    var_1 = argument_parser_0.parse_args(str_6)