# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    pass

def test_case_1():
    schema_definitions_0 = module_0.SchemaDefinitions()

def test_case_2():
    schema_definitions_0 = module_0.SchemaDefinitions()
    iterator_0 = schema_definitions_0.__iter__()

def test_case_3():
    bool_0 = False
    field_0 = module_1.Field(allow_null=bool_0)
    schema_definitions_0 = None
    module_0.set_definitions(field_0, schema_definitions_0)

def test_case_4():
    schema_0 = module_0.Schema()

def test_case_5():
    any_0 = None
    list_0 = [any_0]
    schema_0 = module_0.Schema(*list_0)

def test_case_6():
    schema_0 = module_0.Schema()
    str_0 = schema_0.__repr__()

def test_case_7():
    schema_0 = module_0.Schema()
    bool_0 = schema_0.__eq__(schema_0)

def test_case_8():
    schema_0 = module_0.Schema()
    int_0 = schema_0.__len__()

def test_case_9():
    str_0 = '\nD;v>=U:Ry,'
    dict_0 = {}
    reference_0 = module_0.Reference(str_0, **dict_0)
    list_0 = [str_0]
    schema_0 = module_0.Schema(*list_0)
    any_0 = reference_0.serialize(dict_0)

def test_case_10():
    schema_definitions_0 = module_0.SchemaDefinitions()
    iterator_0 = schema_definitions_0.__iter__()
    schema_definitions_0.__setitem__(iterator_0, schema_definitions_0)

def test_case_11():
    schema_0 = module_0.Schema()
    iterator_0 = schema_0.__iter__()
    var_0 = list(iterator_0)

def test_case_12():
    bool_0 = None
    array_0 = module_1.Array(bool_0)
    dict_0 = {array_0: bool_0, array_0: bool_0}
    list_0 = [dict_0]
    schema_0 = module_0.Schema(*list_0)
    iterator_0 = schema_0.__iter__()