# Automatically generated by Pynguin.
import pytutils.log as module_0

def test_case_0():
    try:
        var_0 = module_0.get_logger()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b',\xca5\x9d\xfaG[\xa6\xf1'
        var_0 = module_0.configure(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.get_config()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\\V-HN4yIR"M2]F_6@L'
        var_0 = module_0.get_config(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        var_0 = module_0.configure(dict_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.configure()
        str_0 = '\\^HN4yIR"M2F_6@L'
        var_1 = module_0.get_config(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_0.get_logger()
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = None
        dict_0 = {}
        str_0 = "Format each string value of dictionary using values contained within\n    itself, keeping track of dependencies as required.\n\n    Also converts any formatted values according to conversions dict.\n\n    Example:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True)\n    >>> pp(format_dict_recursively(c))\n    {'omg': True, 'wat': 'watTrue'}\n\n    Dealing with missing (unresolvable) keys in format strings:\n\n    >>> from pprint import pprint as pp\n    >>> c = dict(wat='wat{omg}', omg=True, fail='no{whale}')\n    >>> format_dict_recursively(c)\n    Traceback (most recent call last):\n        ...\n    ValueError: Impossible to format dict due to missing elements: {'fail': ['whale']}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False))\n    {'fail': 'no{whale}', 'omg': True, 'wat': 'watTrue'}\n    >>> pp(format_dict_recursively(c, raise_unresolvable=False, strip_unresolvable=True))\n    {'omg': True, 'wat': 'watTrue'}\n\n    :param dict mapping: Dict.\n    :param bool raise_unresolvable: Upon True, raises ValueError upon an unresolvable key.\n    :param bool strip_unresolvable: Upon True, strips unresolvable keys.\n    :param dict conversions: Mapping of {from: to}.\n    "
        py_info_0 = module_0._PyInfo(**dict_0)
        var_0 = module_0.get_logger(str_0)
        py_info_1 = module_0._PyInfo()
        var_1 = module_0.configure()
        py_info_2 = module_0._PyInfo(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "\n    >>> log = get_logger()\n    >>> log.info('test')\n\n    >>> log = get_logger('test2')\n    >>> log.info('test2')\n    "
        bytes_0 = None
        set_0 = {str_0, bytes_0, str_0}
        var_0 = module_0.logger_level(str_0, set_0)
        var_1 = dict()
        var_2 = module_0.get_config(var_1)
        var_3 = dict()
        bool_0 = True
        var_4 = module_0.get_config(bool_0)
        str_1 = '{"a": 1}'
        var_5 = module_0.get_config(str_1)
        list_0 = [var_2, var_0, var_2]
        var_6 = module_0.configure(list_0)
    except BaseException:
        pass