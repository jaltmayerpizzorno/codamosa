# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        str_0 = 'S{kke:{'
        float_0 = -1366.75
        validation_0 = module_0.Validation(str_0, float_0)
        var_0 = validation_0.is_success()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\n        Transform Lazy into not empty Maybe with constructor_fn result.\n\n        :returns: not empty Maybe monad with constructor_fn result\n        :rtype: Maybe[A]\n        '
        float_0 = 3.4
        validation_0 = module_0.Validation(str_0, float_0)
        var_0 = validation_0.is_fail()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n        Transform Box into not empty Maybe.\n\n        :returns: non empty Maybe monad with previous value\n        :rtype: Maybe[A]\n        '
        str_1 = None
        list_0 = [str_1]
        float_0 = -1776.45985
        validation_0 = module_0.Validation(float_0, float_0)
        validation_1 = module_0.Validation(list_0, validation_0)
        var_0 = validation_1.map(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '"@D'
        bytes_0 = b'\xfd\xf1+\xc3)i"n\x10\xeb\x9e\xbd:\x1f\xa5X\t\x11(\xc6'
        validation_0 = module_0.Validation(str_0, bytes_0)
        int_0 = False
        var_0 = validation_0.bind(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -425.27
        float_1 = -2599.0
        bytes_0 = b'\xfe'
        validation_0 = module_0.Validation(float_1, bytes_0)
        var_0 = validation_0.ap(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1375
        float_0 = 842.5
        list_0 = [float_0]
        bytes_0 = b'\xa3+|_\xbdm\xc7\x01'
        set_0 = None
        str_0 = 'tJI\r'
        tuple_0 = (set_0, bytes_0, int_0, str_0)
        validation_0 = module_0.Validation(bytes_0, tuple_0)
        var_0 = validation_0.to_try()
        float_1 = 2753.1
        str_1 = '\x0c-i'
        validation_1 = module_0.Validation(str_1, list_0)
        str_2 = '~-lmjnv'
        validation_2 = module_0.Validation(str_2, str_2)
        var_1 = validation_2.to_either()
        var_2 = validation_1.ap(float_1)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        bytes_0 = b'\xfe\x04\xf7\xf5\xa1`\xb3a\xb4\xa0\xdegx\x01\xd8@h0'
        tuple_0 = ()
        int_0 = 182
        validation_0 = module_0.Validation(tuple_0, int_0)
        var_0 = validation_0.__eq__(dict_0)
        validation_1 = module_0.Validation(tuple_0, tuple_0)
        validation_2 = module_0.Validation(bytes_0, validation_1)
        var_1 = validation_1.to_either()
        str_0 = '}pWq?s\x0bR"yl)'
        var_2 = validation_0.bind(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Lk]^c=}hLFCms'
        str_1 = 'cDo;C`si@-/\\[[4*Aj{'
        validation_0 = module_0.Validation(str_0, str_1)
        var_0 = validation_0.to_box()
        bool_0 = None
        var_1 = validation_0.__eq__(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        tuple_0 = ()
        validation_0 = module_0.Validation(bool_0, tuple_0)
        var_0 = validation_0.to_maybe()
        str_0 = '5T%_#\no1'
        str_1 = '`-$B\\CIXD'
        validation_1 = module_0.Validation(str_0, str_1)
        str_2 = 'LZ'
        int_0 = -2573
        str_3 = '<E'
        validation_2 = module_0.Validation(int_0, str_3)
        var_1 = validation_2.to_either()
        var_2 = validation_2.to_lazy()
        var_3 = validation_1.map(str_2)
    except BaseException:
        pass