# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        int_0 = -2552
        position_0 = module_0.Position(int_0, int_0, int_0)
        bool_0 = position_0.__eq__(position_0)
        float_0 = 1000.2
        bool_1 = False
        str_0 = None
        message_0 = module_0.Message(text=str_0, key=str_0, end_position=position_0)
        list_0 = [message_0, message_0]
        base_error_0 = module_0.BaseError(text=float_0, code=bool_1, messages=list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 25
        list_0 = []
        base_error_0 = module_0.BaseError(key=int_0, messages=list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_error_0 = module_0.BaseError()
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        str_0 = 'o'
        validation_error_0 = module_0.ValidationError(position=list_0, messages=str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '.AQ1(/='
        base_error_0 = module_0.BaseError(text=str_0)
        int_0 = base_error_0.__hash__()
        iterator_0 = base_error_0.__iter__()
        int_1 = -876
        int_2 = 4510
        position_0 = module_0.Position(int_0, int_1, int_2)
        message_0 = module_0.Message(text=str_0, key=str_0, index=iterator_0, start_position=position_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'OU^;\r7CU`On^@C'
        str_1 = ''
        optional_0 = None
        validation_result_0 = module_0.ValidationResult(error=optional_0)
        list_0 = [str_1, str_0, str_0]
        float_0 = -199.0
        message_0 = module_0.Message(text=str_0, index=list_0, start_position=float_0)
        int_0 = message_0.__hash__()
        str_2 = '?+'
        message_1 = module_0.Message(text=str_2, position=str_2)
        bool_0 = message_1.__eq__(message_1)
        str_3 = message_1.__repr__()
        str_4 = 'v;O@8RSD'
        base_error_0 = module_0.BaseError(code=str_3, position=str_4)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Y>zb\x0b~)S8_@\\l'
        int_0 = -3335
        validation_result_0 = module_0.ValidationResult()
        message_0 = module_0.Message(text=str_0, code=str_0, key=int_0, position=validation_result_0)
        int_1 = -126
        position_0 = module_0.Position(int_0, int_0, int_1)
        message_1 = module_0.Message(text=str_0, position=position_0, start_position=position_0)
    except BaseException:
        pass

def test_case_7():
    try:
        validation_result_0 = module_0.ValidationResult()
        str_0 = validation_result_0.__repr__()
        iterator_0 = validation_result_0.__iter__()
        int_0 = 3
        int_1 = -1141
        position_0 = module_0.Position(int_0, int_1, int_0)
        bool_0 = position_0.__eq__(str_0)
        base_error_0 = module_0.BaseError(code=str_0, position=position_0, messages=position_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -596
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        tuple_0 = (position_0,)
        int_2 = 612
        int_3 = 898
        position_1 = module_0.Position(int_2, int_2, int_3)
        bool_0 = position_1.__eq__(tuple_0)
        validation_result_0 = module_0.ValidationResult()
        str_0 = validation_result_0.__repr__()
        str_1 = 'gmQ>sU%l4>9N]0k\x0cf\x0c,'
        base_error_0 = module_0.BaseError(text=str_1, key=str_1)
        int_4 = None
        int_5 = -319
        position_2 = module_0.Position(int_4, int_4, int_5)
        message_0 = module_0.Message(text=str_0)
        str_2 = '-cms~bc3i#l(6'
        message_1 = module_0.Message(text=str_2, code=str_2, start_position=position_1, end_position=position_0)
        str_3 = message_1.__repr__()
        base_error_1 = module_0.BaseError(text=str_0)
        str_4 = '_target'
        validation_error_0 = module_0.ValidationError(code=str_3, key=str_4, position=position_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -596
        int_1 = None
        str_0 = 'unique_items'
        message_0 = module_0.Message(text=str_0, key=int_1)
        bool_0 = message_0.__eq__(int_0)
        validation_result_0 = module_0.ValidationResult()
        str_1 = validation_result_0.__repr__()
        str_2 = 'gmQ>sU%l4>9N]0k\x0cf\x0c,'
        base_error_0 = module_0.BaseError(text=str_2, key=str_2)
        str_3 = base_error_0.__str__()
        str_4 = base_error_0.__repr__()
        list_0 = base_error_0.messages()
        bool_1 = base_error_0.__eq__(list_0)
        base_error_1 = module_0.BaseError(code=str_4, messages=list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -590
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        int_2 = 612
        str_0 = 'db]oJX(>`o(ly'
        message_0 = module_0.Message(text=str_0, code=str_0, key=int_1, end_position=position_0)
        int_3 = 898
        position_1 = module_0.Position(int_2, int_2, int_3)
        int_4 = -1588
        position_2 = module_0.Position(int_2, int_1, int_4)
        bool_0 = position_0.__eq__(position_1)
        validation_result_0 = module_0.ValidationResult()
        str_1 = validation_result_0.__repr__()
        str_2 = 'gmQ>sU%l4>9N]0k\x0cf\x0c,'
        base_error_0 = module_0.BaseError(text=str_1)
        int_5 = base_error_0.__len__()
        base_error_1 = module_0.BaseError(text=str_2, messages=position_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -596
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        int_2 = 612
        position_1 = module_0.Position(int_1, int_0, int_2)
        bool_0 = position_1.__eq__(position_1)
        validation_result_0 = module_0.ValidationResult()
        str_0 = validation_result_0.__repr__()
        list_0 = []
        base_error_0 = module_0.BaseError(messages=list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -596
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        int_2 = -150
        int_3 = -164
        position_1 = module_0.Position(int_0, int_2, int_3)
        bool_0 = position_0.__eq__(position_1)
        bool_1 = position_0.__eq__(int_2)
        bool_2 = position_1.__eq__(position_0)
        validation_result_0 = module_0.ValidationResult()
        str_0 = validation_result_0.__repr__()
        optional_0 = None
        base_error_0 = module_0.BaseError(key=int_3, messages=optional_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -596
        int_1 = None
        str_0 = 'Must be valid UUID format.'
        base_error_0 = module_0.BaseError(text=str_0, code=str_0)
        int_2 = 962
        int_3 = -2587
        position_0 = module_0.Position(int_2, int_3, int_2)
        tuple_0 = (base_error_0, position_0)
        validation_result_0 = module_0.ValidationResult(value=tuple_0)
        iterator_0 = validation_result_0.__iter__()
        str_1 = ')%'
        message_0 = module_0.Message(text=str_1, code=str_1)
        bool_0 = message_0.__eq__(iterator_0)
        position_1 = module_0.Position(int_0, int_1, int_1)
        int_4 = 612
        int_5 = 898
        position_2 = module_0.Position(int_4, int_4, int_5)
        validation_result_1 = module_0.ValidationResult()
        str_2 = validation_result_1.__repr__()
        str_3 = 'gmQ>sU%l4>9N]0k\x0cf\x0c,'
        base_error_1 = module_0.BaseError(text=str_3, key=str_3)
        str_4 = base_error_1.__repr__()
        list_0 = base_error_1.messages()
        base_error_2 = module_0.BaseError(position=position_1, messages=list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '7EYa/='
        int_0 = -264
        int_1 = -725
        position_0 = module_0.Position(int_0, int_1, int_0)
        message_0 = module_0.Message(text=str_0, code=str_0, position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = None
        str_0 = 'Error'
        validation_result_0 = module_0.ValidationResult(value=var_0, error=str_0)
        var_1 = list(validation_result_0)
        int_0 = 32
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_result_1 = module_0.ValidationResult(value=int_0, error=validation_error_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -596
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        position_1 = module_0.Position(int_1, int_1, int_1)
        bool_0 = position_0.__eq__(position_0)
        bool_1 = position_1.__eq__(position_1)
        str_0 = 'unique_items'
        message_0 = module_0.Message(text=str_0, key=int_1)
        str_1 = 'r~%ul'
        none_type_0 = None
        message_1 = module_0.Message(text=str_1, index=none_type_0, end_position=position_0)
        bool_2 = message_1.__eq__(message_0)
        set_0 = {message_0}
        validation_result_0 = module_0.ValidationResult(error=set_0)
        str_2 = validation_result_0.__repr__()
        base_error_0 = module_0.BaseError(text=str_1, key=str_1)
        str_3 = base_error_0.__str__()
        int_2 = -1463
        str_4 = '?3-7$\nO@.r;k`'
        list_0 = base_error_0.messages(add_prefix=str_4)
        int_3 = 472
        position_2 = module_0.Position(int_2, int_2, int_3)
        bool_3 = base_error_0.__eq__(position_0)
        base_error_1 = module_0.BaseError()
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -596
        int_1 = None
        position_0 = module_0.Position(int_0, int_1, int_1)
        int_2 = 612
        int_3 = 898
        position_1 = module_0.Position(int_2, int_2, int_3)
        str_0 = position_1.__repr__()
        none_type_0 = None
        message_0 = module_0.Message(text=str_0, code=none_type_0, position=position_0)
        bool_0 = message_0.__eq__(int_3)
        validation_result_0 = module_0.ValidationResult()
        str_1 = validation_result_0.__repr__()
        list_0 = [message_0, message_0]
        base_error_0 = module_0.BaseError(messages=list_0)
        str_2 = base_error_0.__str__()
        base_error_1 = module_0.BaseError()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'error message'
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_error_1 = module_0.ValidationError(text=str_0)
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, key=str_0)
        bool_0 = base_error_0.__eq__(validation_error_0)
        int_0 = None
        int_1 = -2337
        position_0 = module_0.Position(int_0, int_1, int_0)
        base_error_1 = module_0.BaseError(code=str_0, position=position_0)
    except BaseException:
        pass