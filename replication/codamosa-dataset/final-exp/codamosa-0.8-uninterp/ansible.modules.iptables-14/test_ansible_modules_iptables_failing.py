# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        tuple_0 = ()
        str_0 = "!m8aNIAvm:,-'=[g6"
        bool_0 = True
        float_0 = -2493.804848
        var_0 = module_0.append_param(tuple_0, str_0, bool_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = 'Lv{\\"ug vAL?'
        str_1 = '5\x0bp\\J,&('
        str_2 = 'import'
        dict_0 = {str_1: str_0, str_1: str_0, str_2: bool_0}
        var_0 = module_0.append_tcp_flags(bool_0, str_0, dict_0)
        str_3 = 'Tq1De'
        var_1 = module_0.construct_rule(str_3)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'prefixes'
        int_0 = None
        float_0 = -811.5682
        var_0 = module_0.append_csv(int_0, str_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        set_0 = {str_0, str_0, str_0}
        var_0 = module_0.append_match(str_0, set_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        str_0 = 'R'
        dict_0 = None
        var_0 = module_0.append_jump(bool_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        float_0 = None
        var_0 = module_0.append_rule(bool_0, bool_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = None
        bytes_0 = b'\x96\xf8\x8a\x04\x1foZf\xab\xf4E'
        bytes_1 = b'\x93F\xfd(\xe6I\xdb\xd4\r\x86_\x9a'
        var_0 = module_0.check_present(dict_0, bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_7():
    try:
        complex_0 = None
        str_0 = '2[gQd3DPY{eLGd ZW'
        list_0 = [str_0, complex_0]
        complex_1 = None
        var_0 = module_0.insert_rule(str_0, list_0, complex_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'ansible.modules.iptables'
        tuple_0 = ()
        dict_0 = {str_0: tuple_0}
        bool_0 = True
        int_0 = 675
        var_0 = module_0.remove_rule(dict_0, bool_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        str_0 = '$]jlLs%M\\}p#|\\iB'
        tuple_0 = (bool_0, str_0)
        list_0 = [bool_0]
        int_0 = -216
        var_0 = module_0.flush_table(tuple_0, list_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        tuple_0 = (bool_0,)
        bool_1 = None
        str_0 = 'ansible.modules.iptables'
        var_0 = module_0.set_chain_policy(tuple_0, bool_1, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'INPUT'
        var_0 = dict(table=str_0, chain=str_0, ip_version=str_0)
        var_1 = module_0.get_chain_policy(var_0, var_0, var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -1192.496344
        dict_0 = {}
        bytes_0 = b'3\xe6\xcfq'
        var_0 = module_0.append_match_flag(float_0, dict_0, bytes_0, float_0)
        set_0 = {float_0}
        bool_0 = None
        var_1 = module_0.append_tcp_flags(set_0, set_0, bool_0)
        bool_1 = False
        var_2 = module_0.append_wait(bool_1, set_0, set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'INPUT'
        var_0 = dict(chain=str_0, table=str_0, policy=str_0)
        str_1 = 'iptables'
        str_2 = '-P'
        bool_0 = True
        var_1 = module_0.push_arguments(str_1, str_2, var_0, bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\x0cT<#\x0bZ~"Et7'
        bytes_0 = None
        var_0 = module_0.get_iptables_version(str_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'ansible.modules.iptables'
        tuple_0 = (str_0,)
        set_0 = None
        bytes_0 = b'\x9a\x0b>@'
        var_0 = module_0.append_match_flag(set_0, tuple_0, bytes_0, bytes_0)
        str_1 = "`S!o`W'VoAtEvQ-$V+"
        bytes_1 = None
        var_1 = module_0.append_param(set_0, set_0, str_1, bytes_1)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = None
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, float_0, dict_0]
        var_0 = module_0.append_jump(dict_0, tuple_0, list_0)
        list_1 = None
        int_0 = 3072
        var_1 = module_0.append_csv(list_1, list_1, int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -1192.4963
        dict_0 = {}
        bytes_0 = b'3\xe6\xcfq'
        var_0 = module_0.append_match_flag(float_0, dict_0, bytes_0, float_0)
        float_1 = -2343.19
        int_0 = -1911
        list_0 = []
        bytes_1 = b'&\xc1\x03\xd6\x9d\x05Y\x7f\xfc;\x9e\x1f\xe4\xf6\xe0'
        var_1 = module_0.append_param(int_0, dict_0, list_0, bytes_1)
        str_0 = '__main__'
        set_0 = {float_1}
        var_2 = module_0.append_tcp_flags(bytes_0, dict_0, set_0)
        float_2 = 813.4939
        float_3 = -2493.804848
        tuple_0 = (float_2, dict_0, dict_0, float_3)
        float_4 = None
        var_3 = module_0.append_param(list_0, tuple_0, tuple_0, float_4)
        str_1 = 'avE.lable'
        bool_0 = True
        var_4 = module_0.append_match_flag(set_0, str_0, bytes_0, str_1)
        var_5 = module_0.set_chain_policy(float_0, bool_0, tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = []
        str_0 = 'match'
        bool_0 = True
        var_1 = module_0.append_match_flag(var_0, str_0, str_0, bool_0)
        var_2 = []
        str_1 = 'negate'
        var_3 = module_0.append_match_flag(var_2, str_1, str_0, bool_0)
        bool_1 = False
        var_4 = module_0.append_match_flag(str_0, str_0, str_0, bool_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '\x0c7$a?K]NO'
        str_1 = 'module'
        str_2 = 'table'
        str_3 = 'chain'
        str_4 = 'nat'
        str_5 = {str_2: str_4, str_3: str_4}
        var_0 = module_0.flush_table(str_0, str_1, str_5)
    except BaseException:
        pass