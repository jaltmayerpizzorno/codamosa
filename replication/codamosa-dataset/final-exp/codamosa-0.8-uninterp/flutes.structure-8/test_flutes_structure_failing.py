# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        bool_0 = True
        var_0 = module_0.no_map_instance(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'KJT9/Ile ww'
        list_0 = [str_0]
        var_0 = module_0.map_structure(list_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = None
        var_0 = module_0.map_structure(int_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "q2>\x0crn'Ik0 &1"
        set_0 = {str_0}
        var_0 = None
        list_0 = [set_0, var_0, var_0]
        var_1 = module_0.map_structure_zip(str_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Invalid object in `closing` list. The object must either be a callable or has a `close` method'
        var_0 = module_0.map_structure_zip(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 0.0
        float_1 = 0.1
        dict_0 = {float_1: float_0, float_0: float_1, float_0: float_0}
        int_0 = 4470
        var_0 = module_0.no_map_instance(int_0)
        var_1 = module_0.map_structure(float_1, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '-Zl7+!\x0bVj!'
        int_0 = -165
        tuple_0 = (int_0,)
        var_0 = module_0.no_map_instance(str_0)
        bool_0 = False
        list_0 = [tuple_0]
        var_1 = module_0.map_structure_zip(bool_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        set_0 = {str_0, str_0}
        var_0 = module_0.map_structure(str_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0]
        str_0 = '.y=69&z*CzC3+v#5 #'
        var_0 = module_0.map_structure_zip(str_0, list_0)
        var_1 = None
        int_0 = 0
        var_2 = module_0.no_map_instance(int_0)
        int_1 = 5039
        int_2 = 32768
        dict_0 = {var_1: int_0, var_1: int_0, var_1: int_1, var_1: int_2}
        list_1 = module_0.reverse_map(dict_0)
        str_1 = "&:1AP#'sh0u \t=z"
        list_2 = [var_2, var_1, list_1, str_1]
        var_3 = module_0.map_structure(str_0, list_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '~'
        str_1 = ''
        int_0 = []
        int_1 = 0
        int_2 = [int_1, int_1, int_1]
        int_3 = {str_0: int_0, str_1: int_2}
        int_4 = [int_3]
        var_0 = lambda xx, yy: xx + yy
        var_1 = module_0.map_structure_zip(var_0, int_4)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'd,?M#_4'
        var_0 = module_0.no_map_instance(str_0)
        set_0 = set()
        list_0 = [var_0, var_0, var_0, str_0]
        var_1 = module_0.map_structure_zip(set_0, list_0)
    except BaseException:
        pass