# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    int_0 = 698
    int_1 = module_0.increase(int_0)

def test_case_1():
    int_0 = 161
    var_0 = module_0.compose(int_0)

def test_case_2():
    str_0 = '\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        '
    dict_0 = {str_0: str_0}
    tuple_0 = (dict_0,)
    callable_0 = None
    callable_1 = module_0.memoize(callable_0)
    tuple_1 = (tuple_0, callable_1)
    list_0 = [tuple_1, tuple_1, tuple_1, tuple_1]
    var_0 = module_0.cond(list_0)

def test_case_3():
    int_0 = -4717
    list_0 = [int_0]
    list_1 = [list_0, list_0, list_0]
    callable_0 = None
    callable_1 = module_0.memoize(callable_0)
    callable_2 = module_0.memoize(callable_1)
    callable_3 = module_0.memoize(callable_2)
    var_0 = module_0.curry(list_1, callable_3)