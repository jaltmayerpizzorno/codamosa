# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    try:
        var_0 = module_0.fn()
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        var_0 = module_0.compose(callable_0)
        var_1 = None
        var_2 = module_0.identity(var_1)
        list_0 = [callable_1]
        var_3 = module_0.compose(var_2, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        callable_2 = module_0.memoize(callable_1)
        callable_3 = module_0.memoize(callable_2)
        bool_0 = True
        var_0 = module_0.pipe(bool_0)
        callable_4 = module_0.memoize(callable_3)
        var_1 = module_0.compose(callable_4)
        var_2 = None
        var_3 = module_0.identity(var_2)
        list_0 = [callable_1]
        var_4 = module_0.compose(var_3, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1]
        var_0 = module_0.compose(callable_0, *list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xea]\x88\xe1\xa2\xa7\xb7\xe2\x13'
        var_0 = None
        var_1 = module_0.identity(var_0)
        var_2 = module_0.identity(var_1)
        var_3 = module_0.identity(var_2)
        var_4 = module_0.identity(var_3)
        var_5 = module_0.identity(var_4)
        var_6 = module_0.identity(var_5)
        list_0 = [bytes_0, bytes_0, bytes_0]
        var_7 = module_0.pipe(bytes_0, *list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        var_0 = module_0.cond(list_0)
        str_0 = '\n    Function for return function depended on first function argument\n    cond get list of two-item tuples,\n    first is condition_function, second is execute_function.\n    Returns this execute_function witch first condition_function return truly value.\n\n    :param condition_list: list of two-item tuples (condition_function, execute_function)\n    :type condition_list: List[(Function, Function)]\n    :returns: Returns this execute_function witch first condition_function return truly value\n    :rtype: Function\n    '
        list_1 = [list_0, list_0, var_0]
        list_2 = [var_0, var_0, str_0, list_0]
        var_1 = module_0.pipe(list_1, *list_2)
    except BaseException:
        pass