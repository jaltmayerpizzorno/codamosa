# Automatically generated by Pynguin.
import ansible.module_utils.api as module_0

def test_case_0():
    pass

def test_case_1():
    set_0 = set()
    var_0 = module_0.rate_limit(set_0)
    int_0 = 3023
    float_0 = -4986.7
    dict_0 = {var_0: int_0, int_0: set_0, float_0: int_0, var_0: float_0}
    var_1 = module_0.retry_argument_spec(dict_0)
    var_2 = module_0.retry_never(int_0)
    var_3 = module_0.basic_auth_argument_spec()
    var_4 = module_0.rate_limit_argument_spec()
    var_5 = module_0.rate_limit_argument_spec()

def test_case_2():
    var_0 = module_0.retry_argument_spec()

def test_case_3():
    var_0 = module_0.rate_limit()

def test_case_4():
    var_0 = module_0.retry()
    var_1 = module_0.retry()
    int_0 = None
    var_2 = module_0.retry_never(int_0)

def test_case_5():
    bool_0 = None
    var_0 = module_0.retry_never(bool_0)

def test_case_6():
    str_0 = '7pXD,/%X\nG[cDXQ'
    bool_0 = True
    var_0 = module_0.retry_with_delays_and_condition(str_0, bool_0)

def test_case_7():
    tuple_0 = ()
    var_0 = module_0.retry(tuple_0)
    bytes_0 = b'\xc5'
    var_1 = module_0.retry_with_delays_and_condition(bytes_0)
    var_2 = module_0.rate_limit()
    float_0 = 60.0
    var_3 = module_0.retry()
    var_4 = module_0.retry_with_delays_and_condition(float_0, float_0)

def test_case_8():
    str_0 = 'G.'
    str_1 = 'z,7XVUVC<R'
    var_0 = module_0.rate_limit(str_1)
    list_0 = [str_0, str_0, str_0]
    var_1 = module_0.retry_argument_spec()
    var_2 = module_0.generate_jittered_backoff(list_0)

def test_case_9():
    int_0 = 18
    int_1 = 10
    var_0 = module_0.generate_jittered_backoff(int_1, int_0)
    var_1 = tuple(var_0)