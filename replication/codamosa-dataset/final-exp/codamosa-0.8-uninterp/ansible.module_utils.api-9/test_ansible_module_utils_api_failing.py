# Automatically generated by Pynguin.
import ansible.module_utils.api as module_0

def test_case_0():
    try:
        str_0 = '|hJ,\r'
        var_0 = module_0.retry_with_delays_and_condition(str_0)
        bytes_0 = None
        bool_0 = None
        var_1 = module_0.retry(bool_0)
        float_0 = 658.0
        var_2 = module_0.retry_with_delays_and_condition(bytes_0, float_0)
        str_1 = '*Dzw@gShK'
        var_3 = module_0.rate_limit_argument_spec(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.retry_argument_spec()
        var_1 = module_0.basic_auth_argument_spec()
        bool_0 = True
        var_2 = module_0.retry_argument_spec(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.rate_limit()
        var_1 = module_0.retry_argument_spec()
        var_2 = module_0.rate_limit()
        dict_0 = {var_0: var_0}
        var_3 = module_0.retry_never(dict_0)
        str_0 = 'B:hrXn\ru-zv3h4j>_w-'
        tuple_0 = (str_0,)
        var_4 = module_0.basic_auth_argument_spec(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        float_0 = 0.1
        list_0 = None
        var_0 = module_0.rate_limit_argument_spec(list_0)
        dict_0 = {float_0: float_0, bool_0: float_0}
        tuple_0 = (bool_0, float_0, dict_0)
        var_1 = module_0.retry_with_delays_and_condition(tuple_0)
        complex_0 = None
        list_1 = []
        var_2 = module_0.retry(complex_0, list_1)
        var_3 = module_0.retry()
        bytes_0 = b'\x8b\xba\xcb'
        str_0 = '\\w+[.]\\w+\\+?'
        var_4 = module_0.rate_limit_argument_spec()
        var_5 = module_0.generate_jittered_backoff()
        float_1 = -2580.613
        var_6 = module_0.generate_jittered_backoff(float_1)
        list_2 = [bytes_0, str_0, bytes_0, str_0]
        var_7 = module_0.rate_limit(str_0)
        float_2 = 3197.0
        var_8 = module_0.retry_never(list_2)
        var_9 = module_0.basic_auth_argument_spec()
        int_0 = 29
        var_10 = module_0.basic_auth_argument_spec()
        var_11 = module_0.retry_with_delays_and_condition(str_0, int_0)
        var_12 = module_0.rate_limit(list_2, float_2)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 30
        var_0 = module_0.generate_jittered_backoff(int_0, int_0, int_0)
        var_1 = next(var_0)
        var_2 = next(int_0)
    except BaseException:
        pass