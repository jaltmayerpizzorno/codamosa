# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.transformers.metaclass as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = 'class M(metaclass=B): pass'
    var_0 = module_0.parse(str_0)
    metaclass_transformer_0 = module_1.MetaclassTransformer(str_0)
    var_1 = metaclass_transformer_0.visit(var_0)

def test_case_2():
    list_0 = []
    tuple_0 = (list_0,)
    list_1 = [tuple_0, tuple_0, list_0, list_0]
    str_0 = 'ND.H._qa>'
    str_1 = '.'
    str_2 = '8OHxd6_M"\r"\tqw?t0'
    dict_0 = {str_0: str_0, str_1: str_1, str_1: list_1, str_2: str_2}
    class_def_0 = module_2.ClassDef(*list_1, **dict_0)
    a_s_t_0 = module_2.AST()
    metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
    class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)