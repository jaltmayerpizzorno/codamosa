# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    not_found_0 = module_0.NotFound(bool_0)

def test_case_2():
    int_0 = 226
    float_0 = -2097.1702
    load_file_exception_0 = None
    dict_0 = {}
    list_0 = [int_0]
    str_0 = 'T0OCz5`>f'
    dict_1 = {str_0: float_0}
    method_not_supported_0 = module_0.MethodNotSupported(list_0, int_0, dict_1)
    unauthorized_0 = module_0.Unauthorized(float_0, load_file_exception_0, dict_0)

def test_case_3():
    float_0 = -2420.6
    header_not_found_0 = module_0.HeaderNotFound(float_0)
    header_expectation_failed_0 = module_0.HeaderExpectationFailed(header_not_found_0)
    request_timeout_0 = None
    file_not_found_0 = module_0.FileNotFound(header_expectation_failed_0, request_timeout_0, header_not_found_0)
    float_1 = -2097.17016
    load_file_exception_0 = None
    dict_0 = {}
    unauthorized_0 = module_0.Unauthorized(float_1, load_file_exception_0, dict_0)

def test_case_4():
    str_0 = 'v'
    forbidden_0 = module_0.Forbidden(str_0)
    str_1 = 'parsed_files'
    service_unavailable_0 = module_0.ServiceUnavailable(forbidden_0, str_1)
    py_file_error_0 = module_0.PyFileError(service_unavailable_0)

def test_case_5():
    str_0 = 'Auth required.'
    unauthorized_0 = module_0.Unauthorized(str_0, str_0)

def test_case_6():
    bool_0 = False
    py_file_error_0 = module_0.PyFileError(bool_0)
    request_timeout_0 = module_0.RequestTimeout(py_file_error_0)
    set_0 = set()
    list_0 = []
    server_error_0 = module_0.ServerError(set_0, list_0)
    sanic_exception_0 = module_0.SanicException(server_error_0)
    bytes_0 = b'e\\'
    load_file_exception_0 = module_0.LoadFileException(request_timeout_0, sanic_exception_0, bytes_0)
    header_not_found_0 = module_0.HeaderNotFound(load_file_exception_0)

def test_case_7():
    float_0 = -2098.363646277711
    load_file_exception_0 = None
    dict_0 = {}
    unauthorized_0 = module_0.Unauthorized(float_0, load_file_exception_0, dict_0)

def test_case_8():
    str_0 = 'Auth required.'
    int_0 = 401
    str_1 = 'Bearer'
    str_2 = 'Restricted Area'
    str_3 = 'realm'
    str_4 = {str_3: str_2}
    unauthorized_0 = module_0.Unauthorized(str_0, int_0, str_1, **str_4)