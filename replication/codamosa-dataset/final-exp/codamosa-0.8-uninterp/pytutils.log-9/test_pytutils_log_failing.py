# Automatically generated by Pynguin.
import pytutils.log as module_0

def test_case_0():
    try:
        var_0 = module_0.get_logger()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -246
        var_0 = module_0.configure(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.get_config()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 589
        var_0 = module_0.get_config(int_0)
        set_0 = None
        var_1 = module_0.configure()
        var_2 = module_0.configure()
        int_1 = 2751
        var_3 = module_0.logger_level(set_0, int_1)
        py_info_0 = module_0._PyInfo()
        var_4 = module_0.get_config(int_0)
        var_5 = module_0.logger_level(int_0, py_info_0)
        var_6 = module_0.configure()
        list_0 = None
        str_0 = '&J5XPw'
        bytes_0 = b''
        var_7 = module_0.logger_level(str_0, bytes_0)
        var_8 = module_0.configure()
        var_9 = module_0.get_logger(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        py_info_0 = module_0._PyInfo()
        str_0 = "\n    Derive a namespace from the module containing the caller's caller.\n\n    :return: the fully qualified python name of a module.\n    :rtype: str\n    "
        var_0 = module_0.get_logger(str_0)
        str_1 = '\\W0Wl#h{"u{JO@K/$'
        var_1 = module_0.configure(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ',\tjESV>Gb5wl{E9Rw7lr'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.configure(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n    >>> from io import StringIO\n    >>> from contextlib import contextmanager\n    >>> @contextmanager\n    ... def capture_stream(stream):\n    ...     out, stream.stream = stream.stream, StringIO()\n    ...     try:\n    ...         yield stream.stream\n    ...     finally:\n    ...         stream.stream = out\n    >>> l = getLogger()\n    >>> with capture_stream(l) as s:\n    ...     with logger_level(l, logging.INFO):\n    ...         l.debug("this should not print")\n    ...     with logger_level(l, logging.DEBUG):\n    ...         l.debug("this should print")\n    >>> "this should print" in s.getvalue()\n    True\n    >>> "this should not print" in s.getvalue()\n    False\n    '
        var_0 = module_0.get_config(str_0)
    except BaseException:
        pass