# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        str_0 = 'Si:X\x0b!"\rj'
        module_args_parser_0 = module_0.ModuleArgsParser(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -879.1
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'shell;% echo hi'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = dict(action=str_0, module=str_1, args=str_1, delegate_to=str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0, str_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'copy'
        str_1 = 'a'
        str_2 = 'b'
        var_0 = dict(module=str_0, src=str_1, dest=str_2)
        var_1 = dict(action=var_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_1)
        str_3 = 'src=a dest=b'
        var_2 = dict(_raw_params=str_3)
        var_3 = module_args_parser_0.parse()
        module_args_parser_1 = module_0.ModuleArgsParser(var_3)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'shell echo hi'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = dict(action=str_0, module=str_0, args=str_1, delegate_to=str_1)
        var_1 = dict(action=str_1, args=str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_1, str_0)
        var_2 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ' /FNE'
        str_1 = {str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'shell;% echo hi'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = dict(action=str_0, module=str_1, args=str_1, delegate_to=str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0, str_0)
        var_1 = module_args_parser_0.parse(module_args_parser_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -902.0
        str_0 = 'ech\x0b hi'
        str_1 = '+m\\2Xl$X'
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'shell;% echo hi'
        var_0 = dict(action=str_0, module=str_0, args=str_0, delegate_to=str_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0, str_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'local_action'
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'action'
        str_1 = 'shell echo hi'
        str_2 = {str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse()
        str_3 = 'shell echo hello'
        str_4 = (str_1, str_3)
        str_5 = {str_0: str_4}
        module_args_parser_1 = module_0.ModuleArgsParser(str_5)
        var_1 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'shell'
        str_1 = 'echo hi'
        str_2 = {str_0: str_1}
        str_3 = 'JlpB$EcC\tc:]1'
        dict_0 = {str_0: str_2, str_3: str_2, str_3: str_2}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
        var_1 = module_args_parser_0.parse()
        str_4 = 'action'
        var_2 = module_args_parser_0.parse()
        str_5 = 'QOT\r1bc?O=lHo(n(~-\r'
        str_6 = {str_4: str_1, str_5: str_0}
        module_args_parser_1 = module_0.ModuleArgsParser(str_6)
        var_3 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\n    Unit test for method parse\n    '
        str_1 = 'shell'
        str_2 = 'echo hi'
        str_3 = {str_1: str_2}
        module_args_parser_0 = module_0.ModuleArgsParser(str_3)
        bool_0 = True
        str_4 = 'Q'
        str_5 = {str_1: str_2, str_4: str_1, str_0: str_1, str_1: bool_0}
        module_args_parser_1 = module_0.ModuleArgsParser(str_5)
        var_0 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'echo Ai'
        str_1 = None
        str_2 = 'ansible.legacy.%s'
        dict_0 = {str_1: str_1, str_2: str_0, str_2: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        str_3 = 'shell'
        module_args_parser_1 = module_0.ModuleArgsParser()
        str_4 = {str_3: str_1}
        module_args_parser_2 = module_0.ModuleArgsParser(str_4)
        var_0 = module_args_parser_2.parse()
        bool_0 = True
        str_5 = 'Q'
        str_6 = {str_3: str_3, str_5: str_3, str_0: str_3, str_3: bool_0}
        module_args_parser_3 = module_0.ModuleArgsParser(str_6)
        var_1 = module_args_parser_3.parse()
    except BaseException:
        pass

def test_case_15():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        str_0 = 'shell;% echo hi'
        str_1 = {str_0: str_0, str_0: str_0}
        var_0 = dict(action=str_0, module=str_1, args=module_args_parser_0, delegate_to=str_0)
        module_args_parser_1 = module_0.ModuleArgsParser()
        module_args_parser_2 = module_0.ModuleArgsParser(var_0, str_0)
        var_1 = module_args_parser_2.parse()
    except BaseException:
        pass