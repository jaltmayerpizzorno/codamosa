

# Generated at 2022-06-13 17:49:53.289324
# Unit test for method load of class Grammar
def test_Grammar_load():
    filename = __name__ + ".py"
    g = Grammar()
    try:
        g.load(filename)
    except:
        pass
    else:
        assert 0, "load function succeeds on non-existing file"
    g.loads(b"")
    assert g.symbol2number == {}
    assert g.number2symbol == {}
    assert g.states == []
    assert g.labels == [(0, "EMPTY")]
    assert g.keywords == {}
    assert g.tokens == {}



# Generated at 2022-06-13 17:50:02.152338
# Unit test for method load of class Grammar
def test_Grammar_load():
    import io
    import pickle
    import unittest

    class GrammarTestCase(unittest.TestCase):
        def test_loads(self):
            data = io.BytesIO()
            g = Grammar()
            g.dump(data)
            data.seek(0)
            h = Grammar()
            h.loads(data.read())
            g_pickle = pickle.dumps(g)
            h_pickle = pickle.dumps(h)
            self.assertEqual(g_pickle, h_pickle)
            self.assertEqual(g, h)

    unittest.main()


if __name__ == "__main__":
    test_Grammar_load()

# Generated at 2022-06-13 17:50:06.789934
# Unit test for method load of class Grammar
def test_Grammar_load():
    import ast
    import sys
    from types import ModuleType
    from . import pgen2

    types = ModuleType("types")
    module = types.__dict__
    g = pgen2.driver.load_grammar("Grammar/Grammar.txt", "<string>", "exec", module)
    assert isinstance(g, pgen2.Grammar)
    g.report()


if __name__ == "__main__":
    test_Grammar_load()

# Generated at 2022-06-13 17:50:18.150637
# Unit test for method load of class Grammar
def test_Grammar_load():
    from . import grammar
    from . import pgen2
    from .pgen2 import tokenize
    from .tokenize import generate_tokens
    from io import BytesIO, TextIOWrapper
    from pprint import pformat

    if not hasattr(token, "NL"):
        import sys

        assert sys.version_info >= (3, 8)

    def dump_grammar(g: Grammar):
        symbol2number = pformat(g.symbol2number)
        number2symbol = pformat(g.number2symbol)
        labels = pformat(g.labels)
        dfas = pformat(g.dfas)
        keywords = pformat(g.keywords)
        tokens = pformat(g.tokens)

# Generated at 2022-06-13 17:50:26.188954
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    """
    Unit test for method dump of class Grammar
    """
    filename = ".test_Grammar_dump.pickle"
    grammar = Grammar()
    # Inject attributes with values for testing
    # pylint: disable=invalid-name
    grammar.symbol2number = {"s2n": 1}
    grammar.number2symbol = {"n2s": 2}
    grammar.states = ["states"]
    grammar.dfas = {"dfas": "dfas"}
    grammar.labels = ["labels"]
    grammar.keywords = {"keywords": "keywords"}
    grammar.tokens = {"tokens": "tokens"}
    grammar.symbol2label = {"symbol2label": "symbol2label"}
    grammar.start = "start"

# Generated at 2022-06-13 17:50:34.138776
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import sys
    import os
    import pickle
    from io import BytesIO
    from unittest import mock

    import pytest

    from . import pgen

    def _test_dump(fn: Path) -> None:
        """
        Tests that the file generated by Grammar.dump() is valid.
        """
        with open(fn, "rb") as f:
            d = pickle.load(f)
        with mock.patch.object(sys, "version_info", (3, 6)), mock.patch.dict(
            os.environ, {"PYTHONOPTIMIZE": "1"}
        ):
            g = pgen.driver.load_grammar(b"3.6")
        g._update(d)

    def test_dump():
        fd, name = tempfile.mkstemp

# Generated at 2022-06-13 17:50:43.019260
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from .conv import convert
    from .parse import Parser

    p = Parser(Grammar())
    g1 = p.parse(open("Grammar.txt"))
    g1.dump("test.pkl")
    g2 = convert(p.parse(open("test.pkl")))
    g2.dump("test2.pkl")
    g3 = convert(p.parse(open("test2.pkl")))
    g3.dump("test3.pkl")
    assert open("test.pkl", "rb").read() == open("test2.pkl", "rb").read()
    assert open("test2.pkl", "rb").read() == open("test3.pkl", "rb").read()

    # Also test the copy() method of Grammar
    g4 = g3.copy

# Generated at 2022-06-13 17:50:48.050485
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # Ensure it works to dump a grammar (see issue 22118)
    class FooGrammar(Grammar):
        pass
    g = FooGrammar()
    g.dfas = g.labels = g.states = g.tokens = {1:1}
    g.dump("bar")  # returns None

# Generated at 2022-06-13 17:50:55.769887
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import unittest

    class GrammarTest(unittest.TestCase):
        def test_dump(self):
            grammar = Grammar()
            # mypyc generates objects that don't have a __dict__, but they
            # do have __getstate__ methods that will return an equivalent
            # dictionary
            if hasattr(grammar, "__dict__"):
                d = grammar.__dict__
            else:
                d = grammar.__getstate__()  # type: ignore
            self.assertIsInstance(d, dict)

    unittest.main()

# Generated at 2022-06-13 17:51:03.868810
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    grammar = Grammar()
    grammar.states = [[(1,1)],[(2,2)]]
    grammar.dfas = {0:grammar.states[1], 1:grammar.states[0]}
    grammar.labels = [(0,'EMPTY'), (1, 'SYM1'), (2, 'SYM2')]
    grammar.start = 1
    grammar.number2symbol = {1:'SYM1', 2:'SYM2'}
    grammar.symbol2number = {'SYM1':1, 'SYM2':2}
    temp_file = tempfile.NamedTemporaryFile(delete=False)
    temp_file.close()
    grammar.dump(temp_file.name)

    with open(temp_file.name, "rb") as f:
        d = pickle.load

# Generated at 2022-06-13 17:51:14.880885
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    pickle_file = "Syntax/Grammar.pyc"

    grammar = Grammar()

    assert grammar.labels == [(0, "EMPTY")]
    assert grammar.start == 256

    grammar.dump(pickle_file)
    loaded_grammar = Grammar()
    loaded_grammar.load(pickle_file)

    assert loaded_grammar.labels == [(0, "EMPTY")]
    assert loaded_grammar.start == 256

# Generated at 2022-06-13 17:51:21.964929
# Unit test for method load of class Grammar
def test_Grammar_load():
    import io
    import pickle
    from typing import Tuple
    from .parse import Parser

    fake_file = io.BytesIO()
    g = Grammar()
    g.dump(fake_file)
    fake_file.seek(0)
    data = pickle.load(fake_file)
    for k, v in data.items():
        if k == "labels":
            # labels should be a tuple
            assert isinstance(v, Tuple)
        else:
            assert getattr(g, k) == v

# Generated at 2022-06-13 17:51:31.476392
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    g.loads(b"cnumpy\n.")
    assert g.symbol2number == {'np': 1}
    assert g.number2symbol == {1: 'np'}
    assert g.states == [[(0, 0)]]
    assert g.dfas == {1: ([[(0, 0)]], {0: 1})}
    assert g.labels == [(0, 'EMPTY')]
    assert g.keywords == {}
    assert g.tokens == {}
    assert g.symbol2label == {}
    assert g.start == 256
    assert g.async_keywords is False


# Generated at 2022-06-13 17:51:39.021335
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()

    assert g.symbol2number == {}
    assert g.number2symbol == {}
    assert g.states == []
    assert g.dfas == {}
    assert g.labels == [(0, "EMPTY")]
    assert g.keywords == {}
    assert g.tokens == {}
    assert g.symbol2label == {}
    assert g.start == 256
    assert g.async_keywords == False

    g.load('Lib/lib2to3/Grammar.pickle')


# Generated at 2022-06-13 17:51:44.102279
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    """Unit test for method dump of class Grammar."""
    try:
        g = Grammar()
        g.dump(".")
        os.remove("Grammar.pickle")
    except:
        assert False, "Failed to write file."
        return
    assert True, "test completed"

# Generated at 2022-06-13 17:51:50.868826
# Unit test for method load of class Grammar
def test_Grammar_load():
    import pytest
    import ast

    g = Grammar()
    g.start = "file_input"
    g.states = ast.__dict__['_convert_grammar']().states
    with tempfile.TemporaryDirectory() as tmpdir:
        fname = os.path.join(tmpdir, 'test.pickle')
        g.dump(fname)
        gl = Grammar()
        gl.load(fname)

        assert repr(g.states) == repr(gl.states)
        assert g.start == gl.start
        assert gl.states == ast.__dict__['_convert_grammar']().states

# Generated at 2022-06-13 17:51:54.605581
# Unit test for method load of class Grammar
def test_Grammar_load():
    # verify an exception is raised if the file doesn't exist
    g = Grammar()
    try:
        g.load('does_not_exist')
    except IOError:
        pass
    else:
        raise RuntimeError('expected an IOError')

# Generated at 2022-06-13 17:52:01.985329
# Unit test for method load of class Grammar
def test_Grammar_load():
    class DummyGrammar(Grammar):
        pass
    g = DummyGrammar()
    test_data = {"a": 1, "b": 2, "c": 3}
    g.loads(pickle.dumps(test_data))
    assert g.a == 1
    assert g.b == 2
    assert g.c == 3
    try:
        g.d
    except AttributeError:
        pass
    else:
        assert False, "should not get here"

# Generated at 2022-06-13 17:52:03.455461
# Unit test for method load of class Grammar
def test_Grammar_load():
    _ = Grammar.load
    _ = Grammar.loads

# Generated at 2022-06-13 17:52:05.889016
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    """
    The test is just the minimal code to be able to run the method.
    The pickled grammar is not tested.
    """
    grammar = Grammar()
    grammar.dump("filename")

# Generated at 2022-06-13 17:52:11.836907
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    assert True

test_Grammar_dump()

# Generated at 2022-06-13 17:52:19.116030
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.symbol2number = {'DELETE': 9, 'LPAR': 12}
    g.number2symbol = {9: 'DELETE', 12: 'LPAR'}
    g.states = [[(0, 0), (0, 1), (2, 1)], [(0, 0), (0, 1)]]
    g.dfas = {9: ([(0, 0), (0, 1), (2, 1)], {0: 1, 1: 1, 2: 1}), 12: ([(0, 0), (0, 1)], {0: 1, 1: 1})}
    g.labels = [(0, 'EMPTY'), (3, 'colon'), (2, 'DELETE'), (1, 'LPAR')]

# Generated at 2022-06-13 17:52:28.582984
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import unittest

    try:
        import shutil
        import tempfile

        tempdir = tempfile.mkdtemp()

        def clean():
            shutil.rmtree(tempdir)

    except ImportError:
        import sys
        import os

        # Python < 2.3
        tempdir = os.tmpnam()
        os.mkdir(tempdir)

        def clean():
            for name in os.listdir(tempdir):
                os.remove(os.path.join(tempdir, name))
            os.rmdir(tempdir)

    class TestGrammarDump(unittest.TestCase):

        def setUp(self) -> None:
            self.addCleanup(clean)

        def test_dump_loads(self) -> None:
            g1 = Grammar()
            g

# Generated at 2022-06-13 17:52:32.579268
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # Grammar.dump() takes a string filename, or a path-like object
    # (PathLike) - define PathLike to use it as a type hint.
    # It is an error to make PathLike an alias of str, because it should
    # also accept non-str path-like objects.
    PathLike = Text
    g = Grammar()
    g.dump("test.pkl")
    g.dump(PathLike("test.pkl"))
    g.dump(PathLike(b"test.pkl"))

# Generated at 2022-06-13 17:52:42.266943
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import pgen2
    from . import drivers

    # LD_LIBRARY_PATH is needed by the lib2to3 library if it is a
    # shared object.
    ld_library_path = os.environ.get("LD_LIBRARY_PATH")
    if ld_library_path:
        os.environ["LD_LIBRARY_PATH"] = ld_library_path + ":/usr/local/lib"

    driver = drivers.PythonDriver("2.7", b"whatever", "utf-8")
    g = pgen2.generate_grammar(driver)
    g.dump("Grammar.tables")
    h = Grammar()
    h.load("Grammar.tables")
    return h


if __name__ == "__main__":
    test_G

# Generated at 2022-06-13 17:52:53.201697
# Unit test for method load of class Grammar
def test_Grammar_load():
    """
    Test:
        Load an empty Grammar.
    """

    g = Grammar()
    assert g.async_keywords == False
    assert g.dfas == {}
    assert g.labels == [(0, "EMPTY")]
    assert g.number2symbol == {}
    assert g.keywords == {}
    assert g.states == []
    assert g.start == 256
    assert g.symbol2label == {}
    assert g.symbol2number == {}
    assert g.tokens == {}

    file = tempfile.NamedTemporaryFile(dir="/tmp")

# Generated at 2022-06-13 17:53:03.998120
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    def mock_os_replace(old, new):
        os.rename(old, new)

    filename = "test.filename"

    mock_dump_file = open(filename, 'w+')
    mock_dump_file.write('test dump file')
    # mock_dump_file will be closed when it goes out of scope

    mock_pickle_dump_file = open(filename, 'rb')
    # mock_pickle_dump_file will be closed when it goes out of scope

    class MockTempFile(object):
        def __init__(self):
            self.name = filename


# Generated at 2022-06-13 17:53:12.684429
# Unit test for method load of class Grammar
def test_Grammar_load():
    import pickle
    import pprint

    filename = "Grammar.pickle"
    f = open(filename, 'rb')
    g = pickle.load(f)

    # Test symbol2number

# Generated at 2022-06-13 17:53:17.975013
# Unit test for method load of class Grammar
def test_Grammar_load():
    # We have to build a complete grammar object, since the unpickler
    # uses the object's __class__ to determine what class it should
    # unpickle to.
    g = Grammar()
    g.load(os.path.join("Grammar", "Grammar.pickle"))



# Generated at 2022-06-13 17:53:23.023743
# Unit test for method load of class Grammar
def test_Grammar_load():
    import pgen
    import sys

    def compile_grammar(filename):
        grammar = Grammar()
        pgen.pgen(filename, grammar)
        return grammar

    g1 = compile_grammar(sys.executable)
    tmp = tempfile.NamedTemporaryFile()
    tmp.close()
    g1.dump(tmp.name)
    g2 = Grammar()
    g2.load(tmp.name)
    assert g1.states == g2.states
    assert g1.labels == g2.labels
    assert g1.start == g2.start

# Generated at 2022-06-13 17:53:36.165950
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    def test():
        g = Grammar()
        g.symbol2number = {")": 1, "*": 2}
        g.number2symbol = {1: ")", 2: "*"}
        g.states = [[[(0, 1)], [(2, 3), (1, 2), (0, 1)]]]
        g.dfas = {0: ([[(0, 1)], [(2, 3), (1, 2), (0, 1)]], {0: 1}), 1: ([[(2, 3)]], {0: 1})}
        g.labels = [(0, "EMPTY"), (2, "*"), (1, ")")]
        g.keywords = {}
        g.tokens = {1: 2}

# Generated at 2022-06-13 17:53:46.333739
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    assert g.async_keywords is False
    assert g.keywords == {}
    assert g.number2symbol == {}
    assert g.start == 256
    assert g.states == []
    assert g.symbol2label == {}
    assert g.symbol2number == {}
    assert g.tokens == {}

    g.load("Lib/pygram/Grammar.pkl")
    assert g.async_keywords is False
    assert g.keywords == {'False': 8, 'None': 9, 'True': 10, 'nonlocal': 39}

# Generated at 2022-06-13 17:53:57.216627
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # Unit test for method dump of class Grammar
    # This is based on Lib/test/test_parser.py
    from unittest import TestCase, main

    from . import conv, pgen

    class TestGrammar(TestCase):
        def test_dump(self):
            grammar = conv.parse(
                pgen.pgen("Grammar/Grammar").read(),
                pgen.pseq("Grammar/Grammar").read(),
            )
            grammar.dump("Grammar/Grammar.pickle")
            grammar2 = Grammar()
            grammar2.load("Grammar/Grammar.pickle")
            self.assertEqual(grammar.__dict__, grammar2.__dict__)
            # Try a pickle of a different protocol
            grammar3 = Grammar()


# Generated at 2022-06-13 17:53:59.116976
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.dump('GrammarTest')

# Generated at 2022-06-13 17:54:02.390607
# Unit test for method load of class Grammar
def test_Grammar_load():
    grammar = Grammar()
    grammar.load(
        os.path.join(os.path.dirname(__file__), "Grammar.pkl")
    )  # type: ignore

# Generated at 2022-06-13 17:54:12.954998
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import os
    import pgen2.parse
    import pgen2.driver

    os.environ["PGEN"] = "pgen2/python.pgen"
    g = pgen2.parse.generate_grammar("3.4")
    pgen2.driver.save_grammar(g, "test_Grammar_dump.pickle")
    with open("test_Grammar_dump.pickle", "rb") as f:
        pickle_data = f.read()
    assert pickle_data

    # confirm that the pickle file is loadable
    g2 = pgen2.parse.generate_grammar("3.4")
    g2.load("test_Grammar_dump.pickle")


if __name__ == "__main__":
    test_Grammar_dump

# Generated at 2022-06-13 17:54:21.980940
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import sys
    import unittest
    from test.support import captured_stdout, captured_stderr

    from _ast import PyCF_ONLY_AST

    class GrammarTest(unittest.TestCase):
        def test_Grammar_dump(self):
            ### Create Grammar object
            g = Grammar()

            ### fp.write() is called by dump_grammar()
            sys.stdout.write = self.mywrite

            ### Write to a local file
            with captured_stdout() as stdout:
                g.dump("test/g.pkl")

            ### Load from the local file
            with captured_stderr() as stderr:
                g.load("test/g.pkl")

            ### Test the invalid Grammar dump and load

# Generated at 2022-06-13 17:54:26.631968
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    grammar = Grammar()
    grammar.symbol2number['foo'] = 2
    grammar.number2symbol[2] = 'foo'
    grammar.states = []
    grammar.dfas = {}
    grammar.labels = [(0, 'EMPTY')]
    grammar.keywords = {}
    grammar.tokens = {}
    grammar.symbol2label = {}
    grammar.start = 256
    grammar.async_keywords = False
    grammar.dump(tempfile.mkdtemp() + '/foo')

# Generated at 2022-06-13 17:54:34.409054
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import os
    import tempfile

    class TestGrammar(Grammar):
        pass

    # Test normal operation of dump method
    TestGrammar().dump(os.path.join(tempfile.tempdir, "example.pkl"))

    # Test the case where tempfile.NamedTemporaryFile() raises OSError
    tempfile.NamedTemporaryFile = lambda **kwargs: OSError()

    # Test when os.replace() raises OSError
    os.replace = lambda old, new: OSError()

    # Test when OSError is raised in both cases
    TestGrammar().dump(os.path.join(tempfile.tempdir, "example.pkl"))

# Generated at 2022-06-13 17:54:44.051318
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    class MockGrammar(Grammar):
        def __init__(self):
            Grammar.__init__(self)
            self.symbol2number = {
                "foo": 1,
                "bar": 2,
                "baz": 3,
                "qux": 4,
                "quux": 5,
            }
            self.number2symbol = {
                1: "foo",
                2: "bar",
                3: "baz",
                4: "qux",
                5: "quux",
            }

# Generated at 2022-06-13 17:54:55.074761
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import pgen2
    from .pgen2 import tokenize
    from .pygram import python_grammar_no_print_statement

    g = pgen2.parse(python_grammar_no_print_statement, "Grammar")
    filename = os.path.join(tempfile.gettempdir(), "test_Grammar_dump.pickle")
    try:
        g.dump(filename)
        g2 = Grammar()
        g2.load(filename)
        assert g == g2
    finally:
        if os.path.exists(filename):
            os.unlink(filename)


# Generated at 2022-06-13 17:54:56.881712
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.dump("pygram.pickle")

    with open("pygram.pickle", "rb") as f:
        assert f.read()

# Generated at 2022-06-13 17:54:58.070866
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    grammar = Grammar()
    grammar.dump("parser.pkl")

# Generated at 2022-06-13 17:55:09.076597
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    def contains_key(d, name):
        return name in d

    def load_or_restore(cls):
        """Load the grammar tables from a pickle file."""
        d = {}
        assert contains_key(d, 'symbol2number')
        assert contains_key(d, 'number2symbol')
        assert contains_key(d, 'states')
        assert contains_key(d, 'dfas')
        assert contains_key(d, 'labels')
        assert contains_key(d, 'keywords')
        assert contains_key(d, 'tokens')
        assert contains_key(d, 'symbol2label')
        assert contains_key(d, 'start')
        assert contains_key(d, 'async_keywords')
        return d


# Generated at 2022-06-13 17:55:13.022231
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    assert not g.symbol2number
    assert not g.number2symbol
    assert not g.states
    assert not g.dfas
    assert g.labels == [(0, 'EMPTY')]
    assert not g.keywords
    assert not g.tokens
    assert not g.symbol2label

# Generated at 2022-06-13 17:55:17.850459
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    def _mock_dump(self, filename: str) -> None:
        self.filename = filename

    _Grammar = Grammar

    class Grammar(Grammar):
        def dump(self, filename: Path) -> None:
            self.filename = filename

    Grammar.dump = _mock_dump
    try:
        g = Grammar()
        g.dump("my.pkl")
        assert g.filename == "my.pkl"
    finally:
        Grammar = _Grammar


# Generated at 2022-06-13 17:55:27.034803
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import unittest
    import importlib
    import sys

    class GrammarDumpTest(unittest.TestCase):
        def test_Grammar_dump(self):
            with tempfile.TemporaryDirectory() as tdir:
                grammars = importlib.import_module("grammar_spec", package="pgen2")
                for key, value in grammars.__dict__.items():
                    if key.endswith("GramSpec"):
                        grammar = getattr(grammars, key)()
                        grammar.dump(os.path.join(tdir, grammar.name + ".pkl"))
                        I1 = Grammar()
                        I1.load(os.path.join(tdir, grammar.name + ".pkl"))
                        I2 = Grammar()

# Generated at 2022-06-13 17:55:37.730248
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import pytest
    from io import BytesIO

    g = Grammar()
    g.symbol2number["foo"] = 999
    g.number2symbol[42] = "bar"
    g.states = [[[(0, 1)]], [[(1, 2)]]]
    g.dfas[0] = g.states[0], {42: 42}
    g.labels = [(0, "EMPTY"), (1, None), (3, "for")]
    g.keywords = {"for": 3}
    g.tokens = {42: 1}
    g.symbol2label["baz"] = 8

    s = BytesIO()
    g.dump(s)
    s.seek(0)
    g.load(s)

    assert g.symbol2number["foo"]

# Generated at 2022-06-13 17:55:47.914872
# Unit test for method load of class Grammar
def test_Grammar_load():
    class Grammar2(Grammar):
        pass

    p               = Grammar2()
    p.states        = [[[(1, 1)], [(2, 2)], [(3, 3)]]]
    p.async_keywords = True
    p.labels        = [(0, "EMPTY"), (1, "symbol"), (2, "token"), (3, "keyword")]
    p.symbol2number = {'symbol': 256, 'token': 257, 'keyword': 258}
    p.number2symbol = {256: 'symbol', 257: 'token', 258: 'keyword'}

# Generated at 2022-06-13 17:55:57.499548
# Unit test for method load of class Grammar
def test_Grammar_load():
    # Pickle file with pre-calculated grammar tables
    import zipfile
    with zipfile.ZipFile("Lib/test/pickletester/data.zip") as f:
        with f.open("Grammar_pickle") as fp:
            data = fp.read()
    # Create a Grammar instance
    import pickle
    d = pickle.loads(data)
    g = Grammar()
    g._update(d)
    # Check consistency of computed tables
    assert g.symbol2number["'try_stmt'"] == g.symbol2number["try_stmt"]
    assert g.symbol2number["'try_stmt'"] == 261
    assert g.number2symbol[261] == "try_stmt"
    assert len(g.states) == 165

# Generated at 2022-06-13 17:56:12.760467
# Unit test for method load of class Grammar
def test_Grammar_load():
    gram = Grammar()
    assert len(gram.symbol2number) == 0
    assert len(gram.number2symbol) == 0
    assert len(gram.states) == 0
    assert len(gram.dfas) == 0
    assert len(gram.labels) == 1
    assert len(gram.keywords) == 0
    assert len(gram.tokens) == 0


# Generated at 2022-06-13 17:56:16.930048
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import cPickle as pickle
    import os
    import tempfile
    import unittest

    class DictGrammar(Grammar):
        def __init__(self) -> None:
            Grammar.__init__(self)
            self.symbol2number = {'foo': 1, 'bar': 2}
            self.number2symbol = {1: 'foo', 2: 'bar'}
            self.states = [[[], [[(1, 1)]]], [[(2, 0)]]]
            self.dfas = {1: (self.states[0], {1: 1}), 2: (self.states[1], {2: 1})}
            self.labels = [(0, 'EMPTY'), (token.NAME, 'foo'), (token.NAME, 'bar')]
            self.key

# Generated at 2022-06-13 17:56:18.830415
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    reload(pickle)
    g.loads(pickle.dumps(g))

# Generated at 2022-06-13 17:56:26.942836
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import conv
    from .conv import GrammarConverter
    from .pgen import GrammarParser
    from . import pygram

    conv_grammar = conv.GrammarConverter(pygram.python_grammar)
    conv_grammar.convert()
    parser = GrammarParser(conv_grammar.grammar)
    parser.parse()

    tf = tempfile.NamedTemporaryFile(delete=False)
    try:
        parser.grammar.dump(tf.name)
        with open(tf.name, "rb") as f:
            d = pickle.load(f)
    finally:
        tf.close()
        os.remove(tf.name)


# Generated at 2022-06-13 17:56:32.753643
# Unit test for method load of class Grammar
def test_Grammar_load():
    import io

    from . import pgen2

    def NUM(i):
        return (1, i)

    def SYM(name):
        return (0, name)

    # NS1: no start symbol
    # DFA1: no keywords
    # DFA2: with keywords
    # NS2: empty states

    NS1 = pgen2.Grammar()
    NS1.start = 256
    NS1.states = [
        # Even though this is an empty DFA, the number is still
        # significant.
        [],
        [
            [SYM("number"), NUM(2)],
            [SYM("name"), NUM(1)],
            [SYM("period"), NUM(0)],
        ],
    ]

# Generated at 2022-06-13 17:56:42.175440
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.start = 256
    g.dfas = {}
    g.symbol2number = {"A": 256}
    g.number2symbol = {256: "A"}
    g.states = [
        [
            [(257, 2), (0, 1)],
            [],
            [(258, 3), (0, 4)],
            [],
            [],
        ]
    ]
    g.labels = [
        (0, None),
        (257, "A"),
        (258, None),
        (258, "A"),
        (257, "B"),
        (257, "C"),
    ]
    g.keywords = {}

    g.tokens = {
        57: 5,
        58: 6,
    }

    g.symbol

# Generated at 2022-06-13 17:56:50.038521
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # simple test of Grammar.dump
    g = Grammar()
    g.dump("pgen_test.pkl")
    g2 = Grammar()
    g2.load("pgen_test.pkl")
    assert g2.symbol2number == g.symbol2number
    assert g2.number2symbol == g.number2symbol
    assert g2.states == g.states
    assert g2.dfas == g.dfas
    assert g2.labels == g.labels
    assert g2.start == g.start
    os.unlink("pgen_test.pkl")

# Generated at 2022-06-13 17:56:58.771566
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import unittest
    import pgen2.pgen
    import pgen2.parse
    import pgen2.token

    # Test Grammar dump()
    g = pgen2.pgen.generate_grammar('Parser/Grammar', '3.2')
    g.dump('Parser/Grammar.txt')
    parse = pgen2.parse.Parser(g)

    # Test tokenize
    stream = pgen2.tokenize.generate_tokens(pgen2.tokenize.io.BytesIO(b'\xae').readline)
    stream = list(stream)
    assert stream == [(pgen2.token.NUMBER, '\xae', (1, 0), (1, 1), '\n')]

    # Test Grammar loads()
    h = pgen2.G

# Generated at 2022-06-13 17:57:04.521296
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # Call the method under test
    g = Grammar()
    # This is just to make this function pass mypyc static type
    # checks; it doesn't matter what the values are since they aren't
    # used in the dump() method
    g.symbol2number = {"a": 1}
    g.number2symbol = {1: "a"}
    g.states = [[[(0, 1)]]]
    g.dfas = {0: (0, {})}
    g.labels = [(0, None)]
    g.keywords = {}
    g.tokens = {}
    g.symbol2label = {}
    g.start = 1
    g.dump("dummy_filename.bin")

# Generated at 2022-06-13 17:57:18.059544
# Unit test for method load of class Grammar
def test_Grammar_load():
    grammar = Grammar()
    grammar.load("../../Grammar/Grammar")
    if grammar.symbol2number is None:
        print("## Grammar.symbol2number was None, instead of a dict.")
    if grammar.number2symbol is None:
        print("## Grammar.number2symbol was None, instead of a dict.")
    if grammar.states is None:
        print("## Grammar.states was None, instead of a list.")
    if grammar.dfas is None:
        print("## Grammar.dfas was None, instead of a dict.")
    if grammar.labels is None:
        print("## Grammar.labels was None, instead of a list.")
    if grammar.keywords is None:
        print("## Grammar.keywords was None, instead of a dict.")

# Generated at 2022-06-13 17:57:33.045663
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.dump("pgen_test.pickle")


if __name__ == "__main__":
    import sys

    g = Grammar()

    if sys.argv[1] == "-d":
        g.report()
    elif sys.argv[1] == "-r":
        g.load(sys.argv[2])
        g.report()
    else:
        filename = sys.argv[1]
        print("Writing grammar tables to %s" % filename)
        g.dump(filename)

# Generated at 2022-06-13 17:57:41.940330
# Unit test for method load of class Grammar

# Generated at 2022-06-13 17:57:49.094391
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    gr = Grammar()
    filename = "test_Grammar_dump.pkl"
    # dump the empty Grammar object to a pickle file
    gr.dump(filename)
    # restore the Grammar object from the pickle file
    gr = Grammar()
    gr.load(filename)
    # remove the pickle file
    os.remove(filename)

# Generated at 2022-06-13 17:57:59.381166
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    # This needs to be a real file in order to test that dump fails
    # with a read-only file.
    fname = os.path.join(os.path.dirname(__file__), "Grammar.pickle")
    g.load(fname)

    try:
        os.unlink(fname)
    except OSError:
        pass

    f = open(fname, 'wb')
    try:
        os.chmod(fname, 0o444) # Make read only
        g.dump(fname)
    finally:
        os.chmod(fname, 0o644)
        f.close()
        os.unlink(fname)



# Generated at 2022-06-13 17:58:07.127083
# Unit test for method load of class Grammar
def test_Grammar_load():
    class TestGrammar(Grammar):
        def __init__(self):
            super().__init__()
            self.symbol2number = {'key1': 1}
            self.states = [[(1, 0)]]

    g = TestGrammar()
    assert g.symbol2number == {'key1': 1}
    assert g.states == [[(1, 0)]]

    g.load('file_that_does_not_exist.pkl')


if __name__ == "__main__":
    test_Grammar_load()
    print("Tests completed")

# Generated at 2022-06-13 17:58:16.359157
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import pickletools
    from . import pgen2
    import inspect
    import sys

    parser_name = "Python" + ".".join(str(i) for i in sys.version_info[:2])
    grammar_filename = f"Grammar/{parser_name}.grammar"
    tables_filename = f"Grammar/{parser_name}.tables"

    # Regression test: ensure the grammar files are complete.
    assert all(
        "XXX" not in line
        for line in open(f"Grammar/{parser_name}.grammar")
        if not line.startswith("#")
    )

# Generated at 2022-06-13 17:58:19.372156
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    filename = "/tmp/tmpgrammar.pickle"
    grammar = Grammar()
    grammar.dump(filename)
    grammar2 = Grammar()
    grammar2.load(filename)
    assert grammar.__dict__ == grammar2.__dict__
    os.remove(filename)

# Generated at 2022-06-13 17:58:23.720607
# Unit test for method load of class Grammar
def test_Grammar_load():
    filename = os.path.join(os.path.dirname(__file__), "Grammar.pickle")
    gram = Grammar()
    gram.load(filename)
    print(gram)

if __name__ == "__main__":
    test_Grammar_load()

# Generated at 2022-06-13 17:58:28.937352
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import tempfile

    class Dummy(Grammar):
        pass

    dummy = Dummy()
    test_filename = tempfile.mktemp()
    with open(test_filename, "rb") as f:
        dummy.loads(f.read())
    os.unlink(test_filename)

# Generated at 2022-06-13 17:58:31.701535
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.dump("/tmp/foo.pickle")

# Generated at 2022-06-13 17:58:47.354697
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # Create Grammar
    grammar = Grammar()
    grammar.symbol2number = {"foo": 3}
    grammar.number2symbol = {1: "bar"}
    grammar.states = [[(0, 1), (2, 10), (3, 10)], [(0, 2)], [(0, 3)]]
    grammar.dfas = {1: ([(0, 1), (2, 10), (3, 10)], {2: 3}),
                    2: ([(0, 2)], {1: 2}),
                    3: ([(0, 3)], {1: 2})}
    grammar.labels = [(0, "EMPTY"), (1, None), (2, "baz"), (3, "qux")]
    grammar.start = 5

# Generated at 2022-06-13 17:58:51.985286
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import pgen2 as pgen2_module

    gr = Grammar()
    # Extract the grammar tables, based on the grammar of the Python
    # language, from the file Python.asdl (produced by running
    # Parser/asdl_c.py on Python.asdl).
    pgen2_module.driver.run_pgen(gr, "Grammar/Grammar", pgen2_module)
    # Dump the grammar tables to the pickle file Python3.1.pickle,
    # using the highest available protocol.
    gr.dump("Python3.1.pickle")

# Generated at 2022-06-13 17:59:01.012350
# Unit test for method load of class Grammar

# Generated at 2022-06-13 17:59:03.948424
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from shutil import copy
    from stat import S_IWRITE as WRITE_FLAG

    grammar = Grammar()
    filename = "test.pickle"
    grammar.dump(filename)
    os.chmod(filename, WRITE_FLAG)
    copy(filename, filename + ".bak")
    os.unlink(filename)

# Generated at 2022-06-13 17:59:15.036022
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import re
    import types
    import unittest
    from . import pgen2

    saved_files = []

    def new_dump(*args, **kwargs):
        # mypyc generates objects that don't have a __dict__, but they
        # do have __getstate__ methods that will return an equivalent
        # dictionary
        if hasattr(args[0], "__dict__"):
            the_dict = args[0].__dict__
        else:
            the_dict = args[0].__getstate__()  # type: ignore
        saved_files.append(the_dict)
        args[0].dump(*args[1:], **kwargs)


# Generated at 2022-06-13 17:59:26.580549
# Unit test for method load of class Grammar
def test_Grammar_load():
    gr = Grammar()
    gr.start = 1
    gr.dfas = {3: ([[(2, 3), (4, 6)], [(3, 3), (2, 5)]], {3:1}), 5: ([[(2, 5), (3, 6)]], {})}
    gr.labels = [(1, None), (2, None), (3, None), (4, None)]
    gr.tokens = {1:1}
    gr.keywords = {'from':2}
    gr.number2symbol = {3: 'from', 5: 'x'}
    gr.symbol2number = {'from': 3, 'x': 5}
    gr.async_keywords = True
    gr.states = []

# Generated at 2022-06-13 17:59:27.817609
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.dump("somefile")

# Generated at 2022-06-13 17:59:37.573123
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import tempfile
    import sys
    import os
    tmpfile = tempfile.NamedTemporaryFile(delete=False)
    if sys.platform == "win32":
        # On Windows, NamedTemporaryFile() creates a file that cannot
        # be opened a second time by another process. So we close it
        # before opening it with the Python parser.
        tmpfile.close()
    filename = tmpfile.name
    del tmpfile
    try:
        t = Grammar()
        t.dump(filename)
        t = Grammar()
        t.load(filename)
    finally:
        os.unlink(filename)

if __name__ == "__main__":
    test_Grammar_dump()