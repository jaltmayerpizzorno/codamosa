

# Generated at 2022-06-14 01:55:03.456133
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    import sys
    import astor

# Generated at 2022-06-14 01:55:06.623431
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from ..utils.fixtures import make_test_module
    import future


# Generated at 2022-06-14 01:55:14.652400
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    expected_ast = compile(sources[0], '<string>', 'exec', ast.PyCF_ONLY_AST)
    expected_ast = ast.fix_missing_locations(expected_ast)  # type: ignore
    actual_ast = compile('', '<string>', 'exec', ast.PyCF_ONLY_AST)
    actual_ast = ast.fix_missing_locations(actual_ast)  # type: ignore
    transformer = Python2FutureTransformer()
    actual_ast = transformer.visit(actual_ast)  # type: ignore
    assert ast.dump(actual_ast, include_attributes=False) == ast.dump(expected_ast, include_attributes=False)


# Generated at 2022-06-14 01:55:25.644650
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    import astor

    class FakePython2FutureTransformer(Python2FutureTransformer):
        def generic_visit(self, node: ast.AST) -> ast.AST:
            assert len(node.body) == 9, "Wrong number of imports"
            for i, imp in enumerate(node.body):
                assert isinstance(imp, ast.ImportFrom)
                assert imp.module == 'future'
                assert len(imp.names) == 1
                assert imp.names[0].name == 'absolute_import'
                assert imp.names[0].asname == imp.names[0].name
            return node

    # module with following body generated using astor.code_to_ast
    module_tree = astor.code_to_ast("import os\nimport sys")
    module_tree = ast.fix_missing_loc

# Generated at 2022-06-14 01:55:26.560585
# Unit test for method visit_Module of class Python2FutureTransformer

# Generated at 2022-06-14 01:55:39.909738
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast import ast3 as ast
    from ..transpile import transpile
    from ..compat import is_python2

    if not is_python2():
        source = """
            # Comment
            class MyClass(object):
                pass
        """
    else:
        source = """
            # Comment
            class MyClass(object):
                pass
        """
    expected = """
            # Comment
            from __future__ import absolute_import
            from __future__ import division
            from __future__ import print_function
            from __future__ import unicode_literals
            class MyClass(object):
                pass
    """
    tree = transpile(source)
    assert ast.dump(tree) == expected

# Generated at 2022-06-14 01:55:50.361987
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from ..utils import test_utils as tu
    from . import test_utils as tut

    def test(code, expected):
        node = tut.parse_module(code)
        new_node = Python2FutureTransformer().visit(node)
        new_code = tu.to_source(new_node)
        assert new_code == expected
    
    test('import os',
         '\n'.join([
            'from __future__ import absolute_import',
            'from __future__ import division',
            'from __future__ import print_function',
            'from __future__ import unicode_literals',
            'import os',
         ]))

# Generated at 2022-06-14 01:55:52.550722
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    import astor  # type: ignore
    from typed_ast.ast3 import parse  # type: ignore

# Generated at 2022-06-14 01:55:58.955593
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    # Arrange
    module = ast.parse("a=b")  # type: ignore
    module.body = [ast.Assign(targets=[ast.Name(id='a', ctx=ast.Store())], value=ast.Num(n=1))]  # type: ignore

    # Act
    transformer = Python2FutureTransformer()
    transformer.visit(module)  # type: ignore
    code = compile(module, '<test>', 'exec')
    exec(code)

    # Assert
    assert a==1
    assert unicode_literals  # type: ignore

# Generated at 2022-06-14 01:56:08.797296
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():

    # AST generated by python3 -m ast "from __future__ import absolute_import"
    node = ast.Module(
        body=[
            ast.ImportFrom(
                module='__future__',
                names=[ast.alias(name='absolute_import', asname=None)],
                level=0
            )
        ],
        type_ignores=[]
    )

    # Run test
    t = Python2FutureTransformer()
    new_node = t.visit(node)
    assert new_node.type_ignores == []  # type: ignore
    assert len(new_node.body) == 5  # type: ignore
    assert new_node.body[0].names[0].name == 'absolute_import'  # type: ignore

# Generated at 2022-06-14 01:56:17.148150
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from ..utils import ast_transformer_test
    from .stubs import SimpleASTStub

    source = "pass"
    output = "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\npass\n"
    ast_transformer_test(Python2FutureTransformer(SimpleASTStub()), source, output)

# Generated at 2022-06-14 01:56:19.271864
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast import ast3 as ast
    from astor import dump


# Generated at 2022-06-14 01:56:22.563313
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    """Test for method visit_Module of class Python2FutureTransformer."""
    transformer = Python2FutureTransformer()
    assert transformer._tree_changed == False

# Generated at 2022-06-14 01:56:33.376455
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    module = ast.parse("def foo():\n pass")
    transformer = Python2FutureTransformer()
    node = transformer.visit(module)
    assert transformer._tree_changed == True  # pylint: disable=protected-access
    assert isinstance(node, ast.Module)
    assert isinstance(node.body[0], ast.ImportFrom)
    assert node.body[0].module == '__future__'
    assert node.body[0].names[0].name == 'absolute_import'
    assert node.body[1].names[0].name == 'division'
    assert node.body[2].names[0].name == 'print_function'
    assert node.body[3].names[0].name == 'unicode_literals'
    assert node.body[4].names[0].name == 'foo'

# Generated at 2022-06-14 01:56:35.002885
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    trans = Python2FutureTransformer()


# Generated at 2022-06-14 01:56:40.195666
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    def check_code(code, expected):
        node = ast.parse(code, '<string>', 'exec')
        t = Python2FutureTransformer()
        tree_changed = t(node)
        assert ast.dump(node, annotate_fields=False) == expected
        return tree_changed

    assert check_code(
        'import six',
        'from __future__ import absolute_import\n'
        'from __future__ import division\n'
        'from __future__ import print_function\n'
        'from __future__ import unicode_literals\n'
        'import six')



""" Disabled content
"""

# Generated at 2022-06-14 01:56:50.562991
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    module = ast.parse('a = 1', '<string>')
    transformer = Python2FutureTransformer()
    module = transformer.visit(module)  # type: ignore
    assert transformer._tree_changed is True
    assert module.body[0].names[0] == 'absolute_import'
    assert module.body[1].names[0] == 'division'
    assert module.body[2].names[0] == 'print_function'
    assert module.body[3].names[0] == 'unicode_literals'
    assert module.body[4].targets[0].id == 'a'
    assert module.body[4].value.n == 1

# Generated at 2022-06-14 01:56:58.696198
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from .. import parse

    node = parse('import py2_transformed_module')
    transformer = Python2FutureTransformer()
    node = transformer.visit(node)
    assert transformer.tree_changed
    expected = '\n'.join([
        "from __future__ import (absolute_import, division, print_function, unicode_literals)",
        "",
        "import py2_transformed_module",
    ])
    assert expected == transformer.dump_ast(node)

# Generated at 2022-06-14 01:56:59.961401
# Unit test for method visit_Module of class Python2FutureTransformer

# Generated at 2022-06-14 01:57:03.196880
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    module = ast.parse('import os\ndef test():\n    pass')
    module = Python2FutureTransformer().visit(module)
    assert 'print_function' in ast.dump(module)

# Generated at 2022-06-14 01:57:12.798357
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from .fixtures import make_test_function
    make_test_function(Python2FutureTransformer, "Python2FutureTransformer.visit_Module")


# Generated at 2022-06-14 01:57:23.150725
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast import parse
    from typed_ast.ast3 import parse as ast3_parse
    from typed_ast.ast3 import Module as ast3_Module
    from typed_ast.ast3 import Assign as ast3_Assign
    from typed_ast.ast3 import Name as ast3_Name
    from typed_ast.ast3 import Store as ast3_Store
    from typed_ast.ast3 import NameConstant as ast3_NameConstant
    from typed_ast.ast3 import Int as ast3_Int
    from typed_ast.ast3 import Expr as ast3_Expr
    from typed_astunparse import unparse
    from ..utils.snippet import snippet
    from ..common import set_transformer


# Generated at 2022-06-14 01:57:25.274151
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    tr_2_7 = Python2FutureTransformer()
    assert tr_2_7.target == (2, 7)

# Generated at 2022-06-14 01:57:30.548119
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    test_module = ast.parse('a = 5')
    res = ast.dump(test_module)

    # checking if the result of the converted class test_module matches the expected
    assert res == "Module(body=[Assign(targets=[Name(id='a', ctx=Store())], value=Num(n=5))])"

# Generated at 2022-06-14 01:57:31.862488
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    Python2FutureTransformer()

# Generated at 2022-06-14 01:57:34.670171
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    t = Python2FutureTransformer()
    assert t.target == (2, 7)



# Generated at 2022-06-14 01:57:43.677879
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    source = "print(1, 2)"
    expected = """
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
print(1, 2)
"""
    Python2FutureTransformer().test(source, expected)
    # import astor
    # print(astor.to_source(new_module))
    # print(new_module)

# Generated at 2022-06-14 01:57:54.444078
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    from ..main import main
    from .core import pipeline
    from ..utils.fixtures import RegressionFrom2Fixture
    from ..utils.source import source
    from ..utils.target import target
    import sys

    source = source(__file__)
    target = target(__file__)
    input = """
        print('# python2future')
    """
    expected = """
        from __future__ import absolute_import
        from __future__ import division
        from __future__ import print_function
        from __future__ import unicode_literals

        print('# python2future')
    """
    data = RegressionFrom2Fixture(input=input, expected=expected)
    data.meta.update(source=source, target=target)
    main(pipeline, data)
    assert data.actual == data.expected

# Generated at 2022-06-14 01:57:55.389008
# Unit test for method visit_Module of class Python2FutureTransformer

# Generated at 2022-06-14 01:57:57.239354
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    t = Python2FutureTransformer(is_verbose=True)
    assert isinstance(t, Python2FutureTransformer)

# Generated at 2022-06-14 01:58:11.153747
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from .test_utils import check
    from ..unparse import Unparser
    from ..utils.ast_print import tree_to_string
    tree = ast.parse('import json')
    transformer = Python2FutureTransformer()
    new_tree = transformer.visit(tree)
    assert transformer._tree_changed == True
    check(new_tree, tree_to_string(new_tree))
    Unparser(new_tree)
    check(new_tree, '''from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import json''')

# Generated at 2022-06-14 01:58:18.875163
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast.ast3 import Module
    from ..utils.snippet import snippet as snippet_

    example_python2 = """
    #! /usr/bin/env python
    print('This is a Python 2 script.')
    """

    expected_python2 = """
    from __future__ import absolute_import
    from __future__ import division
    from __future__ import print_function
    from __future__ import unicode_literals
    #! /usr/bin/env python
    print('This is a Python 2 script.')
    """

    # Test that the example Python 2 code snippet is transformed into the correct code
    assert Python2FutureTransformer(
        Module(body=snippet_(example_python2).get_body())
    ).visit().get_body() == snippet_(expected_python2).get_body()

# Generated at 2022-06-14 01:58:22.044832
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast import ast3 as ast
    from .base import BaseNodeTransformer
    from ..utils.ast import compare_ast
    import sys
    import io

# Generated at 2022-06-14 01:58:28.961519
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from ..utils import ast_parse
    from ..utils.location import CodeLocation
    from .preprocessor import ModulePreprocessor

    prep = ModulePreprocessor()
    prep.add(Python2FutureTransformer)
    module = prep.process(
        ast_parse("print('hello')"),
        CodeLocation('(string)', '__main__'),
    )
    assert module.body == imports.get_body(future='__future__') +\
        [ast_parse("print('hello')")]


# Generated at 2022-06-14 01:58:30.718024
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    import sys; sys.modules['future'] = sys.modules['__future__']
    Python2FutureTransformer()

# Generated at 2022-06-14 01:58:34.436047
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    # Create an instance of Python2FutureTransformer
    transformer = Python2FutureTransformer()

    # Make sure the superclass constructor works by checking the
    # name attribute of the instance.
    assert transformer.name == 'Python2FutureTransformer'


# Generated at 2022-06-14 01:58:38.440908
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from ..test_transformer import should_transform

    before = """
import sys

a = 1
""".strip()

    after = """
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import sys

a = 1
""".strip()

    transformer = Python2FutureTransformer()
    should_transform(transformer, before, after, target=(2, 7))

# Generated at 2022-06-14 01:58:47.782182
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from ..common import PythonFile, PythonSnippet
    import textwrap
    from ..common import DummyVisitor
    t = Python2FutureTransformer()
    snippet = textwrap.dedent("""\
    a = 5
    print("awesome")""")
    out = t.visit(PythonSnippet(snippet, 'test.py').ast)
    assert type(out) == ast.Module
    assert out.body == imports.get_body(future='__future__') + [
        ast.Assign([ast.Name('a')], ast.Num(5)),
        ast.Print(None, [ast.Str('awesome')], True),
    ]

# Generated at 2022-06-14 01:58:57.711130
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast import ast3 as ast
    from ..utils.test import TestCase
    from .transpiler import Transpiler

    class TestTranspiler(Transpiler):
        pass

    transpiler = TestTranspiler(version=(2, 7))
    module = ast.Module(
        body=[
            ast.Expr(
                value=ast.Str(s='Hello world!')
            )
        ]
    )

    module = transpiler.visit(module)

    assert module.body[0].value.s == 'from __future__ import absolute_import'
    assert module.body[1].value.s == 'from __future__ import division'
    assert module.body[2].value.s == 'from __future__ import print_function'

# Generated at 2022-06-14 01:59:09.809833
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    node = ast.parse('import os')
    ast.fix_missing_locations(node)

    # Perform transformation
    Python2FutureTransformer().visit(node)

    # Check

# Generated at 2022-06-14 01:59:24.672392
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    # create a class
    transformer = Python2FutureTransformer()
    assert transformer is not None



# Generated at 2022-06-14 01:59:26.151293
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    # Given:
    from typed_ast.ast3 import parse

# Generated at 2022-06-14 01:59:36.044011
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    code = "a = 2"
    tree = ast.parse(code)
    Python2FutureTransformer(tree).visit(tree)

# Generated at 2022-06-14 01:59:39.851673
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    import astor
    node = Python2FutureTransformer().visit(ast.parse("""print('hello')"""))
    assert astor.to_source(node) == """from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

print('hello')"""

# Generated at 2022-06-14 01:59:44.835757
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    import sys
    from ast import parse
    from ast import Module
    code = """
x = 1
y = 2
    """
    tree = parse(code)

# Generated at 2022-06-14 01:59:46.673617
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    import astor

# Generated at 2022-06-14 01:59:49.136922
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    assert Python2FutureTransformer().visit(
        ast.parse('')
    ).body == imports.get_body(future='__future__')



# Generated at 2022-06-14 01:59:54.895239
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    node = ast.parse("", mode="exec")
    f = Python2FutureTransformer()
    new_node = f.visit(node)
    assert repr(new_node) == "<Module [<ImportFrom future='__future__' level=0 names=[<alias name='absolute_import' asname=None>, <alias name='division' asname=None>, <alias name='print_function' asname=None>, <alias name='unicode_literals' asname=None>]>]>"

# Generated at 2022-06-14 01:59:59.103882
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    import astor
    tree = ast.parse("""
    @mydecorator
    def my_func(x):
        return x + 1
    """)
    astor.dump_tree(tree)
    tree = Python2FutureTransformer().visit(tree)
    print(astor.to_source(tree))

# Generated at 2022-06-14 02:00:05.772902
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from ..utils import assert_equal_ast

    source = """import x"""
    expected = """from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import x"""
    node = ast.parse(source, mode='exec')
    transformer = Python2FutureTransformer()
    newnode = transformer.visit(node)
    assert_equal_ast(newnode, ast.parse(expected))

# Generated at 2022-06-14 02:00:34.959080
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    trans = Python2FutureTransformer()
    # trans.visit(ast.parse('a = 1 + 2\na'))
    print(trans.visit(ast.parse('a = 1 + 2\na')))

# Generated at 2022-06-14 02:00:45.416650
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from ..utils.source_transform_test import (
        SourceTransformTestCase,
        Source,
        AssertFutureImport,
    )

    class Test(SourceTransformTestCase):
        transformer = Python2FutureTransformer

# Generated at 2022-06-14 02:00:49.192043
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from  _fixtures.py2 import before, after
    from transform.future_transformer import Python2FutureTransformer
    actual = Python2FutureTransformer.run_test(before, after)
    assert actual == after

# Generated at 2022-06-14 02:00:51.499614
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    """
    Constructor of class Python2FutureTransformer.
    """
    t = Python2FutureTransformer()
    assert t._tree_changed == False



# Generated at 2022-06-14 02:01:02.115339
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    module = ast.parse('def foo(): pass')

    module = Python2FutureTransformer.visit(module)  # type: ignore


# Generated at 2022-06-14 02:01:07.510160
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast import ast3 as ast
    module = ast.parse("from os import path")
    transformer = Python2FutureTransformer()
    assert transformer.visit(module)
    assert transformer.tree_changed is True

# Generated at 2022-06-14 02:01:14.860333
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast import ast3 as ast
    from ..utils.snippet import snippet
    from .base import BaseNodeTransformer

    code = '''
    def foo(x):
        return x*x
        
    '''
    node = ast.parse(code, mode='eval')
    trans = Python2FutureTransformer()
    trans.visit(node)
    assert code == snippet(trans.module).strip()  # type: ignore

# Generated at 2022-06-14 02:01:21.817547
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    import astor
    source = '''\
    def hello():
        print('hello world!')
    '''

    module = ast.parse(source)
    Python2FutureTransformer().visit(module)
    result = astor.to_source(module).strip()

# Generated at 2022-06-14 02:01:30.844712
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    import astor

    transformer = Python2FutureTransformer()
    node = astor.parse_file('examples/imports_3.2.py')
    print(astor.dump_tree(node))
    node = transformer.visit(node)
    print(astor.dump_tree(node))

# Generated at 2022-06-14 02:01:37.391112
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    node = ast.parse('x=1')
    expected_node = ast.parse('''
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
x=1
    ''')
    transformer = Python2FutureTransformer()
    transformed = transformer.visit(node)
    assert ast.dump(transformed) == ast.dump(expected_node)



# Generated at 2022-06-14 02:02:35.632150
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    from ..testing.utils import check_transformer
    check_transformer(Python2FutureTransformer, expected_output=imports.get_source())

# Generated at 2022-06-14 02:02:44.910373
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    # arrange
    import sys
    import os
    import astunparse
    sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
    from target_python_version import target_python_version
    from package_directory import package_directory
    from snippet import snippet
    from test_files.python2_future_transformer_test_file import python2_future_transformer_test_file
    from test_files.python2_future_transformer_test_file_output import python2_future_transformer_test_file_output
    from unit_test_common import read_file_contents
    from ast_helper import ast_parse, ast_dump
    # arrange - get test_file contents
    contents = read_file_cont

# Generated at 2022-06-14 02:02:51.726869
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    input_code = """
x = 1
y = 2
print(x+y)
"""
    expected_code = """
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
x = 1
y = 2
print(x+y)
"""
    tree = ast.parse(input_code)
    tree = Python2FutureTransformer().visit(tree)
    code = astunparse.unparse(tree)
    assert code == expected_code

# Generated at 2022-06-14 02:02:56.888661
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    from ast_helpers.transformers.migration.py2 import Python2FutureTransformer
    obj = Python2FutureTransformer()
    assert obj.target == (2, 7)
    assert obj.__class__.__name__ == 'Python2FutureTransformer'

# Generated at 2022-06-14 02:03:04.657818
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    from typed_ast import ast3
    from .visitor import Python2to3Visitor
    
    node = ast3.parse('a = \'\'', '<test>', 'exec')
    transformer = Python2FutureTransformer()
    new_node = Python2to3Visitor.run_transformers(node, [transformer])
    Python2to3Visitor.deparse(new_node)
    assert transformer.is_tree_changed()
    assert Python2to3Visitor.deparse(new_node) == '[from __future__ import absolute_import, division, print_function, unicode_literals, ]a = \'\''
    return



# Generated at 2022-06-14 02:03:06.111814
# Unit test for method visit_Module of class Python2FutureTransformer

# Generated at 2022-06-14 02:03:14.384491
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    # Test whether method visit_Module of class Python2FutureTransformer
    # prepends the right import statement
    # Test based on the snippet 'test_Python2FutureTransformer_visit_Module'
    # in test_dns_snippets.py
    from ..utils.python_file_parser import PythonFileParser
    transformer = Python2FutureTransformer()
    root = PythonFileParser.build_ast(
        path = '/tmp',
        source = "# coding: utf-8\n\ndef example():\n    return 'example'",
        transformers=[transformer]
    )
    import_future_print = root.body[0]
    assert import_future_print.names[0].name == 'print_function'

# Generated at 2022-06-14 02:03:29.042543
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    class MyModule(ast.Module):
        _fields = ('body',) # type: Any
    class MyCall(ast.Call):
        _fields = ('func', 'args', 'keywords') # type: Any

    obj = Python2FutureTransformer()
    assert obj._tree_changed == False

    node_0 = ast.Expr(value=MyCall(func=ast.Name(id='x', ctx=ast.Load()), args=[], keywords=[]))
    node_1 = ast.FunctionDef(name='foo', args=ast.arguments(args=[], vararg=None, kwarg=None, defaults=[], kw_defaults=[]), body=[node_0], decorator_list=[])

# Generated at 2022-06-14 02:03:31.326699
# Unit test for constructor of class Python2FutureTransformer
def test_Python2FutureTransformer():
    transformer = Python2FutureTransformer()
    assert transformer.target == (2, 7)

# Generated at 2022-06-14 02:03:32.238409
# Unit test for method visit_Module of class Python2FutureTransformer
def test_Python2FutureTransformer_visit_Module():
    import astunparse
