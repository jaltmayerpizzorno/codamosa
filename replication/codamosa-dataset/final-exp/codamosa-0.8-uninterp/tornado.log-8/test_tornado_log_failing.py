# Automatically generated by Pynguin.
import tornado.log as module_0
import logging as module_1

def test_case_0():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = log_formatter_0.format(log_formatter_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.enable_pretty_logging()
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_2():
    try:
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'R(G[Z@l0'
        bool_0 = True
        int_0 = 50
        int_1 = -2385
        int_2 = -1188
        dict_0 = {int_0: int_0, int_1: int_2}
        log_formatter_0 = module_0.LogFormatter(str_0, bool_0, dict_0)
        log_formatter_1 = module_0.LogFormatter(str_0)
        int_3 = 3292
        logger_0 = module_1.Logger(int_3)
        module_0.enable_pretty_logging(logger_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        module_0.define_logging_options(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        optional_0 = None
        stream_handler_0 = module_1.StreamHandler()
        list_0 = [optional_0, stream_handler_0, optional_0]
        logger_0 = module_1.Logger(str_0)
        module_0.enable_pretty_logging(optional_0, logger_0)
        set_0 = set()
        float_0 = 0.5
        var_0 = logger_0.exception(set_0, *list_0, exc_info=float_0)
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_6():
    try:
        module_0.enable_pretty_logging()
        module_0.enable_pretty_logging()
        dict_0 = {}
        str_0 = 'ino'
        tuple_0 = (str_0,)
        logger_0 = module_1.Logger(tuple_0)
        log_formatter_0 = None
        set_0 = {str_0, logger_0}
        stream_handler_0 = module_1.StreamHandler()
        log_record_0 = module_1.LogRecord(dict_0, logger_0, str_0, set_0, set_0, log_formatter_0, log_formatter_0)
        str_1 = 'wJ] rLx1i@uO'
        bool_0 = False
        int_0 = -518
        int_1 = -1150
        int_2 = -202
        int_3 = 300
        int_4 = -377
        int_5 = 693
        dict_1 = {int_0: int_1, int_1: int_2, int_1: int_3, int_4: int_5}
        log_formatter_1 = module_0.LogFormatter(str_0, str_1, str_1, bool_0, dict_1)
        log_formatter_2 = module_0.LogFormatter(str_0)
        str_2 = 'z1S]3t?Ti\\uJ97@Wdk'
        log_formatter_3 = module_0.LogFormatter(str_2)
        str_3 = log_formatter_3.format(log_record_0)
        log_formatter_4 = module_0.LogFormatter(str_1)
        str_4 = log_formatter_4.format(log_formatter_4)
    except BaseException:
        pass