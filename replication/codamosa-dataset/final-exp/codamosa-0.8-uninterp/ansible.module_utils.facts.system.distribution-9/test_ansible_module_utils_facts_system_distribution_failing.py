# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        int_0 = -2831
        var_0 = module_0.get_uname(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b"\xe3\x9e\xa6T\xff';d1-\x9bC\xcc\x81\xb1\x07Z"
        float_0 = 590.6906
        distribution_0 = module_0.Distribution(float_0)
        float_1 = -2002.64
        float_2 = 269.858
        int_0 = None
        distribution_fact_collector_0 = module_0.DistributionFactCollector(int_0)
        tuple_0 = (float_1, float_2, distribution_fact_collector_0)
        dict_0 = {distribution_0: float_0, float_0: bytes_0, tuple_0: float_2}
        str_0 = 'Uh'
        distribution_files_0 = module_0.DistributionFiles(str_0)
        var_0 = distribution_files_0.parse_distribution_file_Alpine(distribution_0, dict_0, float_1, distribution_0)
        distribution_1 = module_0.Distribution(bytes_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_1)
        var_1 = distribution_1.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        bytes_0 = b'\x9b\xf2@q]\x82\xe5F\xa1%R\xaa/'
        dict_0 = {}
        distribution_0 = module_0.Distribution(dict_0)
        list_0 = [dict_0, dict_0, dict_0, bytes_0]
        str_0 = '[B_LI)z~Gz}('
        distribution_files_0 = module_0.DistributionFiles(str_0)
        var_0 = distribution_files_0.parse_distribution_file_Mandriva(bool_0, bytes_0, distribution_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xab+\xa3\x8e~#\x1f1\x1f\xf7'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        float_0 = None
        distribution_files_0 = module_0.DistributionFiles(float_0)
        str_0 = 'KN0'
        bool_0 = True
        distribution_files_1 = module_0.DistributionFiles(bool_0)
        var_0 = distribution_files_1.parse_distribution_file_ClearLinux(bytes_0, dict_0, distribution_files_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '8*bC%t:+Q'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xb8\xedal*'
        str_0 = "*$?S'h8\\\\qUQ"
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0)
        var_0 = distribution_fact_collector_0.collect(bytes_0)
        str_1 = '-`H`RG!vxaE'
        distribution_fact_collector_1 = module_0.DistributionFactCollector()
        float_0 = None
        var_1 = distribution_fact_collector_1.collect(float_0)
        var_2 = distribution_fact_collector_1.collect()
        float_1 = 166.427
        set_0 = set()
        var_3 = distribution_fact_collector_1.collect(set_0)
        var_4 = distribution_fact_collector_1.collect(distribution_fact_collector_1, float_1)
        distribution_0 = module_0.Distribution(str_1)
        var_5 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xac'
        dict_0 = {bytes_0: bytes_0}
        distribution_fact_collector_0 = module_0.DistributionFactCollector(bytes_0)
        var_0 = distribution_fact_collector_0.collect()
        distribution_0 = module_0.Distribution(dict_0)
        distribution_1 = module_0.Distribution(distribution_0)
        var_1 = distribution_1.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        distribution_0 = module_0.Distribution(dict_0)
        var_0 = distribution_0.get_distribution_facts()
        var_1 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'OB%|Dg#.$\x0bk1lj?O7%^\x0b'
        tuple_0 = (str_0,)
        distribution_0 = module_0.Distribution(tuple_0)
        var_0 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xb8\xedal*'
        str_0 = "*$?S'h8\\\\qUQ"
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0)
        var_0 = distribution_fact_collector_0.collect(bytes_0)
        str_1 = '-`H`RG!vxaE'
        distribution_fact_collector_1 = module_0.DistributionFactCollector()
        float_0 = None
        var_1 = distribution_fact_collector_1.collect(float_0)
        var_2 = distribution_fact_collector_1.collect()
        float_1 = 166.427
        set_0 = set()
        var_3 = distribution_fact_collector_1.collect(set_0)
        var_4 = distribution_fact_collector_1.collect(distribution_fact_collector_1, float_1)
        distribution_0 = module_0.Distribution(str_1)
        var_5 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 0.2
        distribution_files_0 = module_0.DistributionFiles(float_0)
        var_0 = distribution_files_0.process_dist_files()
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        var_1 = distribution_files_0.process_dist_files()
        bytes_0 = b'\x1b\x05\x12\r\xa9'
        distribution_0 = module_0.Distribution(bytes_0)
        list_0 = [bytes_0]
        bool_0 = False
        distribution_1 = module_0.Distribution(bool_0)
        var_2 = distribution_fact_collector_0.collect()
        str_0 = ''
        str_1 = '^>RB\x0b'
        bool_1 = False
        var_3 = distribution_files_0.parse_distribution_file_Alpine(str_0, bool_0, str_1, bool_1)
        var_4 = distribution_files_0.parse_distribution_file_CentOS(distribution_0, list_0, distribution_0, distribution_1)
        distribution_files_1 = module_0.DistributionFiles(bool_0)
        var_5 = distribution_1.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "*$?S'h8\\\\qUQ"
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector()
        float_0 = None
        var_0 = distribution_fact_collector_1.collect(float_0)
        float_1 = 166.427
        set_0 = set()
        var_1 = distribution_fact_collector_1.collect(set_0)
        var_2 = distribution_fact_collector_1.collect(distribution_fact_collector_1, float_1)
        distribution_files_0 = None
        distribution_0 = module_0.Distribution(distribution_files_0)
        var_3 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = None
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        dict_0 = {distribution_fact_collector_0: distribution_fact_collector_0, distribution_fact_collector_0: distribution_0}
        str_0 = 'Ap,NW.lX!'
        distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
        var_0 = distribution_files_0.process_dist_files()
        distribution_files_1 = module_0.DistributionFiles(str_0)
        int_0 = -1824
        distribution_files_2 = module_0.DistributionFiles(int_0)
        set_0 = {distribution_files_2, distribution_files_2, int_0}
        tuple_0 = (bool_0,)
        set_1 = None
        str_1 = 'k^)pS!Cc\\~8`1)\x0c'
        var_1 = distribution_files_2.parse_distribution_file_OpenWrt(distribution_files_2, tuple_0, set_1, str_1)
        distribution_files_3 = module_0.DistributionFiles(set_0)
        var_2 = distribution_files_3.parse_distribution_file_SUSE(bool_0, distribution_0, dict_0, distribution_files_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '|ynCe#Mlcs'
        str_1 = 'xy)]PpqZ\r5,;O!{'
        float_0 = 1499.0
        dict_0 = {str_1: str_0}
        distribution_files_0 = module_0.DistributionFiles(dict_0)
        tuple_0 = (float_0, dict_0, distribution_files_0, distribution_files_0)
        distribution_files_1 = module_0.DistributionFiles(tuple_0)
        int_0 = 1056
        str_2 = 'O[Ez)TUx<[eD\nf\tZ}'
        float_1 = None
        list_0 = [str_2, tuple_0, float_1, int_0]
        distribution_0 = module_0.Distribution(list_0)
        var_0 = distribution_0.get_distribution_SMGL()
        var_1 = module_0.get_uname(str_2, float_1)
    except BaseException:
        pass