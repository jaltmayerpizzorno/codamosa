# Automatically generated by Pynguin.
import tornado.escape as module_0

def test_case_0():
    try:
        dict_0 = {}
        optional_0 = module_0.utf8(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x83\xc2\xedDXj\xbe\xc9[\xe2\x1b\xe5\xf8aq\x1c'
        str_0 = module_0.xhtml_unescape(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'nD\xeavB;\xfbY\xe7HV\x16.'
        any_0 = module_0.json_decode(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        var_0 = module_0.url_unescape(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x14\xe2\x91~Z\x1f\x94f\x13\x1dE\x9b\x11\x98\xe7*\x80'
        var_0 = module_0.url_unescape(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'deadline'
        bool_0 = False
        str_1 = module_0.linkify(str_0, bool_0)
        dict_0 = module_0.parse_qs_bytes(str_0)
        any_0 = module_0.recursive_unicode(dict_0)
        bytes_0 = b'\x82\x87\xact\xb8.5\xe02\x9d'
        optional_0 = module_0.utf8(bytes_0)
        str_2 = module_0.xhtml_escape(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'nD\xeavB;\xfbY\xe7HV\x16.'
        any_0 = module_0.recursive_unicode(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'x'
        bool_0 = True
        str_1 = module_0.linkify(str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'xp@"Lx?nO[\rJC1e;'
        optional_0 = module_0.utf8(str_0)
        var_0 = module_0.url_unescape(str_0)
        any_0 = module_0.recursive_unicode(optional_0)
        bool_0 = True
        dict_0 = module_0.parse_qs_bytes(str_0, bool_0)
        bytes_0 = b'\xf0\xe1]'
        bytes_1 = b'#\xb4\x15(\xcb\xee\x01E\xf0\xf4\xba\xa5\x84\xcd1'
        list_0 = [bytes_1, bytes_0, bytes_0, bytes_0]
        dict_1 = {str_0: list_0, str_0: list_0}
        any_1 = module_0.recursive_unicode(dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'fK\x0cMB'
        str_1 = module_0.xhtml_unescape(str_0)
        int_0 = 525
        optional_0 = module_0.to_unicode(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'xp@"Lx?nO[\rJC1e;'
        optional_0 = module_0.utf8(str_0)
        any_0 = module_0.recursive_unicode(optional_0)
        str_1 = module_0.xhtml_escape(str_0)
        optional_1 = module_0.to_unicode(str_0)
        str_2 = module_0.xhtml_unescape(str_1)
        optional_2 = module_0.to_unicode(str_2)
        optional_3 = module_0.to_unicode(str_1)
        bool_0 = None
        str_3 = module_0.linkify(str_1, bool_0, str_1)
        optional_4 = module_0.utf8(str_2)
        str_4 = module_0.url_escape(str_0)
        any_1 = module_0.recursive_unicode(bool_0)
        str_5 = module_0.url_escape(str_4, bool_0)
        any_2 = module_0.recursive_unicode(optional_2)
        str_6 = module_0.json_encode(str_4)
        bool_1 = True
        var_0 = module_0.url_unescape(str_1, str_2, bool_1)
        str_7 = module_0.url_escape(str_2)
        str_8 = 'Attempts to write ``data`` to the underlying file.\n\n        Returns the number of bytes written.\n        '
        optional_5 = module_0.to_unicode(str_3)
        bytes_0 = None
        bool_2 = True
        var_1 = module_0.url_unescape(str_8, bool_2)
        str_9 = module_0.xhtml_unescape(str_1)
        bool_3 = True
        str_10 = 'Mb'
        tuple_0 = (bytes_0, bool_3, str_10)
        any_3 = module_0.recursive_unicode(tuple_0)
        str_11 = None
        bytes_1 = None
        str_12 = None
        str_13 = ''
        list_0 = [str_12, str_13, str_11]
        str_14 = module_0.linkify(bytes_1, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'http:\x0b/www.radian\\medialabs\\&om/'
        str_1 = module_0.linkify(str_0, str_0)
        str_2 = '?^DJJi4'
        str_3 = ''
        list_0 = [str_2, str_0, str_3, str_1]
        str_4 = module_0.linkify(str_1, list_0)
        str_5 = module_0.json_encode(list_0)
        bool_0 = False
        bytes_0 = b'=\x1c\xd1\x86<\xab\x94\xb6\x94'
        str_6 = module_0.linkify(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        str_0 = 'http://www.rdian\\/dialbs&om'
        str_1 = ">_~.aHIY.T'>^D}R4s"
        str_2 = module_0.xhtml_unescape(str_0)
        str_3 = module_0.linkify(str_0, bool_0, str_1)
        str_4 = module_0.json_encode(str_3)
        str_5 = module_0.linkify(str_4, bool_0)
        any_0 = module_0.json_decode(str_5)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'http://www.raYian\\medialabs.&a'
        str_1 = ">_~.a?HI?VT'>7^D}R4s"
        str_2 = module_0.json_encode(str_0)
        bool_0 = False
        list_0 = None
        str_3 = module_0.linkify(str_0, str_1, bool_0, list_0)
        str_4 = 'http://www.radianmedialabs.com/'
        str_5 = ''
        list_1 = [str_4, str_0, str_5, str_1]
        str_6 = module_0.xhtml_unescape(str_3)
        bool_1 = True
        str_7 = module_0.linkify(str_3, bool_1, str_1)
        str_8 = module_0.xhtml_escape(str_0)
        str_9 = module_0.xhtml_escape(str_5)
        str_10 = module_0.url_escape(str_4, bool_1)
        str_11 = module_0.linkify(str_1, list_1)
        str_12 = module_0.linkify(str_6, str_7)
        str_13 = module_0.linkify(str_1, str_10)
        bool_2 = True
        str_14 = module_0.linkify(str_0, str_2, bool_2, list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Hello http://tornadoweb.org!'
        bool_0 = True
        str_1 = 'rel="nofollow" class="external"'
        var_0 = lambda url: str_1
        str_2 = 'http'
        str_3 = 'https'
        str_4 = [str_2, str_3]
        str_5 = module_0.linkify(str_0, bool_0, var_0, bool_0, str_4)
    except BaseException:
        pass