# Automatically generated by Pynguin.
import ansible.plugins.lookup.sequence as module_0

def test_case_0():
    try:
        int_0 = 2312
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '1-5'
        var_0 = lookup_module_0.run(str_0, lookup_module_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        lookup_module_0 = module_0.LookupModule(**dict_0)
        var_0 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -3083
        str_0 = '(Q'
        dict_0 = {str_0: int_0, str_0: str_0}
        lookup_module_0 = module_0.LookupModule(int_0, **dict_0)
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x99\x89!N\x0f=\xd7\xba\xfa\x19\xe4QtQ3'
        bytes_1 = b'\xb1\xe7\xe6\xcb\x14\xdc'
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.run(bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_5():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'count=10'
        int_0 = {str_0: str_0, str_0: str_0}
        var_0 = lookup_module_0.run(str_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -2077.48
        str_0 = "'w7WTXZW85`"
        lookup_module_0 = module_0.LookupModule(float_0, str_0)
        var_0 = lookup_module_0.reset()
        str_1 = '0'
        dict_0 = {str_1: str_1, str_1: str_1}
        list_0 = []
        var_1 = lookup_module_0.run(dict_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'count=4'
        str_1 = 'start=0x0f00 cunt`4 format=%4x'
        str_2 = 'start=1 count=5 stride=2'
        str_3 = [str_0, str_1, str_1, str_1, str_1, str_2, str_1, str_1, str_1, str_1]
        int_0 = {str_0: str_0, str_1: str_1}
        var_0 = lookup_module_0.run(str_3, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '1-5'
        str_1 = '1-5/2:0x%02x'
        str_2 = 'start=1 end=5 stride=2 count=2 start=3 end=6 stride=3'
        str_3 = [str_0, str_1, str_1, str_2, str_2]
        var_0 = None
        var_1 = lookup_module_0.run(str_3, var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '--flush-cache'
        str_1 = 'start=10 end=0 stride=-1'
        str_2 = 'starL=1 end="{{ en_at }}"'
        lookup_module_1 = module_0.LookupModule()
        str_3 = [str_1, str_1, str_2, str_0, str_0, str_1, str_1, str_2, str_2, str_2]
        int_0 = {str_0: str_0, str_0: str_0}
        var_0 = lookup_module_0.run(str_3, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        str_0 = '1-5'
        str_1 = '1-5/2'
        str_2 = '1D-5/2:0x%02x'
        str_3 = [str_0, str_1, str_2, str_1, str_1]
        var_1 = lookup_module_0.run(str_3, lookup_module_0)
    except BaseException:
        pass

def test_case_11():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '5:f%bxd#'
        str_1 = [str_0]
        var_0 = lookup_module_0.run(str_1, lookup_module_0)
    except BaseException:
        pass

def test_case_12():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '5'
        var_0 = {}
        var_1 = lookup_module_0.run(str_0, var_0)
        str_1 = '5:$V02&'
        str_2 = [str_1]
        var_2 = lookup_module_0.run(str_2, var_1)
    except BaseException:
        pass