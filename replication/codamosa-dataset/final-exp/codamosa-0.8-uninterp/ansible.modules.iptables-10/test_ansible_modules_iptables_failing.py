# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        str_0 = '8Mz]w#'
        list_0 = [str_0, str_0]
        str_1 = 'kcl :})'
        str_2 = 'j|v\r'
        dict_0 = {str_1: str_0, str_1: list_0, str_2: str_1, str_1: list_0}
        set_0 = {str_1, str_0, str_2, str_0}
        var_0 = module_0.append_param(str_0, list_0, dict_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'PqDB;v'
        list_0 = [str_0, str_0]
        bool_0 = None
        bytes_0 = b'\xee\x0e\x88\xea3\xb0\x84\xba\xdejP'
        var_0 = module_0.append_csv(list_0, bool_0, bytes_0)
        str_1 = '3\rP-T='
        str_2 = 'rz~{|5\\cekK'
        bool_1 = True
        dict_0 = {str_1: str_2, str_0: bool_1}
        list_1 = [str_0, bool_1, str_2, str_0]
        var_1 = module_0.append_param(str_0, str_1, dict_0, list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ansible.modules.iptables'
        list_0 = [str_0, str_0, str_0, str_0]
        bytes_0 = b'\xcaL\x0e\xdf\x01-@\x93'
        var_0 = module_0.append_csv(list_0, bytes_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        bytes_0 = None
        float_0 = 236.3
        set_0 = {float_0, str_0, bytes_0}
        bytes_1 = b'|!\xfb\x13E_\xb9/u\x83\x1b8\x00\xd7\xb4o'
        var_0 = module_0.append_jump(bytes_0, set_0, bytes_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x1btj\xc9\x0e\xa59\xa6 \x93y\x8cz\xed\x00p\x99'
        str_0 = 'y'
        str_1 = '\tp%#+O!8^Ah45$uD\x0c*'
        bool_0 = False
        tuple_0 = (str_1, bool_0, str_0)
        set_0 = set()
        var_0 = module_0.append_tcp_flags(str_0, tuple_0, set_0)
        var_1 = module_0.construct_rule(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 65536
        bool_0 = False
        var_0 = module_0.get_chain_policy(int_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        int_0 = -1885
        list_1 = [bool_0, int_0]
        var_0 = module_0.append_match_flag(bool_0, list_0, list_1, list_1)
        str_0 = '\\G'
        str_1 = 'jy\tC>OgM9g'
        int_1 = 36
        var_1 = module_0.remove_rule(str_0, str_1, int_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '7!"O\n8M'
        str_1 = 'maq@v]]|E-'
        str_2 = 'g&dRR'
        bool_0 = True
        var_0 = module_0.append_match_flag(str_0, str_1, str_2, bool_0)
        list_0 = [bool_0, str_1, bool_0]
        int_0 = None
        bytes_0 = b'\x95-K\tj\x98\x12)t\x9d\x18'
        var_1 = module_0.append_param(list_0, str_0, int_0, bytes_0)
        str_3 = ''
        list_1 = None
        set_0 = {bytes_0, int_0, str_1}
        var_2 = module_0.flush_table(str_3, list_1, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '/sbin/iptables'
        var_0 = None
        str_1 = 'table'
        str_2 = 'chain'
        str_3 = 'policy'
        str_4 = 'ip_version'
        str_5 = 'filter'
        str_6 = 'INPUT'
        str_7 = 'DROP'
        str_8 = 'ipv4'
        str_9 = {str_1: str_5, str_2: str_6, str_3: str_7, str_4: str_8}
        var_1 = module_0.set_chain_policy(str_0, var_0, str_9)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        int_0 = 1257
        set_0 = set()
        tuple_0 = (bool_0, int_0, set_0)
        bytes_0 = b'\xa0\xf4\xb1\xa4\x89\x95\xbd \xedt\xa4\x0c7'
        var_0 = module_0.get_iptables_version(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = None
        float_0 = None
        var_0 = module_0.append_jump(int_0, float_0, float_0)
        set_0 = {var_0}
        str_0 = '4<[`Wfq?c.m=Q39p'
        int_1 = -1154
        var_1 = module_0.push_arguments(set_0, str_0, int_1)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 902
        list_0 = [int_0, int_0]
        float_0 = -2023.92
        var_0 = module_0.append_match(int_0, list_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'L{'
        dict_0 = {str_0: str_0}
        bytes_0 = None
        set_0 = {str_0}
        str_1 = 'H\n2L'
        list_0 = [bytes_0, str_1, str_0, bytes_0]
        int_0 = -1557
        tuple_0 = (int_0,)
        tuple_1 = (set_0, str_1, list_0, tuple_0)
        bytes_1 = b'\xb6\x8b*\xf9\x81u\xceT\xe1#[&\x1f\xcd\x80\xe0\xe2'
        var_0 = module_0.append_match(tuple_1, bytes_0, bytes_1)
        float_0 = 236.3
        float_1 = 0.0
        float_2 = None
        var_1 = module_0.append_match_flag(float_1, str_0, float_2, float_1)
        var_2 = module_0.append_tcp_flags(float_0, dict_0, float_1)
        str_2 = '^$7_+\x0bzz('
        tuple_2 = None
        str_3 = '5lJZKBQ'
        var_3 = module_0.append_jump(tuple_2, tuple_2, str_3)
        tuple_3 = (str_2,)
        list_1 = [tuple_3]
        bytes_2 = b'm-\xa12\x00\xba%\xdb'
        var_4 = module_0.append_match(list_1, str_2, bytes_2)
        set_1 = None
        str_4 = 'gmRD^#_!]6'
        var_5 = module_0.check_present(str_4, int_0, set_1)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        float_0 = -163.0
        dict_0 = {}
        var_0 = module_0.append_rule(bool_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'PqDB;v'
        list_0 = [str_0]
        int_0 = -3458
        var_0 = module_0.append_match(list_0, int_0, list_0)
        int_1 = -882
        bytes_0 = b'\xf4\xcf<\xecg\xdb\x13\xbe\xba\x9a|\t8'
        var_1 = module_0.insert_rule(int_1, bytes_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        tuple_0 = (str_0,)
        bool_0 = None
        dict_0 = {tuple_0: bool_0}
        set_0 = None
        var_0 = module_0.append_wait(dict_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '{'
        dict_0 = {str_0: str_0}
        tuple_0 = ()
        var_0 = module_0.append_tcp_flags(dict_0, tuple_0, dict_0)
        str_1 = 'mfn.p\t3'
        tuple_1 = (str_0,)
        list_0 = [tuple_1]
        str_2 = ''
        bytes_0 = b'm-\xa12\x00\xba%'
        var_1 = module_0.append_match(list_0, str_2, bytes_0)
        str_3 = '~8/Wy(O$HCBHH'
        var_2 = module_0.append_param(str_1, str_3, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = None
        set_0 = {float_0, float_0, float_0, float_0}
        int_0 = -682
        var_0 = module_0.append_param(set_0, set_0, int_0, set_0)
        str_0 = 'LR++~U(i\x0bC%(.c|X%g'
        bool_0 = None
        var_1 = module_0.set_chain_policy(float_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'ACK'
        str_1 = 'FIN'
        str_2 = [str_0, str_1, str_0, str_1]
        var_0 = dict(flags=str_2, flags_set=str_2)
        var_1 = module_0.append_tcp_flags(var_0, var_0, str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'action'
        str_1 = 'chain'
        str_2 = 'protocol'
        str_3 = 'destination_port'
        str_4 = 'limit'
        str_5 = 'limit_burst'
        str_6 = 'jump'
        str_7 = 'comment'
        str_8 = 'ip_version'
        str_9 = 'state'
        str_10 = 'wait'
        str_11 = 'append'
        str_12 = 'INPUT'
        str_13 = 'tcp'
        str_14 = '80'
        str_15 = '20'
        str_16 = 'ACCEPT'
        str_17 = 'rule'
        str_18 = 'ipv4'
        str_19 = 'present'
        str_20 = '5'
        str_21 = {str_0: str_11, str_1: str_12, str_2: str_13, str_3: str_14, str_4: str_13, str_5: str_15, str_6: str_16, str_7: str_17, str_8: str_18, str_9: str_19, str_10: str_20}
        var_0 = module_0.construct_rule(str_21)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '/sbin/iptables'
        str_1 = '-I'
        str_2 = 'filter'
        str_3 = '5'
        var_0 = dict(table=str_2, chain=str_1, rule_num=str_3)
        str_4 = 'table'
        var_1 = var_0[str_4]
        str_5 = 'chain'
        var_2 = var_0[str_5]
        str_6 = 'rule_num'
        var_3 = var_0[str_6]
        bool_0 = False
        var_4 = module_0.push_arguments(str_0, str_1, var_0, bool_0)
        var_5 = module_0.push_arguments(str_0, str_1, var_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '/sbin/iptables'
        str_1 = 'INPUT'
        str_2 = 'filter'
        var_0 = dict(chain=str_1, table=str_2, ip_version=str_1)
        str_3 = '-L'
        bool_0 = False
        var_1 = module_0.push_arguments(str_0, str_3, var_0, bool_0)
        var_2 = None
        var_3 = module_0.get_chain_policy(str_0, var_2, var_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '/sbin/iptables'
        str_1 = '-I'
        str_2 = 'fiEtnr'
        str_3 = 'INPUT'
        str_4 = ''
        var_0 = dict(table=str_2, chain=str_3, rule_num=str_4)
        str_5 = 'table'
        var_1 = var_0[str_5]
        str_6 = 'chain'
        var_2 = var_0[str_6]
        str_7 = 'rule_num'
        var_3 = var_0[str_7]
        bool_0 = False
        var_4 = module_0.push_arguments(str_0, str_1, var_0, bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        var_0 = []
        str_0 = 'negate'
        str_1 = 'FIN'
        str_2 = [str_0, str_0, str_0, str_1]
        str_3 = '-->cp-flCgs'
        var_1 = module_0.append_tcp_flags(var_0, str_0, str_3)
        str_4 = [str_1, str_0, str_3, str_1]
        var_2 = dict(flags=str_4, flags_set=str_4)
        float_0 = 962.872045
        dict_0 = None
        var_3 = module_0.append_match_flag(float_0, float_0, dict_0, str_2)
        bytes_0 = b'\x81\x94\xbd\xf0\xe3\x0e'
        bytes_1 = b'q(\x843E$\xf1\x9f'
        var_4 = module_0.append_match_flag(float_0, str_0, bytes_0, bytes_1)
    except BaseException:
        pass