# Automatically generated by Pynguin.
import httpie.uploads as module_0
import requests_toolbelt.multipart.encoder as module_1
import requests.models as module_2
import httpie.cli.dicts as module_3
import typing as module_4

def test_case_0():
    try:
        str_0 = 'bbb'
        str_1 = 'ccc'
        str_2 = [str_1, str_0, str_1]
        var_0 = lambda x: x
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(str_2, var_0)
        var_1 = [x.decode() for x in chunked_upload_stream_0]
    except BaseException:
        pass

def test_case_1():
    try:
        multipart_encoder_0 = None
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        multipart_encoder_1 = module_1.MultipartEncoder(iterable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        prepared_request_0 = module_2.PreparedRequest()
        bool_0 = True
        var_0 = module_0.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        iterable_0 = None
        callable_0 = None
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_0 = ';type='
        tuple_1 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(iterable_0, callable_0)
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        tuple_2 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        callable_1 = None
        int_0 = -196
        var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_1, int_0, iterable_1)
        list_0 = []
        request_data_dict_0 = module_3.RequestDataDict(*list_0)
        var_1 = module_0.prepare_request_body(request_data_dict_0, callable_1, multipart_encoder_0)
        prepared_request_0 = module_2.PreparedRequest()
        bool_0 = None
        var_2 = module_0.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        iterable_0 = None
        callable_0 = None
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(iterable_0, callable_0)
        iterable_1 = chunked_upload_stream_0.__iter__()
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        callable_1 = None
        int_0 = -196
        var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_1, int_0, iterable_2)
        prepared_request_0 = module_2.PreparedRequest()
        iterable_3 = chunked_multipart_upload_stream_0.__iter__()
        prepared_request_1 = module_2.PreparedRequest()
        str_0 = "='EYj;]??.qcm.e(IA"
        var_1 = multipart_encoder_0.read(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        request_data_dict_0 = module_3.RequestDataDict()
        multipart_encoder_0 = module_1.MultipartEncoder(request_data_dict_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        list_0 = [chunked_multipart_upload_stream_0, request_data_dict_0, request_data_dict_0]
        multipart_encoder_1 = module_1.MultipartEncoder(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        multipart_encoder_0 = None
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        str_0 = 'iJ@_V~'
        tuple_0 = (multipart_encoder_0, str_0)
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(chunked_multipart_upload_stream_0, tuple_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_1 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        str_1 = 'XR;;0LZk'
        tuple_1 = (multipart_encoder_0, str_1)
        chunked_upload_stream_1 = module_0.ChunkedUploadStream(chunked_multipart_upload_stream_1, tuple_1)
        iterable_1 = chunked_upload_stream_1.__iter__()
        str_2 = None
        tuple_2 = (multipart_encoder_0, str_2)
        i_o_0 = module_4.IO()
        var_0 = i_o_0.readline()
        list_0 = [var_0, var_0, var_0, var_0]
        chunked_upload_stream_2 = module_0.ChunkedUploadStream(list_0, multipart_encoder_0)
        int_0 = -979
        prepared_request_0 = module_2.PreparedRequest()
        var_1 = module_0.prepare_request_body(i_o_0, chunked_upload_stream_2, int_0, var_0, prepared_request_0)
        var_2 = i_o_0.read()
        chunked_multipart_upload_stream_2 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_2 = chunked_upload_stream_2.__iter__()
        chunked_upload_stream_3 = module_0.ChunkedUploadStream(var_2, chunked_multipart_upload_stream_2)
        multipart_encoder_1 = module_1.MultipartEncoder(tuple_2, chunked_upload_stream_3)
    except BaseException:
        pass

def test_case_7():
    try:
        multipart_encoder_0 = None
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        iterable_0 = None
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        callable_0 = None
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        str_0 = '!N'
        tuple_1 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        chunked_multipart_upload_stream_1 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_2 = chunked_multipart_upload_stream_1.__iter__()
        chunked_multipart_upload_stream_2 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        chunked_multipart_upload_stream_3 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(iterable_0, callable_0)
        iterable_3 = chunked_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_4 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        multipart_encoder_1 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        chunked_multipart_upload_stream_5 = module_0.ChunkedMultipartUploadStream(multipart_encoder_1)
        tuple_2 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        callable_1 = None
        int_0 = -196
        var_0 = module_0.prepare_request_body(multipart_encoder_1, callable_1, int_0, iterable_2)
        list_0 = []
        request_data_dict_0 = module_3.RequestDataDict(*list_0)
        str_1 = "6e2 'N(n_;cS<nmV"
        var_1 = module_0.prepare_request_body(str_0, callable_1, int_0, str_1, chunked_upload_stream_0)
        prepared_request_0 = module_2.PreparedRequest()
        prepared_request_1 = module_2.PreparedRequest()
        prepared_request_2 = module_2.PreparedRequest()
        bool_0 = True
        var_2 = module_0.compress_request(prepared_request_2, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        callable_0 = None
        int_0 = -196
        var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_0, int_0, iterable_0)
        prepared_request_0 = module_2.PreparedRequest()
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        dict_0 = None
        var_1 = prepared_request_0.prepare_body(dict_0, chunked_multipart_upload_stream_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'http://test.com'
        str_1 = 'ok'
        str_2 = 'POST'
        str_3 = 'Content-Disposition: %s'
        dict_0 = {str_3: str_2, str_0: str_0}
        request_data_dict_0 = module_3.RequestDataDict(**dict_0)
        list_0 = []
        callable_0 = None
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(list_0, callable_0)
        multipart_encoder_0 = module_1.MultipartEncoder(chunked_upload_stream_0)
        tuple_0 = (multipart_encoder_0, str_1)
        multipart_encoder_1 = module_1.MultipartEncoder(request_data_dict_0, tuple_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        multipart_encoder_2 = module_1.MultipartEncoder(multipart_encoder_1, iterable_0)
    except BaseException:
        pass