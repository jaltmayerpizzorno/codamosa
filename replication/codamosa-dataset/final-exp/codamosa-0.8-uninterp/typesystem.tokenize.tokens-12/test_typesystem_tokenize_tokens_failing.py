# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        bytes_0 = b'\x0bs3\xfa'
        int_0 = -1355
        int_1 = 682
        int_2 = -1024
        str_0 = 'iR]~uyg1h:?a\r>;N'
        list_token_0 = module_0.ListToken(bytes_0, int_1, int_2, str_0)
        list_0 = [int_0, bytes_0, int_0, list_token_0]
        int_3 = -1254
        int_4 = -240
        token_0 = module_0.Token(int_0, int_3, int_4)
        token_1 = token_0.lookup(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'p3B>^\nxjzK\x0cI\x0bHdEi\x0cP`'
        int_0 = -833
        list_token_0 = module_0.ListToken(str_0, int_0, int_0)
        list_0 = [str_0]
        scalar_token_0 = module_0.ScalarToken(list_0, int_0, int_0, str_0)
        int_1 = -423
        int_2 = -1411
        token_0 = module_0.Token(int_1, int_1, int_2)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '@m2>%A~U\rA*ut}!#'
        list_0 = [str_0, str_0, str_0, str_0]
        int_0 = 6
        int_1 = -6007
        token_0 = module_0.Token(str_0, int_1, int_0, str_0)
        scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0)
        str_1 = token_0.__repr__()
        any_0 = scalar_token_0.__hash__()
        int_2 = 1345
        token_1 = module_0.Token(any_0, int_0, int_2)
        bool_0 = token_1.__eq__(list_0)
        bool_1 = token_1.__eq__(token_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Schema'
        list_0 = [str_0, str_0]
        int_0 = 868
        int_1 = 1
        token_0 = module_0.Token(str_0, int_0, int_1)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        dict_token_0 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'ad~ C('
        list_0 = [str_0, str_0, str_0, str_0]
        int_0 = 2460
        token_0 = module_0.Token(list_0, int_0, int_0)
        bool_0 = token_0.__eq__(list_0)
        bool_1 = token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = None
        int_0 = 0
        token_0 = module_0.Token(var_0, int_0, int_0)
        var_1 = token_0.value
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '5z\n#-=y@\nO)"'
        dict_0 = {str_0: str_0}
        complex_0 = None
        list_0 = [dict_0, str_0, dict_0, complex_0]
        dict_token_0 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 446
        str_0 = 'Z%;Z8w8'
        scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        scalar_token_1 = module_0.ScalarToken(scalar_token_0, int_0, int_0)
        set_0 = {scalar_token_0, int_0, scalar_token_1, int_0}
        str_1 = 'i7-eN2&0G:N{'
        any_0 = scalar_token_1.__hash__()
        any_1 = scalar_token_1.__hash__()
        dict_0 = {}
        int_1 = -632
        list_0 = [dict_0, int_1, str_1, int_1]
        dict_token_0 = module_0.DictToken(*list_0)
        token_0 = module_0.Token(set_0, int_0, int_1)
        bool_0 = token_0.__eq__(scalar_token_1)
    except BaseException:
        pass