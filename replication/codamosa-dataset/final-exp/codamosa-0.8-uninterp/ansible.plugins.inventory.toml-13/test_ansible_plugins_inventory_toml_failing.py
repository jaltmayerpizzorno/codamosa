# Automatically generated by Pynguin.
import ansible.plugins.inventory.toml as module_0

def test_case_0():
    try:
        str_0 = '\x0c0'
        var_0 = module_0.toml_dumps(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xf4\xa8x\xd7-v'
        dict_0 = {}
        var_0 = module_0.convert_yaml_objects_to_native(dict_0)
        var_1 = module_0.toml_dumps(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        var_0 = module_0.convert_yaml_objects_to_native(list_0)
        inventory_module_0 = module_0.InventoryModule()
        var_1 = inventory_module_0.verify_file(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = None
        inventory_module_0 = module_0.InventoryModule()
        str_0 = 'RX\tngoL7r@ijxL'
        str_1 = 'extends_documentation_fragment'
        var_0 = module_0.convert_yaml_objects_to_native(str_1)
        dict_0 = {float_0: str_0, inventory_module_0: str_0, inventory_module_0: str_0}
        dict_1 = {inventory_module_0: str_1, float_0: inventory_module_0, str_1: dict_0}
        bytes_0 = b''
        tuple_0 = (str_0, inventory_module_0, dict_1, bytes_0)
        inventory_module_1 = module_0.InventoryModule()
        var_1 = inventory_module_1.verify_file(tuple_0)
        var_2 = module_0.convert_yaml_objects_to_native(float_0)
        int_0 = None
        set_0 = set()
        list_0 = [int_0, set_0, float_0]
        float_1 = None
        inventory_module_2 = module_0.InventoryModule()
        var_3 = inventory_module_2.parse(inventory_module_0, set_0, list_0, float_1)
    except BaseException:
        pass

def test_case_4():
    try:
        inventory_module_0 = module_0.InventoryModule()
        int_0 = 2105
        var_0 = inventory_module_0.parse(inventory_module_0, int_0, inventory_module_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'zcY$9hlI\x0cH@w7],z'
        str_1 = 'P\tHuMS8\x0b6k^\nwb'
        var_0 = module_0.convert_yaml_objects_to_native(str_1)
        inventory_module_0 = module_0.InventoryModule()
        var_1 = inventory_module_0.verify_file(str_0)
        tuple_0 = ()
        bool_0 = False
        var_2 = module_0.convert_yaml_objects_to_native(bool_0)
        var_3 = inventory_module_0.verify_file(tuple_0)
        int_0 = 2
        inventory_module_1 = module_0.InventoryModule()
        tuple_1 = ()
        var_4 = inventory_module_1.verify_file(tuple_1)
        int_1 = -948
        var_5 = module_0.convert_yaml_objects_to_native(int_1)
        var_6 = inventory_module_1.verify_file(int_0)
        int_2 = 2202
        dict_0 = {int_2: var_4, tuple_1: tuple_1}
        var_7 = module_0.convert_yaml_objects_to_native(dict_0)
        bool_1 = True
        var_8 = inventory_module_1.verify_file(bool_1)
        bytes_0 = b'(\xea\xa3x\xeeu\xa88\t\x1f\xfb:\xf3'
        var_9 = inventory_module_0.verify_file(bytes_0)
        inventory_module_2 = module_0.InventoryModule()
        tuple_2 = None
        inventory_module_3 = module_0.InventoryModule()
        list_0 = [str_0, var_6, tuple_2]
        var_10 = inventory_module_1.verify_file(list_0)
        str_2 = '\x0bW;}4RV Bu>`$'
        var_11 = inventory_module_1.verify_file(inventory_module_1)
        var_12 = module_0.toml_dumps(str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        var_0 = module_0.convert_yaml_objects_to_native(list_0)
        inventory_module_0 = module_0.InventoryModule()
    except BaseException:
        pass