# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        bytes_0 = b'" 8\x8fx:\x8b#\xc4E\xf3'
        float_0 = 1270.248
        bool_0 = True
        try_0 = module_0.Try(float_0, bool_0)
        str_0 = "o#tQQ|='"
        try_1 = module_0.Try(str_0, bool_0)
        bool_1 = try_1.__eq__(try_0)
        dict_0 = None
        bool_2 = False
        tuple_0 = (bytes_0, dict_0, bool_2)
        int_0 = -1419
        bool_3 = False
        try_2 = module_0.Try(int_0, bool_3)
        bool_4 = try_2.__eq__(tuple_0)
        int_1 = -1073
        bool_5 = False
        try_3 = module_0.Try(int_1, bool_5)
        bytes_1 = b'\x94\x1a\xeb\x17g\xcdT\xcf;\xd9\xc8\xd9}\xec\x96D\xf6\x90\xfd\x80'
        tuple_1 = (dict_0,)
        var_0 = try_3.get_or_else(tuple_1)
        var_1 = try_3.on_fail(bytes_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'h|wcE((\n;E6.)'
        list_0 = None
        float_0 = -1995.504
        bool_0 = True
        tuple_0 = ()
        try_0 = module_0.Try(tuple_0, bool_0)
        var_0 = try_0.get()
        try_1 = module_0.Try(float_0, bool_0)
        var_1 = try_1.get_or_else(list_0)
        set_0 = {str_0, str_0, str_0, str_0}
        list_1 = [str_0, set_0, str_0]
        bool_1 = False
        try_2 = module_0.Try(try_1, bool_1)
        var_2 = try_2.filter(str_0)
        bool_2 = False
        try_3 = module_0.Try(list_1, bool_2)
        var_3 = try_3.get_or_else(try_1)
        int_0 = 766
        str_1 = try_2.__str__()
        bool_3 = True
        try_4 = module_0.Try(int_0, bool_3)
        bool_4 = try_4.__eq__(float_0)
        var_4 = try_4.map(bool_4)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        int_0 = True
        bool_0 = True
        list_1 = [int_0]
        tuple_0 = (bool_0, list_1, list_1)
        try_0 = module_0.Try(tuple_0, bool_0)
        bool_1 = False
        try_1 = module_0.Try(int_0, bool_1)
        var_0 = try_1.map(list_0)
        set_0 = set()
        bool_2 = False
        bool_3 = False
        try_2 = module_0.Try(bool_2, bool_3)
        var_1 = try_2.bind(set_0)
        str_0 = '\n        Returns True when errors list are empty.\n\n        :returns: True for empty errors list\n        :rtype: Boolean\n        '
        dict_0 = {str_0: str_0}
        list_2 = []
        bool_4 = True
        try_3 = module_0.Try(list_2, bool_4)
        var_2 = try_3.filter(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        str_0 = ":@rXu^S2C9Wab;o'k"
        bool_1 = True
        try_0 = module_0.Try(str_0, bool_1)
        var_0 = try_0.bind(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xbcu\xef\x18Z\x9b#\n|'
        bool_0 = False
        try_0 = module_0.Try(bytes_0, bool_0)
        str_0 = 'k~HjMA0p3vw){D\x0b'
        var_0 = try_0.filter(str_0)
        var_1 = try_0.on_success(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        set_0 = set()
        str_0 = '(1i_p6*Q'
        bool_1 = False
        bool_2 = False
        tuple_0 = (bool_1, bool_2, set_0)
        try_0 = module_0.Try(tuple_0, bool_1)
        bytes_0 = b'\x81z\x86{\xaf\xb5\xb8\x17\xd3\x14\xf3\xdb3\xac\x98<f['
        tuple_1 = (try_0, bytes_0, bytes_0)
        try_1 = module_0.Try(tuple_1, bool_0)
        var_0 = try_1.on_success(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'f/sn[b"?P-P\'qNc]T|c'
        bool_0 = True
        set_0 = set()
        try_0 = module_0.Try(set_0, bool_0)
        var_0 = try_0.on_fail(bool_0)
        try_1 = module_0.Try(str_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x0c\x05T\x84\xbc\x8a\t\xe1JAM\xe9'
        list_0 = [bytes_0]
        int_0 = -1095
        set_0 = {int_0, int_0, int_0, int_0}
        bool_0 = False
        try_0 = module_0.Try(set_0, bool_0)
        var_0 = try_0.on_fail(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'n\xdb\x8d\x7f\x9c\x12\x8e\xc2\xe0\x1b\x8f\x86'
        bool_0 = False
        try_0 = module_0.Try(bytes_0, bool_0)
        str_0 = 'T9!9Oz\no&)'
        bool_1 = False
        tuple_0 = (str_0, bool_1)
        bool_2 = True
        try_1 = module_0.Try(tuple_0, bool_2)
        var_0 = try_1.filter(try_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        bool_0 = False
        try_0 = module_0.Try(bool_0, bool_0)
        var_0 = try_0.get_or_else(list_0)
        bool_1 = True
        bool_2 = True
        try_1 = module_0.Try(bool_1, bool_2)
        bool_3 = False
        try_2 = module_0.Try(try_0, bool_3)
        str_0 = '\n    Task are data-type for handle execution of functions (in lazy way)\n    transform results of this function and handle errors.\n    '
        float_0 = 48.434
        bool_4 = True
        try_3 = module_0.Try(float_0, bool_4)
        var_1 = try_3.filter(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 1434.0
        bool_0 = False
        try_0 = module_0.Try(float_0, bool_0)
        bool_1 = try_0.__eq__(try_0)
        bool_2 = None
        dict_0 = {bool_2: bool_1}
        var_0 = try_0.on_fail(dict_0)
    except BaseException:
        pass