# Automatically generated by Pynguin.
import tornado.options as module_0

def test_case_0():
    try:
        str_0 = '*Lu\t*),nR'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '/input/tornado/options.py'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0)
        iterable_0 = option_parser_0.items()
        tuple_0 = (option_parser_0, str_0)
        list_0 = module_0.parse_command_line(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        str_0 = '|'
        option_parser_1 = module_0.OptionParser()
        dict_1 = option_parser_1.as_dict()
        str_1 = 'u.d!"X1d\'B0$XI8+'
        option_parser_1.__setattr__(str_1, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = None
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_1.as_dict()
        option_parser_1.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'dseN<)][wq['
        str_1 = 'm_ng'
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        dict_0 = option_parser_0.group_dict(str_1)
        str_2 = '0=k1N*]{}}P8P?|G25'
        bool_1 = option_parser_0.__contains__(str_2)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_5():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        dict_0 = option_parser_0.as_dict()
        iterator_0 = option_parser_0.__iter__()
        str_0 = 'Ao<;=,S\t"r(LU^K'
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        iterator_0 = option_parser_0.__iter__()
        str_0 = None
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, iterator_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '%s=%s'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        set_0 = {str_0, str_0, str_0, str_0}
        str_1 = '|'
        option_parser_1 = module_0.OptionParser()
        dict_1 = option_parser_1.as_dict()
        module_0.define(str_0, set_0, str_1, str_1)
        option_parser_1.run_parse_callbacks()
        str_2 = 'u.d!"XKd\'B0JXI8T'
        option_parser_1.__setattr__(str_2, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Cewx.'
        str_1 = "Ro=5\x0b0)_p'"
        module_0.define(str_1)
        option_parser_0 = module_0.OptionParser()
        list_0 = [option_parser_0, str_0, str_0]
        module_0.add_parse_callback(list_0)
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '/input/tornado/log.py'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '+8v"xh^o'
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        option_parser_1 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_1)
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '>=hF<dIXX9:X\r\t ,I,'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        option_parser_1 = module_0.OptionParser()
        mockable_0 = option_parser_1.mockable()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '}MikSF'
        float_0 = -251.69201
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_0 = module_0._Option(str_0, float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'S/8ET'
        str_1 = '~P+{y'
        option_0 = module_0._Option(str_1, str_0, str_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '/input/tornado/options.py'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0, str_0)
        option_parser_0.__setattr__(str_0, option_parser_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '3<t?!=\\oa\x0cC\x0c~<_!'
        list_0 = [str_0, str_0, str_0]
        option_0 = module_0._Option(str_0, str_0, str_0, str_0, str_0, list_0)
        option_0.set(list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        str_0 = '#?I[0x&o$E}}evnCW9xp'
        option_parser_1 = module_0.OptionParser()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        module_0.print_help()
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '3<t?!=\\oa\x0cC\x0c~<_!'
        list_0 = [str_0, str_0, str_0]
        option_0 = module_0._Option(str_0, str_0, str_0, str_0, str_0, list_0)
        module_0.add_parse_callback(str_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '-e_+n"umVC"ok:Ol'
        list_0 = [str_0, str_0]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = 2297.842
        str_0 = 'WJeF.@q'
        str_1 = ',E:Oj`uPjF;\x0bN='
        dict_0 = {str_1: str_0}
        option_0 = module_0._Option(str_0, dict_0, str_0, str_0)
        option_0.set(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '%s=%s'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        set_0 = {str_0, str_0, str_0, str_0}
        str_1 = '|'
        dict_1 = option_parser_0.as_dict()
        module_0.define(str_0, set_0, str_1, str_1)
    except BaseException:
        pass

def test_case_25():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '-e_+n"umVi"ok1Ol'
        str_1 = ''
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_1)
        option_parser_2 = module_0.OptionParser()
        list_0 = [str_0, str_0]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '/input/tornado/options.py'
        bool_0 = False
        module_0.parse_config_file(str_0, bool_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0, str_0)
        str_1 = 'Walks a simple data structure, converting byte strings to unicode.\n\n    Supports lists, tuples, and dictionaries.\n    '
        option_parser_0.__setattr__(str_1, option_parser_0)
    except BaseException:
        pass

def test_case_27():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'Ze%y orF*m$tnr'
        str_1 = '3\x0ct?!=\\oa\x0cC\x0c~<_!'
        list_0 = [str_1, str_1, str_1]
        option_0 = module_0._Option(str_1, str_0, str_1, str_1, str_0, list_0)
        option_0.set(str_1)
    except BaseException:
        pass

def test_case_28():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = ')9Bx\\vch'
        error_0 = module_0.Error()
        option_parser_0.define(str_0, error_0, str_0, str_0)
        mockable_0 = option_parser_0.mockable()
        str_1 = 'An exception that ends the request without producing an error response.\n\n    When `Finish` is raised in a `RequestHandler`, the request will\n    end (calling `RequestHandler.finish` if it hasn\'t already been\n    called), but the error-handling methods (including\n    `RequestHandler.write_error`) will not be called.\n\n    If `Finish()` was created with no arguments, the pending response\n    will be sent as-is. If `Finish()` was given an argument, that\n    argument will be passed to `RequestHandler.finish()`.\n\n    This can be a more convenient way to implement custom error pages\n    than overriding ``write_error`` (especially in library code)::\n\n        if self.current_user is None:\n            self.set_status(401)\n            self.set_header(\'WWW-Authenticate\', \'Basic realm="something"\')\n            raise Finish()\n\n    .. versionchanged:: 4.3\n       Arguments passed to ``Finish()`` will be passed on to\n       `RequestHandler.finish`.\n    '
        bool_0 = False
        option_parser_0.define(str_1, bool_0, str_1)
        dict_0 = option_parser_0.group_dict(str_1)
        callable_0 = None
        module_0.add_parse_callback(callable_0)
        mockable_0.__setattr__(str_0, error_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'dseN<)][wq['
        str_1 = 'ng'
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        dict_0 = option_parser_0.group_dict(str_1)
        set_0 = option_parser_0.groups()
        option_parser_1 = module_0.OptionParser()
        dict_1 = option_parser_0.as_dict()
        bool_1 = option_parser_1.__contains__(str_0)
        none_type_0 = None
        error_0 = module_0.Error()
        option_0 = module_0._Option(str_0, none_type_0, str_0, str_1, bool_1, str_1, str_0, error_0)
        option_0.set(set_0)
    except BaseException:
        pass

def test_case_30():
    try:
        list_0 = None
        str_0 = '`A,=32\\k~(;wK'
        str_1 = 'midnigh'
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        dict_0 = option_parser_0.group_dict(str_1)
        option_0 = module_0._Option(str_0, dict_0, str_1)
        option_0.set(list_0)
        option_parser_0.run_parse_callbacks()
        any_0 = option_0.value()
        option_0.set(str_1)
    except BaseException:
        pass

def test_case_31():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'Prints all the command line options to stderr (or another file).\n\n    See `OptionParser.print_help`.\n    '
        str_1 = 'f'
        option_parser_1 = module_0.OptionParser()
        str_2 = ''
        option_parser_2 = module_0.OptionParser()
        option_parser_2.add_parse_callback(str_2)
        dict_0 = option_parser_1.group_dict(str_1)
        option_parser_3 = module_0.OptionParser()
        iterable_0 = option_parser_3.items()
        option_parser_0.print_help()
        iterable_1 = option_parser_2.items()
        option_parser_4 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_4)
        str_3 = "'"
        list_0 = [str_2, str_1, option_parser_0]
        list_1 = [dict_0, str_1, option_parser_1, list_0]
        option_0 = module_0._Option(str_3, str_0, list_1)
        option_parser_5 = module_0.OptionParser()
        any_0 = option_0.value()
        bool_0 = True
        float_0 = 897.37903
        option_parser_3.define(str_0, list_0, str_0, str_3, bool_0, str_2, float_0)
        option_0.set(dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'f'
        option_parser_1 = module_0.OptionParser()
        str_1 = ''
        option_parser_2 = module_0.OptionParser()
        option_parser_2.add_parse_callback(str_1)
        dict_0 = option_parser_1.group_dict(str_0)
        str_2 = "C'UA3=\t\x0c B2|\tVM\x0cZ4"
        bool_0 = True
        option_parser_0.define(str_2, str_1, str_1, bool_0)
        option_parser_3 = module_0.OptionParser()
        iterable_0 = option_parser_3.items()
        option_parser_0.print_help()
    except BaseException:
        pass

def test_case_33():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = ')Z'
        dict_0 = None
        option_parser_0.define(str_0, dict_0)
        str_1 = None
        option_parser_0.__setitem__(str_0, str_0)
        option_parser_0.parse_config_file(str_1)
    except BaseException:
        pass

def test_case_34():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '-+-umk:6'
        str_1 = 'S'
        option_parser_1 = module_0.OptionParser()
        option_parser_0.print_help()
        dict_0 = option_parser_0.group_dict(str_1)
        bool_0 = option_parser_0.__contains__(str_1)
        str_2 = 'dLl$.<!sFoGo>TF'
        str_3 = ';yC9yO^cK4.t'
        dict_1 = {str_2: bool_0, str_3: str_3}
        str_4 = 'autoescape'
        type_0 = None
        option_parser_0.define(str_4, dict_1, type_0, str_0, bool_0, str_4)
        str_5 = ']!r\t7yr0-mP'
        option_0 = module_0._Option(str_5, bool_0)
    except BaseException:
        pass