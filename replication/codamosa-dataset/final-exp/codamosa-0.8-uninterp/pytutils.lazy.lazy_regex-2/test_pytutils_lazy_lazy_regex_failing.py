# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        str_0 = ''
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 's'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -2419.0
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        str_0 = 'args'
        str_1 = ',agW'
        str_2 = 'foo'
        str_3 = 'bar'
        str_4 = (str_2, str_3)
        str_5 = {}
        str_6 = {str_0: str_4, str_1: str_5}
        var_0 = lazy_regex_0.__setstate__(str_6)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b';\xea\x97\xbc5\x88\xa3\xa2\x9c\xe3\xbbP\xe6\xc8j'
        set_0 = {bytes_0}
        list_0 = [set_0, set_0, bytes_0]
        lazy_regex_0 = module_0.LazyRegex(list_0)
        int_0 = 1135
        lazy_regex_1 = module_0.LazyRegex(lazy_regex_0, int_0)
        str_0 = '5\tGA\tgLdy3Wzlb[G'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        str_1 = 'console16m'
        invalid_pattern_1 = module_0.InvalidPattern(str_1)
        var_0 = invalid_pattern_1.__eq__(invalid_pattern_0)
        var_1 = invalid_pattern_1.__unicode__()
    except BaseException:
        pass

def test_case_5():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        str_0 = '-I8n(:!6]CIzN:\tF'
        var_0 = module_0.finditer_public(lazy_regex_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xb4\x9c\x1e\xb4^{\x1c\xe8\x10$i\xd5g\xc1'
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        int_0 = -2631
        str_0 = ']r\\27.,Mf";Jy[\t'
        dict_0 = {str_0: bytes_0, str_0: str_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_0.__getattr__(int_0)
    except BaseException:
        pass