# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0
import re as module_1

def test_case_0():
    pass

def test_case_1():
    complex_0 = None
    str_0 = None
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    invalid_pattern_0 = module_0.InvalidPattern(dict_0)
    var_0 = invalid_pattern_0.__eq__(complex_0)

def test_case_2():
    var_0 = module_0.lazy_compile()

def test_case_3():
    dict_0 = None
    lazy_regex_0 = module_0.LazyRegex()
    var_0 = lazy_regex_0.__getstate__()
    invalid_pattern_0 = module_0.InvalidPattern(dict_0)

def test_case_4():
    var_0 = module_0.install_lazy_compile()

def test_case_5():
    var_0 = module_0.reset_compile()

def test_case_6():
    str_0 = 'Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        '
    var_0 = module_0.finditer_public(str_0, str_0)

def test_case_7():
    str_0 = 'LazyRegex.__getattr__() should return attribute from real regexp.\n\n    The attribute should be read from the real regexp when compiled.\n    '
    str_1 = '^(.*)$'
    var_0 = module_1.compile(str_1)
    var_1 = var_0.pattern
    var_2 = [var_1]
    lazy_regex_0 = module_0.LazyRegex(var_2)
    var_3 = hasattr(lazy_regex_0, str_0)

def test_case_8():
    str_0 = '^(.*)$'
    var_0 = module_1.compile(str_0)
    var_1 = var_0.pattern
    var_2 = [var_1]
    lazy_regex_0 = module_0.LazyRegex(var_2)
    str_1 = 'foo'
    var_3 = hasattr(lazy_regex_0, str_1)
    str_2 = 'pattern'
    var_4 = hasattr(lazy_regex_0, str_2)
    str_3 = 'groups'
    var_5 = hasattr(lazy_regex_0, str_3)