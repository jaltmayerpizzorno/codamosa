# Automatically generated by Pynguin.
import ansible.utils.unsafe_proxy as module_0

def test_case_0():
    try:
        var_0 = module_0.to_unsafe_text()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'tasks_from'
        list_0 = [str_0, str_0, str_0]
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText()
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
        var_0 = ansible_unsafe_text_0.encode()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'tasks_from'
        list_0 = [str_0, str_0, str_0]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        list_0 = [ansible_unsafe_0]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
        list_1 = [unsafe_proxy_0, unsafe_proxy_0]
        str_0 = 'atomic_container'
        str_1 = 'failed to fetch PPA information, error was: %s'
        dict_0 = {str_0: list_0, str_0: list_0, str_1: list_1}
        native_jinja_unsafe_text_0 = module_0.NativeJinjaUnsafeText(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_unsafe_text_0 = None
        dict_0 = {ansible_unsafe_text_0: ansible_unsafe_text_0}
        var_0 = module_0.wrap_var(dict_0)
        unsafe_proxy_0 = module_0.UnsafeProxy()
    except BaseException:
        pass

def test_case_5():
    try:
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        list_0 = [ansible_unsafe_0]
        var_0 = module_0.wrap_var(list_0)
        var_1 = module_0.to_unsafe_text()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        list_0 = [bool_0]
        var_0 = module_0.to_unsafe_bytes(*list_0)
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        str_0 = '\rS7_UhYo$NKeH'
        dict_0 = {str_0: str_0}
        unsafe_proxy_0 = module_0.UnsafeProxy(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        var_0 = module_0.wrap_var(set_0)
        var_1 = module_0.to_unsafe_text()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '-)i'
        list_0 = None
        str_1 = 'QQ6lL7_)LqD5{`Wo/'
        dict_0 = {str_1: str_1}
        dict_1 = {list_0: list_0, list_0: list_0, list_0: list_0, list_0: dict_0}
        list_1 = [dict_1, dict_0, dict_0, dict_1]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_1)
        dict_2 = {str_0: list_0}
        ansible_unsafe_0 = module_0.AnsibleUnsafe(**dict_2)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = None
        dict_0 = None
        var_1 = module_0.wrap_var(dict_0)
        int_0 = -1
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText()
        var_2 = module_0.wrap_var(ansible_unsafe_text_0)
        int_1 = 0
        bytes_0 = b'\x1e\x0ct+\xb2\xf3Z\xed\x18k\xdb\xb9\x05\xf2M\xc0'
        var_3 = module_0.wrap_var(bytes_0)
        list_0 = [int_0, bytes_0]
        var_4 = module_0.wrap_var(list_0)
        float_0 = -1.0
        tuple_0 = None
        var_5 = module_0.wrap_var(tuple_0)
        var_6 = module_0.wrap_var(float_0)
        str_0 = "cu~m)Z'\\3]&5Du^\r({"
        var_7 = module_0.wrap_var(str_0)
        set_0 = {var_0, int_1}
        var_8 = module_0.wrap_var(set_0)
        var_9 = module_0.wrap_var(set_0)
        var_10 = module_0.wrap_var(ansible_unsafe_text_0)
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        var_11 = ansible_unsafe_bytes_0.decode(*list_0)
    except BaseException:
        pass