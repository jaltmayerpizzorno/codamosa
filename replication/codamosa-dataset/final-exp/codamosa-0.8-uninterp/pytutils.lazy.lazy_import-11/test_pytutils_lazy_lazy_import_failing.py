# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = ''
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = str(illegal_use_of_scope_replacer_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'IllegalUseOfScopeReplacer.__str__() should return a str object'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        float_0 = -1241.26
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(tuple_0, float_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xa8\x1aV\xe3\x02\x9d'
        str_0 = 'hM !aHi}Pi'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = {}
        str_0 = 'extra'
        list_0 = [var_0, str_0, var_0]
        tuple_0 = None
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, tuple_0)
        var_1 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        var_2 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\\S\x0b\xb0\x1fzu'
        float_0 = 2705.031254
        list_0 = [bytes_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, float_0, list_0)
        str_0 = ''
        var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
        var_1 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = None
        import_processor_0 = None
        set_0 = {int_0}
        import_replacer_0 = module_0.ImportReplacer(int_0, import_processor_0, int_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'sC\t2P1 zp-e+'
        var_0 = module_0.disallow_proxying()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_1 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '(oE5'
        int_0 = -3207
        list_0 = [str_0, int_0, str_0]
        set_0 = set()
        import_replacer_0 = module_0.ImportReplacer(int_0, list_0, set_0, str_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        dict_0 = {set_0: set_0, set_0: set_0}
        bool_0 = None
        bool_1 = False
        bytes_0 = b''
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bool_1, bytes_0)
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(bool_0, illegal_use_of_scope_replacer_0)
        var_0 = module_0.lazy_import(set_0, dict_0, illegal_use_of_scope_replacer_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'2\x1d\xe5\xf6\x95\x04\xff\xc0{H\x8du\xf5\xc8a\x99\xc6F"\x9e'
        str_0 = 'G\x0b(\t,'
        var_0 = module_0.lazy_import(bytes_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = module_0.disallow_proxying()
        var_1 = globals()
        str_0 = "\n    Turn a function to a bound method on an instance\n\n    >>> class Foo(object):\n    ...     def __init__(self, x, y):\n    ...         self.x = x\n    ...         self.y = y\n    >>> foo = Foo(2, 3)\n    >>> my_unbound_method = lambda self: self.x * self.y\n    >>> bind(foo, my_unbound_method, 'multiply')\n    >>> foo.multiply()  # noinspection PyUnresolvedReferences\n    6\n\n    :param object instance: some object\n    :param callable func: unbound method (i.e. a function that takes `self` argument, that you now\n        want to be bound to this class as a method)\n    :param str as_name: name of the method to create on the object\n    "
        var_2 = module_0.lazy_import(var_1, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        import_processor_0 = module_0.ImportProcessor()
        bytes_0 = b'y\x8c\xc1\xf3 \r\xf5\x1c\xd6\xb2"\xfbb'
        str_0 = '\rVUo{hg(ln\nXvN)7'
        var_0 = import_processor_0.lazy_import(bytes_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'IllegalUseOfScopeReplacer.__str__() should return a str object'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {str_0: dict_0, str_0: str_0, str_0: dict_0}
        float_0 = 2524.0203
        import_processor_0 = module_0.ImportProcessor(float_0)
        import_replacer_0 = None
        import_replacer_1 = module_0.ImportReplacer(dict_1, import_processor_0, dict_1, import_replacer_0)
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n    import bzrlib\n    from bzrlib.option import Option\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\n    import bzrlib\n    from 9zrlb.option import Opti\n S  '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        import_processor_0 = module_0.ImportProcessor()
        str_0 = "\\A'(.*)'\\Z"
        var_0 = import_processor_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = {}
        str_0 = ''
        scope_replacer_0 = module_0.ScopeReplacer(var_0, str_0, str_0)
        int_0 = 1
        var_1 = scope_replacer_0.__setattr__(str_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = {}
        str_0 = 'u'
        scope_replacer_0 = module_0.ScopeReplacer(var_0, str_0, str_0)
        str_1 = '\t*/T\r)_ZG.\x0bEzB'
        str_2 = "KL>#.['"
        var_1 = module_0.lazy_import(str_1, str_2)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'H(g(f#tr=UC'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = '9\n>UnMlg2t&AK!G9'
        bool_0 = False
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_1, str_1, bool_0)
        list_0 = []
        var_0 = module_0.lazy_import(list_0, import_replacer_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '\n    import .zrl7b\n    from bzrlg.option imporP Opti\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = {}
        var_1 = lambda x, y, z: x
        str_0 = 'name'
        scope_replacer_0 = module_0.ScopeReplacer(var_0, var_1, str_0)
        var_2 = scope_replacer_0.__name__
    except BaseException:
        pass