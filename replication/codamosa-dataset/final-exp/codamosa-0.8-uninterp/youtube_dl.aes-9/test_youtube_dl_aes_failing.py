# Automatically generated by Pynguin.
import youtube_dl.aes as module_0
import youtube_dl.utils as module_1
import base64 as module_2

def test_case_0():
    try:
        str_0 = '\r:B'
        var_0 = module_0.aes_cbc_decrypt(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1899
        str_0 = 'G}y'
        var_0 = module_0.aes_cbc_encrypt(int_0, str_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0]
        str_0 = 'l '
        var_0 = module_0.aes_decrypt(list_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '/gj6OJ7+A+Sx1Sd6M9Y6ZQQ=='
        var_0 = module_1.bytes_to_intlist(str_0)
        var_1 = module_0.aes_cbc_decrypt(str_0, var_0, var_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        var_0 = module_0.sub_bytes_inv(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -2378.3
        bytes_0 = b"\xc8'\xcb\xec\xa1\xb9\x0f\xa2\xdf\x02\x8b"
        var_0 = module_0.key_schedule_core(float_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        var_0 = module_0.mix_columns_inv(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'wmTFp.mk\n5CmC7n['
        var_0 = module_0.shift_rows_inv(str_0)
        bytes_0 = b':B\xba\x17A'
        var_1 = module_0.inc(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 212
        var_0 = module_0.inc(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "g(A3@)'H"
        var_0 = module_1.bytes_to_intlist(str_0)
        str_1 = 'T'
        str_2 = "\rf'"
        var_1 = module_1.bytes_to_intlist(str_1)
        var_2 = module_0.aes_cbc_decrypt(var_1, var_0, str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'1234'
        int_0 = -9
        int_1 = 3
        int_2 = 15
        int_3 = [int_0, int_1, int_1, int_0, int_2, int_1, int_0, int_1, int_1, int_1, int_0, int_1, int_0, int_1, int_0, int_1]
        var_0 = module_2.b64decode(bytes_0)
        var_1 = module_0.aes_cbc_encrypt(var_0, int_3, int_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '/gj6OJ7+A+Sx1Sd6M9Y6ZQQ='
        var_0 = module_1.bytes_to_intlist(str_0)
        str_1 = 'j7JTZ+plobcjBzEZJbA=='
        var_1 = module_2.b64decode(str_1)
        var_2 = module_1.bytes_to_intlist(var_1)
        str_2 = 'CTb+8tEJIJ2jz/0qIOMbuw=='
        var_3 = module_1.bytes_to_intlist(str_2)
        var_4 = module_0.aes_cbc_decrypt(var_3, var_0, var_2)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 694.9
        bool_0 = False
        var_0 = module_0.rijndael_mul(float_0, bool_0)
        float_1 = 960.6
        str_0 = 'th\r'
        int_0 = 32
        var_1 = module_0.aes_ctr_decrypt(float_1, str_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -9
        int_1 = [int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0]
        var_0 = module_0.aes_cbc_encrypt(int_1, int_1, int_1)
    except BaseException:
        pass