# Automatically generated by Pynguin.
import ansible.playbook.role.requirement as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        bool_0 = True
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 't]O-qm'
        bytes_0 = b'\xa3\xda\xf8'
        str_1 = 'h/bGIHc8nS'
        str_2 = 'Processor Speed'
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.scm_archive_role(str_0, bytes_0, str_1, str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        role_requirement_0 = module_0.RoleRequirement()
        dict_0 = {bool_0: bool_0}
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        var_1 = role_requirement_0.role_yaml_parse(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        str_0 = 'Failed to get envra information from RPM package: %s'
        var_1 = role_requirement_0.role_yaml_parse(str_0)
        role_requirement_1 = module_0.RoleRequirement()
        var_2 = role_requirement_1.role_yaml_parse(dict_0)
        var_3 = role_requirement_1.role_yaml_parse(dict_0)
        str_1 = '\n---\nmodule: unarchive\nversion_added: \'1.4\'\nshort_description: Unpacks an archive after (optionally) copying it from the local machine\ndescription:\n     - The C(unarchive) module unpacks an archive. It will not unpack a compressed file that does not contain an archive.\n     - By default, it will copy the source file from the local system to the target before unpacking.\n     - Set C(remote_src=yes) to unpack an archive which already exists on the target.\n     - If checksum validation is desired, use M(ansible.builtin.get_url) or M(ansible.builtin.uri) instead to fetch the file and set C(remote_src=yes).\n     - For Windows targets, use the M(community.windows.win_unzip) module instead.\noptions:\n  src:\n    description:\n      - If C(remote_src=no) (default), local path to archive file to copy to the target server; can be absolute or relative. If C(remote_src=yes), path on the\n        target server to existing archive file to unpack.\n      - If C(remote_src=yes) and C(src) contains C(://), the remote machine will download the file from the URL first. (version_added 2.0). This is only for\n        simple cases, for full download support use the M(ansible.builtin.get_url) module.\n    type: path\n    required: true\n  dest:\n    description:\n      - Remote absolute path where the archive should be unpacked.\n    type: path\n    required: true\n  copy:\n    description:\n      - If true, the file is copied from local controller to the managed (remote) node, otherwise, the plugin will look for src archive on the managed machine.\n      - This option has been deprecated in favor of C(remote_src).\n      - This option is mutually exclusive with C(remote_src).\n    type: bool\n    default: yes\n  creates:\n    description:\n      - If the specified absolute path (file or directory) already exists, this step will B(not) be run.\n    type: path\n    version_added: "1.6"\n  io_buffer_size:\n    description:\n      - Size of the volatile memory buffer that is used for extracting files from the archive in bytes.\n    type: int\n    default: 64 KiB\n    version_added: "2.12"\n  list_files:\n    description:\n      - If set to True, return the list of files that are contained in the tarball.\n    type: bool\n    default: no\n    version_added: "2.0"\n  exclude:\n    description:\n      - List the directory and file entries that you would like to exclude from the unarchive action.\n      - Mutually exclusive with C(include).\n    type: list\n    default: []\n    elements: str\n    version_added: "2.1"\n  include:\n    description:\n      - List of directory and file entries that you would like to extract from the archive. Only\n        files listed here will be extracted.\n      - Mutually exclusive with C(exclude).\n    type: list\n    default: []\n    elements: str\n    version_added: "2.11"\n  keep_newer:\n    description:\n      - Do not replace existing files that are newer than files from the archive.\n    type: bool\n    default: no\n    version_added: "2.1"\n  extra_opts:\n    description:\n      - Specify additional options by passing in an array.\n      - Each space-separated command-line option should be a new element of the array. See examples.\n      - Command-line options with multiple elements must use multiple lines in the array, one for each element.\n    type: list\n    elements: str\n    default: ""\n    version_added: "2.1"\n  remote_src:\n    description:\n      - Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.\n      - This option is mutually exclusive with C(copy).\n    type: bool\n    default: no\n    version_added: "2.2"\n  validate_certs:\n    description:\n      - This only applies if using a https URL as the source of the file.\n      - This should only set to C(no) used on personally controlled sites using self-signed certificate.\n      - Prior to 2.2 the code worked as if this was set to C(yes).\n    type: bool\n    default: yes\n    version_added: "2.2"\nextends_documentation_fragment:\n- action_common_attributes\n- action_common_attributes.flow\n- action_common_attributes.files\n- decrypt\n- files\nattributes:\n    action:\n      support: full\n    async:\n      support: none\n    bypass_host_loop:\n      support: none\n    check_mode:\n      support: full\n    diff_mode:\n      support: partial\n      details: Uses gtar\'s C(--diff) arg to calculate if changed or not. If this C(arg) is not supported, it will always unpack the archive.\n    platform:\n      platforms: posix\n    safe_file_operations:\n      support: none\n    vault:\n      support: full\ntodo:\n    - Re-implement tar support using native tarfile module.\n    - Re-implement zip support using native zipfile module.\nnotes:\n    - Requires C(zipinfo) and C(gtar)/C(unzip) command on target host.\n    - Requires C(zstd) command on target host to expand I(.tar.zst) files.\n    - Can handle I(.zip) files using C(unzip) as well as I(.tar), I(.tar.gz), I(.tar.bz2), I(.tar.xz), and I(.tar.zst) files using C(gtar).\n    - Does not handle I(.gz) files, I(.bz2) files, I(.xz), or I(.zst) files that do not contain a I(.tar) archive.\n    - Existing files/directories in the destination which are not in the archive\n      are not touched. This is the same behavior as a normal archive extraction.\n    - Existing files/directories in the destination which are not in the archive\n      are ignored for purposes of deciding if the archive should be unpacked or not.\nseealso:\n- module: community.general.archive\n- module: community.general.iso_extract\n- module: community.windows.win_unzip\nauthor: Michael DeHaan\n'
        var_4 = role_requirement_1.role_yaml_parse(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        role_requirement_0 = module_0.RoleRequirement()
        role_requirement_1 = module_0.RoleRequirement()
        var_0 = role_requirement_1.role_yaml_parse(dict_0)
        str_0 = 'Failed to get envra information from RPM package: %s'
        var_1 = role_requirement_1.role_yaml_parse(str_0)
        role_requirement_2 = module_0.RoleRequirement()
        var_2 = role_requirement_1.role_yaml_parse(dict_0)
        str_1 = '(%9CU,~l\r\x0c;c\\@4H l'
        var_3 = role_requirement_2.repo_url_to_role_name(str_1)
        var_4 = role_requirement_0.role_yaml_parse(role_requirement_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        role_requirement_1 = module_0.RoleRequirement()
        var_1 = role_requirement_0.role_yaml_parse(var_0)
        str_0 = 'http://schemas.microsoft.com/wbem/wsman/1/windows/shell/Send'
        var_2 = role_requirement_0.role_yaml_parse(str_0)
        display_0 = module_1.Display()
        int_0 = 21
        var_3 = role_requirement_1.role_yaml_parse(int_0)
    except BaseException:
        pass