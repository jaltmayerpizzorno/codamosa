# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.netutil as module_1
import tornado.httpclient as module_2
import tornado.ioloop as module_3

def test_case_0():
    pass

def test_case_1():
    str_0 = 'J#;b|\r  rNk,6$}Sr!'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)

def test_case_2():
    str_0 = 'Y|VA?yz\x0b'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = h_t_t_p_timeout_error_0.__str__()

def test_case_3():
    str_0 = "Ps`OYSp'*m4"
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)

def test_case_4():
    str_0 = 'headers'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_5():
    int_0 = -116
    str_0 = 'yesterday at %(time)s'
    resolver_0 = module_1.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    datetime_0 = None
    bool_0 = False
    h_t_t_p_request_0 = module_2.HTTPRequest(str_0, str_0, awaitable_0, str_0, str_0, int_0, datetime_0, bool_0, bool_0, bool_0)
    dict_0 = {}
    i_o_loop_0 = module_3.IOLoop(**dict_0)
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_1 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_1.close()

def test_case_6():
    str_0 = '}+'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()
    int_0 = -95
    resolver_0 = module_1.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    str_2 = 'j,_@uhcmG'
    datetime_0 = None
    bool_0 = False
    h_t_t_p_request_0 = module_2.HTTPRequest(str_0, str_0, awaitable_0, str_2, str_2, int_0, datetime_0, bool_0, bool_0, bool_0)
    callable_0 = None
    dict_0 = {}
    i_o_loop_0 = module_3.IOLoop(**dict_0)
    t_c_p_client_0 = None
    h_t_t_p_connection_0 = module_0._HTTPConnection(h_t_t_p_stream_closed_error_0, h_t_t_p_request_0, callable_0, i_o_loop_0, int_0, t_c_p_client_0, int_0, int_0)
    str_3 = h_t_t_p_stream_closed_error_0.__str__()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    str_4 = '80y0f7K4Id-c;vYRm1g'
    h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_4)

def test_case_7():
    str_0 = '}+'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = '66tC\\F`?&K/6g%\x0bs'
    int_0 = -95
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_2 = h_t_t_p_timeout_error_0.__str__()
    resolver_0 = module_1.Resolver()
    awaitable_0 = resolver_0.resolve(str_1, int_0)
    str_3 = 'j,_@uhcmG'
    datetime_0 = None
    bool_0 = False
    bool_1 = False
    h_t_t_p_request_0 = module_2.HTTPRequest(str_1, str_1, awaitable_0, str_3, str_3, int_0, datetime_0, bool_0, bool_0, bool_1)
    callable_0 = None
    dict_0 = {}
    i_o_loop_0 = module_3.IOLoop(**dict_0)
    t_c_p_client_0 = None
    h_t_t_p_connection_0 = module_0._HTTPConnection(h_t_t_p_stream_closed_error_0, h_t_t_p_request_0, callable_0, i_o_loop_0, int_0, t_c_p_client_0, int_0, int_0)
    str_4 = h_t_t_p_stream_closed_error_0.__str__()
    str_5 = h_t_t_p_stream_closed_error_0.__str__()
    str_6 = h_t_t_p_stream_closed_error_0.__str__()
    str_7 = h_t_t_p_stream_closed_error_0.__str__()
    str_8 = h_t_t_p_stream_closed_error_0.__str__()
    bytes_0 = b'\xc2}\xe4$o\xd1(\xf4S'
    h_t_t_p_connection_0.data_received(bytes_0)
    str_9 = h_t_t_p_stream_closed_error_0.__str__()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()

def test_case_8():
    str_0 = '}+'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = '66tC\\F`?&K/6g%\x0bs'
    int_0 = -95
    str_2 = 'yesterday at %(time)s'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_2)
    str_3 = h_t_t_p_timeout_error_0.__str__()
    resolver_0 = module_1.Resolver()
    awaitable_0 = resolver_0.resolve(str_1, int_0)
    str_4 = 'mb/*'
    datetime_0 = None
    bool_0 = False
    bool_1 = False
    h_t_t_p_request_0 = module_2.HTTPRequest(str_1, str_1, awaitable_0, str_4, str_4, int_0, datetime_0, bool_0, bool_0, bool_1)
    callable_0 = None
    dict_0 = {}
    i_o_loop_0 = module_3.IOLoop(**dict_0)
    t_c_p_client_0 = None
    h_t_t_p_connection_0 = module_0._HTTPConnection(h_t_t_p_stream_closed_error_0, h_t_t_p_request_0, callable_0, i_o_loop_0, int_0, t_c_p_client_0, int_0, int_0)
    str_5 = h_t_t_p_stream_closed_error_0.__str__()
    str_6 = h_t_t_p_stream_closed_error_0.__str__()
    str_7 = h_t_t_p_stream_closed_error_0.__str__()
    str_8 = h_t_t_p_stream_closed_error_0.__str__()
    str_9 = h_t_t_p_stream_closed_error_0.__str__()
    bytes_0 = b'\xc2}\xe4$W\x04\xd1(\xf4S'
    h_t_t_p_connection_0.data_received(bytes_0)
    str_10 = h_t_t_p_stream_closed_error_0.__str__()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    int_1 = None
    simple_async_h_t_t_p_client_0.initialize(int_1, resolver_0)

def test_case_9():
    str_0 = '66tC\\F`?&K/6g%\x0bs'
    int_0 = -95
    str_1 = 'yesterday at %(time)s'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_1)
    str_2 = h_t_t_p_timeout_error_0.__str__()
    resolver_0 = module_1.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    str_3 = 'j,_@uhcmG'
    datetime_0 = None
    bool_0 = True
    bool_1 = False
    h_t_t_p_request_0 = module_2.HTTPRequest(str_0, str_0, awaitable_0, str_3, str_3, int_0, datetime_0, bool_0, bool_0, bool_1)
    dict_0 = {}
    i_o_loop_0 = module_3.IOLoop(**dict_0)
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, awaitable_0)
    simple_async_h_t_t_p_client_0.close()
    simple_async_h_t_t_p_client_1 = module_0.SimpleAsyncHTTPClient(**dict_0)

def test_case_10():
    str_0 = '}+'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()
    str_2 = '66tC\\F`?&K/6g%\x0bs'
    int_0 = -95
    str_3 = 'yesterday at %(time)s'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_3)
    str_4 = h_t_t_p_timeout_error_0.__str__()
    resolver_0 = module_1.Resolver()
    awaitable_0 = resolver_0.resolve(str_2, int_0)
    str_5 = 'j,_@uhcmG'
    datetime_0 = None
    bool_0 = True
    bool_1 = False
    h_t_t_p_request_0 = module_2.HTTPRequest(str_2, str_2, awaitable_0, str_5, str_5, int_0, datetime_0, bool_0, bool_0, bool_1)
    callable_0 = None
    dict_0 = {}
    i_o_loop_0 = module_3.IOLoop(**dict_0)
    t_c_p_client_0 = None
    str_6 = h_t_t_p_stream_closed_error_0.__str__()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, awaitable_0)
    simple_async_h_t_t_p_client_0.close()
    str_7 = h_t_t_p_stream_closed_error_0.__str__()
    int_1 = -2590
    tuple_0 = (int_0, int_1)
    callable_1 = None
    int_2 = 1138
    h_t_t_p_connection_0 = module_0._HTTPConnection(tuple_0, h_t_t_p_request_0, callable_0, callable_1, int_2, t_c_p_client_0, int_0, int_1)
    int_3 = 2182
    simple_async_h_t_t_p_client_1 = module_0.SimpleAsyncHTTPClient(**dict_0)
    bytes_0 = b''
    h_t_t_p_connection_0.on_connection_close()
    h_t_t_p_connection_0.data_received(bytes_0)
    int_4 = -1810
    i_o_loop_0.start()
    simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_1)
    h_t_t_p_connection_1 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_0, callable_1, int_1, t_c_p_client_0, int_3, int_4)
    h_t_t_p_connection_0.finish()