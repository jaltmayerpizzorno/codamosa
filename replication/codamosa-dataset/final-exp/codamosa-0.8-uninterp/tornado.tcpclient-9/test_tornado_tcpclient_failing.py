# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.ioloop as module_1
import socket as module_2
import _asyncio as module_3
import datetime as module_4
import concurrent.futures._base as module_5

def test_case_0():
    try:
        list_0 = []
        int_0 = 2533
        connector_0 = module_0._Connector(list_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '1.2.3.4'
        int_0 = 8888
        t_c_p_client_0 = module_0.TCPClient()
        t_c_p_client_0.close()
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        set_0 = {int_0, i_o_loop_1}
        dict_0 = {str_0: str_0}
        tuple_0 = (i_o_loop_1, set_0, dict_0)
        list_0 = [tuple_0]
        connector_0 = module_0._Connector(list_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        i_o_loop_0 = module_1.IOLoop()
        t_c_p_client_0 = module_0.TCPClient()
        address_family_0 = module_2.AddressFamily.AF_AX25
        selectable_0 = module_1._Selectable()
        i_o_loop_0.clear_current()
        future_0 = None
        int_0 = selectable_0.fileno()
        tuple_0 = (selectable_0, future_0)
        i_o_loop_0.make_current()
        i_o_loop_0.make_current()
        dict_0 = {}
        list_0 = [tuple_0]
        callable_0 = None
        connector_0 = module_0._Connector(list_0, callable_0)
        future_1 = module_3.Future(**dict_0)
        iterator_0 = None
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_1)
    except BaseException:
        pass

def test_case_3():
    try:
        t_c_p_client_0 = module_0.TCPClient()
        t_c_p_client_0.close()
        float_0 = -651.1313609238093
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        t_c_p_client_1 = module_0.TCPClient()
        address_family_0 = module_2.AddressFamily.AF_AX25
        selectable_0 = module_1._Selectable()
        future_0 = None
        tuple_0 = (selectable_0, future_0)
        tuple_1 = (address_family_0, tuple_0)
        list_0 = [tuple_1, tuple_1, tuple_1]
        tuple_2 = (list_0, list_0)
        dict_0 = {}
        tuple_3 = (tuple_2, dict_0)
        list_1 = [tuple_3]
        list_2 = []
        timedelta_0 = module_4.timedelta(*list_2)
        connector_0 = module_0._Connector(list_1, timedelta_0)
        connector_0.set_timeout(float_0)
        future_1 = module_5.Future()
        future_2 = connector_0.start()
    except BaseException:
        pass

def test_case_4():
    try:
        i_o_loop_0 = module_1.IOLoop()
        float_0 = 2.0
        address_family_0 = module_2.AddressFamily.AF_AX25
        selectable_0 = module_1._Selectable()
        i_o_loop_0.clear_current()
        future_0 = None
        int_0 = selectable_0.fileno()
        tuple_0 = (selectable_0, future_0)
        i_o_loop_0.make_current()
        list_0 = [tuple_0]
        i_o_loop_0.make_current()
        socket_0 = module_2.socket()
        connector_0 = module_0._Connector(list_0, socket_0)
        connector_0.clear_timeouts()
        connector_0.on_timeout()
        connector_0.close_streams()
        connector_0.set_timeout(float_0)
        dict_0 = {}
        list_1 = [tuple_0]
        callable_0 = None
        connector_1 = module_0._Connector(list_0, callable_0)
        connector_0.on_connect_timeout()
        future_1 = module_3.Future(**dict_0)
        connector_0.on_connect_timeout()
        future_2 = module_3.Future()
        iterator_0 = None
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_2)
        connector_2 = module_0._Connector(list_1, callable_0)
        connector_2.on_connect_done(iterator_0, address_family_0, tuple_0, future_1)
    except BaseException:
        pass

def test_case_5():
    try:
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        t_c_p_client_0 = module_0.TCPClient()
        float_0 = 2.0
        address_family_0 = module_2.AddressFamily.AF_AX25
        selectable_0 = module_1._Selectable()
        future_0 = None
        tuple_0 = (selectable_0, future_0)
        i_o_loop_1.make_current()
        list_0 = [tuple_0]
        i_o_loop_0.make_current()
        socket_0 = module_2.socket()
        connector_0 = module_0._Connector(list_0, socket_0)
        connector_0.clear_timeouts()
        connector_0.on_connect_timeout()
        connector_0.on_timeout()
        connector_0.close_streams()
        connector_0.set_timeout(float_0)
        connector_0.clear_timeout()
        future_1 = module_5.Future()
        callable_0 = None
        connector_1 = module_0._Connector(list_0, callable_0)
        connector_2 = module_0._Connector(list_0, callable_0)
        connector_1.on_connect_timeout()
        future_2 = module_3.Future()
        iterator_0 = None
        connector_2.on_connect_done(iterator_0, address_family_0, tuple_0, future_2)
    except BaseException:
        pass

def test_case_6():
    try:
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        t_c_p_client_0 = module_0.TCPClient()
        float_0 = 2.0
        address_family_0 = module_2.AddressFamily.AF_AX25
        selectable_0 = module_1._Selectable()
        future_0 = None
        tuple_0 = (selectable_0, future_0)
        tuple_1 = (address_family_0, tuple_0)
        list_0 = [tuple_1, tuple_1, tuple_1]
        tuple_2 = (list_0, list_0)
        i_o_loop_1.make_current()
        list_1 = [tuple_0]
        i_o_loop_0.make_current()
        socket_0 = module_2.socket()
        connector_0 = module_0._Connector(list_1, socket_0)
        connector_0.clear_timeouts()
        connector_0.on_timeout()
        connector_0.close_streams()
        connector_0.set_connect_timeout(float_0)
        connector_0.set_timeout(float_0)
        connector_0.clear_timeouts()
        connector_0.clear_timeout()
        future_1 = module_5.Future()
        dict_0 = {}
        list_2 = [tuple_0]
        callable_0 = None
        connector_1 = module_0._Connector(list_1, callable_0)
        connector_2 = module_0._Connector(list_2, callable_0)
        connector_0.on_connect_timeout()
        future_2 = module_3.Future(**dict_0)
        iterator_0 = None
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_2)
        connector_1.on_connect_done(tuple_2, address_family_0, tuple_0, future_2)
    except BaseException:
        pass