# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = '#/definitions/'
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.Field(allow_null=bool_0)
        module_0.set_definitions(field_0, schema_definitions_0)
        field_1 = module_1.Field()
        iterator_0 = schema_definitions_0.__iter__()
        schema_definitions_1 = module_0.SchemaDefinitions()
        any_0 = schema_definitions_1.__getitem__(field_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'D'
        list_0 = []
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0)
        schema_definitions_0.__delitem__(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = None
        field_0 = module_1.Field(default=list_0)
        str_0 = ']i:9]'
        dict_0 = {str_0: str_0}
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        any_0 = schema_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '@3O1eZ6tw*EZ'
        field_0 = module_1.Field(default=str_0)
        reference_0 = module_0.Reference(str_0, field_0)
        reference_1 = module_0.Reference(reference_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1416
        str_0 = 's\x0b9cT;c]4oHZF'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = None
        str_0 = '\\'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(tuple_0, tuple_0)
        list_0 = [schema_definitions_0, tuple_0, schema_definitions_0]
        dict_0 = {}
        schema_0 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '~I\tixIlS'
        str_1 = '#/definitions/'
        str_2 = "\x0b'U:@.A\rm3"
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(str_0)
        set_0 = {str_0, str_1, str_1}
        list_0 = [set_0]
        schema_definitions_0 = module_0.SchemaDefinitions()
        bool_1 = False
        field_0 = module_1.Field(allow_null=bool_1)
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_1 = module_0.Schema(*list_0)
        field_1 = module_1.Field(description=str_0)
        int_0 = schema_1.__len__()
        schema_2 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        field_0 = None
        str_0 = '4kl=_M6z$6g%ph'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(field_0)
        schema_0 = module_0.Schema()
        str_1 = schema_0.__repr__()
        any_1 = schema_0.__getitem__(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '~I\tixIlS'
        str_1 = '#/definitions/'
        str_2 = "\x0b'U:@.A\rm3"
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(str_1)
        set_0 = {str_2, str_1, str_1}
        list_0 = [set_0]
        schema_definitions_0 = module_0.SchemaDefinitions()
        bool_1 = False
        field_0 = module_1.Field(allow_null=bool_1)
        module_0.set_definitions(field_0, schema_definitions_0)
        int_0 = schema_0.__len__()
        schema_1 = module_0.Schema(*list_0)
        schema_2 = module_0.Schema()
        schema_3 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'j^v;,dm#82'
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(str_0, schema_definitions_0)
        schema_definitions_0.__setitem__(str_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        field_0 = module_1.Field(allow_null=bool_0)
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        list_0 = [dict_0]
        schema_0 = module_0.Schema(*list_0, **dict_0)
        module_0.set_definitions(field_0, schema_definitions_0)
        dict_1 = {field_0: schema_0}
        bool_1 = schema_0.__eq__(dict_1)
        list_1 = [schema_0]
        int_0 = schema_0.__len__()
        schema_definitions_1 = module_0.SchemaDefinitions(*list_1)
        iterator_0 = schema_definitions_0.__iter__()
        schema_1 = module_0.Schema(*list_1, **dict_0)
        iterator_1 = schema_0.__iter__()
        schema_definitions_1.__setitem__(int_0, iterator_1)
        iterator_2 = schema_1.__iter__()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_2 = module_0.Schema(*list_1)
        schema_3 = module_0.Schema()
        int_1 = schema_3.__len__()
        str_0 = schema_1.__repr__()
        reference_0 = module_0.Reference(str_0, schema_definitions_0, **dict_0)
        schema_definitions_0.__setitem__(str_0, schema_0)
        bool_2 = schema_2.__eq__(schema_2)
        bool_3 = schema_1.__eq__(iterator_0)
        schema_definitions_2 = module_0.SchemaDefinitions(*list_1)
        iterator_3 = schema_definitions_2.__iter__()
        schema_4 = module_0.Schema(**dict_0)
        bool_4 = schema_2.__eq__(iterator_1)
        bool_5 = schema_4.__eq__(int_1)
        bool_6 = True
        any_0 = reference_0.validate(dict_0, strict=bool_6)
        any_1 = reference_0.validate(schema_definitions_1)
    except BaseException:
        pass