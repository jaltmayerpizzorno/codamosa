# Automatically generated by Pynguin.
import typesystem.formats as module_0
import datetime as module_1

def test_case_0():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2019-08-32'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        date_format_0 = module_0.DateFormat()
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(base_format_0)
    except BaseException:
        pass

def test_case_2():
    try:
        time_format_0 = module_0.TimeFormat()
        base_format_0 = module_0.BaseFormat()
        optional_0 = base_format_0.serialize(base_format_0)
    except BaseException:
        pass

def test_case_3():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2019-08-32'
        bool_0 = date_format_0.is_native_type(date_format_0)
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        timedelta_0 = module_1.timedelta()
        str_0 = '\n    Build a typed field or union of typed fields from a JSON schema object.\n    '
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '40:00#O0.01'
        bool_0 = time_format_0.is_native_type(str_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '"T6&T>]opjChO\x0c'
        list_0 = []
        time_format_0 = module_0.TimeFormat(*list_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '40:00|J#O0.0'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        str_0 = '2019-10-0T2:9:5'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_10():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2019-08-32'
        str_1 = None
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(str_1)
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(time_format_0)
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = 'hL*'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        time_format_0 = module_0.TimeFormat()
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = 'h)L*'
        optional_0 = time_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass

def test_case_14():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '$L|8yz)%+/wj)0"0hKOb'
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        time_format_0 = module_0.TimeFormat()
        complex_0 = None
        optional_0 = time_format_0.serialize(complex_0)
        str_0 = '2019-50-0T23:59:59'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '2019-10-0T2:49:5'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_1 = u_u_i_d_format_0.serialize(str_0)
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        date_format_0 = module_0.DateFormat()
        var_0 = None
        optional_0 = date_format_0.serialize(var_0)
        str_0 = '2019-08-32'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '01:00'
        time_0 = time_format_0.validate(str_0)
        str_1 = '12:00'
        time_1 = time_format_0.validate(str_1)
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '00:00:00.00'
        time_0 = time_format_0.validate(str_0)
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(time_0)
    except BaseException:
        pass

def test_case_20():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2018-05-06T20:16:47.222000+00:00'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2018-05-06T20:16:47.222000+08'
        datetime_1 = date_time_format_0.validate(str_1)
        str_2 = '2018-05-06T20:16:47.222000-08:30'
        datetime_2 = date_time_format_0.validate(str_2)
        datetime_3 = date_time_format_0.validate(str_2)
        datetime_4 = date_time_format_0.validate(date_time_format_0)
    except BaseException:
        pass

def test_case_21():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '00:00:00.00'
        time_0 = time_format_0.validate(str_0)
        date_format_0 = module_0.DateFormat()
        optional_0 = time_format_0.serialize(time_0)
        optional_1 = date_format_0.serialize(time_0)
    except BaseException:
        pass

def test_case_22():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-10-0T2:59:5'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass