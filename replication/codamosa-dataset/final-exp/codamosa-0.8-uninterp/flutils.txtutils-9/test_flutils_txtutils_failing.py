# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    try:
        sequence_0 = None
        int_0 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = '\r&"5%\x0ba!]'
        int_0 = module_0.len_without_ansi(str_0)
        str_1 = ':\n '
        str_2 = "Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n         seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n             of strings.\n\n    :rtype:\n        :obj:`int`\n\n    Example:\n        >>> from flutils.txtutils import len_without_ansi\n        >>> text = '\\x1b[38;5;209mfoobar\\x1b[0m'\n        >>> len_without_ansi(text)\n        6\n    "
        str_3 = '.DFO%})C(0z/An^'
        str_4 = 'j]s}N'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_3, str_4, bool_0, bool_0, max_lines=int_0, placeholder=str_1)
        list_0 = ansi_text_wrapper_0.wrap(str_2)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0)
        sequence_0 = None
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'QvL;u'
        bool_0 = False
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'CP&v?%'
        str_1 = 'Generator that expands the given attr_map and yields an _AttrMapping\n    named tuple.\n\n    An attr_map is a tuple with each row containing a :term:`foreign-name`\n    which is a specially formatted string.\n    '
        int_0 = 2701
        str_2 = 'I'
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
        list_0 = ansi_text_wrapper_0.wrap(str_2)
        bool_1 = True
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_0, bool_1, int_0, max_lines=int_0)
        str_3 = ansi_text_wrapper_1.fill(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -2422
        str_0 = "A Finder that is used by Python's import to provide a\n    :obj:`ModuleSpec <importlib.machinery.ModuleSpec>` for a cherry-picking\n    module package.\n\n    This finder is a singleton, in that, on first use of\n    :obj:`~flutils.cherry_pick` this finder object is added to the top of\n    :obj:`sys.meta_path`.  Each subsequent use of :obj:`~flutils.cherry_pick`\n    will use the same object.\n\n    This object is used to cache a cherry-picking-module's data from a\n    module-package that is using the :obj:`~flutils.cherry_pick` function.\n\n    The :obj:`ModuleSpec <importlib.machinery.ModuleSpec>` created in this\n    finder's ``find_spec()`` method, will be set to use the custom\n    :obj:`~_CherryPicker <flutils.moduleutils._CherryPick>` loader.\n    Additionally, the cached data will be added to the spec's loader_state.\n    The loader_state (cached cherry-picking-module data) will be used by\n    :obj:`~_CherryPicker <flutils.moduleutils._CherryPick>` loader to create\n    the cherry-picked-module.\n    "
        str_1 = 'eutf8h'
        str_2 = ' @N_/df0fb?R<q/+FO'
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_1)
        str_3 = ansi_text_wrapper_0.fill(str_2)
        str_4 = ansi_text_wrapper_0.fill(str_0)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0)
        list_0 = ansi_text_wrapper_1.wrap(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        str_0 = '\r&"5%\x0ba!]'
        int_0 = module_0.len_without_ansi(str_0)
        str_1 = ':\n '
        str_2 = "Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n         seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n             of strings.\n\n    :rtype:\n        :obj:`int`\n\n    Example:\n        >>> from flutils.txtutils import len_without_ansi\n        >>> text = '\\x1b[38;5;209mfoobar\\x1b[0m'\n        >>> len_without_ansi(text)\n        6\n    "
        str_3 = '.DFO%})C(0z/An^'
        str_4 = 'j]s}N'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_3, str_4, bool_0, bool_0, max_lines=int_0, placeholder=str_1)
        list_0 = ansi_text_wrapper_0.wrap(str_2)
        str_5 = ''
        list_1 = ansi_text_wrapper_0.wrap(str_5)
        bool_1 = True
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_1, bool_0, max_lines=int_0, placeholder=str_0)
        sequence_0 = None
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
        int_0 = module_0.len_without_ansi(str_0)
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_0, bool_0, bool_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass