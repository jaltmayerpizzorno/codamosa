# Automatically generated by Pynguin.
import argparse as module_0
import httpie.client as module_1
import pathlib as module_2
import httpie.cli.dicts as module_3

def test_case_0():
    try:
        namespace_0 = module_0.Namespace()
        request_headers_dict_0 = module_1.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_1():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_1.make_send_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_2():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_1.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_3():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_1.make_request_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        session_0 = module_1.build_requests_session(bool_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        namespace_0 = None
        list_0 = [namespace_0, namespace_0]
        path_0 = module_2.Path()
        var_0 = path_0.__enter__()
        iterable_0 = module_1.collect_messages(namespace_0, path_0)
        str_0 = '][{\tO`\\xR|2|)6'
        str_1 = 'Mu.b:5:=Lb\\Z8\tS(HV;'
        dict_0 = {str_0: namespace_0, str_1: iterable_0, str_1: namespace_0}
        request_headers_dict_0 = module_3.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_1.finalize_headers(request_headers_dict_0)
        path_1 = module_2.Path(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        var_0 = module_1.max_headers(bool_0)
        str_0 = 'A'
        str_1 = '/24\\cj{f3^\x0bb'
        dict_0 = {str_0: bool_0, str_1: bool_0, str_0: str_1, str_0: str_1}
        request_headers_dict_0 = module_3.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_1.finalize_headers(request_headers_dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        namespace_0 = module_0.Namespace()
        str_0 = 'Eav-z4$$;dbaQ>Le@av'
        str_1 = 'f_3_R!\x0c'
        str_2 = '`H&Slg `!:J'
        str_3 = 'y^.\t\\sf5'
        dict_0 = {str_0: namespace_0, str_0: str_0, str_1: str_2, str_3: str_0}
        request_headers_dict_0 = module_3.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_1.finalize_headers(request_headers_dict_0)
        request_headers_dict_2 = module_1.finalize_headers(request_headers_dict_1)
        request_headers_dict_3 = module_1.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_8():
    try:
        request_headers_dict_0 = module_3.RequestHeadersDict()
        bool_0 = False
        session_0 = module_1.build_requests_session(bool_0)
        dict_0 = {}
        namespace_0 = module_0.Namespace(**dict_0)
        request_headers_dict_1 = module_1.finalize_headers(request_headers_dict_0)
        path_0 = module_2.Path()
        iterable_0 = module_1.collect_messages(namespace_0, path_0)
        var_0 = path_0.open(iterable_0, iterable_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = ()
        str_0 = 'json'
        str_1 = 'form'
        str_2 = 'data'
        bool_0 = False
        var_1 = {str_0: bool_0, str_1: bool_0, str_2: str_0}
        var_2 = type(str_1, var_0, var_1)
        request_headers_dict_0 = module_1.make_default_headers(var_2)
        request_headers_dict_1 = module_1.make_default_headers(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'FakeArgs'
        var_0 = ()
        str_1 = 'json'
        str_2 = 'form'
        str_3 = 'data'
        bool_0 = False
        var_1 = None
        var_2 = {str_1: bool_0, str_2: bool_0, str_3: var_1}
        var_3 = type(str_0, var_0, var_2)
        var_4 = ()
        bool_1 = True
        var_5 = {str_1: bool_1, str_2: bool_0, str_3: var_1}
        var_6 = type(str_0, var_4, var_5)
        request_headers_dict_0 = module_1.make_default_headers(var_6)
        request_headers_dict_1 = module_1.make_default_headers(var_6)
        var_7 = ()
        var_8 = {str_1: bool_0, str_2: bool_1, str_3: var_1}
        var_9 = type(str_0, var_7, var_8)
        request_headers_dict_2 = module_1.make_default_headers(var_9)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'FakeArgs'
        var_0 = ()
        str_1 = 'json'
        str_2 = 'form'
        str_3 = 'data'
        bool_0 = False
        var_1 = None
        var_2 = {str_1: bool_0, str_2: bool_0, str_3: var_1}
        var_3 = type(str_0, var_0, var_2)
        request_headers_dict_0 = module_1.make_default_headers(var_3)
        var_4 = ()
        bool_1 = True
        var_5 = {str_1: bool_1, str_2: bool_0, str_3: var_1}
        var_6 = type(str_0, var_4, var_5)
        request_headers_dict_1 = module_1.make_default_headers(var_6)
        var_7 = ()
        var_8 = {str_1: bool_0, str_2: bool_1, str_3: var_1}
        var_9 = type(str_0, var_7, var_8)
        request_headers_dict_2 = module_1.make_default_headers(var_9)
    except BaseException:
        pass