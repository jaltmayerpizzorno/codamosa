# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        bool_0 = True
        bool_1 = False
        alpha_0 = module_0._Alpha(bool_1)
        var_0 = alpha_0.__lt__(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        int_0 = -1172
        numeric_0 = module_0._Numeric(int_0)
        str_0 = 'C?jh)tDl\tu@g%@K32v'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__repr__()
        var_1 = numeric_0.__gt__(semantic_version_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1606
        float_0 = 3304.8241
        numeric_0 = module_0._Numeric(float_0)
        str_0 = '('
        complex_0 = None
        tuple_0 = (str_0, int_0, complex_0)
        alpha_0 = module_0._Alpha(tuple_0)
        var_0 = alpha_0.__gt__(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 6749.826961626143
        tuple_0 = None
        alpha_0 = module_0._Alpha(float_0)
        var_0 = alpha_0.__ge__(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 86
        numeric_0 = module_0._Numeric(int_0)
        var_0 = numeric_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = 'repoquery'
        var_1 = numeric_0.__lt__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1556
        set_0 = {int_0, int_0}
        int_1 = -485
        numeric_0 = module_0._Numeric(int_1)
        var_0 = numeric_0.__ge__(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'COv'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__le__(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_1.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_8():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = 'jfGq[|'
        var_0 = semantic_version_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 6732.25176
        numeric_0 = module_0._Numeric(float_0)
        semantic_version_0 = module_0.SemanticVersion()
        bytes_0 = b''
        alpha_0 = module_0._Alpha(bytes_0)
        var_0 = alpha_0.__gt__(numeric_0)
        var_1 = semantic_version_0.__ne__(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        alpha_0 = module_0._Alpha(str_0)
        str_1 = 'bh'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '/usr/bin/oslevel'
        var_0 = semantic_version_0.__gt__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 2802
        tuple_0 = ()
        alpha_0 = module_0._Alpha(tuple_0)
        var_0 = alpha_0.__eq__(alpha_0)
        var_1 = alpha_0.__eq__(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        int_1 = -2320
        numeric_0 = module_0._Numeric(int_1)
        var_2 = alpha_0.__le__(numeric_0)
        var_3 = semantic_version_0.__ne__(semantic_version_0)
        semantic_version_1 = module_0.SemanticVersion()
        str_0 = 'A file containing a list of roles to be installed.'
        var_4 = semantic_version_0.from_loose_version(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = None
        alpha_0 = module_0._Alpha(float_0)
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        alpha_1 = module_0._Alpha(list_0)
        var_0 = alpha_1.__ge__(alpha_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '1'
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        var_0 = semantic_version_0.__ge__(semantic_version_0)
        float_0 = -1719.4475
        numeric_0 = module_0._Numeric(float_0)
        bool_0 = True
        bool_1 = False
        numeric_1 = module_0._Numeric(bool_1)
        var_1 = numeric_1.__le__(bool_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
        bytes_0 = b''
        var_3 = numeric_1.__ne__(bytes_0)
        var_4 = semantic_version_0.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '1.0.0'
        semantic_version_0 = module_0.SemanticVersion(str_0)
        str_1 = '1.0.0-2'
        loose_version_0 = module_1.LooseVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(str_1)
        float_0 = 1280.983963
        var_1 = semantic_version_0.__lt__(float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '1'
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        var_0 = semantic_version_0.__ge__(semantic_version_0)
        bool_0 = True
        bool_1 = False
        numeric_0 = module_0._Numeric(bool_1)
        var_1 = numeric_0.__le__(bool_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
        var_3 = semantic_version_0.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 2805
        set_0 = {int_0, int_0, int_0, int_0}
        tuple_0 = ()
        alpha_0 = module_0._Alpha(tuple_0)
        var_0 = alpha_0.__eq__(set_0)
        float_0 = 6749.826961626143
        var_1 = alpha_0.__ge__(alpha_0)
        numeric_0 = module_0._Numeric(float_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_2 = numeric_0.__gt__(alpha_0)
        float_1 = -722.75651
        var_3 = semantic_version_0.__le__(float_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = 'Gf\t=Pg(RKs'
        str_2 = 'bX\\X|Nd5'
        alpha_0 = module_0._Alpha(str_2)
        var_0 = alpha_0.__lt__(str_1)
        str_3 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_3)
        var_1 = semantic_version_0.__ge__(semantic_version_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_19():
    try:
        tuple_0 = ()
        alpha_0 = module_0._Alpha(tuple_0)
        str_0 = '_{attr}'
        var_0 = alpha_0.__eq__(str_0)
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = ''
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '\\'
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_0)
        var_0 = semantic_version_0.__ge__(semantic_version_0)
        var_1 = semantic_version_0.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '1'
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        var_0 = semantic_version_0.__ge__(semantic_version_0)
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        semantic_version_1 = module_0.SemanticVersion(bool_0)
        var_1 = semantic_version_0.__ge__(semantic_version_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = ''
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        str_2 = 'Cie+e'
        var_0 = loose_version_0.parse(str_2)
        var_1 = semantic_version_0.__ge__(semantic_version_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = ''
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        var_0 = loose_version_0.parse(str_1)
        var_1 = semantic_version_0.__ge__(semantic_version_0)
        bytes_0 = b'\x8adB\x85r6\xae\xee~4\xc6\x17~DE\xec\x85'
        alpha_0 = module_0._Alpha(bytes_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
        bool_0 = None
        var_3 = loose_version_0.__lt__(bool_0)
        var_4 = semantic_version_0.__ne__(loose_version_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '.'
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0-2'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        var_0 = semantic_version_0.__ge__(semantic_version_0)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
        int_0 = -3614
        var_2 = loose_version_0.__lt__(int_0)
        list_0 = []
        var_3 = semantic_version_0.__ne__(list_0)
    except BaseException:
        pass