# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0
import typesystem.base as module_1

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\xb15\x83K4R\xf8\xfd\x9fn'
    int_0 = -11
    token_0 = module_0.Token(bytes_0, int_0, int_0)

def test_case_2():
    bytes_0 = b'\xb15\x83K`R%\xfd\x9fn'
    int_0 = -11
    token_0 = module_0.Token(bytes_0, int_0, int_0)
    bool_0 = token_0.__eq__(int_0)

def test_case_3():
    int_0 = 10
    str_0 = 'content'
    scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
    any_0 = scalar_token_0.__hash__()
    var_0 = scalar_token_0.start

def test_case_4():
    int_0 = 1
    int_1 = 2
    str_0 = 'key'
    scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_1, str_0)
    int_2 = 3
    int_3 = 4
    scalar_token_1 = module_0.ScalarToken(int_2, int_2, int_3, str_0)
    scalar_token_2 = {scalar_token_0: scalar_token_0, scalar_token_1: scalar_token_1}
    int_4 = 6
    str_1 = ''
    var_0 = (scalar_token_2, int_0, int_4, str_1)
    var_1 = {}
    dict_token_0 = module_0.DictToken(*var_0, **var_1)

def test_case_5():
    int_0 = 1
    int_1 = 0
    int_2 = 2
    str_0 = '1'
    scalar_token_0 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
    bool_0 = scalar_token_0.__eq__(scalar_token_0)
    scalar_token_1 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
    str_1 = '}XG}rBZ\t74?5dH*|Vx,'
    token_0 = module_0.Token(str_0, int_0, int_0, str_1)
    token_1 = module_0.Token(scalar_token_1, int_2, int_0)

def test_case_6():
    int_0 = 1
    int_1 = 0
    int_2 = 2
    str_0 = '1'
    scalar_token_0 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
    scalar_token_1 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
    bool_0 = scalar_token_0.__eq__(scalar_token_1)
    scalar_token_2 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
    str_1 = '2'
    scalar_token_3 = module_0.ScalarToken(int_2, int_1, int_2, str_1)
    bool_1 = scalar_token_2.__eq__(scalar_token_3)
    scalar_token_4 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
    int_3 = 3
    scalar_token_5 = module_0.ScalarToken(int_0, int_0, int_3, str_0)
    bool_2 = scalar_token_4.__eq__(scalar_token_5)
    scalar_token_6 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
    scalar_token_7 = module_0.ScalarToken(int_0, int_1, int_3, str_0)
    bool_3 = scalar_token_6.__eq__(scalar_token_7)

def test_case_7():
    int_0 = 2404
    token_0 = module_0.Token(int_0, int_0, int_0)
    bool_0 = token_0.__eq__(int_0)
    dict_0 = {}
    list_0 = [dict_0, int_0, bool_0, int_0]
    dict_token_0 = module_0.DictToken(*list_0)
    str_0 = 'kd(]_hw<e'
    int_1 = -1038
    int_2 = -1137
    token_1 = module_0.Token(str_0, int_1, int_2)
    int_3 = 3288
    int_4 = -3667
    scalar_token_0 = module_0.ScalarToken(str_0, int_3, int_4, str_0)
    bool_1 = scalar_token_0.__eq__(dict_token_0)

def test_case_8():
    int_0 = 10
    str_0 = 'content'
    scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
    var_0 = scalar_token_0.start

def test_case_9():
    int_0 = 5
    int_1 = -27
    int_2 = 15
    str_0 = 'content'
    list_token_0 = module_0.ListToken(int_1, int_1, int_1, str_0)
    scalar_token_0 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
    var_0 = scalar_token_0.start
    var_1 = str(int_2)

def test_case_10():
    int_0 = 3
    int_1 = 2
    int_2 = 4
    str_0 = 'abc'
    token_0 = module_0.Token(int_0, int_1, int_2, str_0)
    var_0 = token_0.start
    int_3 = 1
    position_0 = module_1.Position(int_3, int_3, int_1)
    token_1 = module_0.Token(int_0, int_1, int_2, str_0)
    var_1 = token_1.end
    position_1 = module_1.Position(int_3, int_3, int_2)