# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        str_0 = ';0WIJ\t$RkQ<*g'
        int_0 = -476
        list_token_0 = module_0.ListToken(str_0, int_0, int_0)
        str_1 = '(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$'
        int_1 = 6
        token_0 = module_0.Token(str_1, int_1, int_1)
        str_2 = token_0.__repr__()
        bool_0 = token_0.__eq__(list_token_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -3667
        token_0 = module_0.Token(int_0, int_0, int_0)
        bool_0 = token_0.__eq__(int_0)
        list_0 = [token_0]
        token_1 = token_0.lookup(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 5
        int_1 = 10
        int_2 = 40
        str_0 = 'content'
        scalar_token_0 = module_0.ScalarToken(int_0, int_1, int_2, str_0)
        any_0 = scalar_token_0.__hash__()
        var_0 = scalar_token_0.start
        var_1 = str(var_0)
        bool_0 = scalar_token_0.__eq__(scalar_token_0)
        list_0 = [int_2]
        token_0 = module_0.Token(any_0, int_1, int_1)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -3667
        token_0 = module_0.Token(int_0, int_0, int_0)
        bool_0 = token_0.__eq__(int_0)
        token_1 = module_0.Token(int_0, int_0, int_0)
        list_0 = []
        int_1 = 762
        token_2 = module_0.Token(token_0, int_1, int_1)
        token_3 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1
        str_0 = 'AG\x0ci$^D7'
        scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        str_1 = 'allow_blank'
        any_0 = scalar_token_0.__hash__()
        int_1 = -888
        int_2 = 804
        list_token_0 = module_0.ListToken(str_1, int_1, int_2)
        set_0 = {int_1, int_1, int_1, str_1}
        list_0 = [list_token_0, set_0, int_2, int_2]
        dict_token_0 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -3667
        token_0 = module_0.Token(int_0, int_0, int_0)
        str_0 = token_0.__repr__()
        bool_0 = token_0.__eq__(int_0)
        str_1 = 'H[Kl50PBq'
        token_1 = module_0.Token(int_0, int_0, int_0, str_1)
        dict_0 = {}
        list_0 = [dict_0, int_0, bool_0, int_0]
        dict_token_0 = module_0.DictToken(*list_0)
        dict_token_1 = module_0.DictToken()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 3
        int_1 = 2
        int_2 = 4
        str_0 = 'abc'
        token_0 = module_0.Token(int_0, int_1, int_2, str_0)
        var_0 = token_0.string
        token_1 = module_0.Token(int_0, int_1, int_2, str_0)
        var_1 = token_1.value
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -1172.215
        list_0 = [float_0]
        int_0 = 3544
        list_token_0 = module_0.ListToken(list_0, int_0, int_0)
        bool_0 = False
        int_1 = 3
        str_0 = 'tQ[e]\nt|n\x0bRnmX,%]{'
        str_1 = 'Y+P^V~9-WS%f'
        scalar_token_0 = module_0.ScalarToken(float_0, int_1, int_1, str_1)
        list_token_1 = module_0.ListToken(float_0, int_1, int_1)
        int_2 = -2386
        scalar_token_1 = module_0.ScalarToken(int_1, int_2, int_1)
        token_0 = module_0.Token(bool_0, int_1, int_1, str_0)
        any_0 = scalar_token_0.__hash__()
        bool_1 = scalar_token_0.__eq__(list_token_1)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = []
        list_0 = [var_0, var_0]
        str_0 = 'P/sp/236|'
        dict_0 = {str_0: list_0, str_0: str_0}
        list_1 = [var_0, list_0, dict_0]
        int_0 = 272
        list_token_0 = module_0.ListToken(var_0, int_0, int_0)
        token_0 = list_token_0.lookup(list_1)
    except BaseException:
        pass