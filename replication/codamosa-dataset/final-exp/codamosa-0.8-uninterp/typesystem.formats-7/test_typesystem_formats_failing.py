# Automatically generated by Pynguin.
import typesystem.formats as module_0

def test_case_0():
    try:
        str_0 = 'Mus^ e a valid time format.'
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        validation_error_0 = base_format_0.validation_error(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'date'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        float_0 = -2156.453698
        bool_0 = u_u_i_d_format_0.is_native_type(u_u_i_d_format_0)
        set_0 = {u_u_i_d_format_0, float_0}
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        date_time_format_0 = module_0.DateTimeFormat(**dict_0)
        str_0 = 'c'
        base_format_0 = module_0.BaseFormat()
        optional_0 = base_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        date_format_0 = module_0.DateFormat()
        str_0 = '2019-13-14'
        bool_0 = date_format_0.is_native_type(str_0)
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'date'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(str_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(u_u_i_d_format_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'ignore'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(str_0)
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'ignore'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        time_format_0 = module_0.TimeFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(u_u_i_d_format_0)
    except BaseException:
        pass

def test_case_10():
    try:
        date_format_0 = module_0.DateFormat()
        date_format_1 = module_0.DateFormat()
        optional_0 = date_format_1.serialize(date_format_1)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = None
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(bytes_0)
        date_format_0 = module_0.DateFormat()
        optional_1 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass

def test_case_12():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-01-01T00:00:00'
        datetime_0 = date_time_format_0.validate(str_0)
        optional_0 = date_time_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Mus^ e a valid time format.'
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(u_u_i_d_format_0)
        str_0 = u_u_i_d_format_0.serialize(u_u_i_d_format_0)
        u_u_i_d_format_1 = module_0.UUIDFormat()
        str_1 = u_u_i_d_format_1.serialize(u_u_i_d_format_0)
        float_0 = 2589.6866
        time_format_0 = module_0.TimeFormat()
        bool_1 = time_format_0.is_native_type(float_0)
        dict_0 = {}
        date_format_1 = module_0.DateFormat(**dict_0)
        base_format_0 = module_0.BaseFormat()
        optional_0 = date_format_1.serialize(float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'mb\rsv\x0c2{p'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2022-02-02'
        date_0 = date_format_0.validate(str_0)
        date_format_1 = module_0.DateFormat()
        str_1 = '2022-02-02T09:30:00Z'
        date_1 = date_format_1.validate(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2019-13-14'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '23:59:59.999999'
        time_0 = time_format_0.validate(str_0)
        time_format_1 = module_0.TimeFormat()
        time_format_2 = module_0.TimeFormat()
        time_format_3 = module_0.TimeFormat()
        str_1 = '23'
        time_1 = time_format_3.validate(str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-12-31T23:59:59+00:00'
        datetime_0 = date_time_format_0.validate(str_0)
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_20():
    try:
        date_0 = None
        dict_0 = {}
        date_format_0 = module_0.DateFormat(**dict_0)
        list_0 = []
        date_format_1 = module_0.DateFormat(*list_0)
        optional_0 = date_format_1.serialize(date_0)
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(optional_0)
    except BaseException:
        pass

def test_case_21():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-2-31T23:59:59+0000'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-12-31T23:59:59+00:00'
        datetime_0 = date_time_format_0.validate(str_0)
        date_format_0 = module_0.DateFormat()
        list_0 = []
        time_format_0 = module_0.TimeFormat(*list_0)
        optional_0 = date_format_0.serialize(datetime_0)
        time_format_1 = module_0.TimeFormat()
        optional_1 = time_format_1.serialize(optional_0)
    except BaseException:
        pass

def test_case_23():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-2-31T23:59:59+00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '2:00:00'
        base_format_0 = module_0.BaseFormat()
        time_0 = time_format_0.validate(str_0)
        str_1 = '23:00:00'
        time_1 = time_format_0.validate(str_1)
        str_2 = '23:59:60'
        time_2 = time_format_0.validate(str_2)
    except BaseException:
        pass