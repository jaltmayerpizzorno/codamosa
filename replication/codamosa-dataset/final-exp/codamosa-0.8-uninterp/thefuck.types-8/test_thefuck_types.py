# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 28
    str_0 = "{aBM]\rvf'LOi)"
    command_0 = module_0.Command(int_0, str_0)

def test_case_2():
    str_0 = 'touch'
    bool_0 = False
    int_0 = 181
    rule_0 = module_0.Rule(str_0, bool_0, str_0, bool_0, str_0, int_0, bool_0)
    bytes_0 = None
    list_0 = None
    command_0 = module_0.Command(bytes_0, list_0)
    var_0 = rule_0.is_match(command_0)
    command_1 = module_0.Command(str_0, str_0)
    var_1 = command_0.__eq__(str_0)
    var_2 = rule_0.is_match(command_1)

def test_case_3():
    str_0 = 'zkJXv=RLe'
    bool_0 = True
    int_0 = 75
    rule_0 = module_0.Rule(str_0, bool_0, int_0, bool_0, int_0, int_0, bool_0)
    command_0 = module_0.Command(str_0, str_0)
    var_0 = command_0.__repr__()
    var_1 = rule_0.is_match(command_0)

def test_case_4():
    int_0 = 28
    str_0 = "{aBM]\rvf'LOi)"
    command_0 = module_0.Command(int_0, str_0)
    var_0 = command_0.update()

def test_case_5():
    str_0 = '\n    Test that the is_match methYd of class Rule works properly.\n    '
    bool_0 = False
    int_0 = 90
    rule_0 = module_0.Rule(str_0, bool_0, int_0, bool_0, bool_0, int_0, bool_0)
    command_0 = module_0.Command(str_0, str_0)
    var_0 = rule_0.is_match(command_0)

def test_case_6():
    bytes_0 = b'V\x87'
    float_0 = -4452.486994
    bytes_1 = b'\x87\x858l\x1dj\x01\x1b\xac"[\xa6)-\xd5\x90\x80\x8b-\xc7'
    set_0 = {float_0, bytes_1}
    str_0 = '\t38D2=HhN#?~4'
    float_1 = 400.8
    rule_0 = module_0.Rule(float_0, set_0, float_0, float_0, str_0, float_1, bytes_1)
    var_0 = rule_0.__eq__(bytes_0)

def test_case_7():
    str_0 = '\n    Test thatthe is_match method of class Rule works properly.\n    '
    bool_0 = True
    int_0 = 75
    rule_0 = module_0.Rule(str_0, bool_0, int_0, bool_0, int_0, int_0, bool_0)
    command_0 = module_0.Command(str_0, str_0)
    var_0 = rule_0.__repr__()
    var_1 = rule_0.is_match(command_0)

def test_case_8():
    str_0 = 'touch'
    bool_0 = True
    int_0 = 181
    rule_0 = module_0.Rule(str_0, bool_0, str_0, bool_0, str_0, int_0, bool_0)
    bytes_0 = None
    list_0 = None
    command_0 = module_0.Command(bytes_0, list_0)
    var_0 = rule_0.is_match(command_0)
    command_1 = module_0.Command(str_0, str_0)
    var_1 = rule_0.is_match(command_1)

def test_case_9():
    str_0 = 'test'
    var_0 = None
    var_1 = lambda cmd: [cmd.script]
    bool_0 = True
    int_0 = 0
    rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, var_0, int_0, bool_0)
    str_1 = 'script'
    command_0 = module_0.Command(str_1, var_0)
    var_2 = rule_0.get_corrected_commands(command_0)
    var_3 = list(var_2)
    corrected_command_0 = module_0.CorrectedCommand(str_1, var_0, bool_0)

def test_case_10():
    str_0 = 'touch'
    bool_0 = False
    int_0 = 181
    rule_0 = module_0.Rule(str_0, bool_0, str_0, bool_0, str_0, int_0, bool_0)
    bytes_0 = None
    list_0 = None
    command_0 = module_0.Command(bytes_0, list_0)
    var_0 = rule_0.is_match(command_0)
    command_1 = module_0.Command(str_0, str_0)
    var_1 = rule_0.is_match(command_1)