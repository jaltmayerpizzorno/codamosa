# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        last_0 = module_0.Last()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'X\xa0\x11(\xa2x.#\x94\xce:\xb2P\xdc\x9c\x9e\xa4a\x1c0'
        float_0 = -1630.0
        semigroup_0 = module_0.Semigroup(float_0)
        bool_0 = semigroup_0.__eq__(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        min_0 = module_0.Min(bool_0)
        str_0 = min_0.__str__()
        all_0 = module_0.All(str_0)
        one_0 = module_0.One(bool_0)
        var_0 = min_0.concat(one_0)
        int_0 = -3287
        str_1 = all_0.__str__()
        sum_0 = module_0.Sum(int_0)
        bytes_0 = b'\x1e'
        semigroup_0 = module_0.Semigroup(bytes_0)
        var_1 = semigroup_0.fold(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        sum_0 = None
        str_0 = 'kX$v'
        min_0 = module_0.Min(str_0)
        sum_1 = module_0.Sum(min_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '~A%'
        all_0 = module_0.All(str_0)
        str_1 = ';HyFvX\rNWx'
        dict_0 = {str_1: str_1, str_1: str_1}
        last_0 = module_0.Last(dict_0)
        all_1 = module_0.All(last_0)
        all_2 = all_1.concat(all_0)
        bytes_0 = None
        max_0 = module_0.Max(bytes_0)
        int_0 = 1703
        first_0 = module_0.First(int_0)
        map_0 = module_0.Map(first_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'.s'
        float_0 = 1894.14593
        list_0 = []
        first_0 = module_0.First(list_0)
        str_0 = first_0.__str__()
        first_1 = module_0.First(bytes_0)
        one_0 = module_0.One(first_1)
        var_0 = one_0.concat(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b''
        map_0 = module_0.Map(bytes_0)
        first_0 = None
        min_0 = module_0.Min(first_0)
        bytes_1 = b'p\x98:<\xe3\xec\x83\xc8D'
        var_0 = map_0.concat(bytes_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        dict_0 = {}
        max_0 = module_0.Max(dict_0)
        min_0 = module_0.Min(max_0)
        var_0 = min_0.concat(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        all_0 = module_0.All(list_0)
        str_0 = all_0.__str__()
        all_1 = all_0.concat(all_0)
        bool_0 = True
        bytes_0 = b'\x82\xf0\xb4b\xcb\xe3G\xde \xd5\xcd\xf8\x823'
        tuple_0 = (bool_0, bytes_0, list_0)
        semigroup_0 = module_0.Semigroup(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -812.1
        min_0 = module_0.Min(float_0)
        sum_0 = module_0.Sum(min_0)
        sum_1 = module_0.Sum(sum_0)
        str_0 = sum_1.__str__()
        bool_0 = True
        min_1 = module_0.Min(bool_0)
        str_1 = min_1.__str__()
        last_0 = module_0.Last(bool_0)
        all_0 = module_0.All(str_1)
        one_0 = module_0.One(bool_0)
        var_0 = min_1.concat(one_0)
        int_0 = -3287
        str_2 = min_1.__str__()
        var_1 = one_0.concat(min_1)
        str_3 = all_0.__str__()
        semigroup_0 = None
        sum_2 = module_0.Sum(semigroup_0)
        min_2 = module_0.Min(sum_2)
        dict_0 = {str_3: semigroup_0, float_0: int_0}
        map_0 = module_0.Map(dict_0)
        str_4 = map_0.__str__()
        bytes_0 = b'\x81\xea\xcc\x18|\xe7a)\xce\xce\xc5\xfe0\xd7Q\xa7'
        all_1 = module_0.All(bytes_0)
        var_2 = map_0.concat(semigroup_0)
    except BaseException:
        pass