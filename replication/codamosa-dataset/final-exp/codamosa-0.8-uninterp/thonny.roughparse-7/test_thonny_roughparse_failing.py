# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        float_0 = -1363.0
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(float_0, bool_0)
        var_0 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'hand'
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b';\x92\xd3\x89\xe3\xd5\xd5\xa6\xc2b\x91\xa5\x9a\xe2|r'
        float_0 = -1112.492843
        bool_0 = True
        set_0 = {float_0, bool_0}
        str_0 = 'o14F'
        rough_parser_0 = module_0.RoughParser(set_0, str_0)
        rough_parser_1 = module_0.RoughParser(float_0, rough_parser_0)
        var_0 = rough_parser_1.find_good_parse_start(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'hand2'
        float_0 = -1704.6
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(float_0, tuple_0)
        var_0 = rough_parser_0.set_lo(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 4101.01
        bytes_0 = b'\xfe\x08\xb6+\x18\x92\xfe\x9c\x05'
        rough_parser_0 = module_0.RoughParser(float_0, bytes_0)
        var_0 = rough_parser_0.get_continuation_type()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1086
        str_0 = 'recents'
        rough_parser_0 = module_0.RoughParser(int_0, str_0)
        var_0 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        bytes_0 = b'\x17\xa0'
        str_0 = 'DA?T'
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        var_0 = rough_parser_0.set_str(list_0)
        var_1 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '*o'
        int_0 = -3089
        set_0 = {int_0, str_0}
        dict_0 = {str_0: str_0, str_0: int_0, str_0: set_0, int_0: str_0}
        rough_parser_0 = module_0.RoughParser(int_0, dict_0)
        var_0 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(tuple_0, tuple_0)
        var_0 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'cy~'
        bool_0 = True
        list_0 = [str_0, bool_0, bool_0]
        rough_parser_0 = module_0.RoughParser(str_0, list_0)
        var_0 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Yt=1WpLQsCj \x0bz'
        bool_0 = True
        hyper_parser_0 = module_0.HyperParser(str_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xf6\xd9j'
        bool_0 = True
        float_0 = 1711.1755
        rough_parser_0 = module_0.RoughParser(float_0, bytes_0)
        list_0 = [bool_0]
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        bytes_0 = b'\x17\xa0'
        str_0 = ',IIV ksgeG/d`+'
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        var_0 = rough_parser_0.set_str(list_0)
        var_1 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'hand2'
        int_0 = 250
        bytes_0 = b'N'
        rough_parser_0 = module_0.RoughParser(int_0, bytes_0)
        list_0 = [str_0]
        rough_parser_1 = module_0.RoughParser(rough_parser_0, list_0)
        var_0 = rough_parser_1.compute_backslash_indent()
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = []
        str_0 = "F.'T"
        bytes_0 = b'4'
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        var_0 = rough_parser_0.set_str(list_0)
        bool_0 = None
        var_1 = rough_parser_0.find_good_parse_start(bool_0)
        var_2 = rough_parser_0.get_base_indent_string()
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ' \t\n\r'
        var_0 = {ord(c): ord(c) for c in str_0}
        str_1 = 'x'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(var_0, str_1)
        var_1 = string_translate_pseudo_mapping_0.get(string_translate_pseudo_mapping_0)
    except BaseException:
        pass

def test_case_16():
    try:
        list_0 = []
        str_0 = "F.'T"
        bytes_0 = b'k\xc0'
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        var_0 = rough_parser_0.set_str(list_0)
        dict_0 = {}
        str_1 = 'hand2'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_1)
        var_1 = string_translate_pseudo_mapping_0.__iter__()
        var_2 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        bytes_0 = b'/9\x0e\x9fOh\x84\xa7\x01'
        bool_1 = True
        rough_parser_0 = None
        rough_parser_1 = module_0.RoughParser(bool_1, rough_parser_0)
        list_0 = []
        dict_0 = {rough_parser_0: bytes_0, bytes_0: bool_0}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, rough_parser_1)
        var_0 = string_translate_pseudo_mapping_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        list_0 = []
        str_0 = "F.'T"
        bytes_0 = b'k\xc0'
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        var_0 = rough_parser_0.set_str(list_0)
        var_1 = rough_parser_0.find_good_parse_start(rough_parser_0)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = []
        str_0 = "F.'T"
        bytes_0 = b'k\xc0'
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        var_0 = rough_parser_0.set_str(list_0)
        bool_0 = None
        var_1 = rough_parser_0.find_good_parse_start(bool_0)
        var_2 = rough_parser_0.is_block_opener()
    except BaseException:
        pass