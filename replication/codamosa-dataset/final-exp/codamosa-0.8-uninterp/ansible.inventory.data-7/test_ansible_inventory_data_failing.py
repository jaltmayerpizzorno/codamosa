# Automatically generated by Pynguin.
import ansible.inventory.data as module_0
import ansible.inventory.host as module_1
import ansible.inventory.group as module_2

def test_case_0():
    try:
        str_0 = 'RWb~Qs%WeX'
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_0.get_host(str_0)
        var_1 = inventory_data_1.deserialize(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        inventory_data_0 = module_0.InventoryData()
        int_0 = 52
        set_0 = {int_0, int_0}
        var_0 = inventory_data_0.add_group(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        inventory_data_0 = module_0.InventoryData()
        bool_0 = False
        var_0 = inventory_data_0.add_group(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'baz'
        var_0 = inventory_data_0.add_group(str_0)
        var_1 = inventory_data_0.serialize()
        str_1 = 'foo'
        var_2 = inventory_data_0.add_host(str_1, str_0)
        str_2 = 'bar'
        var_3 = inventory_data_0.add_host(str_2, str_0)
        var_4 = inventory_data_0.serialize()
        var_5 = inventory_data_0.add_host(str_1)
        var_6 = inventory_data_0.reconcile_inventory()
        bool_0 = False
        var_7 = inventory_data_0.add_host(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_1.serialize()
        str_0 = 'Mz::XtV'
        var_2 = inventory_data_1.remove_host(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'UPAS7E\x0b+'
        str_1 = '4'
        bytes_0 = None
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.set_variable(str_0, str_1, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'group1'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'group2'
        var_1 = inventory_data_0.add_group(str_1)
        str_2 = 'host'
        var_2 = inventory_data_0.add_host(str_2)
        str_3 = 'host2'
        var_3 = inventory_data_0.add_child(str_3, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '127.0.0.1'
        var_0 = inventory_data_0.get_host(str_0)
        host_0 = module_1.Host(inventory_data_0)
        var_1 = inventory_data_0.add_host(host_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_host(bool_0)
        str_0 = 'A,\nX*jY.#|{U:S#dO^'
        dict_0 = {inventory_data_0: str_0, inventory_data_0: bool_0, inventory_data_0: str_0}
        var_1 = inventory_data_0.deserialize(dict_0)
        str_1 = 'all'
        bool_1 = False
        dict_1 = {bool_0: inventory_data_0, inventory_data_0: str_1, var_0: var_0}
        var_2 = inventory_data_0.set_variable(bool_1, bool_1, dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        str_0 = ' '
        var_0 = inventory_data_1.add_group(str_0)
        str_1 = '1@Wg}A2f1"v\rEBMMc'
        var_1 = inventory_data_1.add_host(str_1)
        str_2 = '@\\s\nZWS2%9hW\x0b-w+3Wk'
        var_2 = inventory_data_1.get_host(str_2)
        var_3 = inventory_data_1.get_groups_dict()
        float_0 = 512.0
        tuple_0 = (float_0,)
        var_4 = inventory_data_1.remove_group(tuple_0)
        var_5 = inventory_data_1.serialize()
        var_6 = inventory_data_1.reconcile_inventory()
        var_7 = inventory_data_1.reconcile_inventory()
        var_8 = inventory_data_0.deserialize(str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        str_0 = '\nOc'
        var_0 = inventory_data_1.add_group(str_0)
        str_1 = ' '
        inventory_data_2 = module_0.InventoryData()
        var_1 = inventory_data_1.add_group(str_1)
        str_2 = '.@Wg}A2f["v\r\x0cBMMc'
        var_2 = inventory_data_1.add_host(str_2)
        str_3 = '@\\s\nZWS2%9hW\x0b-w+3Wk'
        var_3 = inventory_data_1.get_host(str_3)
        var_4 = inventory_data_1.get_groups_dict()
        str_4 = 'ungrouped'
        var_5 = inventory_data_1.remove_group(str_4)
        var_6 = inventory_data_1.get_groups_dict()
    except BaseException:
        pass

def test_case_11():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        str_0 = 'S\t'
        str_1 = '>'
        var_1 = inventory_data_0.add_host(str_0, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = None
        host_0 = module_1.Host(bytes_0)
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_host(host_0)
        inventory_data_1 = module_0.InventoryData()
        str_0 = '\nOBc'
        var_1 = host_0.deserialize(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '\ro'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = "U3,t)\rtl%qUI$g#K-'Q."
        var_1 = inventory_data_0.add_child(str_0, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '\nO'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.get_groups_dict()
        var_2 = inventory_data_0.add_group(str_0)
        str_1 = 'oo'
        var_3 = inventory_data_0.add_host(str_1, str_0)
        var_4 = inventory_data_0.reconcile_inventory()
        var_5 = inventory_data_0.add_group(str_1)
        var_6 = inventory_data_0.add_host(str_1, str_1)
        str_2 = '127.0.0.1'
        var_7 = inventory_data_0.get_groups_dict()
        var_8 = inventory_data_0.reconcile_inventory()
        var_9 = inventory_data_0.get_host(str_2)
        inventory_data_1 = module_0.InventoryData()
        inventory_data_2 = module_0.InventoryData()
        host_0 = module_1.Host()
        list_0 = [str_2, str_1, str_2, var_7]
        group_0 = module_2.Group(list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        str_0 = '\ro'
        var_1 = inventory_data_0.add_group(str_0)
        str_1 = 'oo'
        var_2 = inventory_data_0.add_host(str_1, str_0)
        var_3 = inventory_data_0.reconcile_inventory()
        var_4 = inventory_data_0.add_group(str_1)
        var_5 = inventory_data_0.add_host(str_1, str_0)
        str_2 = '127.0.0.1'
        var_6 = inventory_data_0.get_groups_dict()
        var_7 = inventory_data_0.get_host(str_2)
        var_8 = inventory_data_0.reconcile_inventory()
        var_9 = inventory_data_0.get_host(str_2)
        inventory_data_1 = module_0.InventoryData()
        bytes_0 = b'>\xad!\xf9;\xa1OU\xb0\xdf\xfd'
        host_0 = module_1.Host(bytes_0)
        dict_0 = {var_9: inventory_data_1}
        inventory_data_2 = module_0.InventoryData()
        var_10 = inventory_data_2.add_host(dict_0)
    except BaseException:
        pass