# Automatically generated by Pynguin.
import ansible.module_utils.connection as module_0

def test_case_0():
    try:
        int_0 = 42
        bool_0 = False
        str_0 = "R\r_:m@'xHi-8*i"
        var_0 = module_0.write_to_file_descriptor(bool_0, str_0)
        connection_0 = module_0.Connection(int_0)
        list_0 = []
        connection_1 = module_0.Connection(list_0)
        dict_0 = {}
        connection_2 = module_0.Connection(dict_0)
        str_1 = 'on\\,Nmhp>\x0ba/ap'
        str_2 = '-j,qI$fs'
        dict_1 = {str_1: connection_2, str_2: dict_0, str_1: str_2}
        var_1 = connection_0.__rpc__(connection_1, **dict_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'deluser'
        connection_0 = module_0.Connection(str_0)
        var_0 = module_0.send_data(connection_0, connection_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 186
        float_0 = 1633.432
        dict_0 = {float_0: int_0, int_0: int_0}
        str_0 = 'D5.QG5>}5(\t/Rakf3?N\x0b'
        var_0 = module_0.send_data(dict_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x06\x15\xe2sK\xb2\xd9\xe2\x07\x01\\\xd6x\x19\x03\x99\x96\xb2'
        var_0 = module_0.recv_data(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'SI0OJV?U\t'
        connection_0 = module_0.Connection(str_0)
        str_1 = None
        tuple_0 = (str_1, connection_0)
        var_0 = module_0.exec_command(connection_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x90\xba\x82\x9d\x96\xe8I*2\xfb\xd1F\x00\xb1\xe8a\xe4\x7f'
        int_0 = -2009
        connection_error_0 = module_0.ConnectionError(int_0)
        str_0 = 'D"g.wud%:&i/C!='
        dict_0 = {str_0: int_0}
        connection_error_1 = module_0.ConnectionError(connection_error_0, **dict_0)
        var_0 = module_0.send_data(bytes_0, connection_error_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        connection_0 = module_0.Connection(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'0=\xd0\r\x96\x81'
        connection_0 = module_0.Connection(bytes_0)
        var_0 = module_0.recv_data(connection_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        connection_0 = module_0.Connection(bool_0)
        var_0 = connection_0.__rpc__(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xd7lF\x0f9\xdd\xf3\xf7K0\xd5)\x84'
        connection_0 = module_0.Connection(bytes_0)
        var_0 = connection_0.__rpc__(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'd"\']K[mrY:{<a\n?ks\tY'
        bytes_0 = b'W,\x92\xf6\x1f\xe4\x83"^ea\x8f\x95jem\xcc'
        connection_0 = module_0.Connection(bytes_0)
        var_0 = connection_0.send(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ' Return a secure hash hex digest of local file, None if file is not present or a directory. '
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, str_0, str_0]
        float_0 = -1485.0
        connection_0 = module_0.Connection(float_0)
        var_0 = connection_0.__getattr__(list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        connection_0 = module_0.Connection(bool_0)
        var_0 = connection_0.__rpc__(connection_0)
    except BaseException:
        pass