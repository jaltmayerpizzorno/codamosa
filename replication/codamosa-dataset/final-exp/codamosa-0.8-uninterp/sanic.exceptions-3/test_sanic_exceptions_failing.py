# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        list_0 = None
        not_found_0 = module_0.NotFound(list_0)
        invalid_usage_0 = module_0.InvalidUsage(not_found_0)
        server_error_0 = module_0.ServerError(invalid_usage_0)
        str_0 = '\x0c^qSd\rF05g'
        float_0 = 210.5
        tuple_0 = (float_0,)
        py_file_error_0 = None
        invalid_signal_0 = module_0.InvalidSignal(tuple_0, py_file_error_0)
        method_not_supported_0 = module_0.MethodNotSupported(server_error_0, str_0, invalid_signal_0)
    except BaseException:
        pass

def test_case_1():
    try:
        not_found_0 = None
        tuple_0 = None
        method_not_supported_0 = None
        u_r_l_build_error_0 = module_0.URLBuildError(method_not_supported_0)
        load_file_exception_0 = module_0.LoadFileException(tuple_0)
        content_range_error_0 = module_0.ContentRangeError(not_found_0, load_file_exception_0)
    except BaseException:
        pass

def test_case_2():
    try:
        payload_too_large_0 = None
        py_file_error_0 = None
        sanic_exception_0 = module_0.SanicException(py_file_error_0)
        u_r_l_build_error_0 = module_0.URLBuildError(payload_too_large_0, sanic_exception_0)
        float_0 = 1065.0
        unauthorized_0 = module_0.Unauthorized(float_0)
        list_0 = [py_file_error_0]
        invalid_range_type_0 = module_0.InvalidRangeType(py_file_error_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -432
        list_0 = [int_0]
        list_1 = [int_0, list_0]
        py_file_error_0 = module_0.PyFileError(list_1)
        str_0 = '\n        Convenience method mapped to ``getall()``.\n        '
        set_0 = {str_0, int_0}
        tuple_0 = ()
        header_not_found_0 = None
        bool_0 = False
        not_found_0 = module_0.NotFound(header_not_found_0, bool_0)
        file_not_found_0 = module_0.FileNotFound(set_0, tuple_0, not_found_0)
        var_0 = module_0.abort(int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 5909
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'R!2'
        str_1 = '!6\\`h,0rjff'
        str_2 = '\n        A request ID passed from the client, or generated from the backend.\n\n        By default, this will look in a request header defined at:\n        ``self.app.config.REQUEST_ID_HEADER``. It defaults to\n        ``X-Request-ID``. Sanic will try to cast the ID into a ``UUID`` or an\n        ``int``. If there is not a UUID from the client, then Sanic will try\n        to generate an ID by calling ``Request.generate_id()``. The default\n        behavior is to generate a ``UUID``. You can customize this behavior\n        by subclassing ``Request``.\n\n        .. code-block:: python\n\n            from sanic import Request, Sanic\n            from itertools import count\n\n            class IntRequest(Request):\n                counter = count()\n\n                def generate_id(self):\n                    return next(self.counter)\n\n            app = Sanic("MyApp", request_class=IntRequest)\n        '
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
        set_0 = None
        list_0 = [str_2, str_1, str_0, str_0]
        server_error_0 = module_0.ServerError(dict_0, set_0, list_0)
        list_1 = [server_error_0]
        load_file_exception_0 = module_0.LoadFileException(server_error_0, list_1)
        bool_0 = None
        sanic_exception_0 = module_0.SanicException(bool_0)
        int_0 = 500
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'$\t\xc4x'
        invalid_usage_0 = None
        str_0 = 'error_handler'
        bool_0 = False
        str_1 = ''
        load_file_exception_0 = module_0.LoadFileException(bool_0, str_1)
        str_2 = '3(Od+oMbc(D%N~'
        not_found_0 = module_0.NotFound(str_0, str_2)
        load_file_exception_1 = module_0.LoadFileException(bytes_0, invalid_usage_0, not_found_0)
        float_0 = -643.9897
        str_3 = '>ZN6k,[T8RYxX9'
        str_4 = 'tp'
        str_5 = 'l[O;mQT%M,vjI$'
        dict_0 = {str_4: float_0, str_2: load_file_exception_0, str_1: str_2, str_5: str_2}
        unauthorized_0 = module_0.Unauthorized(float_0, str_3, **dict_0)
        server_error_0 = module_0.ServerError(unauthorized_0)
        content_range_error_0 = module_0.ContentRangeError(server_error_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1712
        header_expectation_failed_0 = None
        not_found_0 = None
        complex_0 = None
        sanic_exception_0 = module_0.SanicException(complex_0)
        content_range_error_0 = None
        str_0 = ';,m,WgDd+47179\r<Uo'
        str_1 = "%?*'.r+^Bp9$Q~"
        dict_0 = {str_0: header_expectation_failed_0, str_1: str_0}
        unauthorized_0 = module_0.Unauthorized(content_range_error_0, **dict_0)
        server_error_0 = module_0.ServerError(content_range_error_0, content_range_error_0)
        header_not_found_0 = module_0.HeaderNotFound(content_range_error_0)
        bytes_0 = b''
        header_expectation_failed_1 = module_0.HeaderExpectationFailed(header_expectation_failed_0, not_found_0, bytes_0)
        py_file_error_0 = module_0.PyFileError(header_expectation_failed_1)
        str_2 = 'PdZYm.rVB'
        u_r_l_build_error_0 = module_0.URLBuildError(str_2)
        request_timeout_0 = module_0.RequestTimeout(u_r_l_build_error_0, str_2)
        list_0 = [complex_0, bytes_0]
        request_timeout_1 = module_0.RequestTimeout(list_0)
        server_error_1 = module_0.ServerError(py_file_error_0, request_timeout_0)
        dict_1 = {}
        unauthorized_1 = module_0.Unauthorized(server_error_1, **dict_1)
        unauthorized_2 = module_0.Unauthorized(unauthorized_1)
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xba\xdf\xc5\xae\xbd\xed\xb8\xf89\x90\x98C\x91\r'
        u_r_l_build_error_0 = module_0.URLBuildError(bytes_0)
        py_file_error_0 = module_0.PyFileError(u_r_l_build_error_0)
        u_r_l_build_error_1 = module_0.URLBuildError(py_file_error_0)
        list_0 = None
        set_0 = set()
        not_found_0 = module_0.NotFound(set_0)
        invalid_signal_0 = module_0.InvalidSignal(not_found_0)
        payload_too_large_0 = None
        invalid_usage_0 = module_0.InvalidUsage(payload_too_large_0)
        request_timeout_0 = module_0.RequestTimeout(invalid_usage_0)
        str_0 = 'XOQ0"++wN-'
        str_1 = 'Return a response object with file data.\n\n    :param location: Location of file on system.\n    :param mime_type: Specific mime_type.\n    :param headers: Custom Headers.\n    :param filename: Override filename.\n    :param _range:\n    '
        dict_0 = {str_0: list_0, str_1: list_0, str_0: payload_too_large_0}
        unauthorized_0 = module_0.Unauthorized(not_found_0, invalid_signal_0, **dict_0)
        invalid_signal_1 = module_0.InvalidSignal(unauthorized_0)
        bool_0 = True
        service_unavailable_0 = module_0.ServiceUnavailable(py_file_error_0, unauthorized_0)
        bytes_1 = b'\x03\xf5\xf4H'
        tuple_0 = (bool_0, service_unavailable_0, bytes_1, invalid_signal_0)
        sanic_exception_0 = module_0.SanicException(tuple_0, bool_0)
        bytes_2 = b'3\x82a\x88\xcf@&'
        set_1 = {bytes_0, invalid_usage_0, invalid_signal_1}
        unauthorized_1 = module_0.Unauthorized(str_0, bytes_2, set_1, **dict_0)
        content_range_error_0 = module_0.ContentRangeError(invalid_signal_0, list_0)
    except BaseException:
        pass