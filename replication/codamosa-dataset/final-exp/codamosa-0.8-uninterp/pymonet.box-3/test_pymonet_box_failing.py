# Automatically generated by Pynguin.
import pymonet.box as module_0
import builtins as module_1

def test_case_0():
    try:
        var_0 = None
        box_0 = module_0.Box(var_0)
        str_0 = '\n        Take mapper function and return new instance of Left with the same value.\n\n        :returns: Copy of self\n        :rtype: Left[A]\n        '
        box_1 = module_0.Box(str_0)
        var_1 = box_1.ap(box_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        int_0 = -2896
        dict_0 = {int_0: int_0}
        list_0 = [dict_0, int_0, dict_0]
        box_0 = module_0.Box(list_0)
        str_0 = '#('
        str_1 = 'AXJ1gVj@'
        dict_1 = {str_0: box_0, str_1: int_0, str_1: str_1}
        str_2 = '\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        '
        tuple_0 = (dict_0,)
        bytes_0 = b"\x8b'\xef\xd3\x17-T\xf9*\x96\xed \xe7\xffl"
        tuple_1 = (str_2, list_0, tuple_0, bytes_0)
        complex_0 = None
        tuple_2 = (box_0, dict_1, tuple_1, complex_0)
        box_1 = module_0.Box(tuple_2)
        var_0 = box_1.bind(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        box_0 = module_0.Box(bool_0)
        dict_0 = {}
        var_0 = box_0.ap(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 2377
        set_0 = {int_0}
        box_0 = module_0.Box(set_0)
        var_0 = box_0.to_maybe()
        bool_0 = True
        float_0 = -1273.0
        dict_0 = {bool_0: set_0, bool_0: bool_0, bool_0: float_0}
        var_1 = box_0.map(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        box_0 = module_0.Box(tuple_0)
        var_0 = box_0.to_either()
        var_1 = box_0.to_try()
        list_0 = None
        object_0 = module_1.object(*list_0)
    except BaseException:
        pass