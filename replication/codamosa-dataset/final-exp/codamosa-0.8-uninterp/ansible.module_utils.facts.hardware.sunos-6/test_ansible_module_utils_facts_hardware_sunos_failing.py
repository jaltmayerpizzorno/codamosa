# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.sunos as module_0

def test_case_0():
    try:
        int_0 = -639
        bool_0 = False
        sun_o_s_hardware_0 = module_0.SunOSHardware(int_0, bool_0)
        sun_o_s_hardware_collector_0 = module_0.SunOSHardwareCollector(sun_o_s_hardware_0)
        str_0 = 'PLUGIN_PATH_CACHE'
        sun_o_s_hardware_1 = module_0.SunOSHardware(str_0)
        var_0 = sun_o_s_hardware_1.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'F/~[f@'
        bytes_0 = b'q\x83\x91]O,\xe7uo\xdc\xd3\xde\xf3L\x8c\xbf\xa7'
        sun_o_s_hardware_collector_0 = module_0.SunOSHardwareCollector(str_0, bytes_0)
        float_0 = 1893.6815
        bool_0 = False
        sun_o_s_hardware_0 = module_0.SunOSHardware(bool_0)
        sun_o_s_hardware_1 = module_0.SunOSHardware(float_0, sun_o_s_hardware_0)
        var_0 = sun_o_s_hardware_1.get_cpu_facts()
    except BaseException:
        pass

def test_case_2():
    try:
        sun_o_s_hardware_collector_0 = module_0.SunOSHardwareCollector()
        str_0 = ''
        sun_o_s_hardware_0 = module_0.SunOSHardware(str_0)
        var_0 = sun_o_s_hardware_0.get_memory_facts()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        float_0 = 687.84
        tuple_0 = (bool_0, float_0)
        sun_o_s_hardware_0 = module_0.SunOSHardware(tuple_0)
        sun_o_s_hardware_1 = module_0.SunOSHardware(sun_o_s_hardware_0)
        var_0 = sun_o_s_hardware_1.get_dmi_facts()
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 977.77171
        dict_0 = None
        tuple_0 = (float_0, dict_0)
        sun_o_s_hardware_0 = module_0.SunOSHardware(tuple_0)
        var_0 = sun_o_s_hardware_0.get_device_facts()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        sun_o_s_hardware_0 = module_0.SunOSHardware(list_0)
        var_0 = sun_o_s_hardware_0.get_uptime_facts()
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        sun_o_s_hardware_0 = module_0.SunOSHardware(list_0)
        str_0 = ''
        int_0 = None
        tuple_0 = (list_0, str_0, list_0, int_0)
        var_0 = sun_o_s_hardware_0.get_cpu_facts(tuple_0)
    except BaseException:
        pass