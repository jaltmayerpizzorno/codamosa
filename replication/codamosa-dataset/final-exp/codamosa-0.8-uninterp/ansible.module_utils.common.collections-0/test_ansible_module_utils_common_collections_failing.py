# Automatically generated by Pynguin.
import ansible.module_utils.common.collections as module_0

def test_case_0():
    try:
        bool_0 = False
        str_0 = None
        dict_0 = {str_0: bool_0, str_0: bool_0}
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'naB\tF\\g)0\nv:e`s'
        str_1 = 'Rp>vHVGUfG"Dn'
        dict_0 = {str_0: str_0, str_1: str_0}
        immutable_dict_0 = module_0.ImmutableDict(**dict_0)
        var_0 = immutable_dict_0.__repr__()
        int_0 = 133146708735736
        var_1 = module_0.count(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '6G'
        list_0 = [str_0]
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.union(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2.0
        bool_0 = None
        str_0 = '9ji\r<zNMVGUf[Ddk-W'
        dict_0 = {str_0: bool_0}
        tuple_0 = (float_0, bool_0, dict_0)
        str_1 = 'yB\x0ckA5>F#e'
        dict_1 = {str_1: str_1}
        immutable_dict_0 = module_0.ImmutableDict(**dict_1)
        var_0 = immutable_dict_0.__iter__()
        var_1 = immutable_dict_0.difference(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'V"l~ JR]&d]fx\t\\\x0b\\\x0c'
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.difference(str_0)
        var_1 = module_0.count(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1466.5792
        var_0 = module_0.count(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -3427
        set_0 = {int_0, int_0, int_0, int_0}
        int_1 = 2592
        dict_0 = {int_0: set_0, int_0: int_1}
        tuple_0 = (int_0, set_0, int_1, dict_0)
        var_0 = module_0.is_sequence(tuple_0, tuple_0)
        bool_0 = True
        var_1 = module_0.is_sequence(tuple_0, bool_0)
        bool_1 = False
        list_0 = [var_1, int_0, var_0, bool_1]
        immutable_dict_0 = module_0.ImmutableDict(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xceY'
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__hash__()
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        int_0 = None
        var_1 = immutable_dict_0.__eq__(int_0)
        var_2 = module_0.count(dict_0)
        immutable_dict_1 = module_0.ImmutableDict()
        var_3 = immutable_dict_1.__hash__()
        list_0 = [bytes_0, bytes_0, bytes_0]
        dict_1 = {}
        immutable_dict_2 = module_0.ImmutableDict(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '6;gss|x.I0riX_i0'
        bytes_0 = b'C\xd0\xdf\xa7\xf5'
        set_0 = set()
        int_0 = 126
        var_0 = module_0.is_iterable(int_0)
        list_0 = []
        str_1 = 'I4M'
        dict_0 = {str_1: str_0}
        immutable_dict_0 = module_0.ImmutableDict(*list_0, **dict_0)
        dict_1 = None
        tuple_0 = (immutable_dict_0, dict_1, dict_0)
        tuple_1 = (bytes_0, set_0, tuple_0)
        var_1 = module_0.is_iterable(str_0, tuple_1)
        str_2 = '\rEEGG!)QHKHb3~d\rH'
        str_3 = '+c>vs\r9'
        list_1 = [str_3]
        str_4 = 'revision'
        str_5 = '^('
        var_2 = immutable_dict_0.__hash__()
        dict_2 = {str_2: str_2, str_3: list_1, str_4: str_2, str_5: str_3}
        immutable_dict_1 = module_0.ImmutableDict()
        var_3 = immutable_dict_1.__getitem__(dict_2)
    except BaseException:
        pass

def test_case_9():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        bool_0 = False
        var_0 = module_0.is_string(bool_0)
        tuple_0 = ()
        var_1 = module_0.is_sequence(tuple_0)
        float_0 = 3489.73
        var_2 = module_0.is_iterable(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        dict_1 = {}
        immutable_dict_0 = module_0.ImmutableDict(**dict_1)
        var_0 = immutable_dict_0.difference(dict_0)
        float_0 = -234.1
        list_0 = [var_0, float_0]
        dict_2 = {}
        immutable_dict_1 = module_0.ImmutableDict(**dict_2)
        var_1 = immutable_dict_1.difference(list_0)
        str_0 = '\rJiTI'
        dict_3 = {var_1: immutable_dict_0, immutable_dict_0: str_0}
        var_2 = immutable_dict_1.__eq__(dict_3)
        var_3 = immutable_dict_1.__hash__()
        immutable_dict_2 = module_0.ImmutableDict(*list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        str_0 = 'ng Bfd@!^}J\\('
        dict_1 = {str_0: str_0}
        immutable_dict_0 = module_0.ImmutableDict(*list_0, **dict_1)
        var_0 = immutable_dict_0.difference(str_0)
        immutable_dict_1 = module_0.ImmutableDict()
        var_1 = immutable_dict_1.__len__()
        immutable_dict_2 = module_0.ImmutableDict()
        bytes_0 = b'3'
        var_2 = immutable_dict_2.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '6;gss|x.I0riX_i0'
        bytes_0 = b'C\xd0\xdf\xa7\xf5'
        set_0 = set()
        int_0 = 126
        var_0 = module_0.is_iterable(int_0)
        list_0 = []
        str_1 = 'I4M'
        dict_0 = {str_1: str_0}
        immutable_dict_0 = module_0.ImmutableDict(*list_0, **dict_0)
        dict_1 = None
        var_1 = immutable_dict_0.difference(immutable_dict_0)
        tuple_0 = (immutable_dict_0, dict_1, dict_0)
        tuple_1 = (bytes_0, set_0, tuple_0)
        var_2 = module_0.is_iterable(str_0, tuple_1)
        str_2 = '\rEEGG!)QHKHb3~d\rH'
        str_3 = '+c>vs\r9'
        list_1 = [str_3]
        str_4 = 'revision'
        str_5 = '^('
        var_3 = immutable_dict_0.__hash__()
        dict_2 = {str_2: str_2, str_3: list_1, str_4: str_2, str_5: str_3}
        immutable_dict_1 = module_0.ImmutableDict()
        var_4 = immutable_dict_1.__getitem__(dict_2)
    except BaseException:
        pass