# Automatically generated by Pynguin.
import tqdm.rich as module_0
import rich.progress as module_1
import rich.color as module_2

def test_case_0():
    try:
        fraction_column_0 = module_0.FractionColumn()
        float_0 = 99.95
        fraction_column_1 = module_0.FractionColumn()
        var_0 = fraction_column_1.render(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        fraction_column_0 = module_0.FractionColumn()
        var_0 = None
        str_0 = '\'W\\\tpF"+[T89|u)'
        float_0 = -263.1968
        float_1 = -2275.21
        callable_0 = None
        task_0 = module_1.Task(var_0, str_0, float_0, float_1, callable_0, float_0, float_0)
        var_1 = fraction_column_0.render(task_0)
        int_0 = 6
        var_2 = fraction_column_0.render(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tqdm_rich_0 = module_0.tqdm_rich()
    except BaseException:
        pass

def test_case_3():
    try:
        rate_column_0 = module_0.RateColumn()
        str_0 = ' not supported by'
        var_0 = rate_column_0.render(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        tqdm_rich_0 = module_0.tqdm_rich(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.trrange()
    except BaseException:
        pass

def test_case_6():
    try:
        rate_column_0 = module_0.RateColumn()
        tqdm_rich_0 = module_0.tqdm_rich()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'J$kIwG\t-x0WT'
        bool_0 = True
        bool_1 = False
        bool_2 = False
        progress_0 = module_1.Progress(auto_refresh=bool_2, transient=bool_2)
        var_0 = progress_0.add_task(str_0, bool_0, bool_1)
        str_1 = None
        float_0 = 6000000.0
        callable_0 = None
        task_0 = module_1.Task(var_0, str_1, float_0, float_0, callable_0, float_0)
        list_0 = []
        tuple_0 = ()
        list_1 = [list_0, tuple_0, tuple_0]
        color_0 = module_2.Color(*list_1)
        iterable_0 = color_0.__rich_repr__()
        fraction_column_0 = module_0.FractionColumn(iterable_0)
        var_1 = fraction_column_0.render(task_0)
        str_2 = '$W8Q`5X[K1wl'
        dict_0 = {str_2: str_2}
        tqdm_rich_0 = module_0.tqdm_rich(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        str_0 = 'progress'
        dict_0 = {str_0: str_0}
        tqdm_rich_0 = module_0.tqdm_rich(*list_0, **dict_0)
    except BaseException:
        pass