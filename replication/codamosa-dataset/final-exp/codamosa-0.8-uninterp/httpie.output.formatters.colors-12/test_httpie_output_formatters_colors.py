# Automatically generated by Pynguin.
import httpie.output.formatters.colors as module_0
import httpie.context as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = "\n    Return he path to the httpie configuration directory.\n\n    This directory isn't guaranteed to exist, and nor are any of its\n    ancestors (only te legacy ~/.httpie, if returned, is guaranteed to exist).\n\n    XDG Base Directory Specification support:\n\n        <https://wiki.archlinux.org/index.php/XDG_Base_Directory>\n\n        $XDG_CONFIG_HOME is supported; $XDG_CONFIG_DIRS is not\n\n    "
    optional_0 = module_0.get_lexer(str_0, str_0, str_0)

def test_case_2():
    str_0 = '\\>ooO/f_7sQ|Z.@N'
    optional_0 = module_0.get_lexer(str_0, str_0)

def test_case_3():
    str_0 = '\\>#ooO/f_7sQ|ZW.@+N'
    optional_0 = module_0.get_lexer(str_0)

def test_case_4():
    str_0 = '\n    Optional key-value pairs to be included in the request. The separator used\n    determines the type:\n\n    \':\' HTTP headers:\n\n        Referer:http://httpie.org  Cookie:foo=bar  User-Agent:bacon/1.0\n\n    \'==\' URL parameters to be appended to the request URI:\n\n        search==httpie\n\n    \'=\' Data fields to be serialized into a JSON object (with --json, -j)\n        or form data (with --form, -f):\n\n        name=HTTPie  language=Python  description=\'CLI HTTP client\'\n\n    \':=\' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:=\'["red", "green", "blue"]\'\n\n    \'@\' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@\'~/Documents/CV.pdf;type=application/pdf\'\n\n    \'=@\' A data field like \'=\', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    \':=@\' A raw JSON field like \':=\', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '
    optional_0 = module_0.get_lexer(str_0, str_0, str_0)

def test_case_5():
    str_0 = '\\>#ooO/f_7sQ|ZW.@+N'
    optional_0 = module_0.get_lexer(str_0, str_0, str_0)

def test_case_6():
    environment_0 = module_1.Environment()
    str_0 = 'format_options'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: environment_0, str_0: str_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, environment_0, **dict_0)

def test_case_7():
    str_0 = '9;)RWd7\rv9QFpmr'
    environment_0 = module_1.Environment()
    str_1 = 'format_options'
    str_2 = ')GHBCFVjE`x>f*2'
    dict_0 = {str_0: str_2, str_1: str_0, str_2: environment_0, str_1: str_1}
    color_formatter_0 = module_0.ColorFormatter(environment_0, environment_0, **dict_0)
    type_0 = color_formatter_0.get_style_class(str_0)

def test_case_8():
    environment_0 = module_1.Environment()
    str_0 = 'format_options'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: environment_0, str_0: str_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, environment_0, **dict_0)
    str_1 = ')[(PE_|:,C%/DVkJD'
    str_2 = color_formatter_0.format_body(str_1, str_1)