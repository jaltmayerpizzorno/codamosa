# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        bytes_0 = b'/P\x91\xadeI%\xce\x88F\xe2\xe2\xfc\x85\xae'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        var_0 = module_0.remove_values(bytes_0, list_0)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1718
        dict_0 = {}
        set_0 = None
        var_0 = module_0.set_fallbacks(dict_0, set_0)
        set_1 = {int_0, int_0, int_0, int_0}
        str_0 = 'znOd7"wL'
        var_1 = module_0.remove_values(set_1, str_0)
        var_2 = module_0.env_fallback(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, tuple_0]
        str_0 = '7Ce\nm, }lfiD@tA]#c'
        var_0 = module_0.sanitize_keys(list_0, str_0)
        float_0 = -1410.3522
        var_1 = module_0.set_fallbacks(tuple_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'foo'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'F\tWQPlBN0n~n29'
        set_0 = {str_0}
        var_0 = module_0.set_fallbacks(str_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -2238
        str_0 = "become_nopasswd_error: (source=%s, state=%s): '%s'"
        dict_0 = {str_0: int_0, str_0: str_0}
        tuple_0 = (dict_0,)
        var_0 = module_0.set_fallbacks(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = '\n    name: tree\n    type: notification\n    requirements:\n      - invoked in the command line\n    short_description: Save host events to files\n    version_added: "2.0"\n    options:\n        directory:\n            version_added: \'2.11\'\n            description: directory that will contain the per host JSON files. Also set by the ``--tree`` option when using adhoc.\n            ini:\n                - section: callback_tree\n                  key: directory\n            env:\n                - name: ANSIBLE_CALLBACK_TREE_DIR\n            default: "~/.ansible/tree"\n            type: path\n    description:\n        - "This callback is used by the Ansible (adhoc) command line option `-t|--tree`"\n        - This produces a JSON dump of events in a directory, a file for each host, the directory used MUST be passed as a command line option.\n'
        var_0 = module_0.sanitize_keys(dict_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '"Test set_fallbacks function'
        set_0 = {str_0, str_0}
        list_0 = [str_0, set_0]
        var_0 = module_0.sanitize_keys(set_0, list_0)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'close_fds'
        bool_0 = True
        tuple_0 = ()
        var_0 = module_0.remove_values(bool_0, tuple_0)
        str_1 = 'v u,\\6:?>O$AG\rx>T'
        dict_0 = {str_0: str_0, str_1: str_1}
        var_1 = module_0.sanitize_keys(dict_0, dict_0, dict_0)
        var_2 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'str'
        str_1 = {str_0: str_0}
        str_2 = (str_1, str_1, str_0)
        var_0 = dict(type=str_0, fallback=str_2)
        var_1 = dict(test_key=var_0)
        var_2 = module_0.set_fallbacks(var_1, str_2)
    except BaseException:
        pass