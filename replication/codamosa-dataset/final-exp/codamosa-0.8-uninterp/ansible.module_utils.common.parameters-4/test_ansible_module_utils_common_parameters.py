# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = -2238
    list_0 = [int_0, int_0, int_0, int_0]
    var_0 = module_0.remove_values(list_0, list_0)

def test_case_2():
    bytes_0 = b''
    tuple_0 = (bytes_0, bytes_0)
    str_0 = 'M0;uqljvsD \\0\x0c'
    var_0 = module_0.remove_values(tuple_0, str_0)

def test_case_3():
    set_0 = set()
    var_0 = module_0.remove_values(set_0, set_0)

def test_case_4():
    str_0 = 'chassis_version'
    dict_0 = {}
    var_0 = module_0.remove_values(str_0, dict_0)

def test_case_5():
    bool_0 = False
    list_0 = []
    var_0 = module_0.remove_values(bool_0, list_0)

def test_case_6():
    str_0 = '}xvvx3$K6Pb$'
    dict_0 = {str_0: str_0, str_0: str_0}
    bytes_0 = b'\x86\xef^'
    var_0 = module_0.remove_values(dict_0, bytes_0)

def test_case_7():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    var_0 = module_0.sanitize_keys(bool_0, list_0, list_0)

def test_case_8():
    str_0 = '\n        Method for options validation to use in \'load_data\' for TaskInclude and HandlerTaskInclude\n        since they share the same validations. It is not named \'validate_options\' on purpose\n        to prevent confusion with \'_validate_*" methods. Note that the task passed might be changed\n        as a side-effect of this method.\n        '
    tuple_0 = ()
    dict_0 = {str_0: tuple_0}
    var_0 = module_0.sanitize_keys(str_0, dict_0)

def test_case_9():
    str_0 = ']D"(mw'
    bytes_0 = b'\x11\xa6\x1cgE\xa1\xe1\xae\xa6\xbbx\x1f^'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0}
    list_0 = [dict_0]
    list_1 = [list_0, dict_0]
    var_0 = module_0.remove_values(list_1, list_0)

def test_case_10():
    str_0 = 'ENV_VAR1'
    str_1 = 'ENV_VAR2'
    dict_0 = {str_0: str_0, str_1: str_1}
    tuple_0 = ()
    var_0 = module_0.sanitize_keys(dict_0, tuple_0)

def test_case_11():
    str_0 = 'test_parameter'
    str_1 = 'test_parameter_no_fallback'
    str_2 = 'type'
    str_3 = 'required'
    str_4 = '\\ta'
    bool_0 = False
    str_5 = 'default_value'
    var_0 = {str_2: str_4, str_3: bool_0, str_0: str_5}
    var_1 = {str_2: str_4, str_3: bool_0}
    var_2 = {str_0: var_0, str_1: var_1}
    var_3 = module_0.set_fallbacks(var_2, str_5)
    var_4 = set(var_2)

def test_case_12():
    str_0 = 'test_parameter'
    str_1 = 'test_parameter_no_fallback'
    str_2 = 'type'
    str_3 = 'required'
    str_4 = 'str'
    bool_0 = False
    str_5 = 'default_value'
    var_0 = {str_2: str_4, str_3: bool_0, str_0: str_5}
    var_1 = {str_2: str_4, str_3: bool_0}
    var_2 = {str_0: var_0, str_1: var_1}
    str_6 = {str_1: str_5}
    var_3 = module_0.set_fallbacks(var_2, str_6)
    str_7 = [str_0, str_1]
    var_4 = set(str_7)