# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        str_0 = 'f4{$c#q'
        float_0 = None
        var_0 = module_0.unique(str_0, float_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        filter_module_0 = module_0.FilterModule()
        bool_0 = True
        bytes_0 = b'/2\xa1'
        int_0 = -223
        var_0 = module_0.intersect(bool_0, bytes_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Failed to replace file: %s to %s: %s'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = []
        dict_1 = {}
        var_0 = module_0.difference(list_0, str_0, dict_1)
        list_1 = [str_0, list_0, dict_0, str_0]
        var_1 = module_0.min(dict_0, list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        filter_module_0 = None
        list_0 = [filter_module_0, filter_module_0]
        str_0 = 'JS0nx9"\x0b{4IJ<'
        float_0 = 1864.932001
        var_0 = module_0.difference(str_0, float_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -2334
        str_0 = 'set the poll interval if using -B (default=%s)'
        tuple_0 = (str_0,)
        var_0 = module_0.symmetric_difference(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -3411.403
        dict_0 = None
        str_0 = 'AwS'
        str_1 = '6?PxM^X/Z#]'
        var_0 = module_0.union(dict_0, str_0, str_1)
        var_1 = module_0.inversepower(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'M{~I3\r"^B:^N*FbhD'
        bool_0 = True
        var_0 = module_0.min(str_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        set_0 = None
        var_0 = module_0.max(bool_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        var_0 = module_0.logarithm(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xa1\xb5\x0f^0\x88h\xcf\x0f\xb4\x97$\x01&\xc7'
        str_0 = None
        var_0 = module_0.logarithm(bytes_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 748.0
        list_0 = [float_0, float_0, float_0, float_0]
        var_0 = module_0.power(float_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -3411.403
        var_0 = module_0.inversepower(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xf9J\x99\x9b\x9cN\xd04\xe9\xa02\xb0,4'
        str_0 = 'tM;j'
        float_0 = 1505.932
        var_0 = module_0.human_readable(bytes_0, str_0, float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "QUxEu{*'Zyc\tCT"
        var_0 = module_0.human_readable(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        var_0 = module_0.human_to_bytes(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '@Asms\nzq4C+\\.\nz;.'
        dict_0 = {}
        var_0 = module_0.rekey_on_member(str_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        str_1 = '^[||4>eYrkF'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        bytes_0 = b'\xe4\x1d;v&R\xc1'
        var_0 = module_0.rekey_on_member(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = filter_module_0.filters()
        str_0 = 'X=>cs5Ra\x0csw\x0cQ.'
        set_0 = {str_0}
        filter_module_1 = module_0.FilterModule()
        str_1 = 'qatom'
        str_2 = 'k196hmYHa3aiX)"S\tG><'
        str_3 = '`\tI9DX{~\x0cf'
        str_4 = 'EO7:xrHZx \\^\x0cW,_tvJ+'
        dict_0 = {str_1: var_0, str_3: set_0, str_4: str_1, str_2: str_4}
        list_0 = [dict_0, filter_module_0]
        var_2 = module_0.symmetric_difference(set_0, str_2, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        filter_module_0 = module_0.FilterModule()
        list_0 = []
        tuple_0 = None
        str_0 = ']$Yr<NG{iYl+'
        dict_0 = {str_0: list_0}
        var_0 = module_0.rekey_on_member(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'Failed to replace file: %s to %s: %s'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {}
        bytes_0 = b'\n7\xb6\r\xf6,\xf4\xe6\xcdz\xd4\x18~d-\x8f\xa4!J\x84'
        var_0 = module_0.max(dict_0, bytes_0)
        float_0 = 1159.375306
        complex_0 = None
        var_1 = module_0.difference(float_0, dict_1, complex_0)
        list_0 = [dict_0]
        float_1 = 2.718281828459045
        var_2 = module_0.inversepower(float_1, list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = -804.0
        list_0 = [float_0]
        var_0 = module_0.symmetric_difference(float_0, list_0, list_0)
        str_0 = '$ubPp6\x0crMJLiN,9'
        int_0 = 619
        bool_0 = True
        list_1 = [str_0]
        dict_0 = {}
        var_1 = module_0.logarithm(int_0)
        list_2 = [dict_0, bool_0, str_0, int_0]
        var_2 = module_0.difference(bool_0, list_1, list_2)
        bytes_0 = b'Z\x08\xf8\x1b\x1aM\xd0\xaa\x0b\xe1\x14U\x83x'
        str_1 = 'qFME3'
        dict_1 = {str_1: var_2}
        var_3 = module_0.max(bytes_0, dict_1)
        var_4 = module_0.rekey_on_member(dict_0, str_0)
        var_5 = module_0.inversepower(dict_0)
    except BaseException:
        pass

def test_case_21():
    try:
        filter_module_0 = module_0.FilterModule()
        int_0 = 14
        str_0 = 'HfjTJsV*)E20d'
        bool_0 = False
        list_0 = [filter_module_0]
        var_0 = module_0.unique(int_0, str_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        tuple_0 = None
        bytes_0 = b'\xb0BT\xacqk`\xf0\xaf\xf6\x9f\xe7\xf4M'
        str_0 = '!b'
        int_0 = -694
        var_0 = module_0.unique(tuple_0, bytes_0, str_0, int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '@Asms\nzq4C+\\.\nz;.'
        int_0 = None
        var_0 = module_0.rekey_on_member(str_0, int_0, int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = -3020.5727
        set_0 = {float_0, float_0, float_0}
        list_0 = [float_0]
        float_1 = 298.75263
        tuple_0 = (list_0, float_1)
        var_0 = module_0.unique(set_0, tuple_0)
        list_1 = [float_0]
        var_1 = module_0.inversepower(float_1)
        var_2 = module_0.symmetric_difference(float_0, list_1, list_1)
        bool_0 = False
        bytes_0 = b'Z\x08\xf8\x1b\x1aM\xd0\xaa\x0b\xe1\x14U\x83x'
        var_3 = module_0.min(bytes_0, set_0)
        tuple_1 = ()
        var_4 = module_0.difference(tuple_1, tuple_1, bytes_0)
        var_5 = module_0.human_to_bytes(bool_0, set_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'Failed to replace file: %s to %s: %s'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = b'\n7\xb6\r\xf6,\xf4\xe6\xcdz\xd4\x18~d-\x8f\xa4!J\x84'
        var_0 = module_0.max(dict_0, bytes_0)
        list_0 = [dict_0]
        float_0 = 2.718281828459045
        var_1 = module_0.inversepower(float_0, list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = -3020.5727
        set_0 = {float_0}
        str_0 = '$ubPp6\x0crMJLiN,9'
        int_0 = 619
        bool_0 = True
        dict_0 = {}
        list_0 = [dict_0, bool_0, str_0, int_0]
        var_0 = module_0.rekey_on_member(dict_0, float_0)
        var_1 = module_0.rekey_on_member(list_0, set_0)
    except BaseException:
        pass

def test_case_27():
    try:
        float_0 = 298.75263
        str_0 = '$ubP\x0crMJLiN,9'
        int_0 = 619
        bool_0 = True
        list_0 = []
        dict_0 = {}
        list_1 = [dict_0, bool_0, str_0, int_0]
        var_0 = module_0.difference(bool_0, list_0, list_1)
        bytes_0 = b'Z\x08\xf8\x1b\x1aM\xd0\xaa\x0b\xe1\x14U\x83x'
        var_1 = module_0.rekey_on_member(dict_0, float_0)
        dict_1 = {str_0: var_0}
        var_2 = module_0.max(bytes_0, dict_1)
        var_3 = module_0.rekey_on_member(list_1, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        float_0 = -3020.5727
        set_0 = {float_0, float_0, float_0, float_0}
        list_0 = [float_0]
        float_1 = -804.0
        tuple_0 = (list_0, float_1)
        var_0 = module_0.unique(set_0, tuple_0)
        list_1 = [float_0]
        var_1 = module_0.symmetric_difference(float_0, list_1, list_1)
        str_0 = '$ubPp6\x0crMJLiN,9'
        int_0 = 619
        bool_0 = True
        list_2 = [str_0]
        dict_0 = {}
        int_1 = 663
        var_2 = module_0.logarithm(int_1)
        list_3 = [dict_0, bool_0, str_0, int_0]
        var_3 = module_0.difference(bool_0, list_2, list_3)
        bytes_0 = b'Z\x08\xf8\x1b\x1aM\xd0\xaa\x0b\xe1\x14U\x83x'
        str_1 = 'qFME3'
        dict_1 = {str_1: var_3}
        var_4 = module_0.max(bytes_0, dict_1)
        var_5 = module_0.rekey_on_member(dict_0, str_0)
        int_2 = -1468
        var_6 = module_0.human_to_bytes(int_1, int_2)
    except BaseException:
        pass

def test_case_29():
    try:
        dict_0 = {}
        str_0 = '7FwV)*\x0b[i=Az\tSQ5o'
        str_1 = "\tA4hS'VJeQ`"
        dict_1 = {str_0: dict_0, str_1: str_1}
        bool_0 = False
        var_0 = module_0.inversepower(dict_1, bool_0)
    except BaseException:
        pass

def test_case_30():
    try:
        float_0 = -3020.5727
        dict_0 = {}
        list_0 = [float_0]
        var_0 = module_0.min(dict_0, list_0)
        set_0 = {float_0, float_0, float_0, float_0}
        tuple_0 = (list_0, float_0)
        var_1 = module_0.unique(set_0, tuple_0)
        filter_module_0 = module_0.FilterModule()
        int_0 = 2293
        str_0 = 'k\x0b97c0hU%kUB8A=5a)f'
        dict_1 = None
        list_1 = [dict_1, int_0, float_0, filter_module_0]
        var_2 = module_0.symmetric_difference(str_0, list_1, list_0)
        str_1 = '<+\tJ#6k<..ne>8jX}'
        dict_2 = {str_1: list_0, str_1: list_0, str_1: list_0, str_1: float_0}
        var_3 = module_0.intersect(int_0, set_0, dict_2)
        list_2 = [float_0]
        var_4 = module_0.symmetric_difference(float_0, list_2, list_2)
        str_2 = '$ubPp6\x0crMJLiN,9'
        bool_0 = True
        dict_3 = {}
        var_5 = module_0.logarithm(int_0)
        var_6 = module_0.difference(bool_0, list_2, list_0)
        bytes_0 = b'Z\x08\xf8\x1b\x1aM\xd0\xaa\x0b5\xe1\x14U\x83x'
        str_3 = 'qFME3'
        dict_4 = {str_3: var_6}
        var_7 = module_0.max(bytes_0, dict_4)
        var_8 = module_0.rekey_on_member(dict_3, str_2)
        var_9 = module_0.human_to_bytes(dict_3)
    except BaseException:
        pass

def test_case_31():
    try:
        float_0 = -3020.5727
        dict_0 = {}
        list_0 = [float_0]
        var_0 = module_0.min(dict_0, list_0)
        set_0 = {float_0, float_0, float_0, float_0}
        list_1 = [float_0]
        float_1 = -804.4773859249005
        tuple_0 = (list_1, float_1)
        var_1 = module_0.unique(set_0, tuple_0)
        filter_module_0 = module_0.FilterModule()
        int_0 = 2293
        str_0 = '<+\tJ#6k<..ne>8jX}'
        dict_1 = {str_0: list_0, str_0: list_0, str_0: list_0, str_0: float_0}
        var_2 = module_0.intersect(int_0, set_0, dict_1)
        float_2 = 2820.679322
        var_3 = module_0.power(float_0, float_2)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 10
        var_0 = module_0.logarithm(int_0)
        int_1 = 100
        var_1 = module_0.logarithm(int_1, int_0)
        str_0 = 'test'
        var_2 = module_0.logarithm(str_0)
    except BaseException:
        pass