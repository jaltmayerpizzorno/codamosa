# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = 'def f():\n    pass\n    yield 1'
    var_0 = module_0.parse(str_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(var_0)
    var_1 = return_from_generator_transformer_0.visit(var_0)

def test_case_2():
    str_0 = 'def f():\n    pass\n    yield1'
    var_0 = module_0.parse(str_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(var_0)
    var_1 = return_from_generator_transformer_0.visit(var_0)

def test_case_3():
    str_0 = 'def f():\n    pass'
    var_0 = module_0.parse(str_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    list_0 = [var_0]
    list_1 = [return_from_generator_transformer_0, str_0, list_0]
    function_def_0 = module_2.FunctionDef(*list_1)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)

def test_case_4():
    str_0 = 'def f():\n    pass'
    var_0 = module_0.parse(str_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(str_0)
    list_0 = [return_from_generator_transformer_0, var_0, var_0]
    list_1 = [return_from_generator_transformer_0, str_0, list_0]
    function_def_0 = module_2.FunctionDef(*list_1)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)