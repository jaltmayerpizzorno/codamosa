# Automatically generated by Pynguin.
import collections.abc as module_0
import apimd.parser as module_1
import ast as module_2

def test_case_0():
    try:
        sequence_0 = module_0.Sequence()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        bool_0 = module_1.is_public_family(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        subscript_0 = module_2.Subscript()
        str_0 = '0?\rE9JIIl"+iQFW87'
        str_1 = 'KRB"A'
        dict_0 = {str_0: str_1}
        resolver_0 = module_1.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        bool_0 = False
        str_1 = 'dk"3G^;#J|G6%b[OKi'
        int_0 = 42
        str_2 = '$\nEv{e8~0N_8'
        dict_0 = {str_1: int_0, str_0: int_0, str_2: int_0}
        parser_0 = module_1.Parser(bool_0, dict_0)
        var_0 = parser_0.__repr__()
        str_3 = '>TXLO M<fO.8'
        dict_1 = {str_3: str_3}
        constant_0 = None
        resolver_0 = module_1.Resolver(str_0, dict_1, str_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'G<_U_h?K)\rR-K$*y'
        str_1 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
        attribute_0 = None
        resolver_0 = module_1.Resolver(str_1, dict_0)
        a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        str_0 = '}3\rOb=7\tR7*PnqISI@x'
        assign_0 = module_2.Assign()
        parser_0 = module_1.Parser(dict_0, dict_0, dict_0)
        parser_0.globals(str_0, assign_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '!kRCG/&CIH'
        bool_0 = module_1.is_public_family(str_0)
        dict_0 = {str_0: str_0, str_0: bool_0}
        async_function_def_0 = module_2.AsyncFunctionDef(**dict_0)
        str_1 = 't!\x0c}_Xm'
        int_0 = 604
        str_2 = '*g6)7^ZMksBNWm\t(kAP9'
        int_1 = 471
        dict_1 = {str_0: int_0, str_2: int_0, str_2: int_1}
        dict_2 = {}
        parser_0 = module_1.Parser(bool_0, dict_1, dict_2, dict_2, dict_2)
        parser_0.api(str_0, async_function_def_0, prefix=str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'r/f-h_<[!stv'
        str_1 = 'NV'
        str_2 = 's,jNc,*Pw3-\\l^mNN'
        list_0 = [str_2, str_0]
        arguments_0 = module_2.arguments(*list_0)
        tuple_0 = ()
        bool_0 = True
        bool_1 = False
        int_0 = 1431
        str_3 = None
        set_0 = {str_3, str_0}
        str_4 = '-b=o}_=VI'
        str_5 = 'mB'
        dict_0 = {str_3: set_0, str_4: set_0, str_5: set_0, str_4: set_0}
        parser_0 = module_1.Parser(bool_1, int_0, dict_0)
        parser_0.func_api(str_1, str_2, arguments_0, tuple_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'K6asp:"|M h'
        arguments_0 = module_2.arguments()
        str_1 = 'TZ?U~JS9;'
        dict_0 = None
        str_2 = '__'
        assign_0 = None
        parser_0 = module_1.Parser(dict_0)
        resolver_0 = module_1.Resolver(str_2, dict_0)
        expr_0 = module_2.expr()
        list_0 = [expr_0]
        name_0 = None
        import_0 = module_2.Import()
        list_1 = [assign_0, name_0, import_0]
        parser_0.class_api(str_0, str_1, list_0, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "EEZ1C&<,{8Sq'q0(`5+"
        bool_0 = False
        dict_0 = {str_0: str_0}
        parser_0 = module_1.Parser(bool_0, dict_0)
        bool_1 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'QF?+Of|=Mg1LsS`fsgA'
        str_1 = module_1.code(str_0)
        bool_0 = False
        int_0 = -289
        dict_0 = {str_1: int_0, str_0: int_0}
        parser_0 = module_1.Parser(bool_0, dict_0)
        str_2 = parser_0.compile()
        bool_1 = module_1.is_magic(str_1)
        str_3 = 'd\t)l]>| x'
        str_4 = module_1.doctest(str_3)
        str_5 = 'q(Si<Q\r\\,i\t76d.'
        async_function_def_0 = module_2.AsyncFunctionDef()
        parser_0.api(str_5, async_function_def_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\r%8~s3pAD9{dA'
        str_1 = "p0JG'`]>@"
        list_0 = None
        dict_0 = {}
        list_1 = [dict_0, dict_0]
        attribute_0 = module_2.Attribute(*list_1)
        dict_1 = {}
        str_2 = 'x\\`y7~\\-7#|&s~'
        resolver_0 = module_1.Resolver(str_1, dict_1, str_2)
        a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
        attribute_1 = module_2.Attribute(**dict_0)
        list_2 = [str_0, attribute_1, dict_0]
        assign_0 = module_2.Assign(*list_2)
        bool_0 = None
        set_0 = {str_1, attribute_1}
        list_3 = [assign_0, bool_0, set_0]
        bool_1 = True
        str_3 = '!'
        int_0 = -183
        int_1 = -542
        int_2 = None
        dict_2 = {str_3: int_0, str_3: int_1, str_3: int_2, str_3: int_0}
        str_4 = 'cJ_00'
        dict_3 = {str_4: str_4, str_3: str_4}
        parser_0 = module_1.Parser(bool_1, dict_2, dict_3, dict_3)
        parser_0.class_api(str_0, str_1, list_0, list_3)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        import_0 = module_2.Import(**dict_0)
        bool_0 = True
        str_0 = '=J'
        str_1 = 'w[\x0cwE}ejFyy!XgQz";L'
        set_0 = {str_1, str_0, str_1, str_1}
        dict_1 = {str_0: set_0}
        dict_2 = {str_0: str_1}
        parser_0 = module_1.Parser(bool_0, dict_1, dict_2, dict_2, dict_2)
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'K6asp:"|M h'
        arguments_0 = module_2.arguments()
        set_0 = {str_0, str_0}
        str_1 = None
        dict_0 = None
        str_2 = '__'
        assign_0 = None
        parser_0 = module_1.Parser(dict_0)
        parser_0.globals(str_2, assign_0)
        list_0 = [dict_0, set_0]
        dict_1 = {}
        attribute_0 = module_2.Attribute(*list_0, **dict_1)
        resolver_0 = module_1.Resolver(str_1, dict_0)
        a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
        expr_0 = module_2.expr()
        str_3 = module_1.esc_underscore(str_2)
        int_0 = 1485
        str_4 = module_1.parent(str_0, level=int_0)
        int_1 = 2
        bool_0 = False
        str_5 = 'b0'
        int_2 = 12
        parser_1 = module_1.Parser(bool_0, int_2)
        parser_0.globals(str_0, assign_0)
        parser_1.parse(str_0, str_5)
        str_6 = ''
        str_7 = None
        str_8 = parser_1.compile()
        dict_2 = {str_6: str_7}
        parser_2 = module_1.Parser(int_1, bool_0, dict_2)
        bool_1 = parser_2.is_public(str_3)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Z'
        list_0 = [str_0, str_0]
        iterable_0 = None
        dict_0 = {str_0: iterable_0}
        function_def_0 = module_2.FunctionDef(*list_0, **dict_0)
        int_0 = -2371
        bool_0 = False
        str_1 = '6f6^w\x0crZm.dAYpK'
        dict_1 = {str_1: str_1, str_1: str_1}
        str_2 = None
        str_3 = None
        set_0 = {str_2, str_3}
        str_4 = 'Xq=\tK.}_|'
        str_5 = 'Bh,+zzo4l8'
        str_6 = module_1.doctest(str_5)
        str_7 = ' h'
        dict_2 = {str_2: set_0, str_4: set_0, str_7: set_0}
        parser_0 = module_1.Parser(int_0, bool_0, dict_1, dict_2)
        parser_0.api(str_0, function_def_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'K6asp:"|M h'
        set_0 = {str_0, str_0}
        str_1 = None
        dict_0 = None
        str_2 = '`Bj]u7q'
        assign_0 = None
        parser_0 = module_1.Parser(dict_0)
        parser_0.globals(str_2, assign_0)
        list_0 = [dict_0, set_0]
        dict_1 = {}
        attribute_0 = module_2.Attribute(*list_0, **dict_1)
        resolver_0 = module_1.Resolver(str_1, dict_0)
        a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
        expr_0 = module_2.expr()
        bool_0 = True
        int_0 = 1485
        str_3 = module_1.parent(str_0, level=int_0)
        str_4 = 'b0'
        int_1 = 12
        parser_1 = module_1.Parser(bool_0, int_1)
        parser_1.parse(str_0, str_4)
        str_5 = parser_1.compile()
        str_6 = 'l?Wm R@'
        str_7 = module_1.parent(str_6)
        str_8 = module_1.code(str_5)
        str_9 = 'BhzgsS'
        str_10 = None
        arguments_0 = module_2.arguments(*list_0)
        bool_1 = True
        parser_0.func_api(str_9, str_10, arguments_0, expr_0, has_self=bool_0, cls_method=bool_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'K6asp:"|M h'
        arguments_0 = module_2.arguments()
        expr_0 = module_2.expr()
        dict_0 = None
        str_1 = '__'
        bool_0 = module_1.is_public_family(str_1)
        assign_0 = None
        parser_0 = module_1.Parser(dict_0)
        parser_0.globals(str_1, assign_0)
        str_2 = "{['n^Y2u3*"
        str_3 = module_1.code(str_2)
        str_4 = parser_0.compile()
        resolver_0 = module_1.Resolver(str_1, dict_0)
        bool_1 = True
        str_5 = module_1.esc_underscore(str_3)
        int_0 = 1485
        str_6 = module_1.parent(str_0, level=int_0)
        int_1 = 2
        str_7 = 'b0'
        parser_0.parse(str_0, str_7)
        str_8 = ''
        str_9 = None
        str_10 = parser_0.compile()
        dict_1 = {str_8: str_9}
        parser_1 = module_1.Parser(int_1, bool_1, dict_1)
        str_11 = 'Cs'
        bool_2 = module_1.is_magic(str_11)
        str_12 = 'l?Wm R@'
        str_13 = module_1.parent(str_12)
        str_14 = module_1.code(str_10)
        str_15 = module_1.code(str_7)
        parser_2 = module_1.Parser(bool_1, dict_1, dict_1, dict_1)
        str_16 = 'p[JuWdbe|P&gv0k5ojW,'
        bool_3 = False
        parser_2.func_api(str_5, str_16, arguments_0, expr_0, has_self=bool_1, cls_method=bool_3)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        dict_0 = {str_0: str_0}
        resolver_0 = module_1.Resolver(str_0, dict_0)
        list_0 = []
        expr_0 = module_2.expr(*list_0)
        dict_1 = {}
        import_0 = module_2.Import(**dict_1)
        bool_0 = True
        str_1 = '=J'
        str_2 = 'w[\x0cwE}ejFyy!XgQz";L'
        set_0 = {str_2, str_1, str_2, str_2}
        dict_2 = {str_1: set_0}
        dict_3 = {str_1: str_2}
        parser_0 = module_1.Parser(bool_0, dict_2, dict_3, dict_3, dict_3)
        list_1 = [str_1]
        import_1 = module_2.Import(*list_1)
        str_3 = '?H'
        parser_0.imports(str_3, import_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 're.Match'
        arguments_0 = module_2.arguments()
        str_1 = 'TZ?U~JS9;'
        expr_0 = module_2.expr()
        str_2 = module_1.const_type(expr_0)
        dict_0 = None
        str_3 = '__'
        str_4 = ''
        bool_0 = module_1.is_public_family(str_4)
        assign_0 = None
        parser_0 = module_1.Parser(dict_0)
        set_0 = set()
        str_5 = None
        dict_1 = {str_0: set_0, str_5: set_0, str_4: set_0, str_0: set_0}
        parser_1 = module_1.Parser(bool_0, dict_0, dict_1, dict_0)
        parser_0.globals(str_3, assign_0)
        str_6 = parser_0.compile()
        resolver_0 = module_1.Resolver(str_3, dict_0)
        bool_1 = False
        str_7 = module_1.esc_underscore(str_1)
        int_0 = 1485
        str_8 = module_1.parent(str_0, level=int_0)
        int_1 = 2
        str_9 = 'b0'
        parser_0.parse(str_0, str_9)
        str_10 = ''
        str_11 = None
        dict_2 = {str_10: str_11}
        parser_2 = module_1.Parser(int_1, bool_1, dict_2)
        str_12 = 'l?Wm R@'
        str_13 = module_1.parent(str_12)
        str_14 = module_1.code(str_10)
        str_15 = module_1.code(str_9)
        parser_3 = module_1.Parser(bool_1, dict_2, dict_2, dict_2)
        bool_2 = True
        parser_4 = module_1.Parser(bool_2, int_1, bool_2, dict_2, dict_0, dict_2)
        str_16 = '0\rvz#sY_"u6L6i'
        import_0 = module_2.Import()
        parser_4.imports(str_16, import_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'Re'
        bool_0 = False
        str_1 = '061*,k`=!efY,3q6>>4'
        str_2 = '.*{%veD;`*=d0-Bie'
        list_0 = [str_1]
        constant_0 = module_2.Constant(*list_0)
        str_3 = 'gR'
        dict_0 = {str_3: str_2, str_0: str_0}
        resolver_0 = module_1.Resolver(str_1, dict_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        str_4 = "XB|!'p lUs"
        str_5 = '{S'
        arguments_0 = module_2.arguments()
        expr_0 = module_2.expr()
        bool_1 = True
        str_6 = '1_(hlep"bRKcV2\x0cO}'
        str_7 = '$c'
        dict_1 = {str_5: str_2, str_6: str_7}
        str_8 = '1(|uN/oJ&L|i4".d|tj'
        str_9 = 'Wp1o'
        str_10 = 'qTr'
        str_11 = None
        dict_2 = {str_1: str_8, str_4: str_9, str_10: str_11}
        parser_0 = module_1.Parser(bool_0, dict_1, dict_0, dict_2, dict_1)
        parser_0.func_api(str_0, str_5, arguments_0, expr_0, has_self=bool_1, cls_method=bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'YPzvan_;GmT~do'
        str_1 = '"=`LE%D\x0c@JJr'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
        attribute_0 = module_2.Attribute(**dict_0)
        str_2 = 'TTf>|1'
        dict_1 = {str_2: str_2}
        parser_0 = module_1.Parser(dict_1, dict_1, dict_1)
        var_0 = parser_0.__eq__(attribute_0)
        iterable_0 = None
        str_3 = module_1.table(items=iterable_0)
    except BaseException:
        pass

def test_case_21():
    try:
        subscript_0 = module_2.Subscript()
        str_0 = '/\x0b9'
        function_def_0 = None
        list_0 = [str_0, str_0, function_def_0]
        import_from_0 = module_2.ImportFrom(*list_0)
        str_1 = 'c4['
        int_0 = 146
        str_2 = "kA'H);o7[7igeM"
        dict_0 = {str_1: int_0, str_2: int_0}
        parser_0 = module_1.Parser(dict_0)
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '!1O`t?di'
        list_0 = [str_0, str_0]
        dict_0 = {}
        ann_assign_0 = module_2.AnnAssign(*list_0, **dict_0)
        bool_0 = True
        str_1 = 'q"B>ZKw*0`G?@i'
        int_0 = None
        dict_1 = {str_1: int_0, str_1: int_0, str_1: int_0}
        str_2 = '0G'
        str_3 = 'tb<R'
        str_4 = 'O:V|L0!\x0c6hglCRs\t,L'
        set_0 = {str_3, str_4}
        str_5 = '?H'
        dict_2 = {str_2: set_0, str_5: set_0}
        str_6 = '/q'
        dict_3 = {str_5: str_1, str_1: str_4, str_1: str_6}
        parser_0 = module_1.Parser(bool_0, dict_1, dict_2, dict_3)
        parser_0.globals(str_0, ann_assign_0)
        str_7 = 'd55T4s(9<'
        tuple_0 = ()
        dict_4 = None
        str_8 = "'K+A3;$|B\\j%,p=<"
        str_9 = 'xpC B5d$f\x0b5^,|%lj5z'
        set_1 = {str_8, str_8, str_9}
        str_10 = 'dict'
        dict_5 = {str_8: set_1, str_10: set_1, str_10: set_1}
        list_1 = [tuple_0, dict_4, dict_5]
        import_from_0 = module_2.ImportFrom(*list_1)
        dict_6 = {}
        parser_1 = module_1.Parser(dict_6)
        sequence_0 = None
        iterator_0 = module_1.walk_body(sequence_0)
        parser_1.imports(str_7, import_from_0)
    except BaseException:
        pass

def test_case_23():
    try:
        arguments_0 = module_2.arguments()
        int_0 = -1916
        str_0 = '__'
        expr_0 = module_2.expr()
        str_1 = module_1.parent(str_0, level=int_0)
        bool_0 = False
        str_2 = 'b0'
        int_1 = 23
        parser_0 = module_1.Parser(bool_0, int_1)
        parser_0.parse(str_0, str_2)
        str_3 = 'M:n9#-O$'
        int_2 = 12
        str_4 = 'nCi];'
        parser_0.parse(str_4, str_3)
        str_5 = None
        str_6 = parser_0.compile()
        str_7 = 'Cs'
        str_8 = '0> b'
        dict_0 = {str_4: str_6, str_4: str_7, str_8: str_6}
        str_9 = 'Q!?L0q|'
        str_10 = module_1.parent(str_9, level=int_2)
        parser_1 = module_1.Parser(int_0, dict_0)
        bool_1 = parser_0.is_public(str_5)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '_<re\x0ccg_'
        bool_0 = module_1.is_public_family(str_0)
        arguments_0 = module_2.arguments()
        list_0 = [str_0, str_0]
        expr_0 = module_2.expr(*list_0)
    except BaseException:
        pass