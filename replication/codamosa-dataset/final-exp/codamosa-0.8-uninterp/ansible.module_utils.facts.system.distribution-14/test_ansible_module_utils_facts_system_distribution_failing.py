# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        bool_0 = False
        var_0 = module_0.get_uname(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\n- name: Sleep for 300 seconds and continue with play\n  wait_for:\n    timeout: 300\n  delegate_to: localhost\n\n- name: Wait for port 8000 to become open on the host, don\'t start checking for 10 seconds\n  wait_for:\n    port: 8000\n    delay: 10\n\n- name: Waits for port 8000 of any IP to close active connections, don\'t start checking for 10 seconds\n  wait_for:\n    host: 0.0.0.0\n    port: 8000\n    delay: 10\n    state: drained\n\n- name: Wait for port 8000 of any IP to close active connections, ignoring connections for specified hosts\n  wait_for:\n    host: 0.0.0.0\n    port: 8000\n    state: drained\n    exclude_hosts: 10.2.1.2,10.2.1.3\n\n- name: Wait until the file /tmp/foo is present before continuing\n  wait_for:\n    path: /tmp/foo\n\n- name: Wait until the string "completed" is in the file /tmp/foo before continuing\n  wait_for:\n    path: /tmp/foo\n    search_regex: completed\n\n- name: Wait until regex pattern matches in the file /tmp/foo and print the matched group\n  wait_for:\n    path: /tmp/foo\n    search_regex: completed (?P<task>\\w+)\n  register: waitfor\n- debug:\n    msg: Completed {{ waitfor[\'match_groupdict\'][\'task\'] }}\n\n- name: Wait until the lock file is removed\n  wait_for:\n    path: /var/lock/file.lock\n    state: absent\n\n- name: Wait until the process is finished and pid was destroyed\n  wait_for:\n    path: /proc/3466/status\n    state: absent\n\n- name: Output customized message when failed\n  wait_for:\n    path: /tmp/foo\n    state: present\n    msg: Timeout to find file /tmp/foo\n\n# Do not assume the inventory_hostname is resolvable and delay 10 seconds at start\n- name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"\n  wait_for:\n    port: 22\n    host: \'{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}\'\n    search_regex: OpenSSH\n    delay: 10\n  connection: local\n\n# Same as above but you normally have ansible_connection set in inventory, which overrides \'connection\'\n- name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"\n  wait_for:\n    port: 22\n    host: \'{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}\'\n    search_regex: OpenSSH\n    delay: 10\n  vars:\n    ansible_connection: local\n'
        distribution_0 = module_0.Distribution(str_0)
        float_0 = 25.37
        str_1 = ' +refs/heads/%s:refs/remotes/%s/%s'
        str_2 = 'Unable to change directory before execution: %s'
        distribution_files_0 = module_0.DistributionFiles(str_2)
        var_0 = distribution_files_0.process_dist_files()
        var_1 = distribution_files_0.parse_distribution_file_CentOS(distribution_0, float_0, str_1, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 741
        distribution_0 = module_0.Distribution(int_0)
        var_0 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -1967.7622
        distribution_0 = module_0.Distribution(float_0)
        var_0 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_4():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        distribution_files_2 = module_0.DistributionFiles(distribution_files_1)
        distribution_0 = module_0.Distribution(distribution_files_2)
        var_0 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_5():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bytes_0 = b'o&PK@-W'
        str_0 = '7iqivU}t<'
        distribution_files_0 = module_0.DistributionFiles(str_0)
        var_0 = distribution_files_0.parse_distribution_file_Debian(distribution_fact_collector_0, str_0, str_0, bytes_0)
        int_0 = -336
        distribution_0 = module_0.Distribution(int_0)
        var_1 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 0.5
        distribution_0 = module_0.Distribution(float_0)
        var_0 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x82\xd0\xd1\xf64\xde\x1c\xcd\xf6w\xb4\xe2\x04\x18\xf6=\x07[\xe7'
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_8():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bytes_0 = b'o&PK@-W'
        str_0 = '7iqivU}t<'
        distribution_files_0 = module_0.DistributionFiles(str_0)
        var_0 = distribution_files_0.parse_distribution_file_Debian(distribution_fact_collector_0, str_0, str_0, bytes_0)
        int_0 = -336
        distribution_0 = module_0.Distribution(int_0)
        var_1 = distribution_0.get_distribution_SMGL()
        float_0 = 2543.6439000980095
        bytes_1 = b'\x85S#H\xa0\xa3wi\xbf[\x12d\xfb\xe5\xfeR\xa7'
        var_2 = distribution_files_0.parse_distribution_file_SUSE(distribution_files_0, distribution_0, float_0, bytes_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ')'
        distribution_files_0 = module_0.DistributionFiles(str_0)
        list_0 = [distribution_files_0, distribution_files_0, str_0]
        int_0 = -1212
        distribution_fact_collector_0 = module_0.DistributionFactCollector(int_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector(list_0, distribution_fact_collector_0)
        distribution_0 = module_0.Distribution(distribution_fact_collector_1)
        str_1 = ')-'
        bytes_0 = b'~|h\x87\xc0m\xdd\x16\x0eRd,'
        var_0 = distribution_files_0.parse_distribution_file_NA(distribution_0, str_1, distribution_0, bytes_0)
        bool_0 = False
        tuple_0 = (bool_0, distribution_fact_collector_1)
        var_1 = distribution_files_0.parse_distribution_file_Slackware(distribution_fact_collector_1, str_0, distribution_files_0, tuple_0)
        var_2 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -2343.665
        bool_0 = True
        var_0 = module_0.get_uname(float_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = {}
        distribution_files_0 = module_0.DistributionFiles(var_0)
        str_0 = 'Mandriva'
        str_1 = '/etc/distro-release'
        var_1 = {}
        var_2 = distribution_files_0.parse_distribution_file_Mandriva(str_0, str_0, str_1, var_1)
        int_0 = 0
        str_2 = 'DISTRIB_ID=Ubuntu'
        var_3 = {}
        var_4 = dist_files.parse_distribution_file_Mandriva(str_0, str_2, str_1, var_3)[int_0]
    except BaseException:
        pass