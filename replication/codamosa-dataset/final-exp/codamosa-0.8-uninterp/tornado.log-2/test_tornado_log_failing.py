# Automatically generated by Pynguin.
import tornado.log as module_0
import logging as module_1

def test_case_0():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = log_formatter_0.format(log_formatter_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_2():
    try:
        optional_0 = None
        module_0.define_logging_options(optional_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2
        module_0.enable_pretty_logging(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 342
        any_0 = None
        module_0.enable_pretty_logging(any_0)
        module_0.define_logging_options(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.enable_pretty_logging()
        str_0 = '8Z_?P'
        str_1 = "Non-blocking HTTP client with no external dependencies.\n\n    This class implements an HTTP 1.1 client on top of Tornado's IOStreams.\n    Some features found in the curl-based AsyncHTTPClient are not yet\n    supported.  In particular, proxies are not supported, connections\n    are not reused, and callers cannot select the network interface to be\n    used.\n    "
        str_2 = '3C/#\r->Jq6x'
        bool_0 = False
        log_formatter_0 = module_0.LogFormatter(str_1, str_2, bool_0)
        float_0 = 545.8
        logger_0 = module_1.Logger(float_0)
        str_3 = "N'Kw[vBtN2L0h)m"
        str_4 = 'தமிழ்'
        bool_1 = False
        int_0 = -2591
        int_1 = 734
        int_2 = 1329
        dict_0 = {int_0: int_0, int_1: int_2, int_0: int_2}
        log_formatter_1 = module_0.LogFormatter(str_0, str_3, str_4, bool_1, dict_0)
        str_5 = log_formatter_1.format(log_formatter_0)
    except BaseException:
        pass

def test_case_6():
    try:
        optional_0 = None
        int_0 = 166
        float_0 = None
        logger_0 = module_1.Logger(float_0)
        bool_0 = None
        tuple_0 = (float_0, bool_0)
        bool_1 = False
        str_0 = None
        str_1 = ''
        int_1 = None
        log_record_0 = module_1.LogRecord(int_0, logger_0, tuple_0, bool_1, str_0, str_1, int_1)
        module_0.enable_pretty_logging(optional_0, log_record_0)
    except BaseException:
        pass

def test_case_7():
    try:
        none_type_0 = None
        bool_0 = None
        str_0 = None
        optional_0 = None
        str_1 = ']8Aa/Or~'
        logger_0 = module_1.Logger(str_1)
        module_0.enable_pretty_logging(optional_0, logger_0)
        log_formatter_0 = module_0.LogFormatter(str_0)
        list_0 = [bool_0, bool_0, bool_0, log_formatter_0]
        module_0.enable_pretty_logging(none_type_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        module_0.enable_pretty_logging()
        bytes_0 = b'\\\x0f1|x\x819\xed^'
        float_0 = -129.092
        int_0 = 1209
        stream_handler_0 = module_1.StreamHandler()
        str_0 = '4;Jd8t\t(en/Gm'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: float_0, str_0: stream_handler_0}
        log_record_0 = module_1.LogRecord(bytes_0, float_0, int_0, float_0, stream_handler_0, bytes_0, dict_0, stream_handler_0)
        log_formatter_0 = module_0.LogFormatter(str_0)
        str_1 = log_formatter_0.format(log_record_0)
    except BaseException:
        pass