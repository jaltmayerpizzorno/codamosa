# Automatically generated by Pynguin.
import pytutils.trees as module_0
import collections as module_1

def test_case_0():
    try:
        str_0 = 'a'
        var_0 = module_0.get_tree_node(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bool_0 = True
        var_0 = module_0.set_tree_node(str_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ' pKPw.|m6ky;YNZ+'
        registry_tree_0 = None
        bytes_0 = b'\xde\x8d\xfe%d.'
        tree_0 = module_0.Tree()
        var_0 = tree_0.__setitem__(registry_tree_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 1410.06
        bytes_0 = b'\xf1\xd2\x90CD\xef\x96\x8e\xf4`\xeaxr'
        tree_0 = module_0.Tree(float_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(tree_0)
    except BaseException:
        pass

def test_case_5():
    try:
        defaultdict_0 = None
        tree_0 = None
        bool_0 = True
        tree_1 = module_0.Tree()
        var_0 = tree_1.__getitem__(defaultdict_0, tree_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        str_0 = None
        tree_0 = module_0.Tree()
        var_0 = tree_0.__setitem__(bool_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        float_0 = 1777.2
        bytes_0 = b'\x8bp6\xaa\xb9\xa7'
        registry_tree_0 = module_0.RegistryTree(float_0, bytes_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'M'
        str_1 = 'tInx+9(1'
        defaultdict_0 = module_1.defaultdict()
        float_0 = 425.06247
        var_0 = module_0.get_tree_node(str_0, str_1, defaultdict_0, float_0)
    except BaseException:
        pass