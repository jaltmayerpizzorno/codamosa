# Automatically generated by Pynguin.
import ansible.utils.collection_loader._collection_finder as module_0

def test_case_0():
    try:
        float_0 = -534.068503
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ansible_collections.ns.coll'
        ansible_collection_loader_0 = module_0._AnsibleCollectionLoader(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Ht@9'
        ansible_collection_n_s_pkg_loader_0 = module_0._AnsibleCollectionNSPkgLoader(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -2914.0
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        bytes_0 = b'\t\xce\x9c\x18\x18\xdc\xacs4\xd6\xde\xc7mO'
        dict_0 = {bytes_0: bytes_0}
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(dict_0, float_0)
        str_0 = '\tIzQunVcfpT'
        ansible_collection_pkg_loader_0 = module_0._AnsibleCollectionPkgLoader(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ansible.module_utils.baic.pwd'
        ansible_internal_redirect_loader_0 = module_0._AnsibleInternalRedirectLoader(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '=am[space.collectionnam~'
        var_0 = None
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, var_0, str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'n.ol'
        str_1 = 'role'
        str_2 = 'resourc'
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, str_0, str_2, str_1)
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder(ansible_collection_ref_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -1118.06
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        tuple_0 = ()
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(tuple_0, float_0)
        ansible_collection_pkg_loader_0 = None
        str_0 = '\t'
        ansible_collection_finder_1 = module_0._AnsibleCollectionFinder(str_0)
        ansible_collection_pkg_loader_1 = module_0._AnsibleCollectionPkgLoader(ansible_collection_pkg_loader_0, ansible_collection_finder_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "w' )er "
        ansible_internal_redirect_loader_0 = module_0._AnsibleInternalRedirectLoader(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'namespace.collectionname'
        str_1 = 'resource'
        str_2 = 'module'
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, str_0, str_1, str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        list_0 = []
        str_0 = 'H'
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(ansible_collection_finder_0, list_0, str_0, ansible_collection_finder_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ansible.plugins.action'
        set_0 = {str_0, ansible_collection_finder_0, str_0}
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(set_0, set_0)
        var_0 = ansible_path_hook_finder_0.iter_modules(ansible_collection_finder_0)
        var_1 = ansible_collection_finder_0.find_module(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = '\\'
        dict_0 = {}
        bytes_0 = b'\x9bte.Y\xf6\xcd\xf253Y\xad\x9d\x1e\xc9\xf4'
        var_0 = ansible_collection_finder_0.set_playbook_paths(bytes_0)
        var_1 = ansible_collection_finder_0.set_playbook_paths(dict_0)
        var_2 = ansible_collection_finder_0.find_module(str_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(ansible_collection_finder_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '31g{\x0c3!&L%Bu8NsdiU\x0b'
        ansible_collection_root_pkg_loader_0 = None
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder(str_0, ansible_collection_root_pkg_loader_0)
        ansible_collection_root_pkg_loader_1 = module_0._AnsibleCollectionRootPkgLoader(ansible_collection_finder_0)
    except BaseException:
        pass

def test_case_14():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ansible.plugins.action'
        var_0 = ansible_collection_finder_0.find_module(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'ns.coll'
        str_1 = 'role'
        str_2 = 'r#source'
        list_0 = [str_2, str_0, str_2, str_2, str_2, str_0]
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(list_0, str_1)
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, str_0, str_2, str_1)
        str_3 = 'hn\\Pv'
        bytes_0 = None
        tuple_0 = (str_3, bytes_0, ansible_path_hook_finder_0, str_3)
        var_0 = ansible_collection_ref_0.is_valid_fqcr(tuple_0)
        int_0 = 1280
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'n.ol'
        str_1 = 'role'
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, str_0, str_1, str_1)
        int_0 = 3799
        var_0 = ansible_collection_ref_0.legacy_plugin_dir_to_plugin_type(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'ns.coll'
        str_1 = 'role'
        str_2 = 'resource'
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, str_0, str_2, str_1)
        var_0 = ansible_collection_ref_0.legacy_plugin_dir_to_plugin_type(ansible_collection_ref_0)
    except BaseException:
        pass