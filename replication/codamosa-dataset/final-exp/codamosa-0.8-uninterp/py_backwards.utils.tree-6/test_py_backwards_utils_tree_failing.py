# Automatically generated by Pynguin.
import py_backwards.utils.tree as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        a_s_t_0 = None
        tuple_0 = module_0.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_1():
    try:
        a_s_t_0 = module_1.AST()
        a_s_t_1 = module_0.get_parent(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1631
        a_s_t_0 = module_1.AST()
        module_0.insert_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_3():
    try:
        a_s_t_0 = module_1.AST()
        str_0 = 'Q;WfFadQ(@9o7_&'
        iterable_0 = module_0.find(a_s_t_0, str_0)
        int_0 = 2260
        a_s_t_1 = None
        list_0 = [a_s_t_1, a_s_t_0]
        module_0.replace_at(int_0, a_s_t_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        a_s_t_0 = module_1.AST()
        list_0 = []
        var_0 = module_0.get_closest_parent_of(a_s_t_0, a_s_t_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -569
        a_s_t_0 = None
        list_0 = []
        module_0.insert_at(int_0, a_s_t_0, list_0)
        dict_0 = {}
        a_s_t_1 = module_1.AST(**dict_0)
        a_s_t_2 = module_0.get_parent(a_s_t_1, a_s_t_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'if True:\n        x = 1\n    '
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        tuple_0 = module_0.get_non_exp_parent_and_index(var_0, var_1)
        var_2 = int_0.body[int_0]
    except BaseException:
        pass