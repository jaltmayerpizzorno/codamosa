# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        list_0 = None
        bool_0 = False
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(list_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data()
        bytes_0 = b'\xae.\xb1\xfc\xc9\xe1\\\x82\xc3M\xd3\xff'
        var_1 = module_0.resolve_path(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '9|`'
        config_manager_0 = module_0.ConfigManager(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.find_ini_config_file()
        str_0 = 'test_path'
        config_manager_0 = module_0.ConfigManager()
        str_1 = 'test_plugin_type'
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(str_1, str_0, str_0)
        bool_0 = True
        var_2 = config_manager_0.get_configuration_definitions(str_1, str_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        str_0 = 'put'
        config_manager_0 = module_0.ConfigManager(bool_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        plugin_0 = None
        list_0 = [plugin_0, plugin_0]
        set_0 = {plugin_0}
        bool_0 = True
        setting_0 = None
        tuple_0 = (setting_0,)
        tuple_1 = (set_0, bool_0, set_0, tuple_0)
        tuple_2 = (list_0, tuple_1)
        str_0 = None
        dict_0 = {str_0: plugin_0}
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_vars(tuple_2, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n# This plugin is not intended for direct use; it is a fallback mechanism for automatic whitelisting of\n# all installed inventory plugins.\n'
        set_0 = {str_0}
        bytes_0 = b'(4\xc3\x9b\xa8@\xaa6\xb3\xcf3z\xbf'
        var_0 = module_0.resolve_path(set_0, bytes_0)
        float_0 = 55.0
        str_1 = '")ft\x0bh!,WuV^YZ~|'
        str_2 = 'AY2<Nv"\n\x0cIH]k'
        dict_0 = {str_1: str_0, str_0: var_0, str_2: set_0}
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_configuration_definition(float_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        str_1 = 'test_path'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(str_0, str_1, str_1)
        bool_0 = True
        var_1 = config_manager_0.get_configuration_definitions(str_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'test_path'
        config_manager_0 = module_0.ConfigManager()
        set_0 = set()
        var_0 = config_manager_0.get_config_value(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        config_manager_0 = module_0.ConfigManager(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'included task files must contain a list of tasks'
        bytes_0 = None
        var_0 = module_0.ensure_type(config_manager_0, str_0, bytes_0)
        config_manager_1 = module_0.ConfigManager(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager(bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = None
        int_0 = 1647
        float_0 = -2906.46643
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'none'
        var_0 = config_manager_0.get_configuration_definition(list_0, str_0)
        str_1 = None
        str_2 = 'Y=H><i-E5D&'
        str_3 = 'IJu}7,2xg'
        dict_0 = {str_0: config_manager_0, str_3: int_0, str_3: float_0}
        str_4 = '.\r3c`eHo\\JR`,$6|s\t'
        dict_1 = {str_1: float_0, str_2: dict_0, str_4: list_0}
        var_1 = config_manager_0.update_config_data(dict_1)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = None
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'none'
        var_0 = config_manager_0.get_configuration_definition(list_0, str_0)
        float_0 = None
        int_0 = 2954
        var_1 = config_manager_0.get_plugin_vars(float_0, int_0)
        bool_0 = True
        bool_1 = False
        var_2 = module_0.get_ini_config_value(bool_0, bool_1)
        list_1 = []
        config_manager_1 = module_0.ConfigManager(list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'T('
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definition(str_0)
        dict_0 = None
        complex_0 = None
        int_0 = -1339
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(dict_0, complex_0, int_0)
        list_0 = None
        dict_1 = {}
        setting_0 = module_0.Setting(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = None
        set_0 = None
        config_manager_0 = module_0.ConfigManager()
        float_0 = 2705.5953
        dict_0 = {config_manager_0: list_0, float_0: set_0, float_0: config_manager_0}
        var_0 = module_0.get_ini_config_value(config_manager_0, dict_0)
        str_0 = 'yH3f/\rMO\n'
        config_manager_1 = module_0.ConfigManager()
        var_1 = config_manager_1.get_plugin_options(list_0, set_0, str_0)
        plugin_0 = module_0.Plugin()
    except BaseException:
        pass

def test_case_16():
    try:
        list_0 = None
        list_1 = [list_0, list_0, list_0, list_0, list_0]
        setting_0 = None
        str_0 = '}+jo6 gq\x0c'
        str_1 = 'EUeBr*IwAb3V'
        dict_0 = {str_0: setting_0, str_0: setting_0, str_0: list_1, str_1: list_0}
        int_0 = 1647
        float_0 = -2906.46643
        tuple_0 = (str_0, str_0, int_0, float_0)
        var_0 = module_0.get_ini_config_value(dict_0, tuple_0)
        config_manager_0 = module_0.ConfigManager()
        str_2 = 'none'
        var_1 = config_manager_0.get_configuration_definition(list_0, str_2)
        tuple_1 = None
        bytes_0 = b'/\x1f\x06\xc4\x1b\xa6\x8f\x06'
        var_2 = config_manager_0.get_config_value_and_origin(tuple_1, dict_0, bytes_0, bytes_0, dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        list_0 = None
        config_manager_0 = module_0.ConfigManager(list_0)
        config_manager_1 = module_0.ConfigManager()
        tuple_0 = None
        str_0 = 'P7D'
        var_0 = config_manager_1.get_config_value(config_manager_0, tuple_0, str_0, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'"\xc6z}%y\xb8\xd7\xcd%hM\x84z\xcbv#'
        var_0 = config_manager_0.update_config_data(bytes_0)
    except BaseException:
        pass

def test_case_19():
    try:
        config_manager_0 = module_0.ConfigManager()
        list_0 = None
        str_0 = '!\x0b~'
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.update_config_data(list_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        complex_0 = None
        float_0 = 1923.7
        var_0 = module_0.get_ini_config_value(complex_0, float_0)
        str_0 = '0\n|8Y"4'
        config_manager_0 = module_0.ConfigManager()
        tuple_0 = (config_manager_0, str_0)
        var_1 = module_0.resolve_path(tuple_0)
        dict_0 = {str_0: complex_0}
        list_0 = []
        var_2 = config_manager_0.get_plugin_options(list_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'none'
        int_0 = -1048
        bool_0 = True
        bytes_0 = None
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(str_0, bool_0, bytes_0)
        var_1 = config_manager_0.get_plugin_vars(str_0, int_0)
        float_0 = None
        var_2 = config_manager_0.get_plugin_vars(float_0, int_0)
        bool_1 = True
        var_3 = module_0.get_ini_config_value(bool_1, bool_0)
        list_0 = []
        config_manager_1 = module_0.ConfigManager(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '/path/to/file.ini'
        var_0 = module_0.get_config_type(str_0)
        str_1 = '/path/to/file.yaml'
        var_1 = module_0.get_config_type(str_1)
        str_2 = '/path/to/file'
        var_2 = module_0.get_config_type(str_2)
    except BaseException:
        pass

def test_case_23():
    try:
        tuple_0 = ()
        bytes_0 = b'\xc6\xd0\xc2\x0c\xfc\xd8[AC\x04\x88\xf3\x1b\xb62\x1d'
        int_0 = 3729
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(tuple_0, bytes_0, int_0)
        bytes_1 = b'?>\xb1'
        dict_0 = {}
        bool_0 = False
        var_1 = config_manager_0.get_configuration_definition(bytes_1, dict_0, bool_0)
    except BaseException:
        pass