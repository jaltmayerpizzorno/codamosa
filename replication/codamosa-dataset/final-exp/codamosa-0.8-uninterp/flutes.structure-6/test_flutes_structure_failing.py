# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        bool_0 = False
        var_0 = module_0.no_map_instance(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'd*A(al=W/MUpbCj'
        bool_0 = True
        list_0 = []
        tuple_0 = (str_0, bool_0, list_0)
        var_0 = module_0.no_map_instance(tuple_0)
        str_1 = 'nbH!$lIq\nVGnadgwE'
        var_1 = module_0.map_structure_zip(str_1, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        int_0 = -2975
        dict_0 = {var_0: int_0, var_0: int_0}
        float_0 = -3063.0
        str_0 = "+%%.m'w<B~sC9"
        list_0 = [dict_0, float_0, int_0]
        var_1 = module_0.map_structure(str_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        bool_0 = False
        tuple_0 = (bool_0,)
        var_0 = module_0.map_structure(list_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 3051
        var_0 = module_0.map_structure(int_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'i^Ig0ks'
        dict_0 = None
        set_0 = {str_0, str_0, dict_0}
        var_0 = None
        list_0 = [set_0, var_0]
        var_1 = module_0.map_structure_zip(str_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        bytes_0 = b'\xafRt\x7f'
        var_0 = module_0.map_structure_zip(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        int_0 = -2975
        dict_0 = {var_0: int_0, var_0: int_0}
        list_0 = module_0.reverse_map(dict_0)
        bool_0 = True
        str_0 = "(03p[$-gKt7V@r;}u'%"
        var_1 = module_0.map_structure_zip(bool_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        set_0 = None
        list_0 = []
        str_0 = ' Q:5+t'
        int_0 = 3
        var_0 = module_0.no_map_instance(str_0)
        tuple_0 = (set_0, list_0)
        var_1 = module_0.no_map_instance(tuple_0)
        str_1 = None
        str_2 = 'h6a\x0c9cR,\x0b='
        tuple_1 = (list_0, int_0, str_1, str_2)
        module_0.register_no_map_class(set_0)
        str_3 = ''
        tuple_2 = (tuple_1, str_3, list_0, list_0)
        var_2 = None
        int_1 = -263
        int_2 = None
        dict_0 = {var_2: int_0, var_2: int_1, var_2: int_2}
        list_1 = module_0.reverse_map(dict_0)
        var_3 = module_0.map_structure(tuple_2, tuple_2)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        str_0 = 'Range'
        tuple_0 = ()
        var_0 = module_0.map_structure(str_0, tuple_0)
        var_1 = module_0.no_map_instance(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'a'
        int_0 = 1
        int_1 = 2
        int_2 = [int_0, int_1]
        set_0 = set()
        var_0 = module_0.no_map_instance(set_0)
        var_1 = module_0.map_structure(str_0, set_0)
        int_3 = 3
        int_4 = 4
        int_5 = [int_3, int_4]
        int_6 = [int_2, int_5]
        int_7 = {str_0: int_6}
        var_2 = module_0.map_structure(int_2, int_7)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 0.0
        var_0 = module_0.no_map_instance(float_0)
        dict_0 = {var_0: float_0, float_0: float_0, float_0: float_0}
        list_0 = [dict_0, var_0, var_0]
        list_1 = [list_0]
        var_1 = module_0.map_structure_zip(float_0, list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x82,S\xac'
        bool_0 = True
        str_0 = 'T'
        tuple_0 = (bytes_0, bool_0, str_0)
        list_0 = [tuple_0, tuple_0, bool_0, str_0]
        var_0 = module_0.map_structure_zip(tuple_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -3540.7817
        set_0 = {float_0, float_0, float_0}
        var_0 = module_0.map_structure(float_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        int_0 = 1
        int_1 = 2
        int_2 = [int_0, int_1]
        tuple_0 = ()
        var_0 = module_0.no_map_instance(tuple_0)
        int_3 = 3
        bool_0 = False
        var_1 = module_0.map_structure(bool_0, tuple_0)
        int_4 = 4
        int_5 = [int_3, int_4]
        int_6 = [int_2, int_5]
        var_2 = lambda x, y: x + y
        var_3 = module_0.map_structure_zip(var_2, int_6)
        var_4 = None
        var_5 = lambda *x: collections.namedtuple(var_8, x)(*x)
        list_1 = [var_0, var_4]
        var_6 = module_0.map_structure(tuple_0, list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        type_0 = None
        module_0.register_no_map_class(type_0)
        bytes_0 = b'J1\xd4\x92d\x95,\xaefzO\xfd\x13\x05\x0f\xa6*U'
        list_0 = None
        tuple_0 = (list_0,)
        tuple_1 = (tuple_0,)
        var_0 = module_0.map_structure_zip(bytes_0, tuple_1)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -1922
        dict_0 = {}
        tuple_0 = (dict_0,)
        var_0 = module_0.map_structure(int_0, tuple_0)
        dict_1 = {}
        list_0 = module_0.reverse_map(dict_1)
        int_1 = 1
        int_2 = 2
        int_3 = [int_1, int_2]
        tuple_1 = ()
        int_4 = 3
        bool_0 = False
        var_1 = module_0.map_structure(bool_0, tuple_1)
        int_5 = 4
        int_6 = [int_4, int_5]
        int_7 = [int_3, int_6]
        var_2 = lambda x, y: x + y
        var_3 = module_0.map_structure_zip(var_2, int_7)
        var_4 = None
        var_5 = lambda *x: collections.namedtuple(var_8, x)(*x)
        list_1 = [var_5, var_4]
        var_6 = module_0.map_structure(tuple_1, list_1)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 1
        int_1 = 2
        int_2 = [int_0, int_1]
        tuple_0 = ()
        var_0 = module_0.no_map_instance(tuple_0)
        int_3 = 3
        bool_0 = False
        var_1 = module_0.map_structure(bool_0, tuple_0)
        int_4 = 4
        int_5 = [int_3, int_0, int_4]
        int_6 = [int_2, int_5]
        var_2 = lambda x, y: x + y
        var_3 = module_0.map_structure_zip(var_2, int_6)
        str_0 = '~F\r|\x0c|{`^>^>@Xot=)3'
        list_0 = [tuple_0]
        var_4 = module_0.map_structure_zip(list_0, list_0)
        module_0.register_no_map_class(str_0)
        bool_1 = True
        module_0.register_no_map_class(bool_1)
        str_1 = 'tC9]y'
        var_5 = None
        list_1 = [var_5]
        var_6 = module_0.map_structure(str_1, list_1)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 2
        int_1 = [int_0, int_0]
        tuple_0 = ()
        var_0 = module_0.no_map_instance(tuple_0)
        int_2 = 3
        bool_0 = False
        var_1 = module_0.map_structure(bool_0, tuple_0)
        int_3 = 4
        int_4 = [int_2, int_3]
        int_5 = [int_1, int_4]
        var_2 = lambda x, y: x + y
        var_3 = module_0.map_structure_zip(var_2, int_5)
        list_0 = [var_0, tuple_0]
        var_4 = module_0.map_structure_zip(list_0, list_0)
    except BaseException:
        pass