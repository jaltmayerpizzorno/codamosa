# Automatically generated by Pynguin.
import tornado.locale as module_0
import datetime as module_1
import gettext as module_2

def test_case_0():
    try:
        locale_0 = module_0.get()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        module_0.load_gettext_translations(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        module_0.load_translations(str_0)
        list_0 = [str_0]
        locale_0 = module_0.get(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '_start_select'
        str_1 = "k\x0b-%P8'\\,Pp\x0cx\x0c sBD$F"
        str_2 = None
        list_0 = [str_0, str_1, str_2]
        locale_0 = module_0.get(*list_0)
        str_3 = 'FBn2Cd#KpmQ~"2p%&'
        locale_1 = module_0.Locale(str_3)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '1#9e+xB:ZK\x0b@@fpf]-6'
        str_1 = '\r#4f4v'
        list_0 = [str_0]
        locale_0 = module_0.get(*list_0)
        str_2 = locale_0.pgettext(str_0, str_1)
        locale_1 = module_0.Locale(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        iterable_0 = module_0.get_supported_locales()
        str_0 = '5xb:ol\x0bx#RvEoK'
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        datetime_0 = None
        str_0 = 'KkDR9|H3Q'
        list_0 = [str_0]
        locale_0 = module_0.get(*list_0)
        bool_0 = locale_0.format_day(datetime_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        module_0.load_translations(str_0)
        list_0 = [str_0, str_0]
        locale_0 = module_0.get(*list_0)
        str_1 = locale_0.list(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'w?ja(U=1,8;r*n\r+{eY'
        str_1 = '5dnJ.'
        str_2 = ''
        int_0 = None
        locale_0 = module_0.get()
        str_3 = '?z>\r2A_{'
        str_4 = "L1}ll'U"
        str_5 = "p'VX;pwnIiuy!A#x"
        dict_0 = {str_1: str_5}
        str_6 = 'u?211D}'
        dict_1 = {str_4: dict_0, str_6: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_3, dict_1)
        str_7 = locale_0.list(str_2)
        str_8 = locale_0.friendly_number(int_0)
        dict_2 = {str_0: str_0, str_1: str_1, str_2: str_0}
        datetime_0 = module_1.datetime(**dict_2)
    except BaseException:
        pass

def test_case_9():
    try:
        locale_0 = module_0.get()
        str_0 = None
        module_0.set_default_locale(str_0)
        int_0 = 3458
        str_1 = locale_0.friendly_number(int_0)
        module_0.load_translations(str_0)
        str_2 = '\tP'
        int_1 = 1528
        str_3 = locale_0.friendly_number(int_1)
        module_0.load_translations(str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2484
        list_0 = []
        locale_0 = module_0.get(*list_0)
        str_0 = locale_0.friendly_number(int_0)
        str_1 = 'Z|\x0bJ\t*'
        locale_1 = module_0.Locale(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'w^y/ehk#Mh'
        str_1 = 'e`DD7>0\\\tD!"k{Sko['
        list_0 = [str_0, str_0, str_0, str_1]
        str_2 = '&'
        str_3 = ':\nu)S<,)wN@Fi'
        str_4 = '/v``\x0b/1m-p&R'
        str_5 = 'I#of-I)'
        dict_0 = {str_1: str_4, str_0: str_5, str_5: str_3}
        dict_1 = {str_3: dict_0, str_1: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_4, dict_1)
        str_6 = c_s_v_locale_0.pgettext(str_0, str_2)
        locale_0 = module_0.get(*list_0)
        locale_1 = module_0.get()
        str_7 = locale_0.list(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'wb_LzELp'
        str_1 = ")\x0b'?"
        dict_0 = {}
        null_translations_0 = module_2.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_0, null_translations_0)
        str_2 = gettext_locale_0.translate(str_1, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'm'
        int_0 = -3111
        str_1 = "Adds `state` (IOLoop.{READ,WRITE} flags) to our event handler.\n\n        Implementation notes: Reads and writes have a fast path and a\n        slow path.  The fast path reads synchronously from socket\n        buffers, while the slow path uses `_add_io_state` to schedule\n        an IOLoop callback.\n\n        To detect closed connections, we must have called\n        `_add_io_state` at some point, but we want to delay this as\n        much as possible so we don't have to set an `IOLoop.ERROR`\n        listener that will be overwritten by the next slow-path\n        operation. If a sequence of fast-path ops do not end in a\n        slow-path op, (e.g. for an @asynchronous long-poll request),\n        we must add the error handler.\n\n        TODO: reevaluate this now that callbacks are gone.\n\n        "
        null_translations_0 = module_2.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_1, null_translations_0)
        str_2 = gettext_locale_0.pgettext(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "%E$\x0bu'U`V:Q?vM&g)%W"
        str_1 = '%)?<'
        str_2 = 'SERVER_NAME'
        dict_0 = {}
        str_3 = 'H\\Eo"+$'
        str_4 = "\ndH\x0c4%esa\rA<M]*a<%'6"
        dict_1 = {str_4: str_1}
        dict_2 = {str_2: dict_0, str_3: dict_1}
        c_s_v_locale_0 = module_0.CSVLocale(str_1, dict_2)
        str_5 = c_s_v_locale_0.translate(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        str_1 = ''
        float_0 = -3663.93386
        str_2 = '\rJkYBy-t'
        str_3 = '%2t3AV~'
        str_4 = '\\!>2B5'
        str_5 = "K\x0clE'6=m\r"
        str_6 = 'openid.ax.mode'
        dict_0 = {str_2: str_3, str_4: str_2, str_4: str_5, str_4: str_6}
        dict_1 = {str_2: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_2, dict_1)
        null_translations_0 = module_2.NullTranslations(c_s_v_locale_0)
        gettext_locale_0 = module_0.GettextLocale(str_2, null_translations_0)
        str_7 = gettext_locale_0.translate(str_0, str_1, float_0)
        str_8 = 'R4$}pUw^)/]?wQ'
        locale_0 = module_0.Locale(str_8)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'T,zYy0s,uUnr\x0c'
        module_0.set_default_locale(str_0)
        locale_0 = module_0.get()
        bool_0 = True
        int_0 = None
        str_1 = locale_0.format_date(int_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'fa_IR'
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        str_1 = "6M\tTV&%hAu'[4,8"
        str_2 = 'UbvMfU=[;\tkuvl\r>kS0'
        str_3 = 'm&^Ss'
        dict_0 = {}
        dict_1 = {str_3: dict_0, str_0: dict_0}
        int_0 = 3458
        module_0.load_translations(str_0)
        int_1 = 491
        str_4 = '}|[?k<\npz'
        c_s_v_locale_0 = module_0.CSVLocale(str_1, dict_1)
        null_translations_0 = module_2.NullTranslations(c_s_v_locale_0)
        gettext_locale_0 = module_0.GettextLocale(str_3, null_translations_0)
        str_5 = None
        str_6 = c_s_v_locale_0.translate(str_5)
        str_7 = gettext_locale_0.translate(str_3)
        locale_0 = module_0.get()
        str_8 = locale_0.format_date(int_1)
        null_translations_1 = module_2.NullTranslations()
        gettext_locale_1 = module_0.GettextLocale(str_4, null_translations_1)
        str_9 = gettext_locale_1.pgettext(str_4, str_4, str_0)
        float_0 = -802.493994
        bool_0 = False
        bool_1 = True
        str_10 = locale_0.format_date(float_0, int_0, bool_0, bool_1, bool_1)
        str_11 = 'OPO|KbQDFJ'
        str_12 = c_s_v_locale_0.pgettext(str_11, str_3, str_11, int_1)
        str_13 = 'xWR#'
        str_14 = '\x0bN?83\\1r"\'="X*DDb{'
        c_s_v_locale_1 = module_0.CSVLocale(str_2, dict_1)
        str_15 = '%_UJpp89'
        str_16 = c_s_v_locale_1.pgettext(str_13, str_15)
        str_17 = gettext_locale_1.pgettext(str_14, str_0)
        str_18 = locale_0.list(str_4)
        module_0.load_gettext_translations(str_0, str_16)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = None
        str_1 = "6h\tTV&u'[4,"
        str_2 = 'UbvMfU=[;\tkuvl\r>kS0'
        str_3 = 'response_type'
        dict_0 = {}
        dict_1 = {str_3: dict_0, str_0: dict_0}
        module_0.load_translations(str_0)
        int_0 = 1
        str_4 = '3'
        str_5 = '}|[?k<\npz'
        list_0 = [str_4, str_0]
        locale_0 = module_0.get(*list_0)
        str_6 = locale_0.friendly_number(int_0)
        locale_1 = module_0.get()
        str_7 = ''
        c_s_v_locale_0 = module_0.CSVLocale(str_7, dict_1)
        str_8 = locale_1.format_date(int_0)
        str_9 = locale_0.list(str_1)
        null_translations_0 = module_2.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_5, null_translations_0)
        str_10 = gettext_locale_0.pgettext(str_4, str_4, str_0)
        str_11 = "Set the no-dlay flag for this stream.\n\n        By default, small messages may be delayed and/or combined to minim.ze\n        the number of paUkets sent.  This can sometimes ause 200-500ms delays\n        due to the interaction between Nagle's algorithm and TCP delayed\n        ACKs.  To reduce this delay (at the expense of posibly increasing\n        bandwidth usage), call ``self.set_no\nelay(True)`` once the websocket\n        connection is established.\n\n        See `.BaseIOStream.set_nodelay` for additional details.\n\n        .. versionadded:: 3.1\n        "
        float_0 = None
        var_0 = null_translations_0.set_output_charset(float_0)
        str_12 = locale_1.pgettext(str_3, str_11, str_2, int_0)
        str_13 = gettext_locale_0.pgettext(str_4, str_9, str_1, int_0)
        module_0.set_default_locale(str_11)
        str_14 = locale_0.format_date(int_0)
        int_1 = -487
        str_15 = locale_1.list(str_2)
        int_2 = -786
        str_16 = locale_1.friendly_number(int_2)
        str_17 = locale_1.friendly_number(int_1)
        locale_2 = module_0.get()
        str_18 = None
        module_0.load_gettext_translations(str_18, str_10)
    except BaseException:
        pass