

# Generated at 2022-06-13 01:16:53.530745
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    """
    Constructor for class AIXNetworkCollector
    """
    my_obj = AIXNetworkCollector()
    assert my_obj


# Generated at 2022-06-13 01:17:00.877888
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    module = FakeAnsibleModule()
    module.params['route_path'] = '/usr/bin/netstat'

# Generated at 2022-06-13 01:17:10.120303
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
    """Unit test for method get_interfaces_info of class AIXNetwork."""
    # This call is exactly the same as the one made from ansible module.
    # The method get_interfaces_info(...) returns two dictionaries.
    # We will be checking their contents.
    #
    #   Generated by calling:
    #      rc, out, err = self.module.run_command([ifconfig_path, ifconfig_options])
    #
    #   In this case:
    #      ifconfig_path = '/usr/sbin/ifconfig'
    #      ifconfig_options = '-a'
    #
    #   Which was called by:
    #      returned_interfaces, returned_ips = self.get_interfaces_info(ifconfig_path, ifconfig_options)
    #

# Generated at 2022-06-13 01:17:23.195041
# Unit test for method get_interfaces_info of class AIXNetwork

# Generated at 2022-06-13 01:17:34.456533
# Unit test for method get_default_interfaces of class AIXNetwork

# Generated at 2022-06-13 01:17:42.015910
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
    from ansible.module_utils.facts.network.aix import AIXNetwork
    class XModule:
        def __init__(self, run_command_ex_result):
            self.run_command_ex_result = run_command_ex_result
            self.DEBUG = True
        def fail_json(self, **msg):
            print('fail_json called')
        def warn(self, msg):
            print('warn called: %s' % msg)
        def get_bin_path(self, cmd, required=False):
            if cmd == 'ifconfig':
                return '/usr/sbin/ifconfig'
            else:
                print('get_bin_path called with unknown command: %s' % cmd)

# Generated at 2022-06-13 01:17:53.983578
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
  platform='AIX'
  module_path = None
  module = dict(run_command=run_command)
  options = '-a'
  fact_class = AIXNetwork
  fact_class.module = module
  # Prepare mock data
  ifconfig_path = '/usr/bin/ifconfig'

  # Execute test
  ips, interfaces = fact_class.get_interfaces_info(ifconfig_path, options)

  # Check result
  assert len(interfaces.keys()) == 3
  assert interfaces['en0']['macaddress'] == '00:11:22:33:44:55'
  assert interfaces['en0']['mtu'] == '1500'
  assert interfaces['en1']['device'] == 'en1'

# Generated at 2022-06-13 01:18:02.836436
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    # Set up a module, a fake command and mocks
    class MockModule(object):
        def __init__(self, params):
            self.params = params
            self.command_results = {}

        def set_command_result(self, command, rc, out, err):
            self.command_results[command] = dict(rc=rc, out=out, err=err)

        def get_bin_path(self, path, opt_dirs=[]):
            return path

        def run_command(self, args, check_rc=True, close_fds=True):
            command = args[0]
            try:
                result = self.command_results[command]
            except KeyError:
                raise Exception("Unexpected command " + command)
            return result['rc'], result['out'], result['err']

# Generated at 2022-06-13 01:18:05.129348
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    aix_network_collector = AIXNetworkCollector()
    assert aix_network_collector.platform == 'AIX'
    assert aix_network_collector._fact_class == AIXNetwork

# Generated at 2022-06-13 01:18:13.191854
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    collector = AIXNetworkCollector()
    assert collector.facts['ansible_all_ipv4_addresses'] == []
    assert collector.facts['ansible_all_ipv6_addresses'] == []
    assert collector.facts['ansible_default_ipv4'] == dict()
    assert collector.facts['ansible_default_ipv6'] == dict()
    assert collector.facts['ansible_interfaces'] == []
    assert collector.facts['ansible_machine'] == 'PowerNV'
    assert collector.facts['ansible_nodename'] == 'localhost'
    assert collector.facts['ansible_os_family'] == 'AIX'


# Generated at 2022-06-13 01:18:26.698171
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    module = AnsibleModule(argument_spec={})
    network_collector = AIXNetworkCollector(module, subclasses=[AIXNetworkCollector])
    assert network_collector is not None

# Generated at 2022-06-13 01:18:39.038380
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    net = AIXNetwork()
    net.module.run_command = _fake_run_command
    net.module.get_bin_path = lambda x: '/usr/bin/netstat'
    net.module.params = {}

    routes = '''Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 en0
0.0.0.0         192.168.0.1     0.0.0.0         UG    0      0        0 en0
'''
    (rc, out, err) = _fake_run_command(['netstat', '-nr'], routes)
    (ipv4, ipv6) = net.get_

# Generated at 2022-06-13 01:18:43.666588
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    aixif = AIXNetwork()
    interface = dict(v4={}, v6={})

    interface_v4, interface_v6 = aixif.get_default_interfaces("/sbin/route")
    interface['v4']['interface'] = "en0"
    interface['v4']['gateway'] = "10.228.224.1"
    interface['v6']['interface'] = "en0"
    interface['v6']['gateway'] = "fe80::3a98:8fff:feb3:c3d2%2"

    assert interface_v4['gateway'] == interface['v4']['gateway']
    assert interface_v4['interface'] == interface['v4']['interface']

# Generated at 2022-06-13 01:18:54.335636
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
    from ansible.module_utils.facts import Network
    net = Network()

    #Create an instance of AIXNetwork
    aixnetwork = AIXNetwork()

    rc, out, err = net.module.run_command(['cat', './test/unit/ansible_collections/ansible/community/plugins/module_utils/network/facts/aix_ifconfig.out'])

    #Test get_interfaces_info method
    test_interfaces_info, test_ips_info = aixnetwork.get_interfaces_info(ifconfig_path='ifconfig', ifconfig_options='-a')
    #assert True
    assert len(test_interfaces_info) == 4
    for devices in test_interfaces_info:
        assert test_interfaces_info[devices]['device'] == 'en0' or test

# Generated at 2022-06-13 01:19:00.689835
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
    module = AnsibleModule(
        argument_spec=dict(),
        supports_check_mode=True)
    ifconfig_path = module.get_bin_path('/usr/sbin/ifconfig')
    if ifconfig_path is None:
        module.fail_json(msg='ifconfig command not found')
    aix_net = AIXNetwork(module)
    result = aix_net.get_interfaces_info(ifconfig_path)
    assert result is not None


if __name__ == '__main__':
    from ansible.module_utils.basic import AnsibleModule

    test_AIXNetwork_get_interfaces_info()

# Generated at 2022-06-13 01:19:10.632567
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    facts_obj = AIXNetwork()

# Generated at 2022-06-13 01:19:15.677581
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    """
    Returns a instance of the AIXNetworkCollector class.
    """
    network = AIXNetworkCollector()
    assert network.platform == 'AIX'
    assert network.fact_class.platform == 'AIX'
    assert network.fact_class.get_default_interfaces
    assert network.fact_class.get_interfaces_info

# Generated at 2022-06-13 01:19:17.413007
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    assert AIXNetworkCollector._platform == 'AIX'
    assert AIXNetworkCollector._fact_class == AIXNetwork



# Generated at 2022-06-13 01:19:19.086100
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    assert AIXNetworkCollector.__name__.startswith('AIX')
    assert AIXNetworkCollector._fact_class.__name__ == 'AIXNetwork'

# Generated at 2022-06-13 01:19:20.794706
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    assert AIXNetworkCollector._platform == 'AIX'
    assert AIXNetworkCollector._fact_class == AIXNetwork


# Generated at 2022-06-13 01:19:44.230585
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    assert issubclass(AIXNetworkCollector, NetworkCollector)

# Generated at 2022-06-13 01:19:53.719285
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
    '''
    This is a test for the method get_interfaces_info of class AIXNetwork
    '''
    ifconfig_path = '../files/aix_ifconfig.txt'
    ifconfig_opt = '-a'

    class FakeAnsibleModule:
        def get_bin_path(self, tool, opts=None):
            if tool == 'ifconfig':
                return ifconfig_path

        def run_command(self, cmd):
            rc = 0
            out = ''
            err = ''
            if cmd[0] == ifconfig_path and cmd[1] == ifconfig_opt:
                with open(ifconfig_path, "r") as middle:
                    out = middle.read()
            return rc, out, err

    # dummy ansible_module
    ansible_module = FakeAns

# Generated at 2022-06-13 01:19:55.595216
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    nc = AIXNetworkCollector()
    assert nc._fact_class is AIXNetwork
    assert nc._platform == 'AIX'


# Generated at 2022-06-13 01:20:05.519356
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    import copy
    import os

    from ansible.module_utils.facts.network.base import NetworkCollector

    my_network = AIXNetwork()
    my_network.module.get_bin_path = lambda x: '/usr/bin/netstat'


# Generated at 2022-06-13 01:20:15.792609
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    # create a test module
    test_module = AnsibleModule(
        argument_spec = dict(),
        supports_check_mode = True
    )

    # create a test instance of class AIXNetwork
    test_instance = AIXNetwork(test_module)

    # create a test route_path
    test_route_path = '/usr/sbin/route'

    # create a test array for the return value of get_default_interfaces()
    test_default_interfaces = [
        {'gateway': '172.22.240.1', 'interface': 'en0'},
        {'gateway': '2607:f0d0:1002:51::1', 'interface': 'en0'}
    ]

    # call get_default_interfaces via the test instance
    test_result = test_instance.get

# Generated at 2022-06-13 01:20:23.426598
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():

    # This is set to /usr/sbin/netstat when worked on AIX system
    route_path = ''

    # Construct an object for class AIXNetwork
    AIN = AIXNetwork()

    # The test object should have the same class as AIXNetwork
    assert AIN.__class__.__name__ == 'AIXNetwork'

    # The test object should have a method 'get_default_interfaces'
    assert hasattr(AIN, 'get_default_interfaces')

    # The test object should have the same documentation for get_default_interfaces
    # as the method 'get_default_interface' defined in module AIXNetwork
    assert AIN.get_default_interfaces.__doc__ == AIXNetwork.get_default_interfaces.__doc__

    # Construct a test variable
    test_v4, test_

# Generated at 2022-06-13 01:20:31.776955
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    test_object = AIXNetwork()
    test_default_if = test_object.get_default_interfaces('/usr/sbin/route')
    assert test_default_if[0]['gateway'] == '10.0.2.2'
    assert test_default_if[0]['interface'] == 'en0'
    assert test_default_if[1]['gateway'] == 'fe80::219:c7ff:fea0:bff1'
    assert test_default_if[1]['interface'] == 'en0'
    pass


# Generated at 2022-06-13 01:20:34.061418
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    """Create an instance of Network"""
    aix_net = AIXNetworkCollector()
    assert aix_net
    assert aix_net._platform == 'AIX'

# Generated at 2022-06-13 01:20:44.376471
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    test_module = AnsibleModule(
        argument_spec=dict(),
        supports_check_mode=True
    )
    ifconfig_path = test_module.get_bin_path('ifconfig')
    route_path = test_module.get_bin_path('route')
    netstat_path = test_module.get_bin_path('netstat')
    platform = 'AIX'
    obj = AIXNetwork(test_module)
    rc, out, err = test_module.run_command([netstat_path, '-nr'])
    if rc != 0:
        obj.module.fail_json(msg='Error running command')
    interfaces = obj.get_default_interfaces(route_path)
    assert interfaces['v4']['gateway'] == '10.0.0.1'

# Generated at 2022-06-13 01:20:55.563952
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
    """
    This test verifies that the method get_interfaces_info() of the class AIXNetwork behaves as expected.
    """

    class MockModule(object):
        def __init__(self, params):
            self.params = params

        def get_bin_path(self, app, opt_params=None, req_platform=None, req_version=None):
            if app in self.params:
                return self.params[app]
            else:
                return app

        def run_command(self, args, check_rc=True):
            if len(args) == 2 and args[0] == 'ifconfig':
                return 0, AIX_SAMPLE_OUTPUT, ''
            else:
                return 0, '', ''

    # a sample of the output of 'ifconfig -a' command
    AIX_

# Generated at 2022-06-13 01:21:44.431751
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    module = AnsibleModule(argument_spec=dict())
    aix_network = AIXNetwork(module)
    result = aix_network.get_default_interfaces('/sbin/route')
    assert result == ({'interface': 'en0', 'gateway': '172.16.0.1'}, {'gateway': 'fe80::21a:63ff:fe28:ef99', 'interface': 'en0'})


# Generated at 2022-06-13 01:21:51.761907
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    route_path = '/usr/bin/netstat'

    # Good data
    with open('./network_resources/AIX_ifconfig_a', 'r') as f:
        out = f.read()
    with open('./network_resources/AIX_ifconfig_a', 'r') as f:
        err = f.read()
    rc = 0
    module = MyModule(rc, out, err)

    network = AIXNetwork(module)
    v4, v6 = network.get_default_interfaces(route_path)

    assert v4['gateway'] == '192.168.1.1'
    assert v4['interface'] == 'en0'
    assert v6['gateway'] == 'fe80::21a:a0ff:fef5:5d5f%2'
   

# Generated at 2022-06-13 01:21:54.091383
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    module = get_module_mock()
    net = AIXNetwork(module=module)

    iface = net.get_default_interfaces(route_path=None)

    assert len(iface) == 2

# Generated at 2022-06-13 01:21:55.261099
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    assert AIXNetwork().get_default_interfaces(route_path='netstat')

# Generated at 2022-06-13 01:21:59.892256
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    module = MockModule()
    net_obj = AIXNetwork(module)
    route_path = '/usr/sbin/route'
    def_intf = net_obj.get_default_interfaces(route_path)
    assert(def_intf == {u'v4': {u'gateway': u'10.1.1.1', u'interface': u'en0'}, u'v6': {u'interface': u'en0', u'gateway': u'fe80::250:56ff:fe88:be0b'}})


# Generated at 2022-06-13 01:22:10.607953
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    # Default route with IPv4 gateway
    # (copied from AIX 7.2.3 netstat output)
    out_netstat = '''\
    Routing tables
    Destination        Gateway            Flags    Refs     Use     Mtu     Interface
    default            192.168.242.1      UG        0        0     9000     en0
    default            fe80::21a:95ff:fe00:f6f3%1 UG       0        0   1500000 en0
    '''
    out_netstat_lines = out_netstat.splitlines()

    # Setup AIXNetwork object
    module = AnsibleModule(argument_spec=dict())
    n = AIXNetwork(module)

    # Run get_default_interface method

# Generated at 2022-06-13 01:22:16.456848
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
    out = '''eno0: flags=d0982<UP,BROADCAST,NOTRAILERS,RUNNING,PROMISC,SIMPLEX,MULTICAST,GROUPRT,64BIT,CHECKSUM_OFFLOAD(ACTIVE),LARGESEND,CHAIN> inet 127.0.0.31 netmask 0xff000000 broadcast 127.255.255.255 mtu 1500

options=80000<LINKSTATE>
nd6 options=29<PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL>
media: Ethernet autoselect (1000baseT <full-duplex>)
status: active
lladdr 48:0f:cf:37:44:f1

'''
    net = AIXNetwork()

    ifconfig_path = ''
    ifconfig_options = ''
    interfaces,

# Generated at 2022-06-13 01:22:27.072894
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    module = AnsibleModuleMock()
    ifconfig = AIXNetwork(module)

    # using a dict to simulate os.path.exists
    test_files = dict()
    test_files['/usr/bin/netstat'] = True
    ifconfig.set_module_utils_params(paths={'files': test_files})

    # use a dict to simulate ansible.module_utils.basic.AnsibleModule.run_command
    test_commands = dict()

# Generated at 2022-06-13 01:22:32.652315
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    net = AIXNetwork()

    net.interfaces, net.default_interfaces = net.get_default_interfaces()

    assert net.default_interfaces == {
        'v4': {
            'gateway': '10.0.0.1',
            'interface': 'en2'
        },
        'v6': {
            'gateway': 'fe80::ce:7d87:d9f9:a2b2%en2',
            'interface': 'en2'
        }
    }

# Generated at 2022-06-13 01:22:41.912698
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
   def test():
      route_path = '/usr/sbin/route'
      rc, out, err = module.run_command([route_path, '-n'])
      if rc != 0:
         return

      lines = out.splitlines()
      for line in lines:
         words = line.split()
         if len(words) > 1 and words[0] == 'default':
            if '.' in words[1]:
               v4_gateway = words[1]
               v4_interface = words[5]
            elif ':' in words[1]:
               v6_gateway = words[1]
               v6_interface = words[5]

      assert(module.params['interface']['v4']['gateway'] == v4_gateway)

# Generated at 2022-06-13 01:24:14.581469
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    from ansible.module_utils.facts.network.aix import AIXNetwork

    net = AIXNetwork()
    net.module = None  # Test case does not need the module parameter
    net.route_path = None

    assert net.get_default_interfaces(None) == ({'gateway': '0.0.0.0', 'interface': 'lo0'}, {'gateway': '::', 'interface': 'lo0'})

# Generated at 2022-06-13 01:24:16.617717
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    module = NetworkCollector()
    assert module.get_platform() == 'AIX'
    assert module.get_fact_class() == AIXNetwork

# Generated at 2022-06-13 01:24:26.860498
# Unit test for method get_interfaces_info of class AIXNetwork
def test_AIXNetwork_get_interfaces_info():
    module = AnsibleModule(
        argument_spec=dict(),
        supports_check_mode=True
    )

    m_run_command = Mock(return_value=(0, SAMPLE_OUTPUT_IFCONFIG_AIXv6, ''))
    module.run_command = m_run_command

    obj = AIXNetwork()

    fact_interfaces = obj.populate()

    assert 'ens31' in fact_interfaces
    assert 'ens32' in fact_interfaces
    assert 'ens33' in fact_interfaces
    assert 'lo0' in fact_interfaces
    assert 'lo1' in fact_interfaces
    assert 'lo2' in fact_interfaces

    assert fact_interfaces['ens31']['device'] == 'ens31'

# Generated at 2022-06-13 01:24:33.664155
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    test_module = AnsibleModule(argument_spec={})
    test_AIXNetwork = AIXNetwork(test_module)
    test_interface = dict(v4={}, v6={})

    # this netstat output will be returned by test_AIXNetwork.get_default_interfaces()
    test_netstat_path = 'path/to/netstat'
    test_netstat_rc = 0

# Generated at 2022-06-13 01:24:42.861604
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    from ansible.module_utils.facts.network.aix import AIXNetwork
    from ansible.module_utils._text import to_bytes
    import os
    import tempfile

    # create a temp file
    tmpfd, tmpfile = tempfile.mkstemp()
    os.close(tmpfd)

    # create a temp module
    module = type('', (object,), {})()

    # mock module.run_command
    def run_command_mock(self, args, check_rc=True, close_fds=True, executable=None, data=None, binary_data=False):
        rc = 0


# Generated at 2022-06-13 01:24:45.652051
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    assert hasattr(AIXNetworkCollector, '_fact_class'), \
        "Attribute _fact_class not found in class AIXNetworkCollector"
    assert callable(AIXNetworkCollector._fact_class), \
        "Class attribute _fact_class of class AIXNetworkCollector is not a class"

# Generated at 2022-06-13 01:24:52.085396
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    test_object = AIXNetwork()

# Generated at 2022-06-13 01:25:01.178924
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    ifconfig_path = '/usr/sbin/ifconfig'
    ifconfig_options = '-a'
    route_path = '/usr/sbin/route'

# Generated at 2022-06-13 01:25:06.883054
# Unit test for method get_default_interfaces of class AIXNetwork
def test_AIXNetwork_get_default_interfaces():
    aix_network = AIXNetwork({})
    default_interfaces = aix_network.get_default_interfaces('/usr/sbin/netstat')
    # AIX 7.1
    assert default_interfaces[0]['gateway'] == '10.0.0.1'
    assert default_interfaces[0]['interface'] == 'en2'
    # AIX 7.2
    assert default_interfaces[1]['gateway'] == 'fe80::200:c8ff:fecf:7264'
    assert default_interfaces[1]['interface'] == 'en2'

# Generated at 2022-06-13 01:25:09.327241
# Unit test for constructor of class AIXNetworkCollector
def test_AIXNetworkCollector():
    assert AIXNetworkCollector.platform == 'AIX'
    assert AIXNetworkCollector.fact_class._platform == 'AIX'