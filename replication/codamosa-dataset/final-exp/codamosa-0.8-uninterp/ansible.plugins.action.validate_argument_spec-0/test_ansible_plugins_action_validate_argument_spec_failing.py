# Automatically generated by Pynguin.
import ansible.plugins.action.validate_argument_spec as module_0

def test_case_0():
    try:
        tuple_0 = ()
        bytes_0 = b'a\x86c\xe9\xac\xcf\x9c\x80\x9f\xf2'
        int_0 = -745
        bool_0 = True
        tuple_1 = (bool_0,)
        set_0 = {int_0, int_0, tuple_1, tuple_1}
        list_0 = [bool_0, tuple_1, int_0, tuple_1]
        action_module_0 = module_0.ActionModule(int_0, tuple_1, set_0, tuple_1, list_0, int_0)
        var_0 = action_module_0.get_args_from_task_vars(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '.^2q7JqNN2)q7I'
        str_1 = 'W3Tb}'
        list_0 = [str_0, str_0, str_1]
        str_2 = 'iat (`y'
        action_module_0 = module_0.ActionModule(list_0, str_1, str_1, str_1, list_0, str_2)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        int_0 = 1028
        str_0 = '{ZZ'
        list_0 = [str_0, str_0]
        float_0 = 1122.0
        str_1 = 'TOML file (%s) is invalid: %s'
        set_1 = set()
        bytes_0 = b'f\xca!\xe5L\x01\xd4'
        int_1 = 2436
        str_2 = ''
        set_2 = set()
        action_module_0 = module_0.ActionModule(int_1, str_2, set_2, set_1, set_2, int_1)
        action_module_1 = module_0.ActionModule(str_1, set_1, bytes_0, set_1, bytes_0, action_module_0)
        bool_0 = True
        str_3 = 'module_args'
        action_module_2 = module_0.ActionModule(str_0, list_0, float_0, action_module_1, bool_0, str_3)
        var_0 = action_module_2.run(set_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        bytes_0 = b'\xcb\x86c\xe9\xac\xcf\x9c\x80\x9f\xf2'
        dict_0 = {tuple_0: tuple_0, bytes_0: bytes_0}
        list_0 = [tuple_0, bytes_0, tuple_0, bytes_0]
        bytes_1 = b'8\x9f\x19\x0e'
        float_0 = -485.9805
        float_1 = -2757.78322
        bool_0 = False
        action_module_0 = module_0.ActionModule(bytes_1, float_0, float_1, bytes_0, bool_0, float_0)
        var_0 = action_module_0.get_args_from_task_vars(dict_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'fZWGE\nTMgg[m|k'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        set_0 = {str_0, str_0}
        bytes_0 = b'\x1f\x18\xba\xba\x19\xef\x8e'
        bytes_1 = b'\x91\xdf\xee\xd7\xf5\x1a\xad\xb0\xed\xd0\xa8\xdd\xc3\x01^\xe0\xd9\xf8\x96\xe2'
        tuple_0 = (bytes_1, dict_0)
        bool_0 = True
        tuple_1 = (set_0, bytes_0, tuple_0, bool_0)
        float_0 = 1192.3
        float_1 = -2137.455588
        bytes_2 = b'\x0e\xc5\xd57\xd7,q\xf1M+\xdc\xb1!'
        dict_1 = {float_0: float_1, float_0: float_0, float_1: float_1, bytes_2: float_1}
        bool_1 = False
        list_0 = []
        str_1 = 'Qw1v=iG\x0b(7~:Ye5\\B:'
        tuple_2 = (str_1,)
        str_2 = 'address'
        str_3 = 's}${}YArK(YFK!'
        action_module_0 = module_0.ActionModule(bool_1, list_0, list_0, tuple_2, str_2, str_3)
        action_module_1 = module_0.ActionModule(float_0, float_1, bytes_2, dict_1, action_module_0, str_2)
        var_0 = action_module_1.get_args_from_task_vars(dict_0, tuple_1)
    except BaseException:
        pass