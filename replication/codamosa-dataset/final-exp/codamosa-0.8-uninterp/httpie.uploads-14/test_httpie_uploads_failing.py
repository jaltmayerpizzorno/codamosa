# Automatically generated by Pynguin.
import requests_toolbelt.multipart.encoder as module_0
import httpie.uploads as module_1
import requests.models as module_2
import httpie.cli.dicts as module_3
import typing as module_4

def test_case_0():
    try:
        list_0 = []
        list_1 = [list_0, list_0]
        multipart_encoder_0 = module_0.MultipartEncoder(list_0, list_1)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        multipart_encoder_1 = module_0.MultipartEncoder(chunked_multipart_upload_stream_0)
    except BaseException:
        pass

def test_case_1():
    try:
        prepared_request_0 = module_2.PreparedRequest()
        bool_0 = True
        var_0 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        prepared_request_0 = None
        bool_0 = True
        var_0 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'{1, \x8f\x81\x1ea\xe0jk\x8cH\xf5\xc9b\xa8\xea\x1f\x88'
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        list_0 = [bytes_0]
        str_0 = 'GVlXZSZ|BzpCEdPM\tQy'
        var_0 = module_1.prepare_request_body(bytes_0, list_0, str_0)
        iterable_0 = None
        callable_0 = None
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, callable_0)
        float_0 = 431.0
        i_o_0 = module_4.IO()
        int_0 = 255
        var_1 = module_1.prepare_request_body(bytes_0, float_0, i_o_0, int_0)
        int_1 = 300
        i_o_1 = module_4.IO()
        var_2 = i_o_1.readline(int_1)
        prepared_request_0 = module_2.PreparedRequest()
        bool_0 = None
        var_3 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'{1, \x8f\x81\x1ea\xe0jk\x8cH\xf5\xc9b\xa8\xea\x1f\x88'
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        dict_0 = {}
        list_0 = [multipart_request_data_dict_0, multipart_request_data_dict_0, dict_0, bytes_0]
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(dict_0, list_0)
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        tuple_1 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_0 = '%P)3\x0c(><x'
        str_1 = '*.ZO^1Oie{<K'
        dict_1 = {str_0: dict_0, str_1: multipart_request_data_dict_0, str_1: chunked_upload_stream_0}
        request_data_dict_0 = module_3.RequestDataDict(**dict_1)
        var_0 = module_1.prepare_request_body(request_data_dict_0, chunked_upload_stream_0)
        iterable_1 = None
        callable_0 = None
        chunked_upload_stream_1 = module_1.ChunkedUploadStream(iterable_1, callable_0)
        i_o_0 = module_4.IO()
        var_1 = i_o_0.readline()
        multipart_encoder_0 = module_0.MultipartEncoder(i_o_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = None
        bytes_0 = b''
        callable_0 = None
        var_0 = module_1.prepare_request_body(bytes_0, callable_0)
        str_0 = 'Forces requests to ignore the ``.netrc``.\n    <https://github.com/psf/requests/issues/2773#issuecomment-174312831>\n    '
        dict_0 = {bytes_0: bytes_0, callable_0: str_0}
        str_1 = '8&^&Gi|'
        dict_1 = {str_1: dict_0, str_1: str_1}
        var_1 = module_1.prepare_request_body(bytes_0, callable_0, str_0, dict_0, dict_1)
        multipart_encoder_0 = module_0.MultipartEncoder(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'{1, \x8f\x81\x1ea\xe0jk\x8cH\xf5\xc9b\xa8\xea\x1f\x88'
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        dict_0 = {}
        list_0 = [multipart_request_data_dict_0, multipart_request_data_dict_0, dict_0, bytes_0]
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(dict_0, list_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_0 = 'GVlXZSZ|BzpCEdPM\tQy'
        var_0 = module_1.prepare_request_body(bytes_0, list_0, str_0)
        int_0 = 300
        i_o_0 = module_4.IO()
        var_1 = i_o_0.readline(int_0)
        multipart_encoder_0 = module_0.MultipartEncoder(chunked_upload_stream_0)
        str_1 = '\x0bgZ%'
        str_2 = ''
        dict_1 = {str_1: str_0, str_1: multipart_request_data_dict_0, str_2: str_1}
        prepared_request_0 = module_2.PreparedRequest()
        var_2 = module_1.prepare_request_body(multipart_encoder_0, multipart_encoder_0, dict_1, prepared_request_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_3 = i_o_0.read(int_0)
        var_4 = multipart_encoder_0.read(var_3)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'{1, \x8f\x81\x1ea\xe0jk\x8cH\xf5\xc9b\xa8\xea\x1f\x88'
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        dict_0 = {}
        list_0 = [multipart_request_data_dict_0, multipart_request_data_dict_0, dict_0, bytes_0]
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(dict_0, list_0)
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        tuple_1 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_0 = 'GVlXZSZ|Bl:pCEdPM\tQy'
        var_0 = module_1.prepare_request_body(bytes_0, list_0, str_0)
        iterable_1 = None
        callable_0 = None
        str_1 = None
        tuple_2 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1, str_0)
        iterable_2 = chunked_upload_stream_0.__iter__()
        chunked_upload_stream_1 = module_1.ChunkedUploadStream(iterable_1, callable_0)
        int_0 = 300
        i_o_0 = module_4.IO()
        var_1 = i_o_0.readline(int_0)
        multipart_encoder_0 = module_0.MultipartEncoder(chunked_upload_stream_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        callable_1 = None
        var_2 = module_1.prepare_request_body(multipart_encoder_0, callable_1)
        chunked_multipart_upload_stream_1 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        prepared_request_0 = module_2.PreparedRequest()
        multipart_encoder_1 = module_0.MultipartEncoder(chunked_multipart_upload_stream_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'{1, \x8f\x81\x1ea\xe0jk\x8cH\xf5\xc9b\xa8\xea\x1f\x88'
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        dict_0 = {}
        list_0 = [multipart_request_data_dict_0, multipart_request_data_dict_0, dict_0, bytes_0]
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(dict_0, list_0)
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        tuple_1 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_0 = 'GVlXZSZ|Bl:pCEdPM\tQy'
        var_0 = module_1.prepare_request_body(bytes_0, list_0, str_0)
        iterable_1 = None
        callable_0 = None
        str_1 = None
        tuple_2 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1, str_0)
        iterable_2 = chunked_upload_stream_0.__iter__()
        chunked_upload_stream_1 = module_1.ChunkedUploadStream(iterable_1, callable_0)
        str_2 = '!F))c.J]'
        bytes_1 = b'\xd7\xaazT\x14\xa4\x11~\x04\xce\xc1L\x9c\x94\xdc\xb4n'
        dict_1 = {str_0: bytes_0, str_2: var_0, str_1: bytes_1}
        multipart_encoder_0 = module_0.MultipartEncoder(dict_1)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        tuple_3 = (chunked_multipart_upload_stream_0, chunked_multipart_upload_stream_0)
        multipart_encoder_1 = module_0.MultipartEncoder(tuple_3)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'{1, \x8f\x81\x1ea\xe0jk\x8cH\xf5\xc9b\xa8\xea\x1f\x88'
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        list_0 = [bytes_0]
        str_0 = 'CDd\\oINJ'
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(list_0, str_0)
        dict_0 = {}
        list_1 = [multipart_request_data_dict_0, multipart_request_data_dict_0, dict_0, bytes_0]
        chunked_upload_stream_1 = module_1.ChunkedUploadStream(dict_0, list_1)
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        tuple_1 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_1 = 'GVlXZSZ|BzpCEdPM\tQy'
        var_0 = module_1.prepare_request_body(bytes_0, list_1, str_1)
        str_2 = None
        tuple_2 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_2, str_1)
        iterable_0 = chunked_upload_stream_1.__iter__()
        bool_0 = False
        chunked_upload_stream_2 = module_1.ChunkedUploadStream(bool_0, iterable_0)
        i_o_0 = module_4.IO()
        var_1 = i_o_0.readline()
        multipart_encoder_0 = module_0.MultipartEncoder(chunked_upload_stream_1)
        callable_0 = None
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        str_3 = 'k?(MV:*"bd{{1p-<0B'
        var_2 = module_1.prepare_request_body(multipart_encoder_0, callable_0, iterable_0, chunked_multipart_upload_stream_0, str_3)
        chunked_multipart_upload_stream_1 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        callable_1 = None
        var_3 = module_1.prepare_request_body(str_2, callable_1)
        prepared_request_0 = module_2.PreparedRequest()
        bool_1 = False
        var_4 = module_1.compress_request(prepared_request_0, bool_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'{1> \xb3\x1ea\xe0ak\x8cd\xf5b\xa8\xea\x1f\x88'
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        dict_0 = {}
        list_0 = [multipart_request_data_dict_0, multipart_request_data_dict_0, dict_0, bytes_0]
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(dict_0, list_0)
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        tuple_1 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_0 = 'GVlXZSZ|BzpCEdPM\tQy'
        var_0 = module_1.prepare_request_body(bytes_0, list_0, str_0)
        tuple_2 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        int_0 = 300
        i_o_0 = module_4.IO()
        var_1 = i_o_0.readline(int_0)
        set_0 = {bytes_0, tuple_0, tuple_1, int_0}
        var_2 = module_1.prepare_request_body(bytes_0, bytes_0, int_0, set_0)
        list_1 = [var_2, chunked_upload_stream_0, str_0, multipart_request_data_dict_0]
        multipart_encoder_0 = module_0.MultipartEncoder(list_1)
    except BaseException:
        pass