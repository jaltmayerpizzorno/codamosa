# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        int_0 = True
        min_0 = module_0.Min(int_0)
        bool_0 = True
        list_0 = [int_0, bool_0, min_0, bool_0]
        semigroup_0 = module_0.Semigroup(min_0)
        bool_1 = semigroup_0.__eq__(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'GWV"'
        map_0 = module_0.Map(str_0)
        tuple_0 = ()
        semigroup_0 = module_0.Semigroup(tuple_0)
        min_0 = module_0.Min(semigroup_0)
        str_1 = min_0.__str__()
        str_2 = map_0.__str__()
        var_0 = semigroup_0.fold(map_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -3740.499733
        min_0 = module_0.Min(float_0)
        str_0 = min_0.__str__()
        first_0 = None
        sum_0 = module_0.Sum(first_0)
        str_1 = min_0.__str__()
        tuple_0 = (min_0,)
        var_0 = min_0.concat(min_0)
        sum_1 = module_0.Sum(tuple_0)
        semigroup_0 = module_0.Semigroup(sum_1)
        sum_2 = sum_0.concat(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        all_0 = None
        one_0 = module_0.One(all_0)
        bool_0 = False
        min_0 = module_0.Min(bool_0)
        var_0 = one_0.concat(min_0)
        int_0 = 2204
        map_0 = module_0.Map(int_0)
        var_1 = map_0.concat(one_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        dict_0 = {}
        last_0 = module_0.Last(dict_0)
        var_0 = last_0.concat(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        int_0 = False
        first_0 = module_0.First(int_0)
        max_0 = module_0.Max(first_0)
        var_0 = max_0.concat(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        '
        all_0 = module_0.All(str_0)
        bytes_0 = b'\xc2\x13\xab\xe2\nv\x93G\xe3\xc5\x9b\xb4|\xc0\x88\xc3'
        all_1 = all_0.concat(all_0)
        float_0 = -1644.0
        max_0 = module_0.Max(float_0)
        semigroup_0 = module_0.Semigroup(max_0)
        str_1 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        '
        str_2 = '1'
        one_0 = module_0.One(str_2)
        var_0 = one_0.concat(str_1)
        dict_0 = {}
        last_0 = module_0.Last(dict_0)
        map_0 = module_0.Map(last_0)
        str_3 = map_0.__str__()
        var_1 = max_0.concat(max_0)
        float_1 = -2567.55
        map_1 = module_0.Map(float_1)
        dict_1 = {bytes_0: str_3}
        map_2 = module_0.Map(dict_1)
        var_2 = map_2.concat(semigroup_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = False
        first_0 = module_0.First(int_0)
        last_0 = module_0.Last(first_0)
        max_0 = module_0.Max(first_0)
        one_0 = module_0.One(max_0)
        str_0 = last_0.__str__()
        bool_0 = False
        all_0 = module_0.All(bool_0)
        all_1 = all_0.concat(all_0)
        str_1 = '\\h'
        map_0 = module_0.Map(str_1)
        str_2 = 'qbr}'
        var_0 = one_0.concat(str_2)
        map_1 = module_0.Map(bool_0)
        min_0 = module_0.Min(first_0)
        var_1 = map_1.concat(min_0)
    except BaseException:
        pass