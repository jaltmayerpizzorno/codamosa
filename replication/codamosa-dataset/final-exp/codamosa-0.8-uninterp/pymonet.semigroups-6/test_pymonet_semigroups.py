# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\xa8\x1d]\x96\xc7tK4\x8a\x06%z\xa0~\xaf\xd9\xaf'
    one_0 = module_0.One(bytes_0)

def test_case_2():
    int_0 = -1881
    dict_0 = {int_0: int_0, int_0: int_0}
    first_0 = module_0.First(dict_0)
    tuple_0 = (first_0,)
    str_0 = ")t5=X'OpW;D?CR)W"
    sum_0 = module_0.Sum(str_0)
    str_1 = sum_0.__str__()
    tuple_1 = (int_0, tuple_0)
    semigroup_0 = module_0.Semigroup(tuple_1)
    sum_1 = module_0.Sum(semigroup_0)
    list_0 = [dict_0, tuple_1]
    max_0 = module_0.Max(list_0)
    min_0 = module_0.Min(max_0)
    one_0 = module_0.One(min_0)
    str_2 = one_0.__str__()

def test_case_3():
    bytes_0 = b'\xc2\x13\xab\xe2\nv\x93G\xe3\xc5\x9b\xb4|\xc0\x88\xc3'
    all_0 = module_0.All(bytes_0)
    all_1 = all_0.concat(all_0)
    tuple_0 = ()
    last_0 = module_0.Last(tuple_0)
    last_1 = module_0.Last(last_0)
    str_0 = all_0.__str__()
    all_2 = module_0.All(last_1)
    all_3 = all_2.concat(all_1)
    str_1 = all_3.__str__()

def test_case_4():
    bytes_0 = b'\x1c\x1d]\x13\x96\xc7tK4\x8a\xe0%\x88z\xa0~\xed\xd9\xaf'
    one_0 = module_0.One(bytes_0)
    str_0 = one_0.__str__()

def test_case_5():
    bool_0 = True
    list_0 = [bool_0]
    first_0 = module_0.First(list_0)
    str_0 = first_0.__str__()

def test_case_6():
    int_0 = 1772
    first_0 = module_0.First(int_0)
    first_1 = module_0.First(first_0)
    max_0 = module_0.Max(first_0)
    min_0 = module_0.Min(int_0)
    semigroup_0 = module_0.Semigroup(min_0)
    last_0 = module_0.Last(semigroup_0)
    first_2 = module_0.First(last_0)
    var_0 = first_2.concat(max_0)
    map_0 = module_0.Map(first_1)
    min_1 = module_0.Min(map_0)
    str_0 = min_1.__str__()

def test_case_7():
    float_0 = -1644.0
    max_0 = module_0.Max(float_0)
    dict_0 = {}
    last_0 = module_0.Last(dict_0)
    map_0 = module_0.Map(last_0)
    str_0 = map_0.__str__()
    var_0 = max_0.concat(max_0)

def test_case_8():
    bool_0 = False
    float_0 = -3883.9
    last_0 = module_0.Last(float_0)
    str_0 = last_0.__str__()
    bytes_0 = b'\xe0\nM\t1\x17\xe4\xb6%Z\x0fA\x07\x91'
    min_0 = module_0.Min(bytes_0)
    last_1 = module_0.Last(min_0)
    str_1 = last_0.__str__()
    var_0 = last_0.concat(last_1)
    max_0 = module_0.Max(bool_0)
    str_2 = max_0.__str__()

def test_case_9():
    bool_0 = True
    set_0 = {bool_0}
    min_0 = module_0.Min(set_0)
    str_0 = min_0.__str__()

def test_case_10():
    int_0 = -5
    min_0 = module_0.Min(int_0)
    var_0 = min_0.concat(min_0)
    var_1 = var_0.value

def test_case_11():
    str_0 = '\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        '
    all_0 = module_0.All(str_0)
    float_0 = -1644.0
    max_0 = module_0.Max(float_0)
    str_1 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        '
    str_2 = '1'
    one_0 = module_0.One(str_2)
    var_0 = one_0.concat(str_1)
    dict_0 = {}
    last_0 = module_0.Last(dict_0)
    map_0 = module_0.Map(last_0)
    str_3 = map_0.__str__()
    var_1 = max_0.concat(max_0)
    float_1 = -2567.55
    map_1 = module_0.Map(float_1)

def test_case_12():
    str_0 = '\n        Transform Box into Lazy with returning value function.\n\n        :returns: not folded Lazy monad with function returning previous value\n        :rtype: Lazy[Function(() -> A)]\n        '
    all_0 = module_0.All(str_0)
    all_1 = all_0.concat(all_0)
    float_0 = -1644.0
    max_0 = module_0.Max(float_0)
    semigroup_0 = module_0.Semigroup(max_0)
    sum_0 = module_0.Sum(semigroup_0)
    str_1 = sum_0.__str__()
    str_2 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: Sum[B]\n        :returns: new Sum with sum of concat semigroups values\n        :rtype: Sum[A]\n        '
    str_3 = '1'
    one_0 = module_0.One(str_3)
    var_0 = one_0.concat(str_2)
    dict_0 = {}
    last_0 = module_0.Last(dict_0)
    map_0 = module_0.Map(last_0)
    str_4 = map_0.__str__()
    var_1 = max_0.concat(max_0)
    float_1 = -2567.55
    map_1 = module_0.Map(float_1)
    dict_1 = {}
    map_2 = module_0.Map(dict_1)
    var_2 = map_2.concat(semigroup_0)

def test_case_13():
    int_0 = 2
    max_0 = module_0.Max(int_0)
    int_1 = 3
    max_1 = module_0.Max(int_1)
    var_0 = max_0.concat(max_1)
    max_2 = module_0.Max(int_1)
    max_3 = module_0.Max(int_1)
    max_4 = module_0.Max(int_0)
    var_1 = max_3.concat(max_4)
    max_5 = module_0.Max(int_1)

def test_case_14():
    int_0 = 1
    min_0 = module_0.Min(int_0)
    int_1 = 2
    min_1 = module_0.Min(int_1)
    var_0 = min_0.concat(min_1)
    min_2 = module_0.Min(int_0)
    var_1 = min_1.concat(min_0)
    min_3 = module_0.Min(int_0)
    var_2 = min_0.concat(min_0)
    min_4 = module_0.Min(int_0)
    var_3 = min_1.concat(min_1)
    min_5 = module_0.Min(int_1)