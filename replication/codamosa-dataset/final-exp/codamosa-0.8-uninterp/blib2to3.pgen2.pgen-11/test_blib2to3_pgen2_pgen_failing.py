# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        pgen_grammar_0 = module_0.PgenGrammar()
        n_f_a_state_0 = module_0.NFAState()
        str_0 = 'DF[5Ez)*qnE\n'
        dict_0 = {}
        tuple_0 = (dict_0, str_0)
        parser_generator_0 = module_0.ParserGenerator(str_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'H&3\rr8a?|^)-X}xI'
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {}
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_3():
    try:
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_4():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {}
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_2)
        str_0 = 'v'
        n_f_a_state_0.addarc(n_f_a_state_2, str_0)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        n_f_a_state_0 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 4134.68
        n_f_a_state_0 = module_0.NFAState()
        str_0 = 'TV6i\nW+z~@('
        list_0 = []
        str_1 = "YJ\x0c'|-OTn\\X]l^L&"
        dict_0 = {str_0: list_0, str_0: list_0, str_0: list_0, str_1: list_0, str_1: list_0}
        str_2 = '\n\x0c(z2:vFj9'
        tuple_0 = (dict_0, str_2)
        dict_1 = {n_f_a_state_0: tuple_0, n_f_a_state_0: tuple_0}
        d_f_a_state_0 = module_0.DFAState(dict_1, n_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = None
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_2)
    except BaseException:
        pass

def test_case_8():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = None
        none_type_0 = None
        n_f_a_state_0.addarc(n_f_a_state_1, none_type_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 4149.614812272142
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        str_0 = ',?M\\+,cC??@pl1+'
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        n_f_a_state_2 = module_0.NFAState()
        dict_0 = {n_f_a_state_2: n_f_a_state_2, n_f_a_state_2: float_0, n_f_a_state_2: n_f_a_state_2}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_2)
        str_1 = '\n\x0c(z2:vFj#9'
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        n_f_a_state_2.addarc(n_f_a_state_2)
        n_f_a_state_3 = module_0.NFAState()
        n_f_a_state_4 = module_0.NFAState()
        parser_generator_0 = module_0.ParserGenerator(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        pgen_grammar_0 = module_0.PgenGrammar()
        n_f_a_state_0 = None
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 4149.614812272142
        n_f_a_state_0 = module_0.NFAState()
        bytes_0 = b'\xb2 \xe4\xdbp\t\xf3#@d\x08\x94\xa4O\xc2 \x1d\x15'
        n_f_a_state_1 = module_0.NFAState()
        set_0 = {bytes_0, float_0}
        dict_0 = {n_f_a_state_0: set_0, n_f_a_state_0: bytes_0, n_f_a_state_0: bytes_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = '(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?'
        n_f_a_state_2 = module_0.NFAState()
        dict_1 = {n_f_a_state_2: n_f_a_state_2, n_f_a_state_2: float_0, n_f_a_state_2: n_f_a_state_2}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_2)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
        n_f_a_state_3 = module_0.NFAState()
        str_1 = 'TV6i\nW+z~@('
        list_0 = []
        str_2 = "YJ\x0c'|-OTn\\X]l^L&"
        dict_2 = {str_1: list_0, str_2: list_0, str_2: list_0, str_1: list_0, str_1: list_0}
        str_3 = '\n\x0c(z2:vFj#9'
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_0)
        tuple_0 = (dict_2, str_3)
        n_f_a_state_3.addarc(n_f_a_state_3)
        dict_3 = {n_f_a_state_3: tuple_0, n_f_a_state_3: tuple_0}
        d_f_a_state_2 = module_0.DFAState(dict_3, n_f_a_state_3)
        bool_1 = d_f_a_state_2.__eq__(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        n_f_a_state_0 = module_0.NFAState()
        tuple_0 = (n_f_a_state_0, n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 4149.614812272142
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        str_0 = '(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?'
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: float_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        str_1 = 'TV6i\nW+z~@('
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = module_0.NFAState()
        parser_generator_0 = module_0.ParserGenerator(str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 4149.614812272142
        n_f_a_state_0 = module_0.NFAState()
        str_0 = 'expected (...) or NAME or STRING, got %s/%s'
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        str_1 = '(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?'
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: float_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
        n_f_a_state_1.addarc(n_f_a_state_0)
        str_2 = 'TV6i\nW+z~@('
        d_f_a_state_1 = None
        d_f_a_state_0.addarc(d_f_a_state_1, str_2)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 4149.614812272142
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        str_0 = '(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?'
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: float_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        n_f_a_state_1.addarc(n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        str_1 = 'TV6i\nW+z~@('
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 4149.614812272142
        n_f_a_state_0 = module_0.NFAState()
        bytes_0 = b'\xb2 \xe4\xdbp\t\xf3#@d\x08\x94\xa4O\xc2 \x1d\x15'
        set_0 = {bytes_0, float_0}
        dict_0 = {n_f_a_state_0: set_0, n_f_a_state_0: bytes_0, n_f_a_state_0: bytes_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'w\tD%~cW%g/PMT1tE<e'
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: float_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        n_f_a_state_2 = module_0.NFAState()
        str_1 = 'TV6i\nW+z~@('
        list_0 = []
        str_2 = "YJ\x0c'|-OTn\\X]l^L&"
        dict_2 = {str_1: list_0, str_2: list_0, str_2: list_0, str_1: list_0, str_1: list_0}
        str_3 = '\n\x0c(z2:vFj#9'
        tuple_0 = (dict_2, str_3)
        str_4 = 'ds+twFVqD<oBlJriw~K'
        d_f_a_state_0.addarc(d_f_a_state_0, str_4)
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_0.unifystate(d_f_a_state_1, d_f_a_state_1)
        n_f_a_state_2.addarc(n_f_a_state_2)
        dict_3 = {n_f_a_state_2: tuple_0, n_f_a_state_2: tuple_0}
        d_f_a_state_2 = module_0.DFAState(dict_3, n_f_a_state_2)
        bool_0 = d_f_a_state_2.__eq__(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = None
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 4149.614812272142
        n_f_a_state_0 = module_0.NFAState()
        str_0 = 'expected (...) or NAME or STRING, got %s/%s'
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        str_1 = '(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?'
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: float_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
        n_f_a_state_1.addarc(n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        float_0 = 4149.614812272142
        n_f_a_state_0 = module_0.NFAState()
        bytes_0 = b'\xb2 \xe4\xdbp\t\xf3#@d\x08\x94\xa4O\xc2 \x1d\x15'
        n_f_a_state_1 = module_0.NFAState()
        set_0 = {bytes_0, float_0}
        dict_0 = {n_f_a_state_0: set_0, n_f_a_state_0: bytes_0, n_f_a_state_0: bytes_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = '(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?'
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: float_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
        n_f_a_state_2 = module_0.NFAState()
        str_1 = 'TV6i\nW+z~@('
        list_0 = []
        str_2 = "YJ\x0c'|-OTn\\X]l^L&"
        dict_2 = {str_1: list_0, str_2: list_0, str_2: list_0, str_1: list_0, str_1: list_0}
        str_3 = '\n\x0c(z2:vFj#9'
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_0)
        tuple_0 = (dict_2, str_3)
        n_f_a_state_2.addarc(n_f_a_state_2)
        dict_3 = {n_f_a_state_2: tuple_0, n_f_a_state_2: tuple_0}
        d_f_a_state_2 = module_0.DFAState(dict_3, n_f_a_state_2)
        bool_1 = d_f_a_state_2.__eq__(float_0)
    except BaseException:
        pass