# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    try:
        str_0 = None
        bool_0 = False
        bool_1 = module_0.is_isbn_13(str_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'UPPERCASE_FIRST_LETTER'
        bool_0 = module_0.is_isbn_13(str_0)
        str_1 = None
        bool_1 = module_0.is_number(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '{"naOe: "Peter"}'
        bool_0 = module_0.is_json(str_0)
        bool_1 = module_0.is_json(str_0)
        bool_2 = module_0.is_email(bool_0)
        str_1 = 'XgB'
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
        bool_3 = module_0.is_credit_card(str_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        str_1 = ';ZO\x0bL #qH'
        bool_0 = module_0.is_full_string(str_1)
        bool_1 = False
        bool_2 = module_0.is_ip(bool_1)
        bool_3 = module_0.is_uuid(str_0, bool_1)
        int_0 = module_0.words_count(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '(-)([a-z\\d])'
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
        bool_0 = module_0.is_ip_v6(i_s_b_n_checker_0)
        dict_0 = None
        str_1 = '+7H!CS>YC&b\\'
        bool_1 = module_0.is_number(str_1)
        list_0 = [dict_0, dict_0]
        bool_2 = module_0.is_slug(dict_0)
        bool_3 = module_0.is_full_string(list_0)
        bool_4 = module_0.is_palindrome(dict_0)
        str_2 = None
        bool_5 = module_0.is_string(dict_0)
        bool_6 = True
        bool_7 = True
        bool_8 = module_0.is_palindrome(str_0, bool_7)
        bool_9 = module_0.is_isbn_10(str_1, bool_6)
        str_3 = '>2uw7T;J5*5Eb%0EsX'
        i_s_b_n_checker_1 = module_0.__ISBNChecker(str_3)
        bool_10 = module_0.is_isbn_10(str_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ']#qu.P`'
        bool_0 = module_0.is_number(str_0)
        str_1 = ':n|pI/`\t]c1k$>^'
        bool_1 = module_0.is_camel_case(str_1)
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
        bool_2 = i_s_b_n_checker_0.is_isbn_13()
        bool_3 = i_s_b_n_checker_0.is_isbn_13()
        bool_4 = i_s_b_n_checker_0.is_isbn_10()
        bool_5 = i_s_b_n_checker_0.is_isbn_10()
        bool_6 = module_0.is_isbn(str_1)
        bool_7 = i_s_b_n_checker_0.is_isbn_10()
        str_2 = 'Invalid start/stop/step configuration'
        i_s_b_n_checker_1 = module_0.__ISBNChecker(str_2)
        bool_8 = module_0.is_isbn_10(str_1)
        list_0 = None
        bool_9 = module_0.is_url(str_1, list_0)
        str_3 = None
        str_4 = 'U-<whd\r%B\\2w'
        bool_10 = False
        bool_11 = module_0.is_palindrome(str_3)
        bool_12 = module_0.is_isbn_13(str_4, bool_10)
        bool_13 = module_0.contains_html(str_3)
    except BaseException:
        pass