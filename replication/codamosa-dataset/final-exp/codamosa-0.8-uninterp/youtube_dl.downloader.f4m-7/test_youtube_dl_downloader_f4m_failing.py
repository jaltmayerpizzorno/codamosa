# Automatically generated by Pynguin.
import youtube_dl.downloader.f4m as module_0
import youtube_dl.compat as module_1
import base64 as module_2

def test_case_0():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_char()
    except BaseException:
        pass

def test_case_1():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_long_long()
    except BaseException:
        pass

def test_case_2():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_int()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x04\x00\x00\x00test\x00\x00\x00\x06foobar\x00\x06foobar\x00\x00\x00\tfoobarfoo'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_string()
        var_1 = flv_reader_0.read_box_info()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x04\x00\x00\x00test\x00\x00\x00\x06foobar\x00\x06foobar\x00\x00\x00\tfoobarfoo'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_box_info()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x04\x00\x00\x00test\x00\x00\x00\x06foobar\x00\x06foobar\x00\x00\x00\tfoobarfoo'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_6():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x04\x00\x00\x00test\x00\x00\x00\x06foobar\x00\x06foobar\x00\x00\x00\tfoobarfoo'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_string()
        var_1 = flv_reader_0.read_bootstrap_info()
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        var_0 = module_0.build_fragments_list(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        var_0 = module_0.remove_encrypted_media(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = module_0.get_base_url(flv_reader_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = []
        bytes_0 = None
        var_0 = module_0.write_metadata_tag(list_0, bytes_0)
        bytes_1 = b'\x04\x00\x00test\x00\x00\x00\x06foobar\x00\x06foobar\x00\x00\x00\tfobarfoo'
        list_1 = [bytes_1]
        flv_reader_0 = module_0.FlvReader(*list_1)
        var_1 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_12():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = module_0.write_flv_header(flv_reader_0)
        flv_reader_1 = module_0.FlvReader()
        var_1 = flv_reader_1.read_unsigned_int()
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        flv_reader_0 = module_0.FlvReader(**dict_0)
        list_0 = []
        bytes_0 = b'\x1d&\x93PjM\xd6\xe4\x0e\xd7\xd6U\x99\xde\\z\x08'
        str_0 = 'kVh'
        bytes_1 = b',\xeer\xad\xc5\xf4'
        dict_1 = {str_0: bytes_1}
        f4m_f_d_0 = module_0.F4mFD(str_0, dict_1)
        f4m_f_d_1 = module_0.F4mFD(f4m_f_d_0, dict_0)
        var_0 = f4m_f_d_1.real_download(list_0, bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x04\x00\x00\x00test\x00\x00\x00\x06fobar\x00\x06foobar\x00\x00\tfoobarfoo'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'WpZ\x96\xa4\x1e\xf6\x88\x04cNz'
        var_0 = module_0.read_bootstrap_info(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'\x04\x00\x00\x00test\x00\x00\x00\x06foobar\x00\x06foobar\x00\x00\x00\tfoobarfoo'
        list_0 = [bytes_0]
        data_truncated_error_0 = module_0.DataTruncatedError()
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_unsigned_long_long()
        var_1 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x04\x00\x00\x00test\x00\x00\x00\x06foobar\x00\x06foobar\x00\x00\x00\tfoobarfoo'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\x04\x00\x00test\x9f\x00\x00\x06Coobar\x00\x06fo\xa3bar\x00\x00\x00\tfobar6o\x90'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_unsigned_int()
        var_1 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '<manifest><baseURL>http://example.com/</baseURL></manifest>'
        var_0 = module_1.compat_etree_fromstring(str_0)
        var_1 = module_0.get_base_url(var_0)
        str_1 = '<manifest xmlns="http://ns.adobe.com/f4m/1.0"><baseURL>http://example.com/</baseURL></manifest>'
        var_2 = module_1.compat_etree_fromstring(str_1)
        var_3 = module_0.get_base_url(var_2)
        bool_0 = False
        var_4 = module_2.b64decode(bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'segments'
        str_1 = 'fragments'
        str_2 = 'segment_run'
        int_0 = 0
        int_1 = 3
        int_2 = (int_0, int_1)
        int_3 = [int_2]
        int_4 = {str_2: int_3}
        int_5 = [int_4]
        str_3 = 'first'
        int_6 = {str_3: int_0}
        int_7 = {str_3: int_1}
        int_8 = 6
        int_9 = {str_3: int_8}
        int_10 = [int_6, int_7, int_9]
        int_11 = {str_1: int_10}
        int_12 = [int_11]
        int_13 = {str_0: int_5, str_1: int_12}
        var_0 = module_0.build_fragments_list(int_13)
    except BaseException:
        pass