# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        str_0 = ";]@Tt2OFw'/#0x3#)`V"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, dict_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        j_s_interpreter_0 = module_0.JSInterpreter(tuple_0)
        str_0 = 'foo.bar'
        int_0 = 55
        var_0 = j_s_interpreter_0.interpret_expression(str_0, tuple_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'foo = {}; foo.bar = function(baz, qux){return baz + qux;};'
        tuple_0 = ()
        j_s_interpreter_0 = module_0.JSInterpreter(tuple_0)
        j_s_interpreter_1 = module_0.JSInterpreter(str_0)
        str_1 = 'foo.bar'
        int_0 = 55
        var_0 = j_s_interpreter_1.interpret_expression(str_1, tuple_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        str_0 = 'k'
        bytes_0 = b'\xc2*G\n\x01\xaa\xe7|[\xee['
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, bytes_0)
        var_0 = j_s_interpreter_0.extract_function(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -707
        bytes_0 = b'\x15\xe8\x1b\x9c\x0b<$5'
        list_0 = [int_0, int_0, bytes_0, bytes_0]
        bool_0 = True
        j_s_interpreter_0 = module_0.JSInterpreter(bool_0)
        var_0 = j_s_interpreter_0.call_function(int_0, *list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'n'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = -11
        var_0 = j_s_interpreter_0.interpret_statement(str_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'EUAKt|Nn6o+$'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'r\\)eF14-U>5GQ?c='
        var_0 = j_s_interpreter_0.extract_function(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'var a = (5 + 6) * 3  b;c[( - 3)] = (gu+ 5) * 3 - 1;'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = -17
        var_0 = j_s_interpreter_0.interpret_statement(str_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'var a = (5 + 6) * 3 - b;c[(d - 3)] = (g + 5) * 3 - 1;'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'g'
        int_0 = 1
        int_1 = 3
        int_2 = 5
        int_3 = {str_1: int_0, str_0: int_1, str_0: int_2, str_1: int_1}
        str_2 = ''
        var_0 = j_s_interpreter_0.interpret_statement(str_2, int_3)
        str_3 = 'c[(d - 3)] = (g + 5) * 3 - 1;'
        var_1 = j_s_interpreter_0.interpret_statement(str_3, int_3)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        var_0 = {}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, var_0)
        str_1 = '12'
        var_1 = {}
        int_0 = -920
        var_2 = j_s_interpreter_0.interpret_expression(str_1, var_1, int_0)
        str_2 = '"foo"'
        var_3 = {}
        var_4 = j_s_interpreter_0.interpret_expression(str_2, var_3, int_0)
        bytes_0 = b'?\x93\xd0\xa4\xe8\xf8\x06\xd8a\xdd\xcb\x95\xe9\xfax\xe1\xfa\x9d'
        j_s_interpreter_1 = module_0.JSInterpreter(bytes_0)
        str_3 = '1 + 23'
        var_5 = {}
        var_6 = j_s_interpreter_0.interpret_expression(str_3, var_5, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'var a = (5 + 6) * 3 - b;c[(d - 3)] = (g + 5) * 3 - 1;'
        int_0 = 70
        dict_0 = {str_0: str_0, str_0: str_0, int_0: int_0, str_0: int_0}
        j_s_interpreter_0 = module_0.JSInterpreter(int_0, dict_0)
        j_s_interpreter_1 = module_0.JSInterpreter(str_0)
        str_1 = "\x0b1}~fwdF)Q`v'6C#\n'$)"
        j_s_interpreter_2 = module_0.JSInterpreter(str_1)
        set_0 = {j_s_interpreter_2}
        j_s_interpreter_3 = module_0.JSInterpreter(set_0)
        str_2 = '1(TN$$@^'
        var_0 = j_s_interpreter_0.build_function(j_s_interpreter_3, str_2)
        str_3 = '3/(75g'
        str_4 = '(=26L#HD(:k\nOmEViby'
        j_s_interpreter_4 = module_0.JSInterpreter(str_4)
        bool_0 = True
        j_s_interpreter_5 = module_0.JSInterpreter(bool_0)
        var_1 = j_s_interpreter_5.interpret_statement(str_3, j_s_interpreter_4)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'foo = {}; foo.bar = function(baz, qux){return baz + qux;};'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'foo.bar'
        int_0 = 123
        var_0 = j_s_interpreter_0.interpret_expression(str_1, str_1, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        var_0 = None
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, var_0)
        str_1 = 'x'
        int_0 = 10
        str_2 = {str_1: str_1}
        var_1 = j_s_interpreter_0.interpret_expression(str_1, str_2, int_0)
        str_3 = 'a'
        str_4 = 'b'
        str_5 = 'c'
        str_6 = [str_3, str_4, str_5]
        str_7 = {str_1: str_6}
        str_8 = 'x[0]'
        var_2 = j_s_interpreter_0.interpret_expression(str_8, str_7, int_0)
        bool_0 = False
        list_0 = []
        var_3 = j_s_interpreter_0.interpret_expression(str_1, bool_0, list_0)
    except BaseException:
        pass