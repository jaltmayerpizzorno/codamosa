# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        int_0 = -235
        int_1 = -1260
        position_0 = module_0.Position(int_0, int_1, int_0)
        base_error_0 = module_0.BaseError(position=position_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'P*xzkDs#ZYn\tyyv'
        int_0 = -1260
        base_error_0 = module_0.BaseError(text=str_0)
        iterator_0 = base_error_0.__iter__()
        position_0 = module_0.Position(int_0, int_0, int_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = "aPa@6\\IqI\\5Z'r?m*h<^"
        int_1 = 0
        position_1 = module_0.Position(int_0, int_1, int_1)
        bool_1 = position_1.__eq__(str_1)
        message_0 = module_0.Message(text=str_0, key=str_0, start_position=position_0, end_position=position_0)
        bool_2 = position_0.__eq__(base_error_0)
        validation_error_0 = module_0.ValidationError()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 2606
        int_1 = -64
        position_0 = module_0.Position(int_0, int_1, int_0)
        str_0 = position_0.__repr__()
        base_error_0 = module_0.BaseError(key=str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        message_0 = module_0.Message(text=str_0)
        str_1 = message_0.__repr__()
        str_2 = message_0.__repr__()
        int_0 = 1
        int_1 = -232
        int_2 = 306
        position_0 = module_0.Position(int_0, int_1, int_2)
        base_error_0 = module_0.BaseError()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'P*xzkDs#ZYn\tyyv'
        int_0 = -1260
        base_error_0 = module_0.BaseError(text=str_0)
        iterator_0 = base_error_0.__iter__()
        position_0 = module_0.Position(int_0, int_0, int_0)
        bool_0 = position_0.__eq__(position_0)
        str_1 = "aPa@6\\IqI\\5Z'r?m*h<^"
        int_1 = -135
        int_2 = 0
        position_1 = module_0.Position(int_1, int_2, int_2)
        bool_1 = position_1.__eq__(str_1)
        message_0 = module_0.Message(text=str_0, key=str_0, start_position=position_0, end_position=position_0)
        str_2 = message_0.__repr__()
        iterator_1 = base_error_0.__iter__()
        bool_2 = position_0.__eq__(base_error_0)
        validation_error_0 = module_0.ValidationError()
    except BaseException:
        pass

def test_case_5():
    try:
        validation_result_0 = module_0.ValidationResult()
        str_0 = 'c5A"OL`9\\5'
        base_error_0 = module_0.BaseError(messages=str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        validation_error_0 = module_0.ValidationError()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '}kPU4R7m=K1!k'
        set_0 = set()
        validation_error_0 = module_0.ValidationError(text=str_0, code=str_0, messages=set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'pattern_properties'
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_result_0 = module_0.ValidationResult(value=validation_error_0)
        iterator_0 = validation_result_0.__iter__()
        int_0 = 1
        str_1 = ',t\nY8C>U.$ZLD '
        message_0 = module_0.Message(text=str_1)
        str_2 = message_0.__repr__()
        int_1 = message_0.__hash__()
        list_0 = [message_0, message_0, int_1]
        bool_0 = message_0.__eq__(str_2)
        base_error_0 = module_0.BaseError(text=str_2)
        int_2 = message_0.__hash__()
        list_1 = base_error_0.messages(add_prefix=str_1)
        base_error_1 = module_0.BaseError(text=str_1, code=str_1, key=int_0, position=list_0)
        str_3 = message_0.__repr__()
        validation_result_1 = module_0.ValidationResult()
        bool_1 = validation_result_1.__bool__()
        bool_2 = message_0.__eq__(base_error_0)
        str_4 = validation_result_1.__repr__()
        int_3 = -1297
        position_0 = module_0.Position(int_1, int_0, int_3)
        validation_result_2 = module_0.ValidationResult(value=position_0)
        str_5 = position_0.__repr__()
        list_2 = base_error_0.messages()
        base_error_2 = module_0.BaseError(position=position_0, messages=list_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'field_id'
        base_error_0 = module_0.BaseError(text=str_0, key=str_0)
        str_1 = base_error_0.__str__()
        bool_0 = base_error_0.__eq__(base_error_0)
        validation_result_0 = module_0.ValidationResult()
        bool_1 = validation_result_0.__bool__()
        int_0 = base_error_0.__len__()
        int_1 = base_error_0.__hash__()
        iterator_0 = base_error_0.__iter__()
        int_2 = 1467
        int_3 = 446
        validation_result_1 = module_0.ValidationResult()
        bool_2 = validation_result_1.__bool__()
        int_4 = None
        iterator_1 = validation_result_1.__iter__()
        position_0 = module_0.Position(int_2, int_3, int_4)
        str_2 = base_error_0.__repr__()
        str_3 = '=HG$F'
        validation_error_0 = module_0.ValidationError(code=str_1, messages=str_3)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '8q#'
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_result_0 = module_0.ValidationResult(error=validation_error_0)
        str_1 = 'Must be finite.'
        int_0 = 1990
        int_1 = -1792
        position_0 = module_0.Position(int_0, int_1, int_0)
        message_0 = module_0.Message(text=str_1, position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        int_0 = -1415
        position_0 = module_0.Position(int_0, int_0, int_0)
        bool_1 = position_0.__eq__(bool_0)
        str_0 = '&t\x0cmfdT'
        list_0 = []
        message_0 = module_0.Message(text=str_0, key=str_0, index=list_0, start_position=position_0)
    except BaseException:
        pass

def test_case_12():
    try:
        validation_result_0 = module_0.ValidationResult()
        bool_0 = validation_result_0.__bool__()
        str_0 = 'multipleOf'
        base_error_0 = module_0.BaseError(text=str_0, code=str_0)
        str_1 = base_error_0.__str__()
        int_0 = 1465
        int_1 = 2
        position_0 = module_0.Position(int_0, int_0, int_1)
        str_2 = base_error_0.__repr__()
        iterator_0 = validation_result_0.__iter__()
        str_3 = 'o"O\'9ZrP5\nb2)1'
        message_0 = module_0.Message(text=str_3, position=position_0, start_position=position_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Must have no more than {max_length} characters.'
        validation_error_0 = module_0.ValidationError(text=str_0, key=str_0)
        str_1 = 'p*\\PjX0'
        base_error_0 = module_0.BaseError(text=str_1)
        bool_0 = base_error_0.__eq__(validation_error_0)
        int_0 = 2663
        int_1 = 3
        position_0 = module_0.Position(int_0, int_1, int_0)
        str_2 = position_0.__repr__()
        str_3 = '!+\x0cVY"4Ek'
        validation_error_1 = module_0.ValidationError(code=str_3, key=str_3)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ']'
        set_0 = {str_0, str_0, str_0}
        message_0 = module_0.Message(text=str_0, code=str_0, start_position=set_0)
        list_0 = [message_0]
        message_1 = module_0.Message(text=str_0, position=list_0)
        float_0 = -1463.29097
        dict_0 = {float_0: float_0, float_0: float_0}
        message_2 = module_0.Message(text=str_0, key=str_0)
        list_1 = [message_2]
        base_error_0 = module_0.BaseError(key=dict_0, messages=list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'k'
        validation_result_0 = module_0.ValidationResult()
        bool_0 = validation_result_0.__bool__()
        int_0 = -1082
        int_1 = 2412
        int_2 = -618
        position_0 = module_0.Position(int_0, int_1, int_2)
        message_0 = module_0.Message(text=str_0, code=str_0, key=str_0, position=position_0)
        int_3 = -1193
        int_4 = 80
        position_1 = module_0.Position(int_1, int_3, int_4)
        list_0 = [int_2, bool_0, bool_0, position_1]
        validation_result_1 = module_0.ValidationResult(value=validation_result_0, error=list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'pattern_properties'
        int_0 = 70
        int_1 = -1718
        int_2 = 1
        position_0 = module_0.Position(int_0, int_1, int_2)
        str_1 = position_0.__repr__()
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_result_0 = module_0.ValidationResult(value=validation_error_0)
        iterator_0 = validation_result_0.__iter__()
        int_3 = 1
        str_2 = ',t\nY8C>U.$ZLD '
        message_0 = module_0.Message(text=str_2)
        str_3 = message_0.__repr__()
        int_4 = message_0.__hash__()
        list_0 = [message_0, message_0, int_4]
        bool_0 = message_0.__eq__(str_3)
        base_error_0 = module_0.BaseError(text=str_3)
        int_5 = message_0.__hash__()
        base_error_1 = module_0.BaseError(text=str_2, code=str_2, key=int_3, position=list_0)
        str_4 = message_0.__repr__()
        validation_result_1 = module_0.ValidationResult()
        bool_1 = validation_result_1.__bool__()
        bool_2 = message_0.__eq__(base_error_0)
        str_5 = validation_result_1.__repr__()
        list_1 = []
        base_error_2 = module_0.BaseError(messages=list_1)
    except BaseException:
        pass