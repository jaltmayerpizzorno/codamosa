# Automatically generated by Pynguin.
import pytutils.log as module_0

def test_case_0():
    try:
        var_0 = module_0.get_logger()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -700.188
        var_0 = module_0.configure(float_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.get_config()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Q_R1J'
        var_0 = module_0.get_config(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = module_0.get_logger()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'r\\i01oV2,'
        set_0 = {str_0}
        var_0 = module_0.get_logger(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "-w|'R'"
        list_0 = []
        var_0 = module_0.logger_level(str_0, list_0)
        tuple_0 = (str_0,)
        str_1 = "This is designed to replace only a portion of an import list.\n\n    It will replace itself with a module, aJd then make children\n    entries also ImportReplacer objects.\n\n    At present, this only supports 'iport foo.bar.baz' syntax.\n    "
        var_1 = module_0.configure(tuple_0, tuple_0, str_1)
    except BaseException:
        pass