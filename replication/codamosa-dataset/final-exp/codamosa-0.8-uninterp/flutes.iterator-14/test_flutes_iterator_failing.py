# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        int_0 = 183
        dict_0 = {int_0: int_0, int_0: int_0}
        list_0 = [int_0, dict_0, dict_0]
        var_0 = module_0.scanr(int_0, dict_0, *list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        lazy_list_0 = module_0.LazyList(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1389
        float_0 = -1479.2
        iterator_0 = module_0.take(int_0, float_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'c7'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_4():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'3\xa2#\xe9\xe6%\x82v%\xa4Ng\xd6 `\xc6R\x92'
        bytes_1 = b'\x1e"\x99\xaag\xbc&\xe8\x96\xe9\xefW\x127\xa9\xb5'
        map_list_0 = module_0.MapList(bytes_0, bytes_1)
        iterator_0 = map_list_0.__iter__()
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_6():
    try:
        iterable_0 = None
        bool_0 = False
        iterator_0 = module_0.split_by(iterable_0, bool_0)
        set_0 = {iterator_0, bool_0, bool_0}
        map_list_0 = module_0.MapList(iterator_0, set_0)
        iterator_1 = map_list_0.__iter__()
        lazy_list_0 = module_0.LazyList(iterator_1)
        int_0 = map_list_0.__len__()
        var_0 = lazy_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'VLtnf";R*U_#'
        list_0 = [str_0, str_0, str_0, str_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = None
        bool_0 = False
        tuple_1 = ()
        iterator_0 = module_0.drop_until(bool_0, tuple_1)
        set_0 = {iterator_0}
        iterator_1 = module_0.split_by(set_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        map_list_0 = module_0.MapList(iterator_0, lazy_list_0)
        var_0 = map_list_0.__getitem__(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'/\x99\xc5\xd0i{5\xd1\xf8\xda\xefV\x13'
        lazy_list_0 = module_0.LazyList(bytes_0)
        float_0 = -1098.52979
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1364
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__len__()
        bool_0 = False
        tuple_0 = ()
        iterator_0 = module_0.drop_until(bool_0, tuple_0)
        iterator_1 = module_0.chunk(int_0, range_0)
        set_0 = {iterator_0}
        iterator_2 = range_0.__iter__()
        iterator_3 = module_0.split_by(set_0)
        lazy_list_0 = module_0.LazyList(iterator_3)
        map_list_0 = module_0.MapList(iterator_0, lazy_list_0)
        var_0 = map_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        set_0 = set()
        list_0 = [set_0, set_0]
        int_0 = 999
        bytes_0 = b'\x9e\x06$\x10D\x1e'
        iterator_0 = module_0.chunk(int_0, bytes_0)
        tuple_0 = (iterator_0,)
        lazy_list_0 = module_0.LazyList(tuple_0)
        var_0 = module_0.scanr(list_0, lazy_list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x14\x97\xb5Z\x99\xc2\xa5\x82o\xadu'
        lazy_list_0 = module_0.LazyList(bytes_0)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        int_0 = 446
        var_0 = lazy_list_1.__getitem__(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'o]Z"$3P\t'
        bool_0 = False
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        list_0 = [str_0, str_0]
        int_0 = -1866
        str_1 = 'N.'
        lazy_list_0 = module_0.LazyList(str_1)
        iterator_1 = module_0.chunk(int_0, lazy_list_0)
        var_0 = lazy_list_0.__iter__()
        lazy_list_1 = module_0.LazyList(iterator_1)
        map_list_0 = module_0.MapList(list_0, lazy_list_1)
        var_1 = list(map_list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -1478.8243081303358
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        map_list_0 = module_0.MapList(tuple_1, tuple_1)
        int_0 = map_list_0.__len__()
        iterator_0 = module_0.take(int_0, float_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        dict_0 = {lazy_list_0: iterator_0, lazy_list_0: map_list_0, map_list_0: int_0, lazy_list_0: float_0}
        var_0 = module_0.scanr(dict_0, tuple_1)
        var_1 = lazy_list_0.__iter__()
        var_2 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        iterable_0 = None
        bool_0 = False
        bytes_0 = b'/\x99\xc5\xd0i{5\xd1\xf8\xda\xefV\x13'
        iterator_0 = None
        list_0 = [iterable_0, bool_0, bytes_0]
        var_0 = module_0.scanr(iterator_0, list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 18
        float_0 = -1478.8243081303358
        iterator_0 = module_0.take(int_0, float_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        iterable_0 = None
        bool_0 = False
        iterator_0 = module_0.split_by(iterable_0, bool_0)
        str_0 = 'MOB.'
        list_0 = [iterable_0]
        var_0 = module_0.scanr(str_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 7
        float_0 = -1479.3677668008636
        tuple_0 = ()
        bool_0 = True
        list_0 = [float_0, tuple_0, int_0, bool_0]
        iterator_0 = module_0.take(int_0, list_0)
        iterator_1 = module_0.chunk(int_0, iterator_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 1384
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        range_1 = module_0.Range(*list_0)
        iterator_0 = range_1.__iter__()
        iterator_1 = module_0.take(int_0, iterator_0)
        map_list_0 = module_0.MapList(list_0, iterator_1)
        str_0 = 'Context'
        iterator_2 = module_0.chunk(int_0, str_0)
        iterator_3 = map_list_0.__iter__()
        lazy_list_0 = module_0.LazyList(map_list_0)
        var_0 = lazy_list_0.__iter__()
        bool_0 = False
        var_1 = lazy_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 1384
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        range_1 = module_0.Range(*list_0)
        iterator_0 = range_1.__iter__()
        iterator_1 = module_0.take(int_0, iterator_0)
        map_list_0 = module_0.MapList(list_0, iterator_1)
        str_0 = 'Context'
        iterator_2 = module_0.chunk(int_0, str_0)
        iterator_3 = map_list_0.__iter__()
        lazy_list_0 = module_0.LazyList(map_list_0)
        var_0 = lazy_list_0.__iter__()
        bool_0 = False
        var_1 = lazy_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        iterable_0 = None
        bool_0 = True
        iterator_0 = module_0.split_by(iterable_0, bool_0)
        set_0 = {iterator_0, bool_0, bool_0}
        map_list_0 = module_0.MapList(iterator_0, set_0)
        bytes_0 = b'\x14\x97\xb5Z\x99\xc2\xa5\x82o\xadu'
        lazy_list_0 = module_0.LazyList(bytes_0)
        iterator_1 = map_list_0.__iter__()
        iterator_2 = map_list_0.__iter__()
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        int_0 = map_list_0.__len__()
        lazy_list_2 = module_0.LazyList(lazy_list_1)
        var_0 = lazy_list_2.__getitem__(bool_0)
        var_1 = lazy_list_1.__iter__()
        float_0 = 1.0
        var_2 = lazy_list_1.__getitem__(float_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 1384
        list_0 = [int_0, int_0]
        range_0 = module_0.Range(*list_0)
        range_1 = module_0.Range(*list_0)
        iterator_0 = range_1.__iter__()
        iterator_1 = module_0.take(int_0, iterator_0)
        map_list_0 = module_0.MapList(list_0, iterator_1)
        str_0 = 'ConLtext'
        dict_0 = {str_0: int_0}
        iterator_2 = module_0.split_by(dict_0)
        iterator_3 = map_list_0.__iter__()
        bool_0 = True
        var_0 = range_1.__getitem__(bool_0)
        iterable_0 = None
        iterator_4 = module_0.split_by(iterable_0)
        list_1 = [iterator_4, iterator_4, map_list_0]
        lazy_list_0 = module_0.LazyList(list_1)
        var_1 = lazy_list_0.__iter__()
        map_list_1 = module_0.MapList(map_list_0, range_0)
        iterator_5 = map_list_0.__iter__()
        float_0 = -107.4
        var_2 = map_list_1.__getitem__(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 1384
        iterable_0 = None
        iterator_0 = module_0.split_by(iterable_0)
        str_0 = 'ConLtext'
        dict_0 = {str_0: int_0}
        iterator_1 = module_0.split_by(dict_0)
        iterator_2 = module_0.chunk(int_0, str_0)
        dict_1 = None
        lazy_list_0 = module_0.LazyList(iterator_2)
        var_0 = lazy_list_0.__iter__()
        var_1 = lazy_list_0.__getitem__(dict_1)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 10
        iterator_0 = module_0.drop(int_0, int_0)
        var_0 = next(iterator_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 33
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = next(iterator_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = -1
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = next(iterator_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 10
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 434
        int_1 = 1631
        dict_0 = {}
        iterator_0 = module_0.chunk(int_1, dict_0)
        iterator_1 = module_0.drop(int_0, iterator_0)
        list_0 = []
        str_0 = 'Function decorator that calls the specified handler function when a exception occurs inside the decorated\n    function. By default, ``handler_fn`` is ``None``, and :func:`log_exception` will be called to print the exception\n    details.\n\n    A custom handler function takes the following arguments:\n\n    - A positional argument for the exception object. This must be the first argument of the method.\n    - Arguments with matching names to arguments in the wrapped method. These arguments will be filled with values\n      passed to the wrapped method. These arguments cannot take default values.\n    - Arguments without matching names. These arguments must take default values.\n    - An optional variadic keyword argument (``**kwargs``). This will be filled with remaining argument name-value pairs\n      that are not captured by other arguments.\n\n    For example:\n\n    .. code:: python\n\n        def handler_fn(e, three, one, args, my_arg=None, **kw): ...\n\n        @exception_wrapper(handler_fn)\n        def foo(one, two, *args, three=None, **kwargs): ...\n\n        foo(1, "2", "arg1", "arg2", four=4)\n\n    Assuming a :py:exc:`ValueError` is thrown, the argument values for ``handler_fn`` would be:\n\n    .. code::\n\n        e:      <ValueError>\n        three:  None\n        one:    1\n        args:   ("arg1", "arg2")\n        my_arg: None\n        kw:     {"two": "2",\n                 "kwargs": {"four": 4}}\n    '
        map_list_0 = module_0.MapList(list_0, str_0)
        iterator_2 = map_list_0.__iter__()
        iterator_3 = map_list_0.__iter__()
        set_0 = {iterator_0, iterator_1, iterator_1}
        map_list_1 = module_0.MapList(iterator_2, set_0)
        iterator_4 = map_list_1.__iter__()
        bool_0 = None
        iterator_5 = module_0.split_by(int_0, criterion=set_0)
        lazy_list_0 = module_0.LazyList(iterator_5)
        var_0 = lazy_list_0.__getitem__(bool_0)
    except BaseException:
        pass