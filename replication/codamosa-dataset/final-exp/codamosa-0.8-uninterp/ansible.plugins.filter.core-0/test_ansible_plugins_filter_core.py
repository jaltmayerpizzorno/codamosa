# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '*'
    list_0 = [str_0]
    var_0 = module_0.combine(*list_0)
    str_1 = 'python'
    set_0 = {str_0}
    var_1 = module_0.to_bool(set_0)
    var_2 = module_0.to_yaml(str_1)
    var_3 = module_0.fileglob(str_0)

def test_case_2():
    str_0 = '\nnwAt.-?[F~(6i,'
    var_0 = module_0.to_bool(str_0)

def test_case_3():
    float_0 = None
    var_0 = module_0.to_bool(float_0)

def test_case_4():
    str_0 = 'Gc"?Q5'
    var_0 = module_0.regex_replace(str_0)

def test_case_5():
    str_0 = '@9|Dw:R@sk'
    var_0 = module_0.regex_search(str_0, str_0)

def test_case_6():
    filter_module_0 = module_0.FilterModule()
    bytes_0 = b''
    var_0 = filter_module_0.filters()
    var_1 = filter_module_0.filters()
    str_0 = None
    var_2 = module_0.ternary(filter_module_0, str_0, bytes_0)
    var_3 = filter_module_0.filters()
    set_0 = set()
    var_4 = filter_module_0.filters()
    var_5 = module_0.b64encode(set_0)
    str_1 = "'G{o6BbXXecjf#Y{"
    bool_0 = True
    var_6 = module_0.regex_search(bool_0, str_1)

def test_case_7():
    bool_0 = False
    var_0 = module_0.from_yaml(bool_0)

def test_case_8():
    str_0 = 'foo'
    var_0 = module_0.regex_escape(str_0)
    str_1 = 'foo.*'
    var_1 = module_0.regex_escape(str_1)
    str_2 = 'posix_basic'
    str_3 = 'ISN#~Q<R'
    var_2 = module_0.from_yaml_all(str_3)
    var_3 = module_0.regex_escape(str_1, str_2)

def test_case_9():
    bool_0 = True
    var_0 = module_0.randomize_list(bool_0)

def test_case_10():
    bool_0 = False
    var_0 = module_0.to_uuid(bool_0)

def test_case_11():
    int_0 = -453
    set_0 = {int_0}
    var_0 = module_0.mandatory(int_0, set_0)

def test_case_12():
    int_0 = 3
    var_0 = module_0.b64encode(int_0)

def test_case_13():
    str_0 = '*'
    list_0 = [str_0]
    var_0 = module_0.combine(*list_0)

def test_case_14():
    str_0 = '#?Q8'
    filter_module_0 = module_0.FilterModule()
    var_0 = module_0.comment(str_0)
    var_1 = filter_module_0.filters()

def test_case_15():
    bool_0 = False
    var_0 = module_0.to_bool(bool_0)

def test_case_16():
    int_0 = None
    var_0 = module_0.quote(int_0)

def test_case_17():
    int_0 = -766
    str_0 = '6Q'
    var_0 = module_0.combine()
    var_1 = module_0.regex_search(int_0, str_0)

def test_case_18():
    int_0 = 1675
    var_0 = module_0.to_bool(int_0)

def test_case_19():
    bytes_0 = b'Yi\x00\x06\xadEZH\x80g'
    var_0 = module_0.randomize_list(bytes_0)

def test_case_20():
    var_0 = module_0.regex_replace()
    str_0 = '1bIxTPU@Ai~]#8Lf.,'
    dict_0 = {str_0: var_0}
    var_1 = module_0.quote(dict_0)

def test_case_21():
    filter_module_0 = module_0.FilterModule()
    var_0 = filter_module_0.filters()
    bytes_0 = b''
    var_1 = filter_module_0.filters()
    var_2 = filter_module_0.filters()
    filter_module_1 = None
    str_0 = None
    var_3 = module_0.ternary(filter_module_1, str_0, bytes_0)
    var_4 = filter_module_0.filters()
    var_5 = filter_module_0.filters()
    set_0 = set()
    var_6 = filter_module_0.filters()
    var_7 = module_0.b64encode(set_0)
    str_1 = "'G{o6BbXXecjf#Y{"
    bool_0 = True
    var_8 = module_0.regex_search(bool_0, str_1)

def test_case_22():
    str_0 = '%s/(?P<path>ansible/modules/.*)\\.(py|ps1)$'
    var_0 = module_0.regex_search(str_0, str_0)

def test_case_23():
    str_0 = "\nstat:\n    description: Dictionary containing all the stat data, some platforms might add additional fields.\n    returned: success\n    type: complex\n    contains:\n        exists:\n            description: If the destination path actually exists or not\n            returned: success\n            type: bool\n            sample: True\n        path:\n            description: The full path of the file/object to get the facts of\n            returned: success and if path exists\n            type: str\n            sample: '/path/to/file'\n        mode:\n            description: Unix permissions of the file in octal representation as a string\n            returned: success, path exists and user can read stats\n            type: str\n            sample: 1755\n        isdir:\n            description: Tells you if the path is a directory\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        ischr:\n            description: Tells you if the path is a character device\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        isblk:\n            description: Tells you if the path is a block device\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        isreg:\n            description: Tells you if the path is a regular file\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        isfifo:\n            description: Tells you if the path is a named pipe\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        islnk:\n            description: Tells you if the path is a symbolic link\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        issock:\n            description: Tells you if the path is a unix domain socket\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        uid:\n            description: Numeric id representing the file owner\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 1003\n        gid:\n            description: Numeric id representing the group of the owner\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 1003\n        size:\n            description: Size in bytes for a plain file, amount of data for some special files\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 203\n        inode:\n            description: Inode number of the path\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 12758\n        dev:\n            description: Device the inode resides on\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 33\n        nlink:\n            description: Number of links to the inode (hard links)\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 1\n        atime:\n            description: Time of last access\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        mtime:\n            description: Time of last modification\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        ctime:\n            description: Time of last metadata update or creation (depends on OS)\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        wusr:\n            description: Tells you if the owner has write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        rusr:\n            description: Tells you if the owner has read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xusr:\n            description: Tells you if the owner has execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        wgrp:\n            description: Tells you if the owner's group has write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        rgrp:\n            description: Tells you if the owner's group has read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xgrp:\n            description: Tells you if the owner's group has execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        woth:\n            description: Tells you if others have write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        roth:\n            description: Tells you if others have read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xoth:\n            description: Tells you if others have execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        isuid:\n            description: Tells you if the invoking user's id matches the owner's id\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        isgid:\n            description: Tells you if the invoking user's group id matches the owner's group id\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        lnk_source:\n            description: Target of the symlink normalized for the remote filesystem\n            returned: success, path exists and user can read stats and the path is a symbolic link\n            type: str\n            sample: /home/foobar/21102015-1445431274-908472971\n        lnk_target:\n            description: Target of the symlink.  Note that relative paths remain relative\n            returned: success, path exists and user can read stats and the path is a symbolic link\n            type: str\n            sample: ../foobar/21102015-1445431274-908472971\n            version_added: 2.4\n        md5:\n            description: md5 hash of the file; this will be removed in Ansible 2.9 in\n                favor of the checksum return value\n            returned: success, path exists and user can read stats and path\n                supports hashing and md5 is supported\n            type: str\n            sample: f88fa92d8cf2eeecf4c0a50ccc96d0c0\n        checksum:\n            description: hash of the file\n            returned: success, path exists, user can read stats, path supports\n                hashing and supplied checksum algorithm is available\n            type: str\n            sample: 50ba294cdf28c0d5bcde25708df53346825a429f\n        pw_name:\n            description: User name of owner\n            returned: success, path exists and user can read stats and installed python supports it\n            type: str\n            sample: httpd\n        gr_name:\n            description: Group name of owner\n            returned: success, path exists and user can read stats and installed python supports it\n            type: str\n            sample: www-data\n        mimetype:\n            description: file magic data or mime-type\n            returned: success, path exists and user can read stats and\n                installed python supports it and the `mime` option was true, will\n                return 'unknown' on error.\n            type: str\n            sample: application/pdf; charset=binary\n        charset:\n            description: file character set or encoding\n            returned: success, path exists and user can read stats and\n                installed python supports it and the `mime` option was true, will\n                return 'unknown' on error.\n            type: str\n            sample: us-ascii\n        readable:\n            description: Tells you if the invoking user has the right to read the path\n            returned: success, path exists and user can read the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        writeable:\n            description: Tells you if the invoking user has the right to write the path\n            returned: success, path exists and user can write the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        executable:\n            description: Tells you if the invoking user has execute permission on the path\n            returned: success, path exists and user can execute the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        attributes:\n            description: list of file attributes\n            returned: success, path exists and user can execute the path\n            type: list\n            sample: [ immutable, extent ]\n            version_added: 2.3\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.comment(str_0, **dict_0)

def test_case_24():
    dict_0 = {}
    filter_module_0 = module_0.FilterModule(**dict_0)
    bool_0 = True
    list_0 = [bool_0]
    float_0 = 1883.449
    var_0 = module_0.randomize_list(list_0, float_0)

def test_case_25():
    str_0 = '*'
    var_0 = module_0.fileglob(str_0)

def test_case_26():
    str_0 = 'foo.*'
    var_0 = module_0.regex_escape(str_0)
    str_1 = 'posix_basic'
    var_1 = module_0.regex_escape(str_0, str_1)

def test_case_27():
    str_0 = 'Comment text'
    str_1 = 'plain'
    var_0 = module_0.comment(str_0, str_1)
    str_2 = 'Comment text\nSecond line'
    var_1 = module_0.comment(str_2, str_1)
    str_3 = 'xml'
    str_4 = ' < '
    var_2 = module_0.comment(str_2, str_3)

def test_case_28():
    str_0 = 'name'
    str_1 = 'groups'
    str_2 = 'authorized'
    str_3 = 'alice'
    str_4 = 'wheel'
    str_5 = [str_4]
    str_6 = '/tmp/alice/onekey.pub'
    str_7 = [str_6]
    str_8 = {str_0: str_3, str_1: str_5, str_2: str_7}
    str_9 = 'bob'
    str_10 = 'dev'
    str_11 = 'test'
    str_12 = [str_10, str_11]
    str_13 = '/tmp/bob/onekey.pub'
    str_14 = '/tmp/bob/otherkey.pub'
    str_15 = [str_13, str_14]
    str_16 = {str_0: str_9, str_1: str_12, str_2: str_15}
    str_17 = [str_8, str_16]
    var_0 = module_0.subelements(str_17, str_1)

def test_case_29():
    str_0 = '/etc/*'
    var_0 = module_0.fileglob(str_0)
    str_1 = '/bin/*'
    var_1 = module_0.fileglob(str_1)

def test_case_30():
    str_0 = "\nstat:\n    description: Dictionary containing all the stat data, some platforms might add additional fields.\n    returned: success\n    type: complex\n    contains:\n        exists:\n            description: If the destination path actually exists or not\n            returned: success\n            type: bool\n            sample: True\n        path:\n            description: The full path of the file/object to get the facts of\n            returned: success and if path exists\n            type: str\n            sample: '/path/to/file'\n        mode:\n            description: Unix permissions of the file in octal representation as a string\n            returned: success, path exists and user can read stats\n            type: str\n            sample: 1755\n        isdir:\n            description: Tells you if the path is a directory\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        ischr:\n            description: Tells you if the path is a character device\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        isblk:\n            description: Tells you if the path is a block device\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        isreg:\n            description: Tells you if the path is a regular file\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        isfifo:\n            description: Tells you if the path is a named pipe\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        islnk:\n            description: Tells you if the path is a symbolic link\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        issock:\n            description: Tells you if the path is a unix domain socket\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        uid:\n            description: Numeric id representing the file owner\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 1003\n        gid:\n            description: Numeric id representing the group of the owner\n            returned: success, p*th existsband user can read stats\n            type: int\n            sample: 1003\n        size:\n            description: Size in bytes for a plain file, amount of data for some special files\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 203\n        inode:\n            description: Inode number of the path\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 12758\n        dev:\n            description: Device the inode resides on\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 33\n        nlink:\n            description: Number of links to the inode (hard links)\n            returned: success, path exists and user can read stats\n            type: int\n            sample: 1\n        atime:\n            description: Time of last access\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        mtime:\n            description: Time of last modification\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        ctime:\n            description: Time of last metadata update or creation (depends on OS)\n            returned: success, path exists and user can read stats\n            type: float\n            sample: 1424348972.575\n        wusr:\n            description: Tells you if the owner has write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        rusr:\n            description: Tells you if the owner has read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xusr:\n            description: Tells you if the owner has execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        wgrp:\n            description: Tells you if the owner's group has write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        rgrp:\n            description: Tells you if the owner's group has read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xgrp:\n            description: Tells you if the owner's group has execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        woth:\n            description: Tells you if others have write permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        roth:\n            description: Tells you if others have read permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        xoth:\n            description: Tells you if others have execute permission\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: True\n        isuid:\n            description: Tells you if the invoking user's id matches the owner's id\n            returned: success, path exists and user can +ead stats\n            type: bool\n            sample: False\n        isgid:\n            description: Tells you if the invoking user's group id matches the owner's group id\n            returned: success, path exists and user can read stats\n            type: bool\n            sample: False\n        lnk_source:\n            description: Target of the symlink normalized for the remote filesystem\n            returned: success, path exists and user can read stats and the path is a symbolic link\n            type: str\n            sample: /home/foobar/21102015-1445431274-908472971\n        lnk_target:\n            description: Target of the symlink.  Note that relative paths remain relative\n            returned: success, path exists and user can read stats and the path is a symbolic link\n           type: str\n            sample: ../foobar/21102015-1445431274-908472971\n            version_added: 2.4\n        md5:\n            description: md5 hash of the file; this will be removed in Ansible 2.9 in\n                favor of the checksum return value\n            returned: success, path exists and user can read stats and path\n                supports hashing and md5 is supported\n            type: str\n            sample: f88fa92d8cf2eeecf4c0a50ccc96d0c0\n        checksum:\n            description: hash of the file\n            returned: success, path exists, user can read stats, path supports\n                hashing and supplied checksum algorithm is available\n            type: str\n            sample: 50ba294cdf28c0d5bcde25708df53346825a429f\n        pw_name:\n            description: User name of owner\n            returned: success, path exists and user can read stats and installed python supports it\n            type: str\n            sample: httpd\n        gr_name:\n            description: Group name of owner\n            returned: success, path exists and user can read stats and installed python supports it\n            type: str\n            sample: www-data\n        mimetype:\n            description: file magic data or mime-type\n            returned: success, path exists and user can read stats and\n                installed python supports it and the `mime` option was true, will\n                return 'unknown' on error.\n            type: str\n            sample: application/pdf; charset=binary\n        charset:\n            description: file character set or encoding\n            returned: success, path exists and user can read stats and\n                installed python supports it and the `mime` option was true, will\n                return 'unknown' on error.\n           type: str\n            sample: us-ascii\n        readable:\n            description: Tells you if the invoking user has the right to read the path\n            returned: success, path exists and user can read the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        writeable:\n            description: Tells you if the invoking user has the right to write the path\n            returned: success, path exists and user can write the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        executable:\n            description: Tells you if the invoking user has execute permission on the path\n            returned: success, path exists and user can execute the path\n            type: bool\n            sample: False\n            version_added: 2.2\n        attributes:\n            description: list of file attributes\n            returned: success, path exists and user can execute the path\n            type: list\n            sample: [ immutable, extent ]\n            version_added: 2.3\n"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0]
    var_0 = module_0.combine(*list_0)