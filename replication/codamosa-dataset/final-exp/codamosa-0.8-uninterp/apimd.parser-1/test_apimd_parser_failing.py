# Automatically generated by Pynguin.
import ast as module_0
import apimd.parser as module_1
import collections.abc as module_2

def test_case_0():
    try:
        list_0 = []
        str_0 = 't\n'
        list_1 = [str_0, list_0]
        dict_0 = {}
        name_0 = module_0.Name(*list_1, **dict_0)
        str_1 = '\x0b.O{.|CfQ:j0'
        str_2 = '!O?j#a~\\tkW i'
        dict_1 = {str_1: str_2}
        resolver_0 = module_1.Resolver(str_1, dict_1)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        sequence_0 = module_2.Sequence(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "^\t>x&'o6\tL&S"
        str_1 = module_1.doctest(str_0)
        name_0 = module_0.Name()
        str_2 = '=Ya5:=Z7F-M&T'
        str_3 = None
        str_4 = 'A?B]0nD2b44,(?'
        str_5 = 'fpl0!`)Rwo;,<M['
        dict_0 = {str_2: str_3, str_0: str_4, str_3: str_5}
        resolver_0 = module_1.Resolver(str_1, dict_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'bm'
        import_0 = module_0.Import()
        bool_0 = True
        int_0 = 849
        bool_1 = False
        parser_0 = module_1.Parser(bool_0, int_0, bool_1)
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Xcgp]n`*zLU~^}?4ZN!'
        import_0 = None
        bool_0 = True
        parser_0 = module_1.Parser(bool_0, bool_0)
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '{vtMNY\rz:]8!'
        str_1 = module_1.doctest(str_0)
        parser_0 = module_1.Parser()
        assign_0 = None
        parser_0.globals(str_1, assign_0)
        str_2 = None
        str_3 = module_1.code(str_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        ann_assign_0 = module_0.AnnAssign()
        bool_0 = False
        str_1 = "Up\nGtI0'84uP>"
        str_2 = 'K+$?X.?j-\x0b]M{'
        dict_0 = {str_1: str_1, str_1: str_2, str_2: str_1}
        parser_0 = module_1.Parser(bool_0, dict_0)
        parser_0.globals(str_0, ann_assign_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'return'
        class_def_0 = module_0.ClassDef()
        bool_0 = False
        str_1 = None
        set_0 = None
        dict_0 = {str_1: set_0}
        str_2 = '`U'
        str_3 = 'PTu/'
        str_4 = 'Nu,E*S\x0b#WlbX{^!&x'
        str_5 = '\n'
        str_6 = 'typing'
        dict_1 = {str_1: str_2, str_3: str_4, str_5: str_6}
        parser_0 = module_1.Parser(bool_0, dict_0, dict_1)
        parser_0.api(str_0, class_def_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "l7\n_/V\x0b;'N$]"
        list_0 = [str_0]
        str_1 = 'E/MU$H'
        dict_0 = {str_1: str_0}
        class_def_0 = module_0.ClassDef(*list_0, **dict_0)
        str_2 = 'Decorators'
        str_3 = '=}8 ;x&5]!\x0c}\x0b\x0b0@'
        str_4 = "jJ\rP\t;gLzpL'QI4 bVpH"
        module_x_var_0 = None
        dict_1 = {}
        str_5 = ''
        dict_2 = {str_5: str_5, str_3: str_4}
        parser_0 = module_1.Parser(dict_1, dict_1, dict_2)
        parser_0.load_docstring(str_3, module_x_var_0)
        str_6 = 'return'
        str_7 = None
        str_8 = None
        str_9 = ''
        dict_3 = {str_2: str_3, str_4: str_6, str_7: str_8, str_3: str_9}
        parser_1 = module_1.Parser(dict_3)
        parser_1.api(str_0, class_def_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ':'
        arguments_0 = module_0.arguments()
        expr_0 = module_0.expr()
        bool_0 = False
        bool_1 = True
        int_0 = 1021
        str_1 = 'X}iD'
        int_1 = 507
        str_2 = ' *a*#~M\x0cmKSpdj'
        int_2 = -2017
        str_3 = 'l/'
        dict_0 = {str_1: int_1, str_1: int_1, str_2: int_2, str_3: int_0}
        str_4 = '_qZ'
        str_5 = 'IU|-%d2Vg5'
        dict_1 = {str_2: str_2, str_4: str_5}
        parser_0 = module_1.Parser(bool_1, int_0, dict_0, dict_1, dict_1, dict_1, dict_1)
        parser_0.func_api(str_0, str_0, arguments_0, expr_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        bool_0 = True
        int_0 = 1772
        str_1 = '>XaMG~ag'
        str_2 = 'jTj[]fHqC2y"@BcJQ~!'
        dict_0 = {str_1: str_2, str_1: str_2}
        parser_0 = module_1.Parser(bool_0, int_0, dict_0, dict_0)
        bool_1 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '5~(SyTU~j(S\n'
        bool_0 = True
        str_1 = None
        int_0 = 203
        dict_0 = {str_1: int_0, str_0: int_0}
        str_2 = None
        dict_1 = {str_1: str_2}
        parser_0 = module_1.Parser(bool_0, dict_0, dict_1, dict_1, dict_1)
        var_0 = parser_0.__post_init__()
        dict_2 = {}
        str_3 = module_1.doctest(str_0)
        bool_1 = False
        parser_1 = module_1.Parser(bool_1, dict_2)
        str_4 = parser_0.compile()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'zLU Mo.scyp(\r>}'
        class_def_0 = None
        expr_0 = None
        str_1 = module_1.const_type(expr_0)
        str_2 = 'Y9-WbH'
        str_3 = '_E7/fOOZwdy\r\tp%+E}'
        str_4 = 'C\x0b"\x0bVcw'
        str_5 = None
        list_0 = [expr_0]
        name_0 = module_0.Name(*list_0)
        str_6 = '2\nxqM k\rE\nG\t'
        str_7 = '/3)L~y+qse]! &C`R'
        str_8 = 'No!\re\nY|Hh?9S~`xT+5['
        dict_0 = {str_6: str_2, str_4: str_1, str_5: str_7, str_8: str_2}
        resolver_0 = module_1.Resolver(str_4, dict_0)
        bool_0 = False
        str_9 = None
        int_0 = -425
        str_10 = "}\nr'%r3\x0c"
        int_1 = -4705
        dict_1 = {str_9: int_0, str_10: int_1, str_8: int_0}
        str_11 = '.\\-oD?8~wBQ`'
        str_12 = '6Z\tk'
        set_0 = {str_12, str_10}
        str_13 = 'z[{`sx~fB'
        dict_2 = {str_11: set_0, str_1: set_0, str_12: set_0, str_13: set_0}
        parser_0 = module_1.Parser(bool_0, dict_1, dict_2, dict_0, dict_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        dict_3 = {str_3: str_3, str_3: str_4, str_3: str_5}
        parser_1 = module_1.Parser(dict_3, dict_3)
        parser_1.api(str_0, class_def_0, prefix=str_2)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '-d'
        str_1 = module_1.doctest(str_0)
        list_0 = []
        stmt_0 = None
        list_1 = [stmt_0]
        bool_0 = True
        bool_1 = module_1.is_public_family(str_0)
        str_2 = '(O]rGwu{ \t.C'
        dict_0 = {str_2: str_2}
        set_0 = {str_2}
        dict_1 = {str_0: set_0, str_0: set_0, str_0: set_0}
        parser_0 = module_1.Parser(bool_0, bool_0, dict_0, dict_1)
        parser_0.class_api(str_0, str_2, list_0, list_1)
        str_3 = module_1.parent(str_2)
        str_4 = 'Set up globals:\n\n        + Type alias\n        + Constants\n        + `__all__` filter\n        '
        bool_2 = parser_0.is_public(str_4)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '8|9to;o7'
        dict_0 = {}
        parser_0 = module_1.Parser(dict_0)
        parser_0.parse(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'typing'
        list_0 = [str_0, str_0, str_0]
        async_function_def_0 = module_0.AsyncFunctionDef(*list_0)
        str_1 = "`U.\nF<\n}gzL$eRXc.'#?"
        int_0 = 1587
        str_2 = 'collections.OrderedDict'
        str_3 = '!\x0bf~y@'
        str_4 = module_1.doctest(str_3)
        dict_0 = {str_2: int_0}
        str_5 = "2y\x0bnc'[mQ|DL\\X"
        bool_0 = module_1.is_public_family(str_1)
        str_6 = 'r\r (I*A!i7{Fs`t(h'
        str_7 = '|'
        dict_1 = {str_5: str_6, str_0: str_7, str_7: str_7, str_1: str_7}
        parser_0 = module_1.Parser(int_0, dict_0, dict_1, dict_1, dict_1)
        parser_0.api(str_0, async_function_def_0, prefix=str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = "fD\x0c_'/p]FJq\n\x0cfQ>D"
        float_0 = 106.0
        dict_0 = {str_0: float_0}
        expr_0 = module_0.expr(**dict_0)
        dict_1 = {str_0: str_0}
        parser_0 = module_1.Parser(dict_1)
        str_1 = parser_0.resolve(str_0, expr_0)
        str_2 = module_1.const_type(expr_0)
        str_3 = None
        str_4 = module_1.doctest(str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = "^\t>x&'o6\tL&S"
        str_1 = module_1.doctest(str_0)
        name_0 = module_0.Name()
        str_2 = '=Ya5:=Z7F-M&T'
        str_3 = None
        dict_0 = {str_0: str_2}
        expr_0 = module_0.expr(**dict_0)
        expr_1 = module_0.expr()
        list_0 = [expr_0, expr_0, expr_1]
        list_1 = []
        assign_0 = module_0.Assign(*list_1, **dict_0)
        tuple_0 = (assign_0,)
        stmt_0 = None
        list_2 = [tuple_0, stmt_0, stmt_0, stmt_0]
        bool_0 = True
        str_4 = '.'
        str_5 = 'buMh2Lr1Q'
        str_6 = '_#cZ=x}wL'
        str_7 = None
        dict_1 = {str_4: str_3, str_5: str_1, str_2: str_6, str_2: str_7}
        set_0 = None
        dict_2 = {str_3: set_0}
        parser_0 = module_1.Parser(bool_0, dict_1, dict_2, dict_1)
        parser_0.class_api(str_3, str_3, list_0, list_2)
    except BaseException:
        pass

def test_case_17():
    try:
        assign_0 = module_0.Assign()
        int_0 = 2962
        str_0 = None
        int_1 = 3050
        str_1 = ''
        str_2 = ')#'
        list_0 = [str_0]
        arguments_0 = module_0.arguments(*list_0)
        none_type_0 = None
        bool_0 = True
        bool_1 = None
        bool_2 = False
        int_2 = -571
        str_3 = '*i'
        int_3 = -68
        dict_0 = {str_1: int_1, str_1: int_0, str_0: int_2, str_3: int_3}
        parser_0 = module_1.Parser(bool_2, bool_2, dict_0)
        parser_0.func_api(str_2, str_0, arguments_0, none_type_0, has_self=bool_0, cls_method=bool_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ':%\\YP\tuOt'
        str_1 = module_1.parent(str_0)
        str_2 = '\n -+[V|'
        str_3 = 't=029^a'
        list_0 = [str_3]
        arguments_0 = module_0.arguments(*list_0)
        optional_0 = None
        bool_0 = False
        bool_1 = False
        dict_0 = {}
        parser_0 = module_1.Parser(bool_1, dict_0, dict_0, dict_0)
        parser_0.func_api(str_2, str_3, arguments_0, optional_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'v er'
        str_1 = module_1.parent(str_0)
        iterable_0 = None
        str_2 = module_1.table(items=iterable_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        str_0 = ']<g:3Nb#b=z\n8cwX'
        str_1 = '=>.e\n\nLNe'
        str_2 = module_1.code(str_1)
        str_3 = 's%U'
        list_0 = []
        stmt_0 = None
        list_1 = [stmt_0, stmt_0, stmt_0, stmt_0]
        int_0 = 2784
        str_4 = None
        dict_0 = {str_4: int_0, str_0: int_0}
        str_5 = ";STYSS'q"
        str_6 = None
        dict_1 = {str_5: str_6, str_6: str_4}
        str_7 = '%N[_~_A`naTh;^(ztsp'
        str_8 = '<h;"@X A$!t0GcYUX5'
        set_0 = {str_8, str_0, str_0}
        str_9 = "'#"
        dict_2 = {str_7: set_0, str_9: set_0, str_4: set_0, str_7: set_0}
        parser_0 = module_1.Parser(int_0, dict_0, dict_1, dict_1, dict_2)
        parser_0.class_api(str_1, str_3, list_0, list_1)
        bool_1 = module_1.is_magic(str_0)
        str_10 = ''
        str_11 = module_1.esc_underscore(str_10)
        str_12 = '\\/'
        list_2 = []
        str_13 = module_1.esc_underscore(str_7)
        assign_0 = module_0.Assign(*list_2)
        parser_1 = module_1.Parser(bool_0, dict_1, dict_1, dict_1)
        parser_1.globals(str_12, assign_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = None
        dict_0 = {}
        str_1 = None
        str_2 = None
        str_3 = 'R=$j,_6\r/\tgS+'
        list_0 = [str_1, str_3, str_0, dict_0]
        arguments_0 = module_0.arguments(*list_0)
        none_type_0 = None
        str_4 = 'eMKq<}'
        expr_0 = module_0.expr()
        int_0 = 3
        bool_0 = False
        parser_0 = module_1.Parser(int_0, bool_0, dict_0)
        str_5 = parser_0.resolve(str_4, expr_0)
        bool_1 = True
        str_6 = '.'
        int_1 = 2
        str_7 = 'i"s5SFvA;0(Z'
        str_8 = 'typing.AsyncIterable'
        int_2 = 2427
        dict_1 = {str_6: int_1, str_7: int_1, str_8: int_1, str_6: int_2}
        parser_1 = module_1.Parser(dict_1, dict_0, dict_0)
        parser_1.func_api(str_3, str_2, arguments_0, none_type_0, has_self=bool_1, cls_method=bool_1)
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = False
        str_0 = '8l>MrTO'
        str_1 = 'rI}30(JAO'
        dict_0 = {str_0: str_0, str_0: str_1}
        str_2 = 'v"amRs6'
        set_0 = {str_2, str_0}
        str_3 = 'MXmFlg>-5~yC2<'
        str_4 = 'x7'
        resolver_0 = module_1.Resolver(str_3, dict_0, str_4)
        str_5 = "_Axd+3,|Q2)i'j{E:}kY"
        dict_1 = {str_1: set_0, str_5: set_0}
        parser_0 = module_1.Parser(bool_0, dict_0, dict_1, dict_0)
        var_0 = parser_0.__post_init__()
        list_0 = [bool_0]
        dict_2 = {}
        import_from_0 = module_0.ImportFrom(*list_0, **dict_2)
        parser_0.imports(str_2, import_from_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'typing.AbstractSet'
        dict_0 = {}
        parser_0 = module_1.Parser(dict_0)
        var_0 = parser_0.__repr__()
        bool_0 = module_1.is_magic(str_0)
        str_1 = 'A:abd'
        str_2 = 'L\tfJl\\E*UGrquC]^sNX'
        dict_1 = {str_2: str_0, str_2: str_2}
        list_0 = [dict_0, str_2, dict_1]
        import_from_0 = module_0.ImportFrom(*list_0)
        parser_0.imports(str_1, import_from_0)
    except BaseException:
        pass

def test_case_24():
    try:
        import_from_0 = module_0.ImportFrom()
        str_0 = '\x0b"yW'
        iterable_0 = None
        list_0 = [str_0]
        str_1 = module_1.table(*list_0, items=iterable_0)
    except BaseException:
        pass

def test_case_25():
    try:
        list_0 = []
        str_0 = '```'
        str_1 = module_1.doctest(str_0)
        stmt_0 = None
        str_2 = 'k95'
        bool_0 = module_1.is_public_family(str_2)
        list_1 = [stmt_0]
        bool_1 = True
        expr_0 = module_0.expr()
        str_3 = '8(O]rGwu{ \t.C'
        dict_0 = {}
        set_0 = {str_3}
        dict_1 = {str_3: set_0, str_3: set_0, str_3: set_0}
        parser_0 = module_1.Parser(bool_1, bool_1, dict_0, dict_1)
        str_4 = '`92sXyu#u|3wrNR+'
        import_from_0 = module_0.ImportFrom()
        parser_0.imports(str_4, import_from_0)
        ann_assign_0 = None
        parser_0.globals(str_4, ann_assign_0)
        parser_0.class_api(str_3, str_3, list_0, list_1)
        iterable_0 = None
        list_2 = [str_2]
        str_5 = module_1.table(*list_2, items=iterable_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'zLU Mo.scyp(\r>}'
        class_def_0 = None
        expr_0 = None
        str_1 = module_1.const_type(expr_0)
        str_2 = 'Y9-WbH'
        str_3 = '_E7/fOOZwdy\r\tp%+E}'
        str_4 = ''
        str_5 = None
        list_0 = [expr_0]
        name_0 = module_0.Name(*list_0)
        str_6 = '2\nxqM k\rE\nG\t'
        str_7 = '/3)L~y+qse]! &C`R'
        str_8 = 'No!\re\nY|Hh?9S~`xT+5['
        dict_0 = {str_6: str_2, str_4: str_1, str_5: str_7, str_8: str_2}
        resolver_0 = module_1.Resolver(str_4, dict_0)
        str_9 = '_-<]wO:)-,cMt,X^Hi'
        list_1 = []
        list_2 = []
        bool_0 = False
        str_10 = None
        int_0 = -425
        str_11 = "}\nr'%r3\x0c"
        int_1 = -4705
        dict_1 = {str_10: int_0, str_11: int_1, str_8: int_0}
        str_12 = '.\\-oD?8~wBQ`'
        str_13 = '6Z\tk'
        str_14 = '@classmethod'
        set_0 = {str_13, str_14}
        str_15 = 'z[{`sx~fB'
        dict_2 = {str_12: set_0, str_1: set_0, str_13: set_0, str_15: set_0}
        parser_0 = module_1.Parser(bool_0, dict_1, dict_2, dict_0, dict_0)
        parser_0.class_api(str_9, str_2, list_1, list_2)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        dict_3 = {str_3: str_3, str_3: str_4, str_3: str_5}
        parser_1 = module_1.Parser(dict_3, dict_3)
        parser_1.api(str_0, class_def_0, prefix=str_2)
    except BaseException:
        pass