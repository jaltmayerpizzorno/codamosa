# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    parser_0 = module_0.Parser()

def test_case_1():
    str_0 = ''
    str_1 = module_0.parent(str_0)

def test_case_2():
    str_0 = '6,'
    str_1 = module_0.code(str_0)
    bool_0 = module_0.is_public_family(str_1)

def test_case_3():
    str_0 = 'OX,ru#'
    str_1 = None
    dict_0 = {str_1: str_1}
    parser_0 = module_0.Parser(dict_0)
    parser_0.parse(str_0, str_0)

def test_case_4():
    str_0 = '>:'
    str_1 = module_0.code(str_0)

def test_case_5():
    str_0 = '_\x0c'
    str_1 = module_0.esc_underscore(str_0)

def test_case_6():
    str_0 = '_9&60GgI`(\r0D'
    str_1 = module_0.esc_underscore(str_0)
    str_2 = module_0.doctest(str_0)

def test_case_7():
    expr_0 = module_1.expr()
    str_0 = module_0.const_type(expr_0)

def test_case_8():
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0]
    subscript_0 = module_1.Subscript(*list_0)
    str_0 = '~iVl QCxI^\n{#;wZV?'
    str_1 = '60xh4|'
    str_2 = '@!I~V\x0bl5}-vA)9G$S/wt'
    dict_0 = {str_0: str_0, str_1: str_2}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)

def test_case_9():
    str_0 = '{vtMNY\rz:]8!'
    str_1 = module_0.doctest(str_0)
    parser_0 = module_0.Parser()
    assign_0 = None
    bool_0 = False
    int_0 = 3
    str_2 = 'c-.T/hJP}H*AI! a'
    dict_0 = {str_1: str_2}
    list_0 = [bool_0, assign_0]
    constant_0 = module_1.Constant(*list_0)
    str_3 = 'Ou2{Sl\twR'
    resolver_0 = module_0.Resolver(str_3, dict_0)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)
    parser_1 = module_0.Parser(bool_0, int_0, dict_0, dict_0)
    str_4 = 'Mf'
    str_5 = module_0.code(str_4)

def test_case_10():
    str_0 = '5lDq-8bR{A+M'
    str_1 = '+2vT^d\x0bZN4\t?1\tF,o\x0b)'
    list_0 = [str_0, str_0, str_1, str_0]
    list_1 = [list_0, list_0]
    assign_0 = module_1.Assign(*list_1)
    list_2 = [assign_0, assign_0]
    attribute_0 = module_1.Attribute(*list_2)
    str_2 = '<'
    str_3 = 'B")CPn6jenn'
    str_4 = 'dH!3%N6y|Q[n'
    str_5 = "KeYQ1B\x0b&n& '1U\x0bJK*=q"
    str_6 = ''
    dict_0 = {str_2: str_3, str_2: str_2, str_2: str_4, str_5: str_6}
    resolver_0 = module_0.Resolver(str_2, dict_0)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)

def test_case_11():
    bool_0 = True
    dict_0 = None
    str_0 = 'str'
    str_1 = None
    str_2 = '#?'
    dict_1 = {str_0: str_1, str_1: str_1, str_2: str_0}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1)

def test_case_12():
    list_0 = []
    stmt_0 = None
    list_1 = [stmt_0]
    bool_0 = True
    str_0 = '8(O]rGwu{ \t.C'
    dict_0 = {}
    set_0 = {str_0}
    dict_1 = {str_0: set_0, str_0: set_0, str_0: set_0}
    parser_0 = module_0.Parser(bool_0, bool_0, dict_0, dict_1)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_13():
    str_0 = '=}8 ;x&5]!\x0c}\x0b\x0b0@'
    str_1 = "jJ\rP\t;gLzpL'QI4 bVpH"
    module_x_var_0 = None
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0, dict_0, dict_0)
    parser_0.load_docstring(str_0, module_x_var_0)
    str_2 = 'return'
    str_3 = None
    str_4 = ''
    dict_1 = {str_2: str_0, str_1: str_2, str_3: str_1, str_0: str_4}
    parser_1 = module_0.Parser(dict_1)
    str_5 = '='
    list_0 = []
    stmt_0 = None
    str_6 = 'T('
    list_1 = [stmt_0, stmt_0]
    parser_0.class_api(str_1, str_6, list_0, list_1)
    parser_1.class_api(str_5, str_5, list_0, list_1)

def test_case_14():
    str_0 = '{vtMNY\rz:]8!'
    str_1 = module_0.doctest(str_0)
    parser_0 = module_0.Parser()
    str_2 = parser_0.compile()

def test_case_15():
    dict_0 = {}
    str_0 = '8e`HZ1QN'
    str_1 = ']'
    str_2 = None
    str_3 = None
    str_4 = None
    dict_1 = {str_0: str_0, str_1: str_2, str_3: str_4}
    bool_0 = False
    int_0 = 320
    dict_2 = {}
    parser_0 = module_0.Parser(bool_0, int_0, dict_1, dict_2, dict_0)
    str_5 = parser_0.compile()
    bool_1 = False
    int_1 = 1786
    dict_3 = {str_1: int_1}
    parser_1 = module_0.Parser(bool_1, dict_3, dict_0)
    str_6 = 'YWWvHl!1'
    str_7 = '\nF'
    parser_0.parse(str_6, str_7)

def test_case_16():
    str_0 = 'c\x0ck+)d&S,9'
    str_1 = '-d'
    list_0 = []
    stmt_0 = None
    list_1 = [stmt_0]
    bool_0 = True
    str_2 = 'O]rGwun \t.C'
    dict_0 = {str_2: str_2}
    str_3 = 'a'
    set_0 = {str_0}
    dict_1 = {str_3: set_0, str_3: set_0, str_3: set_0}
    parser_0 = module_0.Parser(bool_0, bool_0, dict_0, dict_1)
    parser_0.class_api(str_1, str_0, list_0, list_1)
    str_4 = module_0.parent(str_0)
    str_5 = module_0.code(str_0)

def test_case_17():
    str_0 = '*II*UC>s>4W7_>@<'
    list_0 = [str_0, str_0, str_0]
    assign_0 = module_1.Assign(*list_0)
    bool_0 = False
    bool_1 = False
    str_1 = '\t`GV\x0baMt\x0b<'
    str_2 = "';&)+,9PvyD#bS<G\x0bz;@"
    str_3 = None
    dict_0 = {str_1: str_2, str_3: str_3}
    parser_0 = module_0.Parser(bool_0, bool_1, dict_0, dict_0)
    parser_0.globals(str_0, assign_0)
    str_4 = 'e43au\n"Lwa'
    dict_1 = {}
    import_from_0 = module_1.ImportFrom(**dict_1)
    str_5 = module_0.doctest(str_4)

def test_case_18():
    str_0 = 'e43au\n"Lwa'
    dict_0 = {}
    import_from_0 = module_1.ImportFrom(**dict_0)
    int_0 = 695
    str_1 = '<9Yng}X\r-\t<%2'
    dict_1 = {str_1: int_0, str_1: int_0}
    str_2 = 'F{CH'
    str_3 = '[f\rCf'
    dict_2 = {str_1: str_2, str_1: str_3}
    parser_0 = module_0.Parser(int_0, dict_1, dict_2, dict_2, dict_2)
    parser_0.imports(str_0, import_from_0)

def test_case_19():
    import_from_0 = module_1.ImportFrom()
    bool_0 = True
    str_0 = "t:W\n(9TuZH\tBFY'rS"
    module_x_var_0 = None
    str_1 = 'i(\x0b5V\rhOr\x0cM)\x0b'
    str_2 = module_0.esc_underscore(str_1)
    int_0 = -930
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, int_0, dict_0, dict_0)
    var_0 = parser_0.__repr__()
    parser_0.load_docstring(str_0, module_x_var_0)
    str_3 = '_._vAhm/I~qX'
    bool_1 = module_0.is_public_family(str_3)

def test_case_20():
    str_0 = '5\\'
    expr_0 = module_1.expr()
    bool_0 = True
    str_1 = 'A\t #,Ca'
    int_0 = 4114
    list_0 = [str_0]
    constant_0 = module_1.Constant(*list_0)
    str_2 = '\tL+rwC$7O:nV?UMkS'
    str_3 = '\\/'
    str_4 = '0d'
    dict_0 = {str_0: str_1, str_0: str_3, str_4: str_2, str_4: str_4}
    resolver_0 = module_0.Resolver(str_2, dict_0)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)
    str_5 = '_:98jj'
    dict_1 = {str_1: int_0, str_5: int_0}
    str_6 = "!NT\n50W\rd(o1SB&?'8"
    str_7 = '3m'
    str_8 = 'G+o?^T>pW!j'
    dict_2 = {str_1: str_6, str_1: str_2, str_7: str_8}
    parser_0 = module_0.Parser(bool_0, dict_1, dict_2, dict_2)
    str_9 = parser_0.resolve(str_0, expr_0)

def test_case_21():
    assign_0 = module_1.Assign()
    str_0 = ''
    str_1 = module_0.code(str_0)
    str_2 = 'n5a;e3s'
    import_from_0 = module_1.ImportFrom()
    str_3 = 'y\x0cMSP(79{hdj'
    int_0 = 4299
    str_4 = 'W'
    list_0 = [str_4, str_3]
    bool_0 = False
    dict_0 = {}
    str_5 = '\x0bo-S#B\tk:x'
    set_0 = {str_5}
    str_6 = ',td\r*a2S^Q0O*{'
    dict_1 = {str_2: set_0, str_6: set_0}
    str_7 = '#x?C\t*[IPr'
    str_8 = 'pI\tX-\x0brOn?5}$7Q)}tU'
    str_9 = '5R0/[<r+\\CpN>`hmvp'
    str_10 = 'no module for '
    dict_2 = {str_7: str_8, str_0: str_3, str_9: str_10}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1, dict_2, dict_2)
    var_0 = parser_0.__eq__(list_0)
    str_11 = None
    int_1 = 513
    dict_3 = {str_3: int_0, str_11: int_0, str_11: int_1}
    parser_1 = module_0.Parser(dict_3)
    parser_1.imports(str_2, import_from_0)
    bool_1 = False
    str_12 = 'N,\x0bb-A^]'
    int_2 = -2368
    int_3 = -921
    dict_4 = {str_12: int_2, str_12: int_3}
    dict_5 = {}
    parser_2 = module_0.Parser(bool_1, dict_4, dict_5)
    var_1 = parser_2.__eq__(assign_0)

def test_case_22():
    str_0 = '-d'
    str_1 = module_0.doctest(str_0)
    list_0 = []
    bool_0 = True
    expr_0 = module_1.expr()
    int_0 = -2230
    dict_0 = {str_0: int_0}
    str_2 = '<fc$3u/'
    str_3 = "['`Y&mqS{?F\x0c"
    str_4 = None
    list_1 = [list_0, str_2]
    str_5 = '.'
    dict_1 = {str_3: dict_0, str_5: str_2, str_2: str_2, str_3: list_1}
    ann_assign_0 = module_1.AnnAssign(*list_1, **dict_1)
    str_6 = None
    str_7 = None
    set_0 = {str_5, str_7}
    str_8 = '8o7O2C.^'
    dict_2 = {str_6: set_0, str_8: set_0, str_4: set_0}
    parser_0 = module_0.Parser(int_0, dict_0, dict_2)
    parser_0.globals(str_4, ann_assign_0)
    str_9 = parser_0.compile()
    set_1 = set()
    expr_1 = module_1.expr()
    str_10 = parser_0.resolve(str_2, expr_1)
    bool_1 = module_0.is_public_family(str_0)
    str_11 = '(O]rGwu{ \t.C'
    dict_3 = {str_11: str_11}
    dict_4 = {str_0: set_1, str_0: set_1, str_0: set_1}
    parser_1 = module_0.Parser(bool_0, bool_0, dict_3, dict_4)
    str_12 = module_0.parent(str_11)

def test_case_23():
    str_0 = 'd'
    str_1 = module_0.doctest(str_0)
    list_0 = []
    bool_0 = True
    expr_0 = module_1.expr()
    str_2 = module_0.const_type(expr_0)
    int_0 = -2230
    dict_0 = {str_0: int_0}
    str_3 = '<fc$3u/'
    str_4 = None
    list_1 = [list_0, str_3]
    str_5 = '?Y(\x0cG29qsi.S=#b'
    dict_1 = {str_2: dict_0, str_0: str_2, str_2: str_3, str_5: list_1}
    ann_assign_0 = module_1.AnnAssign(*list_1, **dict_1)
    str_6 = None
    set_0 = {str_3, str_2}
    str_7 = '\x0b]'
    dict_2 = {str_6: set_0, str_7: set_0, str_4: set_0}
    parser_0 = module_0.Parser(int_0, dict_0, dict_2)
    parser_0.globals(str_4, ann_assign_0)
    str_8 = parser_0.compile()
    set_1 = set()
    dict_3 = {str_3: set_1}
    str_9 = '@'
    dict_4 = {str_9: str_0, str_3: str_8, str_0: str_9, str_0: str_9}
    expr_1 = module_1.expr()
    bool_1 = True
    int_1 = -3467
    parser_1 = module_0.Parser(bool_1, int_1, dict_0, dict_4, dict_4, dict_3, dict_4)
    str_10 = parser_1.resolve(str_3, expr_1)
    bool_2 = module_0.is_public_family(str_0)
    str_11 = '(O]rGwu{ \t.C'
    dict_5 = {str_11: str_11}
    dict_6 = {str_0: set_1, str_0: set_1, str_0: set_1}
    parser_2 = module_0.Parser(bool_0, bool_0, dict_5, dict_6)
    str_12 = module_0.parent(str_11)
    bool_3 = parser_1.is_public(str_9)