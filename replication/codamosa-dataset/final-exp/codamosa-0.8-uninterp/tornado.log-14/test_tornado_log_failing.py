# Automatically generated by Pynguin.
import tornado.log as module_0
import logging as module_1

def test_case_0():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = log_formatter_0.format(log_formatter_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '?6'
        str_1 = ''
        str_2 = "'T"
        log_formatter_0 = module_0.LogFormatter(str_1, str_2)
        str_3 = ''
        str_4 = '.hslkCTT\nyGt$L!'
        log_formatter_1 = module_0.LogFormatter(str_4, str_3)
        bool_0 = False
        dict_0 = {}
        log_formatter_2 = module_0.LogFormatter(str_0, bool_0, dict_0)
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_3():
    try:
        module_0.enable_pretty_logging()
        str_0 = '=2L$Qn5p[v]jHae;)'
        module_0.enable_pretty_logging(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '_kR\t;rO\nTlk_;#v'
        module_0.define_logging_options(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.enable_pretty_logging()
        int_0 = -2023
        str_0 = '5AEu0,xJuS'
        str_1 = 'xo:4&5lU6K\x0c"@VS9\n&/0'
        bool_0 = True
        dict_0 = {}
        log_formatter_0 = module_0.LogFormatter(str_0, str_1, bool_0, dict_0)
        str_2 = log_formatter_0.format(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        list_1 = [list_0]
        tuple_0 = ()
        str_0 = None
        bool_0 = True
        log_formatter_0 = module_0.LogFormatter(str_0, str_0, bool_0)
        set_0 = None
        log_record_0 = module_1.LogRecord(log_formatter_0, log_formatter_0, list_0, list_0, list_1, tuple_0, set_0)
        str_1 = log_formatter_0.format(log_record_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'openid.ax.required'
        log_formatter_0 = module_0.LogFormatter(str_0, str_0)
        list_0 = None
        list_1 = [list_0]
        module_0.enable_pretty_logging()
        str_1 = None
        optional_0 = None
        int_0 = 1868
        logger_0 = module_1.Logger(int_0, int_0)
        module_0.enable_pretty_logging(optional_0, logger_0)
        bool_0 = True
        log_formatter_1 = module_0.LogFormatter(str_1, str_1, bool_0)
        log_record_0 = module_1.LogRecord(log_formatter_0, log_formatter_0, list_0, list_0, list_1, list_0, bool_0)
        str_2 = log_formatter_0.format(log_record_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {str_0: str_0}
        list_0 = None
        bytes_0 = b'\xed}\xec\x7fT\xc9\xee\x7f\xcf\xeb\x03'
        tuple_0 = (dict_0, dict_0, list_0, bytes_0)
        bool_0 = True
        log_record_0 = module_1.LogRecord(str_0, str_0, str_0, dict_0, dict_1, tuple_0, tuple_0, bool_0)
        str_1 = 'nunV'
        log_formatter_0 = module_0.LogFormatter(str_1, str_1)
        str_2 = log_formatter_0.format(log_record_0)
    except BaseException:
        pass