# Automatically generated by Pynguin.
import blib2to3.pgen2.parse as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        grammar_0 = None
        int_0 = 596
        parser_0 = module_0.Parser(grammar_0)
        str_0 = 'j'
        int_1 = -1300
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        str_1 = '<{G'
        dict_0 = {str_0: parser_0, str_0: parser_0, str_1: str_0}
        tuple_2 = (int_0, parser_0, tuple_1, dict_0)
        var_0 = module_0.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = None
        grammar_0 = module_1.Grammar()
        int_0 = 26
        parser_0 = module_0.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        grammar_0 = module_1.Grammar()
        parser_0 = module_0.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_3():
    try:
        grammar_0 = module_1.Grammar()
        parser_0 = module_0.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = None
        grammar_0 = module_1.Grammar()
        int_0 = True
        parser_0 = module_0.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1951
        str_0 = 'BW'
        int_1 = 2613
        tuple_0 = None
        grammar_0 = module_1.Grammar()
        parser_0 = module_0.Parser(grammar_0)
        parser_0.shift(int_0, str_0, int_1, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1443
        tuple_0 = None
        int_1 = 40
        tuple_1 = (int_1, int_0)
        list_0 = [tuple_0, tuple_1, tuple_0]
        list_1 = [list_0, list_0, list_0]
        dict_0 = None
        tuple_2 = (list_1, dict_0)
        str_0 = '^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)'
        tuple_3 = (str_0, tuple_1)
        grammar_0 = module_1.Grammar()
        parser_0 = module_0.Parser(grammar_0)
        parser_0.push(int_0, tuple_2, int_1, tuple_3)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 917
        grammar_0 = module_1.Grammar()
        parser_0 = module_0.Parser(grammar_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 48
        str_0 = '3Gs]e<;2uP[@P3'
        int_1 = 43
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_1.Grammar()
        none_type_0 = None
        tuple_2 = (int_1, str_0, tuple_1, none_type_0)
        var_0 = module_0.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = None
        grammar_0 = module_1.Grammar()
        int_0 = True
        none_type_0 = None
        parser_0 = module_0.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, none_type_0, tuple_0)
    except BaseException:
        pass