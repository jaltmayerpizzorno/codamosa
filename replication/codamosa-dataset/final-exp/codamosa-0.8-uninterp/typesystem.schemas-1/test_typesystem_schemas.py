# Automatically generated by Pynguin.
import typesystem.schemas as module_0

def test_case_0():
    pass

def test_case_1():
    schema_definitions_0 = module_0.SchemaDefinitions()

def test_case_2():
    str_0 = "\n        text - The error message. 'May not have more than 100 characters'\n        code - An optional error code, eg. 'max_length'\n        key - An optional key of the message within a single parent. eg. 'username'\n        index - The index of the message within a nested object. eg. ['users', 3, 'username']\n\n        Optionally either:\n\n        position - The start and end position of the error message within the raw content.\n\n        Or:\n\n        start_position - The start position of the error message within the raw content.\n        end_position - The end position of the error message within the raw content.\n        "
    schema_definitions_0 = module_0.SchemaDefinitions()
    iterator_0 = schema_definitions_0.__iter__()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    schema_0 = module_0.Schema(*list_0)
    int_0 = schema_0.__len__()

def test_case_3():
    schema_0 = module_0.Schema()
    iterator_0 = schema_0.__iter__()
    list_0 = [iterator_0]
    dict_0 = {}
    schema_definitions_0 = module_0.SchemaDefinitions(*list_0, **dict_0)
    int_0 = schema_definitions_0.__len__()

def test_case_4():
    schema_0 = module_0.Schema()
    iterator_0 = schema_0.__iter__()
    schema_definitions_0 = module_0.SchemaDefinitions()
    schema_definitions_0.__setitem__(iterator_0, iterator_0)

def test_case_5():
    schema_definitions_0 = module_0.SchemaDefinitions()
    schema_0 = module_0.Schema()
    module_0.set_definitions(schema_0, schema_definitions_0)

def test_case_6():
    schema_0 = module_0.Schema()

def test_case_7():
    bool_0 = True
    list_0 = [bool_0]
    schema_0 = module_0.Schema(*list_0)

def test_case_8():
    bool_0 = True
    list_0 = [bool_0]
    schema_0 = module_0.Schema(*list_0)
    bool_1 = schema_0.__eq__(list_0)

def test_case_9():
    schema_0 = module_0.Schema()
    int_0 = schema_0.__len__()

def test_case_10():
    str_0 = '\x0b5"2`!vXz(x'
    reference_0 = module_0.Reference(str_0)

def test_case_11():
    str_0 = None
    dict_0 = {str_0: str_0, str_0: str_0}
    str_1 = 'w}mNY,\x0c[w~X\tdwnz)e'
    reference_0 = module_0.Reference(str_1)
    any_0 = reference_0.serialize(dict_0)
    schema_0 = module_0.Schema()
    str_2 = schema_0.__repr__()

def test_case_12():
    str_0 = None
    str_1 = '|A6p9|\x0bQeM[nm~.7(li'
    reference_0 = module_0.Reference(str_1)
    any_0 = reference_0.serialize(str_0)

def test_case_13():
    schema_0 = module_0.Schema()
    var_0 = list(schema_0)

def test_case_14():
    schema_0 = module_0.Schema()
    str_0 = schema_0.__repr__()

def test_case_15():
    str_0 = "\n        text - The error message. 'May not have more than 100 characters'\n        code - An optional error code, eg. 'max_length'\n        key - An optional key of the message within a single parent. eg. 'username'\n        index - The index of the message within a nested object. eg. ['users', 3, 'username']\n\n        Optionally either:\n\n        position - The start and end position of the error message within the raw content.\n\n        Or:\n\n        start_position - The start position of the error message within the raw content.\n        end_position - The end position of the error message within the raw content.\n        "
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    schema_0 = module_0.Schema(*list_0)