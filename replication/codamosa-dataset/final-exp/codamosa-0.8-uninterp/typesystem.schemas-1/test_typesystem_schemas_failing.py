# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = 'AEL'
        reference_0 = module_0.Reference(str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        any_0 = schema_definitions_0.__getitem__(reference_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Must be greater than {exclusive_minimum}.'
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        field_0 = module_1.Field(description=str_0)
        list_0 = []
        bool_0 = field_0.has_default()
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0)
        str_1 = '[e'
        schema_definitions_0.__delitem__(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'uI'
        str_1 = 'Invalid property name.'
        dict_0 = {str_0: iterator_0, str_1: str_0, str_0: str_0}
        schema_1 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        field_0 = module_1.Field(title=str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        reference_0 = module_0.Reference(str_0)
        schema_definitions_1 = module_0.SchemaDefinitions()
        any_0 = reference_0.serialize(schema_definitions_0)
        module_0.set_definitions(field_0, schema_definitions_1)
        module_0.set_definitions(field_0, schema_definitions_0)
        str_1 = None
        reference_1 = module_0.Reference(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'child'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'OTo|OXR0cbfB>+;'
        set_0 = set()
        reference_0 = module_0.Reference(str_0, set_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        schema_0 = module_0.Schema()
        dict_0 = {}
        list_0 = [dict_0, dict_0, schema_0]
        schema_1 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'name'
        schema_0 = module_0.Schema()
        str_1 = schema_0.__repr__()
        any_0 = schema_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        str_0 = ''
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(str_0, bool_0)
        iterator_0 = schema_definitions_0.__iter__()
        schema_definitions_1 = module_0.SchemaDefinitions()
        iterator_1 = schema_definitions_1.__iter__()
        schema_0 = module_0.Schema()
        bool_1 = schema_0.__eq__(schema_0)
        schema_metaclass_0 = module_0.SchemaMetaclass()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = "' d&hga~@(J_bauO"
        field_0 = module_1.Field(title=str_0, default=str_0)
        bool_0 = True
        str_1 = ''
        list_0 = [field_0]
        schema_0 = module_0.Schema(*list_0)
        field_1 = module_1.Field(title=str_1)
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(str_1, bool_0)
        reference_0 = module_0.Reference(str_0)
        int_0 = schema_0.__len__()
        any_0 = field_0.get_default_value()
        iterator_0 = schema_definitions_0.__iter__()
        bool_1 = schema_0.__eq__(schema_definitions_0)
        dict_0 = {str_1: field_0}
        schema_definitions_1 = module_0.SchemaDefinitions()
        schema_definitions_2 = module_0.SchemaDefinitions()
        any_1 = reference_0.serialize(schema_0)
        module_0.set_definitions(field_1, schema_definitions_2)
        iterator_1 = schema_definitions_0.__iter__()
        field_2 = module_1.Field(default=str_0)
        module_0.set_definitions(field_2, schema_definitions_1)
        str_2 = schema_0.__repr__()
        any_2 = field_2.get_default_value()
        bool_2 = field_1.has_default()
        schema_1 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "' d&hga~@(J_bauO"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        reference_0 = module_0.Reference(str_0, dict_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        field_0 = module_1.Field(title=str_0)
        reference_0 = module_0.Reference(str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        any_0 = reference_0.serialize(schema_definitions_0)
        any_1 = field_0.get_default_value()
        schema_0 = module_0.Schema()
        any_2 = reference_0.validate(any_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "' d&hga~@(J_bauO"
        field_0 = module_1.Field(title=str_0, default=str_0)
        str_1 = ''
        list_0 = [field_0]
        any_0 = field_0.serialize(list_0)
        schema_0 = module_0.Schema(*list_0)
        field_1 = module_1.Field(title=str_1)
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(str_0, str_1)
        schema_definitions_0.__setitem__(str_0, schema_definitions_0)
    except BaseException:
        pass