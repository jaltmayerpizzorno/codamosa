# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        str_0 = 'Test Rule'
        str_1 = 'test_script'
        str_2 = 'test_output'
        var_0 = lambda cmd: cmd.script == str_1 and cmd.stdout == str_2
        str_3 = 'fixed_script'
        var_1 = lambda cmd: str_3
        bool_0 = False
        int_0 = 2
        rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, str_1, int_0, bool_0)
        command_0 = module_0.Command(str_1, str_2)
        var_2 = rule_0.is_match(command_0)
        command_1 = module_0.Command(str_1, var_1)
        var_3 = rule_0.is_match(command_1)
        str_4 = "z'st_scr7pt2"
        dict_0 = {}
        int_1 = -1985
        corrected_command_0 = module_0.CorrectedCommand(dict_0, int_1, int_1)
        var_4 = command_1.__eq__(corrected_command_0)
        command_2 = module_0.Command(str_4, str_2)
        dict_1 = {}
        corrected_command_1 = module_0.CorrectedCommand(bool_0, bool_0, dict_1)
        bool_1 = True
        var_5 = corrected_command_1.run(bool_1)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        list_1 = [list_0, list_0]
        str_0 = '=84xJ`'
        command_0 = module_0.Command(list_1, str_0)
        bool_0 = False
        str_1 = ''
        command_1 = module_0.Command(bool_0, str_1)
        var_0 = command_1.__eq__(command_0)
        bytes_0 = b'\x90>\xcd|B\xdb\xe2\x82\x0e\xab\x05K\xcfV\xd3'
        int_0 = -3023
        dict_0 = {}
        rule_0 = module_0.Rule(int_0, int_0, bytes_0, list_0, int_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        float_0 = -3992.064
        str_1 = '\rv2^\x0b~Pd+pIYR%+g3('
        int_0 = -1870
        corrected_command_0 = module_0.CorrectedCommand(str_1, int_0, str_0)
        dict_0 = {float_0: str_0, corrected_command_0: corrected_command_0}
        rule_0 = None
        command_0 = module_0.Command(dict_0, rule_0)
        set_0 = None
        bytes_0 = b'\xc2n\x7f\x9fn6s\x1c\xb3\x13\x08\xb0\xcc\x88\x91\x9b\xea\x80'
        corrected_command_1 = module_0.CorrectedCommand(command_0, set_0, bytes_0)
        str_2 = 'b!Tl7c;/R3V!5'
        rule_1 = module_0.Rule(str_0, float_0, corrected_command_1, corrected_command_1, dict_0, str_2, set_0)
        str_3 = 'Q;G{xK\x0cd\'"d*(9(grEC'
        float_1 = -1631.36062
        list_0 = [str_3]
        corrected_command_2 = module_0.CorrectedCommand(str_3, float_1, list_0)
        var_0 = corrected_command_2.run(rule_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'rule'
        bool_0 = False
        var_0 = lambda cmd: bool_0
        str_1 = 'ls -l'
        var_1 = lambda cmd: str_1
        bool_1 = True
        var_2 = None
        rule_0 = module_0.Rule(str_0, var_0, var_1, bool_1, var_2, bool_1, bool_1)
        str_2 = ''
        command_0 = module_0.Command(str_2, str_2)
        var_3 = rule_0.get_corrected_commands(command_0)
        var_4 = list(var_3)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'I*\\Es`Vh:;r\rQ|U$&L$'
        str_1 = ''
        str_2 = 'repeat'
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
        list_0 = []
        float_0 = 1041.3
        set_0 = {str_1, str_1}
        list_1 = [dict_0, str_2, float_0]
        command_0 = module_0.Command(float_0, set_0)
        corrected_command_0 = module_0.CorrectedCommand(list_1, command_0, list_1)
        bool_0 = True
        complex_0 = None
        str_3 = '4'
        bool_1 = False
        corrected_command_1 = module_0.CorrectedCommand(str_3, bool_1, dict_0)
        rule_0 = module_0.Rule(list_0, corrected_command_0, str_2, bool_0, corrected_command_0, complex_0, corrected_command_1)
        tuple_0 = (bool_0, str_2, command_0)
        corrected_command_2 = module_0.CorrectedCommand(rule_0, tuple_0, complex_0)
        str_4 = 'f'
        bool_2 = False
        dict_1 = {}
        corrected_command_3 = module_0.CorrectedCommand(str_4, bool_2, dict_1)
        str_5 = ' git clone '
        bytes_0 = b''
        str_6 = "y_L?A=+tx-Chd$'iv}f."
        str_7 = ''
        str_8 = None
        dict_2 = {str_8: corrected_command_3}
        int_0 = 1348
        rule_1 = module_0.Rule(bytes_0, str_6, str_7, bool_2, dict_2, corrected_command_3, int_0)
        rule_2 = module_0.Rule(corrected_command_3, float_0, set_0, corrected_command_3, str_5, rule_1, dict_1)
        bytes_1 = b'\x03\xed\xe5\x8a\xf9k\x99\xf0\xb6\x85 \x8b\x945fe'
        command_1 = module_0.Command(list_0, dict_1)
        str_9 = '|f_m'
        command_2 = module_0.Command(command_1, str_9)
        list_2 = [command_2, bytes_0]
        tuple_1 = (set_0, bytes_1, list_2)
        rule_3 = module_0.Rule(dict_0, float_0, rule_2, int_0, dict_1, dict_1, tuple_1)
        var_0 = rule_2.__eq__(rule_2)
        str_10 = '-~xUykhQjSZx)@|tv'
        int_1 = -858
        list_3 = [str_0, str_10, int_1]
        bytes_2 = b'\x7f\xd3E\xbd\xb5c\xeb\xb4\xcb\xf8\xd1f\x81\x8e\xfdc\x9c '
        float_1 = 0.85
        corrected_command_4 = module_0.CorrectedCommand(bytes_2, list_0, float_1)
        var_1 = corrected_command_4.run(list_3)
    except BaseException:
        pass