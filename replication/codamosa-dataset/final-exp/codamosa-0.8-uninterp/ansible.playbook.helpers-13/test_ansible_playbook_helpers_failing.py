# Automatically generated by Pynguin.
import ansible.playbook.helpers as module_0
import ansible.errors as module_1
import ansible.utils.display as module_2

def test_case_0():
    try:
        str_0 = 'u,`X'
        list_0 = [str_0, str_0]
        set_0 = set()
        var_0 = module_0.load_list_of_blocks(list_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1952
        bool_0 = True
        float_0 = -2181.567384
        int_1 = 400
        list_0 = [float_0]
        bytes_0 = b'\xba1(N\r\xa3N\x92\x9f\x85I\xef\xda9[\x1a'
        str_0 = ''
        tuple_0 = (int_1, list_0, bytes_0, str_0)
        var_0 = module_0.load_list_of_blocks(int_0, bool_0, float_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'homebrew'
        int_0 = -2353
        dict_0 = None
        var_0 = module_0.load_list_of_tasks(str_0, int_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{{ include_file_path }}'
        var_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        var_1 = [var_0]
        var_2 = module_0.load_list_of_tasks(var_1, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Feb'
        float_0 = -87.246895
        dict_0 = {float_0: float_0, str_0: str_0}
        int_0 = -642
        list_0 = [str_0, int_0]
        bool_0 = True
        var_0 = module_0.load_list_of_roles(list_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'HUU\x0cIvnL4'
        dict_0 = {str_0: str_0}
        float_0 = -1468.940786
        var_0 = module_0.load_list_of_roles(str_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'name'
        str_1 = 'register'
        str_2 = '{{ include_file_path }}'
        str_3 = 'foo'
        var_0 = None
        var_1 = {str_0: str_2, str_0: str_3, str_1: var_0}
        var_2 = [var_1]
        var_3 = None
        var_4 = module_0.load_list_of_tasks(var_2, var_3)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -123.3
        dict_0 = {float_0: float_0}
        str_0 = "G&1($thL~e'@5"
        list_0 = [dict_0, dict_0, str_0, str_0]
        var_0 = module_0.load_list_of_blocks(list_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        str_0 = 'lt}L4|>.}KJQI{c[6v\x0bW'
        list_0 = [dict_0, dict_0, str_0, str_0]
        var_0 = module_0.load_list_of_blocks(list_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'include'
        var_0 = {str_0: str_0}
        var_1 = [var_0]
        var_2 = module_0.load_list_of_tasks(var_1, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'inc>uke'
        str_1 = 'name'
        var_0 = None
        var_1 = {str_0: str_0, str_1: str_0, str_0: var_0}
        var_2 = [var_1]
        complex_0 = None
        list_0 = [var_0, var_1, complex_0, var_2]
        bool_0 = False
        str_2 = 'M.K9'
        var_3 = module_0.load_list_of_blocks(list_0, bool_0, str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = None
        complex_0 = None
        list_0 = [var_0, var_0, complex_0, complex_0]
        bool_0 = True
        str_0 = 'M.K9'
        var_1 = module_0.load_list_of_blocks(list_0, bool_0, str_0)
        ansible_assertion_error_0 = module_1.AnsibleAssertionError()
        display_0 = module_2.Display()
        float_0 = -1003.1
        var_2 = module_0.load_list_of_tasks(ansible_assertion_error_0, complex_0, display_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'block'
        str_1 = 'hosts'
        str_2 = 'host1'
        str_3 = {str_1: str_2}
        str_4 = {str_0: str_3}
        str_5 = [str_4]
        str_6 = ''
        var_0 = module_0.load_list_of_tasks(str_5, str_6)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'inc>ude'
        var_0 = None
        var_1 = {str_0: str_0, str_0: str_0, str_0: var_0, str_0: str_0, str_0: var_0}
        var_2 = [var_1]
        list_0 = [var_1, var_1]
        str_1 = "}d<{vAajY%'D=N"
        var_3 = module_0.load_list_of_blocks(list_0, str_0, str_0, var_2, str_1, str_0)
    except BaseException:
        pass