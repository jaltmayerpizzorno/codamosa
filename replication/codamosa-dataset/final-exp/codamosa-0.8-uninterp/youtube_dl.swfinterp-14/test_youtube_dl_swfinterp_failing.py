# Automatically generated by Pynguin.
import youtube_dl.swfinterp as module_0

def test_case_0():
    try:
        bytes_0 = b'u\x18\xb5\x89\x97\xfd\x12\xa3\x0e\xf2Nl\xbf\x00\x0c\x01;\xb0'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'FWS'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xe7Ww'
        str_0 = ']W\n72t"'
        multiname_0 = module_0._Multiname(str_0)
        a_v_m_class__object_0 = module_0._AVMClass_Object(multiname_0)
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        undefined_0 = module_0._Undefined()
        list_0 = [undefined_0]
        var_0 = undefined_0.__bool__()
        a_v_m_class__object_0 = module_0._AVMClass_Object(list_0)
        var_1 = a_v_m_class__object_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -660
        scope_dict_0 = module_0._ScopeDict(int_0)
        var_0 = scope_dict_0.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        int_0 = 2899
        a_v_m_class_0 = module_0._AVMClass(list_0, int_0)
        var_0 = a_v_m_class_0.__repr__()
        bytes_0 = b'u\x18\xb5\x89\x97\xfd\x12\xa3\x0e\xf2Nl\xbf\x00\x0c\x01;\xb0'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = None
        a_v_m_class__object_0 = None
        str_0 = 'https://player.zype.com/embed/%s.js?api_key=jZ9GUhRmxcPvX7M3SlfejB6Hle9jyHTdk2jVxG7wOHPLODgncEKVdPYBhuz9iWXQ'
        bytes_1 = b'\x98]>\x8b\x16\x91nO\rs\x97A'
        str_1 = '!zjnTas_17{Rv&~'
        dict_0 = {str_0: bytes_0, str_1: str_1}
        dict_1 = {str_0: bytes_0, str_0: a_v_m_class__object_0, str_0: bytes_1, str_1: dict_0}
        multiname_0 = module_0._Multiname(a_v_m_class__object_0)
        a_v_m_class_0 = module_0._AVMClass(bytes_0, multiname_0)
        var_0 = a_v_m_class_0.register_methods(dict_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'FWS'
        str_0 = ']W\n72t"'
        multiname_0 = module_0._Multiname(str_0)
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'Gv\xa1'
        multiname_0 = module_0._Multiname(bytes_0)
        var_0 = multiname_0.__repr__()
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xa4\xfc\xb9*\xc7\xa2'
        list_0 = [bytes_0]
        undefined_0 = module_0._Undefined()
        var_0 = undefined_0.__hash__()
        undefined_1 = module_0._Undefined(*list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        undefined_0 = module_0._Undefined()
        var_0 = undefined_0.__str__()
        scope_dict_0 = None
        list_0 = [undefined_0, scope_dict_0]
        undefined_1 = module_0._Undefined()
        var_1 = undefined_1.__hash__()
        var_2 = undefined_0.__str__()
        dict_0 = {}
        undefined_2 = module_0._Undefined(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = None
        float_0 = 558.728
        str_0 = '>9N/\x0c.t>d>2LWuajRT(!'
        complex_0 = None
        complex_1 = None
        dict_0 = {list_0: complex_1, str_0: complex_0, list_0: float_0, str_0: complex_0}
        a_v_m_class_0 = module_0._AVMClass(dict_0, complex_1)
        dict_1 = {}
        var_0 = a_v_m_class_0.register_methods(dict_1)
        var_1 = a_v_m_class_0.__repr__()
        str_1 = ':QfJ[P6LpJZi1,_>vGX<'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        tuple_0 = ()
        float_0 = None
        a_v_m_class__object_0 = module_0._AVMClass_Object(float_0)
        undefined_0 = module_0._Undefined()
        a_v_m_class_0 = module_0._AVMClass(tuple_0, a_v_m_class__object_0, undefined_0)
        var_0 = undefined_0.__str__()
        var_1 = undefined_0.__hash__()
        scope_dict_0 = module_0._ScopeDict(a_v_m_class_0)
        var_2 = scope_dict_0.__repr__()
    except BaseException:
        pass