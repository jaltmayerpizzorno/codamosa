# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\x07\xf2\x9b\xc0\xcdp\xb1'
    var_0 = module_0.parse_kv(bytes_0)

def test_case_2():
    str_0 = "'a=b' c='d e' f='g'"
    var_0 = module_0.parse_kv(str_0)

def test_case_3():
    str_0 = 'n\t%s&%[<:'
    var_0 = module_0.join_args(str_0)

def test_case_4():
    str_0 = "'%s' is not a valid action for ad-hoc commands"
    var_0 = module_0.split_args(str_0)
    str_1 = ' fetch host object using name deal with implicit localhost '
    var_1 = module_0.split_args(str_1)

def test_case_5():
    float_0 = None
    var_0 = module_0.parse_kv(float_0)

def test_case_6():
    str_0 = ''
    var_0 = module_0.parse_kv(str_0)

def test_case_7():
    str_0 = "'a=\\b' c='d e' f='g'"
    var_0 = module_0.parse_kv(str_0)
    var_1 = module_0.join_args(str_0)
    bytes_0 = b'\xfb'
    var_2 = module_0.parse_kv(bytes_0)

def test_case_8():
    str_0 = "'a=b' c='d e' f='g'"
    bool_0 = True
    var_0 = module_0.parse_kv(str_0, bool_0)

def test_case_9():
    str_0 = "key = 'value'"
    var_0 = module_0.parse_kv(str_0)

def test_case_10():
    str_0 = '{{ foo }} {% bar %} {# baz #} \'foo bar\' "qux quux"\\\n    foobar'
    var_0 = module_0.split_args(str_0)

def test_case_11():
    var_0 = None
    var_1 = module_0.parse_kv(var_0)
    var_2 = len(var_1)
    str_0 = 'foo=bar'
    var_3 = module_0.parse_kv(str_0)
    str_1 = 'foo="bar baz"'
    var_4 = module_0.parse_kv(str_1)
    str_2 = 'foo="bar \\"baz\\""'
    var_5 = module_0.parse_kv(str_2)
    str_3 = "foo='bar \\'baz\\''"
    var_6 = module_0.parse_kv(str_3)

def test_case_12():
    str_0 = 'key=value'
    var_0 = module_0.parse_kv(str_0)
    str_1 = 'Yf'
    var_1 = module_0.parse_kv(str_0)
    var_2 = module_0.parse_kv(str_0)
    str_2 = "key='vaol e'"
    var_3 = module_0.parse_kv(str_2)
    str_3 = 'M=cwXl\tJmTV'
    str_4 = '\udc8c\x15\x1c\x00Z`\udcf2\x06\udcb3\x1c\udcbd0\udca4\udc9aM'
    var_4 = module_0.split_args(str_4)
    str_5 = '--allmatches'
    var_5 = module_0.parse_kv(str_3, str_5)
    var_6 = module_0.parse_kv(str_1)
    str_6 = '\x0b+%b5CJa+Y8C[W}}'
    str_7 = '[dK\x0b;C>.9dQ}mrX'
    var_7 = module_0.parse_kv(str_6, str_7)

def test_case_13():
    str_0 = ' foo bar \n    baz'
    var_0 = module_0.split_args(str_0)
    str_1 = ' foo \n    bar baz'
    var_1 = module_0.split_args(str_1)
    str_2 = ' "{# foo bar #}" baz '
    var_2 = module_0.split_args(str_2)
    str_3 = 'foo \\\n bar'
    var_3 = module_0.split_args(str_3)