# Automatically generated by Pynguin.
import tornado.util as module_0
import builtins as module_1

def test_case_0():
    try:
        object_dict_0 = module_0.ObjectDict()
        str_0 = '1'
        any_0 = object_dict_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x8d\xef\xe3\x80'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_1 = gzip_decompressor_0.decompress(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "Tu3r[fb4'J"
        str_1 = '.w$4DA]\\gv)w9zv)Gt%N'
        str_2 = '. x|R'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
        object_dict_0 = module_0.ObjectDict(**dict_0)
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'tornado.httpserver'
        any_0 = module_0.import_object(str_0)
        str_1 = 'tornado.mwIsing_modjle'
        any_1 = module_0.import_object(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'nQ4ikBiEL?]N'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        str_0 = 'r &Ccz?=95|\nY\rFg`]@'
        dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0}
        module_0.exec_in(bool_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'x\x83\x83eK[\x14\x9a\xb4\x92\xc1\x14'
        var_0 = module_0.raise_exc_info(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        configurable_0 = module_0.Configurable()
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\x80\xe0Q\x8b\x80\xe7\x83I\x1b\xb5\x03\xaaP\x99Q\xe1Q'
        str_0 = ' \x0bG51qV'
        arg_replacer_0 = module_0.ArgReplacer(bytes_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        base_exception_0 = module_1.BaseException(**dict_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        float_0 = 157.046
        var_0 = module_0.timedelta_to_seconds(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = module_0.doctests()
        str_0 = "Tu3r[fb4'J"
        str_1 = '.w$4DA]\\gv)w9zv)Gt%N'
        str_2 = '. x|R'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
        object_dict_0 = module_0.ObjectDict(**dict_0)
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '2hG5eDHJh5/\\l4c/z}\t'
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        base_exception_0 = module_1.BaseException(**dict_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        str_0 = '!Y+Dca.:G6@U'
        str_1 = '8q\x0bG.mbk0Lc"D,\x0bpz(wq'
        str_2 = '@^8\r3PZna\x0c H%b'
        dict_1 = {str_0: optional_0, str_1: str_1, str_2: dict_0}
        module_0.exec_in(str_0, dict_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'jm<TA\\&\tqx'
        str_1 = module_0.re_unescape(str_0)
        object_dict_0 = module_0.ObjectDict()
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        base_exception_0 = module_1.BaseException()
        int_0 = -1969
        list_0 = [bytes_0, object_dict_0, int_0, bytes_0]
        configurable_0 = module_0.Configurable(*list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = None
        var_1 = (var_0, var_0, var_0)
        var_2 = module_0.raise_exc_info(var_1)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = None
        var_1 = lambda x, y=5: var_0
        str_0 = 'y'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        int_0 = 1
        int_1 = (int_0,)
        var_2 = dict()
        any_0 = arg_replacer_0.get_old_value(int_1, var_2, var_0)
        int_2 = 7
        var_3 = dict(y=int_2)
        var_4 = dict(y=int_2)
        any_1 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = None
        var_1 = lambda x, y=5: var_0
        str_0 = 'e]b&N`'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        int_0 = 1
        gzip_decompressor_0 = module_0.GzipDecompressor()
        dict_0 = {str_0: gzip_decompressor_0, str_0: arg_replacer_0}
        tuple_0 = arg_replacer_0.replace(arg_replacer_0, gzip_decompressor_0, dict_0)
        var_2 = dict()
        any_0 = arg_replacer_0.get_old_value(int_0, var_2, var_0)
        int_1 = 7
        var_3 = dict(y=int_1)
        var_4 = dict(y=int_1)
        str_1 = '0\rjmSrT3ESUoiIjGtA'
        any_1 = module_0.import_object(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = None
        var_1 = lambda x, y=5: var_0
        str_0 = 'y'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        int_0 = 1
        int_1 = (int_0,)
        var_2 = dict()
        any_0 = arg_replacer_0.get_old_value(int_1, var_2, var_0)
        int_2 = (int_0,)
        var_3 = dict(y=int_0)
        any_1 = arg_replacer_0.get_old_value(int_2, var_3, var_0)
        int_3 = (int_0,)
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        dict_0 = {int_3: var_0, any_0: int_2, var_0: any_0, int_0: optional_0}
        dict_1 = {}
        any_2 = arg_replacer_0.get_old_value(dict_0, dict_1)
        var_4 = dict(y=int_1)
        sequence_0 = None
        dict_2 = {str_0: var_2, str_0: str_0}
        any_3 = arg_replacer_0.get_old_value(sequence_0, dict_2)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = None
        str_0 = 'AY Xs.13~k8'
        str_1 = module_0.re_unescape(str_0)
        var_1 = lambda x, y=5: var_0
        str_2 = 'y'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_2)
        gzip_decompressor_0 = module_0.GzipDecompressor()
        str_3 = None
        dict_0 = {str_2: gzip_decompressor_0, str_3: arg_replacer_0}
        tuple_0 = arg_replacer_0.replace(arg_replacer_0, gzip_decompressor_0, dict_0)
    except BaseException:
        pass