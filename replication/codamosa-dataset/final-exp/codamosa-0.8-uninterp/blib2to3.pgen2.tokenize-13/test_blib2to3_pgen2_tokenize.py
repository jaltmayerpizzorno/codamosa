# Automatically generated by Pynguin.
import blib2to3.pgen2.tokenize as module_0

def test_case_0():
    pass

def test_case_1():
    untokenizer_0 = module_0.Untokenizer()

def test_case_2():
    int_0 = 1
    str_0 = 'a'
    var_0 = (int_0, str_0)
    int_1 = 2
    str_1 = 'b'
    var_1 = (int_1, str_1)
    int_2 = 0
    str_2 = 'c'
    var_2 = (int_2, str_2)
    var_3 = [var_0, var_1, var_2]
    str_3 = module_0.untokenize(var_3)

def test_case_3():
    int_0 = -658
    str_0 = '\n        Return a pre-order iterator for the tree.\n\n        This must be implemented by the concrete subclass.\n        '
    tuple_0 = (int_0, str_0)
    str_1 = 'R&|ZX\tmVXQ?wn5!\\\rfN'
    dict_0 = {str_1: str_1}
    untokenizer_0 = module_0.Untokenizer()
    untokenizer_0.compat(tuple_0, dict_0)

def test_case_4():
    int_0 = 42
    str_0 = 'PGEJ8/\n>e:{qW'
    tuple_0 = (int_0, str_0)
    dict_0 = {}
    untokenizer_0 = module_0.Untokenizer()
    untokenizer_0.compat(tuple_0, dict_0)

def test_case_5():
    int_0 = -1496
    tuple_0 = (int_0, int_0)
    untokenizer_0 = module_0.Untokenizer()
    untokenizer_0.add_whitespace(tuple_0)

def test_case_6():
    int_0 = 6
    int_1 = 1
    int_2 = (int_1, int_1)
    int_3 = 3
    int_4 = 4
    int_5 = (int_3, int_4)
    str_0 = ''
    var_0 = module_0.printtoken(int_0, str_0, int_2, int_5, str_0)