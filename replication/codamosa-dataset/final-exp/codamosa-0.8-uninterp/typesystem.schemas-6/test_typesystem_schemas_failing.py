# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        iterator_1 = schema_0.__iter__()
        int_0 = schema_0.__len__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        any_0 = schema_definitions_0.__getitem__(iterator_1)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        iterator_0 = schema_definitions_0.__iter__()
        str_0 = '\x0c]vIS'
        schema_definitions_0.__delitem__(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'1^1\\\x8f\xac\x19\xafj\xfa\x16_]1'
        list_0 = [bytes_0]
        str_0 = 'l9D\nW7GES'
        str_1 = 'l(v,0g*nf6^Z1R(6B'
        dict_0 = {str_0: str_0, str_1: list_0}
        schema_0 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "g?FH'^\r; -uDZ16"
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(str_0)
        field_0 = module_1.Field()
        bool_1 = False
        any_0 = field_0.validate(field_0, strict=bool_1)
    except BaseException:
        pass

def test_case_4():
    try:
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_5():
    try:
        field_0 = module_1.Field()
        any_0 = field_0.get_default_value()
        schema_0 = module_0.Schema()
        any_1 = schema_0.__getitem__(any_0)
    except BaseException:
        pass

def test_case_6():
    try:
        type_0 = None
        reference_0 = module_0.Reference(type_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '%Ed+)1RSRk3AQ_[rpzJ'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(reference_0)
    except BaseException:
        pass

def test_case_8():
    try:
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        iterator_1 = schema_0.__iter__()
        field_0 = None
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        list_0 = [schema_definitions_0]
        schema_1 = module_0.Schema(*list_0)
        schema_definitions_0.__setitem__(field_0, schema_0)
        str_0 = schema_0.__repr__()
        int_0 = schema_0.__len__()
        bool_0 = schema_0.__eq__(iterator_1)
        reference_0 = module_0.Reference(str_0)
        bool_1 = schema_0.__eq__(schema_0)
        any_0 = reference_0.serialize(iterator_1)
        any_1 = reference_0.serialize(schema_definitions_0)
        str_1 = schema_0.__repr__()
        list_1 = [any_1]
        schema_2 = module_0.Schema(*list_1)
        dict_0 = {str_0: any_0, str_1: list_0}
        schema_definitions_1 = module_0.SchemaDefinitions(**dict_0)
        reference_1 = module_0.Reference(str_1, bool_1)
        any_2 = reference_1.validate(schema_2)
    except BaseException:
        pass

def test_case_9():
    try:
        type_0 = None
        str_0 = 'bNb'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(type_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '%Ed+)1RSRk3AQ_[rpzJ'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 978
        list_0 = [int_0, int_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        field_0 = None
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        str_0 = 'z24Kr-VJn'
        list_0 = [iterator_0]
        str_1 = 'max_items'
        str_2 = ':hQ<O?Z5#;?i<:va.'
        iterator_1 = schema_0.__iter__()
        dict_0 = {str_2: schema_0, str_1: str_1, str_1: iterator_1, str_2: schema_0}
        dict_1 = {str_1: schema_definitions_0, str_0: list_0, str_1: str_0, str_2: dict_0}
        schema_1 = module_0.Schema(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Must be a multiple of {multiple_of}.'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        iterator_0 = schema_definitions_0.__iter__()
        schema_definitions_0.__setitem__(str_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        iterator_1 = schema_0.__iter__()
        field_0 = None
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        list_0 = [schema_definitions_0]
        schema_1 = module_0.Schema(*list_0)
        bool_0 = schema_1.__eq__(schema_definitions_0)
        schema_definitions_0.__setitem__(field_0, schema_0)
        str_0 = schema_0.__repr__()
        bool_1 = schema_0.__eq__(iterator_1)
        reference_0 = module_0.Reference(str_0)
        bool_2 = schema_0.__eq__(schema_0)
        str_1 = schema_0.__repr__()
        any_0 = reference_0.serialize(iterator_1)
        any_1 = reference_0.serialize(schema_definitions_0)
        str_2 = schema_0.__repr__()
        str_3 = 's<'
        validation_result_0 = None
        str_4 = 'array'
        str_5 = '%s(%s)'
        dict_0 = {str_3: validation_result_0, str_1: any_1, str_4: iterator_1, str_5: iterator_0}
        reference_1 = module_0.Reference(str_3, dict_0)
        any_2 = reference_1.validate(str_2)
    except BaseException:
        pass