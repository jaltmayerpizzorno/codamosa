# Automatically generated by Pynguin.
import ansible.module_utils.common.arg_spec as module_0

def test_case_0():
    try:
        var_0 = {}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_0)
        var_1 = argument_spec_validator_0.validate(argument_spec_validator_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'FtkGioMvk'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, str_0, str_0, str_0]
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xba\t\x18\x0e\x10\x19\xc7\x7f\x1fB|{\x8dV\x01X\xcb'
        bool_0 = False
        set_0 = set()
        str_0 = "`Pc wjW=e'"
        list_0 = [bytes_0, str_0, set_0]
        list_1 = [set_0, list_0, bool_0]
        dict_0 = {str_0: str_0}
        dict_1 = {}
        list_2 = [dict_1, list_1]
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*list_2)
        var_0 = module_argument_spec_validator_0.validate(dict_0)
        dict_2 = {str_0: str_0, str_0: bool_0, str_0: set_0, str_0: bool_0}
        str_1 = '}#sl)0<'
        validation_result_0 = module_0.ValidationResult(str_1)
        module_argument_spec_validator_1 = module_0.ModuleArgumentSpecValidator(*list_0, **dict_2)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = {}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_0)
        var_1 = {argument_spec_validator_0: argument_spec_validator_0, argument_spec_validator_0: argument_spec_validator_0, argument_spec_validator_0: argument_spec_validator_0}
        var_2 = argument_spec_validator_0.validate(var_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xba\t\x18\x0e\x10\x19\xc7\x7f\x1fB|{\x8dV\x01X\xcb'
        str_0 = 'WK_W1'
        validation_result_0 = module_0.ValidationResult(str_0)
        dict_0 = {str_0: bytes_0, str_0: bytes_0, str_0: str_0, str_0: validation_result_0}
        dict_1 = {bytes_0: validation_result_0, validation_result_0: validation_result_0, validation_result_0: bytes_0, bytes_0: dict_0}
        dict_2 = {}
        str_1 = ''
        float_0 = 1.0
        bool_0 = False
        tuple_0 = (bool_0, dict_2)
        list_0 = []
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_2, str_1, float_0, tuple_0, list_0)
        var_0 = argument_spec_validator_0.validate(dict_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Grm`e'
        str_1 = 'ge'
        str_2 = {str_0: str_0}
        str_3 = 'aliases'
        str_4 = {str_1: str_1, str_3: str_1, str_3: str_3}
        str_5 = {str_0: str_2, str_1: str_4}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_5)
        var_0 = argument_spec_validator_0.validate(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b' G\xf4\xden\xed?\xd3\xdd\x97\xd3'
        str_0 = '};X4B-%{~5c^vpbk'
        validation_result_0 = module_0.ValidationResult(str_0)
        bool_0 = False
        set_0 = set()
        str_1 = 'W\n\\F+3'
        list_0 = [bytes_0, str_1, set_0]
        list_1 = [set_0, list_0, bool_0]
        dict_0 = {str_1: str_1}
        dict_1 = {}
        list_2 = [dict_1, set_0, list_1, bytes_0, str_0]
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*list_2)
        var_0 = module_argument_spec_validator_0.validate(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'age'
        str_1 = {str_0: str_0}
        str_2 = 'aliases'
        str_3 = 'old'
        str_4 = {str_2: str_2, str_2: str_1, str_0: str_2}
        str_5 = {str_2: str_1, str_0: str_4}
        str_6 = '2'
        str_7 = {str_0: str_3, str_0: str_6}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_5)
        list_0 = [str_1, str_5]
        dict_0 = {str_0: str_6, str_3: str_6, str_0: str_7}
        var_0 = argument_spec_validator_0.validate(dict_0)
        var_1 = argument_spec_validator_0.validate(list_0)
    except BaseException:
        pass