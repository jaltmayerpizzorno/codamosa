# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.ioloop as module_1
import tornado.httputil as module_2
import tornado.httpclient as module_3
import concurrent.futures._base as module_4
import tornado.tcpclient as module_5
import socket as module_6

def test_case_0():
    try:
        str_0 = '!vIR>o>Hz\rz>'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
        str_2 = h_t_t_p_timeout_error_0.__str__()
        i_o_loop_0 = module_1.IOLoop()
        str_3 = h_t_t_p_timeout_error_0.__str__()
        str_4 = h_t_t_p_timeout_error_0.__str__()
        str_5 = '__main__'
        bool_0 = True
        int_0 = 40
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.initialize(int_0, int_0, int_0)
        h_t_t_p_timeout_error_1 = module_0.HTTPTimeoutError(str_1)
        str_6 = '\nQ1aq3-wx\rcb'
        str_7 = "* 8I1j2'6sxXzP"
        list_0 = []
        h_t_t_p_headers_0 = module_2.HTTPHeaders(*list_0)
        h_t_t_p_headers_1 = h_t_t_p_headers_0.copy()
        h_t_t_p_headers_2 = h_t_t_p_headers_1.copy()
        h_t_t_p_headers_3 = h_t_t_p_headers_2.copy()
        float_0 = 1.5
        h_t_t_p_request_0 = module_3.HTTPRequest(str_6, str_7, h_t_t_p_headers_3, str_5, float_0, float_0, bool_0, str_1, int_0, str_2, bool_0, str_4, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        i_o_loop_0 = module_1.IOLoop()
        h_t_t_p_headers_0 = module_2.HTTPHeaders()
        iterator_0 = h_t_t_p_headers_0.__iter__()
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        future_0 = module_4.Future()
        int_0 = -520
        t_c_p_client_0 = module_5.TCPClient()
        t_c_p_client_0.close()
        int_1 = 3172
        h_t_t_p_request_0 = None
        h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, future_0, iterator_0, int_0, t_c_p_client_0, int_1, int_1)
        h_t_t_p_connection_0.run()
        simple_async_h_t_t_p_client_0.initialize(int_1)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\rBR}C_or0"m7@MD;'
        str_1 = '!vIR>o>Hz\rz>'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_1)
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
        str_3 = h_t_t_p_timeout_error_0.__str__()
        i_o_loop_0 = module_1.IOLoop()
        str_4 = h_t_t_p_timeout_error_0.__str__()
        str_5 = h_t_t_p_timeout_error_0.__str__()
        str_6 = '__main__'
        h_t_t_p_headers_0 = module_2.HTTPHeaders()
        iterator_0 = h_t_t_p_headers_0.__iter__()
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        h_t_t_p_request_0 = None
        bytes_0 = b'P\x97\x95pza'
        dict_0 = {str_4: str_0}
        str_7 = "@'l\x0b?n{Pp,Oe\x0b'sJ"
        dict_1 = {str_3: str_6, str_7: str_1}
        int_0 = 1291
        address_family_0 = module_6.AddressFamily.AF_WANPIPE
        t_c_p_client_0 = module_5.TCPClient(address_family_0)
        h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, dict_0, dict_1, int_0, t_c_p_client_0, int_0, int_0)
        h_t_t_p_connection_0.data_received(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '!vIR>o>Hz\rz>'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        i_o_loop_0 = module_1.IOLoop()
        h_t_t_p_headers_0 = module_2.HTTPHeaders()
        iterator_0 = h_t_t_p_headers_0.__iter__()
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        str_3 = 'tornado.simple_httpclient'
        h_t_t_p_request_0 = None
        future_0 = module_4.Future()
        int_0 = -520
        t_c_p_client_0 = module_5.TCPClient()
        int_1 = 787
        t_c_p_client_0.close()
        int_2 = 3172
        h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, future_0, iterator_0, int_0, t_c_p_client_0, int_1, int_2)
        var_0 = future_0.set_running_or_notify_cancel()
        h_t_t_p_connection_0.run()
        async_h_t_t_p_client_0 = module_3.AsyncHTTPClient()
        future_1 = async_h_t_t_p_client_0.fetch(str_3)
        h_t_t_p_connection_0.on_connection_close()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\rBR}C_or0"m7@MD;'
        str_1 = '!vIR>o>Hz\rz>'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_1)
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
        str_3 = h_t_t_p_timeout_error_0.__str__()
        i_o_loop_0 = module_1.IOLoop()
        str_4 = h_t_t_p_timeout_error_0.__str__()
        h_t_t_p_headers_0 = module_2.HTTPHeaders()
        iterator_0 = h_t_t_p_headers_0.__iter__()
        str_5 = 'tornado.simple_httpclient'
        float_0 = -3131.90527
        str_6 = h_t_t_p_timeout_error_0.__str__()
        t_c_p_client_0 = module_5.TCPClient()
        int_0 = 3172
        str_7 = h_t_t_p_stream_closed_error_0.__str__()
        async_h_t_t_p_client_0 = module_3.AsyncHTTPClient()
        future_0 = async_h_t_t_p_client_0.fetch(str_5)
        str_8 = "9>7pK>qDz'Y("
        bool_0 = False
        h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_1)
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.close()
        async_h_t_t_p_client_1 = module_3.AsyncHTTPClient()
        str_9 = '(1:Cm"v1%1v]hPS_J'
        bool_1 = False
        future_1 = async_h_t_t_p_client_1.fetch(str_9, bool_1)
        h_t_t_p_request_0 = module_3.HTTPRequest(str_3, str_5, float_0, str_2, str_8, int_0, bool_0, bool_1)
        bytes_0 = b'\x8a\xa2,\x9e\x0f\xed\xcb'
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, bytes_0)
    except BaseException:
        pass