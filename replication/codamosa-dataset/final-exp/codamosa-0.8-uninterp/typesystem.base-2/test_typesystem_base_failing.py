# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        list_0 = []
        base_error_0 = module_0.BaseError(messages=list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        validation_error_0 = module_0.ValidationError()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'O`xk_+%:$4vd0\rf{'
        tuple_0 = ()
        validation_result_0 = module_0.ValidationResult()
        iterator_0 = validation_result_0.__iter__()
        str_1 = validation_result_0.__repr__()
        base_error_0 = module_0.BaseError(text=tuple_0, position=iterator_0)
        var_0 = base_error_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 6
        str_0 = '*s\\YGG~C\\'
        int_1 = 15
        base_error_0 = module_0.BaseError(text=str_0, key=int_1)
        str_1 = base_error_0.__repr__()
        int_2 = base_error_0.__hash__()
        int_3 = 1025
        int_4 = base_error_0.__hash__()
        int_5 = base_error_0.__hash__()
        message_0 = module_0.Message(text=str_0)
        bool_0 = message_0.__eq__(int_2)
        parse_error_0 = module_0.ParseError(text=str_1, key=int_1, position=bool_0)
        position_0 = module_0.Position(int_3, int_0, int_0)
        str_2 = base_error_0.__str__()
        str_3 = "B'5\x0c_dZ-TFFH"
        iterator_0 = base_error_0.__iter__()
        parse_error_1 = module_0.ParseError(code=str_3, position=position_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '0!y(O'
        bytes_0 = b'\x8b\x1b\xe1\xd7\xa4\xf5\xfeo\x164\x84\xc8\x8d~\xcf\xad\x82\xae'
        validation_result_0 = module_0.ValidationResult(value=bytes_0)
        bool_0 = validation_result_0.__bool__()
        int_0 = 6
        position_0 = module_0.Position(int_0, int_0, int_0)
        base_error_0 = module_0.BaseError(text=str_0, position=position_0, messages=position_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\x0bdO]}'
        set_0 = {str_0}
        message_0 = module_0.Message(text=str_0, key=str_0, index=set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '])\x0c~N\n \r+&[CfF/;T1jM'
        int_0 = 2775
        int_1 = 2767
        int_2 = 58
        position_0 = module_0.Position(int_0, int_1, int_2)
        message_0 = module_0.Message(text=str_0, position=position_0, start_position=position_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        int_0 = 1527
        int_1 = 551
        int_2 = 1395
        position_0 = module_0.Position(int_0, int_1, int_2)
        str_0 = position_0.__repr__()
        str_1 = ':\t1RlbB|\x0bc%Lt-G\\]0'
        base_error_0 = module_0.BaseError(code=str_1, key=str_1, messages=list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2444
        int_1 = 1625
        int_2 = -979
        position_0 = module_0.Position(int_0, int_1, int_2)
        str_0 = 'tgYPk2'
        message_0 = module_0.Message(text=str_0, key=int_1)
        list_0 = [message_0, message_0, message_0, message_0]
        base_error_0 = module_0.BaseError(position=position_0, messages=list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -1291
        str_0 = ', position='
        int_1 = 1
        position_0 = module_0.Position(int_1, int_1, int_1)
        str_1 = position_0.__repr__()
        message_0 = module_0.Message(text=str_0, code=str_0, position=position_0)
        bool_0 = message_0.__eq__(int_0)
        str_2 = message_0.__repr__()
        validation_result_0 = module_0.ValidationResult()
        str_3 = 'F3(-?4a\tnJelaS}Q'
        iterator_0 = validation_result_0.__iter__()
        parse_error_0 = module_0.ParseError(text=str_3)
        parse_error_1 = module_0.ParseError(text=str_3, code=str_3)
        int_2 = 1
        int_3 = -2901
        position_1 = module_0.Position(int_2, int_3, int_2)
        base_error_0 = module_0.BaseError(position=position_1)
    except BaseException:
        pass

def test_case_10():
    try:
        validation_result_0 = module_0.ValidationResult()
        iterator_0 = validation_result_0.__iter__()
        iterator_1 = validation_result_0.__iter__()
        validation_result_1 = module_0.ValidationResult()
        str_0 = 'Yz\x0b\\F6c^_0LKv '
        message_0 = module_0.Message(text=str_0, key=str_0, start_position=str_0)
        str_1 = 'naV^^=_O wm{\x0b04v'
        int_0 = 3423
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_1 = module_0.Message(text=str_1, code=str_1, end_position=position_0)
        bool_0 = message_1.__eq__(validation_result_1)
        base_error_0 = module_0.BaseError(text=str_1)
        list_0 = base_error_0.messages()
        bool_1 = validation_result_1.__bool__()
        base_error_1 = module_0.BaseError(messages=list_0)
        str_2 = position_0.__repr__()
        validation_error_0 = module_0.ValidationError(key=str_0, position=position_0, messages=list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 3
        int_1 = 1682
        int_2 = -620
        int_3 = -4136
        int_4 = -178
        int_5 = -1377
        position_0 = module_0.Position(int_3, int_4, int_5)
        bool_0 = position_0.__eq__(int_1)
        position_1 = module_0.Position(int_0, int_1, int_2)
        str_0 = '\x0bi$AY)MB|yzwTkbE '
        message_0 = module_0.Message(text=str_0, position=position_1, end_position=position_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'enum'
        message_0 = module_0.Message(text=str_0)
        list_0 = [message_0, message_0]
        base_error_0 = module_0.BaseError(messages=list_0)
        str_1 = base_error_0.__repr__()
        str_2 = 'week'
        validation_error_0 = module_0.ValidationError(code=str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 6
        str_0 = '*s\\YGG~C\\'
        int_1 = 15
        base_error_0 = module_0.BaseError(text=str_0, key=int_1)
        str_1 = base_error_0.__repr__()
        int_2 = base_error_0.__hash__()
        bool_0 = base_error_0.__eq__(int_1)
        int_3 = -1657
        int_4 = base_error_0.__hash__()
        int_5 = base_error_0.__hash__()
        str_2 = "uO$J)\\4D\x0bA/C&'b"
        message_0 = module_0.Message(text=str_2)
        bool_1 = message_0.__eq__(int_2)
        parse_error_0 = module_0.ParseError(text=str_1, key=int_1, position=bool_1)
        position_0 = module_0.Position(int_1, int_3, int_1)
        bool_2 = position_0.__eq__(position_0)
        message_1 = module_0.Message(text=str_0, index=str_0, end_position=position_0)
        bool_3 = message_1.__eq__(int_1)
        str_3 = base_error_0.__str__()
        iterator_0 = base_error_0.__iter__()
        float_0 = -819.7674
        list_0 = [message_0, message_0]
        tuple_0 = (iterator_0, float_0, list_0)
        validation_result_0 = module_0.ValidationResult(value=tuple_0)
        validation_error_0 = module_0.ValidationError(messages=list_0)
        validation_result_1 = module_0.ValidationResult(value=int_0, error=validation_error_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 6
        str_0 = '*s\\YGG~C\\'
        int_1 = 15
        base_error_0 = module_0.BaseError(text=str_0, key=int_1)
        str_1 = base_error_0.__repr__()
        int_2 = base_error_0.__hash__()
        list_0 = base_error_0.messages(add_prefix=int_0)
        bool_0 = base_error_0.__eq__(int_1)
        int_3 = base_error_0.__hash__()
        int_4 = -1657
        int_5 = base_error_0.__hash__()
        int_6 = base_error_0.__hash__()
        str_2 = "uO$J)\\4D\x0bA/C&'b"
        message_0 = module_0.Message(text=str_2)
        bool_1 = message_0.__eq__(int_2)
        parse_error_0 = module_0.ParseError(text=str_1, key=int_1, position=bool_1)
        position_0 = module_0.Position(int_1, int_4, int_1)
        bool_2 = position_0.__eq__(position_0)
        bool_3 = message_0.__eq__(int_1)
        str_3 = base_error_0.__str__()
        iterator_0 = base_error_0.__iter__()
        float_0 = -819.7674
        list_1 = [message_0, message_0]
        tuple_0 = (iterator_0, float_0, list_1)
        validation_result_0 = module_0.ValidationResult(value=tuple_0)
        str_4 = validation_result_0.__repr__()
        iterator_1 = base_error_0.__iter__()
        bool_4 = message_0.__eq__(bool_3)
        int_7 = 685
        bool_5 = position_0.__eq__(tuple_0)
        position_1 = module_0.Position(int_7, int_6, int_4)
        base_error_1 = module_0.BaseError(code=str_2, position=position_1, messages=list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '*s\\YGG~C\\'
        int_0 = 15
        base_error_0 = module_0.BaseError(text=str_0, key=int_0)
        str_1 = base_error_0.__repr__()
        int_1 = base_error_0.__hash__()
        int_2 = 1039
        bool_0 = base_error_0.__eq__(int_0)
        int_3 = -1657
        int_4 = base_error_0.__hash__()
        int_5 = base_error_0.__hash__()
        position_0 = module_0.Position(int_0, int_1, int_5)
        int_6 = -788
        int_7 = 2714
        position_1 = module_0.Position(int_6, int_2, int_7)
        bool_1 = position_1.__eq__(position_0)
        str_2 = '\nn.(Lc\r'
        message_0 = module_0.Message(text=str_2)
        bool_2 = message_0.__eq__(int_1)
        parse_error_0 = module_0.ParseError(text=str_1, key=int_0, position=bool_2)
        int_8 = 1
        bool_3 = base_error_0.__eq__(int_8)
        position_2 = module_0.Position(int_0, int_3, int_0)
        bool_4 = position_2.__eq__(position_2)
        str_3 = position_0.__repr__()
        message_1 = module_0.Message(text=str_0, index=str_0, end_position=position_2)
        str_4 = base_error_0.__str__()
        iterator_0 = base_error_0.__iter__()
        iterator_1 = base_error_0.__iter__()
        bool_5 = message_0.__eq__(message_0)
        validation_result_0 = module_0.ValidationResult()
        str_5 = 'SLqgy*I*^X*m2'
        validation_error_0 = module_0.ValidationError(key=str_5)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '*s\\YGG~C\\'
        int_0 = 15
        base_error_0 = module_0.BaseError(text=str_0, key=int_0)
        str_1 = base_error_0.__repr__()
        int_1 = base_error_0.__hash__()
        int_2 = 1039
        bool_0 = base_error_0.__eq__(int_0)
        int_3 = -1657
        int_4 = base_error_0.__hash__()
        int_5 = base_error_0.__hash__()
        position_0 = module_0.Position(int_0, int_1, int_5)
        int_6 = -788
        int_7 = 2714
        position_1 = module_0.Position(int_6, int_2, int_7)
        bool_1 = position_1.__eq__(position_0)
        str_2 = '\nn.(Lc\r'
        message_0 = module_0.Message(text=str_2)
        bool_2 = message_0.__eq__(int_1)
        parse_error_0 = module_0.ParseError(text=str_1, key=int_0, position=bool_2)
        int_8 = 1
        bool_3 = base_error_0.__eq__(int_8)
        position_2 = module_0.Position(int_0, int_3, int_0)
        bool_4 = position_2.__eq__(position_0)
        bool_5 = position_2.__eq__(position_2)
        message_1 = module_0.Message(text=str_0, index=str_0, end_position=position_2)
        str_3 = base_error_0.__str__()
        iterator_0 = base_error_0.__iter__()
        float_0 = -819.7674
        list_0 = [message_0, message_0]
        tuple_0 = (iterator_0, float_0, list_0)
        validation_result_0 = module_0.ValidationResult(value=tuple_0)
        str_4 = validation_result_0.__repr__()
        iterator_1 = base_error_0.__iter__()
        validation_result_1 = module_0.ValidationResult()
        str_5 = 'SLqgy*I*^X*m2'
        validation_error_0 = module_0.ValidationError(key=str_5)
    except BaseException:
        pass