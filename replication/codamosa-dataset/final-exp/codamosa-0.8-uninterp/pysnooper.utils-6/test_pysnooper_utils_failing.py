# Automatically generated by Pynguin.
import pysnooper.utils as module_0

def test_case_0():
    try:
        str_0 = '&}r?}'
        var_0 = module_0.ensure_tuple(str_0)
        dict_0 = {}
        var_1 = module_0.shitcode(dict_0)
        list_0 = [var_1, var_1]
        bytes_0 = None
        var_2 = module_0.truncate(list_0, bytes_0)
        complex_0 = None
        dict_1 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
        var_3 = module_0.normalize_repr(dict_1)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -385
        var_0 = module_0.get_shortish_repr(int_0)
        float_0 = 1217.66174
        str_0 = 'normalize is not supported with thread_info'
        var_1 = module_0.get_shortish_repr(float_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "Z1a8Lbn<\x0c`A'\r\t4-u(ti"
        var_0 = module_0.shitcode(str_0)
        str_1 = "4]'{"
        list_0 = None
        str_2 = '$h'
        tuple_0 = ()
        var_1 = module_0.shitcode(tuple_0)
        var_2 = module_0.get_shortish_repr(tuple_0)
        str_3 = '&[R}M(>0v^BB5?^V\x0c2'
        var_3 = module_0.shitcode(str_3)
        float_0 = 860.66
        var_4 = module_0.truncate(str_3, float_0)
        str_4 = 'ABC'
        var_5 = module_0.shitcode(str_4)
        int_0 = 624
        var_6 = module_0.ensure_tuple(int_0)
        str_5 = 'W<'
        var_7 = module_0.normalize_repr(str_5)
        set_0 = {str_2, list_0}
        list_1 = [str_1]
        var_8 = module_0.ensure_tuple(list_1)
        bool_0 = True
        var_9 = module_0.get_shortish_repr(bool_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 3
        float_0 = -2347.93483
        var_0 = module_0.truncate(int_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 478.0
        str_0 = None
        var_0 = module_0.ensure_tuple(str_0)
        var_1 = module_0.truncate(float_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '%'
        dict_0 = {str_0: str_0}
        bool_0 = False
        var_0 = module_0.truncate(dict_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -3920.462013
        str_0 = '\nk'
        str_1 = 'I'
        set_0 = None
        dict_0 = {str_0: str_0, str_0: float_0, str_1: set_0}
        list_0 = [dict_0, float_0, float_0, str_0]
        var_0 = module_0.get_repr_function(dict_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        var_0 = module_0.shitcode(str_0)
        str_1 = 'abc'
        var_1 = module_0.shitcode(str_1)
        str_2 = '\x00'
        var_2 = module_0.shitcode(str_2)
        str_3 = '\x01'
        var_3 = module_0.shitcode(str_3)
        str_4 = '\x02'
        var_4 = module_0.shitcode(str_4)
        str_5 = '\x03'
        var_5 = module_0.shitcode(str_5)
        bool_0 = True
        list_0 = [str_0, bool_0]
        var_6 = module_0.shitcode(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "Z1a8Lbn<\x0c`A'\r\t4-u(ti"
        var_0 = module_0.shitcode(str_0)
        bytes_0 = b'\xaf_'
        str_1 = None
        var_1 = module_0.truncate(bytes_0, str_1)
        str_2 = "4]'{"
        dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2, str_2: str_2}
        var_2 = module_0.get_shortish_repr(dict_0)
        tuple_0 = ()
        var_3 = module_0.shitcode(tuple_0)
        var_4 = module_0.get_shortish_repr(tuple_0)
        str_3 = 'W<N'
        var_5 = module_0.normalize_repr(str_3)
        list_0 = [str_2]
        var_6 = module_0.ensure_tuple(list_0)
        var_7 = module_0.get_shortish_repr(dict_0, tuple_0, str_0)
    except BaseException:
        pass