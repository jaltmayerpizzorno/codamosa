# Automatically generated by Pynguin.
import youtube_dl.swfinterp as module_0

def test_case_0():
    try:
        bytes_0 = b''
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        s_w_f_interpreter_0 = module_0.SWFInterpreter(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '2;~GS+rqica]'
        bytes_0 = b'cJ\xfcj\xd4'
        str_1 = ''
        dict_0 = {str_0: bytes_0, str_0: bytes_0, str_0: bytes_0, str_1: str_0}
        list_0 = [dict_0]
        a_v_m_class__object_0 = module_0._AVMClass_Object(list_0)
        bytes_1 = b'XWY/'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_1)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2664.73092
        a_v_m_class__object_0 = module_0._AVMClass_Object(float_0)
        dict_0 = None
        multiname_0 = module_0._Multiname(dict_0)
        multiname_1 = module_0._Multiname(multiname_0)
        a_v_m_class__object_1 = module_0._AVMClass_Object(multiname_1)
        var_0 = a_v_m_class__object_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'IX'
        str_1 = "F(kZo'nn|Er\x0b\x0c"
        float_0 = 750.46039
        multiname_0 = module_0._Multiname(float_0)
        scope_dict_0 = module_0._ScopeDict(multiname_0)
        dict_0 = {str_0: str_0, str_1: str_1}
        bytes_0 = b'\x13&\xf8\xff3R\xcb\xc1\xc1F'
        a_v_m_class_0 = module_0._AVMClass(dict_0, bytes_0)
        scope_dict_1 = module_0._ScopeDict(a_v_m_class_0)
        undefined_0 = module_0._Undefined()
        var_0 = scope_dict_1.__repr__()
        s_w_f_interpreter_0 = module_0.SWFInterpreter(undefined_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        undefined_0 = None
        set_0 = {bool_0, undefined_0}
        int_0 = 257
        var_0 = undefined_0.__hash__()
        a_v_m_class_0 = module_0._AVMClass(set_0, int_0)
        var_1 = a_v_m_class_0.__repr__()
        scope_dict_0 = module_0._ScopeDict(undefined_0)
        undefined_1 = module_0._Undefined()
        a_v_m_class_1 = module_0._AVMClass(bool_0, undefined_1)
        var_2 = a_v_m_class_1.make_object()
        bool_1 = False
        var_3 = a_v_m_class_1.register_methods(bool_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '2;~GS+rqica]'
        set_0 = {str_0}
        list_0 = [set_0, set_0, set_0]
        float_0 = -780.76
        a_v_m_class_0 = module_0._AVMClass(list_0, float_0)
        var_0 = a_v_m_class_0.__repr__()
        undefined_0 = module_0._Undefined()
        var_1 = undefined_0.__hash__()
        bytes_0 = b'XWY/'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        a_v_m_class__object_0 = None
        multiname_0 = module_0._Multiname(a_v_m_class__object_0)
        undefined_0 = module_0._Undefined()
        multiname_1 = module_0._Multiname(undefined_0)
        list_0 = [multiname_1, multiname_1, undefined_0, undefined_0]
        scope_dict_0 = module_0._ScopeDict(list_0)
        a_v_m_class_0 = module_0._AVMClass(scope_dict_0, multiname_1)
        var_0 = a_v_m_class_0.register_methods(multiname_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'N\x0bmaC/y:54l`y\x0c'
        bool_0 = False
        str_1 = '\r\x0cC{;;)Y;Rnx_\rb6c'
        multiname_0 = module_0._Multiname(bool_0)
        var_0 = multiname_0.__repr__()
        bytes_0 = b'\xb3\xcc\xf0\x01\x1d\x04\x8b\x1f\xf0q'
        scope_dict_0 = module_0._ScopeDict(bytes_0)
        multiname_1 = module_0._Multiname(str_1)
        a_v_m_class__object_0 = None
        str_2 = 'UZ*jON~Fh+A8@x'
        str_3 = 'Pu]Y-a'
        list_0 = [str_1, a_v_m_class__object_0, var_0, str_0]
        a_v_m_class_0 = module_0._AVMClass(str_1, list_0)
        undefined_0 = module_0._Undefined()
        a_v_m_class_1 = module_0._AVMClass(a_v_m_class_0, undefined_0)
        dict_0 = {str_2: a_v_m_class__object_0, str_0: str_2, str_3: multiname_1, str_3: a_v_m_class__object_0}
        list_1 = [dict_0, bool_0]
        undefined_1 = module_0._Undefined(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        undefined_0 = module_0._Undefined()
        var_0 = undefined_0.__str__()
        multiname_0 = module_0._Multiname(undefined_0)
        bytes_0 = b'\x89ix\x17N\x020P\xb68\xeby\x04\xe1\x8e&\x93\r\xa4'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        undefined_0 = module_0._Undefined()
        bool_0 = True
        scope_dict_0 = module_0._ScopeDict(bool_0)
        float_0 = -2211.0
        bytes_0 = b'h\x1d3F\xdf\xff 2T\xc5'
        a_v_m_class_0 = module_0._AVMClass(scope_dict_0, bytes_0)
        a_v_m_class_1 = module_0._AVMClass(float_0, a_v_m_class_0)
        var_0 = a_v_m_class_1.register_methods(scope_dict_0)
        undefined_1 = module_0._Undefined()
        var_1 = undefined_1.__bool__()
        multiname_0 = module_0._Multiname(undefined_1)
        bytes_1 = b'\x89ix\x17N\x020P\xb68\xeby\x04\xe1\x8e&\x93\r\xa4'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_1)
    except BaseException:
        pass

def test_case_11():
    try:
        undefined_0 = module_0._Undefined()
        float_0 = 2145.838
        dict_0 = {undefined_0: undefined_0, undefined_0: float_0, float_0: undefined_0}
        str_0 = 'h*7:\nBda]i'
        tuple_0 = (str_0,)
        set_0 = {tuple_0, tuple_0, tuple_0}
        a_v_m_class_0 = module_0._AVMClass(tuple_0, set_0)
        scope_dict_0 = module_0._ScopeDict(a_v_m_class_0)
        scope_dict_1 = module_0._ScopeDict(scope_dict_0)
        float_1 = -715.0
        a_v_m_class_1 = module_0._AVMClass(scope_dict_1, float_1)
        var_0 = a_v_m_class_1.register_methods(dict_0)
        float_2 = -2834.3
        s_w_f_interpreter_0 = module_0.SWFInterpreter(float_2)
    except BaseException:
        pass