# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'Q"'
    either_0 = module_0.Either(bytes_0)

def test_case_2():
    object_0 = module_1.object()
    tuple_0 = ()
    either_0 = module_0.Either(tuple_0)
    bool_0 = either_0.__eq__(object_0)

def test_case_3():
    bytes_0 = b'\xbbB\xf98\x82Q\xad'
    either_0 = module_0.Either(bytes_0)
    var_0 = either_0.to_box()

def test_case_4():
    str_0 = '\n    The Try control gives us the ability write safe code\n    without focusing on try-catch blocks in the presence of exceptions.\n    '
    either_0 = module_0.Either(str_0)
    var_0 = either_0.to_lazy()

def test_case_5():
    str_0 = '[t'
    complex_0 = None
    str_1 = '_x`2[NhMG&7UbTLIA0l'
    set_0 = {str_1, str_0}
    dict_0 = {str_1: set_0, str_1: set_0}
    int_0 = True
    tuple_0 = (str_0, complex_0, dict_0, int_0)
    int_1 = True
    left_0 = module_0.Left(int_1)
    var_0 = left_0.map(tuple_0)
    either_0 = module_0.Either(var_0)
    either_1 = module_0.Either(either_0)
    var_1 = either_1.to_lazy()
    object_0 = module_1.object()
    right_0 = module_0.Right(object_0)
    var_2 = right_0.to_maybe()

def test_case_6():
    var_0 = None
    either_0 = module_0.Either(var_0)
    tuple_0 = (either_0,)
    left_0 = module_0.Left(var_0)
    var_1 = left_0.bind(tuple_0)
    right_0 = module_0.Right(var_0)
    bool_0 = right_0.is_right()
    left_1 = module_0.Left(var_0)
    left_2 = module_0.Left(left_1)

def test_case_7():
    str_0 = '\n        Take mapper function and return value of Left.\n\n        :returns: Stored value\n        :rtype: A\n        '
    str_1 = '[WI\r^xJ7^pj'
    str_2 = ''
    str_3 = 'Cap>'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: str_2}
    either_0 = module_0.Either(dict_0)
    var_0 = either_0.is_right()
    int_0 = -284
    right_0 = module_0.Right(int_0)
    bool_0 = right_0.is_left()
    list_0 = [right_0, either_0, right_0, var_0]
    str_4 = 'g\x0c!'
    left_0 = module_0.Left(str_4)
    left_1 = module_0.Left(left_0)
    var_1 = left_1.ap(list_0)

def test_case_8():
    object_0 = module_1.object()
    right_0 = module_0.Right(object_0)
    left_0 = module_0.Left(right_0)
    bool_0 = left_0.is_left()

def test_case_9():
    int_0 = 36
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    right_0 = module_0.Right(int_0)
    right_1 = module_0.Right(int_0)
    left_2 = module_0.Left(int_0)
    right_2 = module_0.Right(int_0)
    right_3 = module_0.Right(int_0)
    left_3 = module_0.Left(int_0)
    left_4 = module_0.Left(int_0)
    var_0 = left_2.to_maybe()
    var_1 = left_4 == right_2
    right_4 = module_0.Right(int_0)
    left_5 = module_0.Left(int_0)
    var_2 = right_4 == left_2

def test_case_10():
    int_0 = 1
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    right_0 = module_0.Right(int_0)
    left_2 = module_0.Left(int_0)
    right_1 = module_0.Right(int_0)
    right_2 = module_0.Right(int_0)
    left_3 = module_0.Left(int_0)
    left_4 = module_0.Left(int_0)
    right_3 = module_0.Right(int_0)
    var_0 = left_4 == left_2
    right_4 = module_0.Right(int_0)
    var_1 = left_4.to_validation()
    left_5 = module_0.Left(int_0)

def test_case_11():
    list_0 = []
    right_0 = module_0.Right(list_0)
    bool_0 = right_0.is_right()
    bool_1 = right_0.is_right()
    var_0 = right_0.to_validation()

def test_case_12():
    object_0 = module_1.object()
    left_0 = module_0.Left(object_0)
    right_0 = module_0.Right(left_0)
    bool_0 = right_0.is_left()

def test_case_13():
    bytes_0 = b'-\x8d'
    right_0 = module_0.Right(bytes_0)
    right_1 = module_0.Right(right_0)
    var_0 = right_1.to_maybe()

def test_case_14():
    int_0 = None
    right_0 = module_0.Right(int_0)
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    right_1 = module_0.Right(int_0)
    var_0 = int_0 == right_1
    right_2 = module_0.Right(int_0)
    left_2 = module_0.Left(int_0)
    var_1 = right_2 == left_1

def test_case_15():
    int_0 = 1
    left_0 = module_0.Left(int_0)
    int_1 = None
    bool_0 = left_0.is_left()
    left_1 = module_0.Left(int_1)
    right_0 = module_0.Right(int_0)
    right_1 = module_0.Right(int_0)
    left_2 = module_0.Left(int_0)
    object_0 = module_1.object()
    bytes_0 = b'\x9f\xbd\x14\xb2f\xf7\xb0\xcdpg\r'
    either_0 = module_0.Either(bytes_0)
    bool_1 = either_0.__eq__(object_0)
    right_2 = module_0.Right(int_0)
    left_3 = module_0.Left(int_0)
    right_3 = module_0.Right(int_0)
    var_0 = left_0 == right_3
    right_4 = module_0.Right(int_0)
    callable_0 = None
    var_1 = left_0.map(callable_0)
    var_2 = right_4 == left_1