# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = '\n        Applies the function inside the Maybe[A] structure to another applicative type for notempty Maybe.\n        For empty returns copy of itself\n\n        :param applicative: applicative contains function\n        :type applicative: Maybe[B]\n        :returns: new Maybe with result of contains function\n        :rtype: Maybe[A(B) | None]\n        '
        bytes_0 = b'H\xa9S\r\xaa\xa2\x84\xd6\xe3\xf3a\x1c\xfdw\xd9'
        bytes_1 = b'\x95\x8f\xf2\x95\x13C\x9b\x95$\xd5\x8c\r\xf2d'
        either_0 = module_0.Either(bytes_1)
        var_0 = either_0.case(str_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        either_0 = None
        int_0 = -3958
        either_1 = module_0.Either(int_0)
        object_0 = None
        bool_0 = False
        left_0 = module_0.Left(bool_0)
        bool_1 = left_0.is_right()
        either_2 = module_0.Either(object_0)
        var_0 = either_1.ap(either_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        either_0 = module_0.Either(var_0)
        left_0 = module_0.Left(var_0)
        right_0 = module_0.Right(var_0)
        var_1 = either_0.to_try()
        dict_0 = {}
        object_0 = module_1.object(**dict_0)
        bool_0 = either_0.__eq__(object_0)
        either_1 = module_0.Either(var_0)
        var_2 = either_1.is_right()
        left_1 = module_0.Left(var_0)
        right_1 = module_0.Right(var_0)
        callable_0 = None
        var_3 = right_1.bind(callable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        list_1 = []
        right_0 = module_0.Right(list_1)
        var_0 = right_0.map(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 5
        object_0 = module_1.object()
        float_0 = 17.98203
        either_0 = module_0.Either(float_0)
        bool_0 = either_0.__eq__(object_0)
        int_1 = -19
        var_0 = lambda v: v + int_0
        var_1 = either_0.to_box()
        var_2 = lambda v: v * int_1
        right_0 = module_0.Right(int_0)
        var_3 = lambda v: v + int_1
        var_4 = lambda v: v * int_1
        var_5 = right_0.case(var_3, var_4)
    except BaseException:
        pass