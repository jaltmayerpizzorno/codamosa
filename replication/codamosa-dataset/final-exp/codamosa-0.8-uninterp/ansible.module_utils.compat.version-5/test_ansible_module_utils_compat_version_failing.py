# Automatically generated by Pynguin.
import ansible.module_utils.compat.version as module_0

def test_case_0():
    try:
        str_0 = 'operation_timeout'
        loose_version_0 = module_0.LooseVersion(str_0)
        list_0 = []
        version_0 = module_0.Version(list_0)
        var_0 = version_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        loose_version_0 = module_0.LooseVersion()
        version_0 = module_0.Version()
        tuple_0 = ()
        var_0 = version_0.__eq__(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        version_0 = module_0.Version()
        version_1 = module_0.Version()
        var_0 = version_1.__lt__(version_0)
    except BaseException:
        pass

def test_case_3():
    try:
        version_0 = None
        version_1 = module_0.Version()
        var_0 = version_1.__le__(version_0)
    except BaseException:
        pass

def test_case_4():
    try:
        version_0 = module_0.Version()
        str_0 = '1.5'
        strict_version_0 = module_0.StrictVersion(str_0)
        var_0 = strict_version_0.__str__()
        strict_version_1 = module_0.StrictVersion(str_0)
        strict_version_2 = module_0.StrictVersion(str_0)
        var_1 = strict_version_1.__str__()
        str_1 = '+d\x0bt'
        loose_version_0 = module_0.LooseVersion(str_1)
        var_2 = loose_version_0.__repr__()
        strict_version_3 = module_0.StrictVersion()
        strict_version_4 = module_0.StrictVersion()
        bool_0 = True
        var_3 = version_0.__gt__(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '%H|Kt]$Np\n)r?/Ni&m'
        strict_version_0 = module_0.StrictVersion()
        var_0 = strict_version_0.parse(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        strict_version_0 = module_0.StrictVersion()
        var_0 = strict_version_0.__str__()
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 257
        loose_version_0 = module_0.LooseVersion()
        var_0 = loose_version_0.parse(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '1.5'
        str_1 = '1.5.0b1'
        loose_version_0 = module_0.LooseVersion(str_0)
        int_0 = 1933
        version_0 = module_0.Version()
        strict_version_0 = module_0.StrictVersion(str_1)
        var_0 = strict_version_0.__ge__(str_0)
        var_1 = loose_version_0.parse(int_0)
    except BaseException:
        pass