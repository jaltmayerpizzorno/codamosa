# Automatically generated by Pynguin.
import ansible.parsing.yaml.dumper as module_0
import ansible.template as module_1
import ansible.parsing.yaml.objects as module_2
import ansible.vars.hostvars as module_3
import ansible.utils.unsafe_proxy as module_4

def test_case_0():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        ansible_undefined_0 = module_1.AnsibleUndefined()
        str_0 = 'tag:yaml.org,2002:str'
        var_1 = ansible_dumper_0.represent_scalar(str_0, ansible_undefined_0)
        var_2 = ansible_dumper_0.represent_data(ansible_undefined_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        ansible_undefined_0 = module_1.AnsibleUndefined()
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_2.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_dumper_0.represent_data(ansible_vault_encrypted_unicode_0)
        str_0 = 'tag:yaml.org,2002:str'
        var_2 = ansible_dumper_0.represent_scalar(str_0, ansible_undefined_0)
        var_3 = ansible_dumper_0.represent_data(ansible_undefined_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        ansible_vault_encrypted_unicode_0 = module_2.AnsibleVaultEncryptedUnicode(ansible_dumper_0)
        ansible_unicode_0 = module_2.AnsibleUnicode()
        host_vars_0 = module_3.HostVars(ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0, ansible_unicode_0)
        var_1 = ansible_dumper_0.represent_data(host_vars_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        ansible_undefined_0 = module_1.AnsibleUndefined()
        str_0 = 'tag:yaml.org,2002:str'
        var_1 = ansible_dumper_0.represent_scalar(str_0, ansible_undefined_0)
        ansible_unsafe_bytes_0 = module_4.AnsibleUnsafeBytes()
        var_2 = ansible_dumper_0.represent_data(ansible_unsafe_bytes_0)
        var_3 = ansible_dumper_0.represent_data(ansible_undefined_0)
    except BaseException:
        pass