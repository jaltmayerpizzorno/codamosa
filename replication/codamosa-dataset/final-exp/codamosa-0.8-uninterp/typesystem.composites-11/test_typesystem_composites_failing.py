# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = None
        never_match_0 = module_0.NeverMatch()
        any_0 = never_match_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        field_0 = module_1.Field()
        list_0 = []
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        field_0 = module_1.Field()
        list_0 = [field_0, field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        bool_0 = False
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(all_of_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xd5@\xe3\x8f}ejA+\x9dn'
        bool_0 = False
        bool_1 = True
        field_0 = module_1.Field(allow_null=bool_1)
        list_0 = [field_0]
        all_of_0 = module_0.AllOf(list_0)
        any_0 = all_of_0.validate(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        field_0 = module_1.Field(allow_null=bool_0)
        str_0 = 'A\x0b'
        str_1 = '{Io3cov)O'
        dict_0 = {str_0: field_0, str_1: str_0, str_0: field_0}
        not_0 = module_0.Not(field_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        any_0 = module_1.Any()
        not_0 = module_0.Not(any_0)
        int_0 = 1
        any_1 = not_0.validate(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'dependencies'
        field_0 = module_1.Field(description=str_0)
        validation_result_0 = None
        str_1 = 'EgFlm'
        dict_0 = {str_0: field_0, str_0: validation_result_0, str_0: validation_result_0, str_1: str_0}
        if_then_else_0 = module_0.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        field_0 = module_1.Field()
        list_0 = [field_0, field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        bool_0 = True
        if_then_else_0 = module_0.IfThenElse(field_0, field_0)
        list_1 = []
        one_of_0 = module_0.OneOf(list_1)
        any_0 = one_of_0.validate(all_of_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b',\xbe\xa5\xdfp\t\xcb]\x10\xed'
        list_0 = [bytes_0]
        all_of_0 = None
        int_0 = -3351
        list_1 = [list_0, all_of_0, all_of_0, int_0]
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        if_then_else_0 = module_0.IfThenElse(field_0, field_0)
        any_0 = if_then_else_0.validate(list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        field_0 = module_1.Field()
        if_then_else_0 = module_0.IfThenElse(field_0)
        not_0 = module_0.Not(field_0)
        list_0 = [field_0, field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        list_1 = []
        one_of_0 = module_0.OneOf(list_1)
        never_match_0 = module_0.NeverMatch()
        any_0 = one_of_0.validate(field_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '<J+T4Q[}~B7q49'
        bool_0 = True
        field_0 = module_1.Field(title=str_0, allow_null=bool_0)
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, field_0)
        str_1 = 'n\x0b,}tA'
        field_1 = module_1.Field()
        str_2 = ', '
        str_3 = '%9H\rp=G7i8&LWi'
        dict_0 = {str_1: str_1, str_2: str_2, str_3: str_2, str_2: field_1}
        not_0 = module_0.Not(field_1, **dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0, any_0]
        one_of_0 = module_0.OneOf(any_1)
        int_0 = 10
        var_0 = int_0
        any_2 = one_of_0.validate(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        any_0 = module_1.Any()
        if_then_else_0 = module_0.IfThenElse(any_0)
        str_0 = 'Test'
        any_1 = if_then_else_0.validate(str_0)
        never_match_0 = module_0.NeverMatch()
        if_then_else_1 = module_0.IfThenElse(never_match_0)
        any_2 = if_then_else_1.validate(str_0)
        never_match_1 = module_0.NeverMatch()
        any_3 = module_1.Any()
        if_then_else_2 = module_0.IfThenElse(never_match_1, any_3)
        any_4 = if_then_else_2.validate(str_0)
        never_match_2 = module_0.NeverMatch()
        any_5 = module_1.Any()
        if_then_else_3 = module_0.IfThenElse(never_match_2, any_5)
        any_6 = if_then_else_3.validate(str_0)
        never_match_3 = module_0.NeverMatch()
        any_7 = module_1.Any()
        if_then_else_4 = module_0.IfThenElse(never_match_3, any_7, never_match_1)
        any_8 = if_then_else_4.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        any_0 = module_1.Any()
        never_match_0 = module_0.NeverMatch()
        any_1 = [never_match_0, never_match_0, never_match_0, any_0, any_0, any_0]
        one_of_0 = module_0.OneOf(any_1)
        str_0 = '$@6Oc@5f-?_)w~#'
        field_0 = module_1.Field(title=str_0)
        not_0 = module_0.Not(field_0)
        if_then_else_0 = module_0.IfThenElse(field_0, field_0)
        never_match_1 = module_0.NeverMatch()
        if_then_else_1 = module_0.IfThenElse(field_0)
        list_0 = [field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        any_2 = one_of_0.validate(all_of_0)
    except BaseException:
        pass

def test_case_14():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0, any_0]
        bool_0 = any_0.has_default()
        one_of_0 = module_0.OneOf(any_1)
        int_0 = 154
        str_0 = 'pS?w%N'
        field_0 = module_1.Field(title=str_0)
        not_0 = module_0.Not(field_0)
        never_match_0 = module_0.NeverMatch()
        str_1 = 'allow_null'
        dict_0 = {str_0: bool_0, str_0: never_match_0, str_1: int_0}
        not_1 = module_0.Not(field_0, **dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        any_0 = module_1.Any()
        one_of_0 = module_0.OneOf(any_0)
        str_0 = 'allowOuDf'
        any_1 = any_0.get_default_value()
        any_2 = any_0.validate(str_0)
        field_0 = module_1.Field(title=str_0)
        never_match_0 = module_0.NeverMatch()
        union_0 = any_0.__or__(field_0)
        str_1 = 'allow_null'
        dict_0 = {str_1: one_of_0}
        never_match_1 = module_0.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        any_0 = module_1.Any()
        one_of_0 = module_0.OneOf(any_0)
        str_0 = 'allowOuDf'
        any_1 = any_0.get_default_value()
        any_2 = any_0.validate(str_0)
        field_0 = module_1.Field(title=str_0)
        never_match_0 = module_0.NeverMatch()
        union_0 = any_0.__or__(field_0)
        list_0 = None
        str_1 = 'allow_null'
        dict_0 = {str_1: one_of_0}
        all_of_0 = module_0.AllOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        any_0 = module_1.Any()
        one_of_0 = module_0.OneOf(any_0)
        str_0 = 'allowOuDf'
        any_1 = any_0.get_default_value()
        any_2 = any_0.validate(str_0)
        field_0 = module_1.Field(title=str_0)
        never_match_0 = module_0.NeverMatch()
        union_0 = any_0.__or__(field_0)
        list_0 = None
        str_1 = 'allow_null'
        dict_0 = {str_1: one_of_0}
        one_of_1 = module_0.OneOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        any_0 = module_1.Any()
        one_of_0 = module_0.OneOf(any_0)
        str_0 = 'allowOuDf'
        any_1 = any_0.get_default_value()
        any_2 = any_0.validate(str_0)
        field_0 = module_1.Field(title=str_0)
        never_match_0 = module_0.NeverMatch()
        union_0 = any_0.__or__(field_0)
        str_1 = 'allow_null'
        list_0 = [field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        dict_0 = {str_1: one_of_0, str_0: one_of_0, str_0: never_match_0, str_0: field_0}
        if_then_else_0 = module_0.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass