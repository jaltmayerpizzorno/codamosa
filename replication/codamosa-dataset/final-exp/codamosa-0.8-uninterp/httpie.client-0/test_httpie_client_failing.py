# Automatically generated by Pynguin.
import httpie.client as module_0
import argparse as module_1
import httpie.cli.dicts as module_2
import pathlib as module_3

def test_case_0():
    try:
        bool_0 = True
        var_0 = None
        dict_0 = {}
        dict_1 = {bool_0: dict_0}
        dict_2 = {var_0: bool_0, var_0: dict_1, bool_0: dict_0}
        var_1 = module_0.dump_request(dict_2)
        str_0 = 'data'
        bool_1 = True
        session_0 = module_0.build_requests_session(bool_1)
        dict_3 = {str_0: var_0}
        namespace_0 = module_1.Namespace(**dict_3)
        request_headers_dict_0 = module_0.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_1():
    try:
        request_headers_dict_0 = None
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'output_file'
        dict_0 = {str_0: str_0, str_0: str_0}
        request_headers_dict_0 = module_2.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
        namespace_0 = module_1.Namespace()
        dict_1 = module_0.make_request_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_3():
    try:
        namespace_0 = module_1.Namespace()
        request_headers_dict_0 = module_0.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_4():
    try:
        namespace_0 = module_1.Namespace()
        dict_0 = module_0.make_send_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_5():
    try:
        namespace_0 = module_1.Namespace()
        dict_0 = module_0.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_6():
    try:
        namespace_0 = module_1.Namespace()
        dict_0 = module_0.make_request_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        request_headers_dict_0 = module_2.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
        bool_0 = True
        str_0 = '^1YI*Php_'
        session_0 = module_0.build_requests_session(bool_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'output_file'
        dict_0 = {str_0: str_0, str_0: str_0}
        request_headers_dict_0 = module_2.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
        request_headers_dict_2 = module_0.finalize_headers(request_headers_dict_1)
        namespace_0 = module_1.Namespace()
        dict_1 = module_0.make_request_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'z}xiu$'
        dict_0 = {str_0: str_0, str_0: str_0}
        namespace_0 = module_1.Namespace()
        path_0 = module_3.Path()
        iterable_0 = module_0.collect_messages(namespace_0, path_0)
        request_headers_dict_0 = module_2.RequestHeadersDict(iterable_0, **dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = None
        optional_0 = None
        str_0 = '^1YI*Php_'
        str_1 = '-p'
        str_2 = 'Y/X}d'
        dict_0 = {str_0: var_0, str_1: optional_0, str_1: var_0, str_2: str_1}
        request_headers_dict_0 = module_2.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
        request_headers_dict_2 = module_0.finalize_headers(request_headers_dict_1)
        bool_0 = True
        session_0 = module_0.build_requests_session(bool_0, str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'data'
        int_0 = -532
        tuple_0 = (str_0, str_0, int_0)
        dict_0 = {str_0: tuple_0}
        namespace_0 = module_1.Namespace(**dict_0)
        request_headers_dict_0 = module_0.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = None
        str_0 = 'data'
        bool_0 = True
        session_0 = module_0.build_requests_session(bool_0)
        dict_0 = {str_0: var_0}
        namespace_0 = module_1.Namespace(**dict_0)
        request_headers_dict_0 = module_0.make_default_headers(namespace_0)
    except BaseException:
        pass