# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        validation_error_0 = module_0.ValidationError()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'n\taKfs}k'
        list_0 = []
        base_error_0 = module_0.BaseError(text=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '[MzBfU5m]Yx5S>'
        int_0 = -1798
        validation_result_0 = module_0.ValidationResult()
        str_1 = validation_result_0.__repr__()
        list_0 = [str_0, int_0, int_0]
        message_0 = module_0.Message(text=str_0, index=list_0)
        validation_result_1 = module_0.ValidationResult()
        iterator_0 = validation_result_1.__iter__()
        base_error_0 = module_0.BaseError(position=validation_result_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, key=str_0)
        str_1 = base_error_0.__str__()
        message_0 = module_0.Message(text=str_0, position=base_error_0)
        str_2 = message_0.__repr__()
        str_3 = message_0.__repr__()
        str_4 = None
        int_0 = None
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_1 = module_0.Message(text=str_4, position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'label'
        str_1 = None
        list_0 = [str_0, str_1, str_0, str_0]
        int_0 = -1149
        validation_result_0 = module_0.ValidationResult()
        bool_0 = validation_result_0.__bool__()
        message_0 = module_0.Message(text=str_0, key=str_0, index=list_0, end_position=int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1406
        int_1 = -759
        position_0 = module_0.Position(int_0, int_0, int_1)
        str_0 = '_h5f7.\n>U.H P22v4kc['
        int_2 = 3049
        int_3 = 6
        position_1 = module_0.Position(int_2, int_2, int_3)
        message_0 = module_0.Message(text=str_0, position=position_1, start_position=position_1, end_position=position_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'H<'
        int_0 = -296
        int_1 = -503
        int_2 = -2417
        position_0 = module_0.Position(int_0, int_1, int_2)
        message_0 = module_0.Message(text=str_0, position=position_0)
        list_0 = [message_0, message_0]
        base_error_0 = module_0.BaseError(code=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 6
        int_1 = -3050
        int_2 = 4
        position_0 = module_0.Position(int_1, int_0, int_2)
        tuple_0 = (position_0,)
        bool_0 = True
        validation_error_0 = module_0.ValidationError(position=tuple_0, messages=bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2505
        position_0 = module_0.Position(int_0, int_0, int_0)
        validation_result_0 = module_0.ValidationResult(error=position_0)
        str_0 = validation_result_0.__repr__()
        str_1 = 'H<'
        message_0 = module_0.Message(text=str_1)
        list_0 = [message_0, message_0, message_0, message_0]
        bool_0 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(messages=list_0)
        str_2 = base_error_0.__str__()
        str_3 = position_0.__repr__()
        bool_1 = position_0.__eq__(bool_0)
        str_4 = base_error_0.__str__()
        parse_error_0 = module_0.ParseError(code=str_2, position=position_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1773
        int_1 = 863
        position_0 = module_0.Position(int_0, int_0, int_1)
        bytes_0 = b"-'\xc9\xbf\x10.\xbb\xad\x04\x080\xe9\xb4;\xaf;"
        validation_result_0 = module_0.ValidationResult(value=position_0, error=bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        int_0 = -1879
        int_1 = -2052
        position_0 = module_0.Position(int_0, int_0, int_1)
        base_error_0 = module_0.BaseError(text=list_0, position=position_0)
        str_0 = base_error_0.__str__()
        str_1 = 'Must be a number.'
        message_0 = module_0.Message(text=str_1, index=position_0, position=position_0)
        str_2 = base_error_0.__repr__()
        bool_0 = position_0.__eq__(str_2)
        int_2 = base_error_0.__hash__()
        bool_1 = position_0.__eq__(str_1)
        str_3 = base_error_0.__str__()
        int_3 = base_error_0.__len__()
        base_error_1 = module_0.BaseError(messages=str_3)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1230
        int_1 = 126
        int_2 = 2505
        position_0 = module_0.Position(int_0, int_1, int_2)
        validation_result_0 = module_0.ValidationResult(error=position_0)
        str_0 = validation_result_0.__repr__()
        int_3 = -3
        str_1 = 'H<'
        int_4 = 284
        message_0 = module_0.Message(text=str_1)
        list_0 = [message_0, message_0, message_0, message_0]
        bool_0 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(messages=list_0)
        str_2 = base_error_0.__str__()
        str_3 = base_error_0.__repr__()
        str_4 = position_0.__repr__()
        position_1 = module_0.Position(int_3, int_4, int_4)
        bool_1 = position_1.__eq__(int_4)
        base_error_1 = module_0.BaseError(code=str_1, position=position_1)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 1230
        int_1 = 126
        int_2 = 2505
        position_0 = module_0.Position(int_0, int_1, int_2)
        validation_result_0 = module_0.ValidationResult(error=position_0)
        str_0 = validation_result_0.__repr__()
        int_3 = 5
        str_1 = 'H<'
        str_2 = '!yA'
        message_0 = module_0.Message(text=str_2)
        int_4 = message_0.__hash__()
        int_5 = 284
        message_1 = module_0.Message(text=str_1)
        str_3 = validation_result_0.__repr__()
        list_0 = [message_1, message_1, message_1, message_1]
        bool_0 = message_1.__eq__(message_1)
        base_error_0 = module_0.BaseError(messages=list_0)
        str_4 = base_error_0.__str__()
        position_1 = module_0.Position(int_3, int_5, int_5)
        bool_1 = position_1.__eq__(int_5)
        str_5 = 'K9bT\x0b*k$(\rGhBqYmAC'
        int_6 = 1577
        int_7 = 1032
        position_2 = module_0.Position(int_3, int_4, int_7)
        optional_0 = None
        message_2 = module_0.Message(text=str_5, index=optional_0, start_position=position_0, end_position=position_1)
        message_3 = module_0.Message(text=str_5, index=message_2, start_position=position_0)
        str_6 = message_3.__repr__()
        int_8 = -1150
        int_9 = None
        position_3 = module_0.Position(int_8, int_9, int_6)
        int_10 = message_3.__hash__()
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 1230
        int_1 = 126
        int_2 = 2505
        position_0 = module_0.Position(int_0, int_1, int_2)
        bool_0 = position_0.__eq__(position_0)
        validation_result_0 = module_0.ValidationResult(error=position_0)
        str_0 = validation_result_0.__repr__()
        int_3 = 5
        str_1 = 'H<'
        int_4 = 284
        message_0 = module_0.Message(text=str_1)
        list_0 = [message_0, message_0, message_0, message_0]
        bool_1 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(messages=list_0)
        str_2 = base_error_0.__str__()
        position_1 = module_0.Position(int_3, int_4, int_4)
        bool_2 = position_1.__eq__(int_4)
        position_2 = module_0.Position(int_3, int_4, int_2)
        bool_3 = position_2.__eq__(str_2)
        str_3 = base_error_0.__repr__()
        int_5 = 2
        int_6 = 1577
        position_3 = module_0.Position(int_4, int_1, int_2)
        str_4 = 'H<'
        int_7 = 105
        list_1 = [int_5, int_0, int_6, int_7]
        message_1 = module_0.Message(text=str_4, index=list_1, position=position_2)
        str_5 = message_0.__repr__()
        int_8 = -1872
        parse_error_0 = module_0.ParseError(key=int_8, messages=list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1230
        int_1 = 126
        int_2 = 2505
        position_0 = module_0.Position(int_0, int_1, int_2)
        bool_0 = position_0.__eq__(position_0)
        validation_result_0 = module_0.ValidationResult(error=position_0)
        str_0 = validation_result_0.__repr__()
        int_3 = 5
        str_1 = 'H<'
        message_0 = module_0.Message(text=str_1)
        list_0 = [message_0, message_0, message_0, message_0]
        bool_1 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(messages=list_0)
        str_2 = base_error_0.__str__()
        position_1 = module_0.Position(int_3, int_3, int_3)
        bool_2 = position_1.__eq__(int_2)
        position_2 = module_0.Position(int_3, int_0, int_2)
        bool_3 = position_2.__eq__(str_2)
        str_3 = base_error_0.__repr__()
        str_4 = message_0.__repr__()
        bool_4 = base_error_0.__eq__(bool_2)
        int_4 = -524
        position_3 = module_0.Position(int_4, int_1, int_2)
        str_5 = 'H<'
        int_5 = 105
        list_1 = [int_4, int_0, int_5, int_5]
        message_1 = module_0.Message(text=str_5, index=list_1, position=position_2)
        str_6 = message_0.__repr__()
        int_6 = -3424
        position_4 = module_0.Position(int_3, int_6, int_6)
        bool_5 = position_4.__eq__(position_1)
        base_error_1 = module_0.BaseError()
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 1230
        int_1 = 126
        int_2 = 2505
        position_0 = module_0.Position(int_0, int_1, int_2)
        bool_0 = position_0.__eq__(position_0)
        validation_result_0 = module_0.ValidationResult(error=position_0)
        str_0 = validation_result_0.__repr__()
        int_3 = 5
        str_1 = 'H<'
        message_0 = module_0.Message(text=str_1)
        list_0 = [message_0, message_0, message_0, message_0]
        bool_1 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(messages=list_0)
        str_2 = base_error_0.__str__()
        position_1 = module_0.Position(int_3, int_3, int_3)
        bool_2 = position_1.__eq__(int_2)
        position_2 = module_0.Position(int_3, int_0, int_2)
        bool_3 = position_2.__eq__(str_2)
        str_3 = base_error_0.__repr__()
        str_4 = message_0.__repr__()
        bool_4 = base_error_0.__eq__(bool_2)
        int_4 = 3206
        int_5 = 1577
        position_3 = module_0.Position(int_4, int_1, int_2)
        str_5 = 'H<'
        int_6 = 105
        list_1 = [int_4, int_0, int_5, int_6]
        message_1 = module_0.Message(text=str_5, index=list_1, position=position_2)
        str_6 = message_1.__repr__()
        int_7 = None
        position_4 = module_0.Position(int_2, int_0, int_3)
        bool_5 = position_4.__eq__(int_7)
        bool_6 = message_0.__eq__(message_1)
        base_error_1 = module_0.BaseError()
    except BaseException:
        pass