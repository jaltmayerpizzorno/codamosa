# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        list_0 = [base_fact_collector_0, base_fact_collector_0, base_fact_collector_0, base_fact_collector_0]
        bytes_0 = b'\xf4N\x80\xee'
        var_0 = module_0.find_collectors_for_platform(list_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 303
        var_0 = module_0.build_fact_id_to_collector_map(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '<"\'1cGW-#x;"\nf'
        var_0 = module_0.build_fact_id_to_collector_map(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '8kp Ve"GDn'
        dict_0 = {str_0: str_0}
        var_0 = module_0.select_collector_classes(str_0, dict_0)
        str_1 = 'Linux'
        list_0 = [str_1, str_1]
        dict_1 = {str_1: list_0, str_1: str_1}
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect()
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        list_0 = [base_fact_collector_0, var_0]
        bytes_0 = b'}W/'
        var_1 = module_0.find_unresolved_requires(list_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'k\n\x0b}M+t\rv#2Yr}#EJR'
        str_1 = 'Q#N(Jx[Ed^'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        bool_0 = False
        collector_not_found_error_0 = None
        list_0 = [str_1, dict_0, dict_0]
        str_2 = "\\Z')w<&Rtt,:o"
        var_0 = module_0.collector_classes_from_gather_subset(collector_not_found_error_0, list_0, str_2)
        var_1 = module_0.build_dep_data(dict_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '$gP{wT'
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        tuple_0 = (str_0, collector_not_found_error_0)
        bytes_0 = b'\x19\x95pv\xe74k\x1c\xe6\x80\xae\xf5\xcb\x8f'
        var_0 = module_0.resolve_requires(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        str_1 = ';o@tI'
        list_0 = [str_1, str_1]
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0)
        dict_0 = {str_0: str_0, str_1: collector_not_found_error_0}
        var_0 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        set_0 = set()
        base_fact_collector_0 = module_0.BaseFactCollector()
        base_fact_collector_1 = module_0.BaseFactCollector(set_0, base_fact_collector_0)
        var_0 = base_fact_collector_1.collect_with_namespace()
        bytes_0 = b'\x87HY?\xd0\xbd\xe2\x83s\xd3\x81'
        var_1 = module_0.collector_classes_from_gather_subset(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        bool_0 = False
        str_0 = 'gw^t`v\ryimD;h`sA'
        var_0 = module_0.collector_classes_from_gather_subset(bool_0, str_0)
        dict_0 = {unresolved_fact_dep_0: var_0, unresolved_fact_dep_0: str_0}
        dict_1 = {}
        var_1 = module_0.find_unresolved_requires(dict_0, dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 1371.066496
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace()
        list_0 = []
        list_1 = [list_0]
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(*list_1)
        tuple_0 = (float_0, collector_not_found_error_0, list_0, unresolved_fact_dep_0)
        var_1 = module_0.resolve_requires(tuple_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        bytes_0 = b'y\xb6;W\x90\xed\x86\xd57\xe7\rr'
        bool_0 = False
        str_0 = 'gw^t`v\ryimD;h`sA'
        var_0 = module_0.collector_classes_from_gather_subset(bool_0, str_0)
        list_0 = [bytes_0, bytes_0]
        base_fact_collector_0 = module_0.BaseFactCollector()
        tuple_0 = ()
        str_1 = 'DZp9WF.@l)p;Etqh+'
        var_1 = module_0.resolve_requires(tuple_0, str_1)
        float_0 = 2520.525724
        bytes_1 = b'\xb9Q7\x1e$8&5'
        var_2 = module_0.get_collector_names(unresolved_fact_dep_0, float_0, list_0, bytes_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'bqQ&=.'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, str_0, dict_0]
        var_0 = module_0.resolve_requires(dict_0, list_0)
        str_1 = '3zx159kf |u[\ntr>O'
        str_2 = 'p:xpp_S\nAyXbd'
        str_3 = '8\tW'
        dict_1 = {str_1: str_1, str_2: str_2, str_3: str_3, str_1: str_2}
        int_0 = 2479
        var_1 = module_0.collector_classes_from_gather_subset(dict_1, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = '"]ykv1 \\\\]KHIfFx\n$'
        list_0 = [collector_not_found_error_0, str_0]
        bool_0 = True
        tuple_0 = (list_0, bool_0)
        str_1 = 'KyuBfv?^*Tuh!WT*0CO'
        dict_0 = {str_0: tuple_0, str_1: tuple_0}
        var_0 = module_0.build_dep_data(dict_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'y\xb6;W\x90\xed\x86\xd57\xe7\rr'
        str_0 = 'gw^t`v\ryimD;h`sA'
        list_0 = [bytes_0, bytes_0]
        str_1 = '3D$g4\x0bZ@UQ'
        tuple_0 = ()
        str_2 = 'DZp9WF.@l)p;Etqh+'
        var_0 = module_0.resolve_requires(tuple_0, str_2)
        dict_0 = {str_1: str_1, str_1: list_0}
        dict_1 = {}
        var_1 = module_0.collector_classes_from_gather_subset(dict_1, tuple_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '7'
        str_1 = '5'
        str_2 = '11'
        str_3 = '8'
        str_4 = '2'
        str_5 = [str_2, str_4]
        var_0 = set(str_5)
        str_6 = [str_3, str_2]
        var_1 = set(str_6)
        str_7 = '9'
        str_8 = [str_7]
        var_2 = set(str_8)
        var_3 = set(str_1)
        var_4 = {str_0: str_7, str_1: var_0, str_7: var_1, str_2: str_2, str_3: var_2, str_4: var_3}
        var_5 = module_0.tsort(var_4)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'y\xb6;W\x90\xed\x86\xd57\xe7\rr'
        str_0 = 'gw^t`v\ryimD;h`sA'
        list_0 = [bytes_0]
        float_0 = -1762.29
        str_1 = '3D$g4\x0bZ@UQ'
        base_fact_collector_0 = module_0.BaseFactCollector()
        tuple_0 = ()
        str_2 = 'DZp9WF.@l)p;Etqh+'
        var_0 = module_0.resolve_requires(tuple_0, str_2)
        var_1 = base_fact_collector_0.collect_with_namespace()
        dict_0 = {str_1: str_1, str_1: list_0}
        var_2 = module_0.collector_classes_from_gather_subset(float_0, base_fact_collector_0, str_0, var_0, dict_0)
    except BaseException:
        pass