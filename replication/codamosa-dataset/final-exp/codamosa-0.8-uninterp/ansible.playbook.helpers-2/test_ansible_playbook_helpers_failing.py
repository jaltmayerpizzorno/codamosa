# Automatically generated by Pynguin.
import ansible.utils.display as module_0
import ansible.playbook.helpers as module_1

def test_case_0():
    try:
        bool_0 = True
        list_0 = [bool_0]
        dict_0 = None
        display_0 = module_0.Display()
        var_0 = module_1.load_list_of_blocks(list_0, list_0, dict_0, display_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b''
        str_0 = 'm5WwHYb_\tFy9s%<>e\x0c'
        var_0 = module_1.load_list_of_blocks(bytes_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        float_0 = None
        bytes_0 = b'\x84\xb4\xcb\x9bL\xa8\xb5\xe0j'
        var_0 = module_1.load_list_of_tasks(bool_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        list_0 = []
        float_0 = None
        dict_0 = {float_0: bool_0}
        tuple_0 = (float_0, dict_0)
        var_0 = module_1.load_list_of_tasks(list_0, tuple_0)
        tuple_1 = None
        str_0 = '] ;}L]Fvn3`ROE[\x0bpVU?'
        float_1 = 1000.0
        var_1 = module_1.load_list_of_tasks(str_0, float_1, tuple_1, dict_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 2.0
        list_0 = [float_0, float_0]
        str_0 = None
        set_0 = None
        int_0 = -1291
        tuple_0 = (float_0, set_0, set_0, int_0)
        bool_0 = True
        var_0 = module_1.load_list_of_roles(list_0, str_0, tuple_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = None
        dict_0 = {bool_0: bool_0}
        var_0 = module_1.load_list_of_roles(bool_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -3735.0
        list_0 = []
        set_0 = {float_0}
        var_0 = module_1.load_list_of_roles(list_0, set_0)
        bool_0 = False
        str_0 = "You cannot use loops on 'import_tasks' statements. You should use 'include_tasks' instead."
        tuple_0 = (str_0,)
        str_1 = "couldn't resolve module/action '{0}'. This often indicates a misspelling, missing collection, or incorrect module path."
        var_1 = module_1.load_list_of_roles(bool_0, tuple_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Anolis'
        list_0 = [str_0, str_0, str_0]
        dict_0 = {}
        bool_0 = True
        var_0 = module_1.load_list_of_blocks(list_0, dict_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'wt_'
        str_1 = 'Anolis'
        str_2 = {str_1: str_0}
        str_3 = {str_1: str_2}
        list_0 = [str_3, str_1, str_1]
        dict_0 = {}
        bool_0 = True
        var_0 = module_1.load_list_of_blocks(list_0, dict_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'wiKh_'
        str_1 = 'debug'
        str_2 = {str_1: str_0}
        str_3 = {str_1: str_2}
        str_4 = {}
        list_0 = [str_3, str_4, str_4]
        dict_0 = {}
        bool_0 = False
        var_0 = module_1.load_list_of_blocks(list_0, dict_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'wiKh_'
        str_1 = {str_0: str_0}
        str_2 = {}
        list_0 = [str_1, str_2, str_2]
        dict_0 = {}
        bool_0 = False
        var_0 = module_1.load_list_of_blocks(list_0, dict_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'block'
        str_1 = 'debug'
        str_2 = 'msg'
        str_3 = '1'
        str_4 = {str_2: str_3}
        str_5 = {str_1: str_4}
        str_6 = {str_2: str_4}
        str_7 = {str_1: str_6}
        str_8 = [str_5, str_7]
        str_9 = {str_0: str_8}
        str_10 = {str_1: str_2}
        str_11 = [str_10, str_3]
        str_12 = {str_0: str_11}
        str_13 = [str_9, str_12]
        str_14 = {str_0: str_13}
        str_15 = [str_14]
        var_0 = module_1.load_list_of_tasks(str_15, str_12, str_12, str_12, str_12, str_12, str_12, str_12)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'block'
        str_1 = 'debug'
        str_2 = {str_1: str_1}
        str_3 = {str_1: str_2}
        str_4 = [str_0, str_3]
        str_5 = {str_0: str_4}
        list_0 = [str_3, str_4, str_5]
        dict_0 = {}
        bool_0 = False
        var_0 = module_1.load_list_of_blocks(list_0, dict_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'action'
        str_1 = 'name'
        str_2 = 'import_role'
        str_3 = 'test'
        str_4 = {str_0: str_2, str_1: str_3}
        str_5 = [str_4, str_1]
        var_0 = {}
        var_1 = None
        var_2 = None
        bool_0 = False
        var_3 = {}
        var_4 = module_1.load_list_of_tasks(str_5, var_0, var_1, bool_0, var_2, bool_0, var_2, var_3)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'with_'
        str_1 = 'Anolis'
        str_2 = '`-\x0c=0yq1Ten4'
        str_3 = {str_1: str_2}
        str_4 = {str_1: str_3}
        dict_0 = None
        list_0 = [str_4, str_0, str_0, str_4]
        bytes_0 = b'!\xc2\x12\xea\xffL.\xf9V!\x07+\x13_f\xe6\xf0\xd4\x05'
        bool_0 = False
        var_0 = module_1.load_list_of_blocks(dict_0, list_0, bytes_0, bool_0)
        str_5 = {str_2: var_0, dict_0: str_0, str_1: str_0}
        list_1 = [str_5, str_0, str_0]
        dict_1 = {}
        bool_1 = False
        var_1 = module_1.load_list_of_blocks(list_1, dict_1, str_1, bool_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'action'
        str_1 = 'register'
        str_2 = 'test'
        str_3 = {str_0: str_2, str_1: str_2}
        str_4 = 'include'
        str_5 = 'static'
        str_6 = 'test.yml'
        bool_0 = False
        var_0 = {str_4: str_6, str_5: bool_0}
        var_1 = [str_3, var_0]
        var_2 = None
        var_3 = module_1.load_list_of_tasks(var_1, var_2, var_2, var_2, var_2, bool_0, var_2, var_2)
    except BaseException:
        pass