# Automatically generated by Pynguin.
import tornado.locale as module_0
import gettext as module_1

def test_case_0():
    try:
        str_0 = None
        module_0.load_translations(str_0)
        bool_0 = True
        locale_0 = module_0.get()
        str_1 = locale_0.list(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        module_0.load_gettext_translations(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '_"J!x5b8P<Ixb'
        str_1 = 'rs|y8ue8"xo<'
        list_0 = [str_0, str_1, str_0]
        locale_0 = module_0.get(*list_0)
        dict_0 = None
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'A `RequestHandler` that wraps another HTTP server callback.\n\n    The fallback is a callable object that accepts an\n    `~.httputil.HTTPServerRequest`, such as an `Application` or\n    `tornado.wsgi.WSGIContainer`.  This is most useful to use both\n    Tornado ``RequestHandlers`` and WSGI in the same server.  Typical\n    usage::\n\n        wsgi_app = tornado.wsgi.WSGIContainer(\n            django.core.handlers.wsgi.WSGIHandler())\n        application = tornado.web.Application([\n            (r"/foo", FooHandler),\n            (r".*", FallbackHandler, dict(fallback=wsgi_app),\n        ])\n    '
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'lv_LV'
        locale_0 = module_0.get()
        str_1 = locale_0.list(str_0)
        datetime_0 = None
        bool_0 = locale_0.format_day(datetime_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -278
        str_0 = None
        str_1 = 'qX:iq4<z|xIW,e$p '
        dict_0 = {}
        c_s_v_locale_0 = module_0.CSVLocale(str_1, dict_0)
        str_2 = c_s_v_locale_0.translate(str_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'R}]\x0bRBzMP3 M\x0bl;!'
        str_1 = ',x6InmX'
        str_2 = "v\rDZkLQ\r\\N\x0ch*Q'2"
        list_0 = [str_0, str_0]
        locale_0 = module_0.get(*list_0)
        str_3 = locale_0.pgettext(str_1, str_2, str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'vKrRA8\n5\ry'
        str_1 = '``AsyncIOLoop`` is an `.IOLoop` that runs on an ``asyncio`` event loop.\n    This class follows the usual Tornado semantics for creating new\n    ``IOLoops``; these loops are not necessarily related to the\n    ``asyncio`` default event loop.\n\n    Each ``AsyncIOLoop`` creates a new ``asyncio.EventLoop``; this object\n    can be accessed with the ``asyncio_loop`` attribute.\n\n    .. versionchanged:: 5.0\n\n       When an ``AsyncIOLoop`` becomes the current `.IOLoop`, it also sets\n       the current `asyncio` event loop.\n\n    .. deprecated:: 5.0\n\n       Now used automatically when appropriate; it is no longer necessary\n       to refer to this class directly.\n    '
        str_2 = 'F64?5{'
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_2, null_translations_0)
        var_0 = null_translations_0.info()
        str_3 = gettext_locale_0.translate(str_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ",\n V5'`@zW%[_"
        int_0 = 835
        dict_0 = {}
        dict_1 = None
        dict_2 = {str_0: dict_0, str_0: dict_1}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_2)
        bool_0 = False
        locale_0 = module_0.get()
        str_1 = locale_0.format_date(int_0, bool_0)
        null_translations_0 = module_1.NullTranslations()
        str_2 = locale_0.friendly_number(int_0)
        str_3 = '_no_context_takeover'
        gettext_locale_0 = module_0.GettextLocale(str_3, null_translations_0)
        str_4 = gettext_locale_0.pgettext(str_2, str_1, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "S8>:[9E[pubWK'GuSS"
        str_1 = 'j%'
        locale_0 = module_0.get()
        str_2 = locale_0.pgettext(str_1, str_0)
        str_3 = 'Bgj7W'
        str_4 = locale_0.translate(str_2)
        str_5 = None
        dict_0 = {str_3: str_0, str_5: str_5}
        str_6 = '/NS'
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_6, null_translations_0)
        str_7 = gettext_locale_0.translate(str_0, str_0, dict_0)
        str_8 = '!'
        str_9 = 'H'
        dict_1 = {}
        dict_2 = {str_9: dict_1, str_0: dict_1}
        gettext_locale_1 = module_0.GettextLocale(str_3, null_translations_0)
        c_s_v_locale_0 = module_0.CSVLocale(str_8, dict_2)
        bool_0 = False
        null_translations_1 = module_1.NullTranslations(bool_0)
        locale_1 = module_0.get()
        str_10 = locale_1.translate(str_0, str_8)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ",\n V5'`@zW%[_"
        int_0 = 835
        list_0 = [str_0, str_0, str_0]
        locale_0 = module_0.get(*list_0)
        bool_0 = True
        locale_1 = module_0.get(*list_0)
        bool_1 = False
        str_1 = locale_1.format_date(int_0, int_0, bool_1, bool_0)
        null_translations_0 = module_1.NullTranslations()
        str_2 = None
        null_translations_1 = None
        gettext_locale_0 = module_0.GettextLocale(str_2, null_translations_1)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = None
        list_1 = [list_0, list_0, list_0, list_0]
        str_0 = ''
        list_2 = [str_0, str_0]
        locale_0 = module_0.get(*list_2)
        str_1 = locale_0.list(list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        datetime_0 = None
        bool_0 = False
        bool_1 = False
        locale_0 = module_0.get()
        str_0 = locale_0.format_date(datetime_0, bool_0, bool_1, bool_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        module_0.load_gettext_translations(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'fa_IR'
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -510
        str_0 = 'kn,D1}*4/>wDnK";wkL'
        str_1 = '}\nbFCv7`-\\'
        str_2 = 'xAyD'
        str_3 = '&4"^HUG\\m2'
        str_4 = '_1`8Z$vzd{~zvb\x0cx8'
        list_0 = [str_4, str_4]
        locale_0 = module_0.get(*list_0)
        str_5 = 'Cj\x0bxF+<n^'
        module_0.set_default_locale(str_5)
        str_6 = None
        module_0.load_translations(str_6)
        int_1 = 19157
        list_1 = [str_1, str_3]
        locale_1 = module_0.get(*list_1)
        str_7 = locale_1.format_date(int_1)
        str_8 = locale_0.friendly_number(int_1)
        list_2 = [str_0, str_2, str_0]
        str_9 = None
        module_0.load_translations(str_9)
        bool_0 = True
        str_10 = locale_0.format_date(int_0, bool_0, bool_0)
        str_11 = locale_1.list(list_2)
        str_12 = locale_1.pgettext(str_6, str_1)
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_0, null_translations_0)
        str_13 = gettext_locale_0.pgettext(str_1, str_1, str_1, int_0)
        str_14 = gettext_locale_0.pgettext(str_1, str_2)
        str_15 = None
        module_0.load_gettext_translations(str_15, str_0)
    except BaseException:
        pass