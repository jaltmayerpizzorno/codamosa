# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 3183
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_2():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = '4'
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 54
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 816
        list_0 = [leaf_0, leaf_0]
        node_0 = module_0.Node(int_1, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '4'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 1636
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_pattern_0 = module_0.NodePattern(int_0, node_1, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ',9P=;\x0bhISsE~YQJn'
        var_0 = None
        node_pattern_0 = module_0.NodePattern(var_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -857
        float_0 = -2947.8
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(float_0)
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 729
        str_0 = 'bare_name'
        list_0 = []
        tuple_0 = (int_0, str_0, int_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\n7,\r[lMH43>4}`H%iZX'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = -1028
        str_1 = 'vT+QsFi\t1|X4\x0c'
        list_1 = [str_0, str_0, bool_0, str_0]
        leaf_0 = module_0.Leaf(int_0, str_1, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n7,\r[lMH43>4}`H%iZX'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 42
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'b4'
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 932
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        grammar_1 = module_1.Grammar()
        var_1 = grammar_0.copy()
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0)
        list_0 = []
        bytes_0 = b'/\x8c\xe3\xa8\xbb%|K\xdf\xd8\xf8\x8d\xde\xa9\xb7\x92.\x1f\x87\xc0'
        tuple_0 = (int_0, str_0, bytes_0, str_0)
        bool_0 = negated_pattern_0.match_seq(list_0, tuple_0)
        bool_1 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 209
        str_0 = "*'-wGc;S"
        str_1 = ''
        int_1 = -2827
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        list_0 = [leaf_2, leaf_0, leaf_2]
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        optional_0 = None
        node_pattern_0 = module_0.NodePattern(optional_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'iso-la*XHtinc1-'
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 42
        leaf_0 = module_0.Leaf(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match(leaf_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -913
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = '4'
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = -1575
        int_1 = 1403
        list_0 = []
        list_1 = [negated_pattern_0, str_0]
        node_0 = module_0.Node(int_1, list_0, str_0, list_1)
        node_1 = node_0.clone()
        list_2 = [node_1, node_0]
        node_2 = module_0.Node(int_0, list_2, str_0, list_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '4^Sd\x0cAo11QO\x0c4:2T[8'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'b4'
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        negated_pattern_1 = module_0.NegatedPattern(grammar_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 265
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        str_0 = node_1.__str__()
        str_1 = node_1.__repr__()
    except BaseException:
        pass

def test_case_21():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 9
        bool_0 = False
        bool_1 = True
        list_0 = None
        tuple_0 = (int_0, bool_0, bool_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_22():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 1215
        str_0 = 'kKuNrw>UZU\\X~`^'
        int_1 = -840
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        tuple_2 = (int_0, int_0, tuple_1, int_1)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '%s %r (pr1<fix=%r)'
        grammar_0 = None
        int_0 = 1170
        str_1 = 'bare_name'
        int_1 = -189
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_1, tuple_0)
        bytes_0 = b'\xc0l'
        tuple_2 = (int_0, str_0, tuple_1, bytes_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '4'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        any_1 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 234
        str_1 = None
        leaf_0 = module_0.Leaf(int_0, str_1)
        int_1 = 2067
        leaf_pattern_0 = module_0.LeafPattern(int_1)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 1029
        list_0 = []
        str_0 = '(YR&8ROB|}ir2rL#P'
        node_0 = module_0.Node(int_0, list_0, str_0)
        int_1 = -898
        node_0.insert_child(int_1, node_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '\n7,\r[lDMH43@4}`H%i>'
        int_0 = 2509
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'b4'
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = -2061
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        grammar_1 = module_1.Grammar()
        var_1 = grammar_0.copy()
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 265
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        str_0 = node_1.__repr__()
    except BaseException:
        pass

def test_case_29():
    try:
        optional_0 = None
        float_0 = 686.0
        node_pattern_0 = module_0.NodePattern(optional_0, float_0)
    except BaseException:
        pass

def test_case_30():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = '4'
        int_0 = 58
        leaf_0 = module_0.Leaf(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        str_1 = leaf_0.__str__()
        grammar_0 = module_1.Grammar()
        any_1 = wildcard_pattern_0.optimize()
        any_2 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 317
        list_0 = []
        list_1 = [int_0, list_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = leaf_pattern_0.match(node_0)
        bool_0 = negated_pattern_0.match(negated_pattern_0)
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_32():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 317
        list_0 = []
        list_1 = [int_0, list_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        iterator_0 = node_0.post_order()
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = leaf_pattern_0.match(node_0)
        bool_0 = negated_pattern_0.match(negated_pattern_0)
        float_0 = -3341.378677
        bool_1 = negated_pattern_0.match(float_0)
        node_1 = node_0.clone()
        int_1 = -540
        node_0.set_child(int_1, node_0)
    except BaseException:
        pass

def test_case_33():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = '4'
        int_0 = 317
        list_0 = []
        list_1 = [int_0, list_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = leaf_pattern_0.match(node_0)
        bool_0 = negated_pattern_0.match(negated_pattern_0)
        int_1 = 58
        str_1 = 'bNr!E_ame'
        leaf_0 = module_0.Leaf(int_1, str_1)
        node_0.append_child(leaf_0)
        iterator_0 = negated_pattern_0.generate_matches(leaf_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_0.update_sibling_maps()
        str_2 = ''
        bool_1 = wildcard_pattern_0.match(str_2, node_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'FqPvA'
        negated_pattern_0 = module_0.NegatedPattern()
        str_1 = None
        int_0 = 53
        str_2 = 'nn1a/ig`'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_2, tuple_1, str_0)
        optional_0 = leaf_0.get_lineno()
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = ',9P=;\x0bhISsE~YQJn'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        iterator_0 = None
        int_0 = 1610
        int_1 = 54
        str_1 = 'IKWhe\x0b]\x0bh\nd-sO[\x0c!x\\?'
        leaf_0 = module_0.Leaf(int_1, str_1)
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_1, leaf_0]
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        bool_0 = wildcard_pattern_0.match(node_1, iterator_0)
    except BaseException:
        pass

def test_case_36():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = '4'
        int_0 = 320
        list_0 = []
        list_1 = [int_0, list_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        var_0 = leaf_pattern_0.match(node_0)
        int_1 = 987
        node_1 = node_0.clone()
        int_2 = 58
        leaf_0 = module_0.Leaf(int_2, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        str_1 = leaf_0.__str__()
        bytes_0 = b'\xc1\x0f\xa7\xa1\xc7}\x0em\xd8\x0fb\xfd8\x80\xc529F\x84'
        var_1 = leaf_pattern_0.match(leaf_0, bytes_0)
        node_0.append_child(node_1)
        grammar_0 = module_1.Grammar()
        int_3 = -791
        node_1.insert_child(int_3, node_0)
        any_1 = wildcard_pattern_0.optimize()
        any_2 = wildcard_pattern_0.optimize()
        node_pattern_0 = module_0.NodePattern(int_1, str_1)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'iso-la*XHtinc1-'
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 42
        leaf_0 = module_0.Leaf(int_0, str_0)
        optional_0 = None
        negated_pattern_0 = module_0.NegatedPattern(optional_0)
        leaf_1 = leaf_0.clone()
        int_1 = 1116
        int_2 = -437
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1, int_2)
    except BaseException:
        pass

def test_case_38():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = []
        iterator_0 = negated_pattern_0.generate_matches(var_0)
        int_0 = 1
        int_1 = [int_0]
        iterator_1 = negated_pattern_0.generate_matches(int_1)
        var_1 = list(iterator_1)
        var_2 = len(var_1)
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        negated_pattern_1 = module_0.NegatedPattern(leaf_pattern_0)
        var_3 = []
        iterator_2 = negated_pattern_1.generate_matches(var_3)
        var_4 = list(iterator_2)
        iterator_3 = negated_pattern_1.generate_matches(int_0)
        var_5 = list(iterator_3)
    except BaseException:
        pass

def test_case_39():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        int_0 = 5
        wildcard_pattern_0 = module_0.WildcardPattern(list_0, int_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = '4'
        int_0 = 13
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        grammar_0 = module_1.Grammar()
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 2936
        str_1 = ',9P=;\x0bhISsE~YQn'
        leaf_0 = module_0.Leaf(int_0, str_1)
        list_0 = [leaf_0]
        str_2 = "XS7I0'\n*g*@n6h"
        str_3 = '4'
        dict_0 = {str_2: str_2, str_3: list_0}
        node_0 = module_0.Node(int_1, list_0, dict_0)
        int_2 = leaf_0.depth()
        list_1 = []
        bool_0 = wildcard_pattern_0.match(list_1)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 1258
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        iterator_0 = node_1.pre_order()
        node_2 = module_0.Node(int_0, list_0)
        node_2.replace(node_2)
    except BaseException:
        pass