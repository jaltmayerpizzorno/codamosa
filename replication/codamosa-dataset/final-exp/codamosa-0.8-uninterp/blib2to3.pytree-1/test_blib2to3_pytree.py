# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 512
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = 234
    str_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0)

def test_case_3():
    int_0 = 15
    str_0 = '4QSd\x0cMAo11QO\x0c4:zT[O8'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_4():
    str_0 = '4'
    int_0 = 235
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_5():
    str_0 = ',9P=;\x0bhISsE~YQJn'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_6():
    str_0 = 'C'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_7():
    str_0 = 'baYe_`nam0'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_8():
    leaf_0 = None
    str_0 = '\t`38L{f8m\\mf6&rKf'
    dict_0 = {str_0: leaf_0}
    str_1 = 'E\njg3"w[lh'
    wildcard_pattern_0 = module_0.WildcardPattern(str_1)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    bool_0 = negated_pattern_0.match(leaf_0, dict_0)

def test_case_9():
    int_0 = 265
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_10():
    int_0 = 265
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_1.append_child(node_0)

def test_case_11():
    int_0 = 1
    int_1 = [int_0]
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    negated_pattern_0 = module_0.NegatedPattern(leaf_pattern_0)
    iterator_0 = negated_pattern_0.generate_matches(int_1)
    var_0 = list(iterator_0)
    var_1 = len(var_0)

def test_case_12():
    leaf_pattern_0 = module_0.LeafPattern()
    str_0 = 'D'
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = 54
    leaf_0 = module_0.Leaf(int_0, str_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bytes_0 = b'c7\xca\x16g\xc0\xec,\xb8\xeeF\xd6\xf0s\xa7\x94\xb3'
    var_0 = leaf_pattern_0.match(leaf_0, bytes_0)

def test_case_13():
    str_0 = '&`38L{fAm\\mf6\\rKf'
    int_0 = 3909
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_14():
    int_0 = 2
    str_0 = ''
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_15():
    leaf_pattern_0 = module_0.LeafPattern()
    str_0 = '4'
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = 54
    leaf_0 = module_0.Leaf(int_0, str_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    var_0 = leaf_pattern_0.match(leaf_0)
    bool_0 = negated_pattern_0.match(str_0)
    grammar_0 = module_1.Grammar()

def test_case_16():
    str_0 = '4'
    int_0 = 42
    str_1 = None
    leaf_0 = module_0.Leaf(int_0, str_1)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_17():
    str_0 = '4'
    int_0 = 31
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.post_order()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    grammar_0 = module_1.Grammar()
    int_1 = leaf_0.depth()
    leaf_1 = leaf_0.clone()
    none_type_0 = None
    list_0 = [leaf_0]
    any_0 = wildcard_pattern_0.optimize()
    tuple_0 = (int_0, str_0, none_type_0, list_0)
    var_0 = module_0.convert(grammar_0, tuple_0)
    any_1 = wildcard_pattern_0.optimize()

def test_case_18():
    int_0 = 257
    int_1 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_1, str_0)
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    leaf_2 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_0, leaf_2)
    iterator_0 = node_0.post_order()
    var_0 = list(iterator_0)
    leaf_3 = module_0.Leaf(int_1, str_0)
    leaf_4 = module_0.Leaf(int_1, str_1)

def test_case_19():
    int_0 = 13
    str_0 = 'bare_name'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = leaf_0.depth()
    leaf_1 = leaf_0.clone()

def test_case_20():
    negated_pattern_0 = module_0.NegatedPattern()
    var_0 = []
    iterator_0 = negated_pattern_0.generate_matches(var_0)
    var_1 = list(iterator_0)
    int_0 = 1
    int_1 = [int_0]
    iterator_1 = negated_pattern_0.generate_matches(int_1)
    var_2 = list(iterator_1)
    var_3 = len(var_2)

def test_case_21():
    int_0 = 1
    str_0 = 'asdf'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.pre_order()
    var_0 = list(iterator_0)

def test_case_22():
    int_0 = 257
    int_1 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_1, str_0)
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    leaf_2 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_0, leaf_2)
    iterator_0 = node_0.pre_order()
    var_0 = list(iterator_0)
    leaf_3 = module_0.Leaf(int_1, str_0)
    leaf_4 = module_0.Leaf(int_1, str_1)

def test_case_23():
    int_0 = 42
    str_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0)
    optional_0 = leaf_0.get_lineno()
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_24():
    negated_pattern_0 = module_0.NegatedPattern()
    str_0 = None
    int_0 = 53
    str_1 = 'p'
    tuple_0 = (int_0, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_1, tuple_1, str_1)
    leaf_pattern_0 = module_0.LeafPattern(str_0, str_1)
    var_0 = leaf_pattern_0.match(leaf_0)
    grammar_0 = module_1.Grammar()
    leaf_pattern_1 = module_0.LeafPattern(int_0)

def test_case_25():
    str_0 = '\n7,\r[lMH43>4}`H%iZX'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    list_0 = []
    bool_0 = wildcard_pattern_0.match_seq(list_0)