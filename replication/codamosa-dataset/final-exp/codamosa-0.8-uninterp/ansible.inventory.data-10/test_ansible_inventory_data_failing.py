# Automatically generated by Pynguin.
import ansible.inventory.data as module_0
import ansible.inventory.host as module_1

def test_case_0():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.deserialize(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_group(inventory_data_0)
        var_1 = inventory_data_0.serialize()
        dict_0 = {}
        inventory_data_1 = module_0.InventoryData()
        var_2 = inventory_data_1.deserialize(dict_0)
        int_0 = 500
        var_3 = inventory_data_1.remove_group(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        var_1 = inventory_data_0.reconcile_inventory()
        inventory_data_1 = module_0.InventoryData()
        set_0 = {inventory_data_0, inventory_data_1}
        var_2 = inventory_data_1.add_group(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = None
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_group(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "WZ[}9!LX'v\x0bWKU"
        set_0 = {str_0}
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(set_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        inventory_data_0 = module_0.InventoryData()
        bool_0 = True
        var_0 = inventory_data_0.reconcile_inventory()
        var_1 = inventory_data_0.reconcile_inventory()
        bytes_0 = b'\xd5\xd48\xe0w9\x92/\xdd\xd2\x86\x91#\x8d'
        var_2 = inventory_data_0.set_variable(bool_0, inventory_data_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x9b\x8d\xe8\xb5\xcb\x1b\x18\xf9$'
        inventory_data_0 = None
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.add_child(bytes_0, inventory_data_0)
    except BaseException:
        pass

def test_case_7():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'g//a$x4\r;A'
        str_1 = 'j_RX'
        bool_0 = False
        var_0 = inventory_data_0.add_host(str_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'aKl'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.reconcile_inventory()
        var_2 = inventory_data_0.get_groups_dict()
        var_3 = inventory_data_0.get_host(str_0)
        inventory_data_1 = module_0.InventoryData()
        var_4 = inventory_data_1.get_host(str_0)
        str_1 = '4c[\t\n f% uKlMOXC'
        var_5 = inventory_data_1.get_host(str_1)
        var_6 = inventory_data_0.get_groups_dict()
        var_7 = inventory_data_0.reconcile_inventory()
        str_2 = ';@a(|a &oS?0"t'
        str_3 = '8=^Gv'
        var_8 = inventory_data_0.add_host(str_2, str_0, str_3)
    except BaseException:
        pass

def test_case_9():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'group2'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'host1'
        var_1 = inventory_data_0.add_child(str_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'aKl'
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.add_host(str_0)
        var_1 = inventory_data_0.get_groups_dict()
        var_2 = inventory_data_1.get_groups_dict()
        var_3 = inventory_data_1.reconcile_inventory()
        var_4 = inventory_data_1.get_host(str_0)
        var_5 = inventory_data_1.reconcile_inventory()
        inventory_data_2 = module_0.InventoryData()
        bool_0 = False
        var_6 = inventory_data_0.add_host(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'all'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(str_0)
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_0.reconcile_inventory()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'aKl'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_1.add_host(str_0)
        var_2 = inventory_data_0.get_groups_dict()
        var_3 = inventory_data_0.reconcile_inventory()
        var_4 = inventory_data_0.get_groups_dict()
        var_5 = inventory_data_1.reconcile_inventory()
        bool_0 = False
        var_6 = inventory_data_1.get_host(str_0)
        var_7 = inventory_data_1.remove_group(bool_0)
        inventory_data_2 = module_0.InventoryData()
        bool_1 = True
        var_8 = inventory_data_0.get_host(bool_1)
        str_1 = 'c[\t\n f% uKlMOXC'
        var_9 = inventory_data_2.get_host(str_1)
        var_10 = inventory_data_1.reconcile_inventory()
        str_2 = 'all'
        var_11 = inventory_data_2.remove_group(str_2)
        str_3 = ';@a(|a &,S?c"t'
        var_12 = inventory_data_1.add_host(str_3, str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'all'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(str_0)
        int_0 = -509
        var_1 = inventory_data_0.remove_group(int_0)
        inventory_data_1 = module_0.InventoryData()
        var_2 = inventory_data_0.reconcile_inventory()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'all'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(str_0)
        int_0 = -509
        var_1 = inventory_data_0.remove_group(int_0)
        inventory_data_1 = module_0.InventoryData()
        var_2 = inventory_data_1.get_groups_dict()
        bool_0 = True
        var_3 = inventory_data_1.remove_group(bool_0)
        inventory_data_2 = module_0.InventoryData()
        var_4 = inventory_data_2.reconcile_inventory()
        tuple_0 = ()
        var_5 = inventory_data_0.add_host(str_0, tuple_0)
        float_0 = -37.61294907824531
        inventory_data_3 = module_0.InventoryData()
        str_1 = ';@a(|a &,S?c"t'
        var_6 = inventory_data_2.add_host(str_1, float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'test_group_1'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'test_host_1'
        var_1 = inventory_data_0.add_host(str_1, str_0)
        int_0 = 0
        var_2 = inventory_data_0.groups[str_0]
        var_3 = var_5.get_hosts()[int_0]
    except BaseException:
        pass

def test_case_16():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'host1'
        var_0 = inventory_data_0.add_host(str_0)
        str_1 = '*f]L%|F/`c{PUgVa@'
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_0.add_host(str_1)
        var_2 = inventory_data_0.add_host(str_1)
        str_2 = 'host4'
        var_3 = inventory_data_0.add_host(str_2)
        str_3 = 'N5'
        var_4 = inventory_data_0.reconcile_inventory()
        var_5 = inventory_data_0.reconcile_inventory()
        var_6 = inventory_data_0.add_host(str_3)
        str_4 = 'group1'
        var_7 = inventory_data_0.add_group(str_4)
        str_5 = 'ungrouped'
        var_8 = inventory_data_0.add_group(str_5)
        var_9 = inventory_data_0.add_child(str_4, str_0)
        var_10 = inventory_data_0.add_child(str_4, str_1)
        var_11 = inventory_data_0.reconcile_inventory()
        var_12 = inventory_data_0.add_child(str_4, str_2)
        var_13 = inventory_data_0.add_child(str_5, str_5)
    except BaseException:
        pass

def test_case_17():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'h\tgost2'
        var_0 = inventory_data_0.remove_group(str_0)
        var_1 = inventory_data_0.add_host(str_0)
        var_2 = inventory_data_0.add_host(str_0)
        str_1 = 'host4'
        var_3 = inventory_data_0.reconcile_inventory()
        var_4 = inventory_data_0.add_host(str_1)
        str_2 = '{0} is not eligible for last-chance resolution'
        host_0 = module_1.Host()
        var_5 = inventory_data_0.remove_host(host_0)
        var_6 = inventory_data_0.reconcile_inventory()
        var_7 = inventory_data_0.reconcile_inventory()
        var_8 = inventory_data_0.add_host(str_2)
        var_9 = inventory_data_0.add_group(str_2)
        var_10 = inventory_data_0.reconcile_inventory()
        str_3 = 'group2'
        var_11 = inventory_data_0.add_group(str_3)
        group_0 = None
        tuple_0 = (inventory_data_0, group_0)
        list_0 = None
        var_12 = inventory_data_0.set_variable(group_0, tuple_0, list_0)
    except BaseException:
        pass