# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        bytes_0 = b'\xa3\xca'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, bytes_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to?pass to re.compile\n        :param kwargs: They`**kwargs` to pass to re.compile\n        '
        import_processor_0 = module_0.ImportProcessor()
        set_0 = {str_0, str_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, import_processor_0, set_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '(/7!~#7My\x0bF0vQASex3^'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = []
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, list_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xa3\xca'
        bytes_1 = b'\x13\xc0o\x9c\xfa<\xef6\x9c\x93\x05\x84p\x99\x86\x95'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, bytes_1)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n    from bzrlib.lazy_import import ScopeReplacer\n    '
        float_0 = -4911.3
        set_0 = None
        list_0 = [str_0, set_0, str_0]
        tuple_0 = ()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, tuple_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(float_0)
        import_processor_0 = module_0.ImportProcessor()
        var_1 = globals()
        var_2 = module_0.lazy_import(var_1, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        dict_0 = {list_0: list_0, list_0: list_0}
        set_0 = set()
        bytes_0 = b"N\xae\x16\xab'%2d\xb9\x9b"
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, set_0, bytes_0)
        var_0 = scope_replacer_0.__call__()
    except BaseException:
        pass

def test_case_6():
    try:
        import_processor_0 = module_0.ImportProcessor()
        list_0 = []
        list_1 = []
        import_replacer_0 = module_0.ImportReplacer(import_processor_0, list_0, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 1817.06
        list_0 = [float_0, float_0]
        import_processor_0 = module_0.ImportProcessor(list_0)
        int_0 = -1
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, int_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\n    from bzrlib.lazy_import import ScopeReplacer\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'a-'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'/M\xb8\\b\xc0'
        list_0 = []
        list_1 = None
        tuple_0 = (list_0, list_1)
        import_replacer_0 = module_0.ImportReplacer(bytes_0, list_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = module_0.disallow_proxying()
        bytes_0 = b'\xe1\x96$\x04\xb1\x0f\xeb\xcd\xd8W\xbf\xbb\x87j'
        set_0 = {bytes_0, var_0, bytes_0}
        list_0 = []
        import_processor_0 = module_0.ImportProcessor()
        float_0 = 1250.924217
        import_replacer_0 = module_0.ImportReplacer(set_0, list_0, import_processor_0, import_processor_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'F'
        int_0 = 458
        str_0 = '..rQ'
        dict_0 = {str_0: bytes_0}
        bool_0 = True
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, bool_0)
        dict_1 = {}
        bool_1 = True
        import_processor_0 = module_0.ImportProcessor()
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(dict_1, bool_1, import_processor_0)
        var_0 = illegal_use_of_scope_replacer_1.__eq__(illegal_use_of_scope_replacer_0)
        import_processor_1 = module_0.ImportProcessor()
        var_1 = import_processor_1.lazy_import(int_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        str_0 = 'acn!6(B&@Yye{NukjD'
        var_0 = module_0.lazy_import(dict_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'pH-)^QYqO(Iyt.}5'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\n    from bz?lib.lazy_#mport import ScopeReplacer\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'cPymwsswF6RIg9:'
        str_1 = 'imports'
        str_2 = 'H(CIhWAQvTkG=ldM\tO'
        dict_0 = {str_1: str_1, str_2: str_2, str_2: str_0}
        float_0 = 208.4604
        bool_0 = False
        import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, bool_0)
        var_0 = module_0.lazy_import(str_1, import_replacer_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass