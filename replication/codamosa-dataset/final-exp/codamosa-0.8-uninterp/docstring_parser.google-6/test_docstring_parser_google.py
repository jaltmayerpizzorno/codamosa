# Automatically generated by Pynguin.
import docstring_parser.google as module_0

def test_case_0():
    pass

def test_case_1():
    google_parser_0 = module_0.GoogleParser()

def test_case_2():
    str_0 = '\n            The ``add_model`` method.\n\n            Args:\n                model: An instance of :class:`Model`.\n\n            Raises:\n                NotCorrectTypeError: If ``model`` is not correct type.\n                ExistsModelError: If ``model`` is already in the database.\n\n            Example:\n                >>> model = Model(name="test")\n                >>> parameter = Parameter(name="test_param")\n                >>> database.add_model(model)\n                >>> database.add_parameter(model, parameter)\n                >>> database.add_model(model)\n                ExistsModelError: Model \'test\' already exists\n            '
    docstring_0 = module_0.parse(str_0)
    var_0 = docstring_0.short_description
    google_parser_0 = module_0.GoogleParser()
    docstring_1 = google_parser_0.parse(str_0)
    list_0 = [str_0, docstring_0, str_0]
    section_0 = module_0.Section(*list_0)
    var_1 = google_parser_0.add_section(section_0)
    section_1 = module_0.Section(*list_0)

def test_case_3():
    str_0 = 'deprecated'
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = '\n        Test with valid docstring\n\n        Short description\n        Long description\n        More long description\n        Arguments:\n          param1: Param 1 description\n          param2: Param 2 description\n        Examples:\n          >>> example1\n            example1.__doc__\n          >>> example2\n            example2.__doc__\n        Returns:\n          return obj: Return description\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = '\n        Test with valid docstring\n\n        Short description\n        Long description\n        More long description\n        Arguments:\n          param1: Param 1 description\n          param2: Param 2 description\n        Examples:\n          >>> example1\n            example1.__doc__\n          >>> example2\n            example2.__doc__\n        Returns:\n          return obj: Return description\n        '
    docstring_0 = module_0.parse(str_0)
    str_1 = ''
    docstring_1 = module_0.parse(str_1)

def test_case_6():
    str_0 = '\n            The ``add_model`` method.\n\n            Args:\n                model: An instance of :class:`Model`.\n\n            Raises:\n                NotCorrectTypeError: If ``model`` is not correct type.\n                ExistsModelError: If ``model`` is already in the database.\n\n            Example:\n                >>> model = Model(name="test")\n                >>> parameter = Parameter(name="test_param")\n                >>> database.add_model(model)\n                >>> database.add_parameter(model, parameter)\n                >>> database.add_model(model)\n                ExistsModelError: Model \'test\' already exists\n            '
    docstring_0 = module_0.parse(str_0)
    var_0 = docstring_0.short_description
    str_1 = ',WE\x0c&v.*h!O\tV>*>dB'
    google_parser_0 = module_0.GoogleParser(str_1)
    docstring_1 = google_parser_0.parse(str_0)

def test_case_7():
    str_0 = '\n    This is a module docstring.\n    \n    This is the rest of the module docsring.\n    \n    Attributes:\n       answer (int): The answer to life the universe and everyting.\n        pi (float): Pi (of course).\n    \n    Raises:\n        TypeError: Only if i feel like it.\n    \n    Example:\n       Just an example.\n    \n    Returns:\n        str: Everything is a str.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = 'A method that takes an argument.\n    This method does some stuff.\n    Args:\n        arg1: The first argument. Defaults to 10.\n\n    Returns:\n        something\n    '
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)

def test_case_9():
    str_0 = '\n            The ``add_model`` method.\n\n            Args:\n                model: An instance of :class:`Model`.\n\n            Raises:\n                NotCorrectTypeError: If ``model`` is not correct type.\n                ExistsModelError: If ``model`` is already in the database.\n\n            Example:\n                >>> model = Model(name="test")\n                >>> parameter = Parameter(name="test_param")\n                >>> database.add_model(model)\n                >>> database.add_parameter(model, parameter)\n                >>> database.add_model(model)\n                ExistsModelError: Model \'test\' already exists\n            '
    docstring_0 = module_0.parse(str_0)

def test_case_10():
    str_0 = '\n    This is a module docstring.\n    \n    This is the rest of the module docstring.\n    \n    Attributes:\n        answer (int): The answer to life the universe and everything.\n        pi (float): Pi (of course).\n    \n    Raises:\n        TypeError: Only if i feel like it.\n    \n    Example:\n        Just an example.\n    \n    Returns:\n        str: Everything is a str.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = '\n    """\n    Some text for this docstring.\n    \n    Args:\n        arg1 (int): Argument 1\n        arg2 (float): Argument 2. Defaults to 10.\n        arg3: Argument 3\n        arg4 (str, optional): Argument 4\n    """\n    '
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)

def test_case_12():
    str_0 = '\n    This is a module docstring.\n    \n    This is the rest of the module docsring.\n    \n    Attributes:\n       answer (i): The answer to life the universe an everyting.\n        pi (float): Pi (of course).\n    \n    Raises:\n      z TypeError: Only if i feel like it.\n    \n    Example:\n       Just an example.\n    \n    Returns:\n        str:vEverything is a str.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_13():
    str_0 = '\n    This is a module docstring.\n    \n    This is the rest of the modul docstring.\n   \n    Attributes:\n        answer (int): The answer to life the universe and everything.\n       pi (float): Pi (of course).\n        Raises:\n        TypeError: Only if i feel like it.\n    \n    Example:\n        Just an example.\n    \n    Returns\n        str: Everything is a str.F    '
    docstring_0 = module_0.parse(str_0)