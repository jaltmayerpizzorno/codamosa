# Automatically generated by Pynguin.
import docstring_parser.google as module_0

def test_case_0():
    try:
        google_parser_0 = module_0.GoogleParser()
        str_0 = ' ]:Cf`(yAzV)\x0bS0'
        docstring_0 = google_parser_0.parse(str_0)
        none_type_0 = None
        tuple_0 = None
        google_parser_1 = module_0.GoogleParser(none_type_0, tuple_0)
        list_0 = [google_parser_0]
        section_0 = module_0.Section(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\nThis is a useful function.\n\nArgs:\n    arg1 (str): The first argument.\n    arg2 (int): The second argument. Defaults to 1.\n\nReturns:\n    float: Error rate.\n\nRaises:\n    ValueError: If `arg1` is greater than `arg2`.\n    TypeError: If `a` is not an `int`.\n'
        google_parser_0 = module_0.GoogleParser()
        docstring_0 = google_parser_0.parse(str_0)
        section_0 = None
        var_0 = google_parser_0.add_section(section_0)
    except BaseException:
        pass

def test_case_2():
    try:
        google_parser_0 = module_0.GoogleParser()
        str_0 = "Arguments:\n    arg1 (int): description of arg1.\n    arg2 (float): description of arg2. Defaults to 0.5.\n    arg3 (str): description of arg3. Defaults to 'foo'.\n    \n"
        docstring_0 = google_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        google_parser_0 = module_0.GoogleParser()
        str_0 = 'Example function with types documented in the docstring.\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameter.\n    Returns:\n        bool: The return value. True for success, False otherwise.\n    '
        docstring_0 = google_parser_0.parse(str_0)
        var_0 = len(google_parser_0)
    except BaseException:
        pass