# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        dict_0 = None
        list_0 = module_0.reverse_map(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        var_0 = module_0.no_map_instance(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1.0
        list_0 = []
        var_0 = module_0.no_map_instance(list_0)
        bytes_0 = b''
        var_1 = None
        int_0 = 2
        int_1 = -890
        dict_0 = {var_1: int_0, var_1: int_0, var_1: int_0, var_1: int_1}
        list_1 = module_0.reverse_map(dict_0)
        var_2 = module_0.map_structure(float_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -768.8545
        var_0 = module_0.no_map_instance(float_0)
        tuple_0 = ()
        bytes_0 = b'\x94'
        list_0 = [tuple_0, var_0, bytes_0, tuple_0]
        var_1 = module_0.map_structure(tuple_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -1880.68
        set_0 = {float_0, float_0}
        dict_0 = {float_0: float_0}
        tuple_0 = (set_0, dict_0, float_0)
        var_0 = module_0.map_structure(float_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '%\\R-C!'
        var_0 = module_0.map_structure(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        set_0 = {str_0, str_0, str_0}
        int_0 = 999
        tuple_0 = (set_0, int_0)
        var_0 = module_0.map_structure_zip(str_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'J \x0c!Di'
        var_0 = module_0.map_structure_zip(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = None
        var_0 = module_0.map_structure_zip(float_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xf9\xd8\x01f\xe3\xb4\xa4\x94Ir\x12\x16\x02\xbe\x93\x12.N\x07\x9d'
        int_0 = 1
        str_0 = 'kBE.'
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        int_1 = 3290
        dict_1 = {bytes_0: int_0, str_0: int_1}
        list_1 = module_0.reverse_map(dict_1)
        set_0 = None
        str_1 = '>fkH0'
        var_0 = module_0.map_structure_zip(set_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -2117.821
        type_0 = None
        bytes_0 = b'!\xb4qWr\x1c\xfa\xb8\x87'
        list_0 = []
        var_0 = module_0.map_structure(bytes_0, list_0)
        dict_0 = {float_0: bytes_0, float_0: type_0, bytes_0: type_0}
        bool_0 = False
        str_0 = ''
        var_1 = module_0.no_map_instance(str_0)
        module_0.register_no_map_class(type_0)
        tuple_0 = (list_0, dict_0, bool_0, list_0)
        var_2 = module_0.no_map_instance(tuple_0)
        module_0.register_no_map_class(type_0)
        dict_1 = None
        list_1 = module_0.reverse_map(dict_1)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -769.7449010231664
        var_0 = module_0.no_map_instance(float_0)
        tuple_0 = ()
        bytes_0 = b'\x94'
        list_0 = [tuple_0, var_0, bytes_0, tuple_0]
        int_0 = 2907
        var_1 = module_0.map_structure(int_0, tuple_0)
        bool_0 = True
        bytes_1 = b'\x16{\xbc7K\xd0\xfd\x90\x00'
        str_0 = 'Similar to :meth:`imap`, but the ordering of the results are not guaranteed.\n\n        Please refer to Python documentation on :py:meth:`multiprocessing.pool.Pool.imap_unordered` for details.\n        '
        tuple_1 = (list_0, bytes_1, str_0)
        var_2 = module_0.map_structure_zip(bool_0, tuple_1)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = None
        int_0 = 1595
        module_0.register_no_map_class(int_0)
        int_1 = -2018
        module_0.register_no_map_class(int_1)
        list_0 = [var_0, var_0]
        list_1 = [list_0, var_0, var_0]
        dict_0 = {var_0: int_1}
        list_2 = module_0.reverse_map(dict_0)
        var_1 = module_0.no_map_instance(list_1)
        str_0 = ' -a!KP&{o'
        var_2 = module_0.no_map_instance(str_0)
        list_3 = []
        tuple_0 = (list_3,)
        var_3 = module_0.map_structure_zip(list_3, tuple_0)
        list_4 = module_0.reverse_map(dict_0)
        list_5 = module_0.reverse_map(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -768.8545
        var_0 = module_0.no_map_instance(float_0)
        tuple_0 = ()
        bytes_0 = b'\x94'
        tuple_1 = (tuple_0, tuple_0, bytes_0, tuple_0)
        list_0 = [tuple_0, var_0, bytes_0, tuple_1]
        int_0 = 2907
        dict_0 = {tuple_0: var_0, int_0: list_0, int_0: float_0, var_0: float_0}
        var_1 = module_0.map_structure(tuple_1, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -768.8545
        var_0 = module_0.no_map_instance(float_0)
        tuple_0 = ()
        bytes_0 = b'\x94'
        tuple_1 = (tuple_0, tuple_0, bytes_0, tuple_0)
        bytes_1 = b't\x0f\xc8b\xb9\r'
        int_0 = 2907
        var_1 = module_0.map_structure(int_0, tuple_0)
        var_2 = module_0.no_map_instance(int_0)
        complex_0 = None
        list_0 = [var_2, bytes_1]
        list_1 = [list_0, tuple_1]
        var_3 = module_0.map_structure_zip(complex_0, list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -768.8545
        var_0 = module_0.no_map_instance(float_0)
        str_0 = '`b^f_size`Omust be at least '
        tuple_0 = ()
        bytes_0 = b'\x94'
        tuple_1 = (tuple_0, tuple_0, bytes_0, tuple_0)
        var_1 = None
        list_0 = [var_1]
        set_0 = set()
        var_2 = module_0.map_structure(list_0, set_0)
        list_1 = [tuple_0, var_0, bytes_0, tuple_1]
        int_0 = 2907
        var_3 = module_0.map_structure(int_0, tuple_0)
        var_4 = module_0.no_map_instance(int_0)
        var_5 = module_0.map_structure_zip(list_1, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        list_0 = [bool_0, bool_0, dict_0]
        list_1 = [dict_0, list_0]
        var_0 = module_0.map_structure_zip(bool_0, list_1)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -768.8545
        var_0 = module_0.no_map_instance(float_0)
        tuple_0 = ()
        bytes_0 = b'\x94'
        int_0 = -2459
        var_1 = module_0.no_map_instance(int_0)
        tuple_1 = (tuple_0, tuple_0, bytes_0, tuple_0)
        var_2 = None
        list_0 = [var_2, var_2, var_2]
        set_0 = set()
        var_3 = module_0.map_structure(list_0, set_0)
        var_4 = module_0.map_structure_zip(list_0, tuple_1)
        int_1 = 2907
        var_5 = module_0.no_map_instance(var_1)
        var_6 = module_0.map_structure(int_1, tuple_0)
        var_7 = module_0.no_map_instance(int_1)
        str_0 = 'Tc3+;d8Kr_*@SCRP'
        float_1 = -1928.090484045424
        var_8 = module_0.map_structure_zip(float_1, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = -3457.513
        dict_0 = {float_0: float_0}
        bool_0 = False
        str_0 = 'k+K\rMS~s'
        list_0 = []
        str_1 = 'LF'
        tuple_0 = (dict_0, list_0, str_0, str_1)
        str_2 = None
        var_0 = None
        list_1 = [str_0, tuple_0, str_2, var_0]
        var_1 = module_0.no_map_instance(list_1)
        tuple_1 = (dict_0, bool_0)
        tuple_2 = (tuple_1, dict_0)
        var_2 = module_0.map_structure_zip(float_0, tuple_2)
    except BaseException:
        pass