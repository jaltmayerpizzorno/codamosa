# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        int_0 = 228
        j_s_interpreter_0 = module_0.JSInterpreter(int_0)
        str_0 = '!m"'
        var_0 = j_s_interpreter_0.interpret_statement(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "\n    function test_method(){\n        return a + b;\n    }\n    test_obj = {\n        'test_method': test_method\n    };\n    "
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'test_method'
        var_0 = j_s_interpreter_0.call_function(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'}\x12U\x08\xce\x13'
        str_0 = 'JP{PVv):\x0c~{Ot$@VHQ'
        list_0 = [str_0, str_0]
        str_1 = '[d%zx8G#_'
        dict_0 = {str_0: str_0, str_0: list_0, str_1: list_0}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, dict_0)
        var_0 = j_s_interpreter_0.extract_function(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '#?+oV/7'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'j"'
        dict_0 = {str_1: str_1}
        bool_0 = True
        j_s_interpreter_1 = module_0.JSInterpreter(bool_0)
        var_0 = j_s_interpreter_1.build_function(dict_0, dict_0)
        list_0 = None
        bytes_0 = b'\x10'
        list_1 = [bytes_0, str_1, dict_0]
        float_0 = -131.67
        var_1 = j_s_interpreter_1.interpret_statement(list_0, list_1, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '( x{g!'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        dict_0 = {str_0: str_0}
        bool_0 = True
        j_s_interpreter_1 = module_0.JSInterpreter(bool_0)
        var_0 = j_s_interpreter_1.build_function(dict_0, dict_0)
        float_0 = 131.4
        list_0 = []
        set_0 = {float_0, float_0, float_0, float_0}
        list_1 = [float_0, bool_0]
        j_s_interpreter_2 = module_0.JSInterpreter(set_0, list_1)
        var_1 = j_s_interpreter_2.interpret_statement(str_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n                function test1 (a, b) {                    return test2(a, b);\n                }\n                function test2 (a, b) {\n                    return a + b;\n              }'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'test2'
        var_0 = j_s_interpreter_0.extract_function(str_1)
        str_2 = 'MF=g`YD6r"C'
        str_3 = '\x0ck[UsPsVia,3t^{'
        dict_0 = {}
        var_1 = j_s_interpreter_0.interpret_expression(str_2, str_3, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "d3\n<ev]'"
        tuple_0 = (str_0,)
        str_1 = 'bM.\\m{\nY\r&1B)PqW;'
        int_0 = 99
        j_s_interpreter_0 = module_0.JSInterpreter(str_1, int_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_1, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n                function test1 (a, b) {\n                    return test2(a, b);\n                }\n                function test2 (a, b) {\n                    return a + b;\n              }'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = -44
        str_1 = 'Auz.gVj)9*?X00'
        dict_0 = {str_1: int_0, str_1: int_0, str_1: str_0, str_1: int_0, str_0: str_1, str_1: j_s_interpreter_0}
        list_0 = [int_0, j_s_interpreter_0, str_0, str_0]
        var_0 = j_s_interpreter_0.interpret_expression(str_1, dict_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '(oUeKQyX)D#^7@'
        list_0 = [str_0]
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = '=E'
        dict_0 = {str_1: str_1}
        bool_0 = True
        j_s_interpreter_1 = module_0.JSInterpreter(bool_0)
        var_0 = j_s_interpreter_1.build_function(dict_0, dict_0)
        float_0 = 131.4
        set_0 = {float_0, float_0, float_0, float_0}
        list_1 = [float_0, bool_0]
        j_s_interpreter_2 = module_0.JSInterpreter(set_0, list_1)
        var_1 = j_s_interpreter_2.interpret_statement(str_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = '1+1'
        var_0 = {}
        int_0 = 100
        var_1 = j_s_interpreter_0.interpret_expression(str_1, var_0, int_0)
        str_2 = '2+2'
        var_2 = {}
        var_3 = j_s_interpreter_0.interpret_expression(str_2, var_2, int_0)
        str_3 = '2+2;'
        var_4 = {}
        var_5 = j_s_interpreter_0.interpret_expression(str_3, var_4, int_0)
    except BaseException:
        pass