# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_2():
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)
    str_0 = 'dcu7lfv]+pf'
    bool_1 = True
    try_1 = module_0.Try(str_0, bool_1)
    bool_2 = try_1.__eq__(try_0)
    bool_3 = True
    bool_4 = True
    try_2 = module_0.Try(bool_3, bool_4)
    var_0 = try_2.get()
    str_1 = '#_0u;:3P'
    bool_5 = False
    try_3 = module_0.Try(str_1, bool_5)
    try_4 = module_0.Try(try_3, bool_5)
    str_2 = try_4.__str__()
    set_0 = set()
    bool_6 = True
    str_3 = 'Kl><;+h-S)-1qk=j*'
    var_1 = try_4.get_or_else(str_3)
    try_5 = module_0.Try(set_0, bool_6)
    list_0 = [var_1]
    var_2 = try_5.on_fail(list_0)

def test_case_3():
    try_0 = None
    str_0 = 'OQDkQ+VIXV&\x0b'
    bool_0 = True
    try_1 = module_0.Try(str_0, bool_0)
    bool_1 = try_1.__eq__(try_0)

def test_case_4():
    bool_0 = False
    bool_1 = False
    try_0 = module_0.Try(bool_0, bool_1)
    str_0 = try_0.__str__()

def test_case_5():
    str_0 = '7UeKjEt4!TS3!\\5GrY~'
    int_0 = -3603
    float_0 = 1210.26256
    bytes_0 = b'm\x91\xe3'
    dict_0 = {}
    bool_0 = False
    try_0 = module_0.Try(dict_0, bool_0)
    var_0 = try_0.on_success(int_0)
    bool_1 = False
    try_1 = module_0.Try(bytes_0, bool_1)
    var_1 = try_1.get_or_else(float_0)
    bool_2 = False
    try_2 = module_0.Try(int_0, bool_2)
    var_2 = try_2.map(str_0)

def test_case_6():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    int_0 = 623
    list_0 = [int_0, int_0, int_0]
    bool_1 = False
    try_0 = module_0.Try(list_0, bool_1)
    var_0 = try_0.on_success(set_0)

def test_case_7():
    set_0 = set()
    tuple_0 = ()
    bool_0 = True
    try_0 = module_0.Try(tuple_0, bool_0)
    var_0 = try_0.on_fail(set_0)

def test_case_8():
    str_0 = '\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        '
    bool_0 = True
    try_0 = module_0.Try(str_0, bool_0)
    try_1 = module_0.Try(try_0, bool_0)
    list_0 = [try_1, bool_0, bool_0]
    bytes_0 = b''
    bool_1 = False
    try_2 = module_0.Try(bytes_0, bool_1)
    var_0 = try_2.filter(list_0)

def test_case_9():
    int_0 = 1540
    set_0 = {int_0, int_0}
    bool_0 = False
    try_0 = module_0.Try(set_0, bool_0)
    var_0 = try_0.get()

def test_case_10():
    bool_0 = None
    int_0 = 1384
    bool_1 = False
    try_0 = module_0.Try(int_0, bool_1)
    var_0 = try_0.get_or_else(bool_0)
    float_0 = 3770.889
    bool_2 = False
    tuple_0 = (bool_2,)
    str_0 = '|U}Axbg;K\\\n\\:\x0b'
    float_1 = 347.0
    tuple_1 = (tuple_0, bool_2, str_0, float_1)
    try_1 = module_0.Try(tuple_1, bool_2)
    var_1 = try_1.get_or_else(float_0)

def test_case_11():
    float_0 = -29.41
    set_0 = {float_0, float_0}
    bool_0 = True
    try_0 = module_0.Try(set_0, bool_0)
    str_0 = try_0.__str__()
    dict_0 = {float_0: float_0}
    bytes_0 = b'\x11\xcbU\xaf\xdc\x87'
    bool_1 = True
    try_1 = module_0.Try(bytes_0, bool_1)
    var_0 = try_1.get_or_else(dict_0)