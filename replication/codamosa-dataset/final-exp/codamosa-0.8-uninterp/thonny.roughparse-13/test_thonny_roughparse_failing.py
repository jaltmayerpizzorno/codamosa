# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        tuple_0 = ()
        hyper_parser_0 = None
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, hyper_parser_0: hyper_parser_0}
        int_0 = 998
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, int_0)
        var_0 = string_translate_pseudo_mapping_0.__iter__()
        bool_0 = True
        dict_1 = {bool_0: bool_0}
        hyper_parser_1 = module_0.HyperParser(bool_0, dict_1)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 0
        str_0 = ')3>$g9@'
        list_0 = []
        rough_parser_0 = module_0.RoughParser(int_0, list_0)
        var_0 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -801.5
        bool_0 = None
        str_0 = 'pa]n@N|\\8yDU*jJRlQ-K'
        tuple_0 = (bool_0, str_0)
        set_0 = set()
        rough_parser_0 = module_0.RoughParser(tuple_0, set_0)
        var_0 = rough_parser_0.find_good_parse_start(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'm00GpoM@]('
        float_0 = 1101.55
        set_0 = {float_0, float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        var_0 = rough_parser_0.set_lo(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 3264.802
        bytes_0 = b'.*7\xee2'
        rough_parser_0 = module_0.RoughParser(float_0, bytes_0)
        var_0 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\\t7bKL@GP ro'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        rough_parser_0 = module_0.RoughParser(str_0, dict_0)
        var_0 = rough_parser_0.get_base_indent_string()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1070.0
        set_0 = {float_0, float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        str_0 = '\x0bPhH\\o_>H1Ld'
        rough_parser_0 = module_0.RoughParser(set_0, str_0)
        var_0 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 1068.7225030923992
        set_0 = {float_0, float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        bool_0 = False
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 1070.0
        set_0 = {float_0, float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        str_0 = 'x\t'
        hyper_parser_0 = module_0.HyperParser(list_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'v-,A&4'
        bytes_0 = None
        rough_parser_0 = module_0.RoughParser(str_0, bytes_0)
        set_0 = {rough_parser_0}
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 1070.0
        set_0 = {float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        int_0 = 0
        var_0 = rough_parser_0.set_lo(int_0)
        str_0 = ''
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_base_indent_string()
        var_3 = rough_parser_0.get_continuation_type()
        var_4 = rough_parser_0.is_block_closer()
        var_5 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 1079.9113304791963
        set_0 = {float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        str_0 = 'VfAJ`ZVN_g&u\r:nD_-\x0c\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -2913.0
        set_0 = {float_0, float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        dict_0 = {float_0: set_0}
        list_0 = None
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, list_0)
        int_0 = -464
        var_0 = string_translate_pseudo_mapping_0.__len__()
        rough_parser_1 = module_0.RoughParser(int_0, list_0)
        var_1 = rough_parser_0.set_lo(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 1070.3088786310793
        set_0 = {float_0, float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        var_0 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 1070.0
        set_0 = {float_0, float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        int_0 = 0
        var_0 = rough_parser_0.set_lo(int_0)
        tuple_0 = ()
        var_1 = rough_parser_0.set_str(tuple_0)
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.find_good_parse_start(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = 1070.0
        set_0 = {float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        int_0 = 0
        var_0 = rough_parser_0.set_lo(int_0)
        tuple_0 = ()
        var_1 = rough_parser_0.set_str(tuple_0)
        var_2 = rough_parser_0.find_good_parse_start()
        str_0 = ''
        var_3 = rough_parser_0.set_str(str_0)
        var_4 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 1070.0
        set_0 = {float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        int_0 = 0
        var_0 = rough_parser_0.set_lo(int_0)
        tuple_0 = ()
        var_1 = rough_parser_0.set_str(tuple_0)
        var_2 = rough_parser_0.find_good_parse_start()
        str_0 = ''
        var_3 = rough_parser_0.set_str(str_0)
        var_4 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_19():
    try:
        float_0 = 1079.9113304791963
        set_0 = {float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        tuple_0 = ()
        var_0 = rough_parser_0.set_str(tuple_0)
        var_1 = rough_parser_0.find_good_parse_start(tuple_0)
        str_0 = '\timH<X\\[\n'
        var_2 = rough_parser_0.set_str(str_0)
        var_3 = rough_parser_0.get_last_open_bracket_pos()
        var_4 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = 1070.0
        set_0 = {float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        int_0 = 0
        var_0 = rough_parser_0.set_lo(int_0)
        tuple_0 = ()
        var_1 = rough_parser_0.set_str(tuple_0)
        str_0 = ''
        var_2 = rough_parser_0.set_str(str_0)
        var_3 = rough_parser_0.get_base_indent_string()
        var_4 = rough_parser_0.is_block_closer()
        var_5 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = 1079.9113304791963
        set_0 = {float_0, float_0}
        rough_parser_0 = module_0.RoughParser(float_0, set_0)
        str_0 = '\timH<X\\[\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass