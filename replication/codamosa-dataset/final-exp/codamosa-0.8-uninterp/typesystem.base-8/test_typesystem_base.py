# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    validation_result_0 = module_0.ValidationResult()
    str_0 = validation_result_0.__repr__()

def test_case_1():
    int_0 = -2434
    position_0 = module_0.Position(int_0, int_0, int_0)
    bool_0 = position_0.__eq__(position_0)

def test_case_2():
    int_0 = 1
    validation_result_0 = module_0.ValidationResult(value=int_0)
    position_0 = module_0.Position(int_0, int_0, int_0)
    validation_result_1 = module_0.ValidationResult(value=position_0)
    str_0 = validation_result_1.__repr__()

def test_case_3():
    str_0 = 'Must be a number.'
    message_0 = module_0.Message(text=str_0, code=str_0, key=str_0)
    bool_0 = message_0.__eq__(message_0)

def test_case_4():
    str_0 = "#['XgI\rI.Uae8!#7*fN"
    base_error_0 = module_0.BaseError(text=str_0, key=str_0)
    str_1 = base_error_0.__str__()
    bool_0 = base_error_0.__eq__(str_0)
    iterator_0 = base_error_0.__iter__()
    message_0 = module_0.Message(text=str_0, key=str_0, position=iterator_0)
    int_0 = message_0.__hash__()

def test_case_5():
    bytes_0 = b'\x9f\x0e\xd3\x0e\x01'
    base_error_0 = module_0.BaseError(text=bytes_0)
    int_0 = base_error_0.__hash__()

def test_case_6():
    str_0 = 'Must be a number.'
    message_0 = module_0.Message(text=str_0, code=str_0, key=str_0)
    str_1 = message_0.__repr__()
    bool_0 = message_0.__eq__(message_0)

def test_case_7():
    str_0 = ' [sparse]'
    int_0 = None
    int_1 = 1013
    position_0 = module_0.Position(int_0, int_1, int_0)
    message_0 = module_0.Message(text=str_0, index=str_0, start_position=position_0)
    str_1 = message_0.__repr__()

def test_case_8():
    str_0 = "i_L\rIL'[\\P"
    base_error_0 = module_0.BaseError(text=str_0)
    bool_0 = base_error_0.__eq__(base_error_0)

def test_case_9():
    str_0 = 'Value is not a valid integer'
    base_error_0 = module_0.BaseError(text=str_0)
    var_0 = str(base_error_0)

def test_case_10():
    str_0 = 'E]D"\'.woE#\\&'
    validation_result_0 = module_0.ValidationResult(value=str_0)
    bool_0 = validation_result_0.__bool__()
    str_1 = ' [sparse]'
    int_0 = None
    int_1 = 1013
    position_0 = module_0.Position(int_0, int_1, int_0)
    message_0 = module_0.Message(text=str_1, index=str_1, start_position=position_0)
    str_2 = message_0.__repr__()

def test_case_11():
    str_0 = 'Test Eror'
    validation_error_0 = module_0.ValidationError(text=str_0)
    validation_result_0 = module_0.ValidationResult(error=validation_error_0)
    var_0 = list(validation_result_0)
    validation_error_1 = module_0.ValidationError(text=str_0)
    bool_0 = True
    validation_result_1 = module_0.ValidationResult(value=bool_0)
    str_1 = validation_result_0.__repr__()
    var_1 = list(validation_result_1)
    bool_1 = validation_result_1.__bool__()

def test_case_12():
    message_0 = None
    str_0 = 'hY^`p!\n\'@c"9 '
    message_1 = module_0.Message(text=str_0, code=str_0)
    list_0 = [message_0, message_1, message_0]
    str_1 = '2E '
    bool_0 = message_1.__eq__(str_0)
    message_2 = module_0.Message(text=str_1, code=str_1, key=str_1)
    bool_1 = message_2.__eq__(list_0)
    validation_result_0 = module_0.ValidationResult()
    bool_2 = validation_result_0.__bool__()

def test_case_13():
    str_0 = '5.H)J'
    set_0 = None
    int_0 = 678
    int_1 = 967
    position_0 = module_0.Position(int_0, int_0, int_1)
    message_0 = module_0.Message(text=str_0, code=str_0, end_position=position_0)
    list_0 = [message_0, message_0, message_0]
    base_error_0 = module_0.BaseError(position=set_0, messages=list_0)
    str_1 = base_error_0.__repr__()

def test_case_14():
    str_0 = 'blank'
    base_error_0 = module_0.BaseError(text=str_0, key=str_0)
    bool_0 = base_error_0.__eq__(str_0)
    validation_result_0 = module_0.ValidationResult()

def test_case_15():
    str_0 = 'Must be a number.'
    message_0 = module_0.Message(text=str_0, code=str_0, key=str_0)
    list_0 = [message_0, message_0, message_0]
    base_error_0 = module_0.BaseError(messages=list_0)
    int_0 = base_error_0.__hash__()

def test_case_16():
    str_0 = 'Value s not a valid integer'
    base_error_0 = module_0.BaseError(text=str_0)
    str_1 = base_error_0.__repr__()

def test_case_17():
    str_0 = 'Must be a real datetime.'
    base_error_0 = module_0.BaseError(text=str_0, key=str_0)
    list_0 = base_error_0.messages()
    bool_0 = base_error_0.__eq__(str_0)
    validation_error_0 = module_0.ValidationError(messages=list_0)
    validation_result_0 = module_0.ValidationResult(error=validation_error_0)
    str_1 = validation_result_0.__repr__()
    int_0 = 1093
    base_error_1 = module_0.BaseError(messages=list_0)
    validation_result_1 = module_0.ValidationResult()
    int_1 = 2283
    int_2 = 1621
    position_0 = module_0.Position(int_0, int_1, int_2)
    list_1 = base_error_0.messages(add_prefix=int_0)
    validation_result_2 = module_0.ValidationResult()
    message_0 = module_0.Message(text=str_1, code=str_0, start_position=position_0, end_position=position_0)
    bool_1 = message_0.__eq__(int_1)

def test_case_18():
    int_0 = None
    int_1 = -229
    position_0 = module_0.Position(int_0, int_0, int_1)
    str_0 = 'E]D"\'.woE#\\&'
    validation_result_0 = module_0.ValidationResult(value=str_0)
    bool_0 = validation_result_0.__bool__()
    str_1 = ' [sparse]'
    int_2 = None
    int_3 = 1013
    position_1 = module_0.Position(int_2, int_3, int_2)
    message_0 = module_0.Message(text=str_1, index=str_1, start_position=position_1)
    list_0 = [message_0, message_0, message_0, message_0]
    validation_error_0 = module_0.ValidationError(messages=list_0)
    iterator_0 = validation_result_0.__iter__()
    str_2 = validation_result_0.__repr__()
    int_4 = message_0.__hash__()
    str_3 = 'q96N\x0c`'
    message_1 = module_0.Message(text=str_3, position=position_0)

def test_case_19():
    str_0 = "_Vp8r9Kpgx`\tw'5"
    str_1 = '*6W@j>\\:'
    list_0 = [str_0, str_1, str_0, str_1]
    int_0 = 1584
    int_1 = 1250
    int_2 = -131
    int_3 = -3025
    int_4 = -1008
    position_0 = module_0.Position(int_3, int_4, int_0)
    position_1 = module_0.Position(int_0, int_1, int_2)
    message_0 = module_0.Message(text=str_0, index=list_0, position=position_1)
    str_2 = message_0.__repr__()

def test_case_20():
    validation_result_0 = module_0.ValidationResult()
    var_0 = tuple(validation_result_0)

def test_case_21():
    str_0 = 'error message'
    message_0 = module_0.Message(text=str_0, code=str_0)
    bool_0 = message_0.__eq__(message_0)
    str_1 = 'erTror message2'
    int_0 = message_0.__hash__()
    message_1 = module_0.Message(text=str_1, code=str_0)
    bool_1 = message_1.__eq__(message_0)

def test_case_22():
    str_0 = 'error message'
    str_1 = 'custom'
    message_0 = module_0.Message(text=str_0, code=str_1)
    message_1 = module_0.Message(text=str_0, code=str_1)
    bool_0 = message_0.__eq__(message_1)
    str_2 = 'erTror message2'
    message_2 = module_0.Message(text=str_2, code=str_1)
    str_3 = 'custom2'
    message_3 = module_0.Message(text=str_0, code=str_3)
    bool_1 = message_0.__eq__(message_3)

def test_case_23():
    str_0 = 'Must be a real datetime.'
    base_error_0 = module_0.BaseError(text=str_0, key=str_0)
    str_1 = base_error_0.__str__()
    iterator_0 = base_error_0.__iter__()
    list_0 = base_error_0.messages()
    validation_result_0 = module_0.ValidationResult()
    str_2 = base_error_0.__str__()
    str_3 = 'k_Cs\n)q\t8\t"'
    int_0 = 1
    position_0 = module_0.Position(int_0, int_0, int_0)
    message_0 = module_0.Message(text=str_3, key=str_0, position=position_0)
    str_4 = message_0.__repr__()
    message_1 = module_0.Message(text=str_0, end_position=validation_result_0)
    bool_0 = message_1.__eq__(iterator_0)
    bool_1 = base_error_0.__eq__(str_0)
    validation_error_0 = module_0.ValidationError(messages=list_0)
    validation_result_1 = module_0.ValidationResult(error=validation_error_0)
    str_5 = validation_result_1.__repr__()
    bool_2 = base_error_0.__eq__(str_5)
    str_6 = base_error_0.__repr__()
    int_1 = -1428
    int_2 = None
    int_3 = 2168
    bool_3 = base_error_0.__eq__(int_3)
    int_4 = 626
    int_5 = 1
    int_6 = 458
    position_1 = module_0.Position(int_4, int_5, int_6)
    position_2 = module_0.Position(int_5, int_2, int_1)
    bool_4 = position_2.__eq__(position_0)

def test_case_24():
    str_0 = 'Must be a real datetime.'
    base_error_0 = module_0.BaseError(text=str_0, key=str_0)
    str_1 = base_error_0.__str__()
    iterator_0 = base_error_0.__iter__()
    list_0 = base_error_0.messages()
    validation_result_0 = module_0.ValidationResult()
    str_2 = base_error_0.__str__()
    str_3 = 'k_Cs\n)q\t8\t"'
    int_0 = 1
    int_1 = 1
    position_0 = module_0.Position(int_0, int_0, int_1)
    message_0 = module_0.Message(text=str_3, key=str_0, position=position_0)
    str_4 = message_0.__repr__()
    message_1 = module_0.Message(text=str_0, end_position=validation_result_0)
    bool_0 = message_1.__eq__(iterator_0)
    bool_1 = base_error_0.__eq__(str_0)
    validation_error_0 = module_0.ValidationError(messages=list_0)
    validation_result_1 = module_0.ValidationResult(error=validation_error_0)
    str_5 = validation_result_1.__repr__()
    bool_2 = base_error_0.__eq__(str_5)
    str_6 = base_error_0.__repr__()
    int_2 = 2168
    bool_3 = base_error_0.__eq__(int_2)
    str_7 = validation_result_0.__repr__()
    bool_4 = base_error_0.__eq__(validation_error_0)

def test_case_25():
    str_0 = 'text'
    str_1 = 'code'
    int_0 = 0
    position_0 = module_0.Position(int_0, int_0, int_0)
    int_1 = 10
    position_1 = module_0.Position(int_0, int_1, int_1)
    message_0 = module_0.Message(text=str_0, code=str_1, index=str_0, start_position=position_0, end_position=position_1)
    message_1 = module_0.Message(text=str_0, code=str_1, index=str_1, start_position=position_0, end_position=position_1)
    bool_0 = message_0.__eq__(message_1)

def test_case_26():
    str_0 = 'The value is invalid.'
    validation_error_0 = module_0.ValidationError(text=str_0)
    var_0 = str(validation_error_0)
    str_1 = 'invalid'
    var_1 = []
    message_0 = module_0.Message(text=str_0, code=str_1, index=var_1)
    str_2 = 'The value must be an integer.'
    str_3 = 'invalid_type'
    var_2 = []
    message_1 = module_0.Message(text=str_2, code=str_3, index=var_2)
    str_4 = '4]>k33,#{o'
    str_5 = 'max_value'
    var_3 = []
    message_2 = module_0.Message(text=str_4, code=str_5, index=var_3)
    message_3 = [message_0, message_1, message_2]
    validation_error_1 = module_0.ValidationError(messages=message_3)
    var_4 = str(validation_error_1)

def test_case_27():
    str_0 = 'text'
    str_1 = 'code'
    str_2 = 'nd'
    str_3 = [str_2]
    int_0 = 0
    position_0 = module_0.Position(int_0, int_0, int_0)
    int_1 = 54
    position_1 = module_0.Position(int_0, int_1, int_1)
    position_2 = None
    message_0 = module_0.Message(text=str_0, code=str_1, index=str_3, start_position=position_2, end_position=position_2)
    message_1 = module_0.Message(text=str_0, code=str_1, index=str_3, start_position=position_0, end_position=position_1)
    bool_0 = message_0.__eq__(message_1)