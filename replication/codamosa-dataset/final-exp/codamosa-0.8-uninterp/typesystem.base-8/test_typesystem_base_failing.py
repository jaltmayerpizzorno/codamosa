# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        list_0 = []
        base_error_0 = module_0.BaseError(messages=list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xde\x0f\x0f\xb8\x188o\xf0\xbe\x97u'
        bool_0 = True
        str_0 = '8dN\r"Pu'
        base_error_0 = module_0.BaseError(text=bool_0, code=str_0, key=str_0)
        bool_1 = base_error_0.__eq__(bytes_0)
        bool_2 = False
        int_0 = base_error_0.__len__()
        base_error_1 = module_0.BaseError(code=bytes_0, messages=bool_2)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'error message'
        message_0 = module_0.Message(text=str_0, code=str_0)
        bool_0 = message_0.__eq__(message_0)
        bool_1 = message_0.__eq__(message_0)
        str_1 = 'erTror message2'
        int_0 = message_0.__hash__()
        int_1 = -1372
        position_0 = module_0.Position(int_1, int_1, int_1)
        message_1 = module_0.Message(text=str_1, code=str_1, key=int_1, position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\t1+\r'
        str_1 = '@qn3:9&q{W7%\nzNz'
        list_0 = [str_0, str_1]
        int_0 = -420
        int_1 = 1832
        position_0 = module_0.Position(int_0, int_0, int_1)
        message_0 = module_0.Message(text=str_0, code=str_1, key=str_0, index=list_0, start_position=position_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'error message'
        str_1 = 'custom'
        message_0 = module_0.Message(text=str_0, code=str_1)
        message_1 = module_0.Message(text=str_0, code=str_1)
        bool_0 = message_0.__eq__(message_1)
        str_2 = 'erTror message2'
        message_2 = module_0.Message(text=str_2, code=str_1)
        str_3 = 'error message'
        int_0 = -27
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_3 = module_0.Message(text=str_3, position=position_0, start_position=position_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Test Error'
        base_error_0 = module_0.BaseError(text=str_0)
        str_1 = base_error_0.__repr__()
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_error_1 = module_0.ValidationError(text=str_0)
        bool_0 = True
        validation_result_0 = module_0.ValidationResult(value=bool_0)
        list_0 = []
        base_error_1 = module_0.BaseError(code=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'E]D"\'.woE#\\&'
        int_0 = 993
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_0 = module_0.Message(text=str_0, index=str_0, start_position=position_0)
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, position=position_0)
        list_0 = [message_0, message_0, message_0, message_0]
        str_1 = message_0.__repr__()
        validation_error_0 = module_0.ValidationError(key=str_1, messages=list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Wl%RcJf5d<J`\t\x0c'
        base_error_0 = module_0.BaseError(text=str_0)
        str_1 = base_error_0.__repr__()
        bool_0 = base_error_0.__eq__(str_1)
        base_error_1 = module_0.BaseError()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'bXG~4%\r^XJ'
        str_1 = 's}\n'
        str_2 = "'gb o73f~Q5/O"
        message_0 = module_0.Message(text=str_1, end_position=str_2)
        list_0 = [message_0, message_0, message_0, message_0]
        validation_error_0 = module_0.ValidationError(text=str_0, code=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1
        int_1 = 1
        position_0 = module_0.Position(int_0, int_0, int_1)
        float_0 = 1828.296659
        validation_result_0 = module_0.ValidationResult(value=position_0, error=float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Must be a real datetime.'
        base_error_0 = module_0.BaseError(text=str_0, key=str_0)
        list_0 = base_error_0.messages()
        int_0 = -1277
        validation_error_0 = module_0.ValidationError(messages=list_0)
        int_1 = 1093
        int_2 = -1318
        position_0 = module_0.Position(int_2, int_0, int_1)
        float_0 = 666.29
        base_error_1 = module_0.BaseError(position=float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '=\n'
        optional_0 = None
        base_error_0 = module_0.BaseError(text=str_0, key=str_0, messages=optional_0)
        bytes_0 = b'\xde\x0f\x0f\xb8\x188o\xf0\xbe\x97u'
        bool_0 = True
        str_1 = '8dN\r"Pu'
        base_error_1 = module_0.BaseError(text=bool_0, code=str_1, key=str_1)
        bool_1 = base_error_1.__eq__(bytes_0)
        str_2 = base_error_0.__repr__()
        int_0 = 1
        position_0 = module_0.Position(int_0, int_0, int_0)
        parse_error_0 = module_0.ParseError(position=position_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Must be a number.'
        message_0 = module_0.Message(text=str_0, key=str_0)
        bool_0 = message_0.__eq__(message_0)
        list_0 = [message_0]
        base_error_0 = module_0.BaseError(position=list_0, messages=list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Must be a real datetime.'
        base_error_0 = module_0.BaseError(text=str_0, key=str_0)
        iterator_0 = base_error_0.__iter__()
        list_0 = base_error_0.messages()
        validation_result_0 = module_0.ValidationResult()
        str_1 = base_error_0.__str__()
        message_0 = module_0.Message(text=str_0, end_position=validation_result_0)
        bool_0 = message_0.__eq__(iterator_0)
        bool_1 = base_error_0.__eq__(str_0)
        str_2 = base_error_0.__repr__()
        str_3 = message_0.__repr__()
        int_0 = None
        int_1 = 2168
        int_2 = -2840
        int_3 = -1871
        position_0 = module_0.Position(int_1, int_2, int_3)
        str_4 = position_0.__repr__()
        int_4 = 2235
        position_1 = module_0.Position(int_4, int_2, int_0)
        bool_2 = position_1.__eq__(int_0)
        str_5 = position_0.__repr__()
        bool_3 = position_0.__eq__(position_1)
        validation_error_0 = module_0.ValidationError(code=str_0)
    except BaseException:
        pass