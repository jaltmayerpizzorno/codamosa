# Automatically generated by Pynguin.
import cookiecutter.prompt as module_0
import json as module_1

def test_case_0():
    try:
        list_0 = None
        list_1 = [list_0]
        bytes_0 = b'\xd1\x17\xba\x9bF\x08+&I\xa1/\xca\xf9\\\xdb^'
        var_0 = module_0.read_user_variable(list_1, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 4
        var_0 = module_0.read_user_yes_no(int_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1447
        var_0 = module_0.read_repo_password(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        var_0 = module_0.read_user_choice(int_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b"`\xea\xdb'\x01\x83\x1a\xb7\x88\xad\xdd"
        var_0 = module_0.process_json(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '8fhB0|\\M'
        var_0 = module_0.read_user_dict(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        bool_0 = True
        var_0 = module_0.render_variable(str_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        bytes_0 = b''
        str_0 = 'S'
        float_0 = -1811.000603
        tuple_0 = ()
        var_0 = module_0.prompt_choice_for_config(bool_0, bytes_0, str_0, float_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\x93~)\xb9\xd3\xb7\xd9\xf5\xdd'
        var_0 = module_0.prompt_for_config(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        set_0 = None
        tuple_0 = (list_0, set_0)
        var_0 = module_0.render_variable(bool_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\\0\xfd\x00-\x92T\xa9\x8b\n\xa0\x00\xd5\x89\x1d\xf6)\xad)'
        str_0 = '}%n-F?'
        float_0 = 907.66088
        dict_0 = {bytes_0: str_0, bytes_0: str_0, str_0: float_0, float_0: str_0}
        var_0 = module_0.prompt_choice_for_config(bytes_0, str_0, float_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'y\xeb\x161\xefb\xf6'
        bytes_1 = b'w\rz3T?\xb2-9pU\xcc\xe2Aw\xafm\xa8'
        list_0 = [bytes_1, bytes_0, bytes_1, bytes_1, bytes_1, bytes_1]
        var_0 = module_0.read_user_choice(bytes_1, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\tH5wu'
        float_0 = -890.5513
        dict_0 = {str_0: str_0, float_0: str_0, str_0: str_0, float_0: float_0}
        bool_0 = False
        var_0 = module_0.render_variable(str_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        bool_0 = True
        bytes_0 = b'\x89\xf3\xf8xlmRF\xa8\xf3#\xa5\x11\xdd\x94\xd5\xf0)'
        list_0 = []
        float_0 = -1360.0
        var_0 = module_0.prompt_choice_for_config(tuple_0, bool_0, bytes_0, list_0, float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ')&R\tfe~+a|>QR'
        str_1 = 'CX'
        dict_0 = {str_1: str_1, str_1: str_1, str_0: str_0}
        var_0 = module_0.read_user_dict(str_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
        bytes_0 = None
        var_0 = module_0.render_variable(int_0, dict_0, bytes_0)
        float_0 = 497.0
        str_0 = 'nvp{/'
        var_1 = module_0.read_user_dict(float_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        complex_0 = None
        bytes_0 = b'V\x8f\x8b!\xdc\xf4~\xdb\x82Ra\xfd\xedQT\xd8\x0b^'
        bool_0 = True
        dict_0 = {}
        var_0 = module_0.prompt_choice_for_config(complex_0, bytes_0, bool_0, dict_0, complex_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'Verify that process_son works as expected.\n    '
        str_1 = 'key1'
        str_2 = 'key2'
        str_3 = {str_1: str_2, str_2: str_0}
        var_0 = module_1.dumps(str_3)
        var_1 = module_0.process_json(var_0)
        var_2 = module_0.process_json(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'Verify that process_json works as expected.\n\n    '
        var_0 = module_1.dumps(str_0)
        var_1 = module_0.process_json(var_0)
    except BaseException:
        pass