# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        str_0 = 'V;Kxe1}%I5\\'
        tuple_0 = module_0.parse_host(str_0)
        float_0 = 958.66875
        tuple_1 = ()
        tuple_2 = module_0.parse_content_header(str_0)
        optional_0 = module_0.parse_forwarded(float_0, tuple_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'disable'
        tuple_0 = module_0.parse_content_header(str_0)
        dict_0 = None
        str_1 = 'ox)\n|49djn2w;.@Li7u'
        str_2 = "1'{8"
        str_3 = "6]\rK\x0bz'ZR{T:f"
        dict_1 = {str_1: str_2, str_3: str_2}
        optional_0 = module_0.parse_xforwarded(dict_0, dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 4877.76375
        dict_0 = module_0.fwd_normalize(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '"tu'
        tuple_0 = module_0.parse_host(str_0)
        list_0 = [tuple_0]
        dict_0 = module_0.fwd_normalize(list_0)
        dict_1 = module_0.fwd_normalize(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 4877.76375
        str_0 = 'Ys'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = 'tawb'
        tuple_1 = module_0.parse_content_header(str_1)
        dict_0 = module_0.fwd_normalize(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -492
        str_0 = '|]j},Bx/\nLO\x0cl!'
        str_1 = '\\${(.+?)}'
        str_2 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '"tu'
        str_1 = module_0.fwd_normalize_address(str_0)
        tuple_0 = module_0.parse_host(str_0)
        str_2 = ''
        dict_0 = module_0.fwd_normalize(str_2)
        tuple_1 = module_0.parse_content_header(str_1)
        int_0 = 394
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
        str_3 = 'Ys'
        tuple_2 = module_0.parse_content_header(str_3)
        dict_1 = module_0.fwd_normalize(tuple_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        str_1 = 'en&#@\r*;-v'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
        dict_1 = module_0.fwd_normalize(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        dict_0 = module_0.fwd_normalize(str_0)
        str_1 = 'Ys'
        tuple_0 = (str_1, dict_0)
        dict_1 = module_0.fwd_normalize(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '_some_weird_string'
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = 'Unknown'
        str_3 = module_0.fwd_normalize_address(str_2)
        str_4 = 'unknown'
        str_5 = module_0.fwd_normalize_address(str_4)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = []
        dict_0 = module_0.fwd_normalize(var_0)
        str_0 = 'foo'
        str_1 = 'bar'
        str_2 = (str_0, str_1)
        str_3 = [str_2]
        dict_1 = module_0.fwd_normalize(str_3)
        var_1 = None
        var_2 = (str_0, var_1)
        var_3 = [var_2]
        dict_2 = module_0.fwd_normalize(var_3)
        str_4 = 'for'
        str_5 = '127.0.0.1:2000'
        str_6 = (str_4, str_5)
        str_7 = [str_6]
        dict_3 = module_0.fwd_normalize(str_7)
        str_8 = '[::1]:2000'
        str_9 = (str_4, str_8)
        str_10 = [str_9]
        dict_4 = module_0.fwd_normalize(str_10)
        int_0 = 2000
        var_4 = (str_5, int_0)
        var_5 = [var_4]
        dict_5 = module_0.fwd_normalize(var_5)
        str_11 = '2000'
        str_12 = (str_2, str_11)
        str_13 = [str_12]
        dict_6 = module_0.fwd_normalize(str_13)
        str_14 = (str_10, str_0)
        str_15 = [str_14]
        dict_7 = module_0.fwd_normalize(str_15)
    except BaseException:
        pass