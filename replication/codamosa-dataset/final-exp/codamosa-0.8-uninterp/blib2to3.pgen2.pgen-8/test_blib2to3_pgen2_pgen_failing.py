# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        str_0 = 'Z&\x0b$otLRn\x0cXiE2e'
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        list_0 = [str_0, str_0]
        parser_generator_0 = module_0.ParserGenerator(str_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        str_0 = 'L8#F+Co^}Ak;K#a3z'
        n_f_a_state_0.addarc(n_f_a_state_1, str_0)
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        n_f_a_state_0 = module_0.NFAState()
        optional_0 = None
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_1: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_1, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        bool_0 = d_f_a_state_0.__eq__(optional_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '//=?'
        pgen_grammar_0 = module_0.generate_grammar(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        n_f_a_state_0 = None
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        n_f_a_state_0 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_6():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
    except BaseException:
        pass

def test_case_7():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_2)
    except BaseException:
        pass

def test_case_8():
    try:
        n_f_a_state_0 = module_0.NFAState()
        str_0 = '5x'
        dict_0 = {str_0: n_f_a_state_0}
        n_f_a_state_0.addarc(n_f_a_state_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        str_0 = None
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_2.addarc(d_f_a_state_2, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        str_0 = 'L8#F+Co^}Ak;K#a3z'
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
        d_f_a_state_1.addarc(d_f_a_state_1, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = None
        n_f_a_state_0.addarc(n_f_a_state_1)
    except BaseException:
        pass

def test_case_12():
    try:
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.dfas
        str_0 = 'Dfa'
        d_f_a_state_0 = None
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: var_0, n_f_a_state_1: var_0}
        n_f_a_state_2 = module_0.NFAState()
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_2)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass