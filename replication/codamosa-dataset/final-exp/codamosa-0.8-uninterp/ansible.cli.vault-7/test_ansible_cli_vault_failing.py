# Automatically generated by Pynguin.
import ansible.cli.vault as module_0

def test_case_0():
    try:
        bytes_0 = b'P\xfb\x1e&\xb7\xc1\xc9#\x9d\xb8}T,'
        vault_c_l_i_0 = module_0.VaultCLI(bytes_0)
        var_0 = vault_c_l_i_0.init_parser()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 756.0
        vault_c_l_i_0 = module_0.VaultCLI(float_0)
        set_0 = set()
        var_0 = vault_c_l_i_0.post_process_args(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 2058
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        vault_c_l_i_0 = module_0.VaultCLI(dict_0)
        var_0 = vault_c_l_i_0.run()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '&t0jMS\x0c=^qVy'
        vault_c_l_i_0 = module_0.VaultCLI(str_0)
        var_0 = vault_c_l_i_0.execute_encrypt()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'AX+'
        list_0 = [str_0, str_0, str_0, str_0]
        bytes_0 = b'"j\x9c\x0b\xb3\x9c\xbe'
        dict_0 = {}
        set_0 = None
        vault_c_l_i_0 = module_0.VaultCLI(list_0)
        var_0 = vault_c_l_i_0.format_ciphertext_yaml(bytes_0, dict_0, set_0)
        vault_c_l_i_1 = module_0.VaultCLI(list_0)
        var_1 = vault_c_l_i_1.execute_edit()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        float_0 = 1.5
        dict_0 = {bool_0: bool_0}
        str_0 = "'hM)L<pSoyK@}&*9X"
        str_1 = '\n        Compiles the regular expressions required to parse the inventory and\n        stores them in self.patterns.\n        '
        tuple_0 = (float_0, dict_0, dict_0, str_1)
        vault_c_l_i_0 = module_0.VaultCLI(tuple_0)
        list_0 = [bool_0, float_0, float_0]
        vault_c_l_i_1 = module_0.VaultCLI(list_0)
        var_0 = vault_c_l_i_1.format_ciphertext_yaml(dict_0, str_0, vault_c_l_i_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'ipsCwA@}'
        list_0 = [str_0, str_0, str_0, str_0]
        vault_c_l_i_0 = module_0.VaultCLI(list_0)
        var_0 = vault_c_l_i_0.execute_encrypt_string()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'k='
        list_0 = [str_0]
        vault_c_l_i_0 = module_0.VaultCLI(list_0)
        var_0 = vault_c_l_i_0.execute_decrypt()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'gn9DdDXWVT>&{QKQYs<'
        vault_c_l_i_0 = module_0.VaultCLI(str_0)
        set_0 = {vault_c_l_i_0}
        vault_c_l_i_1 = module_0.VaultCLI(set_0)
        var_0 = vault_c_l_i_1.execute_create()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Password'
        vault_c_l_i_0 = module_0.VaultCLI(str_0)
        var_0 = vault_c_l_i_0.execute_edit()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xdf\x15\x0f\xb8\xeb\xfa\x1cM\x93\xd0Q\x04'
        vault_c_l_i_0 = module_0.VaultCLI(bytes_0)
        var_0 = vault_c_l_i_0.execute_view()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Zl.W^oY);eF?2X9|'
        str_1 = 'Including module_utils file %s'
        tuple_0 = (str_1,)
        set_0 = {str_0, tuple_0, tuple_0, str_1}
        float_0 = None
        tuple_1 = (set_0, float_0, tuple_0, set_0)
        vault_c_l_i_0 = module_0.VaultCLI(tuple_1)
        var_0 = vault_c_l_i_0.execute_rekey()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Ygy'
        list_0 = [str_0]
        vault_c_l_i_0 = module_0.VaultCLI(list_0)
        var_0 = vault_c_l_i_0.init_parser()
        str_1 = None
        var_1 = vault_c_l_i_0.post_process_args(str_1)
    except BaseException:
        pass