# Automatically generated by Pynguin.
import pymonet.lazy as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    list_0 = []
    dict_0 = None
    str_0 = '\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        '
    tuple_0 = (list_0, dict_0, str_0)
    lazy_0 = module_0.Lazy(tuple_0)
    str_1 = lazy_0.__str__()

def test_case_2():
    var_0 = lambda x: x
    lazy_0 = module_0.Lazy(var_0)
    bool_0 = lazy_0.__eq__(lazy_0)

def test_case_3():
    bool_0 = True
    str_0 = '3,ET%q(Sj:OzB-t*Le'
    str_1 = '\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        '
    lazy_0 = module_0.Lazy(str_1)
    var_0 = lazy_0.map(str_0)
    lazy_1 = module_0.Lazy(var_0)
    var_1 = lazy_1.ap(bool_0)

def test_case_4():
    str_0 = 'y61dgVw-&i7^d_kQ<'
    str_1 = 'xoD!)AU\\X>c'
    lazy_0 = module_0.Lazy(str_1)
    var_0 = lazy_0.bind(str_0)

def test_case_5():
    str_0 = '-Gq>.\n<]9pY@}-'
    dict_0 = {str_0: str_0}
    lazy_0 = module_0.Lazy(dict_0)
    var_0 = lazy_0.to_try()

def test_case_6():
    object_0 = module_1.object()
    bytes_0 = b'\xf7\xf3\x0f\x94'
    lazy_0 = module_0.Lazy(bytes_0)
    bool_0 = lazy_0.__eq__(object_0)

def test_case_7():
    var_0 = lambda x: x
    lazy_0 = module_0.Lazy(var_0)
    var_1 = lambda x: x
    bool_0 = lazy_0.__eq__(lazy_0)
    var_2 = lambda x: x
    lazy_1 = module_0.Lazy(var_2)
    int_0 = 1
    lazy_2 = module_0.Lazy(int_0)
    bool_1 = lazy_1.__eq__(lazy_2)
    var_3 = lambda x: x
    lazy_3 = module_0.Lazy(var_3)
    list_0 = [int_0]
    var_4 = lazy_0.to_maybe(*list_0)

def test_case_8():
    var_0 = lambda x: x
    lazy_0 = module_0.Lazy(var_0)
    var_1 = lambda x: x
    lazy_1 = module_0.Lazy(var_1)
    bool_0 = lazy_0.__eq__(lazy_1)
    var_2 = lambda x: x
    lazy_2 = module_0.Lazy(var_2)
    int_0 = 1
    var_3 = lambda x: x + int_0
    lazy_3 = module_0.Lazy(var_3)
    bool_1 = lazy_2.__eq__(lazy_3)
    var_4 = lambda x: x
    lazy_4 = module_0.Lazy(var_4)
    list_0 = [int_0]
    var_5 = lazy_0.to_either(*list_0)
    list_1 = [int_0]
    var_6 = lazy_0.to_maybe(*list_1)