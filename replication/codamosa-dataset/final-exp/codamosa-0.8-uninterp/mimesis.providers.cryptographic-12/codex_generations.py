

# Generated at 2022-06-14 00:05:47.039525
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    assert isinstance(Cryptographic().hash(Algorithm.SHA256), str)


# Generated at 2022-06-14 00:05:52.936798
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    crypto = Cryptographic('en', seed=42)
    assert crypto.hash() == '6a8f2e9b6e78cb6c7b6c8c6d788d8f6a'


# Generated at 2022-06-14 00:05:56.091137
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    from mimesis.enums import Algorithm
    from mimesis import Cryptographic
    c = Cryptographic()
    res = c.hash(algorithm=Algorithm.SHA256)
    assert res

# Generated at 2022-06-14 00:05:58.513411
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    assert len(Cryptographic().hash()) == (40 or 128 or 256 or 512)


# Generated at 2022-06-14 00:06:09.599259
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    # pylint: disable=line-too-long
    assert Cryptographic().hash(Algorithm.SHA1) == "c8b8f3d3a712fc9e8fdea8e89aecb27ef08ca2f4"
    assert Cryptographic().hash(Algorithm.SHA224) == "f01c5b3d9022d3c3e69edb5c5b6ee5eb6e9f59b1485c8b2e8613ff6"
    assert Cryptographic().hash(Algorithm.SHA256) == "9eaead771d1f978e8f3dcdd3d3c5f40e5b5c5eb6ee5eb6e9f59b1485c8b2e8613"

# Generated at 2022-06-14 00:06:16.981676
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    hash_string = hashlib.md5(b'1352d28d-70e0-4af8-bfa9-f0cfc9f8b7fa').hexdigest()
    assert hash_string == '01b8f85ed1a77b04d9b99ec6c8c6eaec'
    assert len(hash_string) == 32


# Generated at 2022-06-14 00:06:26.514140
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    """Test to see if Cryptographic is correctly generating hash."""
    crypto = Cryptographic()
    assert (type(crypto.hash()) == str)
    assert (len(crypto.hash()) == 40)
    assert (crypto.hash(algorithm="sha1") == crypto.hash(algorithm="sha1"))
    assert (crypto.hash(algorithm=Algorithm.SHA1) == crypto.hash(algorithm=Algorithm.SHA1))
    assert (crypto.hash(algorithm="md5") != crypto.hash(algorithm="sha1"))
    assert (crypto.hash(algorithm=Algorithm.MD5) != crypto.hash(algorithm=Algorithm.SHA1))



# Generated at 2022-06-14 00:06:36.514100
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    cg = Cryptographic(seed=123)
    cg.hash() == 'd0f6aa1c438fc4834e05e9c903eb6bff468022d2'
    cg.hash(algorithm=Algorithm.SHA384) == 'a5b4e4b4a4e5a5a5b4f4f58b4a5b4a5a5b4f4a5a5b4e4b4e5a5b4a5f4a5a5b4e4'
    return True


# Generated at 2022-06-14 00:06:40.523534
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    crypto = Cryptographic()
    m = crypto.hash(Algorithm.SHA256)
    assert len(m) == 64
# Test for method uuid of class Cryptographic

# Generated at 2022-06-14 00:06:45.386399
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    crypto = Cryptographic('en')
    print(crypto.hash())
# Output: 714ceeaba77b806f8b6c7b8f55e6c8961dd425e5438bea8e12a3fa3e0fa3a1a2


# Generated at 2022-06-14 00:07:16.167938
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    assert(Cryptographic().hash() in ['da765423c7b8f70d5060d9f9fc4c4bfe', '14948d04fdf6d5b279652f40f31c9823'])
    assert(Cryptographic(seed=1).hash() in ['2f30a3c3afaf0bb8ca9c067b6c6b4e6a', '6a4d6d7e6c5b631e2f9cba5a5f99c82e'])

# Generated at 2022-06-14 00:07:16.665509
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    pass

# Generated at 2022-06-14 00:07:17.660232
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    assert Cryptographic.hash(Algorithm.SHA256)


# Generated at 2022-06-14 00:07:26.946898
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    assert Cryptographic.hash(Algorithm.SHA1).isalnum()
    assert Cryptographic.hash(Algorithm.SHA224).isalnum()
    assert Cryptographic.hash(Algorithm.SHA256).isalnum()
    assert Cryptographic.hash(Algorithm.SHA384).isalnum()
    assert Cryptographic.hash(Algorithm.SHA512).isalnum()
    assert Cryptographic.hash(Algorithm.SHA3_224).isalnum()
    assert Cryptographic.hash(Algorithm.SHA3_256).isalnum()
    assert Cryptographic.hash(Algorithm.SHA3_384).isalnum()
    assert Cryptographic.hash(Algorithm.SHA3_512).isalnum()
    assert Cryptographic.hash(Algorithm.SHAKE128).isalnum()
    assert Cryptographic.hash(Algorithm.SHAKE256).isalnum()

# Generated at 2022-06-14 00:07:36.895828
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    # Tests for correct length of hash generated by each hashing algorithm
    cr = Cryptographic(seed=1234567890)
    # Test for MD5
    md5 = cr.hash(Algorithm.MD5)
    assert len(md5) == 32
    # Test for SHA1
    sha1 = cr.hash(Algorithm.SHA1)
    assert len(sha1) == 40
    # Test for SHA224
    sha224 = cr.hash(Algorithm.SHA224)
    assert len(sha224) == 56
    # Test for SHA256
    sha256 = cr.hash(Algorithm.SHA256)
    assert len(sha256) == 64
    # Test for SHA384
    sha384 = cr.hash(Algorithm.SHA384)
    assert len(sha384) == 96
    # Test for SHA512


# Generated at 2022-06-14 00:07:43.860268
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    # GIVEN a cryptographic generator with a seed
    cr = Cryptographic(seed=42)

    # WHEN checking the hash of a uuid
    expected_hash = 'fe1f2b535d879f0a9cd8720744d71e85'
    actual_hash = cr.hash(e.SHA256)

    # THEN it should be equal to the expected hash
    assert expected_hash == actual_hash


# Generated at 2022-06-14 00:07:48.222395
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    """Unit test for method hash of class Cryptographic."""
    a='SHA512'
    b=Cryptographic().hash(a)
    assert len(b)==128



# Generated at 2022-06-14 00:07:55.309280
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    from mimesis.enums import Algorithm
    a = Cryptographic()
    assert a.hash(algorithm = Algorithm.MD5)
    assert a.hash(algorithm = Algorithm.SHA1)
    assert a.hash(algorithm = Algorithm.SHA224)
    assert a.hash(algorithm = Algorithm.SHA256)
    assert a.hash(algorithm = Algorithm.SHA384)
    assert a.hash(algorithm = Algorithm.SHA512)
    assert a.hash(algorithm = Algorithm.BLAKE2b)
    assert a.hash(algorithm = Algorithm.BLAKE2s)

# Generated at 2022-06-14 00:08:02.427803
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    test = Cryptographic()

    # test using default parameters
    hash = test.hash()
    assert type(hash) is str
    assert len(hash) == 40

    # test with a random algorithm
    hash = test.hash(Algorithm.MD5)
    assert type(hash) is str
    assert len(hash) == 32

    # test with an unsupported algorithm
    hash = test.hash(Algorithm.SHA3_384)
    assert type(hash) is str
    assert len(hash) == 96


# Generated at 2022-06-14 00:08:05.840052
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    obj = Cryptographic(seed=0)
    assert obj.hash() == '1e6d43ba9eafdf21b8bbc00bc0dd261e'


# Generated at 2022-06-14 00:09:25.816462
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    obj = Cryptographic()
    result = obj.hash()
    assert result is not None


# Generated at 2022-06-14 00:09:28.682312
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    provider = Cryptographic()
    result = provider.hash()
    assert isinstance(result, str)


# Generated at 2022-06-14 00:09:34.864362
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    '''Test for method hash'''
    n = 5
    for i in range(n):
        c = Cryptographic()
        a = c.hash()
        assert isinstance(a, str) == True
        assert len(a) == 64
        print(a)


# Generated at 2022-06-14 00:09:43.534869
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():

    crypt = Cryptographic()

    # Test 1 -- checking values
    print(crypt.hash(Algorithm.MD5))
    # Output: dcd1cd2d0cec2e7ff8383b2c2f10fc9e

    # Test 2 -- checking values
    print(crypt.hash(Algorithm.SHA1))
    # Output: 84b5a5d5e7b8a6b2c6eb65d6f1a351ba8a6ee1c9

    # Test 3 -- checking values
    print(crypt.hash(Algorithm.SHA224))
    # Output: 183baf8c266fad9f0e1ddf18cf65e8247c44e0b0895a2c48271ffdf

    # Test 4 -- checking values

# Generated at 2022-06-14 00:09:55.101939
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    c = Cryptographic()
    lst = [c.hash(Algorithm.SHA224), c.hash(Algorithm.SHA384), c.hash(Algorithm.SHA256), c.hash(Algorithm.SHA512), c.hash(Algorithm.SHA3_224), c.hash(Algorithm.SHA3_256), c.hash(Algorithm.SHA3_384), c.hash(Algorithm.SHA3_512), c.hash(Algorithm.SHA1), c.hash(Algorithm.SHA512_224), c.hash(Algorithm.SHA512_256), c.hash(Algorithm.MD5)]
    assert len(lst) == 12
    for each in lst:
        assert isinstance(each, str)


# Generated at 2022-06-14 00:09:56.533711
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    assert Cryptographic().hash() is not None


# Generated at 2022-06-14 00:09:57.739500
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    assert(Cryptographic().hash() != Cryptographic().hash())

# Generated at 2022-06-14 00:10:03.593083
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    # Create provider
    crypto = Cryptographic()

    # Create an object Algorithm
    algo1 = Algorithm.SHA256
    assert algo1 == 'SHA256'

    # Return the cryptographic hash of a string value uuid
    assert crypto.hash(algo1) is not None

# Generated at 2022-06-14 00:10:05.013895
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    result = Cryptographic().hash()
    assert (result)


# Generated at 2022-06-14 00:10:08.679956
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    assert Cryptographic("en").hash(Algorithm.MD5) == "b89a9a9e6e8da7dac60c77efc7e1b6fb"

# Generated at 2022-06-14 00:12:39.810246
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    """Unit test for method ``hash`` of class ``Cryptographic``."""
    hash = Cryptographic().hash()
    print(hash)


# Generated at 2022-06-14 00:12:48.716435
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    """Function to test method hash of class Cryptographic."""
    crypto = Cryptographic()
    assert len(crypto.hash(Algorithm.MD5)) == 32
    assert len(crypto.hash(Algorithm.SHA1)) == 40
    assert len(crypto.hash(Algorithm.SHA224)) == 56
    assert len(crypto.hash(Algorithm.SHA256)) == 64
    assert len(crypto.hash(Algorithm.SHA384)) == 96
    assert len(crypto.hash(Algorithm.SHA512)) == 128

# Generated at 2022-06-14 00:12:55.912218
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    obj = Cryptographic()
    assert obj.hash(algorithm=Algorithm.MD5) == '23ea0b5cb5eb935b9d211b98a86a4219'
    assert obj.hash(algorithm=Algorithm.SHA1) == '821e908dfe7f96b562ce1c2d33b5c64ddf43fd11'
    assert obj.hash(algorithm=Algorithm.SHA224) == 'f5e3ae3d1ff2cd83b89e5c5e3b6c0b2f16f0c057997557d2030e45ae'

# Generated at 2022-06-14 00:13:00.329825
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    obj = Cryptographic()
    rv = obj.hash(Algorithm.RIPEMD160)
    assert len(rv) == 40


# Generated at 2022-06-14 00:13:02.725648
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    c = Cryptographic()

    assert c.hash() != None

    assert c.hash(Algorithm.SHA3_224) != None



# Generated at 2022-06-14 00:13:07.216550
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    """Unit tests of method Cryptographic_hash."""
    cr = Cryptographic()
    print("hashlib.md5(cr.uuid().encode()).hexdigest() :- ", hashlib.md5(cr.uuid().encode()).hexdigest())


print(test_Cryptographic_hash())

# Generated at 2022-06-14 00:13:13.013707
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    crypto = Cryptographic()
    assert crypto.hash() == '17d18b7f6e948ccd7f01b0d6bf7c90c8fcfd7e3587b87f974bbf9c08a11e66f2'

# Generated at 2022-06-14 00:13:17.436763
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    function = Cryptographic().hash()
    assert function == '5c067bcf8fb6c2d001d5b6d1e5775fcb'

# Generated at 2022-06-14 00:13:22.067261
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    c = Cryptographic()
    result = c.hash()
    assert len(result) == 64


# Generated at 2022-06-14 00:13:30.517946
# Unit test for method hash of class Cryptographic
def test_Cryptographic_hash():
    c = Cryptographic()
    assert isinstance(c.uuid(), str)
    assert isinstance(c.uuid(as_object=True), UUID)
    assert len(c.hash()) == 32
    assert len(c.hash(Algorithm.SHA224)) == 56
    assert not (c.hash(Algorithm.SHA224) == c.hash())
