# Automatically generated by Pynguin.
import typesystem.fields as module_0
import typesystem.composites as module_1

def test_case_0():
    try:
        str_0 = "U#I_SAq0IJ'Y"
        bool_0 = False
        field_0 = module_0.Field(description=str_0, allow_null=bool_0)
        not_0 = module_1.Not(field_0)
        never_match_0 = module_1.NeverMatch()
        any_0 = never_match_0.validate(never_match_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'eWLW|a'
        field_0 = module_0.Field()
        list_0 = [field_0]
        all_of_0 = module_1.AllOf(list_0)
        any_0 = all_of_0.validate(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        any_0 = module_0.Any()
        any_1 = [any_0]
        all_of_0 = module_1.AllOf(any_1)
        not_0 = module_1.Not(all_of_0)
        int_0 = 1
        any_2 = not_0.validate(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        any_0 = module_0.Any()
        not_0 = module_1.Not(any_0)
        int_0 = 1
        any_1 = not_0.validate(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        any_0 = module_0.Any()
        any_1 = [any_0, any_0, any_0, any_0]
        one_of_0 = module_1.OneOf(any_1)
        any_2 = one_of_0.validate(any_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        one_of_0 = module_1.OneOf(list_0)
        str_0 = 't\x0b'
        field_0 = module_0.Field(title=str_0)
        any_0 = one_of_0.validate(field_0)
    except BaseException:
        pass

def test_case_6():
    try:
        any_0 = module_0.Any()
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        if_then_else_0 = module_1.IfThenElse(any_0, any_0)
        int_0 = 1
        any_1 = if_then_else_0.validate(if_then_else_0)
        not_0 = module_1.Not(field_0)
        any_2 = if_then_else_0.validate(int_0)
        str_0 = 'all_of'
        dict_0 = {str_0: any_2, str_0: str_0}
        if_then_else_1 = module_1.IfThenElse(field_0, field_0, field_0)
        never_match_0 = module_1.NeverMatch()
        not_1 = module_1.Not(field_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        never_match_0 = module_1.NeverMatch()
        str_0 = 's'
        bool_0 = None
        field_0 = module_0.Field(description=str_0, allow_null=bool_0)
        not_0 = module_1.Not(field_0)
        field_1 = module_0.Field(allow_null=bool_0)
        if_then_else_0 = module_1.IfThenElse(field_1)
        any_0 = module_0.Any()
        any_1 = [never_match_0]
        one_of_0 = module_1.OneOf(any_1)
        any_2 = one_of_0.validate(any_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'allow_null'
        field_0 = module_0.Field(title=str_0)
        dict_0 = {str_0: str_0, str_0: field_0}
        if_then_else_0 = module_1.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Oz,ub{f+Igrr'
        list_0 = [str_0]
        list_1 = []
        all_of_0 = module_1.AllOf(list_1)
        any_0 = module_0.Any(default=all_of_0)
        validation_result_0 = any_0.validate_or_error(list_0)
        bool_0 = True
        field_0 = module_0.Field(default=validation_result_0, allow_null=bool_0)
        list_2 = [field_0, field_0, field_0]
        str_1 = 'allow_null'
        tuple_0 = ()
        str_2 = '\n    Conditional sub-item matching.\n\n    You should use custom validation instead.\n    '
        dict_0 = {str_1: bool_0, str_0: tuple_0, str_2: str_1}
        one_of_0 = module_1.OneOf(list_2, **dict_0)
    except BaseException:
        pass