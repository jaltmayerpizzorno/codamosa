# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        module_0.register()
        module_0.register()
        user_string_0 = None
        tuple_0 = module_0.encode(user_string_0, user_string_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Q\nK_Aa\\9LHbLG ?1Ro0'
        tuple_0 = module_0.encode(str_0)
        tuple_1 = ()
        list_0 = [tuple_1]
        tuple_2 = module_0.decode(list_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x1f\x98\x19@\xbfB\x9f~\x8f'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        user_string_0 = module_1.UserString(dict_0)
        tuple_0 = module_0.encode(user_string_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '6^\\l<Y\rzS:2Xa%9Tvb6'
        tuple_0 = module_0.encode(str_0)
        str_1 = "X ?R\t!qxo/'!"
        tuple_1 = module_0.encode(str_1, str_1)
        bytes_0 = b'\x9c\xb2c\x84\xd2\xbe\x87\xd4\x10\xfc>\xa3v\xf9]\xbdm$\xf9\xbe'
        tuple_2 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xc9\xd8\xf5o\xc4>\xb2\xf1'
        user_string_0 = module_1.UserString(bytes_0)
        user_string_1 = None
        tuple_0 = module_0.encode(user_string_0, user_string_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "Can convert only 'list', 'tuple', 'dict' to a NamedTuple; got: (%r) %s"
        tuple_0 = module_0.encode(str_0)
        module_0.register()
        str_1 = 'Wraps the single paragraph in the given ``text`` so every line is\n        at most ``width`` characters long. All wrapping options are taken\n        from instance attributes of the\n        :obj:`~flutils.txtutils.AnsiTextWrapper` instance.\n\n        Args:\n            text (str): The text to be wrapped.\n\n        Returns:\n            A ``List[str]`` of output lines, without final newlines.\n            If the wrapped output has no content, the returned list is\n            empty.\n        '
        module_0.register()
        str_2 = "BE'NaTb5\x0c^xy"
        str_3 = "X ?R\t!qxo/'!"
        tuple_1 = module_0.encode(str_3, str_3)
        dict_0 = {str_1: str_1, str_2: str_1, str_3: str_1}
        user_string_0 = module_1.UserString(dict_0)
        tuple_2 = module_0.encode(user_string_0)
        bytes_0 = b'\x9c\xb2c\x84\xd2\xbe\x87\xd4\x10\xfc>\xa3v\xf9\xbdm$\xf9\xbe'
        module_0.register()
        str_4 = 'z\\EET\n0o}h%%\tV~3 ;X'
        tuple_3 = module_0.decode(bytes_0, str_4)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "Can convert only 'list', 'tuple', 'dict' to a NamedTuple; got: (%r) %s"
        tuple_0 = module_0.encode(str_0)
        str_1 = 'Wraps the single paragraph in the given ``text`` so every line is\n        at most ``width`` characters long. All wrapping options are taken\n        from instance attributes of the\n        :obj:`~flutils.txtutils.AnsiTextWrapper` instance.\n\n        Args:\n            text (str): The text to be wrapped.\n\n        Returns:\n            A ``List[str]`` of output lines, without final newlines.\n            If the wrapped output has no content, the returned list is\n            empty.\n        '
        module_0.register()
        str_2 = "BE'NaTb5\x0c^xy"
        module_0.register()
        str_3 = "X ?R\t!qxo/'!"
        tuple_1 = module_0.encode(str_3, str_3)
        dict_0 = {str_1: str_1, str_2: str_1, str_3: str_1}
        user_string_0 = module_1.UserString(dict_0)
        tuple_2 = module_0.encode(user_string_0)
        str_4 = "Convert the given ``text``  into a string of escaped Unicode\n    hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped Python literal.\n\n    Example:\n        >>> from flutils.strutils import as_escaped_unicode_literal\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_literal(t)\n        '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n    "
        user_string_1 = module_1.UserString(str_4)
        tuple_3 = module_0.encode(user_string_1)
        byte_string_0 = None
        tuple_4 = module_0.decode(byte_string_0, str_4)
    except BaseException:
        pass

def test_case_7():
    try:
        module_0.register()
        str_0 = ''
        var_0 = module_2.getencoder(str_0)
    except BaseException:
        pass