# Automatically generated by Pynguin.
import typesystem.fields as module_0
import typesystem.composites as module_1

def test_case_0():
    try:
        any_0 = module_0.Any()
        var_0 = None
        if_then_else_0 = module_1.IfThenElse(any_0, var_0, var_0)
        var_1 = None
        any_1 = if_then_else_0.validate(var_1)
        never_match_0 = module_1.NeverMatch()
        any_2 = never_match_0.validate(any_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = []
        one_of_0 = module_1.OneOf(var_0)
        any_0 = one_of_0.validate(one_of_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        str_0 = 'maximum'
        str_1 = '.nE%(=H0'
        field_0 = module_0.Field(title=str_0, description=str_1)
        list_0 = [field_0, field_0, field_0, field_0]
        one_of_0 = module_1.OneOf(list_0, **dict_0)
        any_0 = one_of_0.validate(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        any_0 = module_0.Any()
        not_0 = module_1.Not(any_0)
        str_0 = ''
        any_1 = not_0.validate(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        any_0 = module_0.Any()
        any_1 = [any_0]
        all_of_0 = module_1.AllOf(any_1)
        not_0 = module_1.Not(all_of_0)
        int_0 = 10
        any_2 = not_0.validate(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '00'
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        not_0 = module_1.Not(field_0)
        bool_1 = False
        str_1 = 'iXV%g5Bo=(_dA'
        bool_2 = False
        field_1 = module_0.Field(title=str_0, description=str_1, allow_null=bool_2)
        str_2 = 'GOv}\\O!(^Vpg'
        str_3 = 'allow_null'
        str_4 = '?#u#1oqVQZQ}7udL'
        dict_0 = {str_2: bool_1, str_3: bool_0, str_4: str_0}
        not_1 = module_1.Not(field_1, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        any_0 = module_0.Any()
        any_1 = [any_0]
        one_of_0 = module_1.OneOf(any_1)
        any_2 = module_0.Any()
        any_3 = module_0.Any()
        bool_0 = True
        any_4 = one_of_0.validate(any_2, bool_0)
        any_5 = module_0.Any()
        any_6 = [any_2, any_3, any_5]
        one_of_1 = module_1.OneOf(any_6)
        any_7 = module_0.Any()
        any_8 = module_0.Any()
        any_9 = module_0.Any()
        any_10 = module_0.Any()
        any_11 = [any_2, any_7, any_3, any_3, any_10, any_9, any_10, one_of_1, any_1]
        one_of_2 = module_1.OneOf(any_11)
        any_12 = module_0.Any()
        any_13 = any_2.serialize(any_4)
        any_14 = module_0.Any()
        any_15 = module_0.Any()
        any_16 = module_0.Any()
        list_0 = []
        all_of_0 = module_1.AllOf(list_0)
        any_17 = one_of_2.validate(any_5)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '{c[6hyj`s\rMW&2mX'
        bool_0 = True
        field_0 = module_0.Field(description=str_0, allow_null=bool_0)
        if_then_else_0 = module_1.IfThenElse(field_0, field_0, field_0)
        field_1 = module_0.Field(title=str_0)
        str_1 = '6wHGC7ttkb`<iI]'
        str_2 = 'allow_null'
        dict_0 = {str_2: str_0, str_2: str_1}
        never_match_0 = module_1.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        any_0 = module_0.Any()
        bool_0 = any_0.has_default()
        any_1 = any_0.serialize(any_0)
        list_0 = []
        one_of_0 = module_1.OneOf(list_0)
        if_then_else_0 = module_1.IfThenElse(any_0, any_1, any_1)
        var_0 = None
        any_2 = any_0.get_default_value()
        never_match_0 = module_1.NeverMatch()
        field_0 = module_0.Field(default=var_0)
        all_of_0 = module_1.AllOf(list_0)
        any_3 = field_0.serialize(any_0)
        list_1 = [field_0, field_0]
        all_of_1 = module_1.AllOf(list_1)
        str_0 = 'allow_null'
        int_0 = 2
        dict_0 = {str_0: any_2, str_0: any_0, str_0: int_0, str_0: var_0}
        one_of_1 = module_1.OneOf(list_0, **dict_0)
    except BaseException:
        pass