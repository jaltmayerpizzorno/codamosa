# Automatically generated by Pynguin.
import ansible.module_utils.api as module_0

def test_case_0():
    pass

def test_case_1():
    var_0 = module_0.rate_limit_argument_spec()
    list_0 = [var_0]
    var_1 = module_0.retry(list_0)

def test_case_2():
    int_0 = 10
    int_1 = 3
    var_0 = module_0.retry_argument_spec()
    var_1 = module_0.generate_jittered_backoff(int_0, int_1, int_1)
    var_2 = list(var_1)
    var_3 = len(var_2)

def test_case_3():
    int_0 = 10
    int_1 = 3
    int_2 = 60
    var_0 = module_0.generate_jittered_backoff(int_0, int_1, int_2)
    var_1 = list(var_0)
    var_2 = len(var_1)
    var_3 = module_0.rate_limit()

def test_case_4():
    bool_0 = True
    var_0 = module_0.retry_never(bool_0)

def test_case_5():
    var_0 = module_0.rate_limit_argument_spec()
    str_0 = '&\x0c?!Zw^$3V(F8;F'
    var_1 = module_0.retry(str_0)
    list_0 = []
    var_2 = module_0.retry_argument_spec()
    var_3 = module_0.rate_limit(list_0)
    var_4 = module_0.basic_auth_argument_spec()
    dict_0 = {}
    var_5 = module_0.retry(dict_0)
    float_0 = 1.5
    var_6 = module_0.retry_never(float_0)
    var_7 = module_0.rate_limit_argument_spec()
    var_8 = module_0.retry_argument_spec()
    list_1 = [var_4]
    var_9 = module_0.rate_limit(list_1)

def test_case_6():
    str_0 = 'vv'
    var_0 = module_0.rate_limit_argument_spec()
    bytes_0 = b'||\xbep\xb5\xdf\xbc\x11}WB'
    var_1 = module_0.retry()
    var_2 = module_0.retry_with_delays_and_condition(bytes_0, bytes_0)
    var_3 = module_0.generate_jittered_backoff(str_0)
    bytes_1 = b'\xf5\x83\\NV\x81\x08Q'
    var_4 = module_0.retry(bytes_1)
    var_5 = module_0.generate_jittered_backoff()
    bytes_2 = b'\x19\xbc\x05\xfa\x02\xc6ik.\x15'
    var_6 = module_0.generate_jittered_backoff()
    float_0 = -1221.03
    var_7 = module_0.retry_never(float_0)
    str_1 = '2h!Av`$Gjr=4/Q'
    var_8 = module_0.retry_argument_spec()
    str_2 = 'not installed'
    var_9 = module_0.retry_with_delays_and_condition(str_2)
    var_10 = module_0.generate_jittered_backoff(bytes_2, str_1)

def test_case_7():
    int_0 = 10
    int_1 = 3
    int_2 = 60
    var_0 = module_0.generate_jittered_backoff(int_0, int_1, int_2)
    var_1 = list(var_0)