# Automatically generated by Pynguin.
import pysnooper.tracer as module_0

def test_case_0():
    try:
        dict_0 = None
        str_0 = ':H'
        var_0 = module_0.get_write_function(dict_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = '\'K6\r/\t:X$I+~|xE3C"r'
        tracer_0 = module_0.Tracer(bool_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\nGCqq^y7@*K4'
        list_0 = []
        str_1 = '{indent}Exception:..... {exception}'
        str_2 = "'@?.i"
        str_3 = "!*gm({H~FHlB'V;nf{'"
        bool_0 = True
        dict_0 = {str_1: list_0, str_2: str_0, str_3: bool_0, str_0: str_0}
        file_writer_0 = module_0.FileWriter(dict_0, bool_0)
        file_writer_1 = module_0.FileWriter(list_0, file_writer_0)
        tracer_0 = module_0.Tracer(file_writer_1)
        var_0 = tracer_0.__enter__()
        var_1 = tracer_0.__call__(tracer_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        str_0 = '\'K6\r/\t:X$I+~|xE3C"r'
        tracer_0 = module_0.Tracer(str_0, bool_0, bool_0, str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '>d*+ael"\r&P|\r'
        str_1 = "$Xj'"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
        var_0 = module_0.get_write_function(str_0, dict_0)
        str_2 = '\nGCqq^y7@*K4'
        tracer_0 = module_0.Tracer(str_2)
        var_1 = tracer_0.__enter__()
        float_0 = 352.486293
        var_2 = tracer_0.__call__(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        int_0 = 256
        file_writer_0 = module_0.FileWriter(int_0, list_0)
        var_0 = file_writer_0.write(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        int_0 = 256
        list_1 = [int_0, int_0, int_0]
        file_writer_0 = module_0.FileWriter(int_0, list_1)
        var_0 = file_writer_0.write(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 2154.584155
        int_0 = -886
        file_writer_0 = module_0.FileWriter(float_0, int_0)
        str_0 = 'R\tD}'
        str_1 = '\nGCqq^y7@*K4'
        tracer_0 = module_0.Tracer(str_1)
        complex_0 = None
        set_0 = None
        int_1 = 496
        var_0 = tracer_0.__enter__()
        tracer_1 = module_0.Tracer(complex_0, str_0, set_0, int_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\nGCqq^y7@*K4'
        tracer_0 = module_0.Tracer(str_0)
        var_0 = tracer_0.__call__(tracer_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\nGCqq^y7@*K4'
        tracer_0 = module_0.Tracer(str_0)
        bool_0 = False
        bytes_0 = b'\xad\xbf\xb2\xa2N\xb8\xe6\x89'
        var_0 = tracer_0.__exit__(bool_0, bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\nGCqq^y7@*K4'
        tracer_0 = module_0.Tracer(str_0)
        bool_0 = False
        bytes_0 = b'\xad\xbf\xb2\xa2N\xb8\xe6\x89'
        var_0 = tracer_0.__enter__()
        var_1 = tracer_0.__exit__(bool_0, bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 2145.965020453168
        int_0 = -886
        file_writer_0 = module_0.FileWriter(float_0, int_0)
        str_0 = '\x0cjm0X?'
        tracer_0 = module_0.Tracer(str_0)
        var_0 = tracer_0.__enter__()
        float_1 = 352.486293
        tuple_0 = (str_0,)
        tracer_1 = module_0.Tracer(tracer_0, float_1, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'call'
        set_0 = None
        float_0 = 474.444565
        int_0 = 239
        tuple_0 = (int_0, set_0)
        dict_0 = {str_0: float_0, str_0: tuple_0}
        tracer_0 = module_0.Tracer(set_0, dict_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\nGCqq^y7@*K4'
        tracer_0 = module_0.Tracer(str_0)
        tracer_1 = module_0.Tracer()
        var_0 = tracer_1.__enter__()
        bool_0 = True
        var_1 = tracer_0.__call__(bool_0)
    except BaseException:
        pass