# Automatically generated by Pynguin.
import docstring_parser.google as module_0
import docstring_parser.common as module_1

def test_case_0():
    try:
        str_0 = '    Short description.\n\n    More detailed description.\n\n    Args:\n      arg1: First arg.\n      arg2: Second arg. Defaults to None.\n    Kwargs:\n      kwarg1: First kwarg.\n      kwarg2: Second kwarg. Defaults to True.\n    Returns:\n      The return value.\n\n    Raises:\n      Exception1: If something happens.\n      Exception2: If something else happens.\n\n    '
        docstring_0 = module_0.parse(str_0)
        dict_0 = {docstring_0: docstring_0, str_0: docstring_0, str_0: docstring_0}
        google_parser_0 = module_0.GoogleParser(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        section_type_0 = module_0.SectionType.SINGULAR
        bool_0 = False
        google_parser_0 = module_0.GoogleParser(section_type_0, bool_0)
        google_parser_1 = module_0.GoogleParser(google_parser_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Test Google-style docstring.\n\nArgs:\n    node_id:\n        A NodeId identifier.\n    namespace_idx:\n        Namespace index for the NodeId.\n    integer_id:\n    W   Integer identifier for the NodeId.\n    string_id:\n        String identifier for the NodeId.\n    byte_string_id:\n  =     Opaque byte string identifier for the NodeId.\n    guid_id:\n        GUID identifier for the NodeId.\n    integer_id:\n        Integer identifier for the NodeId.\n\nReturns:\n    Boolean indicator if the NodeId is valid.\n\nRaises:\n    ValueError:\n        If the NodeId is not valid.\n\n'
        docstring_0 = module_0.parse(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        docstring_0 = module_0.parse(str_0)
        docstring_1 = module_1.Docstring()
        str_1 = 'no title\nand long description'
        docstring_2 = module_0.parse(str_1)
        str_2 = 'no title'
        bool_0 = True
        bool_1 = False
        str_3 = 'and long description'
        docstring_3 = module_1.Docstring()
        str_4 = '\nno title\nand long description\n'
        docstring_4 = module_0.parse(str_4)
        docstring_5 = module_1.Docstring()
        str_5 = 'Arguments:\n  foo: bar\n'
        docstring_6 = module_0.parse(str_5)
    except BaseException:
        pass