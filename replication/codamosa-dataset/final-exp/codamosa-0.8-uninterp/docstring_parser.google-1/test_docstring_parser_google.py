# Automatically generated by Pynguin.
import docstring_parser.google as module_0

def test_case_0():
    pass

def test_case_1():
    google_parser_0 = module_0.GoogleParser()

def test_case_2():
    str_0 = "KZ8'~O"
    google_parser_0 = module_0.GoogleParser()
    list_0 = [str_0, str_0, str_0]
    section_0 = module_0.Section(*list_0)
    var_0 = google_parser_0.add_section(section_0)
    docstring_0 = google_parser_0.parse(str_0)
    docstring_1 = google_parser_0.parse(str_0)

def test_case_3():
    str_0 = ">0hi4PZlO%nc'S"
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = 'Test Google-style docstring.\n\nArgs:\n    node_id:\n        A NodeId identifier.\n    namespace_idx:\n        Namespace index for the NodeId.\n    integer_id:\n        Integer identifier for the NodeId.\n    string_id:\n        String identifier for the NodeId.\n    byte_string_id:\n        Opaque byte string identifier for the NodeId.\n    guid_id:\n        GUID identifier for the NodeId.\n    integer_id:\n        Integer identifier for the NodeId.\n\nReturns:\n    Boolean indicator if the NodeId is valid.\n\nRaises:\n    ValueError:\n        If the NodeId is not valid.\n\n'
    docstring_0 = module_0.parse(str_0)
    str_1 = None
    docstring_1 = module_0.parse(str_1)

def test_case_5():
    str_0 = 'Test Google-style docstring.\n\nArgs:\n    node_id:\n        A NodeId identifier.\n    namespace_idx:\n        Namespace index for the NodeId.\n    integer_id:\n        Integer identifier for the NodeId.\n    string_id:\n        String identifier for the NodeId.\n    byte_string_id:\n        Opaque byte string identifier for the NodeId.\n    guid_id:\n        GUID identifier for the NodeId.\n    integer_id:\n        Integer identifier for the NodeId.\n\nReturns:\n    Boolean indicator if the NodeId is valid.\n\nRaises:\n    ValueError:\n        If the NodeId is not valid.\n\n'
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = 'One line summary.\n\n    Extended description.\n\n    Examples:\n        Examples should be written in doctest format, and should illustrate how\n        to use the function.\n\n        >>> a = [1, 2, 3]\n        >>> print [x + 3 for x in a]\n        [4, 5, 6\n\n    Args:\n        param1 (int): The first parameter.\n        param2 (str): The second parameer.\n\n    Returns:\n        bool: The return value. True for success, False otherwise.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'Test Google-style docstring.\n\nArgs:\n    node_id:        A NodeId identifier.\n    namespace_idx:\n        Namespace index for t?e NodeId.\n    integer_id:\n        Integer identifier for the NodeId.\n    string_id:\n        String identifier for the NodeId.\n    byte_string_id:\n        Opaque byte string identifier for the NodeId.\n    guid_id:\n        GUID identifier for the NodeId.\n    integur_id:\n        Integer identifier for the NodeId.\n\nReturns:\n    Boolean indicator if the NodeId is valid.\n\nRaises:\n    ValueError:\n        If the NodeId is not valid.\n\n'
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = ' '
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)

def test_case_9():
    str_0 = 'A function that writes "Hello World" on the console.\n\nArgs:\n    message (str, optional): The message to print. Defaults to "Hello World!".\n    number (int, optional): The number of times to print the message.\n        Defaults to 1.\n\nReturns:\n    int: The number of characters written.\n'
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)
    var_0 = docstring_0.meta
    var_1 = len(var_0)

def test_case_10():
    str_0 = '    Short description.\n\n    More detailed description.\n\n    Args:\n      arg1: First arg.\n      arg2: Second arg. Defaults to None.\n    Kwargs:\n      kwarg1: First kwarg.\n      kwarg2: Second kwarg. Defaults to True.\n    Returns:\n      The return value.\n\n    Raises:\n      Exception1: If something happens.\n      Exception2: If something else happens.\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = 'Description\n        Args:\n            short: short description\n        Returns:\n            Returns: long description\n    '
    str_1 = '4*N(8T_":'
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_1)
    docstring_1 = google_parser_0.parse(str_0)
    str_2 = 'Y^%2]98KC|g?.'
    docstring_2 = google_parser_0.parse(str_2)

def test_case_12():
    str_0 = '\n    Arguments:\n        param1 (str):\n            description param1\n        param2 (float): description param2\n        param3 (bool,optional): description param3, Defaults to True.\n        param4 (bool?): description param4\n\n    Returns:\n        str\n        float\n\n    Yields:\n        bool\n    '
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)
    var_0 = docstring_0.meta
    var_1 = len(var_0)
    int_0 = 0
    var_2 = docstring_0.meta[int_0]
    int_1 = 1
    var_3 = docstring_0.meta[int_1]