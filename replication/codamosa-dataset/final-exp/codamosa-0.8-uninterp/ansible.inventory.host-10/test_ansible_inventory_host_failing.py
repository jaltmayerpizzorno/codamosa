# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        host_0 = module_0.Host()
        list_0 = [host_0]
        int_0 = 1593
        float_0 = 3259.6871484720546
        tuple_0 = (list_0, int_0, float_0)
        var_0 = host_0.remove_group(tuple_0)
        var_1 = host_0.serialize()
        var_2 = host_0.get_name()
        var_3 = host_0.populate_ancestors()
        var_4 = host_0.__setstate__(host_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        float_0 = None
        host_0 = module_0.Host()
        str_0 = '`h2`2'
        var_0 = host_0.set_variable(str_0, tuple_0)
        var_1 = host_0.__eq__(float_0)
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
        host_1 = module_0.Host()
        var_2 = host_1.populate_ancestors(dict_0)
        bool_0 = True
        var_3 = host_1.remove_group(bool_0)
        host_2 = module_0.Host(dict_0)
        var_4 = host_2.remove_group(tuple_0)
        host_3 = module_0.Host()
        var_5 = host_3.get_name()
        bool_1 = True
        var_6 = host_3.__eq__(bool_1)
        var_7 = host_2.get_name()
        var_8 = host_0.__eq__(host_3)
        var_9 = host_2.__setstate__(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'K\n.Hu;$pE\tw^a\x0c6'
        host_0 = module_0.Host(str_0)
        var_0 = host_0.__hash__()
        int_0 = -1122
        host_1 = module_0.Host(int_0)
        tuple_0 = None
        str_1 = 'C'
        host_2 = module_0.Host(tuple_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__getstate__()
        str_0 = 'become_ask_pass'
        host_1 = module_0.Host(str_0)
        var_1 = host_1.serialize()
        var_2 = host_1.__getstate__()
        set_0 = set()
        var_3 = host_0.deserialize(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ']k o.'
        str_1 = '\n    name: memory\n    short_description: RAM backed, non persistent\n    description:\n        - RAM backed cache that is not persistent.\n        - This is the default used if no other plugin is specified.\n        - There are no options to configure.\n    version_added: historical\n    author: core team (@ansible-core)\n'
        host_0 = module_0.Host(str_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        float_0 = None
        host_0 = module_0.Host()
        str_0 = '`h2`2'
        var_0 = host_0.set_variable(str_0, tuple_0)
        var_1 = host_0.__eq__(float_0)
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
        host_1 = module_0.Host()
        var_2 = host_1.populate_ancestors(dict_0)
        host_2 = module_0.Host(dict_0)
        var_3 = host_2.remove_group(tuple_0)
        host_3 = module_0.Host()
        var_4 = host_3.get_name()
        bool_0 = True
        var_5 = host_3.__eq__(bool_0)
        var_6 = host_2.get_name()
        var_7 = host_2.__setstate__(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'test_host'
        host_0 = module_0.Host(str_0)
        list_0 = []
        var_0 = host_0.remove_group(list_0)
        str_1 = '\rGar'
        var_1 = host_0.set_variable(str_1, str_1)
        var_2 = host_0.set_variable(str_0, str_0)
        var_3 = host_0.add_group(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 520
        bytes_0 = b'\xe3\xa1\xb5\xbeo|y'
        int_1 = 1529
        host_0 = module_0.Host(int_0, int_1)
        var_0 = host_0.__eq__(bytes_0)
        host_1 = module_0.Host()
        var_1 = host_1.get_vars()
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        host_0 = module_0.Host(bool_0)
        host_1 = module_0.Host(host_0)
        var_0 = host_1.__hash__()
        host_2 = module_0.Host()
        var_1 = host_2.get_groups()
        bool_1 = True
        dict_0 = {bool_1: bool_1}
        str_0 = "j`MBJ]`KOcW)nE 'Foj"
        str_1 = 'u'
        var_2 = host_2.__setstate__(dict_0)
        host_3 = module_0.Host(str_1)
        var_3 = host_3.populate_ancestors(str_0)
        var_4 = host_2.get_name()
        str_2 = 'H\x0c'
        host_4 = module_0.Host(str_2)
        var_5 = host_4.remove_group(dict_0)
        int_0 = None
        var_6 = host_2.deserialize(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        group_0 = module_1.Group()
        group_1 = module_1.Group()
        host_0 = module_0.Host()
        var_0 = host_0.add_group(group_1)
        var_1 = host_0.get_groups()
        var_2 = group_1 in var_1
        var_3 = host_0.get_groups()
        var_4 = len(var_3)
        var_5 = host_0.populate_ancestors()
        var_6 = host_0.get_groups()
        var_7 = len(var_6)
        int_0 = 2
        var_8 = var_7 == int_0
        var_9 = group_0 in var_7
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Wtr7s}:6 /W=gF[]f'
        str_1 = None
        group_0 = module_1.Group(str_1)
        group_1 = module_1.Group(str_0)
        str_2 = 'all'
        group_2 = module_1.Group(str_2)
        var_0 = group_2.add_child_group(group_0)
        var_1 = group_2.add_child_group(group_1)
        var_2 = group_2.add_child_group(group_1)
        str_3 = 'q{lk\rS%TF#\thN'
        host_0 = module_0.Host(str_3)
        var_3 = host_0.add_group(group_0)
        var_4 = host_0.groups
        var_5 = [g.name for g in var_4]
        var_6 = host_0.get_magic_vars()
        complex_0 = None
        var_7 = group_2.deserialize(complex_0)
    except BaseException:
        pass