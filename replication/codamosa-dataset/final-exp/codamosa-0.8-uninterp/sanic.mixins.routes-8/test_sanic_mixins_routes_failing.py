# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0
import pathlib as module_1

def test_case_0():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        int_0 = -1023
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '/uri'
        var_0 = route_mixin_0.add_route(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        pure_path_0 = module_1.PurePath()
        str_0 = '`yx}Jl{A '
        str_1 = 'e\r|N}I+dS&7p'
        tuple_0 = (pure_path_0, str_1)
        int_0 = -1812
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(tuple_0, str_1, int_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '/uri'
        str_1 = '\n        Provide a default behavior for the objects of :class:`ErrorHandler`.\n        If a developer chooses to extent the :class:`ErrorHandler` they can\n        provide a custom implementation for this method to behave in a way\n        they see fit.\n\n        :param request: Incoming request\n        :param exception: Exception object\n\n        :type request: :class:`sanic.request.Request`\n        :type exception: :class:`sanic.exceptions.SanicException` or\n            :class:`Exception`\n        :return:\n        '
        str_2 = ''
        none_type_0 = None
        var_0 = route_mixin_0.websocket(str_0, str_0, none_type_0)
        dict_0 = {}
        bool_0 = True
        var_1 = route_mixin_0.add_route(str_1, str_2, dict_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = 'q?T'
        bool_0 = True
        str_1 = None
        str_2 = ''
        str_3 = "\tk\\h=+_U(OL@p977'"
        var_0 = route_mixin_0.patch(str_0, str_3)
        bool_1 = False
        var_1 = route_mixin_0.route(str_2, str_1, bool_1)
        var_2 = route_mixin_0.add_websocket_route(bool_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 15.0
        str_0 = 'EH i'
        bool_0 = True
        set_0 = set()
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.static(float_0, str_0, bool_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "'\nPF>k"
        bool_0 = True
        route_mixin_0 = module_0.RouteMixin()
        str_1 = ''
        var_0 = route_mixin_0.delete(str_1, bool_0, str_1)
        route_mixin_1 = module_0.RouteMixin()
        str_2 = None
        route_mixin_2 = module_0.RouteMixin()
        bool_1 = False
        var_1 = route_mixin_1.route(str_0, bool_0, str_2, bool_0, bool_1)
        pure_path_0 = module_1.PurePath()
        str_3 = 'QR-1tLW'
        var_2 = route_mixin_0.static(route_mixin_0, str_2, pure_path_0, str_3)
    except BaseException:
        pass

def test_case_7():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '}+$ur'
        var_0 = route_mixin_0.add_route(route_mixin_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        str_0 = 'SB@T1$l+9'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(bool_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'KlWkmSA%H2mO9{A'
        bool_0 = False
        list_0 = [str_0, str_0, bool_0]
        route_mixin_0 = module_0.RouteMixin(*list_0)
        var_0 = route_mixin_0.get(str_0)
        str_1 = '2"YW'
        var_1 = route_mixin_0.websocket(str_1, bool_0)
        str_2 = 'KRmU:U3e8$\ne'
        str_3 = '\n    Container used for both request and response headers. It is a subclass of\n    `CIMultiDict\n    <https://multidict.readthedocs.io/en/stable/multidict.html#cimultidictproxy>`_.\n\n    It allows for multiple values for a single key in keeping with the HTTP\n    spec. Also, all keys are *case in-sensitive*.\n\n    Please checkout `the MultiDict documentation\n    <https://multidict.readthedocs.io/en/stable/multidict.html#multidict>`_\n    for more details about how to use the object. In general, it should work\n    very similar to a regular dictionary.\n    '
        bytes_0 = None
        int_0 = 3222
        str_4 = 'QU)q<V!w$-SB0z6}'
        var_2 = route_mixin_0.options(str_0)
        bool_1 = True
        bool_2 = False
        bool_3 = True
        var_3 = route_mixin_0.route(str_4, bool_0, int_0, bool_1, bool_2, bool_3)
        var_4 = route_mixin_0.add_websocket_route(str_2, str_3, bytes_0, int_0, str_3)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'lv\x91\x8e\xa2\x81>'
        str_0 = None
        iterable_0 = None
        int_0 = 400
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(bytes_0, str_0, iterable_0, str_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        route_mixin_0 = module_0.RouteMixin()
        pure_path_0 = module_1.PurePath()
        set_0 = None
        int_0 = None
        bytes_0 = b'\x82v\xc6\x01m\x04]\xf0'
        tuple_0 = (int_0, bytes_0)
        var_0 = route_mixin_0.static(route_mixin_0, pure_path_0, set_0, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = 'l'
        int_0 = -5
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '.CU\x0b0q8I+1F'
        bool_0 = False
        str_1 = 'connections'
        dict_0 = {str_1: str_0, str_0: str_1}
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_1, str_0, dict_0, bool_0)
    except BaseException:
        pass