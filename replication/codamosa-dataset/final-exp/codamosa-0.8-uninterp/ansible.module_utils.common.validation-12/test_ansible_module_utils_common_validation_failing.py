# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        str_0 = '{"foo": \n8&ar"}'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\x0cPqs[h60\\>\\A6V6'
        float_0 = None
        bytes_0 = b'\x01\xf4\xa60R[q\x04q\xc9\x8a\xed7\xa3\xb2\x10\xe7\x18\xa0\xb3'
        list_0 = [bytes_0, str_0, float_0]
        var_0 = module_0.check_required_one_of(list_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -3903.8
        float_1 = -356.9
        bytes_0 = b''
        bytes_1 = None
        str_0 = ',E\nMogSOj'
        bytes_2 = b'\xb4I\xe9\x96+\x1c\xb2\x7f\x86\xa3\xab\x92\x8a\xf4'
        var_0 = module_0.check_required_one_of(bytes_1, str_0, bytes_2)
        tuple_0 = (float_1, bytes_0)
        tuple_1 = (float_0, tuple_0)
        var_1 = module_0.check_type_int(tuple_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'role_complete'
        dict_0 = {str_0: str_0}
        var_0 = module_0.safe_eval(dict_0, str_0)
        float_0 = None
        bytes_0 = b'\x01\xf4\xa60R[q\x04q\xc9\x8a\xed7\xa3\xb2\x10\xe7\x18\xa0\xb3'
        var_1 = module_0.check_required_together(float_0, bytes_0)
        list_0 = [var_1, str_0, float_0]
        var_2 = module_0.check_type_path(dict_0)
        str_1 = 'Y_9\x0b.i\nui%4('
        var_3 = module_0.check_required_one_of(list_0, str_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        var_0 = module_0.check_required_together(bool_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 825.3
        tuple_0 = ()
        var_0 = module_0.check_required_by(float_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '88'
        var_0 = module_0.safe_eval(str_0)
        tuple_0 = None
        dict_0 = {var_0: var_0, tuple_0: var_0, str_0: var_0}
        list_0 = [tuple_0, tuple_0, tuple_0, dict_0]
        var_1 = module_0.check_required_by(dict_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '.Lj\tE&%'
        var_0 = module_0.check_required_arguments(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'H}'
        bytes_0 = b'\xc3\xf3\x1a"\x0e\xce\xc3\x80H\x06X?*_Y?'
        var_0 = module_0.check_required_if(str_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'DAj^NSU '
        bytes_0 = b'\xa6\xc1\xbbaU_~\xf6\x8a\xdf\x97\xb0uc\x141\x9a'
        var_0 = module_0.check_missing_parameters(str_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xe0j\x14\xb7J\x00\xa9'
        var_0 = module_0.check_type_path(bytes_0)
        int_0 = -2240
        set_0 = None
        var_1 = module_0.check_required_if(int_0, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 248
        int_1 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_1: int_0}
        str_0 = 'g1uIq|'
        var_0 = module_0.check_required_arguments(int_1, dict_0, str_0)
        list_0 = []
        bytes_0 = b''
        str_1 = '0Q/.l'
        str_2 = 'O6%JW_Mk]EAqKE\\(_GBG'
        var_1 = module_0.safe_eval(str_1, str_2)
        var_2 = module_0.check_type_str(list_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 35.039
        bool_0 = True
        list_0 = [float_0, float_0, bool_0, bool_0]
        var_0 = module_0.check_type_list(list_0)
        str_0 = '#p(^$'
        complex_0 = None
        tuple_0 = (str_0, complex_0)
        str_1 = None
        var_1 = module_0.check_required_one_of(tuple_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b',\xc2\xaeK\xc9E\xe1\xc1\xd7\tuX\xeb\xc4]\x87\x17'
        var_0 = module_0.check_type_list(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 250
        var_0 = module_0.check_type_dict(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = None
        var_0 = module_0.check_type_bool(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '6^7=+_'
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'SSfq='
        var_0 = module_0.check_type_float(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\xd6\xcf'
        var_0 = module_0.check_type_bytes(bytes_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'H\xc9\xab\xb3\xa0\xdd\x83\x1d\x12X\xdeRxg\xf3\x8aAA\x11'
        var_0 = module_0.check_type_bits(bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = None
        var_0 = module_0.check_type_jsonarg(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = 746.2638
        var_0 = module_0.check_type_float(float_0)
        str_0 = 'r'
        set_0 = None
        tuple_0 = (str_0, set_0, float_0)
        var_1 = module_0.check_required_one_of(tuple_0, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'\x00\xf6X7#\xfb\x18\x84L\x7f\x9b'
        var_0 = module_0.count_terms(bytes_0, bytes_0)
        str_0 = 'tC\x0bnc'
        var_1 = module_0.check_type_path(str_0)
        str_1 = ' -o Stric\x0cHostKeyChecking=accept-new'
        str_2 = '?UBa\\arZ!\nDk2'
        var_2 = module_0.check_required_one_of(str_1, str_2)
    except BaseException:
        pass

def test_case_23():
    try:
        dict_0 = {}
        var_0 = module_0.check_type_int(dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = "Id'=Z+2i"
        var_0 = module_0.check_type_dict(str_0)
        bool_0 = None
        var_1 = module_0.check_type_float(bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 248
        int_1 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_1: int_0}
        str_0 = 'g1uIq|'
        var_0 = module_0.check_required_arguments(int_1, dict_0, str_0)
        var_1 = module_0.check_type_dict(int_1)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '>1Tj?c`w~i5,;K\t8;0'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '{"foo": \n8&ar"}'
        set_0 = {str_0, str_0}
        var_0 = module_0.safe_eval(set_0, set_0, str_0)
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'c& cA8DP2u$*=L#"h '
        set_0 = None
        float_0 = 1560.0
        var_0 = module_0.check_required_together(set_0, float_0)
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = b'\x1a\x7f\xb6\xcf\xb8\x9d\xccE\xd4\x95K:\xd9'
        float_0 = None
        dict_0 = {bytes_0: bytes_0, bytes_0: float_0, bytes_0: float_0}
        dict_1 = {float_0: dict_0, float_0: bytes_0}
        set_0 = set()
        var_0 = module_0.check_required_if(float_0, dict_1, set_0)
        str_0 = 'ay'
        var_1 = module_0.check_required_by(bytes_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = -2550
        var_0 = module_0.check_type_bool(int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = None
        bytes_0 = b'\x00\xce\xe3l'
        var_0 = module_0.check_required_by(str_0, bytes_0)
        set_0 = set()
        var_1 = module_0.check_type_bytes(set_0)
    except BaseException:
        pass

def test_case_32():
    try:
        float_0 = -356.9
        bytes_0 = b''
        str_0 = ',E\nMogSOj'
        var_0 = module_0.check_required_one_of(bytes_0, str_0, bytes_0)
        tuple_0 = (float_0, bytes_0)
        tuple_1 = (float_0, tuple_0)
        var_1 = module_0.check_type_int(tuple_1)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'LoadState=not-found'
        var_0 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'boolean'
        var_0 = module_0.safe_eval(str_0)
        dict_0 = {str_0: str_0, var_0: str_0}
        dict_1 = {var_0: dict_0, str_0: str_0}
        bytes_0 = b'\xe9\x08=\xdb\xe4'
        var_1 = module_0.check_required_arguments(dict_1, bytes_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '"A,vu\x0c}t0l{UZ@.kcgUu'
        int_0 = -1146
        var_0 = module_0.check_type_list(int_0)
        var_1 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = "t(!='W@\x0bOkY\r'&6q8"
        var_0 = module_0.check_type_dict(str_0)
        list_0 = []
        var_1 = module_0.check_type_dict(list_0)
    except BaseException:
        pass

def test_case_37():
    try:
        bool_0 = False
        var_0 = module_0.check_type_bool(bool_0)
        str_0 = "gB4wAUv0-i\x0bP'"
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'server'
        str_1 = 'password'
        str_2 = [str_0, str_1]
        str_3 = '192.168.1.1'
        str_4 = '123456'
        str_5 = {str_0: str_3, str_1: str_4}
        var_0 = module_0.check_missing_parameters(str_5, str_2)
        var_1 = None
        var_2 = {str_0: str_3, str_1: var_1}
        var_3 = module_0.check_missing_parameters(var_2, str_2)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = '48'
        dict_0 = {}
        bytes_0 = b'\x8a\xf3\x07\xf3\x10?\xc8\xbd\x13\xe6'
        set_0 = {str_0, bytes_0, str_0}
        int_0 = 1106
        var_0 = module_0.check_required_arguments(dict_0, set_0, int_0)
        var_1 = module_0.check_type_dict(int_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'c& cA8DP2u=*=L#"h '
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = '.Lj\tE&%'
        set_0 = {str_0}
        str_1 = '\tVm.!#|N(L1~U'
        var_0 = module_0.check_required_together(set_0, str_1)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'P'
        str_1 = 'baz'
        str_2 = 'quuz'
        str_3 = 'b)r'
        str_4 = 'quux'
        str_5 = [str_2, str_0, str_4]
        str_6 = {str_0: str_3, str_1: str_4, str_2: str_5}
        bool_0 = False
        bool_1 = {str_0: bool_0, str_3: bool_0, str_1: bool_0, str_3: bool_0, str_2: bool_0}
        var_0 = module_0.check_required_by(str_6, bool_1)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = [str_0, str_1, str_1]
        str_4 = [str_3]
        str_5 = {str_0: str_1, str_2: str_2, str_2: str_2}
        var_0 = module_0.check_required_if(str_4, str_5)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'c'
        str_1 = [str_0, str_0, str_0]
        str_2 = [str_1]
        var_0 = module_0.check_required_if(str_2, str_2)
        var_1 = module_0.check_type_int(str_1)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'b'
        str_1 = [str_0, str_0, str_0]
        str_2 = [str_1]
        var_0 = module_0.check_required_if(str_2, str_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = 'd'
        str_4 = [str_2, str_3]
        str_5 = [str_0, str_1, str_4]
        str_6 = [str_5]
        str_7 = {str_0: str_3, str_2: str_2, str_1: str_3}
        var_0 = module_0.check_required_if(str_6, str_7)
        var_1 = module_0.check_type_bytes(str_6)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'x'
        str_1 = 'required'
        bool_0 = True
        int_0 = 0
        str_2 = 'y'
        bool_1 = {str_1: bool_0}
        bool_2 = {str_0: bool_1, str_2: bool_1}
        int_1 = {str_2: int_0}
        var_0 = module_0.check_required_arguments(bool_2, int_1)
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = 4
        int_4 = 5
        int_5 = 6
        var_0 = None
        var_1 = dict(a=int_0, b=int_1, c=int_2, d=int_3, e=int_4, f=int_5, g=var_0, h=var_0)
        str_0 = 'f'
        str_1 = 'g'
        str_2 = [str_0, str_1]
        str_3 = 'h'
        str_4 = [str_3]
        str_5 = 'i'
        str_6 = [str_5]
        var_2 = dict(a=str_2, b=str_4, c=str_6)
        var_3 = module_0.check_required_by(var_2, var_1)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = 'foo'
        str_1 = 'required'
        bool_0 = False
        bool_1 = {str_1: bool_0}
        bool_2 = {str_0: bool_1}
        str_2 = 'bar'
        str_3 = {str_0: str_2}
        var_0 = module_0.check_required_arguments(bool_2, str_3)
        str_4 = 'fo1'
        str_5 = 'required'
        bool_3 = True
        bool_4 = {str_5: bool_3}
        bool_5 = {str_4: bool_4}
        str_6 = 'bar'
        str_7 = {str_6: str_4}
        var_1 = module_0.check_required_arguments(bool_5, str_7)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = 'c'
        str_1 = [str_0, str_0, str_0, str_0]
        str_2 = [str_1]
        var_0 = module_0.check_required_if(str_2, str_2)
        str_3 = '"A,vu\x0c}t0l9UZ@.kcgUu'
        var_1 = module_0.check_type_int(str_3)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = "'5'"
        var_0 = module_0.safe_eval(str_0)
        str_1 = '5]'
        var_1 = module_0.safe_eval(str_1)
        var_2 = module_0.safe_eval(str_0, var_1, str_0)
        str_2 = 'b'
        var_3 = dict(a=str_2)
        var_4 = module_0.safe_eval(str_0)
        bytes_0 = b'|={a\x17\x18Vp\x9aj\x80\xc3\xcb'
        var_5 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = [str_0, str_1]
        str_3 = [str_2]
        var_0 = module_0.check_mutually_exclusive(str_3, str_2)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = 'Wpo\tD '
        var_0 = module_0.safe_eval(str_0)
        str_1 = '{"a": {"b": "c"}}'
        bytes_0 = b'\x0c\xaa\x05o\xa7\xba'
        list_0 = [str_0]
        var_1 = module_0.check_mutually_exclusive(bytes_0, list_0)
        var_2 = module_0.safe_eval(str_1)
        bool_0 = True
        str_2 = 'import os'
        var_3 = module_0.safe_eval(str_2, bool_0)
        str_3 = 'os.path.join(a, b)'
        bytes_1 = b'|\n\x9cV\xa21N\x19@\xd0\xe4z\xb9\x87'
        dict_0 = {str_2: bytes_1, bytes_1: bool_0, str_1: str_1}
        str_4 = 'x>HziGQ_>53D'
        var_4 = module_0.check_required_together(dict_0, str_3, str_4)
    except BaseException:
        pass