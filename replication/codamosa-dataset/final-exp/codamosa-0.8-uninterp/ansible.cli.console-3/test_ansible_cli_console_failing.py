# Automatically generated by Pynguin.
import ansible.cli.console as module_0

def test_case_0():
    try:
        float_0 = -1316.647826
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.get_names()
        bool_0 = True
        bool_1 = True
        var_1 = console_c_l_i_0.completedefault(console_c_l_i_0, console_c_l_i_0, bool_0, bool_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Error accessing repos: %s'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.default(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2567.3
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.emptyline()
        str_0 = 'p;kNryRt\\'
        var_1 = console_c_l_i_0.do_forks(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '_We9YBD$U1n2hIW\n\tX'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_shell(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ')?'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        console_c_l_i_1 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_cd(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'setup'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        bytes_0 = b'\xff\xf1U2\x1d\xa0\x18\x86\x83\xe3\xca\xc3\xdeE\xa5\x93\x14&\x9d'
        var_0 = console_c_l_i_0.do_list(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ')?'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.run()
        var_1 = console_c_l_i_0.do_remote_user(console_c_l_i_0)
        list_0 = [str_0, var_0]
        var_2 = console_c_l_i_0.do_become(console_c_l_i_0)
        var_3 = console_c_l_i_0.do_diff(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'groups'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        str_1 = 'yg*~.HXd#k_AR?{raF2g'
        var_0 = console_c_l_i_0.do_remote_user(str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b"\xf7QF\x84U\xf6+n\xf8t'H\x98\x0c~\xe2\xb4"
        str_0 = '.{.O'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        var_0 = console_c_l_i_1.do_become_user(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -1571
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        set_0 = set()
        var_0 = console_c_l_i_0.do_check(set_0)
        var_1 = console_c_l_i_0.do_remote_user(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 3897.8111
        dict_0 = {float_0: float_0, float_0: float_0}
        int_0 = 2317
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_check(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ')?'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.run()
        var_1 = console_c_l_i_0.do_remote_user(console_c_l_i_0)
        list_0 = [str_0, var_0]
        var_2 = console_c_l_i_0.do_diff(list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'sr-\rej)oU`Nm&gZ+d'
        str_1 = 'Hts$)O.x.c\\'
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_0.list_modules()
        str_2 = 'F\nTS\rFMQ`'
        bytes_0 = b'\x0f\xba\x0b\xdb\x19\xb3'
        bool_0 = None
        console_c_l_i_1 = module_0.ConsoleCLI(str_0)
        int_0 = 151
        var_1 = console_c_l_i_1.do_diff(int_0)
        console_c_l_i_2 = module_0.ConsoleCLI(console_c_l_i_1)
        var_2 = console_c_l_i_2.complete_cd(str_2, str_0, bytes_0, bool_0)
        console_c_l_i_3 = module_0.ConsoleCLI(str_0)
        var_3 = console_c_l_i_3.do_shell(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xcf\x15\x9c\x12\x84t'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.emptyline()
        bool_0 = False
        var_1 = console_c_l_i_0.do_timeout(bool_0)
        int_0 = 1698
        str_0 = '1|A0\r<jpdot1[o'
        bool_1 = False
        dict_0 = {bytes_0: int_0, str_0: str_0}
        console_c_l_i_1 = module_0.ConsoleCLI(dict_0)
        var_2 = console_c_l_i_1.do_cd(bool_1)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = None
        list_1 = [list_0]
        list_2 = [list_1]
        str_0 = 'v1/'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.helpdefault(list_2)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'ErrorIacesing reps: %s'
        dict_0 = {str_0: str_0, str_0: str_0}
        set_0 = {str_0, str_0}
        str_1 = 'O'
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_0.complete_cd(dict_0, str_0, str_0, set_0)
        console_c_l_i_1 = module_0.ConsoleCLI(str_0)
        var_1 = console_c_l_i_1.default(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\nansible_facts:\n  description: Facts to add to ansible_facts.\n  returned: always\n  type: dict\n  contains:\n    getent_<database>:\n      description:\n        - A list of results or a single result as a list of the fields the db provides\n        - The list elements depend on the database queried, see getent man page for the structure\n        - Starting at 2.11 it now returns multiple duplicate entries, previouslly it only returned the last one\n      returned: always\n      type: list\n'
        dict_0 = {str_0: str_0}
        str_1 = 'zuNR`'
        str_2 = ' MhJ^|d7MN_'
        tuple_0 = (dict_0, str_2)
        list_0 = None
        set_0 = None
        set_1 = {set_0, set_0, set_0}
        console_c_l_i_0 = module_0.ConsoleCLI(set_1)
        var_0 = console_c_l_i_0.completedefault(dict_0, str_1, tuple_0, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ']"HfpTDY'
        str_1 = '\tt%uZZEJ"%DmXYQne2}\t'
        str_2 = ')?'
        console_c_l_i_0 = module_0.ConsoleCLI(str_2)
        var_0 = console_c_l_i_0.run()
        console_c_l_i_1 = module_0.ConsoleCLI(str_1)
        var_1 = console_c_l_i_1.module_args(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ')?'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.run()
        bool_0 = None
        float_0 = None
        var_1 = console_c_l_i_0.do_cd(float_0)
        var_2 = console_c_l_i_0.do_shell(bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = None
        str_1 = 'VMm%D!\n=|O-1-U\x0bX$I:'
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_0.do_become_user(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'\xce\xfe\x87\x9a\xc9\xc2\\\x12'
        str_0 = 'b'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_forks(bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = 376.0
        bool_0 = True
        int_0 = 4904
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        str_0 = "zzpqT'\\/NS;tl^\tF["
        tuple_0 = (bool_0, str_0)
        console_c_l_i_1 = module_0.ConsoleCLI(tuple_0)
        var_0 = console_c_l_i_1.do_verbosity(float_0)
        var_1 = console_c_l_i_1.init_parser()
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = "E8\x0b'^^0JX"
        dict_0 = {}
        list_0 = [str_0, str_0, str_0, str_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_forks(dict_0)
        bytes_0 = b'\x7f\x83\xe6c^\x86\x12|/\xe9\\e\x80M\xe1"'
        console_c_l_i_1 = module_0.ConsoleCLI(bytes_0)
        var_1 = console_c_l_i_1.do_shell(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 32601
        bytes_0 = b'\xcf\x15\x9c\x12\x84t'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.emptyline()
        bool_0 = True
        var_1 = console_c_l_i_0.do_timeout(bool_0)
        str_0 = '1|A0\r<jpdot1[o'
        dict_0 = {int_0: str_0}
        console_c_l_i_1 = module_0.ConsoleCLI(dict_0)
        bool_1 = False
        dict_1 = {bytes_0: int_0, str_0: str_0}
        console_c_l_i_2 = module_0.ConsoleCLI(dict_1)
        var_2 = console_c_l_i_2.do_cd(bool_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'sr-\rej)oU`Nm&gZ+d'
        str_1 = 'Hts$)O.x.c\\'
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_0.list_modules()
        str_2 = '.\x0bx&d\x0b'
        str_3 = ''
        bytes_0 = b'\x97\xe5\xa45!/p\x1c\xeb\x1e'
        str_4 = 'm\t%t)P"T<se'
        tuple_0 = (str_3, bytes_0, str_4)
        var_1 = console_c_l_i_0.do_verbosity(tuple_0)
        tuple_1 = (tuple_0, tuple_0)
        var_2 = console_c_l_i_0.do_timeout(tuple_1)
        bytes_1 = b'\x0f\x19\xb3'
        var_3 = console_c_l_i_0.cmdloop()
        bool_0 = None
        int_0 = None
        var_4 = console_c_l_i_0.do_become_method(int_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        var_5 = console_c_l_i_1.complete_cd(str_1, str_2, bytes_1, bool_0)
        var_6 = console_c_l_i_1.do_shell(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = 340.5318259231604
        int_0 = -5674
        str_0 = '5hr#'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        console_c_l_i_1 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_1.do_timeout(console_c_l_i_0)
        bytes_0 = b'DBn\x9b\x8c\x16\xeb\rTb\x9a\xd8\x14q\xe7\x93%['
        console_c_l_i_2 = module_0.ConsoleCLI(bytes_0)
        var_1 = console_c_l_i_0.get_names()
        var_2 = console_c_l_i_1.do_forks(float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = False
        set_0 = {bool_0}
        console_c_l_i_0 = module_0.ConsoleCLI(set_0)
        tuple_0 = ()
        str_0 = 'A8^bgMQ}J'
        console_c_l_i_1 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_1.do_become(tuple_0)
        int_0 = 2029
        tuple_1 = (int_0,)
        console_c_l_i_2 = module_0.ConsoleCLI(tuple_1)
        var_1 = console_c_l_i_2.do_shell(console_c_l_i_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = "Z(`=EApEI'Hy'lW4w"
        bytes_0 = b'\x7f\x83\xe6c^\x86\x12|/\xe9\\e\x80M\xe1"'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        set_0 = {str_0, str_0}
        console_c_l_i_1 = module_0.ConsoleCLI(set_0)
        var_0 = console_c_l_i_1.do_diff(console_c_l_i_0)
        float_0 = -1336.62
        var_1 = console_c_l_i_0.do_timeout(float_0)
        bool_0 = False
        console_c_l_i_2 = module_0.ConsoleCLI(bool_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ')?'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.run()
        bool_0 = None
        var_1 = console_c_l_i_0.do_shell(bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'sr-\rej)oU`Nm&gZ+d'
        list_0 = [str_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.run()
        str_1 = 'Hts$)O.x.c\\'
        console_c_l_i_1 = module_0.ConsoleCLI(str_1)
        str_2 = 'O$},\x0c>C+k'
        var_1 = console_c_l_i_0.do_list(str_2)
        var_2 = console_c_l_i_1.cmdloop()
        console_c_l_i_2 = module_0.ConsoleCLI(console_c_l_i_1)
        console_c_l_i_3 = module_0.ConsoleCLI(str_0)
        var_3 = console_c_l_i_3.do_shell(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '$W\\zE\r|%uxP%'
        list_0 = [str_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.run()
        console_c_l_i_1 = module_0.ConsoleCLI(str_0)
        str_1 = 'Z#7C`'
        int_0 = 1740
        var_1 = console_c_l_i_0.completedefault(console_c_l_i_0, str_1, int_0, str_1)
        str_2 = '.cn\x0bW&'
        bytes_0 = b'\x97\xe5\xa45!/p\x1c\xeb\x1e'
        str_3 = 'm\t6%t)P*"T<se'
        tuple_0 = (str_2, bytes_0, str_3)
        var_2 = console_c_l_i_0.do_list(str_2)
        var_3 = console_c_l_i_1.do_check(console_c_l_i_1)
        str_4 = '`'
        var_4 = console_c_l_i_0.do_cd(str_4)
        var_5 = console_c_l_i_1.do_verbosity(tuple_0)
        var_6 = console_c_l_i_1.do_timeout(tuple_0)
        float_0 = 1468.3747
        var_7 = console_c_l_i_1.do_become(float_0)
    except BaseException:
        pass