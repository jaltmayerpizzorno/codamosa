# Automatically generated by Pynguin.
import typesystem.tokenize.tokenize_json as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        bytes_0 = b'\xf2\xc1\xae{H\xf2\x89f\x85\xc3\x1b\xde\x8b\xec\xf7\x15\xf8\x01T'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xd99\x08\x10\xd7E?\xe1p'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xe5f\xf6o\xb5\xeb\xdbQ\x1a'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tokenizing_decoder_0 = module_0._TokenizingDecoder()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'K]_Dbq\tCQr7Hfy'
        field_0 = module_1.Field(description=str_0)
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x1eDg\x1a!\x9bH\xabW\x0f\xd7\xe3\x86'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '"'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xdf'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b't\x00\xd0\x91'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\n    {\n        "first": nfoo",\n        "second": [\n            1, 2, 3\n        ],\n        "thid": {\n            "child1"& tre,\n  |        "child2": false\n        }\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\n    {\n       "first": "foo",\n        "second": [\n            1, 2, 3\n        ],\n        "third": {\n            "child1": true,\n            "child2": false\n        }\n    }\n    '
        int_0 = 0
        any_0 = module_0.validate_json(str_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n    {\n        "first": "foo",\n        "second": [\n            , 2, 3\n        ],\n        "third": {\n            "child1": true,\n            "child2": false\n        }\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\n    {\n        "first": "foo",\n        "second": [\n            1, 2, 3\n        ],\n        "thid": {\n            "child1": true,\n   |        "child2": false\n        }\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\n    {\n        "first: "foo",\n        "second": [\n  v   M     1, 2, 3\n       a],\n        "third": {\n            "child1": true,\n            "child2": false\n        }\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '['
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\n    {\n        "first": "foo"E\n        "second": [\n            1, 2, 3\n        ],\n        "thid": {\n            "child1": true,\n  )|        "child2": false\n        }\n  $ }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\n    {\n        "first": "foo",\n        "second": [\n            1, 2, 3\n        ],\n        "thid": {\n            "child1": }rue,\n   |        "child2": false\n        }\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '\n    {\n        "#irst": "foo",\n        "second": \r\n            1, 2, 3\n       ],\n        "tid": {\np           "child1": true,\n   |        "child2":false\n        }\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\n    {\n        "bool": true,\n        "int": 1,\n        "float": 1.0,\n        "string": "value",\n        "list": [1, 2, 3],\n        "dict": {"value": 1}\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
        var_0 = token_0.value[str_0]
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '\n    {\n        "first": "foo",\n        "second": [\n          1,2, 3\n       ],\n        "thid"w {\n            "child1": true,\n   |        "child2": false\n        }\n    }\n    '
        str_1 = '1E0AO6,'
        str_2 = ':`FX_)X!VpqWRQ@'
        bool_0 = False
        field_0 = module_1.Field(title=str_0, description=str_2, allow_null=bool_0)
        any_0 = module_0.validate_json(str_1, field_0)
    except BaseException:
        pass