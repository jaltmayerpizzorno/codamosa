# Automatically generated by Pynguin.
import py_backwards.utils.tree as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        a_s_t_0 = None
        a_s_t_1 = module_0.get_parent(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_1():
    try:
        a_s_t_0 = module_1.AST()
        a_s_t_1 = module_0.get_parent(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_2():
    try:
        a_s_t_0 = module_1.AST()
        tuple_0 = module_0.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -473
        a_s_t_0 = module_1.AST()
        module_0.insert_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'a = 1 + 1'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.targets[int_0]
        a_s_t_0 = module_0.get_parent(var_0, var_2)
        tuple_0 = module_0.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
        var_3 = var_0.body[int_0]
        a_s_t_1 = module_0.get_parent(a_s_t_0, a_s_t_0)
        module_0.replace_at(int_0, a_s_t_1, a_s_t_1)
        bool_0 = False
        a_s_t_2 = module_0.get_parent(a_s_t_0, a_s_t_1, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        a_s_t_0 = module_1.AST()
        type_0 = None
        var_0 = module_0.get_closest_parent_of(a_s_t_0, a_s_t_0, type_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'a = 1 + 1'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.targets[int_0]
        a_s_t_0 = module_0.get_parent(var_0, var_2)
        tuple_0 = module_0.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
        var_3 = var_0.body[int_0]
        a_s_t_1 = module_0.get_parent(a_s_t_0, a_s_t_0)
        module_0.insert_at(int_0, a_s_t_1, a_s_t_0)
        tuple_1 = module_0.get_non_exp_parent_and_index(a_s_t_0, a_s_t_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -4084
        str_0 = '\rr%;-3&OQDj^JMbgB)8z'
        str_1 = 'URLError'
        str_2 = 'Vrd^o?'
        str_3 = 'reduce'
        dict_0 = {str_0: int_0, str_1: str_0, str_2: str_1, str_3: str_2}
        a_s_t_0 = module_1.AST(**dict_0)
        list_0 = []
        module_0.insert_at(int_0, a_s_t_0, list_0)
        a_s_t_1 = None
        a_s_t_2 = module_0.get_parent(a_s_t_1, a_s_t_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'a = 1 + 1'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.targets[int_0]
        a_s_t_0 = module_0.get_parent(var_0, var_2)
        var_3 = var_0.body[int_0]
        bool_0 = False
        a_s_t_1 = module_0.get_parent(a_s_t_0, a_s_t_0, bool_0)
        type_0 = None
        var_4 = module_0.get_closest_parent_of(a_s_t_0, a_s_t_0, type_0)
    except BaseException:
        pass