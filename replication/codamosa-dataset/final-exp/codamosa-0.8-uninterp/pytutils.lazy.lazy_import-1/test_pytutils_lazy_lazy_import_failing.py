# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = '__unicode__ of IllegalUseOfScopeReplacer'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_1():
    try:
        import_processor_0 = module_0.ImportProcessor()
        tuple_0 = (import_processor_0,)
        float_0 = -513.581
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, tuple_0, float_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -984.13709
        set_0 = {float_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, set_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "qWC3*E!t'm"
        dict_0 = {str_0: str_0, str_0: str_0}
        import_processor_0 = None
        import_replacer_0 = module_0.ImportReplacer(dict_0, import_processor_0, str_0)
        var_0 = module_0.lazy_import(dict_0, import_replacer_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        import_processor_0 = module_0.ImportProcessor()
        float_0 = -2207.1082
        bytes_0 = b'\xa9\xf6?='
        dict_0 = {tuple_0: bytes_0, import_processor_0: tuple_0}
        set_0 = {import_processor_0}
        int_0 = 1526
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(int_0, dict_0)
        list_0 = [float_0, illegal_use_of_scope_replacer_0, set_0, tuple_0]
        import_replacer_0 = module_0.ImportReplacer(bytes_0, dict_0, tuple_0, set_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    '
        var_0 = module_0.lazy_import(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'j\n(3p,4A'
        import_processor_0 = module_0.ImportProcessor()
        var_0 = import_processor_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        bool_0 = False
        tuple_0 = ()
        list_1 = [bool_0, bool_0, tuple_0, bool_0]
        str_0 = 'Z0\n[\t6<znzEJ`*X:'
        import_replacer_0 = module_0.ImportReplacer(list_1, bool_0, str_0, bool_0)
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(tuple_0, import_replacer_0)
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(list_0, bool_0, illegal_use_of_scope_replacer_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '`\nkNFG'
        list_0 = [str_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        var_1 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'HX*Syq~H'
        import_processor_0 = module_0.ImportProcessor()
        var_0 = import_processor_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        import_processor_0 = module_0.ImportProcessor()
        str_0 = 'd%BSXo\tqHXK#('
        str_1 = '&nU'
        var_0 = import_processor_0.lazy_import(str_1, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
        import_processor_0 = module_0.ImportProcessor()
        var_0 = import_processor_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        import_processor_0 = module_0.ImportProcessor()
        str_0 = '&nU'
        str_1 = "\n    Proxies mutable access to another mapping and allows for attribute-style access.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = False\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    Attribute style access:\n\n    >>> b.whoa\n    'yeee'\n    >>> b.state = 'new'\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new'}>\n\n    Recursion is handled:\n\n    >>> b.subdict = dict(test=True)\n    >>> b.subdict.test\n    True\n    >>> b\n    <ProxyMutableAttrDict {'whoa': 'yeee', 'hello': [1, 2, 3], 'why': 'always', 'nice': False, 'state': 'new',\n    'subdict': <ProxyMutableAttrDict {'test': True}>}>\n\n    "
        var_0 = import_processor_0.lazy_import(str_0, str_1)
    except BaseException:
        pass