# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        int_0 = 2050
        str_0 = None
        int_1 = -2460
        dict_0 = {str_0: int_0, int_0: int_0, int_0: str_0, int_1: int_0}
        str_1 = '"xu\x0cKt#Nc'
        var_0 = module_0.append_param(int_1, dict_0, str_1, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 511
        dict_0 = {int_0: int_0}
        list_0 = [int_0]
        float_0 = -1950.24446
        bytes_0 = b'R\xe1\xb3\x82\x8b\xb0Bih\xd7x'
        tuple_0 = (list_0, float_0, bytes_0, int_0)
        bool_0 = False
        var_0 = module_0.append_param(dict_0, tuple_0, list_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'n'
        str_1 = 'DROP'
        var_0 = dict(chain=str_1, table=str_0, policy=str_1)
        str_2 = 'iptables'
        bytes_0 = None
        complex_0 = None
        int_0 = None
        var_1 = module_0.append_tcp_flags(bytes_0, complex_0, int_0)
        var_2 = module_0.append_csv(int_0, int_0, bytes_0)
        var_3 = module_0.set_chain_policy(str_2, str_0, var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        int_0 = 2023
        dict_0 = {}
        str_0 = '[EZTOGswN~Zb.%i{C#'
        str_1 = '%s --add %s'
        var_0 = module_0.append_param(int_0, dict_0, str_0, str_1)
        list_0 = [var_0]
        float_0 = 1900.11
        tuple_0 = None
        tuple_1 = (list_0, float_0, tuple_0, set_0)
        list_1 = [var_0, dict_0]
        var_1 = module_0.append_csv(set_0, tuple_1, list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1940.939
        float_1 = 0.5
        set_0 = {float_1, float_1}
        var_0 = module_0.append_match(float_0, set_0, float_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'K=%L\x0b$O;ON'
        int_0 = -1573
        str_1 = '__main__'
        var_0 = module_0.append_jump(str_0, int_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1006
        dict_0 = None
        bool_0 = False
        var_0 = module_0.append_wait(int_0, dict_0, bool_0)
        int_1 = -910
        str_0 = ''
        dict_1 = {int_1: int_1, str_0: int_1, str_0: str_0}
        list_0 = [dict_1, int_1]
        var_1 = module_0.append_match(int_1, dict_1, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'x*{Oq&M\x0cLx5+\x0b8ay'
        int_0 = -1962
        str_1 = 'LDG51 6\tEeYi'
        tuple_0 = (int_0, str_1, int_0)
        var_0 = module_0.append_tcp_flags(str_0, str_0, tuple_0)
        tuple_1 = ()
        float_0 = -3751.6041
        var_1 = module_0.append_wait(tuple_1, float_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        int_0 = 2017
        bool_0 = False
        var_0 = module_0.append_match_flag(tuple_0, tuple_0, int_0, bool_0)
        str_0 = '}A(c'
        var_1 = module_0.construct_rule(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'DROP'
        var_0 = module_0.set_chain_policy(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -2146.1119
        float_1 = 1252.5777
        set_0 = None
        bool_0 = False
        int_0 = 2023
        dict_0 = {}
        str_0 = '[EZTOGswN~Zb.%i{C#'
        str_1 = '%s --add %s'
        var_0 = module_0.append_param(int_0, dict_0, str_0, str_1)
        tuple_0 = (float_0, float_1, set_0, bool_0)
        var_1 = module_0.check_present(tuple_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = None
        set_0 = {dict_0, dict_0, dict_0}
        str_0 = 'f1\rE4zy,P-!6%voR`a4'
        var_0 = module_0.append_tcp_flags(set_0, str_0, str_0)
        list_0 = [dict_0, dict_0]
        bool_0 = True
        var_1 = module_0.append_rule(dict_0, list_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'rc=flag; [ -r %(p)s ] %(shell_or)s rc=2; [ -f %(p)s ] %(shell_or)s rc=1; [ -d %(p)s ] %(shell_and)s rc=3; %(i)s -V 2>/dev/null %(shell_or)s rc=4; [ x"$rc" != "xflag" ] %(shell_and)s echo "${rc}  "%(p)s %(shell_and)s exit 0'
        float_0 = -1903.38959
        list_0 = []
        bytes_0 = b'\t\x86\xa5\xdc\xdd>{\x06l'
        tuple_0 = (float_0, list_0, bytes_0, list_0)
        tuple_1 = (tuple_0, tuple_0)
        var_0 = module_0.insert_rule(tuple_1, str_0, tuple_1)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 2647.4
        list_0 = [float_0, float_0]
        tuple_0 = (list_0, list_0, list_0, list_0)
        str_0 = 'O6NL-Px\n~0(N/;f\\I'
        var_0 = module_0.remove_rule(float_0, tuple_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x05\x9f\xc9\xcc\x9f\x17\xf1x\xa0\xee\xd7\xae\xeaF\xff'
        str_0 = '{kX\\.yhVM(m\r\tb#zc\\e5'
        var_0 = module_0.flush_table(bytes_0, str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = None
        str_0 = 'filter'
        str_1 = 'INPUT'
        str_2 = 'ACCEPT'
        var_1 = dict(table=str_0, chain=str_1, policy=str_2)
        var_2 = module_0.get_chain_policy(var_0, var_0, var_1)
    except BaseException:
        pass

def test_case_16():
    try:
        dict_0 = {}
        bool_0 = False
        var_0 = module_0.get_iptables_version(dict_0, bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '&RiP'
        var_0 = dict(chain=str_0, table=str_0, policy=str_0)
        str_1 = 'intamKes'
        bytes_0 = None
        complex_0 = None
        int_0 = -1090
        str_2 = 'L'
        set_0 = {str_0, bytes_0, str_0, int_0, bytes_0, str_1}
        tuple_0 = (str_2, set_0)
        tuple_1 = (int_0, complex_0, tuple_0)
        ansible_module_0 = None
        list_0 = [tuple_1, str_2, tuple_1, complex_0, tuple_0]
        float_0 = 86.50819065251147
        var_1 = module_0.append_tcp_flags(tuple_0, list_0, float_0)
        list_1 = [int_0, list_0, tuple_0]
        var_2 = module_0.append_jump(list_1, bytes_0, ansible_module_0)
        dict_0 = None
        var_3 = module_0.append_tcp_flags(tuple_1, dict_0, complex_0)
        var_4 = module_0.set_chain_policy(str_1, str_2, var_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'filter'
        str_1 = 'DROP'
        var_0 = dict(chain=str_0, table=str_0, policy=str_1)
        bytes_0 = None
        complex_0 = None
        int_0 = None
        var_1 = module_0.append_tcp_flags(bytes_0, complex_0, int_0)
        var_2 = module_0.set_chain_policy(str_0, str_0, var_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'INPUT'
        str_1 = 'H+,;9B6KT;\rnkieg/.b'
        str_2 = '-A'
        tuple_0 = ()
        var_0 = module_0.append_match(str_2, tuple_0, tuple_0)
        str_3 = 'DROP'
        var_1 = dict(chain=str_0, table=str_1, policy=str_3)
        bytes_0 = None
        complex_0 = None
        bool_0 = False
        bytes_1 = b'\xf9\x909\xc2\xb3\xab\xbet\xcd\xc1\x16I\xf7\x8b\x84g'
        var_2 = module_0.append_match(bool_0, tuple_0, bytes_1)
        int_0 = None
        var_3 = module_0.append_tcp_flags(bytes_0, complex_0, int_0)
        var_4 = module_0.set_chain_policy(str_1, str_1, var_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'iptables'
        str_1 = '-A'
        str_2 = 'table'
        str_3 = 'chain'
        str_4 = 'protocol'
        str_5 = 'source'
        str_6 = 'jump'
        str_7 = 'mangle'
        str_8 = 'PREROUTING'
        str_9 = 'tcp'
        str_10 = '8.8.8.8'
        str_11 = 'DROP'
        str_12 = {str_2: str_7, str_3: str_8, str_4: str_9, str_5: str_10, str_6: str_11}
        var_0 = module_0.push_arguments(str_0, str_1, str_12)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'DRO/ uP'
        var_0 = dict(chain=str_0, table=str_0, policy=str_0)
        var_1 = module_0.set_chain_policy(str_0, str_0, var_0)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = []
        str_0 = 'one'
        str_1 = 'two'
        str_2 = 'three'
        str_3 = [str_0, str_1, str_2]
        str_4 = '--flag'
        bool_0 = True
        var_1 = module_0.append_param(var_0, str_3, str_4, bool_0)
        var_2 = []
        str_5 = '!one'
        var_3 = module_0.append_param(var_2, str_5, str_4, bool_0)
        var_4 = []
        var_5 = None
        bool_1 = False
        var_6 = module_0.append_param(var_4, var_5, str_4, bool_1)
        var_7 = []
        str_6 = ''
        var_8 = module_0.append_param(var_7, str_6, str_4, bool_1)
    except BaseException:
        pass