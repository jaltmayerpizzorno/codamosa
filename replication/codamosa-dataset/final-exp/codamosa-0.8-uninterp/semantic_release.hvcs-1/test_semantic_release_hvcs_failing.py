# Automatically generated by Pynguin.
import semantic_release.hvcs as module_0

def test_case_0():
    try:
        base_0 = module_0.get_hvcs()
        str_0 = 'kR]m\tnb]XaB2OzX'
        int_0 = -1084
        list_0 = [str_0]
        github_0 = module_0.Github()
        session_0 = github_0.session()
        retry_0 = None
        bool_0 = True
        tuple_0 = (list_0, session_0, retry_0, bool_0)
        token_auth_0 = module_0.TokenAuth(tuple_0)
        var_0 = token_auth_0.__ne__(int_0)
        str_1 = ', beginning changelog generation'
        str_2 = 'A&C\x0btA&RY/K6eX2<D-'
        bool_1 = module_0.post_changelog(str_1, str_1, str_1, str_2)
        str_3 = base_0.api_url()
        str_4 = base_0.api_url()
        optional_0 = module_0.get_token()
        str_5 = base_0.domain()
        base_1 = module_0.Base()
        str_6 = base_1.api_url()
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
        optional_0 = base_0.token()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = module_0.check_token()
        base_0 = module_0.Base()
        github_0 = module_0.Github()
        str_0 = github_0.api_url()
        str_1 = '\x0cB~g#(<u*'
        str_2 = '};eFs~q'
        bool_1 = base_0.check_build_status(str_1, str_1, str_2)
    except BaseException:
        pass

def test_case_3():
    try:
        github_0 = module_0.Github()
        str_0 = ',n0<#n\ruZ92a8@J@t~'
        optional_0 = github_0.auth()
        str_1 = 'ryS9?uiK3 h'
        str_2 = "m^'1~"
        bool_0 = module_0.post_changelog(str_0, str_0, str_1, str_2)
        str_3 = "'B^WWMWF1v|"
        str_4 = ''
        str_5 = '(5YVu?P)96BnBhI'
        str_6 = 'Uploading to PyPI'
        bool_1 = github_0.check_build_status(str_4, str_5, str_6)
        str_7 = None
        dict_0 = {str_7: str_0}
        str_8 = '\\o\x0bmb{HDGtl\tTobvD}L'
        optional_1 = github_0.token()
        dict_1 = {str_4: str_2, str_8: github_0, str_3: optional_1}
        token_auth_0 = module_0.TokenAuth(dict_1)
        var_0 = token_auth_0.__call__(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = module_0.check_token()
        str_0 = "y!w=E?8'OK0"
        str_1 = 'breaking'
        str_2 = '!ya\n7\rHoqk/-8Y%\nZ'
        gitlab_0 = module_0.Gitlab()
        str_3 = gitlab_0.api_url()
        str_4 = None
        bool_1 = module_0.check_build_status(str_2, str_1, str_4)
        bool_2 = module_0.post_changelog(str_0, str_0, str_0, str_1)
        str_5 = '4D9'
        bool_3 = gitlab_0.check_build_status(str_2, str_1, str_5)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Post changelog.'
        str_1 = '@s'
        bool_0 = True
        token_auth_0 = module_0.TokenAuth(bool_0)
        var_0 = token_auth_0.__eq__(str_1)
        bool_1 = module_0.post_changelog(str_0, str_0, str_0, str_1)
        str_2 = '\n    Decorator that adds all the options in COMMON_OPTIONS\n    '
        gitlab_0 = module_0.Gitlab()
        str_3 = gitlab_0.api_url()
        str_4 = '6up^B4`Olq`UE'
        bool_2 = module_0.check_build_status(str_0, str_4, str_2)
        float_0 = 676.673
        var_1 = token_auth_0.__eq__(float_0)
        base_0 = module_0.Base()
        str_5 = base_0.domain()
    except BaseException:
        pass