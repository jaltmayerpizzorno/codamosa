# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        dict_0 = {}
        float_0 = 1937.853385
        var_0 = module_0.unique(dict_0, float_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 0.0
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.intersect(float_0, float_0, filter_module_0)
    except BaseException:
        pass

def test_case_2():
    try:
        filter_module_0 = module_0.FilterModule()
        list_0 = [filter_module_0, filter_module_0]
        bool_0 = False
        var_0 = module_0.difference(filter_module_0, list_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        list_0 = None
        var_0 = module_0.symmetric_difference(filter_module_0, filter_module_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        bool_0 = True
        var_0 = module_0.human_readable(bool_0)
        bool_1 = True
        var_1 = module_0.union(bool_1, list_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\\lnOILhgQ lkF:E'
        tuple_0 = ()
        var_0 = module_0.min(str_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xf3\xfe\xae\xce!N`\xee\xba\xca\x0e\xf0\xee\xc8d\x0b\x9a\x8b\x1d\xb2'
        bool_0 = True
        var_0 = module_0.max(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.logarithm(filter_module_0)
    except BaseException:
        pass

def test_case_8():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = "\n        multiprocessing.Process replaces the worker's stdin with a new file\n        but we wish to preserve it if it is connected to a terminal.\n        Therefore dup a copy prior to calling the real start(),\n        ensuring the descriptor is preserved somewhere in the new child, and\n        make sure it is closed in the parent when start() completes.\n        "
        var_0 = module_0.power(filter_module_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '*d{8,\\\tSU'
        str_1 = '\\jTHy3zHgw>'
        int_0 = 1796
        var_0 = module_0.unique(str_0, str_1, int_0)
        str_2 = 'Z*,ce^cD>&Lvj{'
        var_1 = module_0.inversepower(str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        display_0 = module_1.Display()
        var_0 = module_0.human_readable(display_0)
    except BaseException:
        pass

def test_case_11():
    try:
        filter_module_0 = None
        var_0 = module_0.human_to_bytes(filter_module_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "_#/5d/MCV'7Ko"
        set_0 = {str_0, str_0, str_0}
        list_0 = None
        var_0 = module_0.rekey_on_member(set_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'memfree_mb'
        str_1 = 'Ut6'
        str_2 = "#/5d/lMCl'7Ko"
        bool_0 = True
        str_3 = '/usr/lib/os-release'
        dict_0 = {str_1: bool_0, str_3: bool_0, str_1: str_3}
        list_0 = [bool_0, str_3, str_2, dict_0, str_1]
        var_0 = module_0.symmetric_difference(dict_0, list_0, list_0)
        list_1 = [str_0, str_3, var_0]
        var_1 = module_0.rekey_on_member(bool_0, list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'"\x05\xa3K\xb6{j'
        filter_module_0 = module_0.FilterModule()
        bool_0 = None
        list_0 = [bytes_0, bytes_0, bool_0]
        var_0 = module_0.intersect(bytes_0, filter_module_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ')Cb{]^S\x0bfWl@\x0cU%5<"'
        dict_0 = {str_0: str_0}
        bytes_0 = b";!W\x00\x13&'v\xb8m\x8a\\o\xd0\xb7k*\x17j\x95"
        var_0 = module_0.difference(str_0, bytes_0, dict_0)
        set_0 = set()
        var_1 = module_0.difference(str_0, dict_0, set_0)
        filter_module_0 = module_0.FilterModule()
        var_2 = filter_module_0.filters()
        float_0 = None
        list_0 = []
        var_3 = module_0.union(float_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 2494.7816
        filter_module_0 = module_0.FilterModule()
        list_0 = []
        var_0 = module_0.symmetric_difference(float_0, filter_module_0, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'pw,V'
        str_1 = None
        bytes_0 = b'\xce\xecK\xe5\xea#\x02\xe7\x1a\x14n'
        float_0 = 631.67
        var_0 = module_0.logarithm(float_0)
        int_0 = -2780
        dict_0 = {str_0: int_0, str_1: bytes_0}
        list_0 = [str_1, str_1, int_0]
        var_1 = module_0.unique(dict_0, dict_0, list_0)
        list_1 = [bytes_0]
        var_2 = module_0.union(bytes_0, int_0, list_1)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -1115
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.inversepower(int_0, filter_module_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'oo'
        str_1 = 'setting up inventory plugis'
        str_2 = {str_0: str_1}
        str_3 = {str_1: str_0}
        str_4 = {str_0: str_3}
        var_0 = module_0.rekey_on_member(str_4, str_1)
        var_1 = module_0.rekey_on_member(str_1, str_1, str_2)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        int_0 = None
        var_0 = module_0.inversepower(int_0, bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'br'
        str_1 = {str_0: str_0}
        var_0 = module_0.unique(str_0, str_0, str_1, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'Ut6'
        dict_0 = None
        str_1 = '%s reset --hard %s/%s'
        list_0 = [dict_0, str_0, str_1]
        str_2 = '--icmp-type'
        var_0 = module_0.difference(list_0, str_2, dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = "#/5d/lMCl'7Ko"
        dict_0 = None
        bool_0 = False
        var_0 = module_0.unique(str_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'memfree_mb'
        str_1 = 'Ut6'
        str_2 = "#/5d/lMCl'7Ko"
        bool_0 = True
        str_3 = '/usr/lib/os-release'
        dict_0 = {str_1: bool_0, str_3: bool_0, str_1: str_3}
        list_0 = [bool_0, str_3, str_2, dict_0, str_1]
        var_0 = module_0.symmetric_difference(dict_0, list_0, list_0)
        list_1 = [str_0, str_3, var_0]
        bytes_0 = b'\xba\xea\\\xf03d\x84_\xeb0\x82r\xdf%'
        var_1 = module_0.rekey_on_member(bytes_0, list_1)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = -1065
        list_0 = [int_0, int_0]
        bool_0 = True
        float_0 = 1485.43
        tuple_0 = (bool_0, float_0)
        list_1 = []
        var_0 = module_0.difference(tuple_0, list_1, list_1)
        str_0 = '.psm1'
        dict_0 = {str_0: bool_0, str_0: tuple_0, str_0: float_0}
        var_1 = module_0.unique(list_0, tuple_0, dict_0)
        str_1 = 'memfree_mb'
        str_2 = "_#/5d/MCV'7Ko"
        set_0 = {str_2, str_1, str_2}
        list_2 = None
        var_2 = module_0.rekey_on_member(set_0, list_2)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'lX^1D+ff\tf6b"t'
        str_1 = 'J<PL-2.0-or-latUr'
        set_0 = set()
        str_2 = '|B'
        dict_0 = {str_0: str_1, str_0: set_0, str_2: str_1}
        var_0 = module_0.difference(set_0, dict_0, dict_0)
        filter_module_0 = module_0.FilterModule()
        list_0 = None
        filter_module_1 = module_0.FilterModule(*list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'lX^1D+ff\tf6b"t'
        str_1 = 'TJ<PL-2.0-or-latUr'
        set_0 = set()
        str_2 = "FHAE-+K0$qH'wS\\I'"
        dict_0 = {str_0: str_0, str_2: set_0, str_2: str_2, str_0: str_1}
        var_0 = module_0.difference(set_0, dict_0, dict_0)
        str_3 = '(;u?pT2NpIpF</q|B!V'
        bytes_0 = b'&_\x05\x10\xef3\xe80s\x1b\xb3#Y\xd4\x94\xea'
        list_0 = [var_0, set_0]
        dict_1 = {str_3: str_3, str_1: list_0, str_3: str_3}
        list_1 = [str_1, dict_1, str_2]
        var_1 = module_0.symmetric_difference(bytes_0, list_0, list_1)
        float_0 = -1626.16082
        var_2 = module_0.rekey_on_member(str_2, float_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = False
        var_0 = module_0.logarithm(bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'foo'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_2 = [str_1]
        var_0 = module_0.rekey_on_member(str_2, str_0)
        str_3 = {}
        str_4 = {str_0: str_3}
        var_1 = module_0.rekey_on_member(str_4, str_1)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'foo'
        str_1 = 'bar'
        str_2 = {str_0: str_1}
        str_3 = [str_2]
        str_4 = 'overwrite'
        var_0 = module_0.rekey_on_member(str_3, str_1, str_4)
    except BaseException:
        pass

def test_case_31():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '}S_F42h!CG_yoi'
        int_0 = 2
        str_1 = 'VFV9x\t-5btKI].5'
        bytes_0 = b'\xd8\x9b\t\xf7'
        dict_0 = {bytes_0: filter_module_0, bytes_0: str_0, str_1: str_1, str_1: int_0}
        set_0 = {int_0, bytes_0, int_0}
        var_0 = module_0.human_readable(str_1, dict_0, set_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'br'
        str_1 = {str_0: str_0}
        str_2 = [str_1, str_1]
        str_3 = 'error'
        var_0 = module_0.unique(str_3, str_2)
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.rekey_on_member(str_2, str_0, str_3)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = '9'
        int_0 = -287
        var_0 = module_0.human_to_bytes(str_0, int_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 10
        bool_0 = True
        var_0 = module_0.human_readable(int_0, bool_0)
        int_1 = 100
        var_1 = module_0.human_readable(int_1, bool_0)
        int_2 = -3718
        float_0 = -6434.286
        var_2 = module_0.power(int_2, float_0)
    except BaseException:
        pass