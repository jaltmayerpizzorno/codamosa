# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    pass

def test_case_1():
    list_0 = []
    bytes_0 = b'\xa3'
    list_1 = [list_0, list_0, bytes_0, bytes_0]
    var_0 = module_0.intersect(list_0, list_1, list_0)

def test_case_2():
    str_0 = 'Ut6'
    str_1 = "#/5d/lMCl'7Ko"
    bool_0 = False
    str_2 = '/usr/lib/os-release'
    dict_0 = {str_0: bool_0, str_2: bool_0, str_0: str_2}
    list_0 = [bool_0, str_2, str_1, dict_0, str_0]
    var_0 = module_0.symmetric_difference(dict_0, list_0, list_0)

def test_case_3():
    dict_0 = None
    int_0 = -166
    list_0 = [int_0, int_0, int_0, dict_0]
    list_1 = [int_0]
    var_0 = module_0.union(dict_0, list_0, list_1)

def test_case_4():
    filter_module_0 = module_0.FilterModule()
    var_0 = filter_module_0.filters()

def test_case_5():
    set_0 = set()
    dict_0 = {}
    str_0 = 'BiDviXcP\\,'
    dict_1 = {str_0: set_0}
    list_0 = [set_0, dict_0, set_0, dict_1]
    var_0 = module_0.intersect(set_0, dict_0, list_0)
    list_1 = None
    var_1 = module_0.rekey_on_member(set_0, list_1)

def test_case_6():
    str_0 = 'oo'
    str_1 = 'setting up inventory plugis'
    str_2 = {str_1: str_0}
    str_3 = {str_0: str_2}
    var_0 = module_0.rekey_on_member(str_3, str_1)

def test_case_7():
    filter_module_0 = module_0.FilterModule()
    str_0 = 'p=DaR)zc'
    bytes_0 = b'\xcc\xeb'
    filter_module_1 = module_0.FilterModule()
    dict_0 = {bytes_0: filter_module_1, filter_module_1: filter_module_1}
    str_1 = '\x0cj)tcQd}\nB'
    bytes_1 = b'])\xed\xd4Gx'
    tuple_0 = (dict_0, str_1, bytes_0, bytes_1)
    tuple_1 = (bytes_0, tuple_0)
    bool_0 = False
    var_0 = module_0.unique(str_0, tuple_1, filter_module_1, bool_0)

def test_case_8():
    bytes_0 = b'\xb7'
    set_0 = {bytes_0, bytes_0, bytes_0}
    var_0 = module_0.max(bytes_0, set_0)
    str_0 = 'br'
    str_1 = {str_0: str_0}
    str_2 = [str_1, str_1]
    str_3 = 'overwrite'
    var_1 = module_0.unique(str_3, str_2)
    var_2 = module_0.rekey_on_member(str_2, str_0, str_3)

def test_case_9():
    int_0 = 30
    int_1 = 10
    var_0 = module_0.logarithm(int_0, int_1)