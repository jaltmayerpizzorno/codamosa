# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        str_0 = 'T_F'
        list_0 = [str_0, str_0, str_0]
        float_0 = -2749.3926
        int_0 = -1713
        int_1 = -2767
        token_0 = module_0.Token(float_0, int_0, int_1)
        token_1 = token_0.lookup(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0]
        int_0 = -685
        str_0 = 'k:q`hJVsn\\}PL'
        token_0 = module_0.Token(list_0, int_0, int_0, str_0)
        bool_0 = token_0.__eq__(tuple_0)
        int_1 = -2262
        list_1 = [int_1]
        list_2 = []
        tuple_1 = (list_2,)
        list_3 = [tuple_1, list_2, list_2]
        int_2 = -906
        int_3 = 3995
        token_1 = module_0.Token(list_3, int_2, int_3)
        token_2 = token_1.lookup_key(list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2017.1
        int_0 = 1608
        token_0 = module_0.Token(float_0, int_0, int_0)
        str_0 = token_0.__repr__()
        str_1 = token_0.__repr__()
        list_0 = [float_0, float_0]
        tuple_0 = None
        int_1 = 4692
        int_2 = -2182
        list_token_0 = module_0.ListToken(tuple_0, int_1, int_2)
        dict_0 = {tuple_0: tuple_0}
        list_1 = []
        tuple_1 = (list_token_0, dict_0, list_1, dict_0)
        int_3 = -1176
        token_1 = module_0.Token(tuple_1, int_3, int_3)
        token_2 = token_1.lookup(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 0
        list_0 = [int_0, int_0, int_0]
        list_1 = []
        int_1 = 1167
        list_token_0 = module_0.ListToken(int_0, int_1, int_0)
        token_0 = list_token_0.lookup(list_1)
        token_1 = token_0.lookup(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -750
        str_0 = 'forms/textarea.html'
        scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        list_0 = [int_0, int_0, scalar_token_0, int_0]
        int_1 = 2700
        str_1 = '\r{KK{\r[d=~A^'
        token_0 = module_0.Token(int_0, int_0, int_1, str_1)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        list_1 = []
        int_0 = 1262
        int_1 = -3113
        scalar_token_0 = module_0.ScalarToken(list_1, int_0, int_1)
        int_2 = 200
        token_0 = module_0.Token(scalar_token_0, int_2, int_2)
        int_3 = -8
        str_0 = 'h8X|h?\rc$$1JL%~'
        token_1 = module_0.Token(token_0, int_2, int_3, str_0)
        token_2 = token_1.lookup_key(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1
        int_1 = 2
        token_0 = module_0.Token(int_0, int_0, int_1)
        int_2 = 2021
        scalar_token_0 = module_0.ScalarToken(int_1, int_0, int_2)
        bool_0 = scalar_token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        int_0 = -1158
        int_1 = 1619
        str_0 = '['
        scalar_token_0 = module_0.ScalarToken(int_0, int_1, int_1, str_0)
        int_2 = 3
        str_1 = 'mBCVsGdIU'
        scalar_token_1 = module_0.ScalarToken(list_0, int_0, int_2, str_1)
        any_0 = scalar_token_1.__hash__()
    except BaseException:
        pass

def test_case_8():
    try:
        dict_token_0 = module_0.DictToken()
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1
        str_0 = 'abc'
        list_token_0 = module_0.ListToken(str_0, int_0, int_0)
        var_0 = None
        scalar_token_0 = module_0.ScalarToken(var_0, int_0, int_0, str_0)
        scalar_token_1 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        scalar_token_2 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        bool_0 = scalar_token_2.__eq__(list_token_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        str_0 = 'abc'
        list_token_0 = module_0.ListToken(str_0, int_0, int_0)
        var_0 = None
        scalar_token_0 = module_0.ScalarToken(var_0, int_0, int_0, str_0)
        var_1 = scalar_token_0.value
        scalar_token_1 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        scalar_token_2 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        scalar_token_3 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        bool_0 = scalar_token_2.__eq__(list_token_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1
        str_0 = ''
        scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        list_token_0 = module_0.ListToken(str_0, int_0, int_0)
        var_0 = scalar_token_0.value
        var_1 = None
        scalar_token_1 = module_0.ScalarToken(var_1, int_0, int_0, str_0)
        var_2 = scalar_token_1.value
        list_token_1 = module_0.ListToken(scalar_token_0, int_0, int_0)
        scalar_token_2 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        scalar_token_3 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        bool_0 = scalar_token_2.__eq__(list_token_0)
        list_0 = []
        token_0 = list_token_1.lookup(list_0)
        bool_1 = scalar_token_3.__eq__(var_2)
        bool_2 = scalar_token_0.__eq__(scalar_token_1)
        int_1 = 1083
        scalar_token_4 = module_0.ScalarToken(scalar_token_2, int_1, int_0)
        dict_0 = {}
        dict_token_0 = module_0.DictToken(**dict_0)
    except BaseException:
        pass