# Automatically generated by Pynguin.
import pytutils.props as module_0

def test_case_0():
    try:
        int_0 = 304
        list_0 = [int_0, int_0]
        bytes_0 = b'\xff\xf5\x96\xed\x05\x1b\x1aR;e\xd0\x1a'
        int_1 = 1024
        roclassproperty_0 = module_0.roclassproperty(int_1)
        var_0 = roclassproperty_0.__get__(list_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1024
        list_0 = []
        tuple_0 = ()
        setterproperty_0 = module_0.setterproperty(tuple_0)
        roclassproperty_0 = module_0.roclassproperty(setterproperty_0)
        float_0 = -3571.640113
        setterproperty_1 = module_0.setterproperty(roclassproperty_0, float_0)
        var_0 = setterproperty_1.__set__(int_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        var_0 = module_0.lazyperclassproperty(set_0)
        str_0 = '*r_G'
        bytes_0 = b'\xdd~\xce\x83'
        setterproperty_0 = module_0.setterproperty(bytes_0)
        tuple_0 = (str_0,)
        var_1 = module_0.lazyclassproperty(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "Upon request import 'module_path' as the name 'module_name'.\n        When imported, prepare children to also be imported.\n\n        :param scope: The scope that objects should be imported into.\n            Typically this is globals()\n        :param name: The variable name. Often this is the same as the\n            module_path. 'bzrlib'\n        :param module_path: A list for the fully specified module path\n            ['bzrlib', 'foo', 'bar']\n        :param member: The member inside the module to import, often this is\n            None, indicating the module is being imported.\n        :param children: Children entries to be imported later.\n            This should be a map of children specifications.\n            ::\n            \n                {'foo':(['bzrlib', 'foo'], None,\n                    {'bar':(['bzrlib', 'foo', 'bar'], None {})})\n                }\n\n        Examples::\n\n            import foo => name='foo' module_path='foo',\n                          member=None, children={}\n            import foo.bar => name='foo' module_path='foo', member=None,\n                              children={'bar':(['foo', 'bar'], None, {}}\n            from foo import bar => name='bar' module_path='foo', member='bar'\n                                   children={}\n            from foo import bar, baz would get translated into 2 import\n            requests. On for 'name=bar' and one for 'name=baz'\n        "
        var_0 = module_0.lazyclassproperty(str_0)
    except BaseException:
        pass