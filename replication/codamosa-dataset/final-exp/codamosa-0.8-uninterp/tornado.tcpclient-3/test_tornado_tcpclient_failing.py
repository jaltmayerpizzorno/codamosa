# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import ssl as module_1
import tornado.netutil as module_2
import tornado.ioloop as module_3
import socket as module_4
import _asyncio as module_5
import concurrent.futures._base as module_6

def test_case_0():
    try:
        tuple_0 = ()
        list_0 = [tuple_0]
        t_c_p_client_0 = module_0.TCPClient()
        connector_0 = module_0._Connector(list_0, t_c_p_client_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 355
        str_0 = 'x2TuF^WO$8R%^oR'
        s_s_l_context_0 = module_1.SSLContext()
        list_0 = []
        resolver_0 = module_2.Resolver(*list_0)
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, s_s_l_context_0)
        i_o_loop_0 = module_3.IOLoop()
        tuple_0 = (i_o_loop_0, int_0)
        list_1 = [tuple_0, tuple_0]
        iterator_0 = None
        connector_0 = module_0._Connector(list_1, i_o_loop_0)
        connector_0.clear_timeout()
        connector_0.close_streams()
        address_family_0 = module_4.AddressFamily.AF_NETLINK
        connector_0.close_streams()
        future_0 = module_5.Future()
        s_s_l_context_1 = module_1.SSLContext()
        connector_1 = module_0._Connector(list_1, s_s_l_context_1)
        connector_0.on_timeout()
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_2():
    try:
        resolver_0 = module_2.Resolver()
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        t_c_p_client_0.close()
        str_0 = 'eum4'
        int_0 = None
        t_c_p_client_1 = module_0.TCPClient()
        i_o_stream_0 = t_c_p_client_1.connect(str_0, int_0, int_0, int_0)
        tuple_0 = ()
        t_c_p_client_2 = module_0.TCPClient()
        t_c_p_client_2.close()
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        t_c_p_client_3 = module_0.TCPClient()
        connector_0 = module_0._Connector(list_0, t_c_p_client_3)
    except BaseException:
        pass

def test_case_3():
    try:
        awaitable_0 = None
        int_0 = 426
        tuple_0 = (int_0, int_0)
        str_0 = 'H\nA1&'
        tuple_1 = (awaitable_0, tuple_0, str_0)
        list_0 = [tuple_1, tuple_1, tuple_1, tuple_1]
        dict_0 = {tuple_1: str_0}
        i_o_loop_0 = module_3.IOLoop()
        tuple_2 = (dict_0, i_o_loop_0)
        connector_0 = module_0._Connector(list_0, tuple_2)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 355
        i_o_loop_0 = module_3.IOLoop()
        tuple_0 = (i_o_loop_0, int_0)
        list_0 = [tuple_0, tuple_0]
        iterator_0 = None
        address_family_0 = module_4.AddressFamily.AF_KEY
        future_0 = module_5.Future()
        dict_0 = {}
        connector_0 = module_0._Connector(list_0, dict_0)
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 355
        i_o_loop_0 = module_3.IOLoop()
        tuple_0 = (i_o_loop_0, int_0)
        list_0 = [tuple_0, tuple_0]
        iterator_0 = None
        connector_0 = module_0._Connector(list_0, i_o_loop_0)
        connector_0.close_streams()
        address_family_0 = module_4.AddressFamily.AF_NETLINK
        future_0 = module_5.Future()
        connector_0.on_timeout()
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 355
        t_c_p_client_0 = module_0.TCPClient()
        i_o_loop_0 = module_3.IOLoop()
        tuple_0 = (i_o_loop_0, int_0)
        list_0 = [tuple_0, tuple_0]
        future_0 = module_5.Future()
        connector_0 = module_0._Connector(list_0, i_o_loop_0)
        connector_0.close_streams()
        callable_0 = None
        connector_1 = module_0._Connector(list_0, callable_0)
        float_0 = 516.0
        future_1 = connector_0.start(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 355
        t_c_p_client_0 = module_0.TCPClient()
        t_c_p_client_0.close()
        i_o_loop_0 = module_3.IOLoop()
        tuple_0 = (i_o_loop_0, int_0)
        list_0 = [tuple_0]
        str_0 = '-id,du0c#G@~,,u'
        int_1 = 396
        iterator_0 = None
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_1, int_1, i_o_loop_0)
        connector_0 = module_0._Connector(list_0, i_o_stream_0)
        connector_0.clear_timeouts()
        future_0 = module_5.Future()
        connector_1 = module_0._Connector(list_0, i_o_loop_0)
        connector_1.clear_timeout()
        connector_0.close_streams()
        connector_0.on_timeout()
        address_family_0 = module_4.AddressFamily.AF_NETLINK
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 0.0
        str_0 = 'afh3Y'
        int_0 = 355
        t_c_p_client_0 = module_0.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, str_0, float_0)
        i_o_loop_0 = module_3.IOLoop()
        tuple_0 = (i_o_loop_0, int_0)
        list_0 = [tuple_0, tuple_0, tuple_0]
        str_1 = '2mw<R^JAWg=lHYBo6'
        int_1 = 399
        resolver_0 = module_2.Resolver()
        awaitable_0 = resolver_0.resolve(str_1, int_1)
        connector_0 = module_0._Connector(list_0, awaitable_0)
        connector_0.on_timeout()
        i_o_loop_1 = module_3.IOLoop()
        connector_0.set_connect_timeout(float_0)
        executor_0 = module_6.Executor()
        future_0 = module_6.Future()
        callable_0 = None
        connector_0.clear_timeouts()
        connector_1 = module_0._Connector(list_0, callable_0)
        future_1 = connector_1.start()
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 0.0
        str_0 = 'fh3Y'
        int_0 = 355
        t_c_p_client_0 = module_0.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, str_0, float_0)
        i_o_loop_0 = module_3.IOLoop()
        tuple_0 = (i_o_loop_0, int_0)
        list_0 = [tuple_0, tuple_0]
        str_1 = '2mw<R^JAWg=lHYBo6'
        int_1 = 399
        resolver_0 = module_2.Resolver()
        awaitable_0 = resolver_0.resolve(str_1, int_1)
        connector_0 = module_0._Connector(list_0, awaitable_0)
        connector_0.on_timeout()
        connector_0.set_timeout(float_0)
        connector_0.on_connect_timeout()
        str_2 = 'H\nA1&'
        future_0 = module_6.Future()
        callable_0 = None
        connector_0.clear_timeouts()
        awaitable_1 = resolver_0.resolve(str_2, int_0)
        list_1 = []
        connector_1 = module_0._Connector(list_1, callable_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 0.0
        str_0 = 'fh3Y'
        int_0 = 355
        t_c_p_client_0 = module_0.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, str_0, float_0)
        i_o_loop_0 = module_3.IOLoop()
        tuple_0 = (i_o_loop_0, int_0)
        list_0 = [tuple_0, tuple_0]
        str_1 = '2mw<R^JAWg=lHYBo6'
        int_1 = 399
        resolver_0 = module_2.Resolver()
        awaitable_0 = resolver_0.resolve(str_1, int_1)
        connector_0 = module_0._Connector(list_0, awaitable_0)
        connector_0.on_timeout()
        connector_0.on_connect_timeout()
        connector_0.on_connect_timeout()
        connector_0.on_timeout()
        connector_0.on_timeout()
        connector_0.clear_timeouts()
        future_0 = connector_0.start(float_0)
    except BaseException:
        pass