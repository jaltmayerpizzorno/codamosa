# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        float_0 = -4059.84939
        list_0 = [float_0]
        command_0 = None
        int_0 = 4250
        float_1 = -5632.5
        corrected_command_0 = module_0.CorrectedCommand(int_0, float_1, list_0)
        var_0 = corrected_command_0.run(command_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "yN@38H'0P"
        dict_0 = {str_0: str_0}
        bool_0 = False
        str_1 = '*JSvfa'
        list_0 = [dict_0]
        bytes_0 = b'\x9b\xf7#A\xcaIS\x10\x8b\xf0\xf5\x13\x02\x0f'
        corrected_command_0 = module_0.CorrectedCommand(str_0, bytes_0, bytes_0)
        tuple_0 = (corrected_command_0,)
        str_2 = 'kill'
        corrected_command_1 = module_0.CorrectedCommand(tuple_0, corrected_command_0, str_2)
        var_0 = corrected_command_1.__hash__()
        bytes_1 = b'\x1c\xc1|\xe1\x0bU\xe5\x8f\x87Ak\x92\xb4\x14'
        int_0 = None
        list_1 = [dict_0]
        str_3 = '`P[|S'
        dict_1 = {}
        set_0 = {int_0, tuple_0, bool_0}
        rule_0 = module_0.Rule(list_1, str_3, bytes_0, dict_1, bytes_1, set_0, bytes_1)
        corrected_command_2 = module_0.CorrectedCommand(list_0, int_0, rule_0)
        str_4 = 'eE8Ce9W4C@\nLY3'
        str_5 = 'grunt'
        dict_2 = {str_4: str_3, str_5: str_1}
        float_0 = 491.7806
        command_0 = module_0.Command(tuple_0, dict_1)
        rule_1 = module_0.Rule(set_0, dict_2, list_0, float_0, dict_1, tuple_0, command_0)
        command_1 = module_0.Command(set_0, rule_1)
        command_2 = module_0.Command(dict_1, int_0)
        var_1 = command_2.__eq__(command_1)
        complex_0 = None
        list_2 = []
        float_1 = -306.8
        command_3 = module_0.Command(float_1, complex_0)
        rule_2 = module_0.Rule(tuple_0, tuple_0, bool_0, list_0, list_2, list_0, command_3)
        command_4 = module_0.Command(rule_2, bytes_0)
        var_2 = command_4.update()
        float_2 = 0.6
        corrected_command_3 = module_0.CorrectedCommand(complex_0, complex_0, float_2)
        var_3 = corrected_command_3.__repr__()
        int_1 = -3569
        var_4 = corrected_command_3.run(int_1)
    except BaseException:
        pass