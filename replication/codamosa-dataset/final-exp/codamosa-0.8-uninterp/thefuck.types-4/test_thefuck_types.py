# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    dict_0 = {}
    bool_0 = False
    command_0 = module_0.Command(dict_0, bool_0)

def test_case_2():
    str_0 = '^O*}p}YJ7[y5s%T+1G'
    float_0 = 0.85
    set_0 = set()
    command_0 = module_0.Command(float_0, set_0)
    tuple_0 = (command_0, set_0)
    dict_0 = {}
    int_0 = 797
    list_0 = [set_0, set_0, set_0]
    list_1 = [tuple_0]
    rule_0 = module_0.Rule(dict_0, int_0, set_0, tuple_0, list_0, float_0, list_1)
    tuple_1 = (tuple_0, rule_0)
    bool_0 = True
    command_1 = module_0.Command(tuple_1, bool_0)
    var_0 = command_1.__eq__(str_0)

def test_case_3():
    list_0 = []
    tuple_0 = ()
    command_0 = module_0.Command(list_0, tuple_0)
    var_0 = command_0.__repr__()

def test_case_4():
    bytes_0 = b'\xc5X\x17v*\xdc\xa5\x06\x86i\xb3\xbf'
    list_0 = [bytes_0]
    str_0 = '↑'
    bool_0 = False
    command_0 = module_0.Command(list_0, bool_0)
    float_0 = 1262.41
    int_0 = -2301
    tuple_0 = (int_0,)
    corrected_command_0 = module_0.CorrectedCommand(float_0, str_0, tuple_0)
    corrected_command_1 = module_0.CorrectedCommand(list_0, str_0, command_0)
    var_0 = corrected_command_1.__repr__()
    str_1 = ';EvEDV\t]PD[|\n[:&'
    dict_0 = {}
    set_0 = {tuple_0}
    list_1 = [bool_0]
    int_1 = -1042
    rule_0 = module_0.Rule(corrected_command_1, bytes_0, set_0, list_1, int_1, str_1, tuple_0)
    command_1 = module_0.Command(tuple_0, rule_0)
    command_2 = module_0.Command(rule_0, command_0)
    str_2 = "b'4$r\nb!4!8-"
    str_3 = 'Wh{WyPDSOWKdCF|'
    dict_1 = {}
    rule_1 = module_0.Rule(command_1, tuple_0, command_2, str_2, str_3, dict_1, bool_0)
    var_1 = rule_1.__eq__(dict_0)
    list_2 = []
    var_2 = command_0.__eq__(list_2)
    dict_2 = {str_1: str_1, str_1: bytes_0}
    command_3 = module_0.Command(bytes_0, dict_2)
    bool_1 = True
    command_4 = module_0.Command(command_3, bool_1)
    var_3 = command_3.update()
    var_4 = command_4.__repr__()

def test_case_5():
    dict_0 = {}
    float_0 = 1838.630348
    list_0 = [dict_0, float_0, dict_0]
    str_0 = '7Pol|'
    tuple_0 = ()
    set_0 = set()
    corrected_command_0 = module_0.CorrectedCommand(set_0, float_0, set_0)
    bytes_0 = b'X\x04'
    rule_0 = module_0.Rule(dict_0, list_0, str_0, tuple_0, list_0, corrected_command_0, bytes_0)
    var_0 = rule_0.__repr__()

def test_case_6():
    float_0 = 0.1
    set_0 = set()
    bool_0 = False
    str_0 = "'0]"
    dict_0 = {str_0: str_0, str_0: set_0}
    command_0 = module_0.Command(bool_0, dict_0)
    command_1 = module_0.Command(set_0, command_0)
    str_1 = 'kGFD~,3'
    str_2 = 'ψ'
    float_1 = 1144.15781
    rule_0 = module_0.Rule(command_1, str_1, set_0, str_2, float_1, float_0, set_0)
    int_0 = -158
    bytes_0 = b'\x89f\x05:z\xba'
    rule_1 = module_0.Rule(float_0, rule_0, str_2, rule_0, int_0, bytes_0, bytes_0)
    var_0 = rule_1.__eq__(str_0)

def test_case_7():
    bool_0 = True
    str_0 = 'test'
    float_0 = 0.1
    bytes_0 = b'\x1b\x1eWZ\xbc\r;'
    corrected_command_0 = module_0.CorrectedCommand(float_0, bytes_0, float_0)
    dict_0 = {str_0: bool_0, bool_0: bool_0, bool_0: str_0, corrected_command_0: str_0}
    command_0 = module_0.Command(dict_0, bool_0)
    set_0 = {str_0, str_0, str_0}
    tuple_0 = (bool_0,)
    bool_1 = False
    int_0 = -56
    rule_0 = module_0.Rule(set_0, str_0, tuple_0, bytes_0, bool_1, set_0, int_0)
    var_0 = rule_0.is_match(command_0)

def test_case_8():
    float_0 = -1613.092
    str_0 = ''
    float_1 = 497.27152
    bool_0 = False
    corrected_command_0 = module_0.CorrectedCommand(str_0, float_1, bool_0)
    var_0 = corrected_command_0.__eq__(float_0)

def test_case_9():
    str_0 = ''
    str_1 = ''
    var_0 = None
    int_0 = 1
    corrected_command_0 = module_0.CorrectedCommand(str_1, var_0, int_0)
    var_1 = corrected_command_0.run(str_0)

def test_case_10():
    str_0 = 'E$uhKv:by\tQrA9EMy>?_'
    str_1 = 'O*.5!3y+?'
    tuple_0 = (str_1,)
    bytes_0 = b'\xeb\xa6\x10\xc2\x08Z\xd5\xa3'
    bool_0 = False
    str_2 = '/ '
    corrected_command_0 = module_0.CorrectedCommand(str_2, tuple_0, bool_0)
    int_0 = 4969
    float_0 = -3203.048
    str_3 = ''
    command_0 = module_0.Command(float_0, str_3)
    list_0 = [bytes_0]
    int_1 = -2787
    str_4 = 'YV0hK9=nK6p$f\x0c'
    command_1 = module_0.Command(int_1, str_4)
    var_0 = corrected_command_0.__eq__(corrected_command_0)
    command_2 = module_0.Command(list_0, command_1)
    str_5 = '$'
    dict_0 = {str_4: float_0, str_0: str_1, str_0: int_0, str_5: list_0}
    var_1 = command_2.__eq__(dict_0)

def test_case_11():
    str_0 = '8:uqI'
    float_0 = -1819.1
    float_1 = 961.471
    tuple_0 = (float_1,)
    tuple_1 = (float_0, tuple_0)
    list_0 = [str_0, tuple_1]
    int_0 = None
    bytes_0 = b'w\x96\rL\x94\xce\xec\x88\t"\xba\xbe\xab-\x17C\x9a\x1a2\xc1'
    command_0 = module_0.Command(int_0, bytes_0)
    float_2 = 0.6
    command_1 = module_0.Command(command_0, float_2)
    str_1 = 'U(k:#'
    float_3 = 0.85
    dict_0 = None
    set_0 = None
    rule_0 = module_0.Rule(str_1, float_3, dict_0, dict_0, tuple_0, set_0, set_0)
    list_1 = [float_0]
    rule_1 = module_0.Rule(float_0, list_0, int_0, command_1, rule_0, tuple_0, list_1)
    str_2 = "%/Ina/2H&m0'"
    str_3 = 'cs'
    list_2 = [str_2, str_0, str_2, str_2]
    float_4 = 0.85
    dict_1 = None
    bytes_1 = b'$\xf44\xd5Awc\xcc\x89,\xa7,`\x11.\x8d\xc6'
    tuple_2 = ()
    str_4 = '-C'
    corrected_command_0 = module_0.CorrectedCommand(tuple_2, bytes_1, str_4)
    str_5 = '[pzqhHbc0jKzZ2F'
    rule_2 = module_0.Rule(bytes_1, dict_1, corrected_command_0, float_4, dict_1, bytes_1, str_5)
    str_6 = 'L'
    str_7 = ''
    rule_3 = module_0.Rule(list_2, list_2, float_4, dict_1, rule_2, str_6, str_7)
    bool_0 = False
    corrected_command_1 = module_0.CorrectedCommand(rule_3, bool_0, bytes_1)
    list_3 = [str_4, bytes_1, str_6]
    dict_2 = None
    set_1 = {tuple_2}
    corrected_command_2 = module_0.CorrectedCommand(list_2, dict_2, set_1)
    float_5 = 2152.379
    rule_4 = module_0.Rule(corrected_command_2, tuple_2, set_1, set_1, bytes_1, float_5, tuple_2)
    str_8 = '"{='
    tuple_3 = (corrected_command_1, list_3, rule_4, str_8)
    bytes_2 = b'\xfc\xee4v\x91\x82\xa0DWL'
    int_1 = -1407
    rule_5 = module_0.Rule(str_2, str_3, tuple_3, bytes_2, int_1, rule_4, dict_1)
    var_0 = rule_5.__eq__(rule_1)
    dict_3 = {str_0: str_0}
    int_2 = 1892
    command_2 = module_0.Command(dict_3, int_2)
    var_1 = command_2.__repr__()

def test_case_12():
    str_0 = 'foo'
    bool_0 = True
    var_0 = lambda x: bool_0
    var_1 = lambda x: [x.script, x.script]
    var_2 = None
    int_0 = 0
    rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, var_2, int_0, bool_0)
    str_1 = 'bar'
    command_0 = module_0.Command(str_0, str_1)
    var_3 = rule_0.get_corrected_commands(command_0)
    var_4 = list(var_3)
    var_5 = len(var_4)