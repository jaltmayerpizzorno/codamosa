# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = '2U^_O?!B,+|-ZZr'
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        list_0 = [d_f_a_state_0]
        dict_1 = {str_0: list_0, str_0: list_0}
        tuple_0 = (dict_1, str_0)
        parser_generator_0 = module_0.ParserGenerator(str_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_2():
    try:
        n_f_a_state_0 = None
        pgen_grammar_0 = module_0.PgenGrammar()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1)
        n_f_a_state_1.addarc(n_f_a_state_0)
    except BaseException:
        pass

def test_case_3():
    try:
        n_f_a_state_0 = module_0.NFAState()
        set_0 = {n_f_a_state_0}
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: set_0}
        n_f_a_state_1 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_4():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        dict_1 = {n_f_a_state_2: n_f_a_state_2}
        n_f_a_state_2.addarc(n_f_a_state_2)
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_2)
        str_0 = 'Main program, when run as a script: produce grammar pickle files.\n\n    Calls load_grammar for each argument, a path to a grammar text file.\n    '
        n_f_a_state_3 = None
        dict_2 = {n_f_a_state_3: str_0, n_f_a_state_3: str_0, n_f_a_state_3: str_0}
        d_f_a_state_2 = module_0.DFAState(dict_2, n_f_a_state_3)
    except BaseException:
        pass

def test_case_5():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        str_0 = '%cHxvvt_\\vJ8Xb8?\n:\x0cJ'
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        str_1 = '*GF~I};|P.`6-($s\x0c'
        parser_generator_0 = module_0.ParserGenerator(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = None
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_1 = module_0.NFAState()
        pgen_grammar_0 = module_0.PgenGrammar()
        dict_1 = {n_f_a_state_1: pgen_grammar_0, n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: pgen_grammar_0}
        d_f_a_state_2 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_2.addarc(d_f_a_state_1, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        str_0 = 'PatternGrammar.txt'
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        dict_1 = {n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_9():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        list_0 = []
        n_f_a_state_1.addarc(n_f_a_state_2, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = '2U^_O?!B,+|-ZZr'
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = None
        str_0 = '2\tl0jm:Ci\x0c"+HFJJ'
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass