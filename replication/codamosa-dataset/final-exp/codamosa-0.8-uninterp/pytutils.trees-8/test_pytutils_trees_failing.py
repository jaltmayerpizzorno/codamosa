# Automatically generated by Pynguin.
import pytutils.trees as module_0
import collections as module_1

def test_case_0():
    try:
        str_0 = 'data:hello'
        var_0 = module_0.set_tree_node(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        tuple_0 = ()
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
        tree_0 = module_0.Tree(tuple_0, dict_0)
        var_0 = tree_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(tree_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tree_0 = module_0.Tree()
        int_0 = 600
        registry_tree_0 = None
        var_0 = tree_0.__setitem__(int_0, registry_tree_0, registry_tree_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1
        bytes_0 = b'\x84\r\x01\x95S\xb7!\x88\x196\xff'
        bytes_1 = b'\x980>\xfb\xc3\xd0\x83\xd5\xcb\x1a\xe1TJ'
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(int_0, bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.tree()
        int_0 = 112
        str_0 = '\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    '
        float_0 = 2509.6
        tree_0 = module_0.Tree(int_0, str_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_0.tree()
        ordered_dict_0 = module_1.OrderedDict()
        str_0 = 'NBnV\tNY;\n4dQmw'
        str_1 = '`_0|9o|<E>5'
        var_1 = module_0.get_tree_node(ordered_dict_0, str_0, str_0, str_1)
    except BaseException:
        pass