# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    try:
        str_0 = None
        str_1 = 'attribute'
        str_2 = 'X+2/F'
        yields_section_0 = module_0.YieldsSection(str_0, str_2)
        str_3 = ';"WA@2p%79.V-BVxQ@'
        deprecation_section_0 = module_0.DeprecationSection(str_0, str_3)
        param_section_0 = module_0.ParamSection(str_0, str_2)
        str_4 = ''
        docstring_0 = module_0.parse(str_4)
        str_5 = '?\nzqc]p(5Y"3RxS\''
        str_6 = 'param'
        sphinx_section_0 = module_0._SphinxSection(str_5, str_6)
        section_0 = module_0.Section(str_0, str_0)
        iterable_0 = section_0.parse(str_4)
        str_7 = 'yields'
        k_v_section_0 = module_0._KVSection(str_1, str_7)
        iterable_1 = k_v_section_0.parse(str_1)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'i<7OU{\t\x0bH0X&'
        section_0 = module_0.Section(str_0, str_0)
        float_0 = -2553.957188
        numpydoc_parser_0 = module_0.NumpydocParser(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\r.,5;\\'
        returns_section_0 = module_0.ReturnsSection(str_0, str_0)
        str_1 = 'Parse the ReST-style docstring into its components.\n\n    :returns: parsed docstring\n    '
        str_2 = 'DS"ZEPqX>?\td;{zZrmo('
        k_v_section_0 = module_0._KVSection(str_2, str_2)
        iterable_0 = k_v_section_0.parse(str_1)
        str_3 = 'Can\'t infer indent from "{}"'
        str_4 = 'AM_5_:)R#h&vfy4&tdt'
        section_0 = module_0.Section(str_0, str_4)
        iterable_1 = section_0.parse(str_3)
        str_5 = '~1Jcj<*+a-RKl'
        numpydoc_parser_0 = module_0.NumpydocParser()
        docstring_0 = numpydoc_parser_0.parse(str_0)
        str_6 = 'Yield'
        k_v_section_1 = module_0._KVSection(str_6, str_5)
        str_7 = ".I'.`A$%b3f.|ka8"
        iterable_2 = k_v_section_0.parse(str_7)
        str_8 = '\t?7.~/c\rA'
        deprecation_section_0 = module_0.DeprecationSection(str_3, str_2)
        iterable_3 = deprecation_section_0.parse(str_8)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_3)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n    Function to do something initially\n\n    Parameters\n    ----------\n    var1 : int\n        square of this number\n\n    var2 : str\n        string data\n\n    Attribute\n    ---------\n    attr1 : int\n        square of this number\n\n    attr2 : str\n        string data\n\n    Returns\n    -------\n    var1 : int\n        squa;e of his number\n\n    var2 : str\n        string data\n\n    Warnings\n    --------\n    Thig is a warning\n\n    Warns\n    -----\n    This is another warning\n\n    RaiCs\n    ------\n    ValueError\n        if something is wrong\n\n    Example\n    -G-----\n    >>> a = 1\n    >>> b = 2\n\n    '
        str_1 = 'D9}ul;{vQ`R>De'
        k_v_section_0 = module_0._KVSection(str_0, str_1)
        iterable_0 = k_v_section_0.parse(str_0)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
        docstring_0 = numpydoc_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "g\x0bf\n6$,b>kj'b%\x0c"
        str_1 = '$6vPY&VhjtWJt{'
        str_2 = 'YuOPseVVaa>'
        deprecation_section_0 = module_0.DeprecationSection(str_1, str_2)
        iterable_0 = deprecation_section_0.parse(str_0)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
    except BaseException:
        pass