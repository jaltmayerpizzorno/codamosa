# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'Parse the Google-style docstring into its components.\n\n    :returns: parsed docstring\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '\n    Function to do something initially\n\n    Parameters\n    ----------\n    var1 : int\n        square of this number\n\n    var2 : str\n        string data\n\n    Attribute\n    ---------\n    attr1 : int\n        square of this number\n\n    attr2 : str\n        string data\n\n    Returns\n    -------\n    var1 : int\n        square of his number\n\n    var2 : str\n        string data\n\n    Warnings\n    --------\n    Thig is a warning\n\n    Warns\n    -----\n    This is another warning\n\n    RaiCs\n    ------\n    ValueError\n        if something is wrong\n\n    Example\n    -G-----\n    >>> a = 1\n    >>> b = 2\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = '\n    Function to do something initially\n\n    Parameters\n    ----------\n    var1 : int\n        square of this number\n\n    var2 : str\n        string data\n\n    Attribute\n    ---------\n    attr1 : int\n        square of this number\n\n    attr2 : str\n        string data\n\n    Returns\n    -------\n    var1 : int\n        square of his number\n\n    var2 : str\n        string data\n\n    Warnings\n    --------\n    Thig is a warning\n\n    Warns\n    -----\n    This is another warning\n\n    RaiCs\n    ------\n    ValueError\n        if something is wrong\n\n    Example\n    -G-----\n    >>> a = 1\n    >>> b = 2\n\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = module_0.parse(str_0)
    section_0 = module_0.Section(str_0, str_0)
    var_0 = numpydoc_parser_0.add_section(section_0)

def test_case_4():
    str_0 = '\n    uncion to do something initially\n\n    Parameters\n    ----------\n    var1 : int\n        square of this number\n\n    var2 : str\n        string data\n\n    Attribute\n    ---------\n    attr1 : int\n        square of this nuber\n\n    attr2 : str\n        string data\n    Returns\n    -------\n    var1 : int\n       square of his number\n\n    var2 : str\n        string data\n\n    Wrnings\n    --------\n    Thig is a warning\n\n    Warns\n    -----\n    This is another warning\n\n    Rais\n    ------\n    ValueError\n        if something is wrong\n\n    Example\n    -G-----\n    >>> a = 1\n    >>> b = 2\n\n    '
    docstring_0 = module_0.parse(str_0)
    str_1 = None
    docstring_1 = module_0.parse(str_1)

def test_case_5():
    str_0 = 'arg'
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = '\n        Define the parameters that describe the solver and its tolerances.\n\n        Parameters\n        ----------\n        tol : float\n            tolerance to achieve.\n        eps : float, optional\n            small number to prevent division by zero.\n        max_iter : int\n            maximum number of iterations of the solver.\n        x0 : array\n            initial guess.\n\n        Returns\n        -------\n        x : array\n            optimized parameters.\n        f : float\n            final function value.\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)
    var_0 = print(docstring_0)

def test_case_7():
    str_0 = '\n    Function to do somthing initially\n\n    Parameters\n    ----------\n    var1 : int\n        square of this number\n\n    var2 : str\n        string data\n    Attribut8\n    ---------\n    attr1 : int\n        square of this nuber]\n    attr2 : str\n        string data\n\n    Returns\n    -------\n    var1 : int\n        squa;e of his number\n\n    var2 : str\n        string data\n\n    Warnings\n    --------\n    Thig is a warning\n\n    Warns\n    -----\n    This is another warning\n\n    RaiCs\n    ------\n    ValueError\n        if something is wrong\n\n    Example\n    -G-----\n    >>> a = 1\n    >>> b = 2\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '\n    Short description\n\n    Long description.\n\n    Also long.\n\n    Parameters\n    ----------\n    arg_name : arg_type, optional\n        arg description. Default is ``5``.\n\n    Returns\n    -------\n    return_name : return_type\n        return description\n    '
    docstring_0 = numpydoc_parser_0.parse(str_0)
    var_0 = docstring_0.meta
    var_1 = len(var_0)

def test_case_9():
    str_0 = ' This is a numpy docstring, parse it for its elements.\n    Parameters\n    ----------\n    arg1 : int\n        An integer.\n    arg2 : float\n        A float.\n    Returns\n    ----------\n    str\n        A string.\n\n    See also\n    ----------\n    Docstring.\n    '
    docstring_0 = module_0.parse(str_0)