# Automatically generated by Pynguin.
import typesystem.formats as module_0
import datetime as module_1

def test_case_0():
    try:
        str_0 = '+uA"||t\\9HPeb-'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 944
        dict_0 = {}
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(int_0)
        base_format_0 = module_0.BaseFormat(**dict_0)
        u_u_i_d_format_1 = module_0.UUIDFormat(**dict_0)
        bool_1 = base_format_0.is_native_type(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "Expecting ',' delimiter"
        list_0 = []
        date_format_0 = module_0.DateFormat(*list_0)
        base_format_0 = module_0.BaseFormat(*list_0)
        var_0 = base_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-12-04T11:36:26'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2019-09-05T12:37:27-07:00'
        datetime_1 = date_time_format_0.validate(str_1)
        int_0 = -1
        int_1 = 72000
        timedelta_0 = module_1.timedelta()
        str_2 = '2019-09-05T12:37:27.567+05:30'
        optional_0 = date_time_format_0.serialize(datetime_0)
        datetime_2 = date_time_format_0.validate(str_2)
        base_format_0 = module_0.BaseFormat()
        optional_1 = base_format_0.serialize(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'uAn||t\\HPeb-'
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(str_0)
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'R3T+pBW\\"C\t$lMj0;x>g'
        time_format_0 = module_0.TimeFormat()
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'uA"||t\\HPeb-'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '2SizoD9'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(str_0)
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'lml'
        str_1 = 'YJ^?9C'
        str_2 = '^U0KK^k'
        str_3 = '9++L GI_N2h'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_3}
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_4 = u_u_i_d_format_0.serialize(dict_0)
        list_0 = None
        dict_1 = {}
        date_format_0 = module_0.DateFormat(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'/bb\x9eM\x1b'
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(bytes_0)
        str_0 = 'uA"||t\\HPeb-'
        time_format_1 = module_0.TimeFormat()
        time_0 = time_format_1.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = '25bfe1e3-c410-46?8-aa43ef128840gad99'
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = None
        dict_0 = {str_0: str_0}
        optional_0 = time_format_0.serialize(str_0)
        base_format_0 = module_0.BaseFormat(**dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2117-12-32'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-10-23T12:13:14.123456+01:00'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2019-10-23T12:13:14.123456Z'
        datetime_1 = date_time_format_0.validate(str_1)
        str_2 = '2019-10-23'
        datetime_2 = date_time_format_0.validate(str_2)
    except BaseException:
        pass

def test_case_17():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '12:60:00.2523'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-0-05T12:37:27-0700'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-0-05T12:37:27-70'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass