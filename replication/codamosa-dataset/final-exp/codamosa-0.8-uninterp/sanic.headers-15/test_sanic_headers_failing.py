# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        complex_0 = None
        optional_0 = module_0.parse_forwarded(complex_0, complex_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Q[Q'
        dict_0 = {str_0: str_0}
        tuple_0 = (str_0, dict_0)
        optional_0 = module_0.parse_xforwarded(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        iterable_0 = None
        dict_0 = module_0.fwd_normalize(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -525
        iterable_0 = None
        bytes_0 = module_0.format_http1_response(int_0, iterable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -1693
        float_0 = 104.6
        bytes_0 = module_0.format_http1_response(int_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'G;|<'
        str_1 = 'unknown'
        tuple_0 = module_0.parse_host(str_1)
        tuple_1 = module_0.parse_content_header(str_0)
        dict_0 = module_0.fwd_normalize(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '0;k/{:2n0]\x0bFOG7V'
        tuple_0 = module_0.parse_content_header(str_0)
        str_1 = None
        tuple_1 = module_0.parse_content_header(str_0)
        str_2 = module_0.fwd_normalize_address(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -115
        bytes_0 = b'\xda\t\xf4\x95\xc9\x93'
        bytes_1 = module_0.format_http1_response(int_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        int_0 = 8
        tuple_0 = ()
        bytes_0 = module_0.format_http1_response(int_0, tuple_0)
        str_0 = 'G;|<'
        dict_1 = module_0.fwd_normalize(dict_0)
        tuple_1 = module_0.parse_content_header(str_0)
        dict_2 = module_0.fwd_normalize(dict_0)
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = "s19^T%',;y\x0b*>"
        int_1 = 5498
        tuple_2 = module_0.parse_host(str_2)
        bytes_1 = module_0.format_http1_response(int_1, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ', '
        dict_0 = {}
        tuple_0 = module_0.parse_host(str_0)
        tuple_1 = module_0.parse_host(str_0)
        str_1 = 'unknown'
        tuple_2 = module_0.parse_content_header(str_0)
        dict_1 = module_0.fwd_normalize(dict_0)
        str_2 = module_0.fwd_normalize_address(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        dict_0 = None
        tuple_0 = (str_0, dict_0)
        str_1 = None
        tuple_1 = (tuple_0, tuple_0, dict_0, str_1)
        dict_1 = module_0.fwd_normalize(tuple_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'secret'
        str_1 = 'obfuscated'
        str_2 = (str_0, str_1)
        str_3 = (str_2, str_1)
        str_4 = [str_2, str_3]
        dict_0 = module_0.fwd_normalize(str_4)
        str_5 = (str_0, str_1)
        str_6 = 'for'
        str_7 = (str_6, str_1)
        str_8 = [str_5, str_7]
        dict_1 = module_0.fwd_normalize(str_8)
        str_9 = (str_6, str_1)
        str_10 = (str_0, str_1)
        str_11 = [str_9, str_10]
        dict_2 = module_0.fwd_normalize(str_11)
        str_12 = (str_8, str_1)
        str_13 = (str_0, str_1)
        str_14 = [str_12, str_13]
        dict_3 = module_0.fwd_normalize(str_14)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'host'
        str_1 = 'Real-host'
        str_2 = (str_0, str_1)
        str_3 = 'port'
        str_4 = '443'
        str_5 = (str_3, str_4)
        str_6 = 'path'
        str_7 = '/%C3%B6l'
        str_8 = (str_6, str_7)
        str_9 = (str_2, str_5, str_8)
        dict_0 = module_0.fwd_normalize(str_9)
        str_10 = (str_0, str_1)
        str_11 = (str_3, str_4)
        str_12 = (str_10, str_11)
        dict_1 = module_0.fwd_normalize(str_12)
        str_13 = (str_0, str_1)
        str_14 = (str_3, str_3)
        str_15 = (str_13, str_14)
        dict_2 = module_0.fwd_normalize(str_15)
        str_16 = (str_0, str_1)
        str_17 = 'unknown'
        str_18 = (str_16, str_17)
        dict_3 = module_0.fwd_normalize(str_18)
    except BaseException:
        pass