# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = 'pattern'
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        reference_0 = module_0.Reference(str_0)
        schema_definitions_1 = module_0.SchemaDefinitions(**dict_1)
        int_1 = schema_definitions_1.__len__()
        iterator_0 = schema_0.__iter__()
        iterator_1 = schema_0.__iter__()
        schema_1 = module_0.Schema()
        int_2 = schema_1.__len__()
        str_1 = schema_0.__repr__()
        schema_definitions_2 = module_0.SchemaDefinitions()
        any_0 = schema_definitions_0.__getitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        str_0 = ')'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(iterator_0)
    except BaseException:
        pass

def test_case_2():
    try:
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(schema_0)
        iterator_0 = schema_0.__iter__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(iterator_0, schema_0)
        list_0 = [iterator_0, iterator_0]
        str_0 = 'vo5B+v$&}NZ%Dht'
        schema_1 = module_0.Schema()
        dict_0 = {str_0: list_0, str_0: str_0}
        schema_definitions_1 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_1.__delitem__(schema_0)
    except BaseException:
        pass

def test_case_3():
    try:
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        str_0 = schema_0.__repr__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        schema_definitions_0.__setitem__(schema_definitions_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        list_0 = []
        str_0 = '2)h~+pP,2{/'
        str_1 = '(-?(?:0|[1-9]\\d*))(\\.\\d+)?([eE][-+]?\\d+)?'
        dict_0 = {str_0: list_0, str_1: list_0, str_0: str_1, str_0: list_0}
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0, **dict_0)
        schema_definitions_0.__delitem__(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        str_0 = 'Rt\'t|#"m('
        str_1 = 'c]&Lby/k"Cm[M5\n9;ui'
        dict_0 = {str_0: str_0, str_1: str_1}
        list_0 = [dict_0]
        schema_0 = module_0.Schema(*list_0)
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_0.__delitem__(field_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'date'
        field_0 = module_1.Field(description=str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        list_0 = [str_0]
        schema_0 = module_0.Schema(*list_0)
        str_1 = 'pattern'
        schema_1 = module_0.Schema()
        int_0 = schema_1.__len__()
        iterator_0 = schema_1.__iter__()
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
        reference_0 = module_0.Reference(str_1)
        schema_2 = module_0.Schema(*list_0)
        any_0 = reference_0.serialize(schema_0)
        schema_3 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ' %'
        dict_0 = {str_0: str_0}
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(dict_0)
        float_0 = -2306.09
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__delitem__(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        iterator_0 = schema_0.__iter__()
        int_0 = schema_0.__len__()
        bool_0 = schema_0.__eq__(schema_0)
        any_0 = schema_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'EfvX#LDPuXx\x0bj$/Cf'
        reference_0 = module_0.Reference(str_0)
        int_0 = 1
        reference_1 = module_0.Reference(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(str_0)
        str_1 = 'HRn?!b*P-nZldL2U'
        field_0 = module_1.Field(title=str_1, default=str_1)
        set_0 = {field_0, str_1, str_1, field_0}
        str_2 = 'dkYJ\tay4#\x0cR6u\x0cF$z'
        dict_0 = {str_1: str_1, str_1: set_0, str_2: set_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        int_0 = schema_definitions_0.__len__()
        str_3 = 'TVAIh'
        reference_0 = module_0.Reference(str_3)
        schema_definitions_1 = module_0.SchemaDefinitions()
        any_0 = reference_0.serialize(set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        schema_definitions_0.__setitem__(int_0, schema_definitions_0)
        schema_definitions_0.__setitem__(int_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -2437
        str_0 = '}O2%<( )\x0b-i6y~gv}'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'contains'
        bool_0 = None
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(bool_0, strict=bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(schema_0)
        str_0 = 'V^@M&$U[amc4.l'
        str_1 = '1W]2$K5*.4"!zuHvA'
        schema_1 = module_0.Schema()
        bool_1 = False
        field_0 = module_1.Field(title=str_0, description=str_1, allow_null=bool_1)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_definitions_1 = module_0.SchemaDefinitions()
        str_2 = 'vo5B+v$&}NZ%Dht'
        schema_2 = module_0.Schema()
        schema_definitions_2 = module_0.SchemaDefinitions()
        reference_0 = module_0.Reference(str_2)
        schema_definitions_3 = module_0.SchemaDefinitions()
        any_0 = schema_0.__getitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'date'
        dict_0 = {}
        reference_0 = module_0.Reference(str_0, **dict_0)
        list_0 = [reference_0]
        schema_0 = module_0.Schema(*list_0)
        iterator_0 = schema_0.__iter__()
        dict_1 = {}
        reference_1 = module_0.Reference(str_0, iterator_0, **dict_1)
        field_0 = module_1.Field(description=str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        str_1 = 'pattern'
        schema_1 = module_0.Schema()
        int_0 = schema_1.__len__()
        iterator_1 = schema_1.__iter__()
        reference_2 = module_0.Reference(str_1)
        schema_definitions_1 = module_0.SchemaDefinitions()
        int_1 = schema_definitions_1.__len__()
        iterator_2 = schema_0.__iter__()
        schema_2 = module_0.Schema()
        int_2 = schema_2.__len__()
        str_2 = schema_2.__repr__()
        bool_0 = None
        any_0 = reference_1.validate(dict_1, strict=bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        schema_0 = module_0.Schema()
        list_0 = [schema_0]
        schema_1 = module_0.Schema(*list_0)
        list_1 = [schema_1, list_0, schema_0, list_0]
        dict_0 = {}
        schema_metaclass_0 = module_0.SchemaMetaclass(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'date'
        field_0 = module_1.Field(description=str_0)
        list_0 = []
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0)
        schema_definitions_1 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_1)
        list_1 = [str_0]
        schema_0 = module_0.Schema(*list_1)
        iterator_0 = schema_0.__iter__()
        str_1 = 'pattern'
        schema_1 = module_0.Schema()
        bool_0 = schema_0.__eq__(schema_1)
        int_0 = schema_1.__len__()
        iterator_1 = schema_1.__iter__()
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
        schema_2 = module_0.Schema(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        iterator_0 = None
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_0.__setitem__(iterator_0, iterator_0)
        str_0 = "\r-3U.3#k,!'"
        str_1 = 'qdh$~5J'
        dict_1 = {str_0: str_0, str_1: str_1}
        reference_0 = module_0.Reference(str_0, dict_1)
        any_0 = reference_0.validate(str_1)
    except BaseException:
        pass