# Automatically generated by Pynguin.
import tornado.locks as module_0
import builtins as module_1

def test_case_0():
    try:
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__aenter__()
        event_0 = module_0.Event()
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_1():
    try:
        semaphore_0 = module_0.Semaphore()
        str_0 = semaphore_0.__repr__()
        semaphore_0.release()
        event_0 = module_0.Event()
        str_1 = event_0.__repr__()
        event_0.set()
        event_0.clear()
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        bounded_semaphore_0.release()
    except BaseException:
        pass

def test_case_2():
    try:
        event_0 = module_0.Event()
        bool_0 = event_0.is_set()
        event_0.set()
        lock_0 = module_0.Lock()
        none_type_0 = None
        awaitable_0 = event_0.wait(none_type_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        int_0 = -1769
        semaphore_1 = module_0.Semaphore(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        awaitable_0 = lock_0.acquire()
    except BaseException:
        pass

def test_case_5():
    try:
        event_0 = module_0.Event()
        event_0.set()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_6():
    try:
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_7():
    try:
        lock_0 = module_0.Lock()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_8():
    try:
        semaphore_0 = module_0.Semaphore()
        dict_0 = {}
        float_0 = 1.0
        bytes_0 = b'\xc32\x00\xd3\xe2\xe0`4#{D\xc1-\xec'
        event_0 = module_0.Event()
        event_0.set()
        lock_0 = module_0.Lock()
        bool_0 = event_0.is_set()
        lock_0.__exit__(dict_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        event_0 = module_0.Event()
        bool_0 = event_0.is_set()
        event_0.set()
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        str_0 = event_0.__repr__()
        event_0.clear()
        bool_1 = event_0.is_set()
        lock_1 = module_0.Lock()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_10():
    try:
        event_0 = module_0.Event()
        bool_0 = event_0.is_set()
        event_0.set()
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        str_0 = lock_0.__repr__()
        event_1 = module_0.Event()
        event_1.clear()
        int_0 = 980
        bounded_semaphore_0 = module_0.BoundedSemaphore(int_0)
        event_0.set()
        lock_1 = module_0.Lock()
        awaitable_0 = event_1.wait()
    except BaseException:
        pass

def test_case_11():
    try:
        event_0 = module_0.Event()
        str_0 = event_0.__repr__()
        semaphore_0 = module_0.Semaphore()
        bool_0 = event_0.is_set()
        event_0.set()
        type_0 = None
        base_exception_0 = module_1.BaseException()
        semaphore_0.__exit__(type_0, base_exception_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = None
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        base_exception_0 = module_1.BaseException(*list_0)
        bytes_0 = b''
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        str_0 = "\x0b/KGXR'C J\t=>,"
        releasing_context_manager_0 = module_0._ReleasingContextManager(str_0)
        timeout_garbage_collector_0 = module_0._TimeoutGarbageCollector()
        releasing_context_manager_0.__exit__(bool_0, base_exception_0, bytes_0)
    except BaseException:
        pass