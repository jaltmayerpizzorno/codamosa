# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        bool_0 = False
        last_0 = module_0.Last(bool_0)
        str_0 = last_0.__str__()
        str_1 = 'v%uX$J\x0cNS0p>a,0|'
        bytes_0 = None
        max_0 = module_0.Max(bytes_0)
        map_0 = module_0.Map(max_0)
        min_0 = module_0.Min(map_0)
        float_0 = 1644.0
        str_2 = min_0.__str__()
        first_0 = module_0.First(float_0)
        tuple_0 = (min_0, first_0)
        all_0 = module_0.All(tuple_0)
        semigroup_0 = module_0.Semigroup(all_0)
        bool_1 = semigroup_0.__eq__(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'fSz'
        first_0 = module_0.First(str_0)
        str_1 = first_0.__str__()
        bytes_0 = b'\xaa'
        min_0 = module_0.Min(bytes_0)
        list_0 = [bytes_0, bytes_0]
        semigroup_0 = module_0.Semigroup(list_0)
        semigroup_1 = module_0.Semigroup(semigroup_0)
        var_0 = semigroup_0.fold(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'$(\xba"U:(\xd5\xd1\xe1\x13\x05\xd7\x9f*'
        int_0 = -3659
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0}
        min_0 = module_0.Min(bytes_0)
        set_0 = set()
        bool_0 = False
        sum_0 = module_0.Sum(bool_0)
        tuple_0 = ()
        one_0 = module_0.One(tuple_0)
        last_0 = module_0.Last(one_0)
        first_0 = module_0.First(last_0)
        max_0 = module_0.Max(int_0)
        var_0 = one_0.concat(max_0)
        str_0 = sum_0.__str__()
        str_1 = max_0.__str__()
        last_1 = module_0.Last(one_0)
        var_1 = last_1.concat(sum_0)
        str_2 = last_0.__str__()
        sum_1 = module_0.Sum(set_0)
        map_0 = module_0.Map(dict_0)
        var_2 = map_0.concat(min_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'$(\xba"U:(\xd5\xd1\xe1\x13\x05\xd7\x9f*'
        int_0 = -3659
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0}
        min_0 = module_0.Min(bytes_0)
        one_0 = module_0.One(min_0)
        bool_0 = True
        sum_0 = module_0.Sum(bool_0)
        sum_1 = sum_0.concat(sum_0)
        map_0 = module_0.Map(dict_0)
        var_0 = map_0.concat(min_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'o\x0c\rbA*U{azV`qb'
        int_0 = 1630
        map_0 = module_0.Map(int_0)
        min_0 = module_0.Min(map_0)
        max_0 = module_0.Max(min_0)
        list_0 = [str_0]
        first_0 = module_0.First(list_0)
        var_0 = first_0.concat(max_0)
        last_0 = module_0.Last(str_0)
        max_1 = module_0.Max(last_0)
        bool_0 = False
        semigroup_0 = module_0.Semigroup(bool_0)
        one_0 = module_0.One(semigroup_0)
        var_1 = map_0.concat(one_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'$(\xba"U:(\xd5\xd1\xe1\x13\x05\xd7\x9f*'
        int_0 = -3659
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0}
        min_0 = module_0.Min(bytes_0)
        bool_0 = False
        sum_0 = module_0.Sum(bool_0)
        tuple_0 = ()
        one_0 = module_0.One(tuple_0)
        last_0 = module_0.Last(one_0)
        first_0 = module_0.First(last_0)
        max_0 = module_0.Max(first_0)
        str_0 = max_0.__str__()
        last_1 = module_0.Last(one_0)
        var_0 = last_1.concat(sum_0)
        sum_1 = sum_0.concat(sum_0)
        map_0 = module_0.Map(dict_0)
        var_1 = map_0.concat(min_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -491.0
        map_0 = module_0.Map(float_0)
        set_0 = set()
        var_0 = map_0.concat(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'y\\hQ2aP"qs~/u['
        semigroup_0 = None
        semigroup_1 = module_0.Semigroup(semigroup_0)
        dict_0 = {str_0: str_0, str_0: str_0}
        max_0 = module_0.Max(dict_0)
        var_0 = max_0.concat(semigroup_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'$(\xba"U:(\xd5\xd1\xe1\x13\x05\xd7\x9f*'
        int_0 = -3659
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0}
        min_0 = module_0.Min(bytes_0)
        set_0 = set()
        bool_0 = False
        sum_0 = module_0.Sum(bool_0)
        tuple_0 = ()
        one_0 = module_0.One(tuple_0)
        last_0 = module_0.Last(one_0)
        first_0 = module_0.First(last_0)
        str_0 = min_0.__str__()
        max_0 = module_0.Max(first_0)
        str_1 = max_0.__str__()
        one_1 = module_0.One(first_0)
        last_1 = module_0.Last(one_1)
        var_0 = last_1.concat(sum_0)
        sum_1 = module_0.Sum(set_0)
        map_0 = module_0.Map(dict_0)
        var_1 = map_0.concat(min_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -2201.34
        min_0 = module_0.Min(float_0)
        dict_0 = {float_0: float_0}
        set_0 = set()
        last_0 = module_0.Last(float_0)
        tuple_0 = (dict_0, set_0, last_0)
        var_0 = min_0.concat(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'$(\xba"U:(\xd5\xd1\xe1\x13\x05\xd7\x9f*'
        int_0 = -3659
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0}
        min_0 = module_0.Min(bytes_0)
        tuple_0 = ()
        one_0 = module_0.One(tuple_0)
        last_0 = module_0.Last(one_0)
        first_0 = module_0.First(last_0)
        max_0 = module_0.Max(int_0)
        var_0 = one_0.concat(max_0)
        max_1 = module_0.Max(first_0)
        str_0 = max_1.__str__()
        last_1 = module_0.Last(one_0)
        str_1 = last_0.__str__()
        map_0 = module_0.Map(dict_0)
        var_1 = map_0.concat(min_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'O(C\n\tn6?4&a'
        set_0 = {str_0, str_0}
        max_0 = module_0.Max(set_0)
        semigroup_0 = module_0.Semigroup(str_0)
        bool_0 = False
        sum_0 = module_0.Sum(bool_0)
        int_0 = -67
        min_0 = module_0.Min(int_0)
        one_0 = module_0.One(min_0)
        str_1 = one_0.__str__()
        first_0 = module_0.First(sum_0)
        var_0 = min_0.concat(sum_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'$(\xba"U:(\xd5\xd1\xe1\x13\x05\xd7\x9f*'
        int_0 = -3659
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0}
        min_0 = module_0.Min(bytes_0)
        bool_0 = False
        sum_0 = module_0.Sum(bool_0)
        map_0 = module_0.Map(dict_0)
        var_0 = map_0.concat(min_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'A'
        bool_0 = True
        all_0 = module_0.All(bool_0)
        all_1 = {str_0: all_0}
        map_0 = module_0.Map(all_1)
        all_2 = {str_0: all_0}
        map_1 = module_0.Map(all_2)
        var_0 = map_0.concat(map_1)
        var_1 = var_0.value
        all_3 = module_0.All(bool_0)
    except BaseException:
        pass