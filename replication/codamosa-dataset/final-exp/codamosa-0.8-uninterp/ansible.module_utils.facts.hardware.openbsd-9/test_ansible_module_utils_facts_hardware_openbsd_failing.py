# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.openbsd as module_0

def test_case_0():
    try:
        open_b_s_d_hardware_0 = None
        open_b_s_d_hardware_1 = module_0.OpenBSDHardware(open_b_s_d_hardware_0)
        bool_0 = True
        bytes_0 = b'\xda'
        str_0 = 'e\t;GGY.FusJW'
        open_b_s_d_hardware_2 = module_0.OpenBSDHardware(bytes_0, str_0)
        dict_0 = {open_b_s_d_hardware_0: open_b_s_d_hardware_1, open_b_s_d_hardware_0: bool_0, open_b_s_d_hardware_2: open_b_s_d_hardware_2, open_b_s_d_hardware_1: open_b_s_d_hardware_1}
        tuple_0 = (open_b_s_d_hardware_1,)
        open_b_s_d_hardware_3 = module_0.OpenBSDHardware(dict_0, tuple_0)
        var_0 = open_b_s_d_hardware_1.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        open_b_s_d_hardware_collector_0 = module_0.OpenBSDHardwareCollector()
        bool_0 = False
        tuple_0 = (bool_0,)
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(open_b_s_d_hardware_collector_0, tuple_0)
        var_0 = open_b_s_d_hardware_0.get_memory_facts()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xef\x8d\\\xcal\xcf\x14\x19^\xc8\xfd\xa6\xf7\xae&\x11\xea'
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(bytes_0)
        var_0 = open_b_s_d_hardware_0.get_uptime_facts()
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(tuple_0)
        var_0 = open_b_s_d_hardware_0.get_processor_facts()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        open_b_s_d_hardware_collector_0 = module_0.OpenBSDHardwareCollector(bool_0)
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(open_b_s_d_hardware_collector_0)
        var_0 = open_b_s_d_hardware_0.get_device_facts()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1693
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(int_0)
        var_0 = open_b_s_d_hardware_0.get_dmi_facts()
    except BaseException:
        pass