# Automatically generated by Pynguin.
import ansible.module_utils.urls as module_0
import urllib.request as module_1

def test_case_0():
    try:
        str_0 = 'in'
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0, dict_0, str_0, dict_0)
        h_t_t_p_error_processor_0 = module_1.HTTPErrorProcessor()
        missing_module_error_0 = module_0.MissingModuleError(h_t_t_p_error_processor_0, dict_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(missing_module_error_0, request_0)
        var_0 = s_s_l_validation_handler_0.http_request(request_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        var_0 = module_0.atexit_remove_file(bool_0)
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        var_0 = custom_h_t_t_p_s_handler_0.https_open(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '?rHh\\?v'
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0, dict_0, dict_0, dict_0)
        var_0 = request_0.post(str_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        proxy_error_0 = module_0.ProxyError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(proxy_error_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "Zp`YYnrBJm7]48)#'\n"
        bytes_0 = b'#\x80,19\xa5\xac\xf81\x81\xe9-'
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bytes_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(str_0, unix_h_t_t_p_connection_0, unix_h_t_t_p_connection_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '.}'
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0, dict_0)
        var_0 = request_0.post(str_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        bytes_0 = b'\x1d\x85\x10\x9bX\x81\x16B\xd1\xa3\xda\x98\xef\xcf\xd7\xc4\xfa\xfdR'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, bytes_0)
        var_0 = s_s_l_validation_handler_0.http_request(s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_8():
    try:
        proxy_error_0 = module_0.ProxyError()
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        bytes_0 = b'\x1d\x85\x10\x9bX\x81\x16B\xd1\xa3\xda\x98\xef\xcf\xd7\xc4\xfa\xfdR'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, bytes_0)
        set_0 = set()
        var_0 = s_s_l_validation_handler_0.make_context(s_s_l_validation_error_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'tunnel'
        list_0 = [str_0]
        bool_0 = False
        list_1 = []
        float_0 = 2779.59
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(bool_0, list_1, float_0)
        var_0 = s_s_l_validation_handler_0.make_context(str_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        var_0 = module_0.rfc2822_date_string(s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'F3igvkwGOn'
        list_0 = [str_0, str_0]
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0)
        s_s_l_validation_handler_0 = None
        request_0 = module_0.Request(custom_h_t_t_p_s_connection_0, s_s_l_validation_handler_0)
    except BaseException:
        pass

def test_case_12():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(parse_result_dotted_dict_0)
        bool_0 = None
        str_0 = 'X.w \r\t&\t3m'
        str_1 = 'Cannot user "%s" to hidden user list.'
        dict_0 = {str_1: str_1, str_0: parse_result_dotted_dict_0, str_0: bool_0, str_0: str_0}
        missing_module_error_0 = module_0.MissingModuleError(bool_0, dict_0)
        dict_1 = {}
        no_s_s_l_error_0 = module_0.NoSSLError(**dict_1)
        request_0 = module_0.Request(dict_1, no_s_s_l_error_0)
        var_0 = module_0.RedirectHandlerFactory()
        var_1 = request_0.put(missing_module_error_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '4pqzo~0I"s|bk_v'
        var_0 = module_0.prepare_multipart(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'J[e?qt'
        list_0 = [str_0]
        dict_0 = {}
        var_0 = module_0.url_argument_spec()
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0, **dict_0)
        no_s_s_l_error_0 = module_0.NoSSLError(*list_0)
        var_1 = module_0.get_channel_binding_cert_hash(no_s_s_l_error_0)
        var_2 = custom_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        unix_h_t_t_p_s_connection_0 = None
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(unix_h_t_t_p_s_connection_0)
        str_0 = '&^qgq)z0p*HWUR)ro0ky'
        dict_0 = {unix_h_t_t_p_s_connection_0: unix_h_t_t_p_connection_0, bool_0: str_0}
        var_0 = module_0.fetch_file(bool_0, unix_h_t_t_p_connection_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'A9:lK4G'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_0)
        missing_module_error_0 = module_0.MissingModuleError(unix_h_t_t_p_handler_0, unix_h_t_t_p_handler_0)
        list_0 = [missing_module_error_0, str_0, missing_module_error_0, unix_h_t_t_p_handler_0]
        list_1 = [missing_module_error_0, list_0, list_0, unix_h_t_t_p_handler_0]
        connection_error_0 = module_0.ConnectionError(*list_1)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        float_0 = 1088.77265
        request_with_method_0 = module_0.RequestWithMethod(list_0, connection_error_0, s_s_l_validation_error_0, missing_module_error_0, float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'MjI+XEz~>3J1!_U'
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(str_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '<h\x0c'
        list_0 = []
        var_0 = module_0.basic_auth_header(str_0, list_0)
        float_0 = 60.0
        str_1 = ' '
        dict_0 = {str_1: str_1, str_1: str_1, str_1: float_0, str_1: str_1}
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(float_0, dict_0)
        proxy_error_0 = module_0.ProxyError(**dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'J%e?t'
        list_0 = [str_0, str_0]
        no_s_s_l_error_0 = module_0.NoSSLError(*list_0)
        dict_0 = {}
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0, **dict_0)
        tuple_0 = (no_s_s_l_error_0, custom_h_t_t_p_s_connection_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(tuple_0)
        unix_h_t_t_p_connection_1 = module_0.UnixHTTPConnection(unix_h_t_t_p_connection_0)
        var_0 = unix_h_t_t_p_connection_1.__call__()
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = 5097.4277
        int_0 = -2661
        str_0 = 'Collection metadata file `{manifest_filename!s}` at `{meta_file!s}` is expected to have a valid SemVer version value but got {version!s}'
        str_1 = '{(k2=a9{=/'
        dict_0 = {str_0: int_0, str_0: str_0, str_1: str_1}
        int_1 = -1926
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(int_0, dict_0, int_1)
        var_0 = h_t_t_p_s_client_auth_handler_0.https_open(float_0)
    except BaseException:
        pass

def test_case_21():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        tuple_0 = ()
        no_s_s_l_error_0 = module_0.NoSSLError()
        bytes_0 = b'\xa4[\x10'
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        var_0 = module_0.fetch_url(tuple_0, no_s_s_l_error_0, bytes_0, custom_h_t_t_p_s_handler_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 's'
        dict_0 = {str_0: str_0}
        str_1 = 'Darwin'
        request_0 = module_0.Request()
        var_0 = request_0.options(str_1, **dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        no_s_s_l_error_0 = module_0.NoSSLError()
        bool_0 = False
        var_0 = module_0.getpeercert(no_s_s_l_error_0, bool_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 438
        list_0 = None
        float_0 = 0.0
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(float_0)
        proxy_error_0 = module_0.ProxyError()
        tuple_0 = (int_0, list_0, proxy_error_0)
        list_1 = None
        unix_h_t_t_p_s_connection_0 = None
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(list_1, unix_h_t_t_p_s_connection_0)
        dict_0 = {int_0: list_0, tuple_0: s_s_l_validation_handler_0, s_s_l_validation_handler_0: list_0}
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(dict_0)
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        str_0 = '0_<a^^|\x0baD\'NP"~<p9w'
        str_1 = 'KPoC'
        dict_1 = {str_0: str_0, str_1: float_0, str_0: unix_h_t_t_p_handler_0, str_0: tuple_0}
        var_0 = unix_h_t_t_p_handler_0.http_open(dict_1)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '%'
        int_0 = 1224
        list_0 = []
        set_0 = set()
        tuple_0 = (str_0, list_0, set_0)
        var_0 = module_0.open_url(str_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_26():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(parse_result_dotted_dict_0)
        bool_0 = None
        str_0 = 'Cannot user "%s" to hidden user list.'
        set_0 = {str_0, bool_0, str_0, str_0}
        dict_0 = {str_0: bool_0, str_0: str_0, str_0: set_0}
        var_0 = parse_result_dotted_dict_0.as_list()
        parse_result_dotted_dict_1 = module_0.ParseResultDottedDict()
        missing_module_error_0 = module_0.MissingModuleError(bool_0, dict_0)
        list_0 = [str_0, var_0, unix_h_t_t_p_connection_0]
        str_1 = '.}'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(list_0, str_1)
        dict_1 = {}
        no_s_s_l_error_0 = module_0.NoSSLError(**dict_1)
        request_0 = module_0.Request(dict_1, no_s_s_l_error_0)
        var_1 = module_0.get_channel_binding_cert_hash(unix_h_t_t_p_connection_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_0)
        tuple_0 = (missing_module_error_0, unix_h_t_t_p_connection_0)
        list_1 = [request_0, parse_result_dotted_dict_0, request_0]
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(list_1)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(custom_h_t_t_p_s_handler_0)
        var_2 = module_0.open_url(list_0, no_s_s_l_error_0, missing_module_error_0, s_s_l_validation_error_0, tuple_0, unix_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b'\xa3\x9d.\xb0\xe1j\xe3"K\xe4'
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        var_0 = parse_result_dotted_dict_0.as_list()
        list_0 = [var_0, var_0, bytes_0, parse_result_dotted_dict_0]
        list_1 = [var_0, parse_result_dotted_dict_0]
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(list_1, parse_result_dotted_dict_0)
        var_1 = s_s_l_validation_handler_0.validate_proxy_response(list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        bytes_0 = b']\x159\xc6\xfb'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, bytes_0)
        tuple_0 = ()
        set_0 = {s_s_l_validation_error_0, s_s_l_validation_handler_0, tuple_0}
        var_0 = s_s_l_validation_handler_0.make_context(tuple_0, set_0)
    except BaseException:
        pass

def test_case_29():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        float_0 = -2495.3
        s_s_l_validation_error_1 = module_0.SSLValidationError()
        set_0 = {float_0, float_0, s_s_l_validation_error_1, s_s_l_validation_error_0}
        bytes_0 = None
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bytes_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_1, set_0, unix_h_t_t_p_connection_0)
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(float_0, s_s_l_validation_handler_0)
        str_0 = "\twybA'Q+W^9YI!"
        list_0 = []
        list_1 = []
        request_0 = module_0.Request(list_0, list_1)
        var_0 = request_0.patch(h_t_t_p_s_client_auth_handler_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        proxy_error_0 = module_0.ProxyError()
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        bytes_0 = b'\x1d\x85\x10\x9bX\x81\x16B\xd1\xa3\xda\x98\xef\xcf\xd7\xc4\xfa\xfdR'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, bytes_0)
        set_0 = {s_s_l_validation_error_0}
        var_0 = s_s_l_validation_handler_0.make_context(s_s_l_validation_error_0, set_0)
    except BaseException:
        pass

def test_case_31():
    try:
        dict_0 = {}
        no_s_s_l_error_0 = module_0.NoSSLError(**dict_0)
        request_0 = module_0.Request(dict_0, no_s_s_l_error_0)
        var_0 = request_0.head(dict_0, **dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'J[e?qDXt'
        list_0 = [str_0]
        dict_0 = {}
        int_0 = -2204
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(int_0)
        var_0 = unix_h_t_t_p_s_connection_0.__call__(*list_0, **dict_0)
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0, **dict_0)
        var_1 = custom_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_33():
    try:
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        dict_0 = {}
        request_0 = module_0.Request()
        var_0 = request_0.get(dict_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = '})i~q)3*EZ{111N5C}$v'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(str_0, str_0, str_0)
        bytes_0 = b"\xc6\xf7\xe1\xdcp\x8f]\xb5\x1eZ\xcd%'\xa5\x83\xa2\x03\x1c\xe0N"
        var_0 = s_s_l_validation_handler_0.http_request(bytes_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'J[e?t'
        list_0 = [str_0]
        dict_0 = {}
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0, **dict_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError(**dict_0)
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        var_0 = module_0.build_ssl_validation_error(str_0, s_s_l_validation_error_0, h_t_t_p_s_client_auth_handler_0, str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 'foo'
        var_0 = module_0.build_ssl_validation_error(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '.}'
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0, dict_0)
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        float_0 = 3573.5
        connection_error_0 = module_0.ConnectionError()
        list_0 = [request_0, request_0, dict_0]
        proxy_error_0 = module_0.ProxyError(*list_0, **dict_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, proxy_error_0)
        var_0 = s_s_l_validation_handler_0.validate_proxy_response(parse_result_dotted_dict_0, float_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'http://www.google.com'
        str_1 = 'GET'
        request_with_method_0 = module_0.RequestWithMethod(str_0, str_1)
        var_0 = request_with_method_0.get_method()
        bytes_0 = b'\x82Y\xa3#\x11<w\r\xe7'
        str_2 = "BM'gG("
        dict_0 = {str_2: str_1, str_1: str_2}
        list_0 = [str_2, var_0, var_0, dict_0]
        list_1 = []
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(list_1)
        var_1 = unix_h_t_t_p_connection_0.__call__(*list_0)
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(bytes_0, **dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        list_0 = []
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_0)
        dict_0 = {s_s_l_validation_error_0: s_s_l_validation_error_0}
        var_0 = module_0.prepare_multipart(dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        dict_0 = {}
        bool_0 = False
        float_0 = 1297.5598061844546
        str_0 = '0?wk8TH`[vNX5VK'
        dict_1 = {str_0: bool_0, str_0: dict_0, bool_0: str_0}
        list_0 = []
        proxy_error_0 = module_0.ProxyError(*list_0, **dict_0)
        unix_h_t_t_p_s_connection_0 = None
        list_1 = None
        int_0 = 404
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        var_0 = module_0.open_url(dict_1, proxy_error_0, dict_0, unix_h_t_t_p_s_connection_0, list_1, int_0, s_s_l_validation_error_0, float_0)
    except BaseException:
        pass

def test_case_41():
    try:
        dict_0 = {}
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        str_0 = 'gkz(d~7f\rq'
        var_0 = module_0.atexit_remove_file(str_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(dict_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        list_0 = [dict_0]
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(list_0)
        int_0 = -970
        str_1 = '{=HS<k\rm\x0b{]ZhT+,=op#'
        dict_1 = {unix_h_t_t_p_connection_0: int_0, s_s_l_validation_error_0: str_1}
        bytes_0 = b'\x1c\x82\xc4~'
        proxy_error_0 = module_0.ProxyError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(proxy_error_0)
        request_0 = module_0.Request(dict_1, int_0, int_0, bytes_0, s_s_l_validation_error_0, unix_h_t_t_p_s_connection_0)
        var_1 = request_0.delete(h_t_t_p_s_client_auth_handler_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '.}'
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0, dict_0)
        list_0 = None
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        int_0 = 20
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(dict_0, int_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(s_s_l_validation_handler_0)
        dict_1 = {int_0: dict_0, s_s_l_validation_handler_0: request_0}
        missing_module_error_0 = module_0.MissingModuleError(custom_h_t_t_p_s_handler_0, dict_1)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(missing_module_error_0)
        request_with_method_0 = None
        int_1 = 1290
        int_2 = None
        bool_0 = None
        var_0 = module_0.open_url(unix_h_t_t_p_connection_0, list_0, request_with_method_0, request_with_method_0, int_1, s_s_l_validation_handler_0, int_2, bool_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = ''
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0, dict_0)
        var_0 = request_0.post(str_0, **dict_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'J[e?qt'
        list_0 = [str_0]
        dict_0 = {}
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0, **dict_0)
        var_0 = custom_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '$&Fv%N^N yiH>T6'
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0, dict_0)
        str_1 = "\n        Walk the ast tree for the python module.\n        :arg module_fqn: The fully qualified name to reach this module in dotted notation.\n            example: ansible.module_utils.basic\n        :arg is_pkg_init: Inform the finder it's looking at a package init (eg __init__.py) to allow\n            relative import expansion to use the proper package level without having imported it locally first.\n\n        Save submodule[.submoduleN][.identifier] into self.submodules\n        when they are from ansible.module_utils or ansible_collections packages\n\n        self.submodules will end up with tuples like:\n          - ('ansible', 'module_utils', 'basic',)\n          - ('ansible', 'module_utils', 'urls', 'fetch_url')\n          - ('ansible', 'module_utils', 'database', 'postgres')\n          - ('ansible', 'module_utils', 'database', 'postgres', 'quote')\n          - ('ansible', 'module_utils', 'database', 'postgres', 'quote')\n          - ('ansible_collections', 'my_ns', 'my_col', 'plugins', 'module_utils', 'foo')\n\n        It's up to calling code to determine whether the final element of the\n        tuple are module names or something else (function, class, or variable names)\n        .. seealso:: :python3:class:`ast.NodeVisitor`\n        "
        var_0 = request_0.post(str_1, **dict_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'na|6+EvNoYg'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.prepare_multipart(dict_0)
        proxy_error_0 = module_0.ProxyError()
        float_0 = 1.0
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(float_0)
        str_1 = ''
        var_1 = module_0.getpeercert(str_1, str_1)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'o{G"X<0A]3!{)B%J]'
        dict_0 = {}
        dict_1 = {str_0: str_0}
        bytes_0 = b'\x0f\xd2\x86\xcfy\xa1+'
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(bytes_0)
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict(**dict_0)
        list_0 = [bytes_0]
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_0, **dict_0)
        request_0 = module_0.Request(dict_1, custom_h_t_t_p_s_handler_0, dict_0, parse_result_dotted_dict_0, dict_0, s_s_l_validation_error_0)
        s_s_l_validation_handler_0 = None
        list_1 = []
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(list_1)
        var_0 = request_0.post(s_s_l_validation_handler_0, unix_h_t_t_p_s_connection_0)
    except BaseException:
        pass