# Automatically generated by Pynguin.
import collections as module_0
import flutils.codecs.raw_utf8_escape as module_1
import codecs as module_2

def test_case_0():
    try:
        bytes_0 = b'\xcc\x01m#'
        int_0 = None
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_0.UserString(tuple_0)
        module_1.register()
        set_0 = {user_string_0, tuple_0}
        user_string_1 = module_0.UserString(set_0)
        module_1.register()
        tuple_1 = module_1.encode(user_string_1)
    except BaseException:
        pass

def test_case_1():
    try:
        module_1.register()
        bytes_0 = b';`Wb\x1f\xcfPi'
        str_0 = '}X|H5bulFn\rn^H_'
        tuple_0 = module_1.decode(bytes_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'|\xd0fy'
        str_0 = '(tx\x0b%r\\c@[WX'
        user_string_0 = module_0.UserString(str_0)
        tuple_0 = module_1.encode(user_string_0)
        tuple_1 = module_1.decode(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\\%s'
        tuple_0 = module_1.decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        user_string_0 = module_0.UserString(list_0)
        tuple_0 = module_1.encode(user_string_0)
        module_1.register()
        module_1.register()
        str_0 = 'Unable to find the file path for the command: %r'
        tuple_1 = module_1.encode(str_0)
        module_1.register()
        module_1.register()
        float_0 = 668.099
        tuple_2 = module_1.decode(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'eutf8h'
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xbeX\x10\x87\xed\xd8\xcfT[\xf6Mj|'
        user_string_0 = module_0.UserString(bytes_0)
        var_0 = user_string_0.isalnum()
        var_1 = user_string_0.casefold()
        tuple_0 = module_1.encode(user_string_0, user_string_0)
    except BaseException:
        pass