# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.sunos as module_0

def test_case_0():
    try:
        str_0 = '%s daemon-reload'
        sun_o_s_hardware_0 = module_0.SunOSHardware(str_0)
        var_0 = sun_o_s_hardware_0.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 60.0
        set_0 = {float_0, float_0, float_0}
        sun_o_s_hardware_0 = None
        tuple_0 = (float_0, set_0, sun_o_s_hardware_0)
        sun_o_s_hardware_1 = module_0.SunOSHardware(tuple_0)
        var_0 = sun_o_s_hardware_1.get_cpu_facts()
    except BaseException:
        pass

def test_case_2():
    try:
        sun_o_s_hardware_collector_0 = module_0.SunOSHardwareCollector()
        sun_o_s_hardware_collector_1 = module_0.SunOSHardwareCollector(sun_o_s_hardware_collector_0)
        sun_o_s_hardware_collector_2 = module_0.SunOSHardwareCollector(sun_o_s_hardware_collector_1)
        bytes_0 = b''
        sun_o_s_hardware_0 = module_0.SunOSHardware(bytes_0)
        var_0 = sun_o_s_hardware_0.get_memory_facts()
    except BaseException:
        pass

def test_case_3():
    try:
        sun_o_s_hardware_collector_0 = module_0.SunOSHardwareCollector()
        tuple_0 = (sun_o_s_hardware_collector_0,)
        int_0 = 344
        sun_o_s_hardware_0 = module_0.SunOSHardware(int_0)
        set_0 = {sun_o_s_hardware_collector_0, tuple_0}
        sun_o_s_hardware_1 = module_0.SunOSHardware(sun_o_s_hardware_0, set_0)
        var_0 = sun_o_s_hardware_1.get_dmi_facts()
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -3342.83
        sun_o_s_hardware_0 = module_0.SunOSHardware(float_0)
        var_0 = sun_o_s_hardware_0.get_device_facts()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -343.6
        set_0 = {float_0, float_0}
        sun_o_s_hardware_collector_0 = module_0.SunOSHardwareCollector()
        sun_o_s_hardware_0 = module_0.SunOSHardware(set_0, sun_o_s_hardware_collector_0)
        var_0 = sun_o_s_hardware_0.get_uptime_facts()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xf2\xefN[\xcf\xec7_\xb2w\xa7k\x8fU\x96\x13\xc8s\x7f'
        bool_0 = False
        complex_0 = None
        bytes_1 = None
        tuple_0 = (bool_0, complex_0, bytes_1)
        sun_o_s_hardware_0 = module_0.SunOSHardware(tuple_0)
        var_0 = sun_o_s_hardware_0.get_cpu_facts(bytes_0)
    except BaseException:
        pass