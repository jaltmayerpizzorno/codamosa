# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        bool_0 = True
        var_0 = module_0.no_map_instance(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b''
        list_0 = [bytes_0]
        var_0 = module_0.map_structure(list_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        str_0 = '__broadcasted__'
        tuple_0 = (str_0, str_0)
        var_0 = module_0.map_structure(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        var_0 = module_0.map_structure(bool_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0}
        var_0 = module_0.map_structure(bool_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1243.5
        str_0 = '-@.u?]C7C<2P\\u'
        var_0 = module_0.map_structure(float_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'GJ~e x8dQB&?;ap=CX'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        int_0 = 512
        module_0.register_no_map_class(int_0)
        var_0 = module_0.no_map_instance(dict_0)
        bool_0 = False
        module_0.register_no_map_class(bool_0)
        tuple_0 = (int_0,)
        var_1 = module_0.no_map_instance(tuple_0)
        tuple_1 = (dict_0,)
        var_2 = module_0.map_structure_zip(str_0, tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -3937.39919
        str_0 = ',9sc8R\t/d66!nu'
        var_0 = module_0.map_structure_zip(float_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        int_0 = -701
        list_0 = [int_0, int_0]
        tuple_0 = (list_0,)
        var_0 = module_0.no_map_instance(tuple_0)
        var_1 = module_0.map_structure_zip(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        var_0 = module_0.no_map_instance(list_0)
        str_0 = 'jfo=+gd\r\r'
        str_1 = 'i'
        str_2 = 'Non-blocking version of :meth:`apply`.\n\n        Please refer to Python documentation on :py:meth:`multiprocessing.pool.Pool.apply_async` for details.\n        '
        tuple_0 = (str_0, str_1, str_2, str_0)
        dict_0 = {}
        var_1 = module_0.map_structure(tuple_0, dict_0)
        float_0 = -3292.383466
        var_2 = module_0.map_structure(list_0, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = set()
        float_0 = -298.74
        var_0 = module_0.no_map_instance(float_0)
        bytes_0 = b'\x8a\xf1'
        list_0 = [var_0, var_0, float_0]
        var_1 = None
        list_1 = [var_1, var_1, var_1]
        list_2 = [bytes_0, list_0, list_1, var_1]
        var_2 = module_0.map_structure(list_2, set_0)
        bytes_1 = b'|\xe8_\xadt\xda\x92\xd6\x14\xd5L\x13\xf5^P\xc6\xd6\xea'
        var_3 = module_0.map_structure_zip(set_0, bytes_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'a'
        str_1 = 'c'
        str_2 = [str_0, str_1, str_1]
        var_0 = module_0.no_map_instance(str_2)
        str_3 = [str_2, str_1]
        var_1 = module_0.no_map_instance(str_3)
        str_4 = 'd'
        var_2 = [str_0, var_1, str_4]
        var_3 = module_0.no_map_instance(var_2)
        var_4 = [var_0, var_3]
        var_5 = lambda x: x + str_0
        var_6 = module_0.map_structure(var_5, var_4)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'r'
        set_0 = {str_0, str_0, str_0, str_0}
        list_0 = [set_0, str_0, set_0, str_0]
        tuple_0 = (set_0,)
        var_0 = module_0.map_structure_zip(list_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '=M<Y}Ki0\x0c\r=c'
        float_0 = -1819.0
        tuple_0 = (float_0,)
        str_1 = 'B<|8ICL8T}r).rSg[e\x0c'
        tuple_1 = (tuple_0, str_1)
        var_0 = module_0.map_structure_zip(str_0, tuple_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1604
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        list_1 = module_0.reverse_map(dict_0)
        var_0 = module_0.no_map_instance(int_0)
        str_0 = 'y+\x0b"\''
        list_2 = [var_0, int_0]
        var_1 = module_0.map_structure_zip(str_0, list_2)
    except BaseException:
        pass