# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '^zc'
    dict_0 = {str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(str_0, dict_0)

def test_case_2():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    bytes_0 = b'Mn\x0b\xc0\xfcH@\x88\xbb\x15<\x87g\xf8\x8dK\xf14\xcd\x89'
    int_0 = True
    validation_0 = module_0.Validation(bytes_0, int_0)
    var_0 = validation_0.__eq__(set_0)

def test_case_3():
    str_0 = '^zc'
    dict_0 = {str_0: str_0, str_0: str_0}
    validation_0 = module_0.Validation(str_0, dict_0)
    var_0 = validation_0.__str__()

def test_case_4():
    str_0 = '\n        Returns successful Validation with value and empty errors list.\n\n        :params value: value to store in Validation\n        :type value: A\n        :returns: Successful Validation\n        :rtype: Validation[A, []]\n        '
    validation_0 = module_0.Validation(str_0, str_0)
    var_0 = validation_0.to_try()
    int_0 = True
    complex_0 = None
    validation_1 = module_0.Validation(int_0, complex_0)
    var_1 = validation_0.is_fail()

def test_case_5():
    int_0 = -3513
    dict_0 = {int_0: int_0, int_0: int_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.to_either()
    bool_0 = False
    list_0 = [bool_0]
    int_1 = 1413
    dict_1 = {}
    validation_1 = module_0.Validation(int_1, dict_1)
    var_1 = validation_1.to_lazy()
    str_0 = 'W'
    tuple_0 = (str_0,)
    validation_2 = module_0.Validation(list_0, tuple_0)
    var_2 = validation_2.to_either()
    list_1 = []
    validation_3 = module_0.Validation(bool_0, list_1)
    var_3 = validation_2.to_lazy()
    var_4 = validation_3.to_maybe()

def test_case_6():
    str_0 = 'Lv}i~H'
    dict_0 = {}
    validation_0 = module_0.Validation(str_0, dict_0)
    var_0 = validation_0.to_either()
    float_0 = -2695.4882
    var_1 = validation_0.__eq__(float_0)

def test_case_7():
    complex_0 = None
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0, dict_0]
    validation_0 = module_0.Validation(dict_0, list_0)
    var_0 = validation_0.to_try()
    tuple_0 = ()
    dict_1 = {}
    var_1 = validation_0.to_maybe()
    validation_1 = module_0.Validation(tuple_0, dict_1)
    var_2 = validation_1.to_either()

def test_case_8():
    int_0 = -2813
    list_0 = [int_0, int_0, int_0]
    validation_0 = module_0.Validation(int_0, list_0)
    var_0 = validation_0.to_lazy()

def test_case_9():
    complex_0 = None
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    list_0 = [dict_0, dict_0]
    validation_0 = module_0.Validation(dict_0, list_0)
    var_0 = validation_0.to_try()
    bytes_0 = b'\xbf\x1b5\x0e\x84\xe3'
    int_0 = -1536
    validation_1 = module_0.Validation(bytes_0, int_0)
    tuple_0 = ()
    dict_1 = {}
    validation_2 = module_0.Validation(tuple_0, dict_1)
    var_1 = validation_2.__str__()

def test_case_10():
    bool_0 = None
    int_0 = 356
    set_0 = {bool_0, bool_0, int_0, bool_0}
    str_0 = 'MP$PkK'
    validation_0 = module_0.Validation(set_0, str_0)
    var_0 = validation_0.to_maybe()
    float_0 = -8.111642
    dict_0 = {int_0: int_0}
    validation_1 = module_0.Validation(float_0, dict_0)
    var_1 = validation_1.to_box()
    validation_2 = module_0.Validation(int_0, set_0)
    var_2 = validation_1.to_lazy()
    list_0 = [bool_0, bool_0, bool_0]
    var_3 = validation_2.to_maybe()
    var_4 = validation_1.__eq__(list_0)
    var_5 = validation_1.__str__()
    var_6 = validation_1.to_try()
    bytes_0 = b'G\x8b9n\xfc\xc6'
    validation_3 = module_0.Validation(dict_0, bytes_0)
    var_7 = validation_3.is_fail()
    int_1 = False
    validation_4 = module_0.Validation(validation_3, int_1)
    var_8 = validation_2.is_fail()
    var_9 = validation_1.__eq__(validation_2)