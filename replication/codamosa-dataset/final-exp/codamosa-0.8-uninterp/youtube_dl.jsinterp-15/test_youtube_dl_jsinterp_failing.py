# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        str_0 = '1|(hbDfI\x0c#D ISRSI5KG'
        list_0 = [str_0, str_0]
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '|(hbDfI\x0c#D ISRSI5KG'
        list_0 = [str_0, str_0]
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'iT%*dexOf'
        list_0 = [str_0, str_0]
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '%s = {baz: function(a, b) {return a + b;}, bar: function(){return 1;}};'
        var_0 = str_0 % str_0
        j_s_interpreter_0 = module_0.JSInterpreter(var_0)
        var_1 = j_s_interpreter_0.extract_object(str_0)
        str_1 = 'baz'
        var_2 = var_1[str_1]
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "=@;Vy#]'2Vh"
        bytes_0 = b'\xa4d\xdc\xaa\xd7\xf9\x1f{\x14iz\xeb\xb4@\x97\xcd\xa3'
        int_0 = 3066
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, int_0)
        var_0 = j_s_interpreter_0.call_function(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        str_0 = "=@;Vy#]'2Vh"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.extract_function(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = None
        str_0 = ')'
        list_0 = [str_0, str_0, str_0]
        str_1 = ''
        j_s_interpreter_0 = module_0.JSInterpreter(list_0, str_1)
        var_0 = j_s_interpreter_0.call_function(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'AM='
        int_0 = 431
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, j_s_interpreter_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        bytes_0 = b'Q\xf3\x9f\x8f'
        j_s_interpreter_0 = module_0.JSInterpreter(bytes_0)
        bool_0 = False
        j_s_interpreter_1 = module_0.JSInterpreter(bool_0, dict_0)
        float_0 = -777.3791
        var_0 = j_s_interpreter_0.interpret_statement(dict_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'ACllan Kroeker'
        int_0 = 449
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        str_1 = 'b.reverse()'
        var_0 = j_s_interpreter_0.interpret_expression(str_1, str_1, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'ACllan Kroeker'
        int_0 = 449
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        str_1 = 'b.reverse()'
        var_0 = {}
        var_1 = j_s_interpreter_0.interpret_expression(str_1, var_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'var b = "abcd".split("");'
        list_0 = [str_0, str_0]
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 0
        str_0 = 'var b = "abcd".split(";'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        str_1 = 'b.reverse()'
        var_0 = {}
        var_1 = j_s_interpreter_0.interpret_expression(str_1, var_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'var x = "hello";'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'return "hello";'
        var_0 = {}
        var_1 = j_s_interpreter_0.interpret_statement(str_1, var_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'https://twitter.com/poco_dandy/status/1150646424461176832'
        int_0 = 442
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        str_1 = '$efc[\\\r\\$g/*dP"I\\]'
        var_0 = j_s_interpreter_0.interpret_expression(str_1, j_s_interpreter_0, int_0)
    except BaseException:
        pass