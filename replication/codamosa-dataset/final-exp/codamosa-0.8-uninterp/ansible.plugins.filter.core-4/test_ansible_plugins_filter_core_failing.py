# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0
import ansible.template as module_1

def test_case_0():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '#D$'
        dict_0 = {str_0: str_0}
        var_0 = module_0.to_nice_yaml(dict_0, **dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xc5\xc9l\n\xce\x1e'
        bool_0 = True
        var_0 = module_0.mandatory(bool_0)
        list_0 = [bytes_0]
        var_1 = module_0.randomize_list(list_0)
        var_2 = module_0.to_json(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n    - name: get the filename from a path\n      debug: var=item\n      with_items: "{{ "/path/to/filename" | regex_search(\'(?<=/)[^/]+$\') }}"\n    - name: get the filename from a path and the parent directory\'s name\n      debug: var=item\n      with_items: "{{ "/path/to/filename" | regex_search(\'(?<=/)[^/]+$\', \'\\g<1>\') }}"\n    - name: get the filename from a path, which contains umlauts (äöü), and the parent directory\'s name\n      debug: var=item\n      with_items: "{{ "/path/tö/filename" | regex_search(\'(?<=/)[^/]+$\', \'\\g<1>\') }}"\n    '
        dict_0 = {str_0: str_0}
        var_0 = module_0.regex_escape(dict_0)
        tuple_0 = (dict_0,)
        list_0 = [var_0]
        var_1 = module_0.to_nice_json(tuple_0, *list_0)
        filter_module_0 = None
        list_1 = [str_0, filter_module_0]
        var_2 = module_0.to_datetime(filter_module_0, list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '$w\r0F>b=n\\St~>BBxscs'
        var_0 = module_0.to_datetime(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -2195
        var_0 = module_0.from_yaml_all(int_0)
        list_0 = [var_0, var_0, int_0]
        var_1 = module_0.strftime(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '-.l"\x0bs 6j|Q!bNX[PN'
        list_0 = [str_0, str_0]
        filter_module_0 = module_0.FilterModule()
        dict_0 = {}
        var_0 = module_0.regex_search(dict_0, filter_module_0, *list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 0
        float_0 = -249.124211
        var_0 = module_0.regex_escape(int_0, float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xcc/k\xde\xb9V\xa7\xc6\xd6\xb9z!\xd7!\xdc\xfa\r\xe4\xc4\x84'
        var_0 = module_0.regex_replace()
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        bool_0 = False
        str_0 = 'posix_basic'
        var_1 = module_0.from_yaml(str_0)
        var_2 = module_0.combine()
        str_1 = '-m=_\nk{\nxNP;dL>\x0bp='
        var_3 = module_0.rand(str_1, str_1, bool_0)
        var_4 = module_0.b64decode(list_0)
        filter_module_0 = module_0.FilterModule()
        var_5 = module_0.strftime(list_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '?jKr1ALzym'
        set_0 = {filter_module_0, str_0}
        var_0 = module_0.rand(filter_module_0, str_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'zQ'
        var_0 = module_0.get_hash(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        var_0 = module_0.get_hash(bool_0)
        str_0 = '=E*7b!!eL'
        set_0 = {str_0, str_0, str_0}
        str_1 = 'posix_extended'
        float_0 = -3059.3074
        ansible_undefined_0 = module_1.AnsibleUndefined(float_0)
        dict_0 = None
        tuple_0 = (set_0, str_1, ansible_undefined_0, dict_0)
        var_1 = module_0.mandatory(tuple_0)
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0, str_0]
        var_2 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        var_0 = module_0.get_encrypted_password(bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '-.l"\x0bs 6j|Q!bNX[PN'
        list_0 = [str_0, str_0]
        var_0 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        var_0 = module_0.comment(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = "R^}4s|yC\t\x0b)_V'aFiA"
        bytes_0 = b'Gjv\xba\x00W\r'
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.extract(str_0, bytes_0, filter_module_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        var_0 = module_0.get_hash(bool_0)
        filter_module_0 = module_0.FilterModule()
        str_0 = ''
        float_0 = 1.5
        dict_0 = {str_0: float_0}
        filter_module_1 = module_0.FilterModule()
        dict_1 = {}
        var_1 = module_0.do_groupby(filter_module_1, dict_0, dict_1)
    except BaseException:
        pass

def test_case_17():
    try:
        list_0 = []
        var_0 = module_0.b64encode(list_0)
        str_0 = 'h\r8y+'
        dict_0 = {str_0: list_0, str_0: str_0}
        var_1 = module_0.subelements(dict_0, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        set_0 = set()
        var_0 = module_0.b64decode(set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b''
        var_0 = module_0.mandatory(bytes_0)
        list_0 = [var_0, bytes_0, bytes_0, var_0]
        int_0 = 294
        bool_0 = True
        str_0 = None
        dict_0 = {str_0: list_0, str_0: str_0, str_0: bool_0}
        set_0 = {int_0}
        var_1 = module_0.flatten(dict_0, set_0)
        var_2 = module_0.get_hash(int_0, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '-.l"\x0bsV6j|Q!bNX#[\nPN'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        list_0 = []
        str_0 = 'h8y+'
        dict_0 = {str_0: list_0}
        var_0 = module_0.subelements(dict_0, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'7\xfe\x96\xdd\xab\x92'
        list_0 = []
        tuple_0 = (list_0,)
        list_1 = [tuple_0, bytes_0, tuple_0, tuple_0]
        bool_0 = False
        var_0 = module_0.subelements(list_1, bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = False
        tuple_0 = ()
        var_0 = module_0.subelements(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_24():
    try:
        var_0 = module_0.combine()
        str_0 = 'test ab cd'
        str_1 = 'ab'
        dict_0 = {}
        var_1 = module_0.dict_to_list_of_dict_key_value_elements(dict_0)
        var_2 = module_0.regex_search(str_0, str_1)
        str_2 = '\nM`=8Vz;QA-\x0bO:| \\'
        ansible_undefined_0 = module_1.AnsibleUndefined(str_0, str_2)
        var_3 = module_0.randomize_list(ansible_undefined_0)
        tuple_0 = None
        type_0 = None
        ansible_undefined_1 = module_1.AnsibleUndefined(str_1, type_0)
        float_0 = 6275.078
        dict_1 = None
        bool_0 = False
        var_4 = module_0.extract(float_0, tuple_0, dict_1, bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'chbr".FkjvZr{'
        list_0 = [str_0]
        list_1 = None
        str_1 = 'repoquery is required to use list= with this module. Please install the yum-utils package.'
        dict_0 = {str_0: list_1, str_0: list_1, str_1: list_0}
        int_0 = 800
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(dict_0, list_1, int_0)
        float_0 = -4028.0
        int_1 = 4120
        var_1 = module_0.from_yaml(int_1)
        bytes_0 = b'\x04\xa9:\xbd_\x042\x84\x9e8\xca,rD'
        var_2 = module_0.regex_search(float_0, bytes_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '!Y'
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = None
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        list_0 = []
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
        list_1 = [list_0, var_0, var_0]
        list_2 = [var_0, var_0, list_1, var_0]
        var_1 = module_0.mandatory(list_2)
        bool_0 = True
        var_2 = module_0.fileglob(bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        var_0 = module_0.combine()
        int_0 = -67
        str_0 = 'k'
        var_1 = module_0.path_join(str_0)
        tuple_0 = ()
        bool_0 = False
        list_0 = [str_0, bool_0, int_0, tuple_0]
        var_2 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '\n    - name: get the filename from a path\n      debug: var=item\n      with_items: "{{ "/path/to/filename" | regex_search(\'(?<=/)[^/]+$\') }}"\n    - name: get the filename from a path and the parent directory\'s name\n      debug: var=item\n      with_items: "{{ "/path/to/filename" | regex_search(\'(?<=/)[^/]+$\', \'\\g<1>\') }}"\n    - name: get the filename from a path, which contains umlauts (äöü), and the parent directory\'s name\n      debug: var=item\n      with_items: "{{ "/path/tö/filename" | regex_search(\'(?<=/)[^/]+$\', \'\\g<1>\') }}"\n    '
        str_1 = '7fh*,PW!M".'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {str_0: str_1, str_0: filter_module_0}
        var_0 = filter_module_0.filters()
        var_1 = module_0.extract(str_1, filter_module_0, filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = -2019
        var_0 = module_0.to_bool(int_0)
        list_0 = []
        var_1 = module_0.fileglob(list_0)
    except BaseException:
        pass

def test_case_32():
    try:
        float_0 = 2572.102349
        var_0 = module_0.mandatory(float_0)
        list_0 = [float_0, float_0, var_0, var_0]
        var_1 = module_0.to_uuid(list_0)
        bool_0 = True
        list_1 = [list_0, list_0, bool_0, bool_0]
        str_0 = '/mJ+rZg$C1r'
        var_2 = module_0.subelements(list_1, str_0)
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = False
        bytes_0 = b'N\x9aH\xa8D\xd1'
        str_0 = 'yUqC^;iCO~h\\:U4Y'
        dict_0 = {str_0: bool_0, str_0: bytes_0, str_0: str_0}
        tuple_0 = (bytes_0, bool_0, dict_0, bytes_0)
        float_0 = 512.0
        var_0 = module_0.to_uuid(tuple_0, float_0)
    except BaseException:
        pass

def test_case_34():
    try:
        list_0 = []
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
        list_1 = [list_0, var_0, var_0]
        list_2 = [var_0, var_0, list_1, var_0]
        var_1 = module_0.mandatory(list_2)
        bytes_0 = b'D\xc7\xa2\xc2\x95\xb8\xdb7\xa3,\xe3I\xb5\xd6H\x08\xa0\x00J'
        var_2 = module_0.path_join(bytes_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'test{ ab cd'
        str_1 = 'ab'
        var_0 = module_0.regex_search(str_0, str_1)
        dict_0 = {}
        list_0 = [str_0, str_1, str_0, str_0]
        var_1 = module_0.path_join(list_0)
        bytes_0 = b'\x952\xbf\t\xf1\t'
        type_0 = None
        ansible_undefined_0 = module_1.AnsibleUndefined(str_1, type_0)
        filter_module_0 = module_0.FilterModule(**dict_0)
        int_0 = -543
        tuple_0 = (bytes_0, ansible_undefined_0, filter_module_0, int_0)
        var_2 = module_0.get_hash(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '(Mj+0WB'
        str_1 = 'bhyve'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        var_0 = module_0.randomize_list(dict_0)
        set_0 = {str_1, str_1, str_0, str_1}
        list_0 = [str_0, set_0, var_0]
        int_0 = 1028
        bytes_0 = b'!\xda\xca`\xb0'
        tuple_0 = (bytes_0,)
        tuple_1 = (set_0, list_0, int_0, tuple_0)
        str_2 = '@C/T!&]rZoT\t{Nz'
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.quote(list_0)
        var_2 = module_0.quote(filter_module_0)
        var_3 = module_0.regex_findall(tuple_1, int_0, str_2, dict_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '-.l"\x0bs 6j|Q!bNX[PN'
        dict_0 = {}
        list_0 = [str_0, dict_0, dict_0, str_0]
        str_1 = ',+yJH&S;o'
        var_0 = module_0.flatten(dict_0, list_0)
        str_2 = "\ndescription:\n- Templates are processed by the L(Jinja2 templating language,http://jinja.pocoo.org/docs/).\n- Documentation on the template formatting can be found in the\n  L(Template Designer Documentation,http://jinja.pocoo.org/docs/templates/).\n- Additional variables listed below can be used in templates.\n- C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to\n  describe the template name, host, modification time of the template file and the owner uid.\n- C(template_host) contains the node name of the template's machine.\n- C(template_uid) is the numeric user id of the owner.\n- C(template_path) is the path of the template.\n- C(template_fullpath) is the absolute path of the template.\n- C(template_destpath) is the path of the template on the remote system (added in 2.8).\n- C(template_run_date) is the date that the template was rendered.\noptions:\n  src:\n    description:\n    - Path of a Jinja2 formatted template on the Ansible controller.\n    - This can be a relative or an absolute path.\n    - The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output\n      template.\n    type: path\n    required: yes\n  dest:\n    description:\n    - Location to render the template to on the remote machine.\n    type: path\n    required: yes\n  newline_sequence:\n    description:\n    - Specify the newline sequence to use for templating files.\n    type: str\n    choices: [ '\\n', '\\r', '\\r\\n' ]\n    default: '\\n'\n    version_added: '2.4'\n  block_start_string:\n    description:\n    - The string marking the beginning of a block.\n    type: str\n    default: '{%'\n    version_added: '2.4'\n  block_end_string:\n    description:\n    - The string marking the end of a block.\n    type: str\n    default: '%}'\n    version_added: '2.4'\n  variable_start_string:\n    description:\n    - The string marking the beginning of a print statement.\n    type: str\n    default: '{{'\n    version_added: '2.4'\n  variable_end_string:\n    description:\n    - The string marking the end of a print statement.\n    type: str\n    default: '}}'\n    version_added: '2.4'\n  comment_start_string:\n    description:\n    - The string marking the beginning of a comment statement.\n    type: str\n    version_added: '2.12'\n  comment_end_string:\n    description:\n    - The string marking the end of a comment statement.\n    type: str\n    version_added: '2.12'\n  trim_blocks:\n    description:\n    - Determine when newlines should be removed from blocks.\n    - When set to C(yes) the first newline after a block is removed (block, not variable tag!).\n    type: bool\n    default: yes\n    version_added: '2.4'\n  lstrip_blocks:\n    description:\n    - Determine when leading spaces and tabs should be stripped.\n    - When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block.\n    - This functionality requires Jinja 2.7 or newer.\n    type: bool\n    default: no\n    version_added: '2.6'\n  force:\n    description:\n    - Determine when the file is being transferred if the destination already exists.\n    - When set to C(yes), replace the remote file when contents are different than the source.\n    - When set to C(no), the file will only be transferred if the destination does not exist.\n    type: bool\n    default: yes\n  output_encoding:\n    description:\n    - Overrides the encoding used to write the template file defined by C(dest).\n    - It defaults to C(utf-8), but any encoding supported by python can be used.\n    - The source template file must always be encoded using C(utf-8), for homogeneity.\n    type: str\n    default: utf-8\n    version_added: '2.7'\nnotes:\n- Including a string that uses a date in the template will result in the template being marked 'changed' each time.\n- Since Ansible 0.9, templates are loaded with C(trim_blocks=True).\n- >\n  Also, you can override jinja2 settings by adding a special header to template file.\n  i.e. C(#jinja2:variable_start_string:'[%', variable_end_string:'%]', trim_blocks: False)\n  which changes the variable interpolation markers to C([% var %]) instead of C({{ var }}).\n  This is the best way to prevent evaluation of things that look like, but should not be Jinja2.\n- Using raw/endraw in Jinja2 will not work as you expect because templates in Ansible are recursively\n  evaluated.\n- To find Byte Order Marks in files, use C(Format-Hex <file> -Count 16) on Windows, and use C(od -a -t x1 -N 16 <file>)\n  on Linux.\n"
        dict_1 = {str_0: str_0, str_1: str_0, str_2: str_2}
        tuple_0 = (list_0, dict_1, str_1)
        var_1 = module_0.regex_findall(dict_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 425
        str_0 = 'H'
        tuple_0 = ()
        bool_0 = True
        tuple_1 = (str_0, tuple_0, bool_0)
        bool_1 = False
        list_0 = [tuple_1, bool_1, int_0, tuple_0]
        var_0 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = '7fh*,PW!M".'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {str_0: str_0, str_0: filter_module_0}
        var_0 = module_0.extract(str_0, filter_module_0, filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        list_0 = None
        int_0 = -168
        list_1 = [list_0, list_0, list_0]
        var_0 = module_0.ternary(list_0, int_0, list_1)
        float_0 = -985.92
        var_1 = module_0.flatten(float_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bytes_0 = b'7\xfe\x96\xdd\xab\x92'
        dict_0 = None
        tuple_0 = (bytes_0, dict_0)
        dict_1 = {tuple_0: dict_0, tuple_0: bytes_0, dict_0: dict_0}
        str_0 = 'kTbI/>8k8\\'
        var_0 = module_0.rand(dict_1, dict_0, str_0)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 2104
        bytes_0 = b'o9\n\xa6\x90\xec\xc8\xbc\xf6\x1dS\xf5\xe4)K\xce'
        var_0 = module_0.get_encrypted_password(int_0, int_0, bytes_0)
    except BaseException:
        pass

def test_case_43():
    try:
        set_0 = None
        tuple_0 = (set_0,)
        str_0 = ''
        var_0 = module_0.strftime(tuple_0, str_0)
    except BaseException:
        pass

def test_case_44():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = module_0.b64encode(filter_module_0)
        tuple_0 = None
        list_0 = [tuple_0, tuple_0]
        tuple_1 = (tuple_0, list_0)
        var_2 = module_0.list_of_dict_key_value_elements_to_dict(tuple_1)
    except BaseException:
        pass

def test_case_45():
    try:
        list_0 = []
        str_0 = '-M8EN)'
        dict_0 = {}
        var_0 = module_0.subelements(dict_0, str_0)
        str_1 = 'C=SO Cy`3t<VT \nA>K=p'
        str_2 = '=I=6_d1d}xx"!+0+'
        list_1 = []
        dict_1 = {str_1: str_0, str_2: list_0, str_1: str_0, str_2: list_1}
        var_1 = module_0.combine(**dict_1)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'O.'
        ansible_undefined_0 = module_1.AnsibleUndefined(str_0)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        bytes_0 = None
        var_0 = module_0.to_bool(bytes_0)
        str_1 = 'yumstate'
        str_2 = 'nr'
        dict_0 = {str_1: async_iterator_0, str_1: ansible_undefined_0, str_2: str_1}
        var_1 = module_0.comment(async_iterator_0, **dict_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = '\n7'
        bool_0 = True
        int_0 = 4095
        list_0 = [str_0, bool_0, bool_0, bool_0]
        var_0 = module_0.rand(str_0, bool_0, int_0, list_0)
    except BaseException:
        pass

def test_case_48():
    try:
        list_0 = []
        var_0 = module_0.b64encode(list_0)
        str_0 = 'h\r8y+'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {}
        float_0 = 3756.408
        str_1 = ',Gfm%@'
        var_1 = module_0.rand(filter_module_0, dict_0, float_0, str_0, str_1)
    except BaseException:
        pass

def test_case_49():
    try:
        bool_0 = None
        str_0 = None
        dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
        var_0 = module_0.b64encode(dict_0)
        str_1 = '#'
        var_1 = module_0.b64encode(str_1)
        float_0 = None
        var_2 = module_0.to_uuid(bool_0, float_0)
    except BaseException:
        pass

def test_case_50():
    try:
        int_0 = 114
        ansible_undefined_0 = module_1.AnsibleUndefined()
        str_0 = 'AYG~_Vem%'
        list_0 = [int_0]
        var_0 = module_0.randomize_list(str_0, list_0)
        var_1 = module_0.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_51():
    try:
        list_0 = []
        dict_0 = {}
        list_1 = []
        list_2 = [list_1, list_0, dict_0]
        var_0 = module_0.subelements(list_2, list_0)
    except BaseException:
        pass

def test_case_52():
    try:
        var_0 = module_0.combine()
        list_0 = [var_0, var_0, var_0, var_0]
        bool_0 = True
        int_0 = 2354
        list_1 = [bool_0]
        var_1 = module_0.extract(list_0, bool_0, int_0, list_1)
    except BaseException:
        pass

def test_case_53():
    try:
        var_0 = module_0.combine()
        float_0 = -89.6339119910217
        str_0 = '~|DW~\x0c\rg$fQ.@'
        list_0 = [float_0, str_0]
        tuple_0 = (list_0,)
        var_1 = module_0.flatten(tuple_0)
        list_1 = []
        var_2 = module_0.to_bool(float_0)
        bytes_0 = b'\xc3\x91P\x03A\xaa\xf2'
        var_3 = module_0.flatten(bytes_0, list_1)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = '\n'
        list_0 = None
        var_0 = module_0.randomize_list(list_0)
        float_0 = 2.499260762684056
        var_1 = module_0.flatten(str_0, float_0)
        float_1 = -249.124211
        list_1 = [str_0]
        var_2 = module_0.randomize_list(list_1, float_1)
    except BaseException:
        pass

def test_case_55():
    try:
        bytes_0 = b'GRtR\x7f\x11\xfcv\x97`\xc8\xe8\xca'
        var_0 = module_0.mandatory(bytes_0)
        str_0 = 'Check mode: No changes made, but would have if not in check mode'
        var_1 = module_0.to_bool(str_0)
        filter_module_0 = module_0.FilterModule()
        list_0 = None
        bytes_1 = b'y\xdc\x81\x18\x1c\x9d\xdf&\xaa'
        var_2 = module_0.ternary(list_0, str_0, bytes_1, filter_module_0)
        list_1 = [filter_module_0, str_0]
        var_3 = module_0.combine(*list_1)
    except BaseException:
        pass

def test_case_56():
    try:
        var_0 = module_0.regex_replace()
        str_0 = '1!'
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.randomize_list(filter_module_0)
        var_2 = module_0.regex_search(str_0, str_0)
        var_3 = filter_module_0.filters()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = '&}\x0bE'
        str_2 = ')f5V='
        bool_0 = False
        var_4 = module_0.flatten(str_1, str_2, bool_0)
        str_3 = ''
        var_5 = module_0.from_yaml_all(str_3)
        var_6 = module_0.comment(dict_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = 'Hello, world! How do we $escape everything? Yes, \\too.'
        str_1 = 'posix_basic'
        var_0 = module_0.regex_escape(str_0, str_1)
        str_2 = 'Hello, world! How do we \x0bescape everytin2?Yes, \\too.'
        str_3 = 'pythkon'
        var_1 = module_0.regex_escape(str_2, str_3)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = ''
        ansible_undefined_0 = module_1.AnsibleUndefined(str_0, str_0)
        var_0 = module_0.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_59():
    try:
        str_0 = 'Hello, world! How do we $escape everything? Yes, \\too.'
        str_1 = 'posix_basic'
        var_0 = module_0.regex_escape(str_0, str_1)
        str_2 = 'Hello, world! How do we \x0bescape everytin2?Yes, \\too.'
        str_3 = 'posix_extended'
        var_1 = module_0.regex_escape(str_2, str_3)
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = 'l:q9(ogsM>}\x0b'
        var_0 = module_0.strftime(str_0)
        str_1 = '=E*7b!!eL'
        ansible_undefined_0 = module_1.AnsibleUndefined(str_1)
        var_1 = module_0.mandatory(ansible_undefined_0, str_1)
    except BaseException:
        pass

def test_case_61():
    try:
        str_0 = 'test aCb cd ab'
        str_1 = '\\$8?gHBm=\x0ck&i?V'
        float_0 = -2247.009
        list_0 = [str_1, str_0]
        var_0 = module_0.regex_search(str_1, float_0, *list_0)
    except BaseException:
        pass

def test_case_62():
    try:
        str_0 = 'M6T'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0]
        str_1 = 'hv2@O(B\x0b@/}d*D,'
        complex_0 = None
        var_0 = module_0.subelements(list_0, str_1, complex_0)
    except BaseException:
        pass

def test_case_63():
    try:
        var_0 = module_0.regex_replace()
        bool_0 = False
        str_0 = 'posix_basic'
        str_1 = 'MHXmY6V"FKr'
        var_1 = module_0.combine()
        str_2 = '-m=_\nk{\nxNP;dL>\x0bp='
        var_2 = module_0.rand(str_2, str_2, bool_0)
        float_0 = 1660.55606
        ansible_undefined_0 = module_1.AnsibleUndefined(str_0, str_1, float_0)
        var_3 = module_0.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_64():
    try:
        str_0 = '\\6T'
        str_1 = '\\$8?gHBm=\x0ck&i?V'
        dict_0 = {}
        var_0 = module_0.combine(**dict_0)
        float_0 = -2247.0
        list_0 = [str_0, str_0, str_0]
        var_1 = module_0.regex_search(str_1, float_0, *list_0)
    except BaseException:
        pass