# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = '0[v^P4>#m_gy'
        tuple_0 = ()
        bytes_0 = b'\xee\xe4'
        list_0 = [bytes_0, str_0, tuple_0, bytes_0]
        bool_0 = False
        maybe_0 = module_0.Maybe(tuple_0, bool_0)
        var_0 = maybe_0.map(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 687.0
        bytes_0 = b'\xda\xc0?\xb5\xa3-\x10\x87\xa8\xeeA'
        callable_0 = None
        list_0 = []
        bool_0 = True
        maybe_0 = module_0.Maybe(list_0, bool_0)
        var_0 = maybe_0.map(callable_0)
        bool_1 = False
        maybe_1 = module_0.Maybe(bytes_0, bool_1)
        var_1 = maybe_1.to_lazy()
        var_2 = maybe_1.ap(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        object_0 = module_1.object()
        bool_0 = True
        maybe_0 = module_0.Maybe(object_0, bool_0)
        bool_1 = False
        maybe_1 = module_0.Maybe(maybe_0, bool_1)
        var_1 = maybe_0.to_lazy()
        var_2 = maybe_1.bind(var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        str_0 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: All[B]\n        :returns: new All with last truly value or first falsy\n        :rtype: All[A | B]\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bool_1 = False
        maybe_0 = module_0.Maybe(dict_0, bool_1)
        var_0 = maybe_0.get_or_else(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        bool_0 = False
        float_0 = 3385.85542
        maybe_0 = module_0.Maybe(list_0, bool_0)
        maybe_1 = module_0.Maybe(maybe_0, bool_0)
        maybe_2 = module_0.Maybe(list_0, bool_0)
        bool_1 = False
        maybe_3 = module_0.Maybe(maybe_1, bool_1)
        var_0 = maybe_3.get_or_else(float_0)
        bytes_0 = b'7'
        var_1 = maybe_0.filter(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = None
        bool_0 = True
        maybe_0 = module_0.Maybe(var_0, bool_0)
        var_1 = lambda x: x
        var_2 = maybe_0.filter(var_1)
        bool_1 = False
        maybe_1 = module_0.Maybe(bool_0, bool_1)
        var_3 = lambda x: x
        var_4 = maybe_1.filter(var_3)
        maybe_2 = module_0.Maybe(bool_0, bool_1)
        var_5 = lambda x: x > bool_1
        maybe_3 = module_0.Maybe(bool_0, bool_1)
        var_6 = lambda x: x < bool_1
        var_7 = maybe_3.filter(var_6)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = lambda x: x
        bool_0 = False
        maybe_0 = module_0.Maybe(bool_0, bool_0)
        var_1 = lambda x: x
        var_2 = maybe_0.filter(var_1)
        maybe_1 = module_0.Maybe(bool_0, bool_0)
        var_3 = maybe_1.filter(bool_0)
    except BaseException:
        pass