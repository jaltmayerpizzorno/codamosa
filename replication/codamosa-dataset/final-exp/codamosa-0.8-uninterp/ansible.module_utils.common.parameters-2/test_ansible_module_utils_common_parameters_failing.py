# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        bytes_0 = b'J\x11\xda\x11\xb1'
        bool_0 = True
        var_0 = module_0.sanitize_keys(bool_0, bytes_0)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        bool_0 = False
        set_0 = set()
        str_0 = 'uslk-w01l7\tk-x'
        tuple_0 = ()
        dict_0 = {str_0: bool_0, str_0: list_0, str_0: tuple_0, str_0: tuple_0}
        var_0 = module_0.remove_values(set_0, dict_0)
        str_1 = 'ihkchF^_~"f90Tz~w'
        var_1 = module_0.sanitize_keys(bool_0, set_0)
        var_2 = module_0.sanitize_keys(dict_0, dict_0)
        var_3 = module_0.remove_values(str_1, dict_0)
        var_4 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'FSoR,r`w?;OJDZc9O'
        list_0 = [str_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        var_0 = module_0.set_fallbacks(list_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '+2=)"C'
        dict_0 = None
        dict_1 = {str_0: str_0, str_0: str_0, str_0: dict_0}
        str_1 = ']Wo+k,x!J4}Ow'
        var_0 = module_0.set_fallbacks(dict_1, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'multiline'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [str_0, dict_0, dict_0]
        var_0 = module_0.sanitize_keys(str_0, dict_0, list_0)
        str_1 = 'i\x0cB1G)K#x\nWoY!i'
        dict_1 = {str_1: str_1, str_1: dict_0}
        bytes_0 = b'\x1a\xb9\x92\xc8\xf0\x1e\xb5\x0f'
        var_1 = module_0.set_fallbacks(dict_1, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '1TcI3pqHx\x0c]hLTBcs'
        float_0 = 866.7
        var_0 = module_0.sanitize_keys(str_0, float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -482.4
        var_0 = module_0.remove_values(float_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'WkrfDO'
        list_0 = [str_0, str_0, str_0, str_0]
        str_1 = 'Gf'
        dict_0 = {}
        bytes_0 = b'\x07\xb8&\x986L\x94i\xf9\xe1\x8f\xe1\xcc'
        var_0 = module_0.set_fallbacks(dict_0, bytes_0)
        str_2 = '! L6O.1@jq5.zB64M>Fx'
        var_1 = module_0.sanitize_keys(list_0, str_1, str_2)
        str_3 = '>\x0cR+:kC!h'
        dict_1 = {str_3: str_3}
        var_2 = module_0.env_fallback(**dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\n        find one file in first path in stack taking roles into account and adding play basedir as fallback\n\n        :arg paths: A list of text strings which are the paths to look for the filename in.\n        :arg dirname: A text string representing a directory.  The directory\n            is prepended to the source to form the path to search for.\n        :arg source: A text string which is the filename to search for\n        :rtype: A text string\n        :returns: An absolute path to the filename ``source`` if found\n        :raises: An AnsibleFileNotFound Exception if the file is found to exist in the search paths\n        '
        str_1 = 'git_dir_before'
        str_2 = 'V=J.;9Et'
        dict_0 = {str_0: str_0, str_1: str_2}
        str_3 = 'bY"J5PoJHHhAj\x0b\x0buM4\'s'
        bytes_0 = b"\n\xab\xd6\xce\xa8N\x14\xc9\x05\xfaw7\x1de\xc5\xfd?81'"
        var_0 = module_0.sanitize_keys(dict_0, str_3, bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = []
        var_0 = set()
        str_1 = 'ansible'
        var_1 = (str_0, str_0)
        var_2 = dict(type=str_1, fallback=var_1)
        var_3 = dict(myparam=var_2)
        var_4 = {}
        var_5 = module_0.set_fallbacks(var_3, var_4)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Rack Mount Chassis'
        str_1 = 'A malformed block was encountered while loading rescue.'
        str_2 = 'H>pI)'
        str_3 = "1[^%\n2'"
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_3: str_3}
        bool_0 = True
        bytes_0 = b'>2\xb1Hb\x1a"\xae\xef\xbbl&HN'
        list_0 = [bytes_0, str_3]
        dict_1 = {str_3: str_0, str_0: bool_0, str_1: list_0, bytes_0: dict_0}
        str_4 = '{(\ttQyzmLx7zvh'
        var_0 = module_0.sanitize_keys(dict_1, str_4, dict_0)
    except BaseException:
        pass