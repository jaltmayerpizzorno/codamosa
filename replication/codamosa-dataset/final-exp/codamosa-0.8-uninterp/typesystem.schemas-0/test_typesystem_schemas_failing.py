# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'A'
        reference_0 = module_0.Reference(str_0)
        module_0.set_definitions(reference_0, schema_definitions_0)
        reference_1 = module_0.Reference(str_0)
        schema_0 = module_0.Schema()
        str_1 = schema_0.__repr__()
        array_0 = module_1.Array(reference_1)
        module_0.set_definitions(array_0, schema_definitions_0)
        str_2 = 'a'
        reference_2 = module_0.Reference(str_0)
        reference_3 = {str_2: reference_2}
        object_0 = module_1.Object(properties=reference_3)
        bool_0 = True
        any_0 = reference_0.validate(reference_1, strict=bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = None
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        list_0 = [dict_0, dict_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\r\x8f\xd6\x9cFZ\xd2\xbf\xcf\x13\x99|8\x1cR0\x858\x90'
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(bytes_0, bytes_0)
        iterator_0 = schema_definitions_0.__iter__()
        list_0 = [bytes_0]
        str_0 = 'sr%*"g4[BY'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        schema_0 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        type_0 = None
        schema_0 = module_0.Schema()
        list_0 = [schema_0]
        str_0 = '+rQy)rr7J/'
        dict_0 = {str_0: schema_0}
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0, **dict_0)
        schema_definitions_0.__delitem__(type_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '46K6en".brfgO5'
        dict_0 = {str_0: str_0}
        schema_0 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        type_0 = None
        bool_0 = True
        dict_0 = {bool_0: bool_0, type_0: type_0, type_0: bool_0, bool_0: bool_0}
        reference_0 = module_0.Reference(type_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        any_0 = schema_0.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        str_0 = ' \t\n\r'
        bytes_0 = b'\x17\x83\xa1C\x0fP\xb9t\x8c\x92\xb2\xab\x19\xeaG\x151\xe0\xa2\xb5'
        reference_0 = module_0.Reference(str_0, bytes_0)
        any_0 = reference_0.validate(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'W='
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(reference_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        schema_0 = module_0.Schema(**dict_0)
        str_0 = schema_0.__repr__()
        reference_0 = module_0.Reference(str_0)
        bool_0 = schema_0.__eq__(dict_0)
        any_0 = reference_0.serialize(schema_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        bool_1 = False
        str_1 = '_'
        field_0 = module_1.Field(description=str_1, default=schema_definitions_0)
        schema_definitions_1 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_1.__setitem__(reference_0, reference_0)
        any_1 = schema_0.__getitem__(bool_1)
    except BaseException:
        pass

def test_case_11():
    try:
        type_0 = None
        str_0 = 'sZ2s.y>Q]#\x0c\\IDR'
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(type_0)
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0, type_0: type_0, bool_0: bool_0, type_0: bool_0, bool_0: bool_0}
        reference_1 = module_0.Reference(type_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        bool_0 = schema_0.__eq__(int_0)
        str_0 = '(x0Y'
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_0.__setitem__(int_0, schema_0)
        schema_definitions_0.__setitem__(bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_13():
    try:
        field_0 = module_1.Field()
        str_0 = 'i\nl6ug"MKQ\\t'
        dict_0 = None
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'Field'
        reference_0 = module_0.Reference(str_0)
        module_0.set_definitions(reference_0, schema_definitions_0)
        schema_0 = module_0.Schema()
        str_1 = schema_0.__repr__()
        array_0 = module_1.Array(reference_0)
        module_0.set_definitions(array_0, schema_definitions_0)
        reference_1 = module_0.Reference(str_0)
        bool_0 = schema_0.__eq__(reference_0)
        reference_2 = {}
        field_0 = None
        bool_1 = schema_0.__eq__(reference_2)
        schema_definitions_0.__setitem__(str_0, str_1)
        module_0.set_definitions(field_0, schema_definitions_0)
        any_0 = reference_0.validate(reference_0)
    except BaseException:
        pass

def test_case_15():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'Field'
        reference_0 = module_0.Reference(str_0)
        module_0.set_definitions(reference_0, schema_definitions_0)
        reference_1 = module_0.Reference(str_0)
        schema_0 = module_0.Schema()
        str_1 = schema_0.__repr__()
        reference_2 = None
        array_0 = module_1.Array(reference_2)
        iterator_0 = schema_definitions_0.__iter__()
        module_0.set_definitions(array_0, schema_definitions_0)
        reference_3 = module_0.Reference(str_0)
        reference_4 = {}
        bool_0 = schema_0.__eq__(reference_4)
        int_0 = schema_0.__len__()
        any_0 = reference_0.validate(reference_0)
    except BaseException:
        pass