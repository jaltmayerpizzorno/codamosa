# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import concurrent.futures._base as module_1
import builtins as module_2
import _asyncio as module_3

def test_case_0():
    try:
        callable_0 = module_0.run_on_executor()
        str_0 = 'Response code %d cannot have body'
        str_1 = 'zB*K\x0c"6\nYs_[&|N;'
        bool_0 = module_0.is_future(str_0)
        dict_0 = {str_1: str_1}
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_0.shutdown()
        dummy_executor_0.shutdown()
        str_0 = '{ejFWoBET[H#Y*+'
        list_0 = [str_0, str_0]
        dict_0 = {}
        dummy_executor_1 = module_0.DummyExecutor()
        dummy_executor_1.shutdown()
        callable_0 = module_0.run_on_executor(**dict_0)
        dict_1 = {str_0: list_0, str_0: str_0}
        dummy_executor_0.shutdown()
        callable_1 = module_0.run_on_executor(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1293.0
        future_0 = module_1.Future()
        dict_0 = {}
        base_exception_0 = module_2.BaseException(**dict_0)
        str_0 = 'I\x0bMj&Q:5\nF)9\x0cBhM9'
        int_0 = 1000
        list_0 = [float_0, str_0, str_0, int_0]
        callable_0 = module_0.run_on_executor(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        future_0 = module_1.Future()
        dict_0 = {}
        dummy_executor_0 = module_0.DummyExecutor(**dict_0)
        callable_0 = None
        float_0 = 0.0
        dummy_executor_1 = module_0.DummyExecutor()
        tuple_0 = (dummy_executor_0, callable_0, float_0)
        module_0.future_set_exc_info(future_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        future_0 = module_1.Future()
        callable_0 = None
        module_0.future_add_done_callback(future_0, callable_0)
        dummy_executor_0 = module_0.DummyExecutor()
        bool_0 = module_0.is_future(dummy_executor_0)
        var_0 = None
        module_0.future_set_result_unless_cancelled(future_0, var_0)
        callable_1 = module_0.run_on_executor()
        future_1 = None
        module_0.chain_future(future_1, future_1)
    except BaseException:
        pass

def test_case_5():
    try:
        future_0 = module_1.Future()
        bool_0 = True
        bool_1 = module_0.is_future(bool_0)
        tuple_0 = ()
        module_0.future_set_result_unless_cancelled(future_0, tuple_0)
        module_0.future_add_done_callback(future_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_7():
    try:
        callable_0 = module_0.run_on_executor()
        future_0 = module_1.Future()
        base_exception_0 = module_2.BaseException()
        bool_0 = module_0.is_future(base_exception_0)
        module_0.future_set_exception_unless_cancelled(future_0, base_exception_0)
        bool_1 = module_0.is_future(callable_0)
        dummy_executor_0 = module_0.DummyExecutor()
        list_0 = [bool_0]
        callable_1 = module_0.run_on_executor(*list_0)
        dummy_executor_0.shutdown()
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        future_1 = module_3.Future()
    except BaseException:
        pass