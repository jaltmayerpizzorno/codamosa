# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\x06^\xd3'
    var_0 = module_0.parse_kv(bytes_0)

def test_case_2():
    str_0 = 'xQlK^Rngp <8*@\nDpY=m'
    var_0 = module_0.parse_kv(str_0)

def test_case_3():
    int_0 = None
    var_0 = module_0.parse_kv(int_0)
    str_0 = 'Return a list of deprecations\n\n    :arg argument_spec: An argument spec dictionary\n    :arg parameters: Dictionary of parameters\n\n    :returns: List of dictionaries containing a message and version in which\n        the deprecated parameter will be removed, or an empty list.\n\n    :Example return:\n\n    .. code-block:: python\n\n        [\n            {\n                \'msg\': "Param \'deptest\' is deprecated. See the module docs for more information",\n                \'version\': \'2.9\'\n            }\n        ]\n    '
    var_1 = module_0.split_args(str_0)

def test_case_4():
    str_0 = 'j1t6]/F\nF'
    var_0 = module_0.parse_kv(str_0)

def test_case_5():
    str_0 = 'a=\'b c\' d=\'"e\' f=g \'h\'=i'
    var_0 = module_0.parse_kv(str_0)

def test_case_6():
    str_0 = '"one two three" four five'
    var_0 = module_0.split_args(str_0)

def test_case_7():
    str_0 = 'Return a list of deprecations\n\n    :arg argument_spec: An argument spec dictionary\n    :arg parameters: Dictionary of parameters\n\n    :returns: List of dictionaries containing a message and version in which\n        the deprecated parameter will be removed, or an empty list.\n\n    :Example return:\n\n    .. code-block:: python\n\n        [\n            {\n                \'msg\': "Param \'deptest\' is deprecated. See the module docs for more information",\n                \'version\': \'2.9\'\n            }\n        ]\n    '
    var_0 = module_0.split_args(str_0)

def test_case_8():
    bool_0 = True
    str_0 = 'A=\'\' ="2"'
    var_0 = module_0.parse_kv(str_0, bool_0)

def test_case_9():
    bool_0 = True
    str_0 = '_=\'1\'sW B="2"'
    var_0 = module_0.parse_kv(str_0, bool_0)

def test_case_10():
    str_0 = 'rabbitmqctl add_vhost {{ rabbitmq_vhost_name }}'
    var_0 = module_0.split_args(str_0)

def test_case_11():
    str_0 = 'foo "bar \\"baz\\""'
    var_0 = module_0.split_args(str_0)
    str_1 = '{% foo %} "bar baz" test'
    var_1 = module_0.split_args(str_1)

def test_case_12():
    str_0 = 'cowsay moo \'don\\\'t do it\' "don\'t do it" don\\=t'
    var_0 = module_0.split_args(str_0)
    str_1 = 'rabbitmqctl add_vhost {{ rabbitmq_vhost_name }}'
    var_1 = module_0.split_args(str_1)