# Automatically generated by Pynguin.
import tornado.escape as module_0

def test_case_0():
    try:
        bytes_0 = b'\x118\xd9\tp\\\xf4\xe4\n\xbb\xcb\xe4(\xff\x8e'
        optional_0 = module_0.to_unicode(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'E\xca\x8b\xfa\x02\x0e\xac\xd0l\x17\xed^f\x11\xf66'
        str_0 = module_0.xhtml_unescape(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        any_0 = module_0.json_decode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 204
        any_0 = module_0.recursive_unicode(int_0)
        bytes_0 = b'\xa0K\xcc=\x15R\x03}\xb6"\x01\r\xb6\x9ah\xd0C'
        str_0 = None
        bool_0 = None
        var_0 = module_0.url_unescape(bytes_0, str_0, bool_0)
        optional_0 = module_0.to_unicode(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '`LJQ\reF>\x0cqw=b6[i_'
        bool_0 = False
        var_0 = module_0.url_unescape(str_0, str_0)
        dict_0 = module_0.parse_qs_bytes(str_0, bool_0)
        str_1 = 's7!xKJ[I'
        any_0 = module_0.recursive_unicode(str_1)
        str_2 = ")\t7'vVRiBHm$bFZ"
        str_3 = module_0.xhtml_unescape(str_2)
        bool_1 = True
        str_4 = module_0.url_escape(str_1, bool_1)
        bool_2 = None
        str_5 = module_0.linkify(str_1, bool_2)
        bytes_0 = b'\x10\xdf+V\x88\xe8\x85\x82V\x80\xbf\xff'
        optional_0 = module_0.utf8(bytes_0)
        dict_1 = module_0.parse_qs_bytes(str_1, bool_2)
        str_6 = module_0.json_encode(optional_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 43.2
        str_0 = module_0.json_encode(float_0)
        optional_0 = module_0.utf8(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2287
        str_0 = 'Ge(k$gcM'
        str_1 = module_0.xhtml_escape(str_0)
        optional_0 = module_0.to_unicode(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '<a href="www.facebook.com" >www.facebook.com</a>'
        bool_0 = True
        str_1 = module_0.linkify(str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'61Uf\xab,k\xb7'
        str_0 = '?_]6'
        list_0 = None
        str_1 = ',2\'\x0b3l"/LBm\\)}'
        dict_0 = {str_0: list_0, str_1: list_0, str_1: list_0}
        bool_0 = False
        var_0 = module_0.url_unescape(bytes_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '@ibUyJp7Q@rWDZ@x-*x'
        bool_0 = False
        dict_0 = module_0.parse_qs_bytes(str_0)
        var_0 = module_0.url_unescape(str_0, bool_0)
        list_0 = None
        str_1 = module_0.linkify(str_0, list_0)
        bytes_0 = b'T\xd01'
        var_1 = module_0.url_unescape(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        var_0 = module_0.url_unescape(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 't<R\x0c/_Er6'
        str_1 = module_0.squeeze(str_0)
        optional_0 = module_0.utf8(str_1)
        bool_0 = False
        str_2 = module_0.url_escape(str_0, bool_0)
        str_3 = module_0.linkify(str_1, bool_0)
        str_4 = module_0.squeeze(str_2)
        bytes_0 = b':I7g\x01\xce\xddl\xdf\xc9\xc9~\xb91N\x9fJ\x1a\xd6\xee'
        str_5 = module_0.xhtml_unescape(str_3)
        str_6 = 'Concatenate url and arguments regardless of whether\n    url has existing query parameters.\n\n    ``args`` may be either a dictionary or a list of key-value pairs\n    (the latter allows for multiple values with the same key.\n\n    >>> url_concat("http://example.com/foo", dict(c="d"))\n    \'http://example.com/foo?c=d\'\n    >>> url_concat("http://example.com/foo?a=b", dict(c="d"))\n    \'http://example.com/foo?a=b&c=d\'\n    >>> url_concat("http://example.com/foo?a=b", [("c", "d"), ("c", "d2")])\n    \'http://example.com/foo?a=b&c=d&c=d2\'\n    '
        str_7 = module_0.squeeze(str_6)
        dict_0 = {}
        dict_1 = {}
        tuple_0 = (dict_0, dict_1, bytes_0)
        any_0 = module_0.recursive_unicode(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '`LJQ\reF>\x0cqw=b6[i_'
        bool_0 = False
        dict_0 = module_0.parse_qs_bytes(str_0, bool_0)
        str_1 = 's7!xKJ[I'
        any_0 = module_0.recursive_unicode(str_0)
        str_2 = ")\t7'vVRiBHm$bFZ"
        str_3 = module_0.xhtml_unescape(str_0)
        str_4 = module_0.url_escape(str_2)
        str_5 = '~`'
        str_6 = 'Ελληνικά'
        list_0 = [str_3]
        str_7 = module_0.linkify(str_3, str_6, bool_0, list_0)
        str_8 = module_0.json_encode(str_5)
        dict_1 = module_0.parse_qs_bytes(str_7, bool_0)
        str_9 = module_0.url_escape(str_1)
        any_1 = module_0.recursive_unicode(dict_0)
        var_0 = module_0.url_unescape(str_2)
        str_10 = module_0.xhtml_unescape(str_7)
        bool_1 = True
        bool_2 = True
        str_11 = module_0.linkify(str_3, bool_1, bool_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 't<R\x0c/_Er6'
        str_1 = module_0.squeeze(str_0)
        bool_0 = False
        str_2 = module_0.url_escape(str_0, bool_0)
        str_3 = module_0.linkify(str_1, bool_0)
        str_4 = module_0.squeeze(str_2)
        bytes_0 = b':I7g\x01\xce\xddl\xdf\xc9\xc9~\xb91N\x9fJ\x1a\xd6\xee'
        str_5 = module_0.xhtml_unescape(str_3)
        str_6 = 'Concatenate url and arguments regardless of whether\n    url has existing query parameters.\n\n    ``args`` may be either a dictionary or a list of key-value pairs\n    (the latter allows for multiple values with the same key.\n\n    >>> url_concat("http://example.com/foo", dict(c="d"))\n    \'http://example.com/foo?c=d\'\n    >>> url_concat("http://example.com/foo?a=b", dict(c="d"))\n    \'http://example.com/foo?a=b&c=d\'\n    >>> url_concat("http://example.com/foo?a=b", [("c", "d"), ("c", "d2")])\n    \'http://example.com/foo?a=b&c=d&c=d2\'\n    '
        str_7 = module_0.squeeze(str_6)
        dict_0 = module_0.parse_qs_bytes(str_0)
        bool_1 = False
        dict_1 = module_0.parse_qs_bytes(str_3, bool_0)
        bool_2 = True
        bool_3 = None
        list_0 = [str_2, str_3]
        str_8 = module_0.linkify(str_7, bool_1, str_2, bool_3, list_0)
        float_0 = -676.179694
        str_9 = module_0.json_encode(float_0)
        str_10 = ';\x0by!V%q;_aONN4YL~"'
        dict_2 = module_0.parse_qs_bytes(str_10)
        str_11 = module_0.url_escape(str_6)
        var_0 = module_0.url_unescape(bytes_0, bool_2)
    except BaseException:
        pass

def test_case_14():
    try:
        tuple_0 = ()
        any_0 = module_0.recursive_unicode(tuple_0)
        str_0 = 'e\x0c\x0c\t44uH"#fuyc?H\t*'
        bool_0 = True
        var_0 = module_0.url_unescape(str_0, bool_0)
        var_1 = module_0.url_unescape(str_0, str_0)
        str_1 = module_0.url_escape(str_0, bool_0)
        optional_0 = module_0.utf8(str_0)
        str_2 = None
        str_3 = module_0.url_escape(str_2)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = "t'<R\x0c/_r6"
        str_1 = module_0.squeeze(str_0)
        str_2 = module_0.squeeze(str_1)
        str_3 = 'Concatenate url and arguments regardless of whether\n    url has existing query parameters.\n\n    ``args`` may be either a dictionary or a list of key-value pairs\n   8(the latter allows for multiple values with the same key.\n\n    >>> url_concat("http://example.com/foo", dict(c="d"))\n    \'http://example.com/foo?c=d\'\n    >>> url_concat("http://example.com/foo?a=b", dict(c="d"))\n    \'http://example.com/fo3\\a=b&c=d\'\n    >>> url_concat("http://example.com/foo?a=b", [("c", "d"), ("c", "d2")])\n    \'http://example.com/foo?a=b&c=d&c=d2\'\n    '
        str_4 = module_0.squeeze(str_3)
        dict_0 = module_0.parse_qs_bytes(str_0)
        bool_0 = False
        var_0 = module_0.url_unescape(str_0, bool_0)
        str_5 = 'mk7P.&PKNI;r^soo5T'
        str_6 = module_0.xhtml_unescape(str_5)
        bool_1 = True
        bool_2 = True
        str_7 = module_0.linkify(str_4, bool_1, str_3, bool_2)
        bytes_0 = b'\xe9\x8bw*=\xd9R\x026\xaa\xf0S'
        str_8 = module_0.xhtml_unescape(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'text1 http://www.baidu.com?q=hello%20world text2'
        str_1 = 'text1 <a href="http://www.baidu.com?q=hello%20world">http://www.baidu.com?q=hello%20world</a> text2'
        list_0 = None
        str_2 = module_0.linkify(str_0, str_1, list_0)
        bool_0 = True
        str_3 = module_0.linkify(str_2, bool_0)
        str_4 = module_0.squeeze(str_0)
        str_5 = 'Russian'
        str_6 = module_0.squeeze(str_5)
        bytes_0 = b':I7g\x01\xce\xddl\xc9\xc9~\xb91N\x9fJ\x1a\xd6\xee'
        str_7 = module_0.xhtml_unescape(bytes_0)
    except BaseException:
        pass