# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        bytes_0 = b''
        alpha_0 = module_0._Alpha(bytes_0)
        var_0 = alpha_0.__repr__()
        str_0 = '8=9%"RcQ2+Fur1+'
        numeric_0 = module_0._Numeric(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{It'
        dict_0 = {}
        alpha_0 = module_0._Alpha(dict_0)
        var_0 = alpha_0.__ge__(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        alpha_0 = module_0._Alpha(list_0)
        bool_0 = None
        var_0 = alpha_0.__ge__(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2.8
        str_0 = "\n    (?:[\\w]|{range})                    # Starts with an alphanumeric or a range\n    (?:[\\w_-]|{range})*                 # Then zero or more of the same or [_-]\n    (?<![_-])                           # ...as long as it didn't end with [_-]\n"
        str_1 = "'~vAh,]&^1L?"
        alpha_0 = module_0._Alpha(str_1)
        var_0 = alpha_0.__le__(str_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.parse(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        str_0 = 'lb8p'
        str_1 = 'R"& &\x0cnj]G%i,W~;'
        list_0 = [str_1, numeric_0, str_1, str_1]
        tuple_0 = (str_1, list_0, bool_0)
        alpha_0 = module_0._Alpha(tuple_0)
        var_0 = alpha_0.__gt__(numeric_0)
        float_0 = -1673.266
        var_1 = alpha_0.__eq__(float_0)
        var_2 = alpha_0.__le__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b''
        numeric_0 = module_0._Numeric(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2074
        numeric_0 = module_0._Numeric(int_0)
        bool_0 = True
        alpha_0 = module_0._Alpha(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        var_1 = numeric_0.__ge__(int_0)
        set_0 = {var_1, bool_0, int_0}
        var_2 = numeric_0.__ge__(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -527.5
        numeric_0 = module_0._Numeric(float_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = numeric_0.__ge__(numeric_0)
        loose_version_0 = module_1.LooseVersion()
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'w.x.y-prerelease.1+build.metadata'
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        loose_version_0 = module_1.LooseVersion()
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_10():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        int_0 = 65001
        var_0 = semantic_version_1.from_loose_version(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        bytes_0 = b'\xc7\x05\x08'
        float_0 = -1807.91166
        alpha_0 = module_0._Alpha(float_0)
        var_0 = alpha_0.__ne__(bytes_0)
        str_0 = 'z%'
        var_1 = semantic_version_0.__le__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_1.__ge__(semantic_version_0)
        semantic_version_2 = module_0.SemanticVersion()
        var_1 = semantic_version_2.__le__(semantic_version_0)
        alpha_0 = module_0._Alpha(semantic_version_2)
        var_2 = semantic_version_1.__le__(alpha_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 60.0
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Ivca+e'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -527.5
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = numeric_0.__ge__(numeric_0)
        var_2 = semantic_version_0.__eq__(semantic_version_0)
        loose_version_0 = module_1.LooseVersion()
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 881
        numeric_0 = module_0._Numeric(int_0)
        bool_0 = None
        alpha_0 = module_0._Alpha(int_0)
        var_0 = alpha_0.__ne__(bool_0)
        var_1 = numeric_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        var_2 = semantic_version_0.__eq__(semantic_version_0)
        var_3 = numeric_0.__gt__(alpha_0)
        loose_version_0 = module_1.LooseVersion()
        var_4 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 881
        numeric_0 = module_0._Numeric(int_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = numeric_0.__eq__(int_0)
        var_1 = semantic_version_0.__eq__(semantic_version_0)
        loose_version_0 = module_1.LooseVersion()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_18():
    try:
        tuple_0 = ()
        float_0 = 2307.0
        float_1 = -2764.45
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__ne__(float_1)
        numeric_1 = module_0._Numeric(float_0)
        var_1 = numeric_1.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(semantic_version_0)
        numeric_2 = module_0._Numeric(tuple_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 881
        numeric_0 = module_0._Numeric(int_0)
        bool_0 = None
        alpha_0 = module_0._Alpha(int_0)
        var_0 = alpha_0.__ne__(bool_0)
        float_0 = -547.7479475843999
        numeric_1 = module_0._Numeric(float_0)
        var_1 = numeric_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        var_2 = alpha_0.__le__(numeric_0)
        var_3 = numeric_0.__eq__(int_0)
        var_4 = numeric_1.__ge__(numeric_1)
        var_5 = semantic_version_0.__eq__(semantic_version_0)
        var_6 = numeric_1.__ne__(bool_0)
        bytes_0 = b''
        var_7 = numeric_1.__ne__(bytes_0)
        numeric_2 = module_0._Numeric(int_0)
        var_8 = numeric_2.__gt__(numeric_0)
        var_9 = numeric_2.__gt__(alpha_0)
        loose_version_0 = module_1.LooseVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_10 = semantic_version_1.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = -547.7479475843999
        numeric_0 = module_0._Numeric(float_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        bool_0 = True
        var_1 = numeric_0.__gt__(bool_0)
        str_0 = 'H|'
        loose_version_0 = module_1.LooseVersion(str_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_2 = semantic_version_1.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = 'H|'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = -527.5
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = numeric_0.__ge__(numeric_0)
        var_2 = semantic_version_0.__eq__(semantic_version_0)
        str_0 = '-7|'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 881
        bool_0 = None
        alpha_0 = module_0._Alpha(int_0)
        var_0 = alpha_0.__ne__(bool_0)
        float_0 = -527.5
        numeric_0 = module_0._Numeric(float_0)
        var_1 = numeric_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        var_2 = alpha_0.__le__(numeric_0)
        var_3 = numeric_0.__eq__(int_0)
        var_4 = numeric_0.__ge__(numeric_0)
        var_5 = semantic_version_0.__eq__(semantic_version_0)
        str_0 = '7'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_6 = loose_version_0.__ge__(bool_0)
        var_7 = semantic_version_0.__ne__(semantic_version_0)
        var_8 = semantic_version_0.from_loose_version(loose_version_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_9 = numeric_0.__gt__(alpha_0)
        loose_version_1 = module_1.LooseVersion()
        semantic_version_2 = module_0.SemanticVersion()
        var_10 = numeric_0.__lt__(semantic_version_0)
    except BaseException:
        pass