# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '        This is a short description.\n\n        This is a long description.\n\n        :type foo: str\n        :type bar: int|None\n        :type baz: list or None\n        :param i: Some integer.\n        :param foo: Some string.\n        :param bar: Some integer or None.\n        :param baz: Either a list or None.\n        :raises Exception: Something bad happened.\n        :raises RuntimeError: Something bad happened.\n        :returns: None\n        :returns: Something\n        :return: None\n        :return: Something\n        :yields: None\n        :yields: Something\n        :yield: None\n        :yield: Something\n        :rtype: int\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = "6AA;'4l<^z*Q\r\n4,"
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = '\n    Short description.\n\n    Long description.\n\n    :rtype:  str\n    :param arg:  this is a arg\n    :param arg2:  this is also a arg\n    :raises TypeError:  if arg is None\n    :returns:  this is a return value\n    :returns optional:  this is an optional return vacue\n    :returns (tuple):w this is a tuple\n    :returns (list): -this is a list\n    :raises ValueError:  if the value is wrong\n\n    The last paragraph of the docstring.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = None
    docstring_0 = module_0.parse(str_0)
    str_1 = 'E >"*G'
    docstring_1 = module_0.parse(str_1)
    docstring_2 = module_0.parse(str_0)

def test_case_5():
    str_0 = ')imt{I5h"]'
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = 'Initialize a new parser.\n        :param foo: the foo of the bar\n        :param bar: the bar of the foo (defaults to some\n            nonsensical value)\n        :type bar: int\n        :returns: the parsed result\n        :rtype: int\n        :raises ValueError: if the value is invalid\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = '\n    This is the short description.\n\n    This is the long description. It can span\n    multiple lines.\n\n    :param int foo: Foo description\n    :type foo: List of ints\n    :param bar: Bar description\n    :type bar: List of str\n    :returns: Return description\n    :rtype: List of str\n    :return something: Something description\n    :rtype something: List of str\n    :yields: Yield description\n    :ytype: List of str\n    :yield an_item: An item description\n    :ytype an_item: List of str\n    :raises Exception: Raises description\n    :raises TypeError: Raises description\n    :raises: Raises description\n    :raises TypeError: Raises description\n    '
    docstring_0 = module_0.parse(str_0)