# Automatically generated by Pynguin.
import dataclasses_json.cfg as module_0
import dataclasses_json.undefined as module_1
import marshmallow.fields as module_2

def test_case_0():
    try:
        dict_0 = {}
        str_0 = '\n    This action does nothing when it encounters undefined parameters.\n    The undefined parameters can not be retrieved after the class has been\n    created.\n    '
        dict_1 = module_0.config(encoder=dict_0, undefined=str_0, field_name=str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        global_config_0 = module_0._GlobalConfig()
        exclude_0 = module_0.Exclude()
        global_config_1 = module_0._GlobalConfig()
        global_config_2 = module_0._GlobalConfig()
        dict_0 = {exclude_0: global_config_0, global_config_2: global_config_2, global_config_2: exclude_0, exclude_0: global_config_1}
        dict_1 = {}
        global_config_3 = module_0._GlobalConfig()
        dict_2 = module_0.config(dict_0, decoder=dict_1, exclude=global_config_3)
        exclude_1 = module_0.Exclude()
        var_0 = exclude_1.<lambda>(exclude_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'AJGBrf?#e&B'
        global_config_0 = module_0._GlobalConfig()
        dict_0 = module_0.config(mm_field=global_config_0, undefined=str_0, field_name=str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2023.794203
        set_0 = {float_0, float_0, float_0}
        str_0 = '" (value: "'
        str_1 = 'D\\Z#;$}Hsp\rg'
        str_2 = 'exclude'
        dict_0 = {str_0: str_0, str_1: str_2, str_0: str_2, str_2: str_0}
        dict_1 = module_0.config(letter_case=set_0, field_name=str_0, exclude=dict_0)
        undefined_0 = module_1.Undefined.EXCLUDE
        str_3 = '__type'
        dict_2 = {str_3: str_3, undefined_0: undefined_0, undefined_0: str_3, str_3: str_3}
        bool_0 = True
        str_4 = 'The type "'
        str_5 = 'C\x0c'
        dict_3 = {str_3: bool_0, str_4: undefined_0, str_5: dict_2, str_4: str_4}
        field_0 = module_2.Field(data_key=str_3, dump_only=bool_0, **dict_3)
        str_6 = 'H(#I23b")Tte=q1'
        dict_4 = {str_6: dict_2, str_4: dict_2, str_3: dict_2, str_4: dict_2}
        dict_5 = module_0.config(decoder=dict_2, mm_field=field_0, letter_case=dict_4)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = None
        str_0 = 'AJGBrf?#e&B'
        dict_1 = {str_0: dict_0, str_0: dict_0, str_0: dict_0}
        exclude_0 = module_0.Exclude()
        dict_2 = module_0.config(encoder=dict_1, decoder=exclude_0, undefined=str_0, field_name=str_0, exclude=dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        undefined_0 = module_1.Undefined.RAISE
        none_type_0 = None
        dict_0 = {}
        dict_1 = module_0.config(undefined=undefined_0, field_name=none_type_0, exclude=dict_0)
        str_0 = 'ccuW#~'
        list_0 = [bool_0, dict_1, str_0]
        str_1 = 'x]'
        dict_2 = {str_1: undefined_0}
        exclude_0 = module_0.Exclude(*list_0, **dict_2)
    except BaseException:
        pass