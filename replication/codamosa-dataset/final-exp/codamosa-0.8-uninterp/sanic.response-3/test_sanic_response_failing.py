# Automatically generated by Pynguin.
import sanic.response as module_0
import pathlib as module_1

def test_case_0():
    try:
        h_t_t_p_response_0 = module_0.empty()
        callable_0 = None
        int_0 = 580
        var_0 = module_0.stream(callable_0, int_0, h_t_t_p_response_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xdeN*\xd5%+A.j'
        dict_0 = None
        str_0 = '.K)\\_mG>,dCX'
        h_t_t_p_response_0 = module_0.raw(bytes_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Eh$x%y4v{\rD\t%Tgh\t'
        str_1 = 'Max requests exceeded, shutting down: %s'
        str_2 = 'y )zHU2YJ$]'
        str_3 = "c,D'cTtySwjh?{sa"
        str_4 = '\n        Method for attaching middleware to specific routes. This is mainly an\n        internal tool for use by Blueprints to attach middleware to only its\n        specfic routes. But, it could be used in a more generalized fashion.\n\n        :param middleware: the middleware to execute\n        :param route_names: a list of the names of the endpoints\n        :type route_names: Iterable[str]\n        :param attach_to: whether to attach to request or response,\n            defaults to "request"\n        :type attach_to: str, optional\n        '
        str_5 = '^\nSh)--P{2a'
        str_6 = "8$\x0c|y'6"
        dict_0 = {str_2: str_3, str_1: str_4, str_5: str_1, str_6: str_2}
        h_t_t_p_response_0 = module_0.file(str_0, str_1, dict_0, str_6)
        h_t_t_p_response_1 = module_0.empty()
        str_7 = '\x0cT=\\\\jH'
        int_0 = -1444
        h_t_t_p_response_2 = module_0.redirect(str_7, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'mV<EH89]Es<8'
        h_t_t_p_response_0 = module_0.redirect(str_0)
        int_0 = -765
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        h_t_t_p_response_1 = module_0.empty()
        h_t_t_p_response_2 = module_0.HTTPResponse(int_0, base_h_t_t_p_response_0)
        base_h_t_t_p_response_1 = module_0.BaseHTTPResponse()
        dict_0 = {}
        pure_path_0 = module_1.PurePath()
        str_1 = None
        h_t_t_p_response_3 = module_0.text(str_1, dict_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 250
        int_1 = -2005
        str_0 = None
        str_1 = "QtR^!nRZhG?{%a'MSm"
        str_2 = '5u'
        str_3 = None
        str_4 = None
        dict_0 = {str_0: str_1, str_0: str_1, str_0: str_2, str_3: str_4}
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        str_5 = 'n'
        float_0 = -1074.5
        tuple_0 = (base_h_t_t_p_response_0, str_5, float_0, int_1)
        h_t_t_p_response_0 = module_0.json(int_0, int_1, dict_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '*m<EW8%]s<8'
        optional_0 = None
        list_0 = [optional_0]
        streaming_h_t_t_p_response_0 = module_0.file_stream(str_0)
        var_0 = streaming_h_t_t_p_response_0.send(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        h_t_m_l_protocol_0 = None
        h_t_t_p_response_0 = module_0.html(h_t_m_l_protocol_0)
        str_0 = 'Q i6cSEeh_0+DeJ'
        dict_0 = {}
        dict_1 = {}
        h_t_t_p_response_1 = module_0.empty(dict_1)
        h_t_t_p_response_2 = module_0.html(str_0, dict_0)
        dict_2 = {}
        str_1 = 'GET'
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(str_1, str_0)
        var_0 = streaming_h_t_t_p_response_0.send(**dict_2)
        var_1 = module_0.stream(h_t_t_p_response_2, str_0)
        h_t_t_p_response_3 = module_0.redirect(str_0)
        int_0 = 1307
        h_t_t_p_response_4 = module_0.html(str_1, int_0, dict_1)
        optional_0 = None
        list_0 = [optional_0]
        int_1 = 2618
        float_0 = 1706.554
        range_0 = None
        streaming_h_t_t_p_response_1 = module_0.file_stream(str_1, int_1, str_1, dict_0, str_1, float_0, range_0)
        var_2 = streaming_h_t_t_p_response_1.send(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Q i6cSEeh_0+DeJ'
        dict_0 = {}
        h_t_t_p_response_0 = module_0.html(str_0, dict_0)
        dict_1 = {}
        str_1 = 'GET'
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(str_1, str_0)
        var_0 = streaming_h_t_t_p_response_0.send(**dict_1)
        base_h_t_t_p_response_1 = module_0.BaseHTTPResponse()
        var_1 = module_0.stream(h_t_t_p_response_0, str_0)
        h_t_t_p_response_1 = module_0.redirect(str_0)
        optional_0 = None
        list_0 = [optional_0]
        set_0 = {h_t_t_p_response_1, str_1}
        streaming_h_t_t_p_response_1 = module_0.file_stream(str_1, str_1, set_0)
        int_0 = -1286
        str_2 = '.d\\[Z_wA<\x0cb'
        bool_0 = True
        none_type_0 = None
        streaming_h_t_t_p_response_2 = module_0.file_stream(str_0, int_0, str_0, str_2, bool_0, none_type_0)
        var_2 = streaming_h_t_t_p_response_2.send(*list_0, **dict_1)
    except BaseException:
        pass