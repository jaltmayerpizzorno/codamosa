# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        float_0 = -2131.023326
        set_0 = None
        str_0 = 'nqC`\x0b\\Sm)>a'
        bool_0 = True
        try_0 = module_0.Try(float_0, bool_0)
        bool_1 = False
        try_1 = module_0.Try(str_0, bool_1)
        var_0 = try_1.filter(set_0)
        bytes_0 = b'b'
        bool_2 = try_0.__eq__(str_0)
        try_2 = module_0.Try(bytes_0, bool_1)
        bool_3 = try_2.__eq__(try_2)
        dict_0 = {}
        var_1 = try_0.filter(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = True
        set_0 = {int_0}
        bool_0 = False
        try_0 = module_0.Try(set_0, bool_0)
        str_0 = try_0.__str__()
        int_1 = None
        int_2 = 2868
        bool_1 = True
        try_1 = module_0.Try(int_2, bool_1)
        var_0 = try_1.map(int_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x81`2\xab\x97k\x8d\xa8\x9f1OHn\xb9\x84\x89\xa9\xa1'
        bool_0 = True
        try_0 = module_0.Try(bytes_0, bool_0)
        str_0 = 's!%o>.rYE;'
        bool_1 = True
        try_1 = module_0.Try(str_0, bool_1)
        var_0 = try_1.bind(try_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    '
        dict_0 = {str_0: str_0, str_0: str_0}
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        bool_0 = True
        try_0 = module_0.Try(dict_1, bool_0)
        var_0 = try_0.on_success(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '`<H{B\n1Wt6l[S$je`\n|'
        list_0 = [str_0, str_0]
        bool_0 = True
        try_0 = module_0.Try(bool_0, bool_0)
        var_0 = try_0.on_fail(list_0)
        bool_1 = True
        try_1 = module_0.Try(str_0, bool_1)
        set_0 = set()
        tuple_0 = (set_0,)
        var_1 = try_1.filter(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        bytes_0 = b'Y\xf4\xd7\xcf\x98x\xe2\xc5\xea\xcd\xdcs'
        bool_0 = False
        try_0 = module_0.Try(bytes_0, bool_0)
        var_0 = try_0.get()
        bool_1 = False
        dict_1 = {bool_1: bool_1, bool_1: bool_1, bool_1: bool_1}
        try_1 = module_0.Try(dict_1, bool_1)
        var_1 = try_1.on_fail(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        complex_0 = None
        list_0 = None
        set_0 = {list_0, list_0}
        bytes_0 = b'$A\x88'
        float_0 = None
        float_1 = 2065.139
        tuple_0 = (set_0, bytes_0, float_0, float_1)
        bool_0 = True
        try_0 = module_0.Try(tuple_0, bool_0)
        var_0 = try_0.get_or_else(complex_0)
        str_0 = '`<H{B\n1Wt6l[S$je`\n|'
        list_1 = [str_0, str_0]
        bool_1 = True
        try_1 = module_0.Try(bool_1, bool_1)
        var_1 = try_1.on_fail(list_1)
        bool_2 = True
        try_2 = module_0.Try(str_0, bool_2)
        set_1 = set()
        tuple_1 = (set_1,)
        var_2 = try_2.filter(tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        try_0 = module_0.Try(bool_0, bool_0)
        var_0 = try_0.filter(bool_0)
        bool_1 = True
        try_1 = module_0.Try(bool_1, bool_1)
        var_1 = try_1.filter(var_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -2131.023326
        set_0 = None
        bool_0 = True
        try_0 = module_0.Try(float_0, bool_0)
        str_0 = '\n        Return rejected Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: rejected Task\n        :rtype: Task[Function(reject, _) -> A]\n        '
        bool_1 = False
        bool_2 = True
        bytes_0 = b'\x90\xd5oJ'
        bool_3 = False
        try_1 = module_0.Try(bytes_0, bool_3)
        var_0 = try_1.map(bool_2)
        try_2 = module_0.Try(str_0, bool_1)
        var_1 = try_2.filter(set_0)
        bytes_1 = b'\rb'
        bool_4 = False
        try_3 = module_0.Try(bytes_1, bool_4)
        bool_5 = try_3.__eq__(try_1)
        bytes_2 = b'v'
        var_2 = try_3.map(bytes_2)
        bool_6 = try_3.__eq__(try_3)
        var_3 = try_1.on_success(float_0)
        var_4 = try_3.get()
    except BaseException:
        pass