# Automatically generated by Pynguin.
import tornado.locale as module_0
import gettext as module_1

def test_case_0():
    pass

def test_case_1():
    locale_0 = module_0.get()

def test_case_2():
    str_0 = '.'
    module_0.load_translations(str_0)

def test_case_3():
    str_0 = '.'
    module_0.load_gettext_translations(str_0, str_0)

def test_case_4():
    iterable_0 = module_0.get_supported_locales()

def test_case_5():
    str_0 = 'ae"X>(-qyz%JNExNP'
    list_0 = [str_0]
    locale_0 = module_0.get(*list_0)

def test_case_6():
    int_0 = -2591
    bool_0 = False
    locale_0 = module_0.get()
    str_0 = locale_0.format_date(int_0, bool_0)
    iterable_0 = module_0.get_supported_locales()

def test_case_7():
    str_0 = '.'
    locale_0 = module_0.get()
    str_1 = locale_0.list(str_0)
    module_0.load_gettext_translations(str_0, str_0)
    str_2 = ''
    module_0.load_gettext_translations(str_0, str_2)

def test_case_8():
    str_0 = 'The set of opion-groups created by ``define``.\n\n        .. versionadded:: 3.1\n       '
    locale_0 = module_0.get()
    str_1 = locale_0.list(str_0)

def test_case_9():
    str_0 = '|?Vlh*PaXY9\riM^\r'
    dict_0 = {}
    c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_0)
    list_0 = [str_0, str_0]
    locale_0 = module_0.get(*list_0)
    str_1 = locale_0.list(dict_0)

def test_case_10():
    int_0 = 1447
    locale_0 = module_0.get()
    str_0 = locale_0.friendly_number(int_0)

def test_case_11():
    int_0 = 100
    locale_0 = module_0.get()
    str_0 = locale_0.friendly_number(int_0)

def test_case_12():
    str_0 = 'A simple template system that compiles templates to Python code.\n\nBasic usage looks like::\n\n    t = template.Template("<html>{{ myvalue }}</html>")\n    print(t.generate(myvalue="XXX"))\n\n`Loader` is a class that loads templates from a root directory and caches\nthe compiled templates::\n\n    loader = template.Loader("/home/btaylor")\n    print(loader.load("test.html").generate(myvalue="XXX"))\n\nWe compile all templates to raw Python. Error-reporting is currently... uh,\ninteresting. Syntax for the templates::\n\n    ### base.html\n    <html>\n      <head>\n        <title>{% block title %}Default title{% end %}</title>\n      </head>\n      <body>\n        <ul>\n          {% for student in students %}\n            {% block student %}\n              <li>{{ escape(student.name) }}</li>\n            {% end %}\n          {% end %}\n        </ul>\n      </body>\n    </html>\n\n    ### bold.html\n    {% extends "base.html" %}\n\n    {% block title %}A bolder title{% end %}\n\n    {% block student %}\n      <li><span style="bold">{{ escape(student.name) }}</span></li>\n    {% end %}\n\nUnlike most other template systems, we do not put any restrictions on the\nexpressions you can include in your statements. ``if`` and ``for`` blocks get\ntranslated exactly into Python, so you can do complex expressions like::\n\n   {% for student in [p for p in people if p.student and p.age > 23] %}\n     <li>{{ escape(student.name) }}</li>\n   {% end %}\n\nTranslating directly to Python means you can apply functions to expressions\neasily, like the ``escape()`` function in the examples above. You can pass\nfunctions in to your template just like any other variable\n(In a `.RequestHandler`, override `.RequestHandler.get_template_namespace`)::\n\n   ### Python code\n   def add(x, y):\n      return x + y\n   template.execute(add=add)\n\n   ### The template\n   {{ add(1, 2) }}\n\nWe provide the functions `escape() <.xhtml_escape>`, `.url_escape()`,\n`.json_encode()`, and `.squeeze()` to all templates by default.\n\nTypical applications do not create `Template` or `Loader` instances by\nhand, but instead use the `~.RequestHandler.render` and\n`~.RequestHandler.render_string` methods of\n`tornado.web.RequestHandler`, which load templates automatically based\non the ``template_path`` `.Application` setting.\n\nVariable names beginning with ``_tt_`` are reserved by the template\nsystem and should not be used by application code.\n\nSyntax Reference\n----------------\n\nTemplate expressions are surrounded by double curly braces: ``{{ ... }}``.\nThe contents may be any python expression, which will be escaped according\nto the current autoescape setting and inserted into the output.  Other\ntemplate directives use ``{% %}``.\n\nTo comment out a section so that it is omitted from the output, surround it\nwith ``{# ... #}``.\n\n\nTo include a literal ``{{``, ``{%``, or ``{#`` in the output, escape them as\n``{{!``, ``{%!``, and ``{#!``, respectively.\n\n\n``{% apply *function* %}...{% end %}``\n    Applies a function to the output of all template code between ``apply``\n    and ``end``::\n\n        {% apply linkify %}{{name}} said: {{message}}{% end %}\n\n    Note that as an implementation detail apply blocks are implemented\n    as nested functions and thus may interact strangely with variables\n    set via ``{% set %}``, or the use of ``{% break %}`` or ``{% continue %}``\n    within loops.\n\n``{% autoescape *function* %}``\n    Sets the autoescape mode for the current file.  This does not affect\n    other files, even those referenced by ``{% include %}``.  Note that\n    autoescaping can also be configured globally, at the `.Application`\n    or `Loader`.::\n\n        {% autoescape xhtml_escape %}\n        {% autoescape None %}\n\n``{% block *name* %}...{% end %}``\n    Indicates a named, replaceable block for use with ``{% extends %}``.\n    Blocks in the parent template will be replaced with the contents of\n    the same-named block in a child template.::\n\n        <!-- base.html -->\n        <title>{% block title %}Default title{% end %}</title>\n\n        <!-- mypage.html -->\n        {% extends "base.html" %}\n        {% block title %}My page title{% end %}\n\n``{% comment ... %}``\n    A comment which will be removed from the template output.  Note that\n    there is no ``{% end %}`` tag; the comment goes from the word ``comment``\n    to the closing ``%}`` tag.\n\n``{% extends *filename* %}``\n    Inherit from another template.  Templates that use ``extends`` should\n    contain one or more ``block`` tags to replace content from the parent\n    template.  Anything in the child template not contained in a ``block``\n    tag will be ignored.  For an example, see the ``{% block %}`` tag.\n\n``{% for *var* in *expr* %}...{% end %}``\n    Same as the python ``for`` statement.  ``{% break %}`` and\n    ``{% continue %}`` may be used inside the loop.\n\n``{% from *x* import *y* %}``\n    Same as the python ``import`` statement.\n\n``{% if *condition* %}...{% elif *condition* %}...{% else %}...{% end %}``\n    Conditional statement - outputs the first section whose condition is\n    true.  (The ``elif`` and ``else`` sections are optional)\n\n``{% import *module* %}``\n    Same as the python ``import`` statement.\n\n``{% include *filename* %}``\n    Includes another template file.  The included file can see all the local\n    variables as if it were copied directly to the point of the ``include``\n    directive (the ``{% autoescape %}`` directive is an exception).\n    Alternately, ``{% module Template(filename, **kwargs) %}`` may be used\n    to include another template with an isolated namespace.\n\n``{% module *expr* %}``\n    Renders a `~tornado.web.UIModule`.  The output of the ``UIModule`` is\n    not escaped::\n\n        {% module Template("foo.html", arg=42) %}\n\n    ``UIModules`` are a feature of the `tornado.web.RequestHandler`\n    class (and specifically its ``render`` method) and will not work\n    when the template system is used on its own in other contexts.\n\n``{% raw *expr* %}``\n    Outputs the result of the given expression without autoescaping.\n\n``{% set *x* = *y* %}``\n    Sets a local variable.\n\n``{% try %}...{% except %}...{% else %}...{% finally %}...{% end %}``\n    Same as the python ``try`` statement.\n\n``{% while *condition* %}... {% end %}``\n    Same as the python ``while`` statement.  ``{% break %}`` and\n    ``{% continue %}`` may be used inside the loop.\n\n``{% whitespace *mode* %}``\n    Sets the whitespace mode for the remainder of the current file\n    (or until the next ``{% whitespace %}`` directive). See\n    `filter_whitespace` for available options. New in Tornado 4.3.\n'
    int_0 = 365
    locale_0 = module_0.get()
    str_1 = locale_0.pgettext(str_0, str_0, str_0, int_0)

def test_case_13():
    float_0 = 60.0
    str_0 = 'pzAoX\\'
    dict_0 = None
    dict_1 = {str_0: dict_0}
    c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_1)
    str_1 = c_s_v_locale_0.pgettext(str_0, str_0, str_0, float_0)

def test_case_14():
    str_0 = 'R`^"q5(P-.9Gx@{y|4/'
    str_1 = '_tt_modules.'
    null_translations_0 = module_1.NullTranslations()
    gettext_locale_0 = module_0.GettextLocale(str_0, null_translations_0)
    str_2 = gettext_locale_0.pgettext(str_0, str_1)

def test_case_15():
    str_0 = 'nn_NO'
    module_0.set_default_locale(str_0)
    str_1 = '{7Y8Nybebar]Q"#9'
    list_0 = [str_1]
    locale_0 = module_0.get(*list_0)

def test_case_16():
    str_0 = 'fa'
    str_1 = 'R`^"q5(P-.9Gx@{y|4/'
    str_2 = '_tt_modules.'
    null_translations_0 = module_1.NullTranslations()
    gettext_locale_0 = module_0.GettextLocale(str_0, null_translations_0)
    str_3 = gettext_locale_0.pgettext(str_1, str_2)

def test_case_17():
    str_0 = None
    locale_0 = module_0.get()
    int_0 = -1279
    int_1 = -2570
    str_1 = locale_0.friendly_number(int_1)
    str_2 = locale_0.list(str_1)
    int_2 = -135
    str_3 = locale_0.pgettext(str_0, str_0, str_2, int_2)
    str_4 = 'j\\E^Nh\ta'
    str_5 = 'vWj e##('
    list_0 = [str_4, str_5, str_3, str_4]
    locale_1 = module_0.get(*list_0)
    str_6 = locale_0.format_date(int_0, int_1)
    str_7 = 'An alias for\n        `self.request.cookies <.httputil.HTTPServerRequest.cookies>`.'
    str_8 = locale_0.format_date(int_0)
    null_translations_0 = module_1.NullTranslations()
    gettext_locale_0 = module_0.GettextLocale(str_7, null_translations_0)
    bool_0 = None
    str_9 = locale_0.format_date(int_1)
    str_10 = None
    module_0.load_translations(str_10)
    str_11 = 'Kt%pl!1r`dfR'
    gettext_locale_1 = module_0.GettextLocale(str_6, null_translations_0)
    locale_2 = module_0.get()
    int_3 = 756
    str_12 = '&f`]hS'
    str_13 = gettext_locale_1.pgettext(str_11, str_12, str_8, int_0)
    int_4 = 725
    str_14 = locale_2.format_date(int_3, int_4, bool_0)