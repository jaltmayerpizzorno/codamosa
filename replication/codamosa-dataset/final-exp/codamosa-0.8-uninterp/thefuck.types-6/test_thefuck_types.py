# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    dict_0 = None
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    str_0 = '"j<Sd6'
    command_0 = module_0.Command(list_0, str_0)
    var_0 = command_0.update()

def test_case_2():
    str_0 = 'MhN7`'
    list_0 = []
    dict_0 = {str_0: list_0}
    str_1 = 'IZl%ljV4X^U3(<zlb'
    dict_1 = {}
    corrected_command_0 = module_0.CorrectedCommand(str_1, dict_1, dict_1)
    var_0 = corrected_command_0.run(dict_0)
    bool_0 = True
    list_1 = []
    bytes_0 = b'\xca\xa0?R\x96\xe0;!\x04'
    float_0 = 0.1
    tuple_0 = (bytes_0, float_0)
    tuple_1 = (bool_0, dict_1, list_1, tuple_0)
    var_1 = corrected_command_0.run(list_1)
    dict_2 = {bool_0: tuple_0}
    bool_1 = False
    command_0 = module_0.Command(dict_2, bool_1)
    bytes_1 = b''
    dict_3 = {}
    str_2 = '8C39mI1X'
    rule_0 = module_0.Rule(tuple_1, tuple_1, command_0, bytes_1, dict_3, list_0, str_2)
    var_2 = rule_0.__repr__()

def test_case_3():
    str_0 = 'omitting directory'
    dict_0 = {}
    str_1 = '^  File "{file}", line {line}'
    str_2 = None
    list_0 = [dict_0]
    bool_0 = True
    rule_0 = module_0.Rule(str_0, str_0, dict_0, str_1, str_2, list_0, bool_0)

def test_case_4():
    str_0 = ''
    bool_0 = True
    rule_0 = module_0.Rule(str_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    rule_1 = module_0.Rule(str_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    str_1 = 'ls'
    command_0 = module_0.Command(str_1, rule_0)
    var_0 = rule_1.is_match(command_0)

def test_case_5():
    str_0 = 'tag'
    dict_0 = {}
    corrected_command_0 = module_0.CorrectedCommand(str_0, dict_0, dict_0)

def test_case_6():
    int_0 = -351
    bool_0 = False
    int_1 = 4
    list_0 = [int_1, bool_0, bool_0, bool_0]
    corrected_command_0 = module_0.CorrectedCommand(bool_0, int_1, list_0)
    var_0 = corrected_command_0.__eq__(int_0)

def test_case_7():
    bytes_0 = b'\x95t\xc27\xb7\xd7='
    bytes_1 = b"G\xabV\x1b_\xc5\xf2'\x84L'\x1a\xf7F\x00\xf6\x19\xf5"
    list_0 = []
    float_0 = 0.85
    str_0 = None
    dict_0 = {str_0: bytes_1, str_0: float_0, str_0: list_0, str_0: float_0}
    rule_0 = module_0.Rule(bytes_0, float_0, bytes_1, bytes_1, list_0, float_0, dict_0)
    dict_1 = {str_0: dict_0}
    list_1 = [bytes_1, bytes_0, dict_1, str_0]
    bytes_2 = b"\xd9a\x8cGE\x9a\x8c\x9c\xf5'\x0b\xdbX\xf9\xc0"
    command_0 = module_0.Command(bytes_2, dict_0)
    var_0 = rule_0.is_match(command_0)
    command_1 = module_0.Command(dict_0, list_1)
    int_0 = -14
    command_2 = module_0.Command(dict_0, int_0)
    list_2 = [bytes_0, float_0]
    corrected_command_0 = module_0.CorrectedCommand(rule_0, command_2, list_2)
    var_1 = corrected_command_0.__repr__()
    var_2 = corrected_command_0.__eq__(dict_0)
    var_3 = command_2.__repr__()
    var_4 = rule_0.__eq__(rule_0)

def test_case_8():
    str_0 = 'Mh7'
    dict_0 = {}
    corrected_command_0 = module_0.CorrectedCommand(str_0, dict_0, dict_0)
    var_0 = corrected_command_0.run(dict_0)

def test_case_9():
    str_0 = ''
    bool_0 = True
    var_0 = lambda command: str_0
    var_1 = lambda command: str_0
    var_2 = None
    rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, var_2, bool_0, bool_0)
    command_0 = module_0.Command(str_0, var_2)
    var_3 = rule_0.is_match(command_0)
    command_1 = module_0.Command(str_0, str_0)
    var_4 = lambda command: bool_0
    var_5 = lambda command: str_0
    rule_1 = module_0.Rule(str_0, var_4, var_5, bool_0, var_2, bool_0, bool_0)
    command_2 = module_0.Command(str_0, var_2)
    command_3 = module_0.Command(str_0, str_0)
    var_6 = rule_1.is_match(command_3)
    var_7 = lambda command: bool_0
    var_8 = lambda command: str_0
    rule_2 = module_0.Rule(str_0, var_7, var_8, bool_0, var_2, bool_0, bool_0)
    command_4 = module_0.Command(str_0, str_0)
    var_9 = rule_2.is_match(command_4)
    command_5 = module_0.Command(str_0, str_0)

def test_case_10():
    str_0 = ''
    var_0 = None
    bool_0 = True
    rule_0 = module_0.Rule(str_0, var_0, var_0, bool_0, var_0, var_0, var_0)
    rule_1 = module_0.Rule(str_0, var_0, var_0, bool_0, var_0, var_0, var_0)
    str_1 = 'ls'
    command_0 = module_0.Command(str_1, var_0)
    var_1 = rule_1.is_match(command_0)

def test_case_11():
    str_0 = 'wS[]+.r:y'
    var_0 = lambda x: str_0
    var_1 = lambda x: x
    var_2 = None
    command_0 = module_0.Command(str_0, str_0)
    bool_0 = True
    var_3 = lambda x: bool_0
    var_4 = lambda x: x
    int_0 = 351
    tuple_0 = (str_0, int_0)
    command_1 = module_0.Command(command_0, tuple_0)
    command_2 = module_0.Command(str_0, str_0)
    var_5 = lambda x: x
    rule_0 = module_0.Rule(str_0, var_5, var_5, bool_0, var_2, bool_0, bool_0)
    var_6 = rule_0.is_match(command_0)
    var_7 = lambda x: bool_0
    var_8 = lambda x: x
    rule_1 = module_0.Rule(str_0, var_7, var_8, bool_0, var_2, bool_0, bool_0)
    command_3 = module_0.Command(str_0, var_2)
    var_9 = lambda x: bool_0
    rule_2 = module_0.Rule(str_0, var_9, var_5, bool_0, var_2, bool_0, bool_0)