# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        str_0 = '9JXeZ ^>9:fj.G'
        dict_0 = {str_0: str_0, str_0: str_0}
        float_0 = None
        set_0 = {float_0}
        list_0 = [float_0, set_0, set_0]
        bytes_0 = b'\\\xd0\xac?\x1a\xe5\xe6\xca'
        bytes_1 = b'\xdc\x9f\xdfB\xf4\x99\xc6\xd5\x89v'
        bool_0 = False
        command_0 = module_0.Command(bytes_1, bool_0)
        var_0 = command_0.__eq__(bytes_0)
        command_1 = module_0.Command(set_0, list_0)
        var_1 = command_1.update(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        bytes_0 = b'>*\xc6e\xc9dI\xeb\xb1\xa6C\xe0"l\xe1\x15U\x94\xf2'
        bool_1 = True
        str_0 = '~'
        dict_0 = None
        corrected_command_0 = module_0.CorrectedCommand(bool_1, str_0, dict_0)
        complex_0 = None
        command_0 = module_0.Command(corrected_command_0, complex_0)
        bool_2 = True
        dict_1 = {bool_0: bool_2, bool_0: bool_2}
        bytes_1 = b'Y\xbe\x83\xf5\xc4I\xbc\xeb\x84\x85\x8b\\\xdc\x1b\xd1\xe9\xb2\xf4\xf3'
        command_1 = module_0.Command(dict_1, bytes_1)
        var_0 = command_1.__eq__(command_0)
        str_1 = 'B\tc;\n'
        dict_2 = {bytes_0: bool_0, bool_0: bool_0, str_1: bytes_0}
        str_2 = 'o/FO'
        list_0 = []
        corrected_command_1 = module_0.CorrectedCommand(str_2, dict_2, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x95t\xc27\xb7\xd7='
        bytes_1 = b'^\x07\xa3N\xc2\x9cN#'
        bytes_2 = b"G\xabV\x1b_\xc5\xf2'\x84L'\x1a\xf7F\x00\x19\xf5"
        list_0 = []
        float_0 = 0.85
        str_0 = None
        str_1 = '(S\\K)1@"rYZ9YWm3B'
        dict_0 = {str_0: bytes_2, str_0: float_0, str_0: list_0, str_1: float_0}
        rule_0 = module_0.Rule(bytes_0, float_0, bytes_1, bytes_2, list_0, float_0, dict_0)
        var_0 = rule_0.__eq__(str_1)
        int_0 = -14
        command_0 = module_0.Command(dict_0, int_0)
        list_1 = [bytes_0, float_0]
        corrected_command_0 = module_0.CorrectedCommand(rule_0, command_0, list_1)
        int_1 = 354
        corrected_command_1 = module_0.CorrectedCommand(int_1, str_0, dict_0)
        var_1 = corrected_command_1.__repr__()
        var_2 = corrected_command_1.__eq__(dict_0)
        var_3 = command_0.__repr__()
        str_2 = 'u=<uU.{~y_(L'
        command_1 = module_0.Command(corrected_command_0, str_2)
        var_4 = command_1.__repr__()
        dict_1 = {}
        list_2 = [dict_1, dict_1]
        var_5 = corrected_command_0.__repr__()
        set_0 = set()
        corrected_command_2 = module_0.CorrectedCommand(list_2, set_0, dict_1)
        var_6 = corrected_command_2.run(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x95t\xc27\xb7\xd7='
        float_0 = 2588.927
        list_0 = []
        str_0 = None
        str_1 = '(S\\K)1@aYZ9#YWmKB&'
        dict_0 = {str_0: bytes_0, str_0: float_0, str_0: list_0, str_1: float_0}
        rule_0 = module_0.Rule(bytes_0, float_0, bytes_0, bytes_0, list_0, float_0, dict_0)
        dict_1 = {str_0: dict_0}
        list_1 = [bytes_0, bytes_0, dict_1, str_0]
        bytes_1 = b"\xd9a\x8cGE\x9a\x8c\x9c\xf5'\x0b\xdbX\xf9\xc0"
        command_0 = module_0.Command(bytes_1, dict_0)
        var_0 = rule_0.is_match(command_0)
        command_1 = module_0.Command(dict_0, list_1)
        int_0 = -14
        command_2 = module_0.Command(dict_0, int_0)
        var_1 = rule_0.__eq__(rule_0)
        dict_2 = {}
        corrected_command_0 = module_0.CorrectedCommand(float_0, dict_2, list_0)
        bytes_2 = b'\xb4z\xca\xc5\xaa\x01\x1b*\xf7\xdc\x89x\x05\x90\xf9\x14?\x92\x08'
        var_2 = corrected_command_0.run(bytes_2)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -1349
        list_0 = [int_0, int_0, int_0, int_0]
        dict_0 = {}
        bool_0 = True
        command_0 = module_0.Command(dict_0, bool_0)
        complex_0 = None
        tuple_0 = ()
        list_1 = None
        tuple_1 = (complex_0, tuple_0, list_1)
        command_1 = module_0.Command(command_0, tuple_1)
        command_2 = module_0.Command(command_1, command_1)
        corrected_command_0 = module_0.CorrectedCommand(list_0, command_2, command_1)
        var_0 = corrected_command_0.__hash__()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1196.570308
        str_0 = "\\'"
        command_0 = module_0.Command(float_0, str_0)
        int_0 = 489
        str_1 = 'H2p\x0byjpg8%\x0cF5\nUv'
        dict_0 = {}
        list_0 = [str_1, float_0, command_0, str_1]
        corrected_command_0 = module_0.CorrectedCommand(command_0, dict_0, list_0)
        var_0 = corrected_command_0.__eq__(int_0)
        int_1 = 15
        corrected_command_1 = module_0.CorrectedCommand(command_0, command_0, command_0)
        var_1 = corrected_command_1.run(int_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x95t\xc27\xb7\xd7='
        bytes_1 = b'^\x07\xa3N\xc2\x9cN#'
        bytes_2 = b"G\xabV\x1b_\xc5\xf2'\x84L'\x1a\xf7F\x00\xf6\x19\xf5"
        list_0 = []
        float_0 = 0.85
        str_0 = None
        dict_0 = {str_0: bytes_2, str_0: float_0, str_0: list_0, str_0: float_0}
        rule_0 = module_0.Rule(bytes_0, float_0, bytes_1, bytes_2, list_0, float_0, dict_0)
        dict_1 = {str_0: dict_0}
        list_1 = [bytes_2, bytes_0, dict_1, str_0]
        command_0 = module_0.Command(bytes_2, dict_0)
        var_0 = rule_0.is_match(command_0)
        command_1 = module_0.Command(dict_0, list_1)
        int_0 = 354
        dict_2 = {}
        str_1 = 'SWy^mRV\\HU'
        str_2 = "*?f'9s*\x0b~>lYfN(5[ ri"
        corrected_command_0 = module_0.CorrectedCommand(str_2, str_1, int_0)
        var_1 = corrected_command_0.__eq__(corrected_command_0)
        corrected_command_1 = module_0.CorrectedCommand(float_0, dict_2, list_0)
        var_2 = corrected_command_1.run(bytes_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'dummy'
        bool_0 = False
        var_0 = lambda cmd: bool_0
        var_1 = None
        var_2 = lambda cmd: var_1
        bool_1 = True
        rule_0 = module_0.Rule(str_0, var_0, var_2, bool_1, var_1, bool_0, bool_1)
        str_1 = 'chcp'
        command_0 = module_0.Command(str_1, var_1)
        var_3 = rule_0.get_corrected_commands(command_0)
        var_4 = list(var_3)
    except BaseException:
        pass