# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = None
    either_0 = module_0.Either(var_0)

def test_case_2():
    dict_0 = {}
    either_0 = module_0.Either(dict_0)
    either_1 = module_0.Either(either_0)
    var_0 = either_1.to_lazy()
    object_0 = module_1.object()
    bool_0 = either_1.__eq__(object_0)

def test_case_3():
    object_0 = None
    tuple_0 = ()
    dict_0 = {object_0: object_0, object_0: tuple_0, tuple_0: tuple_0}
    right_0 = module_0.Right(dict_0)
    object_1 = module_1.object()
    either_0 = module_0.Either(object_1)
    var_0 = either_0.to_box()

def test_case_4():
    dict_0 = {}
    either_0 = module_0.Either(dict_0)
    either_1 = module_0.Either(either_0)
    var_0 = either_1.to_lazy()
    str_0 = '3@}{EJF\n*wq?brp5R'
    right_0 = module_0.Right(str_0)
    object_0 = module_1.object()
    bool_0 = either_1.__eq__(object_0)
    var_1 = either_0.to_try()

def test_case_5():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    right_0 = module_0.Right(dict_0)
    bool_1 = right_0.is_left()
    str_0 = 'h'
    either_0 = module_0.Either(str_0)
    var_0 = either_0.to_lazy()

def test_case_6():
    str_0 = ';PP%0v`fn/\rn Nd'
    list_0 = [str_0]
    list_1 = [list_0, list_0]
    either_0 = module_0.Either(list_1)
    var_0 = either_0.is_right()

def test_case_7():
    object_0 = module_1.object()
    set_0 = {object_0, object_0}
    left_0 = module_0.Left(set_0)
    bool_0 = True
    either_0 = module_0.Either(bool_0)
    var_0 = either_0.ap(left_0)

def test_case_8():
    var_0 = None
    right_0 = module_0.Right(var_0)
    bool_0 = right_0.is_right()
    str_0 = "'bY{q_9\\UC`L1/~NoJ"
    left_0 = module_0.Left(var_0)
    var_1 = left_0.bind(str_0)
    either_0 = module_0.Either(var_0)
    var_2 = either_0.ap(var_1)
    var_3 = right_0.to_validation()
    either_1 = module_0.Either(var_0)
    var_4 = either_1.to_try()

def test_case_9():
    tuple_0 = ()
    list_0 = [tuple_0]
    left_0 = module_0.Left(list_0)
    bool_0 = left_0.is_left()
    right_0 = module_0.Right(tuple_0)
    bool_1 = True
    either_0 = module_0.Either(bool_1)
    var_0 = either_0.to_try()
    var_1 = right_0.to_validation()
    either_1 = module_0.Either(list_0)
    var_2 = left_0.bind(left_0)
    var_3 = either_1.is_right()

def test_case_10():
    int_0 = 3
    right_0 = module_0.Right(int_0)
    int_1 = 2
    var_0 = lambda _: int_1
    var_1 = lambda x: x
    var_2 = right_0.case(var_0, var_1)
    left_0 = module_0.Left(int_0)
    var_3 = lambda x: x
    var_4 = lambda _: int_1
    var_5 = left_0.case(var_3, var_4)

def test_case_11():
    bool_0 = True
    either_0 = module_0.Either(bool_0)
    object_0 = module_1.object()
    bool_1 = True
    right_0 = module_0.Right(bool_1)
    either_1 = module_0.Either(right_0)
    bool_2 = either_1.__eq__(object_0)
    left_0 = module_0.Left(either_1)
    bool_3 = left_0.is_left()
    left_1 = module_0.Left(object_0)
    bool_4 = right_0.is_left()
    var_0 = left_1.to_maybe()
    var_1 = left_1.to_validation()
    bool_5 = left_1.is_right()
    str_0 = 'l,@]\\5pJS&vNE={,/'
    bool_6 = left_1.is_left()
    var_2 = left_0.bind(str_0)

def test_case_12():
    int_0 = True
    right_0 = module_0.Right(int_0)
    var_0 = right_0.to_validation()

def test_case_13():
    int_0 = 1
    right_0 = module_0.Right(int_0)
    right_1 = module_0.Right(int_0)
    right_2 = module_0.Right(int_0)
    int_1 = 2
    var_0 = right_2 == right_2
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    left_2 = module_0.Left(int_0)
    left_3 = module_0.Left(int_1)
    var_1 = left_2 == left_3
    right_3 = module_0.Right(int_0)
    left_4 = module_0.Left(int_0)
    var_2 = right_3 == left_4
    left_5 = module_0.Left(int_0)
    right_4 = module_0.Right(int_0)
    var_3 = left_5 == right_4
    right_5 = module_0.Right(int_0)
    var_4 = ()
    var_5 = right_5 == var_4