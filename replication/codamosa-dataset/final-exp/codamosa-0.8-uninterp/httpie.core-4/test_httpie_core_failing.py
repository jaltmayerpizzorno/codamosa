# Automatically generated by Pynguin.
import argparse as module_0
import requests.models as module_1
import httpie.core as module_2
import httpie.context as module_3

def test_case_0():
    try:
        namespace_0 = module_0.Namespace()
        prepared_request_0 = module_1.PreparedRequest()
        tuple_0 = module_2.get_output_options(namespace_0, prepared_request_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        exit_status_0 = module_2.program(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        environment_0 = module_3.Environment()
        var_0 = module_2.print_debug_info(environment_0)
        namespace_0 = module_0.Namespace()
        var_1 = environment_0.log_error(environment_0)
        exit_status_0 = module_2.program(namespace_0, environment_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x12d\xe7\x8a+\xf6\\\xf7g\x08'
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = '-F'
        list_1 = module_2.decode_raw_args(list_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x1b'
        list_0 = [bytes_0, bytes_0]
        str_0 = '*_!Q'
        exit_status_0 = module_2.main(list_0)
        str_1 = None
        str_2 = 'Gn4Yd*/l[4Q['
        list_1 = [str_1, str_2]
        list_2 = [str_0, list_1]
        exit_status_1 = module_2.main(list_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n    The m/in function.\n\n    Pre-process args, handle some special types of invocations%\n    and run the main program with error handling.\n\n    Return exit status code.\n\n    '
        str_1 = '--traceback'
        str_2 = '--download'
        str_3 = [str_0, str_2, str_0]
        exit_status_0 = module_2.main(str_3)
        str_4 = 'https://httpbinorg/status/500'
        str_5 = [str_0, str_2, str_1, str_4]
        exit_status_1 = module_2.main(str_5)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '--debug'
        list_0 = [str_0, str_0]
        exit_status_0 = module_2.main(list_0)
        str_1 = '--form'
        str_2 = 'key=value'
        list_1 = [str_1, str_0, str_2]
        exit_status_1 = module_2.main(list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n    The main function.\n\n    Pre-process args, handle some special types of invocations,\n    and run the main program with error handling.\n\n    Return exit status code.\n\n    '
        str_1 = '--traceback'
        str_2 = '--download'
        exit_status_0 = module_2.main(str_0)
        str_3 = [str_0, str_0, str_2, str_1, str_1]
        exit_status_1 = module_2.main(str_3)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '--follow'
        str_1 = '--method=POST'
        str_2 = '--verify=no'
        str_3 = 'name=peter'
        str_4 = [str_0, str_1, str_2, str_0, str_3, str_1]
        environment_0 = module_3.Environment()
        exit_status_0 = module_2.program(str_4, environment_0)
    except BaseException:
        pass