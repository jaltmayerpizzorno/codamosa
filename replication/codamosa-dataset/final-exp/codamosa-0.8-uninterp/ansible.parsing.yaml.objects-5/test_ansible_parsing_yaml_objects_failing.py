# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ')e{oor(0|p*|]$'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 206.397
        list_0 = []
        list_1 = [float_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 60.0
        str_0 = ''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1641.323973
        str_0 = '/E6'
        bytes_0 = b'\x17/$\x1e\x16\xdc%\xc0{(0rCK\xbf'
        set_0 = {str_0, float_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.center(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'H+708v4OTs'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        float_0 = 512.0
        ansible_mapping_0 = None
        var_0 = ansible_vault_encrypted_unicode_0.count(float_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        str_0 = 'hp(Fd[ghFlIo]{&R)PV'
        str_1 = '.'
        dict_0 = {str_0: list_0, str_1: str_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.format()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'foo'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        var_1 = ansible_vault_encrypted_unicode_0 < ansible_vault_encrypted_unicode_0
        str_1 = 'f^}>KqOW'
        var_2 = ansible_vault_encrypted_unicode_0.format_map(str_1)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_3 = ansible_vault_encrypted_unicode_0.join(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '2d1s'
        set_0 = {str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.lower()
        str_1 = 'f+\rM?R~qN@|Kt:Gs]'
        str_2 = None
        dict_0 = {str_1: str_1, str_2: str_1}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        dict_1 = None
        tuple_0 = ()
        var_1 = ansible_vault_encrypted_unicode_1.replace(dict_1, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.splitlines()
        var_1 = ansible_vault_encrypted_unicode_0.partition(ansible_unicode_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '!wN('
        float_0 = -1034.5
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.rindex(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        tuple_0 = ()
        int_0 = 2252
        list_0 = [bool_0, tuple_0, int_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.split()
        str_0 = None
        set_0 = {str_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_1 = ansible_vault_encrypted_unicode_1.__int__()
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -2067.42361
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        set_0 = {ansible_vault_encrypted_unicode_0}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_1.startswith(ansible_vault_encrypted_unicode_0, set_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'This is secret'
        dict_0 = {str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        dict_1 = {str_0: str_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        int_0 = -3271
        list_0 = [ansible_vault_encrypted_unicode_1, dict_0, dict_1]
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_1.strip()
        var_1 = ansible_vault_encrypted_unicode_0.__gt__(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Manage the integration between Galaxy and the given source.'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        int_0 = -3271
        list_0 = [var_0]
        var_1 = ansible_vault_encrypted_unicode_0.find(int_0, list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '?On>nj{X`[0j|Mk&8'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_17():
    try:
        dict_0 = {}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        bool_1 = True
        var_0 = ansible_vault_encrypted_unicode_0.__mod__(bool_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'Manage the integration between Galaxy and the given source.'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        ansible_mapping_0 = None
        list_0 = [ansible_vault_encrypted_unicode_0, ansible_mapping_0, ansible_mapping_0, var_0]
        var_1 = ansible_vault_encrypted_unicode_0.translate(*list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '=<HS'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'v5o!7i@hI587dL8;2Uz/'
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__radd__(str_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_1 = '30DBlinAf\n*)'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_1 = ansible_vault_encrypted_unicode_2.ljust(ansible_mapping_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        tuple_0 = None
        float_0 = -2517.553086483846
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.isidentifier()
        var_1 = ansible_vault_encrypted_unicode_0.__len__()
        var_2 = ansible_vault_encrypted_unicode_0.__radd__(tuple_0)
        var_3 = ansible_vault_encrypted_unicode_0.splitlines()
        var_4 = ansible_vault_encrypted_unicode_0.__add__(ansible_vault_encrypted_unicode_0)
        bytes_0 = b'^\x98\x10\xf6\xebw$\x84'
        var_5 = ansible_vault_encrypted_unicode_0.__eq__(bytes_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_6 = ansible_vault_encrypted_unicode_0.isdigit()
        list_0 = [var_1, var_1, float_0]
        var_7 = ansible_vault_encrypted_unicode_0.find(list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = True
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.index(bool_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = "\r6{'b23j8c0u6cr"
        float_0 = -984.6369
        tuple_0 = (str_0, float_0)
        bytes_0 = b'\xc9\x8bL\xd0\xe2\x87q\xb6\xe2\x1f'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.endswith(tuple_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'O/l6F1T7Te}i,\n/UVK\x0b'
        list_0 = [str_0, str_0, str_0]
        str_1 = '~c/ah@aTz`V$3I;m`^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        tuple_0 = None
        float_0 = -2517.553086483846
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_1.is_encrypted()
        var_1 = ansible_vault_encrypted_unicode_1.__len__()
        list_1 = [var_0, str_1, str_0, list_0]
        var_2 = ansible_vault_encrypted_unicode_0.isalnum()
        var_3 = ansible_vault_encrypted_unicode_1.__ne__(list_1)
        var_4 = ansible_vault_encrypted_unicode_1.isalnum()
        var_5 = ansible_vault_encrypted_unicode_1.__radd__(tuple_0)
        bytes_0 = b'\xde'
        var_6 = ansible_vault_encrypted_unicode_0.__add__(bytes_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_7 = ansible_vault_encrypted_unicode_0.__ge__(ansible_vault_encrypted_unicode_1)
        dict_0 = None
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_26():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.isprintable()
        list_0 = None
        var_1 = ansible_vault_encrypted_unicode_0.__mul__(list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'O/l6F1T7Te}i,\n/UVK\x0b'
        list_0 = [str_0, str_0, str_0]
        str_1 = '~c/ah@aTz`V$3I;m`^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        tuple_0 = None
        float_0 = -2517.553086483846
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_1 = ansible_vault_encrypted_unicode_0.__len__()
        var_2 = ansible_vault_encrypted_unicode_0.__radd__(tuple_0)
        var_3 = ansible_vault_encrypted_unicode_0.__eq__(float_0)
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_4 = ansible_vault_encrypted_unicode_1.replace(ansible_vault_encrypted_unicode_0, bool_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'O/l6F1T7Te}i,\n/UVK\x0b'
        list_0 = [str_0, str_0, str_0]
        str_1 = '~c/ah@aTz`V$3I;m`^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        tuple_0 = None
        float_0 = -2517.553086483846
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_1.is_encrypted()
        var_1 = ansible_vault_encrypted_unicode_1.__len__()
        list_1 = [var_0, str_1, str_0, list_0]
        var_2 = ansible_vault_encrypted_unicode_1.__ne__(list_1)
        var_3 = ansible_vault_encrypted_unicode_1.isalnum()
        var_4 = ansible_vault_encrypted_unicode_1.__radd__(tuple_0)
        var_5 = ansible_vault_encrypted_unicode_0.is_encrypted()
        dict_0 = {}
        var_6 = ansible_vault_encrypted_unicode_0.__radd__(dict_0)
        var_7 = ansible_vault_encrypted_unicode_1.is_encrypted()
        ansible_sequence_0 = None
        var_8 = ansible_vault_encrypted_unicode_0.__eq__(ansible_sequence_0)
        dict_1 = {float_0: var_4}
        str_2 = '\\INrcZ#I{h04h9Q'
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        dict_2 = {str_2: ansible_sequence_0, str_2: var_7, str_1: ansible_base_y_a_m_l_object_0, str_0: var_1}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_2)
        var_9 = ansible_vault_encrypted_unicode_1.replace(dict_1, ansible_vault_encrypted_unicode_2)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'abc'
        float_0 = -3983.74
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        list_0 = [float_0, float_0]
        list_1 = None
        set_0 = {str_0, list_1, str_0, list_1}
        dict_0 = {str_0: set_0}
        ansible_mapping_0 = None
        list_2 = [str_0]
        tuple_0 = (set_0, dict_0, ansible_mapping_0, list_2)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_1.rfind(ansible_vault_encrypted_unicode_0, list_0)
    except BaseException:
        pass