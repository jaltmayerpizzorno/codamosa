# Automatically generated by Pynguin.
import ansible.module_utils.common.arg_spec as module_0

def test_case_0():
    try:
        str_0 = 'nolo'
        var_0 = dict(type=str_0, aliases=str_0)
        var_1 = {str_0: var_0, str_0: var_0}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_1)
        var_2 = argument_spec_validator_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        var_0 = dict(type=str_0, aliases=str_0)
        var_1 = {str_0: var_0, str_0: var_0}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_1)
        var_2 = argument_spec_validator_0.validate(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        int_0 = -2247
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0, dict_0, int_0)
        tuple_0 = ()
        list_0 = []
        var_0 = argument_spec_validator_0.validate(tuple_0, *list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = None
        bool_0 = False
        str_0 = 'ec\x0bRNh\\4Z6"Y%m'
        validation_result_0 = module_0.ValidationResult(str_0)
        dict_0 = {str_0: bool_0, str_0: validation_result_0, str_0: str_0}
        dict_1 = {str_0: dict_0, str_0: dict_0}
        set_0 = {bool_0, int_0, str_0}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_1, set_0)
        dict_2 = {bool_0: set_0, argument_spec_validator_0: dict_0, argument_spec_validator_0: dict_0}
        var_0 = argument_spec_validator_0.validate(dict_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'required'
        bool_0 = True
        var_0 = {str_0: str_0, str_0: bool_0, str_0: str_0}
        var_1 = {str_0: var_0}
        var_2 = []
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_1, var_2)
        var_3 = {}
        var_4 = argument_spec_validator_0.validate(var_3)
        var_5 = argument_spec_validator_0.valid
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = None
        str_0 = ''
        validation_result_0 = module_0.ValidationResult(str_0)
        dict_0 = {}
        list_0 = []
        bytes_0 = None
        list_1 = [dict_0, int_0, int_0, bytes_0]
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*list_1)
        var_0 = module_argument_spec_validator_0.validate(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'test'
        str_1 = 'required'
        str_2 = 'options'
        bool_0 = True
        var_0 = {str_0: str_0, str_1: bool_0, str_2: str_1}
        var_1 = {str_0: var_0}
        var_2 = []
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_1, var_2)
        var_3 = argument_spec_validator_0.validate(var_2)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'name'
        str_1 = 'age'
        str_2 = 'str'
        str_3 = {str_0: str_2}
        str_4 = {str_2: str_1}
        str_5 = {str_0: str_3, str_1: str_4}
        str_6 = {str_0: str_5, str_1: str_4}
        var_0 = {}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_5, str_4, str_6, str_1, str_2, var_0)
        var_1 = argument_spec_validator_0.validate(str_6)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'foR'
        str_1 = 'z\nz'
        str_2 = 'default'
        str_3 = ')ar'
        str_4 = [str_3, str_1, str_2, str_3]
        var_0 = dict(type=str_4, aliases=str_4)
        var_1 = {str_0: var_0, str_1: var_0}
        validation_result_0 = module_0.ValidationResult(str_0)
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_1)
        dict_0 = {str_3: str_2}
        var_2 = argument_spec_validator_0.validate(dict_0)
    except BaseException:
        pass