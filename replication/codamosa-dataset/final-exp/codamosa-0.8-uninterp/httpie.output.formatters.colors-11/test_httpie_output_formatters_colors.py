# Automatically generated by Pynguin.
import httpie.output.formatters.colors as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'y \x0bd[I/FZm'
    optional_0 = module_0.get_lexer(str_0, str_0)

def test_case_2():
    str_0 = '/C@5ZM\ng=o'
    optional_0 = module_0.get_lexer(str_0)

def test_case_3():
    solarized256_style_0 = module_0.Solarized256Style()
    str_0 = '\n    Optional key-value pairs to be included in the request. The separator used\n    determines the type:\n\n    \':\' HTTP headers:\n\n        Referer:http://httpie.org  Cookie:foo=bar  User-Agent:bacon/1.0\n\n    \'==\' URL parameters to be appended to the request URI:\n\n        search==httpie\n\n    \'=\' Data fields to be serialized into a JSON object (with --json, -j)\n        oP form data (with --form, -f):\n\n        name=HTTPie  language=Python  description=\'CLI HTTP client\'\n\n    \':=\' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:=\'["red", "green", "blue"]\'\n\n    \'@\' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@\'~/Documents/CV.pdf;type=application/pdf\'\n\n    \'=@\' A data field like \'=\', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    \':=@\' A raw JSON field like \':=\', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '
    list_0 = [solarized256_style_0, str_0, solarized256_style_0, str_0]
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    optional_0 = module_0.get_lexer(str_0, list_0, simplified_h_t_t_p_lexer_0)
    optional_1 = module_0.get_lexer(str_0)
    solarized256_style_1 = module_0.Solarized256Style()
    simplified_h_t_t_p_lexer_1 = module_0.SimplifiedHTTPLexer()
    optional_2 = module_0.get_lexer(str_0)