# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        str_0 = '3Xi:Ee<IQ)04Cz'
        host_0 = module_0.Host(str_0)
        var_0 = host_0.get_vars()
        bool_0 = False
        host_1 = module_0.Host()
        var_1 = host_1.__setstate__(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        host_0 = module_0.Host()
        dict_0 = None
        dict_1 = {host_0: host_0, host_0: host_0, host_0: dict_0}
        var_0 = host_0.deserialize(dict_1)
        host_1 = module_0.Host()
        var_1 = host_1.__str__()
        var_2 = host_0.get_vars()
    except BaseException:
        pass

def test_case_2():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__hash__()
        var_1 = host_0.__repr__()
        int_0 = -1243
        var_2 = host_0.__eq__(int_0)
        var_3 = host_0.serialize()
        str_0 = '7_3tj("YBnJY"'
        var_4 = host_0.__ne__(str_0)
        var_5 = host_0.get_vars()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'J%'
        host_0 = module_0.Host()
        var_0 = host_0.__ne__(str_0)
        host_1 = module_0.Host()
        var_1 = host_1.serialize()
        float_0 = -1239.5258
        str_1 = ')w=&7\x0bC(f=RY'
        host_2 = module_0.Host(float_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__repr__()
        var_1 = host_0.__str__()
        float_0 = -1591.451796
        str_0 = '0!'
        var_2 = host_0.populate_ancestors(str_0)
        var_3 = host_0.remove_group(float_0)
        host_1 = module_0.Host()
        int_0 = 364
        dict_0 = {}
        host_2 = module_0.Host(dict_0)
        var_4 = host_2.__setstate__(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'gw9'
        host_0 = module_0.Host()
        var_0 = host_0.remove_group(str_0)
        bytes_0 = b'\x8ew1\xe5\xd4G\xf5='
        var_1 = host_0.add_group(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.get_magic_vars()
    except BaseException:
        pass

def test_case_7():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__repr__()
        var_1 = host_0.__str__()
        float_0 = -1591.451796
        str_0 = '0!'
        var_2 = host_0.populate_ancestors(str_0)
        var_3 = host_0.remove_group(float_0)
        var_4 = host_0.serialize()
    except BaseException:
        pass

def test_case_8():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__repr__()
        var_1 = host_0.__str__()
        bool_0 = False
        float_0 = -1591.451796
        str_0 = '0\\i'
        var_2 = host_0.populate_ancestors(str_0)
        var_3 = host_0.remove_group(float_0)
        set_0 = {bool_0, bool_0, bool_0}
        host_1 = module_0.Host()
        var_4 = host_1.set_variable(bool_0, set_0)
        var_5 = host_0.populate_ancestors()
    except BaseException:
        pass

def test_case_9():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__repr__()
        var_1 = host_0.get_name()
        var_2 = host_0.__str__()
        bool_0 = False
        dict_0 = {var_0: host_0, bool_0: bool_0, host_0: var_2}
        var_3 = host_0.__setstate__(dict_0)
        float_0 = -1591.451796
        str_0 = 'exec'
        var_4 = host_0.populate_ancestors(str_0)
        var_5 = host_0.remove_group(float_0)
        set_0 = {bool_0, bool_0, bool_0}
        host_1 = module_0.Host()
        var_6 = host_1.set_variable(bool_0, set_0)
        var_7 = host_0.__eq__(set_0)
        var_8 = host_0.serialize()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'test_host'
        host_0 = module_0.Host(str_0)
        str_1 = 'all'
        group_0 = module_1.Group(str_1)
        var_0 = host_0.add_group(group_0)
        var_1 = host_0.get_vars()
        host_1 = module_0.Host(group_0)
        var_2 = host_1.get_vars()
    except BaseException:
        pass