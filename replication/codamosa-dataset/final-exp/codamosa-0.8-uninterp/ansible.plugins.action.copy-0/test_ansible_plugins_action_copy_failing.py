# Automatically generated by Pynguin.
import ansible.plugins.action.copy as module_0

def test_case_0():
    try:
        str_0 = "\n    Execute a command while detaching as a daemon, returns rc, stdout, and stderr.\n\n    :arg module: is an  AnsibleModule object, used for it's utility methods\n    :arg cmd: is a list or string representing the command and options to run\n\n    This is complex because daemonization is hard for people.\n    What we do is daemonize a part of this module, the daemon runs the command,\n    picks up the return code and output, and returns it to the main process.\n    "
        str_1 = '9X B'
        list_0 = [str_0, str_1]
        set_0 = set()
        float_0 = -2021.0
        str_2 = '"h\x0ct`x'
        int_0 = -2165
        action_module_0 = module_0.ActionModule(str_0, list_0, set_0, float_0, str_2, int_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x17\x13\xd1\x08u\xdd)\xbah\xafqW\x8b\x12\xce'
        str_0 = '$(<l%vk6xv1E0'
        action_module_0 = None
        dict_0 = {action_module_0: action_module_0, action_module_0: action_module_0, action_module_0: action_module_0}
        list_0 = [dict_0]
        int_0 = 11
        str_1 = '?\tI*j)bBcXx*'
        float_0 = 4287.0
        action_module_1 = module_0.ActionModule(list_0, int_0, str_1, float_0, action_module_0, list_0)
        var_0 = action_module_1.run(bytes_0, str_0)
    except BaseException:
        pass