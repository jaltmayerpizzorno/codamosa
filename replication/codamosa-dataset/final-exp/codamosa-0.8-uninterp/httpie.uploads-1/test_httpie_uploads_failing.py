# Automatically generated by Pynguin.
import httpie.cli.dicts as module_0
import requests_toolbelt.multipart.encoder as module_1
import httpie.uploads as module_2
import typing as module_3
import requests.models as module_4

def test_case_0():
    try:
        str_0 = '.\n\n    '
        str_1 = '&N%OuyEQsTZ_LL`'
        str_2 = None
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0, str_2: str_2}
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict(**dict_0)
        bytes_0 = None
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0, bytes_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        i_o_0 = module_3.IO()
        multipart_encoder_1 = module_1.MultipartEncoder(chunked_multipart_upload_stream_0, i_o_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = '@_\x0c'
        tuple_0 = (bool_0, str_0)
        callable_0 = None
        var_0 = module_2.prepare_request_body(str_0, callable_0)
        var_1 = None
        list_0 = [var_1, var_1, var_1]
        list_1 = [tuple_0]
        var_2 = module_2.prepare_request_body(str_0, callable_0, list_0, list_1)
        var_3 = module_2.prepare_request_body(str_0, callable_0, str_0)
        multipart_encoder_0 = module_1.MultipartEncoder(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        prepared_request_0 = module_4.PreparedRequest()
        bool_0 = False
        var_0 = module_2.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        multipart_encoder_0 = module_1.MultipartEncoder(str_0)
        list_0 = [multipart_encoder_0, str_0, str_0, str_0]
        int_0 = 1351
        var_0 = module_2.prepare_request_body(multipart_encoder_0, list_0, int_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_1 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_1 = multipart_encoder_0.to_string()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'field0'
        str_1 = 'field1'
        str_2 = 'value0'
        str_3 = 'value2'
        str_4 = {str_0: str_2, str_1: str_3}
        multipart_encoder_0 = module_1.MultipartEncoder(str_4)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_0 = list(chunked_multipart_upload_stream_0)
        var_1 = len(var_0)
        var_2 = list(chunked_multipart_upload_stream_0)
        var_3 = len(var_2)
        int_0 = 0
        var_4 = list(chunked_multipart_upload_stream_0)[int_0]
    except BaseException:
        pass