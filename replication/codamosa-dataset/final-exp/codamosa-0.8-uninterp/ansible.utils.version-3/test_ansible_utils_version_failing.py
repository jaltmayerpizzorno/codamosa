# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        str_0 = '(ou'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2342.3
        int_0 = 935
        str_0 = 'Unable to open source file %s'
        set_0 = {float_0, int_0, int_0}
        alpha_0 = module_0._Alpha(set_0)
        var_0 = alpha_0.__ne__(str_0)
        alpha_1 = module_0._Alpha(int_0)
        var_1 = alpha_1.__gt__(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xcaC\xaf\x88\xed&a\nB\xa4\xbd\x93\x9b'
        bool_0 = True
        alpha_0 = module_0._Alpha(bool_0)
        var_0 = alpha_0.__ge__(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(bool_0)
        var_0 = alpha_0.__ge__(alpha_0)
        var_1 = semantic_version_0.__ne__(semantic_version_0)
        str_0 = "8AKbv'Y$]Yw\x0c/W"
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '(ou'
        str_1 = 'muOFn\nV1gt&'
        alpha_0 = module_0._Alpha(str_1)
        str_2 = '^"LRS4pn<:\n'
        var_0 = alpha_0.__repr__()
        var_1 = alpha_0.__lt__(str_2)
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -156.0
        set_0 = {float_0, float_0, float_0, float_0}
        bool_0 = True
        alpha_0 = module_0._Alpha(bool_0)
        var_0 = alpha_0.__le__(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 3859.640329
        set_0 = {float_0, float_0}
        numeric_0 = module_0._Numeric(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        bool_1 = False
        numeric_0 = module_0._Numeric(bool_1)
        var_0 = numeric_0.__ge__(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        float_0 = 512.0
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(bool_0)
        str_0 = '<{instance!s} "{name!s}" @ {url!s} with priorit {priority!s}>'
        var_1 = numeric_0.__gt__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 512.0
        semantic_version_0 = module_0.SemanticVersion(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = ()
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        list_0 = [semantic_version_0, semantic_version_0]
        alpha_0 = module_0._Alpha(semantic_version_0)
        var_1 = alpha_0.__ne__(list_0)
        var_2 = semantic_version_0.__ge__(tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -418.33164
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '\x0c'
        var_0 = semantic_version_0.__ne__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -418.33164
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ne__(semantic_version_1)
        var_1 = semantic_version_1.__lt__(semantic_version_1)
        var_2 = semantic_version_0.from_loose_version(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        list_0 = None
        alpha_0 = module_0._Alpha(list_0)
        var_0 = semantic_version_0.__gt__(alpha_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        dict_0 = None
        alpha_0 = module_0._Alpha(dict_0)
        var_0 = semantic_version_0.__ge__(alpha_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = -449.8725661729089
        numeric_0 = module_0._Numeric(float_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = numeric_0.__eq__(semantic_version_0)
        var_1 = semantic_version_0.__ne__(semantic_version_0)
        str_0 = '-co-qb\\'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_17():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        bool_0 = False
        semantic_version_1 = module_0.SemanticVersion(bool_0)
        var_0 = semantic_version_1.__le__(semantic_version_0)
        alpha_0 = None
        numeric_0 = module_0._Numeric(alpha_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = False
        float_0 = 1759.0283
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        set_0 = set()
        alpha_0 = module_0._Alpha(set_0)
        var_1 = alpha_0.__eq__(semantic_version_0)
        var_2 = semantic_version_0.from_loose_version(numeric_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = True
        float_0 = 1759.0283
        numeric_0 = module_0._Numeric(float_0)
        alpha_0 = module_0._Alpha(numeric_0)
        var_0 = numeric_0.__ge__(alpha_0)
        var_1 = numeric_0.__ne__(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '[H}2'
        semantic_version_1 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        bool_1 = True
        float_0 = -449.8725661729089
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(bool_1)
        var_1 = numeric_0.__gt__(numeric_0)
        var_2 = numeric_0.__le__(bool_0)
        var_3 = numeric_0.__repr__()
        numeric_1 = module_0._Numeric(float_0)
        alpha_0 = module_0._Alpha(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_4 = semantic_version_0.__ne__(semantic_version_0)
        str_0 = '-co-qb\\'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_5 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        bool_1 = True
        float_0 = -450.116
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(bool_1)
        float_1 = 512.0
        var_1 = numeric_0.__le__(bool_0)
        numeric_1 = module_0._Numeric(float_1)
        str_0 = 'xT`<;Gx>fDo}1Z\\>G'
        alpha_0 = module_0._Alpha(str_0)
        var_2 = alpha_0.__ge__(numeric_1)
        semantic_version_0 = module_0.SemanticVersion()
        var_3 = numeric_1.__eq__(semantic_version_0)
        alpha_1 = module_0._Alpha(bool_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_4 = semantic_version_1.__ne__(semantic_version_1)
        tuple_0 = None
        var_5 = alpha_1.__eq__(tuple_0)
        var_6 = semantic_version_1.from_loose_version(float_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = -449.8725661729089
        numeric_0 = module_0._Numeric(float_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = numeric_0.__eq__(semantic_version_0)
        var_1 = semantic_version_0.__ne__(semantic_version_0)
        var_2 = numeric_0.__le__(numeric_0)
        str_0 = '-co-qb\\'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = False
        bool_1 = False
        float_0 = -449.8725661729089
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(bool_1)
        var_1 = numeric_0.__le__(bool_0)
        alpha_0 = module_0._Alpha(numeric_0)
        var_2 = alpha_0.__ne__(float_0)
        numeric_1 = module_0._Numeric(float_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_3 = numeric_1.__eq__(semantic_version_0)
        alpha_1 = module_0._Alpha(bool_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_4 = semantic_version_1.__ne__(semantic_version_1)
        tuple_0 = None
        var_5 = alpha_1.__eq__(tuple_0)
        var_6 = alpha_1.__le__(alpha_0)
        list_0 = []
        var_7 = semantic_version_0.from_loose_version(list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = False
        bool_1 = False
        float_0 = -449.8725661729089
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ne__(bool_1)
        float_1 = 512.0
        var_1 = numeric_0.__le__(bool_0)
        alpha_0 = module_0._Alpha(numeric_0)
        var_2 = alpha_0.__ne__(float_1)
        numeric_1 = module_0._Numeric(float_1)
        semantic_version_0 = module_0.SemanticVersion()
        var_3 = numeric_1.__eq__(semantic_version_0)
        alpha_1 = module_0._Alpha(bool_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_4 = semantic_version_1.__ne__(semantic_version_1)
        tuple_0 = None
        var_5 = alpha_1.__eq__(tuple_0)
        var_6 = alpha_1.__le__(alpha_0)
        var_7 = alpha_0.__le__(alpha_1)
        var_8 = semantic_version_0.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '1.0.1-beta.1+20130313144700'
        semantic_version_0 = module_0.SemanticVersion(str_0)
        numeric_0 = module_0._Numeric(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = False
        loose_version_0 = module_1.LooseVersion(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_27():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '-co-qb\\'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_28():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = "8AKbv'Y$]Yw\x0c/W"
        loose_version_0 = module_1.LooseVersion(str_0)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bool_0 = True
        float_0 = 512.0
        numeric_0 = module_0._Numeric(float_0)
        alpha_0 = module_0._Alpha(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ne__(semantic_version_0)
        str_0 = '9dY RnfG(eR9k-3U$'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass