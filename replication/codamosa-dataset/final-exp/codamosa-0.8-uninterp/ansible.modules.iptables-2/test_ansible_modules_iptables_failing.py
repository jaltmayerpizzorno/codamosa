# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        float_0 = 1011.279
        str_0 = 'Q-+\x0b8\nx\\]5'
        int_0 = 264
        var_0 = module_0.append_param(str_0, str_0, int_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -2309.49
        int_0 = -1895
        dict_0 = {}
        str_0 = 'b'
        var_0 = module_0.append_match_flag(float_0, float_0, int_0, str_0)
        list_0 = [int_0, dict_0]
        tuple_0 = (list_0,)
        var_1 = module_0.append_param(dict_0, tuple_0, int_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        bool_1 = False
        dict_0 = {bool_0: bool_1}
        str_0 = '/:Ned@_kg.a,tpY'
        var_0 = module_0.append_tcp_flags(bool_1, dict_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'rule'
        str_1 = '\t,]1>'
        bool_0 = True
        str_2 = 'negate'
        var_0 = module_0.append_match_flag(str_0, str_2, str_1, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 366.82005
        float_1 = -2309.49
        int_0 = -1895
        bool_0 = True
        set_0 = {int_0, bool_0, float_0, float_1}
        dict_0 = {}
        var_0 = module_0.append_tcp_flags(set_0, dict_0, int_0)
        bool_1 = True
        var_1 = module_0.append_csv(float_1, bool_1, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'sptaKles'
        str_1 = '-I'
        str_2 = 'table'
        str_3 = 'chain'
        str_4 = 'rule_num'
        str_5 = 'protocol'
        str_6 = 'jump'
        str_7 = 'nat'
        str_8 = 'INPUT'
        var_0 = None
        str_9 = 'tcp'
        str_10 = 'ACCEPT'
        var_1 = {str_2: str_7, str_3: str_8, str_0: str_8, str_4: var_0, str_6: str_4, str_5: str_9, str_6: str_10, str_4: str_1}
        bool_0 = False
        var_2 = module_0.push_arguments(str_0, str_1, var_1, bool_0)
        tuple_0 = None
        int_0 = 971
        bytes_0 = b'\xed\x99\xcf@\xb1]\x19\xeew\xfd\xa7\xa1$\xae\x0f\xe2/o\t'
        var_3 = module_0.append_match(tuple_0, int_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '6\tZ*\r-PO<\ttn%1]=+\rX'
        str_1 = 'ansible.modules.iptables'
        tuple_0 = (str_1, str_1)
        set_0 = set()
        var_0 = module_0.append_jump(str_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 366.82005
        str_0 = '\x0c'
        list_0 = None
        dict_0 = {float_0: str_0, float_0: str_0}
        str_1 = 'njn[kMxSP>"fEYZRUumd'
        var_0 = module_0.append_wait(list_0, dict_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1749
        set_0 = {int_0}
        tuple_0 = (int_0, set_0)
        var_0 = module_0.construct_rule(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 366.82005
        float_1 = -2309.49
        int_0 = -1913
        str_0 = 'b'
        var_0 = module_0.append_match_flag(float_0, float_1, int_0, str_0)
        list_0 = []
        str_1 = 'wNG'
        var_1 = module_0.set_chain_policy(list_0, str_1, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -3458
        float_0 = 4322.2181
        int_1 = -1905
        list_0 = [int_1]
        var_0 = module_0.check_present(int_0, float_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = None
        int_0 = 1120
        bytes_0 = b'\xad\xe0r\xc7\xf9t\x81{'
        var_0 = module_0.append_rule(int_0, bytes_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -1346.8792
        complex_0 = None
        dict_0 = None
        set_0 = {float_0, complex_0, dict_0, dict_0}
        bytes_0 = b't\xe6\x8e\xf8v\x8f\xb9\x88\xeb\x1a\xc9"\x86^'
        tuple_0 = (complex_0, dict_0, set_0, bytes_0)
        bytes_1 = b'\xdc3 \xa8\xce\xaa\xd4:R\xbcwh\xe0\xf0\xdbS'
        var_0 = module_0.insert_rule(tuple_0, dict_0, bytes_1)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'A#\xc2Z\x806\x05\xc8\xf8\x97\xee'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        bytes_1 = b'~\xb1\xd5\xdd\xe5\x01\x1ey6\xee\xf7k<\x8a'
        list_0 = [bytes_1, dict_0]
        tuple_0 = ()
        var_0 = module_0.remove_rule(dict_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xc08\x9c\xf6\x11\xb4\xdc\xe5S`g\xa04y1\x12U\xd0'
        bytes_1 = b'C\xa5\x84\xf7d'
        list_0 = [bytes_1, bytes_1]
        str_0 = '+'
        str_1 = '`oQ,ta{'
        int_0 = None
        str_2 = 'I:c'
        float_0 = None
        tuple_0 = ()
        dict_0 = {bytes_0: int_0, str_2: bytes_1}
        var_0 = module_0.append_match_flag(int_0, str_0, tuple_0, dict_0)
        tuple_1 = (str_2, float_0, bytes_0)
        var_1 = module_0.append_match_flag(str_1, int_0, tuple_1, bytes_0)
        var_2 = module_0.append_tcp_flags(str_0, list_0, str_0)
        float_1 = -499.8782
        var_3 = module_0.append_match_flag(float_0, int_0, dict_0, float_1)
        str_3 = "*'dw(`{/-[Irlq^wF"
        str_4 = 'Yn[\tX_\\FNYv:\x0csFg,'
        var_4 = module_0.flush_table(str_3, str_4, float_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'iptables'
        str_1 = 'module'
        str_2 = 'filter'
        str_3 = 'INPUT'
        str_4 = 'ipv4'
        var_0 = dict(table=str_2, chain=str_3, ip_version=str_4)
        var_1 = module_0.get_chain_policy(str_0, str_1, var_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'O\x05\xa2\xdd+\xf0\x1eD\x90=\xdf\n\x07\x1c\xe6\x81.'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        int_0 = 374
        var_0 = module_0.get_iptables_version(list_0, int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = 366.82005
        float_1 = -2309.49
        int_0 = -1897
        bool_0 = True
        set_0 = {int_0, bool_0, float_0, float_1}
        dict_0 = {}
        var_0 = module_0.append_tcp_flags(set_0, dict_0, int_0)
        str_0 = 'b'
        var_1 = module_0.append_match_flag(float_0, float_1, int_0, str_0)
        tuple_0 = None
        str_1 = '--init-path'
        var_2 = module_0.append_csv(tuple_0, tuple_0, str_1)
        list_0 = []
        tuple_1 = (list_0,)
        var_3 = module_0.append_param(dict_0, tuple_1, int_0, dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'C\x0f\xdc\xf7d'
        list_0 = [bytes_0, bytes_0]
        str_0 = '+'
        str_1 = '`oQ,ta{'
        int_0 = None
        str_2 = 'I:c'
        float_0 = None
        str_3 = 'hwa$'
        bytes_1 = b'\t\xf2\x96\xf0%\xe1\x14\xe2uDk5M\xc4f*'
        str_4 = ''
        str_5 = "z;~&)X\\E;xE\n}sQi0'\x0b"
        var_0 = module_0.append_wait(bytes_1, str_4, str_5)
        tuple_0 = ()
        dict_0 = {bytes_0: int_0, str_2: bytes_0}
        var_1 = module_0.append_match_flag(int_0, str_3, tuple_0, dict_0)
        tuple_1 = (str_2, float_0, bytes_1)
        var_2 = module_0.append_match_flag(str_1, int_0, tuple_1, bytes_0)
        var_3 = module_0.append_tcp_flags(str_0, list_0, str_0)
        var_4 = module_0.append_match_flag(float_0, int_0, dict_0, float_0)
        bool_0 = True
        set_0 = {tuple_1}
        var_5 = module_0.append_param(list_0, list_0, bool_0, set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'rule'
        str_1 = 'match'
        str_2 = '--syn'
        bool_0 = True
        var_0 = module_0.append_match_flag(str_0, str_1, str_2, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'iptables'
        str_1 = '-I'
        str_2 = 'table'
        str_3 = 'chain'
        str_4 = 'rule_num'
        str_5 = "t#2AU)0'a^ !="
        str_6 = 'jump'
        str_7 = 'nat'
        var_0 = None
        str_8 = 'tcp'
        str_9 = 'ACCEPT'
        str_10 = 'd-EkL=BJ'
        var_1 = {str_2: str_7, str_3: str_5, str_4: var_0, str_5: str_8, str_6: str_9, str_6: str_10}
        var_2 = module_0.push_arguments(str_0, str_1, var_1, str_1)
    except BaseException:
        pass