# Automatically generated by Pynguin.
import ansible.inventory.data as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        str_0 = 'e;y_<tyJO#ii\n45G:;'
        list_0 = [str_0, str_0]
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.deserialize(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        inventory_data_0 = module_0.InventoryData()
        bool_0 = True
        list_0 = [inventory_data_0, bool_0]
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.add_group(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        inventory_data_0 = module_0.InventoryData()
        dict_0 = {}
        var_0 = inventory_data_0.add_group(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        dict_0 = {}
        var_0 = inventory_data_1.remove_group(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = set()
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(set_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xa6\x99\x95\x96'
        str_0 = ''
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(bytes_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'bo0B&}2Pt'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        var_1 = inventory_data_0.add_host(str_0)
        var_2 = inventory_data_0.get_host(str_0)
        var_3 = inventory_data_0.reconcile_inventory()
        var_4 = inventory_data_0.remove_host(inventory_data_0)
    except BaseException:
        pass

def test_case_7():
    try:
        inventory_data_0 = module_0.InventoryData()
        bool_0 = False
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.set_variable(inventory_data_0, inventory_data_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_host(inventory_data_0)
        float_0 = None
        list_0 = [float_0]
        str_0 = 'all'
        var_1 = inventory_data_0.get_host(str_0)
        inventory_data_1 = module_0.InventoryData()
        inventory_data_2 = module_0.InventoryData()
        var_2 = inventory_data_2.add_child(float_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'all'
        bytes_0 = b'+\xb1\xab\xd7\xc2\xc6\xf6\xba\xe2O\xe2\x12\xe7*>\xfb\x8e'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_child(str_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'ksh'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_group(str_0)
        int_0 = -2098
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_1.reconcile_inventory()
        inventory_data_2 = module_0.InventoryData()
        complex_0 = None
        dict_0 = {inventory_data_2: int_0, inventory_data_2: int_0, int_0: complex_0}
        var_2 = inventory_data_1.serialize()
        var_3 = inventory_data_1.get_host(int_0)
        var_4 = inventory_data_2.get_groups_dict()
        float_0 = -1144.0
        var_5 = inventory_data_2.get_host(float_0)
        var_6 = inventory_data_2.deserialize(dict_0)
        var_7 = inventory_data_2.add_group(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'all'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(str_0)
        bool_0 = False
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_1.reconcile_inventory()
        var_2 = inventory_data_0.remove_host(bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'bo0B&}2Pt'
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.get_groups_dict()
        var_1 = inventory_data_0.add_host(str_0)
        bytes_0 = b';y\t\xaaC\xf6\x13X\x92\xdb\xe5\x84R<Y\xa2\x1a\xdd\x86M'
        var_2 = inventory_data_0.reconcile_inventory()
        var_3 = inventory_data_0.get_host(bytes_0)
        inventory_data_2 = module_0.InventoryData()
        str_1 = 'all'
        var_4 = inventory_data_1.remove_group(str_1)
        set_0 = {inventory_data_1}
        var_5 = inventory_data_0.remove_host(set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'bo0B&}2Pt'
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.get_groups_dict()
        var_1 = inventory_data_0.add_host(str_0)
        var_2 = inventory_data_0.reconcile_inventory()
        var_3 = inventory_data_1.get_host(str_0)
        var_4 = inventory_data_1.get_groups_dict()
        inventory_data_2 = module_0.InventoryData()
        var_5 = inventory_data_1.reconcile_inventory()
        complex_0 = None
        var_6 = inventory_data_1.remove_group(complex_0)
        list_0 = [var_3, inventory_data_0, var_1, inventory_data_1]
        tuple_0 = (list_0, inventory_data_2)
        var_7 = inventory_data_0.remove_host(tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'bo0B&}2Pt'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        var_1 = inventory_data_0.add_host(str_0)
        var_2 = inventory_data_0.reconcile_inventory()
        var_3 = inventory_data_0.get_host(str_0)
        var_4 = inventory_data_0.reconcile_inventory()
        var_5 = inventory_data_0.remove_host(inventory_data_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'bo0B&}2Pt'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        var_1 = inventory_data_0.add_host(str_0)
        var_2 = inventory_data_0.reconcile_inventory()
        var_3 = inventory_data_0.get_host(str_0)
        inventory_data_1 = module_0.InventoryData()
        complex_0 = None
        var_4 = inventory_data_0.remove_group(complex_0)
        var_5 = inventory_data_0.reconcile_inventory()
        var_6 = inventory_data_1.remove_host(inventory_data_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'bo0B&}2Pt'
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.get_groups_dict()
        var_1 = inventory_data_1.add_host(str_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'group'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'host'
        var_1 = inventory_data_0.add_host(str_1, str_0)
        var_2 = inventory_data_0.get_host(str_1)
        var_3 = inventory_data_0.groups[str_0]
        int_0 = 0
        var_4 = test_group.get_hosts()[int_0]
    except BaseException:
        pass

def test_case_18():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '|zg'
        var_0 = inventory_data_0.add_host(str_0)
        str_1 = 'kgoup'
        var_1 = inventory_data_0.remove_group(str_0)
        var_2 = inventory_data_0.add_group(str_1)
        var_3 = inventory_data_0.add_child(str_1, str_0)
        var_4 = inventory_data_0.add_group(str_0)
        var_5 = inventory_data_0.reconcile_inventory()
        str_2 = 'ungrQouped'
        var_6 = var_3.groups[str_2]
    except BaseException:
        pass

def test_case_19():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'fakehost'
        var_0 = inventory_data_0.add_host(str_0)
        str_1 = 'kgoup'
        var_1 = inventory_data_0.remove_group(str_0)
        var_2 = inventory_data_0.add_group(str_1)
        var_3 = inventory_data_0.add_child(str_1, str_0)
        str_2 = 'Ykco'
        var_4 = inventory_data_0.add_group(str_2)
        var_5 = inventory_data_0.reconcile_inventory()
        str_3 = '\t'
        var_6 = inventory_data_0.get_groups_dict()
        var_7 = inventory_data_0.groups[str_3]
    except BaseException:
        pass

def test_case_20():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        group_0 = module_1.Group()
        inventory_data_1 = module_0.InventoryData()
        str_0 = ': ['
        str_1 = 'dLW{\x0cp &>^659v'
        var_1 = inventory_data_0.remove_host(group_0)
        var_2 = inventory_data_1.set_variable(str_0, inventory_data_1, str_1)
    except BaseException:
        pass

def test_case_21():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'fakehost'
        var_0 = inventory_data_0.add_host(str_0)
        str_1 = 'fkegroup'
        var_1 = inventory_data_0.reconcile_inventory()
        var_2 = inventory_data_0.add_group(str_1)
        var_3 = inventory_data_0.add_child(str_1, str_0)
        var_4 = inventory_data_0.reconcile_inventory()
        var_5 = inventory_data_0.serialize()
        int_0 = None
        list_0 = [str_1, inventory_data_0, str_0, var_4]
        var_6 = inventory_data_0.add_child(int_0, list_0)
    except BaseException:
        pass