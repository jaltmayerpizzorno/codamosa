# Automatically generated by Pynguin.
import ansible.plugins.action.pause as module_0

def test_case_0():
    try:
        bytes_0 = b',\xa6?s.\xb9\xf8f\x14\xba\xcf\xb7'
        ansible_timeout_exceeded_0 = None
        var_0 = module_0.timeout_handler(bytes_0, ansible_timeout_exceeded_0)
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_timeout_exceeded_0 = None
        int_0 = -2095
        str_0 = ''
        float_0 = 694.06239
        dict_0 = None
        action_module_0 = module_0.ActionModule(int_0, str_0, float_0, dict_0, dict_0, float_0)
        var_0 = module_0.clear_line(ansible_timeout_exceeded_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'nf\x99\xa3}\xdb(\xd0Y\x17[S\x9e%\x7f\xf6'
        var_0 = module_0.is_interactive(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2095
        str_0 = ''
        float_0 = 694.06239
        dict_0 = None
        action_module_0 = module_0.ActionModule(int_0, str_0, float_0, dict_0, dict_0, float_0)
        set_0 = {int_0}
        var_0 = action_module_0.run(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        complex_0 = None
        str_0 = 'Gj|mW\x0bJO1?`?]t'
        list_0 = []
        list_1 = [str_0, list_0, list_0]
        str_1 = 'N'
        dict_0 = {bool_0: str_0, str_0: complex_0, bool_0: list_1, complex_0: str_1}
        action_module_0 = module_0.ActionModule(bool_0, complex_0, str_0, bool_0, dict_0, list_1)
        dict_1 = {action_module_0: list_1}
        str_2 = "\nattributes:\n    become:\n      description: Is usable alongside become keywords\n    connection:\n      description: Uses the target's configured connection information to execute code on it\n    delegation:\n      description: Can be used in conjunction with delegate_to and related keywords\n"
        set_0 = {str_2}
        float_0 = 3122.0
        bytes_0 = b'\x97\xb1\xf0\xfc\xc3\xf1\x16e$T@\xccg\x90,\x08{'
        str_3 = 'rebooted'
        dict_2 = {str_2: set_0, str_3: str_3}
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        action_module_1 = module_0.ActionModule(str_2, set_0, float_0, bytes_0, dict_2, tuple_1)
        var_0 = module_0.is_interactive()
        var_1 = action_module_1.run(dict_1, dict_1)
    except BaseException:
        pass