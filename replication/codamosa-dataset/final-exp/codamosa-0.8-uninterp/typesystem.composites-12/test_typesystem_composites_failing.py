# Automatically generated by Pynguin.
import typesystem.fields as module_0
import typesystem.composites as module_1

def test_case_0():
    try:
        int_0 = 0
        field_0 = module_0.Field()
        list_0 = [field_0]
        one_of_0 = module_1.OneOf(list_0)
        any_0 = one_of_0.validate(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        any_0 = module_0.Any()
        any_1 = module_0.Any()
        any_2 = [any_0, any_1]
        one_of_0 = module_1.OneOf(any_2)
        str_0 = 'foo'
        any_3 = one_of_0.validate(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        any_0 = module_0.Any()
        any_1 = module_0.Any()
        if_then_else_0 = module_1.IfThenElse(any_0, any_1, any_1)
        var_0 = None
        field_0 = module_0.Field()
        list_0 = [field_0, field_0, field_0]
        all_of_0 = module_1.AllOf(list_0)
        any_2 = if_then_else_0.validate(var_0)
        str_0 = 'j\x0c#%'
        field_1 = module_0.Field(title=str_0, default=any_1)
        dict_0 = {}
        list_1 = []
        one_of_0 = module_1.OneOf(list_1)
        any_3 = one_of_0.validate(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        field_0 = None
        dict_0 = {}
        if_then_else_0 = module_1.IfThenElse(field_0, **dict_0)
        field_1 = module_0.Field()
        list_0 = [field_0, field_0, field_1, field_0]
        all_of_0 = module_1.AllOf(list_0)
        any_0 = all_of_0.validate(field_1)
    except BaseException:
        pass

def test_case_4():
    try:
        any_0 = module_0.Any()
        not_0 = module_1.Not(any_0)
        int_0 = 1
        any_1 = not_0.validate(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1793
        bool_0 = False
        field_0 = module_0.Field(default=int_0, allow_null=bool_0)
        str_0 = ''
        str_1 = 'allow_null'
        str_2 = '[ \\t\\n\\r]*'
        dict_0 = {str_0: bool_0, str_1: field_0, str_2: str_1, str_0: int_0}
        not_0 = module_1.Not(field_0, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        never_match_0 = module_1.NeverMatch()
        str_0 = 'allow_null'
        never_match_1 = module_1.NeverMatch()
        field_0 = module_0.Field(description=str_0, default=str_0)
        if_then_else_0 = module_1.IfThenElse(field_0)
        list_0 = []
        dict_0 = {str_0: list_0}
        one_of_0 = module_1.OneOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '&TSaTI-Yf3 y0dyoQF\t'
        never_match_0 = module_1.NeverMatch()
        field_0 = module_0.Field(description=str_0, default=str_0)
        field_1 = module_0.Field(description=str_0)
        str_1 = 'allow_null'
        not_0 = module_1.Not(field_1)
        never_match_1 = module_1.NeverMatch()
        field_2 = module_0.Field(description=str_1, default=str_1)
        str_2 = "#'D!7JYG|7fwCNP"
        dict_0 = {str_2: str_0, str_1: str_0, str_0: field_0}
        never_match_2 = module_1.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        any_0 = module_0.Any()
        any_1 = [any_0]
        one_of_0 = module_1.OneOf(any_1)
        bool_0 = True
        any_2 = one_of_0.validate(bool_0)
        never_match_0 = module_1.NeverMatch()
        never_match_1 = [never_match_0]
        one_of_1 = module_1.OneOf(never_match_1)
        str_0 = 'abc'
        any_3 = one_of_1.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        one_of_0 = module_1.OneOf(list_0)
        field_0 = module_0.Field(default=one_of_0)
        str_0 = 'allow_null'
        never_match_0 = module_1.NeverMatch()
        field_1 = module_0.Field(description=str_0, default=str_0)
        list_1 = [str_0]
        dict_0 = {str_0: list_0, str_0: list_1, str_0: one_of_0}
        all_of_0 = module_1.AllOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'allow_null'
        never_match_0 = module_1.NeverMatch()
        field_0 = module_0.Field(description=str_0, default=str_0)
        list_0 = []
        dict_0 = {str_0: list_0}
        not_0 = module_1.Not(field_0)
        if_then_else_0 = module_1.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass