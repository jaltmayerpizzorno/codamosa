# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        dict_0 = {}
        last_0 = module_0.Last(dict_0)
        str_0 = last_0.__str__()
        bytes_0 = b'\x8bk\xf5\x07\\ z'
        semigroup_0 = module_0.Semigroup(bytes_0)
        all_0 = module_0.All(semigroup_0)
        bool_0 = semigroup_0.__eq__(all_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\tON62'
        set_0 = set()
        last_0 = module_0.Last(set_0)
        semigroup_0 = module_0.Semigroup(last_0)
        var_0 = semigroup_0.fold(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'1S\x0erl\xc3R\xc9\xa3\x88~\x17~O\xa4Y'
        tuple_0 = ()
        sum_0 = module_0.Sum(tuple_0)
        list_0 = [bytes_0, bytes_0]
        sum_1 = module_0.Sum(list_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b're\xb3\x82j8\x06\xf9\x91\x84\x84\x0e\xae\xac'
        int_0 = -1590
        first_0 = module_0.First(int_0)
        var_0 = first_0.concat(bytes_0)
        all_0 = None
        str_0 = ')cgVaACE='
        all_1 = module_0.All(str_0)
        all_2 = all_1.concat(all_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xa8zJ'
        bool_0 = False
        bytes_1 = b'\x89k'
        map_0 = module_0.Map(bytes_1)
        map_1 = module_0.Map(map_0)
        int_0 = 3570
        min_0 = module_0.Min(int_0)
        max_0 = module_0.Max(min_0)
        str_0 = max_0.__str__()
        first_0 = module_0.First(bool_0)
        last_0 = module_0.Last(first_0)
        var_0 = last_0.concat(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        all_0 = module_0.All(bool_0)
        str_0 = '^*%c7Ft$S)c;'
        all_1 = all_0.concat(all_0)
        dict_0 = {str_0: str_0}
        all_2 = all_1.concat(all_1)
        map_0 = module_0.Map(dict_0)
        str_1 = map_0.__str__()
        var_0 = map_0.concat(all_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 2384.61538189501
        bool_0 = False
        all_0 = module_0.All(bool_0)
        str_0 = 'l!h]\ne]G'
        bytes_0 = b'\xdc\xc9K\xfd\x8e\xd0\t\xf0c'
        dict_0 = {str_0: str_0}
        semigroup_0 = module_0.Semigroup(float_0)
        one_0 = module_0.One(semigroup_0)
        map_0 = module_0.Map(dict_0)
        var_0 = map_0.concat(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'p}dg2(:&'
        bytes_0 = b'\x0e\xa7\x9aT++\x0bqmA('
        min_0 = module_0.Min(bytes_0)
        one_0 = module_0.One(min_0)
        var_0 = one_0.concat(str_0)
        str_1 = '\n        Transform Maybe to Box.\n\n        :returns: Box monad with previous value when Maybe is not empty, in other case Box with None\n        :rtype: Box[A | None]\n        '
        min_1 = None
        str_2 = min_0.__str__()
        one_1 = module_0.One(min_1)
        list_0 = [str_1, one_1, str_1, one_1]
        tuple_0 = (str_1, one_1, list_0)
        float_0 = -1069.77327
        semigroup_0 = module_0.Semigroup(float_0)
        map_0 = module_0.Map(semigroup_0)
        int_0 = 721
        str_3 = min_0.__str__()
        str_4 = '^xjN\rwn\x0b""#+C'
        first_0 = module_0.First(str_4)
        var_1 = first_0.concat(int_0)
        map_1 = module_0.Map(int_0)
        str_5 = map_0.__str__()
        all_0 = module_0.All(tuple_0)
        str_6 = 'ZSW&/2Ai\x0bqx`l,nT'
        max_0 = module_0.Max(str_6)
        var_2 = one_1.concat(semigroup_0)
    except BaseException:
        pass