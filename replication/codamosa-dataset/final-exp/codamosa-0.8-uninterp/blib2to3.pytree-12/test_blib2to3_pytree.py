# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 1928
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    int_0 = 0
    str_0 = ''
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_3():
    str_0 = "'qo-vJ 7%R"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_4():
    int_0 = None
    str_0 = '00h*L'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_5():
    int_0 = 59
    str_0 = 'Main program, when run as a script: produce grammar pickle files.\n\n    Calls load_grammar for each argument, a path to a grammar text file.\n    '
    int_1 = 3421
    tuple_0 = (int_0, int_1)
    tuple_1 = (str_0, tuple_0)
    list_0 = [tuple_0]
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()

def test_case_6():
    str_0 = "]cKfH<!\\6'kYD7I"
    int_0 = 174
    int_1 = -738
    tuple_0 = (int_1, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0)
    leaf_1 = leaf_0.clone()
    str_1 = leaf_0.__repr__()
    leaf_2 = leaf_0.clone()
    leaf_3 = leaf_0.clone()

def test_case_7():
    str_0 = "]cKfH<!\\6'kYD7I"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_8():
    str_0 = "]cKfH<!\\Hf6'kYD7I"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)

def test_case_9():
    str_0 = 'WEw#v'
    int_0 = 109
    tuple_0 = (int_0, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0)
    leaf_pattern_0 = module_0.LeafPattern()
    negated_pattern_0 = module_0.NegatedPattern()
    var_0 = leaf_pattern_0.match(leaf_0, int_0)
    iterator_0 = negated_pattern_0.generate_matches(leaf_pattern_0)

def test_case_10():
    str_0 = 'KE'
    int_0 = 113
    int_1 = -738
    tuple_0 = (int_1, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0)
    str_1 = leaf_0.__repr__()
    negated_pattern_0 = module_0.NegatedPattern()
    str_2 = leaf_0.__repr__()
    list_0 = [leaf_0]
    wildcard_pattern_0 = module_0.WildcardPattern(str_1)
    iterator_0 = leaf_0.post_order()
    grammar_0 = None
    int_2 = 58
    tuple_2 = (int_2, str_1, tuple_1, list_0)
    var_0 = module_0.convert(grammar_0, tuple_2)

def test_case_11():
    int_0 = 2077
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_1.append_child(node_0)
    iterator_0 = node_1.post_order()
    leaf_pattern_0 = module_0.LeafPattern()
    negated_pattern_0 = module_0.NegatedPattern()
    iterator_1 = negated_pattern_0.generate_matches(leaf_pattern_0)
    grammar_0 = module_1.Grammar()

def test_case_12():
    str_0 = 'KE'
    int_0 = 2071
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    int_1 = 113
    int_2 = -738
    tuple_0 = (int_2, int_0)
    tuple_1 = (str_0, tuple_0)
    any_0 = wildcard_pattern_0.optimize()
    leaf_0 = module_0.Leaf(int_1, str_0, tuple_1, str_0)
    str_1 = leaf_0.__repr__()
    negated_pattern_0 = module_0.NegatedPattern()
    list_0 = [leaf_0]
    node_0 = module_0.Node(int_0, list_0, any_0)
    node_1 = node_0.clone()
    leaf_1 = leaf_0.clone()
    node_1.append_child(leaf_0)
    str_2 = leaf_0.__repr__()
    wildcard_pattern_1 = module_0.WildcardPattern(str_1)
    iterator_0 = negated_pattern_0.generate_matches(negated_pattern_0)
    iterator_1 = leaf_0.pre_order()

def test_case_13():
    int_0 = 3
    str_0 = 'test'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.post_order()
    var_0 = list(iterator_0)

def test_case_14():
    leaf_pattern_0 = module_0.LeafPattern()
    str_0 = '""'
    grammar_0 = module_1.Grammar()
    int_0 = 105
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()
    str_1 = leaf_2.__str__()
    leaf_pattern_1 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_1.match(leaf_2)
    leaf_pattern_2 = module_0.LeafPattern()
    leaf_3 = leaf_0.clone()
    var_1 = leaf_pattern_2.match(leaf_1)

def test_case_15():
    int_0 = 3
    str_0 = 'test'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.leaves()
    var_0 = list(iterator_0)