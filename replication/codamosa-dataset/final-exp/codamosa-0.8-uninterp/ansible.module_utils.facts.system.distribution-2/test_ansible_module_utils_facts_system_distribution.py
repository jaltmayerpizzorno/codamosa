# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'APP'
    distribution_files_0 = module_0.DistributionFiles(str_0)
    var_0 = distribution_files_0.process_dist_files()

def test_case_2():
    bool_0 = True
    tuple_0 = ()
    distribution_0 = module_0.Distribution(tuple_0)
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: distribution_0}
    str_0 = 'debian'
    bytes_0 = b'\x02\xc0B'
    str_1 = '9q4\tC^2<}~^R^l\x0c\x0c2y6;'
    distribution_files_0 = module_0.DistributionFiles(str_1)
    var_0 = distribution_files_0.parse_distribution_file_Slackware(bool_0, dict_0, str_0, bytes_0)

def test_case_3():
    str_0 = 'geZ!\nAY6AHBee$DN_\r'
    str_1 = '::'
    bytes_0 = b'\xa2\xc7u8\x17c\x04og\x87'
    bool_0 = False
    distribution_files_0 = module_0.DistributionFiles(str_0)
    distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
    var_0 = distribution_files_1.parse_distribution_file_OpenWrt(str_1, str_0, bytes_0, bool_0)

def test_case_4():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    distribution_files_0 = module_0.DistributionFiles(dict_0)
    int_0 = 3660
    str_0 = 'm(@/\r('
    bool_0 = True
    var_0 = distribution_files_0.parse_distribution_file_Debian(int_0, str_0, int_0, bool_0)
    distribution_0 = module_0.Distribution(distribution_files_0)

def test_case_5():
    float_0 = 1347.62528
    str_0 = '>pe+!G#\n\r.i\\\t)f'
    str_1 = '{P'
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    bool_0 = False
    distribution_files_0 = module_0.DistributionFiles(bool_0)
    var_0 = distribution_files_0.parse_distribution_file_Mandriva(float_0, str_0, str_1, distribution_fact_collector_0)

def test_case_6():
    bytes_0 = b'\x0e\x0ey"\x90\xe6\xb0\xc8\xe29\x9b\xb0\x9a'
    str_0 = 'umask must be defined as a quoted octal integer'
    bool_0 = True
    set_0 = None
    bool_1 = True
    distribution_files_0 = module_0.DistributionFiles(bool_1)
    var_0 = distribution_files_0.parse_distribution_file_NA(bytes_0, str_0, bool_0, set_0)

def test_case_7():
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
    str_0 = 'W6A(z0Vs-G'
    bytes_0 = b'\xccW\x96O\xbd\xf7\xc8O\x1e\xff\xe7J\xa2\x8b$!}\x95'
    set_0 = {bytes_0, distribution_files_0, distribution_files_0, distribution_fact_collector_0}
    var_0 = distribution_files_0.parse_distribution_file_Coreos(str_0, bytes_0, distribution_files_0, set_0)

def test_case_8():
    int_0 = -1279
    str_0 = '/R3}vtQc'
    list_0 = [int_0, str_0, int_0, int_0]
    dict_0 = {int_0: list_0, int_0: int_0, str_0: int_0}
    distribution_files_0 = module_0.DistributionFiles(dict_0)
    tuple_0 = (distribution_files_0, list_0, str_0)
    float_0 = -845.0
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    distribution_files_1 = module_0.DistributionFiles(distribution_fact_collector_0)
    distribution_files_2 = module_0.DistributionFiles(distribution_files_1)
    var_0 = distribution_files_2.parse_distribution_file_CentOS(str_0, list_0, tuple_0, float_0)

def test_case_9():
    bytes_0 = b'x<\x06\xd0\x83\x1f'
    distribution_0 = module_0.Distribution(bytes_0)

def test_case_10():
    str_0 = 'msJQ//r\tZ\\'
    distribution_0 = module_0.Distribution(str_0)
    var_0 = distribution_0.get_distribution_facts()

def test_case_11():
    set_0 = set()
    distribution_files_0 = module_0.DistributionFiles(set_0)
    distribution_0 = module_0.Distribution(distribution_files_0)
    var_0 = distribution_0.get_distribution_FreeBSD()

def test_case_12():
    str_0 = 'Y=(^gJ7HK;P:rL>'
    set_0 = {str_0, str_0, str_0}
    distribution_0 = module_0.Distribution(set_0)
    var_0 = distribution_0.get_distribution_SMGL()

def test_case_13():
    str_0 = 'pdHnvn?0V=\r4s\na'
    distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0)
    var_0 = distribution_fact_collector_0.collect()
    str_1 = '(?:[^)]*\\)(.*)\\()? *(?:STL )?([\\d.+\\-a-z]*\\d) *(?:esaeler *)?(.+)'
    distribution_files_0 = module_0.DistributionFiles(str_1)
    str_2 = 'y0#>o'
    distribution_files_1 = module_0.DistributionFiles(str_2)
    distribution_0 = module_0.Distribution(str_0)

def test_case_14():
    str_0 = 'coreos'
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    list_0 = []
    set_0 = {str_0}
    distribution_files_0 = module_0.DistributionFiles(set_0)
    bool_0 = True
    distribution_0 = module_0.Distribution(bool_0)
    distribution_files_1 = module_0.DistributionFiles(distribution_0)
    var_0 = distribution_files_1.parse_distribution_file_ClearLinux(str_0, distribution_fact_collector_0, list_0, distribution_files_0)

def test_case_15():
    list_0 = []
    tuple_0 = None
    distribution_files_0 = module_0.DistributionFiles(tuple_0)
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    str_0 = '\r(K:X+8/nqiXq{F9Rn.>'
    dict_0 = {}
    bool_0 = False
    var_0 = distribution_files_0.parse_distribution_file_NA(dict_0, str_0, str_0, bool_0)
    var_1 = distribution_fact_collector_0.collect()
    int_0 = -500
    var_2 = distribution_fact_collector_0.collect(int_0)
    str_1 = '8!|zXEP #'
    int_1 = -478
    str_2 = '`fpE7D)-'
    var_3 = distribution_files_0.parse_distribution_file_ClearLinux(str_1, int_1, str_2, str_0)
    distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
    var_4 = distribution_fact_collector_0.collect(dict_0, distribution_files_0)
    bool_1 = True
    float_0 = -899.0
    var_5 = distribution_files_1.parse_distribution_file_OpenWrt(tuple_0, str_2, float_0, tuple_0)
    distribution_fact_collector_1 = module_0.DistributionFactCollector(bool_1)
    str_3 = '\x0bnvZi5)d$x] F^'
    var_6 = distribution_files_1.parse_distribution_file_Coreos(list_0, list_0, distribution_fact_collector_1, str_3)