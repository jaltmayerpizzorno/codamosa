# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        float_0 = 330.69879
        bytes_0 = None
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        var_0 = module_0.get_uname(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x9d\x1f\xee\xa8\x08\xe4@m`\xa7n\xe5V*\xad\xdd+'
        str_0 = ''
        bytes_1 = b'w\xde\xf7\x83\xbe\xd1\x90|z'
        int_0 = 384
        str_1 = '\x0bNl`b8'
        distribution_files_0 = module_0.DistributionFiles(str_1)
        var_0 = distribution_files_0.parse_distribution_file_Alpine(bytes_0, str_0, bytes_1, int_0)
        dict_0 = {}
        distribution_0 = module_0.Distribution(dict_0)
        var_1 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 330.69879
        bytes_0 = None
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        dict_0 = {bytes_0: distribution_files_0}
        var_0 = distribution_files_0.parse_distribution_file_Flatcar(float_0, distribution_files_0, distribution_files_0, dict_0)
        var_1 = module_0.get_uname(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '=}\n'
        list_0 = [str_0, str_0]
        str_1 = 'V\\(SVG"6ZZM}HR>$D'
        tuple_0 = ()
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_1, tuple_0)
        str_2 = 'O$-\x0c cvN4Ms>|]r;PYQt'
        bool_0 = True
        distribution_files_0 = module_0.DistributionFiles(bool_0)
        var_0 = distribution_files_0.parse_distribution_file_Flatcar(str_0, list_0, distribution_fact_collector_0, str_2)
        int_0 = 64
        distribution_0 = module_0.Distribution(int_0)
        distribution_1 = module_0.Distribution(distribution_0)
        var_1 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = set()
        distribution_0 = module_0.Distribution(set_0)
        var_0 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'geZ!\nAY6AHBee$DN_\r'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'x<\x06\xd0\x83\x1f'
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b''
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_0.get_distribution_facts()
        var_1 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'O_^6E\n7??SA8tYH^'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_facts()
        list_0 = [distribution_0, distribution_0, distribution_0, distribution_0]
        distribution_files_0 = module_0.DistributionFiles(list_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        var_1 = distribution_files_1.process_dist_files()
        var_2 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -389.2
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        var_0 = distribution_fact_collector_0.collect(float_0)
        int_0 = 2438
        distribution_files_0 = module_0.DistributionFiles(int_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        var_1 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = ()
        dict_0 = {tuple_0: tuple_0}
        distribution_files_0 = module_0.DistributionFiles(dict_0)
        var_0 = distribution_files_0.parse_distribution_file_Flatcar(tuple_0, dict_0, distribution_files_0, tuple_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        int_0 = 460
        tuple_1 = ()
        var_1 = module_0.get_uname(int_0, tuple_1)
    except BaseException:
        pass