# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        int_0 = 2060
        float_0 = 408.966
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        semigroup_0 = module_0.Semigroup(dict_0)
        bool_0 = semigroup_0.__eq__(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        all_0 = module_0.All(dict_0)
        str_0 = all_0.__str__()
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0]
        first_0 = module_0.First(list_0)
        map_0 = module_0.Map(list_0)
        str_1 = map_0.__str__()
        str_2 = first_0.__str__()
        str_3 = first_0.__str__()
        sum_0 = module_0.Sum(str_3)
        str_4 = '/ct'
        semigroup_0 = module_0.Semigroup(str_4)
        sum_1 = module_0.Sum(semigroup_0)
        var_0 = semigroup_0.fold(semigroup_0)
    except BaseException:
        pass

def test_case_2():
    try:
        sum_0 = None
        bytes_0 = b'I\x1f5'
        map_0 = module_0.Map(bytes_0)
        sum_1 = module_0.Sum(map_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'wV;0Go'
        map_0 = module_0.Map(str_0)
        list_0 = [map_0, str_0, str_0, map_0]
        bytes_0 = None
        one_0 = module_0.One(bytes_0)
        first_0 = module_0.First(one_0)
        tuple_0 = (map_0, list_0, first_0)
        last_0 = module_0.Last(tuple_0)
        last_1 = module_0.Last(last_0)
        bool_0 = False
        first_1 = module_0.First(bool_0)
        var_0 = first_1.concat(last_1)
        bytes_1 = b'\xc6\x0cP'
        str_1 = ';^4v\tX1fB'
        all_0 = module_0.All(str_1)
        str_2 = all_0.__str__()
        dict_0 = {bytes_1: str_1}
        map_1 = module_0.Map(dict_0)
        var_1 = map_1.concat(all_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '3w\\'
        max_0 = module_0.Max(str_0)
        last_0 = module_0.Last(max_0)
        max_1 = module_0.Max(last_0)
        str_1 = max_1.__str__()
        bytes_0 = b'\x99t3\x04\xbc\x0f"o\xf7'
        one_0 = module_0.One(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = True
        one_0 = module_0.One(int_0)
        str_0 = one_0.__str__()
        last_0 = module_0.Last(one_0)
        str_1 = '\n    Map is a Semigroup that will always return contated all values inside Map value\n    '
        var_0 = last_0.concat(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        one_0 = module_0.One(bool_0)
        bool_1 = False
        first_0 = module_0.First(bool_1)
        map_0 = module_0.Map(first_0)
        map_1 = module_0.Map(map_0)
        var_0 = map_1.concat(one_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -1233.729
        dict_0 = {float_0: float_0, float_0: float_0}
        all_0 = module_0.All(dict_0)
        bool_0 = False
        all_1 = module_0.All(bool_0)
        all_2 = all_1.concat(all_0)
        float_1 = 853.88
        max_0 = module_0.Max(float_1)
        all_3 = module_0.All(max_0)
        all_4 = all_3.concat(all_2)
        all_5 = all_0.concat(all_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xc6\x0cP'
        one_0 = module_0.One(bytes_0)
        str_0 = ';^4v\tX1fB'
        all_0 = module_0.All(str_0)
        str_1 = all_0.__str__()
        first_0 = module_0.First(one_0)
        dict_0 = {bytes_0: str_0}
        map_0 = module_0.Map(dict_0)
        last_0 = module_0.Last(first_0)
        var_0 = map_0.concat(all_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 3
        min_0 = module_0.Min(int_0)
        int_1 = 4
        min_1 = module_0.Min(int_1)
        var_0 = min_0.concat(min_1)
        min_2 = module_0.Min(int_0)
        min_3 = module_0.Min(int_1)
        min_4 = module_0.Min(int_0)
        var_1 = min_3.concat(min_4)
        min_5 = module_0.Min(int_0)
        bytes_0 = b'\x9b%\xdf\xbe\xf7V\x88\x00\x94O\x15Ly\xe6cb_'
        min_6 = module_0.Min(bytes_0)
        list_0 = [min_3]
        var_2 = min_6.concat(list_0)
    except BaseException:
        pass