# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.dict_unpacking as module_1

def test_case_0():
    try:
        str_0 = 'getstatusoutput'
        dict_0 = {str_0: str_0, str_0: str_0}
        module_x_var_0 = module_0.Module(**dict_0)
        a_s_t_0 = module_0.AST()
        dict_unpacking_transformer_0 = module_1.DictUnpackingTransformer(a_s_t_0)
        module_x_var_1 = dict_unpacking_transformer_0.visit_Module(module_x_var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = module_0.Dict()
        a_s_t_0 = module_0.AST()
        dict_unpacking_transformer_0 = module_1.DictUnpackingTransformer(a_s_t_0)
        var_0 = dict_unpacking_transformer_0.visit_Dict(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = module_0.Dict()
        list_0 = [dict_0, dict_0]
        list_1 = [list_0, list_0]
        dict_1 = module_0.Dict(*list_1)
        a_s_t_0 = module_0.AST()
        dict_unpacking_transformer_0 = module_1.DictUnpackingTransformer(a_s_t_0)
        var_0 = dict_unpacking_transformer_0.visit_Dict(dict_1)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = module_0.Dict()
        list_0 = [dict_0, dict_0]
        str_0 = 'EHs-u3'
        dict_1 = {str_0: dict_0}
        a_s_t_0 = module_0.AST(**dict_1)
        dict_unpacking_transformer_0 = module_1.DictUnpackingTransformer(a_s_t_0)
        list_1 = [list_0, list_0]
        module_x_var_0 = module_0.Module(*list_1)
        module_x_var_1 = dict_unpacking_transformer_0.visit_Module(module_x_var_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = None
        tuple_0 = (dict_0,)
        list_0 = [tuple_0]
        str_0 = 'w\x0b~Lci'
        dict_1 = {str_0: list_0}
        dict_2 = module_0.Dict(*list_0, **dict_1)
        a_s_t_0 = None
        dict_unpacking_transformer_0 = module_1.DictUnpackingTransformer(a_s_t_0)
        var_0 = dict_unpacking_transformer_0.visit_Dict(dict_2)
    except BaseException:
        pass