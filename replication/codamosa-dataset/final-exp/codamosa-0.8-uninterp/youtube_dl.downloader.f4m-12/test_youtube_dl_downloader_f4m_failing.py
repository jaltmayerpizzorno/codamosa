# Automatically generated by Pynguin.
import youtube_dl.downloader.f4m as module_0
import youtube_dl.compat as module_1

def test_case_0():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_long_long()
    except BaseException:
        pass

def test_case_1():
    try:
        flv_reader_0 = module_0.FlvReader()
        flv_reader_1 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_int()
    except BaseException:
        pass

def test_case_2():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xc3\xcav\x88a\xe6|\xaa\x13Q\xb3\xef`\x99\xcf'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_4():
    try:
        data_truncated_error_0 = module_0.DataTruncatedError()
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_box_info()
    except BaseException:
        pass

def test_case_5():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '<manifest><baseUrl>a</baseUrl></manifest>'
        var_0 = module_1.compat_etree_fromstring(str_0)
        var_1 = module_0.get_base_url(var_0)
        flv_reader_0 = module_0.FlvReader()
        var_2 = flv_reader_0.read_bootstrap_info()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '<manifest><baseUrl>a</baseUrl></manifest>'
        var_0 = module_1.compat_etree_fromstring(str_0)
        var_1 = module_0.get_base_url(var_0)
        var_2 = module_1.compat_etree_fromstring(str_0)
        str_1 = '<manifest><baseURL2>a</baseURL2></manifest>'
        var_3 = module_1.compat_etree_fromstring(str_1)
        list_0 = []
        complex_0 = None
        f4m_f_d_0 = module_0.F4mFD(list_0, complex_0)
        var_4 = module_0.read_bootstrap_info(f4m_f_d_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'MX'
        var_0 = module_0.build_fragments_list(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Lb8aHzPa29_qD*H d'
        bool_0 = None
        var_0 = module_0.write_unsigned_int_24(str_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        complex_0 = None
        var_0 = module_0.write_flv_header(complex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'segments'
        str_1 = 'fragments'
        str_2 = 'segment_run'
        int_0 = 1043
        str_3 = None
        var_0 = module_0.write_metadata_tag(str_0, str_3)
        int_1 = (int_0, int_0)
        int_2 = 34
        int_3 = [int_1, int_2]
        int_4 = {str_2: int_3}
        int_5 = [int_4]
        str_4 = 'first'
        str_5 = 'ts'
        str_6 = 'duration'
        int_6 = 982
        int_7 = {str_4: int_2, int_1: int_0, str_5: int_6, int_2: str_0, str_6: int_1}
        int_8 = [int_7, int_4]
        int_9 = {str_1: int_8}
        int_10 = [int_9]
        bool_0 = False
        var_1 = {str_0: int_5, str_1: int_10, str_5: bool_0}
        var_2 = module_0.build_fragments_list(var_1)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 373.0085
        var_0 = module_0.remove_encrypted_media(float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 4360
        f4m_f_d_0 = module_0.F4mFD(int_0, int_0)
        list_0 = [int_0, int_0]
        tuple_0 = (f4m_f_d_0, list_0)
        list_1 = [tuple_0, list_0, f4m_f_d_0, list_0]
        float_0 = -5558.6
        data_truncated_error_0 = module_0.DataTruncatedError()
        f4m_f_d_1 = module_0.F4mFD(float_0, data_truncated_error_0)
        var_0 = f4m_f_d_1.real_download(tuple_0, list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '<manifest><baseUrl>a</baseUrl></manifest>'
        var_0 = module_1.compat_etree_fromstring(str_0)
        var_1 = module_0.get_base_url(var_0)
        flv_reader_0 = None
        list_0 = [flv_reader_0, flv_reader_0, var_0]
        var_2 = module_0.write_unsigned_int(flv_reader_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 0
        int_1 = 5
        int_2 = (int_0, int_1)
        flv_reader_0 = module_0.FlvReader()
        list_0 = [int_1, int_2]
        var_0 = module_0.write_metadata_tag(flv_reader_0, list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'0R\xce\xd1\xf4\x94)\xea\x04\xa6?\xb0\x15\x9b\xbf\r7b'
        var_0 = module_0.read_bootstrap_info(bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'segments'
        str_1 = 'fragments'
        str_2 = 'segment_run'
        int_0 = 1043
        int_1 = (int_0, int_0)
        int_2 = [int_1]
        int_3 = {str_2: int_2}
        str_3 = 'first'
        str_4 = 'ts'
        int_4 = {str_4: int_0, str_3: int_0, int_1: int_0, str_4: int_3, int_0: str_0, str_2: int_2}
        int_5 = [int_4, int_3]
        int_6 = {str_1: int_5}
        int_7 = [int_6]
        bool_0 = True
        var_0 = {str_0: int_5, str_1: int_7, str_4: bool_0}
        var_1 = module_0.build_fragments_list(var_0)
    except BaseException:
        pass

def test_case_18():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = module_0.write_flv_header(flv_reader_0)
        var_1 = flv_reader_0.read_unsigned_long_long()
    except BaseException:
        pass