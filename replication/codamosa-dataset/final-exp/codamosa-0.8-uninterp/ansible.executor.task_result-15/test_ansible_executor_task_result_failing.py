# Automatically generated by Pynguin.
import ansible.executor.task_result as module_0
import ansible.parsing.dataloader as module_1

def test_case_0():
    try:
        float_0 = 3448.577
        str_0 = 'Y_3W,ykv71<%-'
        task_result_0 = module_0.TaskResult(float_0, str_0, str_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        str_0 = 'failed'
        bool_0 = True
        bool_1 = {str_0: bool_0}
        task_result_0 = module_0.TaskResult(var_0, var_0, bool_1)
        var_1 = task_result_0.is_skipped()
        var_2 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        str_0 = 'failed'
        bool_0 = True
        bool_1 = {str_0: bool_0}
        task_result_0 = module_0.TaskResult(var_0, var_0, bool_1)
        var_1 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "X-td=m@('[sVcU`9s"
        bool_0 = True
        task_result_0 = module_0.TaskResult(bool_0, str_0, str_0)
        var_0 = task_result_0.needs_debugger()
        var_1 = task_result_0.is_failed()
    except BaseException:
        pass

def test_case_4():
    try:
        data_loader_0 = module_1.DataLoader()
        str_0 = '192.168.1.1'
        dict_0 = {str_0: str_0}
        tuple_0 = ()
        float_0 = 3021.6446
        bool_0 = False
        tuple_1 = (dict_0, tuple_0, float_0, bool_0)
        data_loader_1 = module_1.DataLoader()
        task_result_0 = module_0.TaskResult(tuple_1, data_loader_1, str_0)
        var_0 = task_result_0.needs_debugger()
        float_1 = 512.0
        var_1 = task_result_0.needs_debugger(float_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "X-td=m@('[BsVcU`9s"
        dict_0 = {}
        set_0 = set()
        task_result_0 = module_0.TaskResult(str_0, set_0, dict_0)
        var_0 = task_result_0.is_failed()
        var_1 = task_result_0.is_skipped()
        float_0 = 0.0001
        var_2 = task_result_0.needs_debugger(float_0)
        var_3 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        bool_0 = True
        bool_1 = {str_0: bool_0}
        task_result_0 = module_0.TaskResult(str_0, str_0, bool_1)
        var_0 = task_result_0.is_failed()
        str_1 = 'results'
        bool_2 = {str_1: bool_0}
        bool_3 = [bool_2]
        bool_4 = {str_1: bool_3}
        task_result_1 = module_0.TaskResult(str_0, str_0, bool_4)
        var_1 = task_result_1.is_failed()
        task_result_2 = module_0.TaskResult(str_0, str_0, bool_3)
    except BaseException:
        pass