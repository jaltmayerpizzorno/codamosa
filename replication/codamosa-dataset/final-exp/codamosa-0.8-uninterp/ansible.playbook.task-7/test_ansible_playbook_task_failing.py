# Automatically generated by Pynguin.
import ansible.playbook.task as module_0
import ansible.playbook.block as module_1

def test_case_0():
    try:
        int_0 = 1251
        set_0 = {int_0}
        task_0 = module_0.Task(set_0)
        str_0 = 'Could not sort JSON output due to issues while sorting keys: %s'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        task_1 = module_0.Task(dict_0)
        list_0 = [task_1, task_1]
        bytes_0 = b'\xd6\xfc\xdb'
        var_0 = task_0.load(dict_0, task_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1251
        set_0 = {int_0}
        task_0 = module_0.Task(set_0)
        var_0 = task_0.load(task_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 248.3
        task_0 = module_0.Task()
        var_0 = task_0.preprocess_data(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.get_vars()
        var_1 = task_0.get_first_parent_include()
        bool_0 = False
        bool_1 = False
        list_0 = [bool_1, bool_1]
        task_1 = module_0.Task(list_0)
        var_2 = task_1.post_validate(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        task_0 = module_0.Task()
        var_0 = task_0.post_validate(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 161
        task_0 = module_0.Task(int_0)
        var_0 = task_0.get_vars()
    except BaseException:
        pass

def test_case_6():
    try:
        task_0 = module_0.Task()
        float_0 = 2628.943348
        task_1 = module_0.Task(task_0, float_0)
        var_0 = task_1.copy()
        var_1 = task_1.get_include_params()
        int_0 = -4323
        var_2 = task_1.preprocess_data(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        task_0 = module_0.Task()
        float_0 = 2628.943348
        task_1 = module_0.Task(task_0, float_0)
        var_0 = task_1.copy()
        int_0 = -4323
        var_1 = task_1.preprocess_data(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 161
        task_0 = module_0.Task(int_0)
        var_0 = task_0.serialize()
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x81\x01di\xe2cG\xf3\xca\xb6\x1a\xbfl\xce\xa5{\xb7T'
        float_0 = -195.996
        task_0 = module_0.Task(bytes_0, float_0)
        var_0 = task_0.set_loader(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1529
        task_0 = module_0.Task()
        var_0 = task_0.all_parents_static()
        var_1 = task_0.__repr__()
        var_2 = task_0.deserialize(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = {}
        task_0 = module_0.Task()
        var_1 = task_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        task_0 = module_0.Task()
        str_0 = 'g!Ky{$-"|M'
        task_1 = module_0.Task(task_0, str_0)
        var_0 = task_1.serialize()
    except BaseException:
        pass

def test_case_13():
    try:
        task_0 = module_0.Task()
        task_1 = module_0.Task(task_0)
        task_2 = module_0.Task()
        var_0 = task_2.all_parents_static()
        var_1 = task_0.get_first_parent_include()
        var_2 = task_0.get_name()
        bytes_0 = b''
        task_3 = module_0.Task()
        var_3 = task_3.serialize()
        tuple_0 = (bytes_0, bytes_0)
        var_4 = task_0.copy()
        var_5 = task_0.set_loader(tuple_0)
        float_0 = 2306.6
        dict_0 = {float_0: var_3}
        var_6 = task_0.preprocess_data(dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 161
        bool_0 = True
        str_0 = "I7ldB4#fK\ncoRsg&!'"
        task_0 = module_0.Task(str_0)
        var_0 = task_0.copy(bool_0)
        task_1 = module_0.Task(int_0)
        var_1 = task_1.serialize()
    except BaseException:
        pass

def test_case_15():
    try:
        task_0 = module_0.Task()
        list_0 = [task_0, task_0]
        task_1 = module_0.Task(task_0)
        task_2 = module_0.Task()
        var_0 = task_2.all_parents_static()
        var_1 = task_1.get_name()
        var_2 = task_0.get_first_parent_include()
        dict_0 = {task_0: task_1, task_0: task_1}
        var_3 = task_1.deserialize(dict_0)
        var_4 = task_0.__repr__()
        bytes_0 = b''
        task_3 = module_0.Task()
        var_5 = task_3.serialize()
        tuple_0 = (bytes_0, bytes_0)
        var_6 = task_0.copy()
        var_7 = task_0.set_loader(tuple_0)
        str_0 = 'delegate_to'
        var_8 = task_3.load(task_1, str_0, list_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '%s ls-remote %s -h refs/heads/%s'
        var_0 = dict(action=str_0)
        task_0 = module_0.Task()
        var_1 = task_0.load(var_0)
    except BaseException:
        pass

def test_case_17():
    try:
        task_0 = module_0.Task()
        str_0 = 'parent'
        str_1 = 'type'
        str_2 = 'TaskInclude'
        str_3 = {str_1: str_2}
        str_4 = {str_0: str_3}
        var_0 = task_0.deserialize(str_4)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\x19\xb5'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        block_0 = module_1.Block()
        bool_0 = True
        task_0 = module_0.Task(block_0, bool_0)
        var_0 = task_0.deserialize(dict_0)
        task_1 = module_0.Task()
        var_1 = task_1.serialize()
        str_0 = 'te7'
        var_2 = task_0.get_first_parent_include()
        var_3 = task_1.get_include_params()
        var_4 = dict(module=str_0)
        var_5 = task_1.serialize()
        task_2 = module_0.Task()
        task_3 = module_0.Task()
        var_6 = task_3.get_include_params()
        var_7 = task_2.load(var_5)
    except BaseException:
        pass