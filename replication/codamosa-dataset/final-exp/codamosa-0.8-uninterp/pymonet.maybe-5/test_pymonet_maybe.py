# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()

def test_case_2():
    int_0 = -676
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()

def test_case_3():
    object_0 = module_1.object()
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)

def test_case_4():
    callable_0 = None
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.map(callable_0)
    str_0 = "]Pn'RA8nDCFE:G3%b<"
    list_1 = [str_0, str_0]
    bool_1 = False
    maybe_1 = module_0.Maybe(list_1, bool_1)

def test_case_5():
    str_0 = '=t`ku6.T=%o8;'
    str_1 = '=Vbtq oc'
    int_0 = 430
    tuple_0 = ()
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_try()
    list_0 = [str_1, str_1, int_0]
    bool_1 = True
    maybe_1 = module_0.Maybe(list_0, bool_1)
    var_1 = maybe_1.bind(str_0)

def test_case_6():
    str_0 = '!\r"'
    str_1 = None
    set_0 = {str_0, str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    var_0 = maybe_0.ap(str_1)
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    object_0 = module_1.object()
    bool_2 = False
    dict_0 = None
    maybe_2 = module_0.Maybe(dict_0, bool_2)
    bool_3 = maybe_1.__eq__(object_0)

def test_case_7():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    maybe_3 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_2 == maybe_3
    maybe_4 = module_0.Maybe(int_0, bool_0)
    list_0 = [var_0, maybe_0, var_0, maybe_0]
    var_1 = maybe_1.filter(list_0)

def test_case_8():
    str_0 = '!\r"'
    set_0 = {str_0, str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(set_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(str_0, bool_1)
    object_0 = module_1.object()
    bytes_0 = b'gwg\xc2\x7f\xa3\x8d\xee?\x05\xab'
    var_0 = None
    var_1 = maybe_1.get_or_else(var_0)
    var_2 = maybe_1.to_lazy()
    bool_2 = False
    bool_3 = True
    maybe_2 = module_0.Maybe(bool_2, bool_3)
    var_3 = maybe_2.map(bytes_0)
    bool_4 = maybe_1.__eq__(object_0)

def test_case_9():
    int_0 = 1
    str_0 = '\n        Returns new ImmutableList with argument value on the begin of list\n        and other list elements after it\n\n        :param new_element: element to append on the begin of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        '
    bytes_0 = b'\xb8\x0e\x84Vu!mA\x8d\xb4\x07>'
    list_0 = []
    tuple_0 = (str_0, bytes_0, list_0)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_either()
    bool_1 = True
    maybe_1 = module_0.Maybe(int_0, bool_1)
    maybe_2 = module_0.Maybe(int_0, bool_1)
    int_1 = 2
    maybe_3 = module_0.Maybe(int_1, bool_1)
    var_1 = maybe_2 == maybe_3
    var_2 = maybe_2.to_lazy()
    var_3 = maybe_3.filter(int_0)

def test_case_10():
    str_0 = 'nuDs$~FPxv'
    str_1 = '$\\go'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.to_either()

def test_case_11():
    bytes_0 = b'd*\t\n\xc4\xcf\x95'
    bool_0 = False
    maybe_0 = module_0.Maybe(bytes_0, bool_0)
    var_0 = maybe_0.to_box()

def test_case_12():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    maybe_3 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_2 == maybe_3
    maybe_4 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_0.to_validation()
    var_2 = maybe_4.to_box()
    var_3 = maybe_0.to_lazy()
    var_4 = maybe_2.filter(maybe_0)

def test_case_13():
    str_0 = '@GT\r4j6&BOHg11hP\t'
    str_1 = ')~%Uc3\\eMwp['
    tuple_0 = (str_0, str_1)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_try()

def test_case_14():
    str_0 = '\n    Maybe type is the most common way of representing nothingness (or the null type).\n    Maybe is effectively abstract and has two concrete subtypes: Box (also Some) and Nothing.\n    '
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()

def test_case_15():
    str_0 = 'P&)ki]gX~q9Zj<)TDn4.'
    list_0 = [str_0, str_0]
    bool_0 = True
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.to_validation()

def test_case_16():
    int_0 = 1
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_2 == maybe_2
    maybe_3 = module_0.Maybe(int_0, bool_0)

def test_case_17():
    int_0 = 1
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    maybe_1 = module_0.Maybe(int_0, bool_0)
    maybe_2 = module_0.Maybe(int_0, bool_0)
    maybe_3 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_2 == maybe_3
    maybe_4 = module_0.Maybe(int_0, bool_0)
    maybe_5 = module_0.Maybe(int_0, bool_0)