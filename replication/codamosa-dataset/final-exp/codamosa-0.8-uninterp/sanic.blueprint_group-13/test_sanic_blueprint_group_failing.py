# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    try:
        str_0 = '#o"lLbA2,`#j*.{*\r5'
        set_0 = {str_0, str_0}
        blueprint_group_0 = module_0.BlueprintGroup(set_0)
        list_0 = []
        blueprint_group_1 = module_0.BlueprintGroup(list_0)
        list_1 = [blueprint_group_1]
        bytes_0 = b'\xd1\xef\xdec+4\\9\xe3\xffC3J\xb2\x18\xd0\xcc\x14'
        blueprint_group_2 = module_0.BlueprintGroup(list_1, bytes_0)
        var_0 = blueprint_group_2.__getitem__(blueprint_group_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -856.5026
        str_0 = ''
        list_0 = [float_0, str_0, str_0]
        bool_0 = False
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.__setitem__(list_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -976.777
        blueprint_group_0 = module_0.BlueprintGroup(float_0)
        var_0 = blueprint_group_0.__iter__()
        int_0 = -3350
        blueprint_group_0.__delitem__(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 1.0
        set_0 = {float_0, float_0}
        blueprint_group_0 = module_0.BlueprintGroup(set_0)
        var_0 = blueprint_group_0.__iter__()
        str_0 = '\\8\t)HQk_\t'
        blueprint_0 = module_1.Blueprint(str_0, str_0)
        str_1 = '\nZe3OxngF{@A<%<uG($C'
        dict_0 = {str_1: str_1}
        blueprint_group_1 = module_0.BlueprintGroup(dict_0)
        blueprint_group_1.append(blueprint_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '$$6Kk8Q'
        blueprint_0 = module_1.Blueprint(str_0)
        float_0 = 3737.0
        blueprint_group_0 = module_0.BlueprintGroup(float_0)
        blueprint_group_0.append(blueprint_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '8W%+"pc!|\twa}"}Mq'
        float_0 = 1.0
        str_1 = 'Ci\x0cn'
        dict_0 = {str_1: float_0, float_0: str_1}
        blueprint_group_0 = module_0.BlueprintGroup(dict_0)
        str_2 = 'A\t[i$Qtq`S;xf$fKUi'
        var_0 = blueprint_group_0.middleware()
        str_3 = '`#r\tg_e& EiC9 r&6cX'
        blueprint_0 = module_1.Blueprint(str_2, str_3, str_2)
        str_4 = '\n        Read some bytes of request body.\n        '
        str_5 = '\x0blDUg!CDF'
        blueprint_group_1 = module_0.BlueprintGroup(blueprint_0)
        var_1 = blueprint_group_1.middleware()
        int_0 = blueprint_group_1.__len__()
        dict_1 = {str_5: str_2, str_2: str_0}
        blueprint_group_2 = module_0.BlueprintGroup(str_4, dict_1)
        blueprint_group_2.append(blueprint_0)
        var_2 = blueprint_group_0.middleware()
        var_3 = blueprint_group_0.middleware()
        blueprint_group_3 = module_0.BlueprintGroup(blueprint_0, int_0)
        list_0 = [var_3, blueprint_group_3, int_0]
        var_4 = blueprint_group_1.middleware(*list_0)
        var_5 = blueprint_0.exception()
        var_6 = blueprint_group_1.__iter__()
        blueprint_group_4 = module_0.BlueprintGroup()
        var_7 = blueprint_group_2.middleware(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'bp1'
        str_1 = '/bp1'
        blueprint_0 = module_1.Blueprint(str_0, str_1)
        str_2 = 'bp2'
        str_3 = '/bp2'
        blueprint_1 = module_1.Blueprint(str_2, str_3)
        str_4 = 'bp3'
        str_5 = '/bp3'
        blueprint_2 = module_1.Blueprint(str_4, str_5)
        str_6 = 'bp3_2'
        str_7 = '/bp3_2'
        blueprint_3 = module_1.Blueprint(str_6, str_7)
        str_8 = '/api'
        str_9 = 'v1'
        blueprint_group_0 = module_0.BlueprintGroup(str_8, str_9)
        blueprint_group_0.append(blueprint_0)
        blueprint_group_0.append(blueprint_1)
        str_10 = 'v2'
        blueprint_group_1 = module_0.BlueprintGroup(str_8, str_10)
        blueprint_group_1.append(blueprint_2)
        blueprint_group_1.append(blueprint_3)
        blueprint_group_1.append(blueprint_group_0)
    except BaseException:
        pass