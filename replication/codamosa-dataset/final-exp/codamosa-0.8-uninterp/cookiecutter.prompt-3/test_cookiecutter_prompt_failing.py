# Automatically generated by Pynguin.
import cookiecutter.prompt as module_0
import collections as module_1

def test_case_0():
    try:
        str_0 = '\n    Exception for out-of-scope variables.\n\n    Raised when a template uses a variable which is not defined in the\n    context.\n    '
        bytes_0 = None
        var_0 = module_0.read_user_variable(str_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'AZmuxv&b'
        int_0 = None
        var_0 = module_0.read_user_yes_no(str_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Aw)l1tw0Gk'
        var_0 = module_0.read_repo_password(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 47
        set_0 = {int_0}
        var_0 = module_0.read_user_choice(int_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '{"answer5: 42}'
        var_0 = module_0.process_json(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        list_0 = []
        var_0 = module_0.read_user_dict(list_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Test'
        var_0 = module_0.read_user_dict(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Config file {} does not exist.'
        set_0 = set()
        var_0 = module_0.render_variable(str_0, set_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        ordered_dict_0 = module_1.OrderedDict()
        list_0 = []
        var_0 = module_0.render_variable(ordered_dict_0, list_0, ordered_dict_0)
        str_0 = '{"a": "b"}'
        var_1 = module_0.process_json(str_0)
        str_1 = '{"a": 2}'
        var_2 = module_0.process_json(str_1)
        str_2 = '{"a": [1,2,3]}'
        var_3 = module_0.process_json(str_2)
        dict_0 = None
        list_1 = None
        var_4 = module_0.read_user_dict(dict_0, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'F]d"8\x0cf8%\rId'
        float_0 = -1120.1
        dict_0 = {str_0: str_0, str_0: float_0, str_0: str_0}
        str_1 = None
        var_0 = module_0.render_variable(str_0, dict_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -1616.694472
        set_0 = set()
        bytes_0 = None
        str_0 = "\n    Exception for missing repo.\n\n    Raised when the specified cookiecutter repository doesn't exist.\n    "
        str_1 = '$ky'
        var_0 = module_0.prompt_choice_for_config(bytes_0, str_0, str_1, set_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = None
        float_1 = 1678.075
        set_0 = {float_0, float_1, float_0, float_0}
        int_0 = -813
        float_2 = 3356.0
        str_0 = 'https://gitlab.com/{0}.git'
        var_0 = module_0.prompt_choice_for_config(set_0, int_0, float_0, float_2, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xe1\xda^'
        bool_0 = False
        var_0 = module_0.prompt_for_config(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Configrfile {}.does not exist.'
        set_0 = set()
        var_0 = module_0.render_variable(str_0, str_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 361.7762
        set_0 = {float_0, float_0}
        list_0 = [set_0]
        bool_0 = False
        var_0 = module_0.render_variable(set_0, list_0, bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '_copy_without_render'
        int_0 = -35
        str_1 = 'Error handler for `shutil.rmtree()` equivalent to `rm -rf`.\n\n    Usage: `shutil.rmtree(path, onerror=force_delete)`\n    From https://docs.python.org/3/library/shutil.html#rmtree-example\n    '
        bytes_0 = b'\xc5S\xc0;\x98R\xa4\x10'
        bool_0 = False
        set_0 = {bool_0}
        list_0 = [set_0, bool_0, str_0]
        dict_0 = {str_0: bool_0, int_0: list_0, str_1: list_0, str_1: set_0}
        tuple_0 = (set_0, dict_0, dict_0)
        var_0 = module_0.prompt_choice_for_config(str_1, bytes_0, bool_0, set_0, tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        bytes_0 = b'\xa3\x05k\r\xb7\xdf\x14"lG\xefd'
        list_0 = None
        set_0 = {list_0}
        var_0 = module_0.prompt_choice_for_config(bytes_0, set_0, str_0, set_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        bytes_0 = b'\xa3\x05k\r\xb7\xdf\x14"lG\xefd'
        set_0 = set()
        var_0 = module_0.prompt_choice_for_config(bytes_0, set_0, str_0, set_0, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '{"a": "b"}'
        var_0 = module_0.process_json(str_0)
        str_1 = '2\r'
        var_1 = module_0.process_json(str_1)
    except BaseException:
        pass