# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.metaclass as module_1

def test_case_0():
    try:
        list_0 = []
        a_s_t_0 = module_0.AST(*list_0)
        a_s_t_1 = module_0.AST(*list_0)
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_1)
        str_0 = 'U}S=22j$1wFzZ%x'
        dict_0 = {str_0: str_0}
        module_x_var_0 = module_0.Module(**dict_0)
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_0)
        module_x_var_1 = metaclass_transformer_1.visit_Module(module_x_var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '-b02^X~^ul;\x0b2?~0\x0c'
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, dict_0, str_0]
        list_1 = [str_0, dict_0, str_0]
        list_2 = [list_0, list_1, str_0, list_0]
        class_def_0 = module_0.ClassDef(*list_2)
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_1.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_2():
    try:
        class_def_0 = module_0.ClassDef()
        list_0 = []
        str_0 = 'tkinter.dialog'
        dict_0 = {str_0: list_0}
        a_s_t_0 = module_0.AST(*list_0, **dict_0)
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0, list_0]
        class_def_0 = module_0.ClassDef(*list_1)
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
        a_s_t_1 = module_0.AST()
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_1)
        class_def_2 = metaclass_transformer_1.visit_ClassDef(class_def_1)
        str_0 = 'y:\x0cX9@2*a\rH2koUZF;k'
        dict_0 = {str_0: str_0, str_0: str_0}
        a_s_t_2 = module_0.AST(**dict_0)
        metaclass_transformer_2 = module_1.MetaclassTransformer(a_s_t_2)
        class_def_3 = metaclass_transformer_2.visit_ClassDef(class_def_2)
        list_2 = []
        class_def_4 = module_0.ClassDef(*list_2)
        a_s_t_3 = module_0.AST()
        metaclass_transformer_3 = module_1.MetaclassTransformer(a_s_t_3)
        class_def_5 = metaclass_transformer_3.visit_ClassDef(class_def_4)
    except BaseException:
        pass