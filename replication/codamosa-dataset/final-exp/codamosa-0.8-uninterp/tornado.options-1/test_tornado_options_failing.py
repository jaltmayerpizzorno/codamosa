# Automatically generated by Pynguin.
import tornado.options as module_0
import typing as module_1
import builtins as module_2

def test_case_0():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'hdog72"'
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'q2_yf/H&P6A'
        list_0 = [str_0]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\nvF\x0co$L'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '5)1O\x0b4~d;zJK^;xj;5\\'
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '/input/tornado/options.py'
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = None
        str_0 = "Z{qFl'}"
        list_0 = [str_0, str_0]
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        list_1 = []
        option_0 = module_0._Option(str_0, list_0, str_0, list_1)
        option_0.set(bool_0)
        list_2 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_8():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '5'
        dict_0 = option_parser_0.group_dict(str_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_9():
    try:
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        str_0 = ''
        dict_1 = option_parser_0.group_dict(str_0)
        dict_2 = option_parser_0.group_dict(str_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '('
        module_0.define(str_0, str_0, str_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_12():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        dict_0 = option_parser_0.as_dict()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_13():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'hdog72"'
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        dict_0 = option_parser_0.as_dict()
        mockable_0 = option_parser_0.mockable()
        str_0 = '5'
        dict_1 = option_parser_0.group_dict(str_0)
        bool_0 = True
        iterable_0 = option_parser_0.items()
        str_1 = 'LR"w\x0cQ;Wh\x0c:b$O3.'
        str_2 = "**\x0ca'0eOZ`4d"
        option_0 = module_0._Option(str_1, str_2, mockable_0, str_2, str_2)
        option_0.set(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'HMAC-SHA1'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        error_0 = module_0.Error()
        str_0 = None
        str_1 = ' ^LT\t/j(&J'
        str_2 = '\tQTFh;\\=XeUuq"nz\x0b'
        list_0 = [str_0, str_1, str_2]
        option_0 = module_0._Option(str_1, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'z#;\no'
        str_1 = 'midnight'
        option_0 = module_0._Option(str_1, str_1, str_1, str_1)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '2o$='
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        module_0.print_help()
    except BaseException:
        pass

def test_case_20():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_0.run_parse_callbacks()
        module_0.add_parse_callback(iterable_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '-T\x0b'
        list_0 = [str_0, str_0, str_0]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        dict_0 = option_parser_0.as_dict()
        mockable_0 = option_parser_0.mockable()
        str_0 = '5'
        dict_1 = option_parser_0.group_dict(str_0)
        text_i_o_0 = module_1.TextIO()
        option_parser_0.print_help(text_i_o_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = ''
        str_1 = 'V/9? ,V\r3}fs(HG+Pf<'
        list_0 = [str_0, str_1]
        option_parser_0 = module_0.OptionParser()
        list_1 = option_parser_0.parse_command_line(list_0)
        str_2 = 'info'
        option_parser_1 = module_0.OptionParser()
        iterable_0 = option_parser_1.items()
        bool_0 = False
        option_0 = module_0._Option(str_1, str_1, bool_0, str_1)
        iterator_0 = option_parser_1.__iter__()
        any_0 = option_0.parse(str_2)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = "Z{qFl'}"
        str_1 = 'vyA7'
        any_0 = None
        bool_0 = False
        option_0 = module_0._Option(str_1, any_0, str_0, str_0, bool_0, str_0)
        option_0.set(any_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'catch'
        bool_0 = True
        none_type_0 = None
        module_0.define(str_0, bool_0, none_type_0)
    except BaseException:
        pass

def test_case_26():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        mockable_0 = module_0._Mockable(option_parser_0)
        option_parser_1 = module_0.OptionParser()
        str_0 = '%2\tH'
        str_1 = "Decorator to run a synchronous method asynchronously on an executor.\n\n    Returns a future.\n\n    The executor to be used is determined by the ``executor``\n    attributes of ``self``. To use a different attribute name, pass a\n    keyword argument to the decorator::\n\n        @run_on_executor(executor='_thread_pool')\n        def foo(self):\n            pass\n\n    This decorator should not be confused with the similarly-named\n    `.IOLoop.run_in_executor`. In general, using ``run_in_executor``\n    when *calling* a blocking method is recommended instead of using\n    this decorator when *defining* a method. If compatibility with older\n    versions of Tornado is required, consider defining an executor\n    and using ``executor.submit()`` at the call site.\n\n    .. versionchanged:: 4.2\n       Added keyword arguments to use alternative attributes.\n\n    .. versionchanged:: 5.0\n       Always uses the current IOLoop instead of ``self.io_loop``.\n\n    .. versionchanged:: 5.1\n       Returns a `.Future` compatible with ``await`` instead of a\n       `concurrent.futures.Future`.\n\n    .. deprecated:: 5.1\n\n       The ``callback`` argument is deprecated and will be removed in\n       6.0. The decorator itself is discouraged in new code but will\n       not be removed in 6.0.\n\n    .. versionchanged:: 6.0\n\n       The ``callback`` argument was removed.\n    "
        str_2 = None
        list_0 = [str_0, str_1, str_2]
        bool_0 = None
        list_1 = option_parser_1.parse_command_line(list_0, bool_0)
        option_parser_2 = module_0.OptionParser()
        mockable_1 = option_parser_2.mockable()
        str_3 = '5\rwH"^'
        mockable_1.__delattr__(str_3)
    except BaseException:
        pass

def test_case_27():
    try:
        module_0.print_help()
        option_parser_0 = module_0.OptionParser()
        str_0 = '\\'
        bool_0 = False
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0)
        option_0.set(option_parser_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ',*)=MSn/O;YjCqz'
        module_0.define(str_0, str_0)
        none_type_0 = None
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0, none_type_0)
        str_1 = ''
        option_parser_0.__setitem__(str_1, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = ':P+Fsr'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, mockable_0)
    except BaseException:
        pass

def test_case_31():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        str_0 = '}VYv'
        str_1 = '^jw%/~\t\x0cQC/"{7GIT'
        iterable_0 = option_parser_0.items()
        option_parser_0.define(str_0, str_1, str_1)
        option_parser_1 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_1)
        str_2 = "b9k31'Oft"
        str_3 = '$!|jMv[#nk[Ld~'
        dict_0 = option_parser_0.as_dict()
        str_4 = '<ast>'
        dict_1 = option_parser_0.group_dict(str_4)
        str_5 = ' .c3HCuF'
        list_0 = [str_2, str_5, str_3]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_32():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        mockable_0 = module_0._Mockable(option_parser_0)
        str_0 = '5'
        dict_0 = option_parser_0.as_dict()
        dict_1 = {}
        text_i_o_0 = module_1.TextIO(**dict_1)
        text_i_o_1 = text_i_o_0.__enter__()
        str_1 = '--'
        dict_2 = option_parser_0.group_dict(str_1)
        list_0 = [str_0, str_1]
        bool_0 = True
        list_1 = module_0.parse_command_line(list_0, bool_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = '/input/tornado/options.py'
        bool_0 = False
        option_parser_0 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0, bool_0)
        error_0 = module_0.Error()
        dict_0 = option_parser_0.as_dict()
        any_0 = option_parser_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = None
        str_0 = "Z{qFl'}"
        list_0 = [str_0, str_0]
        list_1 = []
        option_0 = module_0._Option(str_0, list_0, str_0, list_1)
        option_1 = module_0._Option(str_0, option_0, str_0, bool_0, str_0, str_0)
        option_1.set(list_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '/input/tornado/options.py'
        bool_0 = False
        option_parser_0 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0)
        dict_0 = option_parser_0.as_dict()
        str_1 = 'm(y"02?<kSnaq3JGeKG6'
        str_2 = '0~$'
        option_parser_1 = module_0.OptionParser()
        option_0 = module_0._Option(str_1, option_parser_0, str_2, bool_0, str_1, option_parser_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        bool_0 = None
        str_0 = "Z{qFl'}"
        list_0 = []
        list_1 = []
        option_0 = module_0._Option(str_0, list_0, str_0, list_1)
        option_1 = module_0._Option(str_0, option_0, str_0, bool_0, str_0, str_0)
        option_1.set(list_1)
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '/input/tornado/options.py'
        iterator_0 = option_parser_0.__iter__()
        iterator_1 = option_parser_0.__iter__()
        bool_0 = False
        option_parser_1 = module_0.OptionParser()
        option_parser_2 = module_0.OptionParser()
        option_parser_1.parse_config_file(str_0)
        dict_0 = option_parser_0.as_dict()
        str_1 = 'm(y"02?<kSnaq3JGeKG6'
        iterator_2 = option_parser_1.__iter__()
        str_2 = 'gtVJ'
        option_0 = module_0._Option(str_2, str_1, bool_0)
        tuple_0 = None
        str_3 = '0~$'
        any_0 = option_0.value()
        option_1 = module_0._Option(str_3, any_0, str_1)
        str_4 = '@^1+O\r7K!C\rd`Q3)'
        none_type_0 = None
        bool_1 = False
        option_parser_0.define(str_4, any_0, none_type_0, str_4, bool_1, str_0)
        option_1.set(tuple_0)
        option_parser_3 = module_0.OptionParser()
        dict_1 = {}
        type_0 = module_2.type(**dict_1)
    except BaseException:
        pass

def test_case_38():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'Khib/*5cx'
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = '/input/tornado/options.py'
        dict_1 = option_parser_0.group_dict(str_1)
        iterator_0 = option_parser_0.__iter__()
        iterator_1 = option_parser_0.__iter__()
        option_parser_1 = module_0.OptionParser()
        option_parser_2 = module_0.OptionParser()
        iterable_0 = option_parser_2.items()
        option_parser_1.parse_config_file(str_1)
        str_2 = '-T=\x0b'
        dict_2 = option_parser_0.as_dict()
        list_0 = [str_2, str_2]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass