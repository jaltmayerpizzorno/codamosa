# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    float_0 = 2156.149147
    right_0 = module_0.Right(float_0)

def test_case_2():
    object_0 = module_1.object()
    either_0 = module_0.Either(object_0)
    bool_0 = either_0.__eq__(object_0)

def test_case_3():
    str_0 = '\n        :returns: False\n        :rtype: Boolean\n        '
    either_0 = module_0.Either(str_0)
    either_1 = module_0.Either(either_0)
    var_0 = either_1.to_try()

def test_case_4():
    object_0 = module_1.object()
    either_0 = module_0.Either(object_0)
    var_0 = either_0.to_lazy()
    bool_0 = either_0.__eq__(object_0)

def test_case_5():
    right_0 = None
    bool_0 = True
    left_0 = module_0.Left(bool_0)
    var_0 = left_0.map(right_0)

def test_case_6():
    str_0 = 'w`.1<v.Z'
    bool_0 = False
    tuple_0 = (str_0, bool_0)
    left_0 = module_0.Left(bool_0)
    left_1 = module_0.Left(left_0)
    str_1 = 'nt&q'
    left_2 = module_0.Left(str_1)
    left_3 = module_0.Left(left_2)
    var_0 = left_3.bind(left_1)
    left_4 = module_0.Left(tuple_0)
    int_0 = None
    var_1 = left_1.map(var_0)
    var_2 = left_4.map(int_0)
    bool_1 = True
    var_3 = left_4.ap(bool_1)
    bool_2 = left_4.is_right()
    bool_3 = left_1.is_left()
    left_5 = module_0.Left(tuple_0)
    list_0 = [bool_1, left_4]
    either_0 = module_0.Either(list_0)
    var_4 = either_0.to_lazy()
    bool_4 = left_5.is_left()
    bool_5 = left_5.is_left()

def test_case_7():
    list_0 = []
    str_0 = 'jH\r/#|5H0CHz|F\ruS'
    str_1 = ',8qF7=I3a!Nh'
    left_0 = module_0.Left(str_1)
    var_0 = left_0.bind(str_0)
    right_0 = module_0.Right(var_0)
    bool_0 = right_0.is_left()
    list_1 = [list_0, list_0, list_0]
    list_2 = [list_1, list_0]
    left_1 = module_0.Left(list_2)
    var_1 = left_1.to_validation()
    bool_1 = left_1.is_right()
    int_0 = 985
    bool_2 = left_1.is_right()
    left_2 = module_0.Left(int_0)
    bool_3 = left_1.is_left()
    bool_4 = left_2.is_left()

def test_case_8():
    str_0 = 'c4]'
    left_0 = module_0.Left(str_0)
    bool_0 = left_0.is_right()

def test_case_9():
    str_0 = 'ImmutableList[T]'
    float_0 = -17.2216
    set_0 = {str_0, str_0, float_0, str_0}
    dict_0 = {str_0: str_0, str_0: str_0, str_0: float_0, str_0: set_0}
    right_0 = module_0.Right(dict_0)
    bool_0 = right_0.is_right()

def test_case_10():
    str_0 = "_!$FC^i]*Ti'tCtK/\x0cxL"
    right_0 = module_0.Right(str_0)
    var_0 = right_0.to_maybe()
    str_1 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: First[B]\n        :returns: new First with first value\n        :rtype: First[A]\n        '
    tuple_0 = ()
    left_0 = module_0.Left(tuple_0)
    var_1 = left_0.map(str_1)

def test_case_11():
    var_0 = None
    left_0 = module_0.Left(var_0)
    var_1 = lambda e: e
    var_2 = lambda a: a
    var_3 = left_0.case(var_1, var_2)
    right_0 = module_0.Right(var_0)
    var_4 = lambda e: e
    var_5 = lambda a: a
    var_6 = right_0.case(var_4, var_5)
    int_0 = 10
    left_1 = module_0.Left(int_0)
    var_7 = lambda e: e
    var_8 = lambda a: a
    var_9 = left_1.case(var_7, var_8)
    right_1 = module_0.Right(int_0)
    var_10 = lambda e: e
    var_11 = lambda a: a
    var_12 = right_1.case(var_10, var_11)
    int_1 = 1
    left_2 = module_0.Left(int_1)
    right_2 = module_0.Right(int_1)
    left_3 = module_0.Left(var_0)
    var_13 = lambda e: e
    right_3 = module_0.Right(var_0)
    var_14 = lambda e: e
    right_4 = module_0.Right(int_0)
    var_15 = lambda e: e

def test_case_12():
    int_0 = 1
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    int_1 = 2
    right_0 = module_0.Right(int_1)
    right_1 = module_0.Right(int_1)
    left_2 = module_0.Left(int_0)
    right_2 = module_0.Right(int_0)
    var_0 = left_2 == right_2
    right_3 = module_0.Right(int_1)
    left_3 = module_0.Left(int_1)
    var_1 = right_3 == left_3
    left_4 = module_0.Left(int_0)
    right_4 = module_0.Right(int_0)

def test_case_13():
    int_0 = 2
    right_0 = module_0.Right(int_0)
    right_1 = module_0.Right(int_0)
    right_2 = module_0.Right(int_0)
    left_0 = module_0.Left(int_0)
    var_0 = right_2 == left_0
    right_3 = module_0.Right(int_0)
    int_1 = 5
    right_4 = module_0.Right(int_1)
    var_1 = right_3 == right_4
    left_1 = module_0.Left(int_0)
    left_2 = module_0.Left(int_0)
    left_3 = module_0.Left(int_1)
    var_2 = left_2 == left_3
    left_4 = module_0.Left(int_0)
    right_5 = module_0.Right(int_0)
    var_3 = left_4 == right_5