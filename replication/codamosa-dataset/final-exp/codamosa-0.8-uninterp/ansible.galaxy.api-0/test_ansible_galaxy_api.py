# Automatically generated by Pynguin.
import ansible.galaxy.api as module_0
import urllib.error as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'N\n`a\\g2*J'
    var_0 = module_0.is_rate_limit_exception(str_0)

def test_case_2():
    str_0 = '%-8s %-15s %s'
    var_0 = module_0.get_cache_id(str_0)
    list_0 = []
    list_1 = [list_0]
    var_1 = module_0.g_connect(list_1)

def test_case_3():
    int_0 = 403
    str_0 = 'System not allowed'
    h_t_t_p_error_0 = module_1.HTTPError(str_0, int_0, str_0, int_0, int_0)
    galaxy_error_0 = module_0.GalaxyError(h_t_t_p_error_0, str_0)

def test_case_4():
    galaxy_a_p_i_0 = None
    set_0 = None
    str_0 = 'KSH/Jdo'
    float_0 = 694.7424
    str_1 = '|H+/<qOqNz?Zt#&U,N'
    dict_0 = {str_1: str_1}
    list_0 = [str_1]
    tuple_0 = (list_0,)
    str_2 = 'validate the key_id and break it into segments\n\n    :arg key_id: The key_id as supplied by the user.  A valid key_id will be\n        8, 16, or more hexadecimal chars with an optional leading ``0x``.\n    :returns: The portion of key_id suitable for apt-key del, the portion\n        suitable for comparisons with --list-public-keys, and the portion that\n        can be used with --recv-key.  If key_id is long enough, these will be\n        the last 8 characters of key_id, the last 16 characters, and all of\n        key_id.  If key_id is not long enough, some of the values will be the\n        same.\n\n    * apt-key del <= 1.10 has a bug with key_id != 8 chars\n    * apt-key adv --list-public-keys prints 16 chars\n    * apt-key adv --recv-key can take more chars\n\n    '
    collection_version_metadata_0 = module_0.CollectionVersionMetadata(str_0, float_0, dict_0, tuple_0, tuple_0, str_2)
    galaxy_a_p_i_1 = module_0.GalaxyAPI(galaxy_a_p_i_0, set_0, collection_version_metadata_0)

def test_case_5():
    set_0 = set()
    float_0 = 4043.127845
    bool_0 = False
    galaxy_a_p_i_0 = module_0.GalaxyAPI(set_0, float_0, bool_0)

def test_case_6():
    int_0 = 0
    set_0 = {int_0}
    var_0 = module_0.is_rate_limit_exception(set_0)
    int_1 = 1
    int_2 = [int_1]
    list_0 = [int_0, int_0]
    bytes_0 = b'0M\x99\xc5\xa6o\xca\x9f\xed\xf5\xcc\x8b\xedw\xc6'
    str_0 = 'jc:2'
    dict_0 = {str_0: int_0, str_0: int_2, str_0: int_2, str_0: str_0}
    galaxy_a_p_i_0 = module_0.GalaxyAPI(list_0, bytes_0, str_0, int_2, dict_0)
    var_1 = galaxy_a_p_i_0.__str__()

def test_case_7():
    str_0 = 'Failed to stat %s, %s'
    int_0 = 29
    bool_0 = False
    bytes_0 = b'\xd8\x0eA'
    galaxy_a_p_i_0 = module_0.GalaxyAPI(str_0, int_0, bool_0, bytes_0)
    var_0 = galaxy_a_p_i_0.__unicode__()

def test_case_8():
    str_0 = 'processor_cores'
    bool_0 = False
    dict_0 = {}
    galaxy_a_p_i_0 = module_0.GalaxyAPI(bool_0, str_0, dict_0, dict_0, bool_0)
    var_0 = galaxy_a_p_i_0.__repr__()
    float_0 = -3105.0
    list_0 = [float_0]
    var_1 = module_0.g_connect(list_0)

def test_case_9():
    int_0 = -199
    bytes_0 = b'\x92J\xbe\x05\x9d'
    str_0 = 'H}{6@L?*'
    list_0 = [int_0, int_0]
    bool_0 = False
    galaxy_a_p_i_0 = module_0.GalaxyAPI(str_0, list_0, bytes_0, bool_0, int_0, int_0)
    var_0 = galaxy_a_p_i_0.__lt__(bytes_0)

def test_case_10():
    str_0 = 'https://galaxy.ansible.com/v1/'
    var_0 = module_0.get_cache_id(str_0)
    str_1 = 'https://galaxy.ansible.com'
    var_1 = module_0.get_cache_id(str_1)
    str_2 = 'https://galaxy.ansible.com:123/v1/'
    var_2 = module_0.get_cache_id(str_2)

def test_case_11():
    str_0 = '*'
    var_0 = module_0.get_cache_id(str_0)
    str_1 = ':443/'
    var_1 = module_0.get_cache_id(str_1)
    str_2 = 'https://galaxy.ansible.com:potato:potato/'
    var_2 = module_0.get_cache_id(str_2)