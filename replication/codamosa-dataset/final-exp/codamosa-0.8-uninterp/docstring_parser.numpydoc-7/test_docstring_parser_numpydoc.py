# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0
import docstring_parser.common as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n    We only test this method of the class _KVSection, because the other methods\n    are tested by test_parser_numpydoc.py\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '\n    Parameters\n    ----------\n    a : int, optional\n        first parameter\n        optional parameter\n    b : list of ints\n        a list of ints\n        obvi\n\n    Returns\n    -------\n    a : int\n        first returned value\n        single return\n    b : int, optional\n        second returned value\n        optional return\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_4():
    str_0 = '    Calculate the sum of two numbers.\n\n    Parameters\n    ----------\n    a : int\n        The first operand.\n    b : int\n        The second operand.\n\n    Returns\n    -------\n    int\n        The sum of the two operands.\n    '
    section_0 = module_0.Section(str_0, str_0)
    numpydoc_parser_0 = module_0.NumpydocParser()
    var_0 = numpydoc_parser_0.add_section(section_0)
    docstring_0 = module_0.parse(str_0)
    docstring_1 = module_1.Docstring()

def test_case_5():
    str_0 = 'Function that generate an automatic documentation of a module.\n\n    Parameters\n    ----------\n    module : module\n        module to document.\n    functions : list or tuple\n        functions to document, or None to document all functions.\n    classes : list or tuple\n        classes to document, or None to document all classes.\n    module_doc : string\n        documentation of the module, if None it will be retrieved from the\n        docstring of the module.\n    packagename : string\n        name of the package which contains the module, if None it will be\n        retrieved from the module.\n\n    Returns\n    -------\n    doc : Doc\n        instance with the documentation.\n    '
    docstring_0 = module_0.parse(str_0)
    str_1 = None
    docstring_1 = module_0.parse(str_1)

def test_case_6():
    str_0 = '<HY'
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'key\n    value\nkey2 : type\n    values can also span...\n    ... multiple lines'
    str_1 = 'Params'
    str_2 = 'param'
    k_v_section_0 = module_0._KVSection(str_1, str_2)
    iterable_0 = k_v_section_0.parse(str_0)
    var_0 = list(iterable_0)
    int_0 = 0
    var_1 = var_0[int_0]
    int_1 = 1
    var_2 = var_0[int_1]

def test_case_8():
    str_0 = '    Calculate the sum of two numbers.\n\n    Parameters\n    ----------\n    a : int\n        The first operand.\n    b : int\n        The second operand.\n\n    Returns\n    -------\n    int\n        The sum of the two operands.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    str_0 = '\n        This is the short description.\n        \n        This is the long description.\n        \n        Parameters\n        ----------\n        a : int\n            A parameter for the function.\n        b : str\n            Another parameter for the function.\n        \n        Returs\n        -------\n        dict\n            A dictionary with something.\n        \n        Raises\n        ------\n        TypeError\n            If something is wrong, this is raised.\n        ValueError\n            If something is wrong, this is raised.\n        \n        '
    docstring_0 = module_0.parse(str_0)

def test_case_10():
    str_0 = "\n    A function to display a message.\n\n    Parameters\n    ----------\n    msg : str\n        The message to be displayed.\n\n    Returns\n    -------\n    length : int\n        The length of the message.\n\n    Raises\n    ------\n    ValueError\n        If the message is an empty string.\n\n    See Also\n    --------\n    display_message2 : A more advanced function that adds a star to the front\n        of the message.\n\n    Examples\n    --------\n    >>> message='Hello'\n    >>> length = display_message(message)\n    >>> print(length)\n    5\n    "
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_11():
    str_0 = '\n        This is the short description.\n        \n        This is the long description.\n        \n        Parameters\n        ----------\n        a : int\n            A parameter for the function.\n        b : str\n            Another parameter for the function.\n        \n        Returns\n        -------\n        dict\n            A dictionary with something.\n        \n        Raises\n        ------\n        TypeError\n            If something is wrong, this is raised.\n        ValueError\n            If something is wrong, this is raised.\n        \n        '
    docstring_0 = module_0.parse(str_0)