# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    try:
        str_0 = '\n        This is the short description.\n        \n        This is the long description.\n        \n        Parameters\n        ----------\n        a : int\n            A parameter for the function.\n        b : str\n            Another parameter for the function.\n        \n        Returns\n        -------\n        dict\n            A dictionary with something.\n        \n        Raises\n        ------\n        TypeError\n            If something is wrong, this is raised.\n        ValueError\n            If something is wrong, this is raised.\n        \n        '
        docstring_0 = module_0.parse(str_0)
        str_1 = 'pf,T|[e^u,9|)3p['
        str_2 = 'i[q+fG^o}?OvX69+I[#'
        section_0 = module_0.Section(str_1, str_2)
        str_3 = '+>2q'
        str_4 = 'v,5~GX\x0b'
        str_5 = 'q^;=dh/O'
        deprecation_section_0 = module_0.DeprecationSection(str_4, str_5)
        iterable_0 = deprecation_section_0.parse(str_3)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Yield'
        deprecation_section_0 = module_0.DeprecationSection(str_0, str_0)
        str_1 = 'Attributes'
        param_section_0 = module_0.ParamSection(str_1, str_0)
        str_2 = ''
        str_3 = ',m5X:'
        iterable_0 = deprecation_section_0.parse(str_3)
        section_0 = module_0.Section(str_1, str_1)
        section_1 = module_0.Section(str_3, str_3)
        raises_section_0 = module_0.RaisesSection(str_2, str_3)
        str_4 = None
        iterable_1 = section_1.parse(str_4)
        str_5 = None
        iterable_2 = section_0.parse(str_2)
        str_6 = '%s'
        str_7 = 'HAsrdl%])P|zTH+@\\Y'
        section_2 = module_0.Section(str_6, str_7)
        str_8 = '6WP'
        sphinx_section_0 = module_0._SphinxSection(str_8, str_5)
        k_v_section_0 = module_0._KVSection(str_6, str_6)
        section_3 = module_0.Section(str_7, str_6)
        numpydoc_parser_0 = module_0.NumpydocParser()
        str_9 = 'v}0{\nO<8g[tl:s?GV'
        iterable_3 = deprecation_section_0.parse(str_9)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_3)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'HPZ\nuc\x0bpR>Wu'
        section_0 = module_0.Section(str_0, str_0)
        dict_0 = {str_0: section_0, str_0: section_0}
        numpydoc_parser_0 = module_0.NumpydocParser(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '    Calculate the sum of two numbers.\n\n    Parameters\n    ----------\n    a : int\n        The first operand.\n    b : int\n        The second operand.\n\n    Returns\n    -------\n    int\n        The sum of the two operands.\n    '
        str_1 = '|qdnrefI/5)f'
        str_2 = "Initialize self.\n\n        :param args: list of arguments. The exact content of this variable is\n                     dependent on the kind of docstring; it's used to distinguish between\n                     custom docstring meta information items.\n        :param description: associated docstring description.\n        "
        k_v_section_0 = module_0._KVSection(str_1, str_2)
        iterable_0 = k_v_section_0.parse(str_0)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
        docstring_0 = numpydoc_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '    Returns a list of the given size filled with a given value.\n    \n    Parameters\n    ----------\n    func : callable\n        The function to be executed on each item of the iterable.\n        Optional, defaults to None.\n    true_values : bool\n        The bool value to fill the list with. Optional, defaults to True.\n    *args:\n        The *args to pass to the function.\n    default : int\n        The default value used if the iterable is empty. Optional.\n    test: List[str], optional\n        A list of strs.\n    **kwargs:\n        The **kwargs to pass to the function.\n    '
        numpydoc_parser_0 = module_0.NumpydocParser()
        docstring_0 = numpydoc_parser_0.parse(str_0)
        var_0 = numpydoc_parser_0.arg_name
    except BaseException:
        pass