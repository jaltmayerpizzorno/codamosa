# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    int_0 = -846
    bool_0 = module_0.is_string(int_0)

def test_case_1():
    str_0 = ' XTqZb=P;,p'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)

def test_case_2():
    str_0 = 'iyrMt(e\x0b1e.p<'
    bool_0 = module_0.is_isbn_13(str_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_10()
    bool_2 = module_0.is_credit_card(i_s_b_n_checker_0, str_0)

def test_case_3():
    str_0 = '"ujhQ4r!bH'
    bool_0 = True
    bool_1 = module_0.is_isbn_13(str_0, bool_0)
    str_1 = 'Wv4p)fEe'
    bool_2 = module_0.is_number(str_1)

def test_case_4():
    str_0 = ':c-_x86lcpm'
    int_0 = module_0.words_count(str_0)
    bool_0 = module_0.is_ip_v6(int_0)
    bool_1 = True
    bool_2 = module_0.is_pangram(str_0)
    bool_3 = module_0.is_isbn(str_0, bool_1)
    bool_4 = module_0.is_isbn(str_0, bool_1)

def test_case_5():
    str_0 = 'Y:{Y"]azzlP'
    bool_0 = module_0.is_isbn_10(str_0)

def test_case_6():
    str_0 = "gxwYO|{'a"
    bool_0 = module_0.is_json(str_0)

def test_case_7():
    str_0 = '\n    Checks if the given string represents a valid ISBN (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn(\'9780312498580\') # returns true\n    >>> is_isbn(\'1506715214\') # returns true\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens ("-") in the string (default), false otherwise.\n    :return: True if valid ISBN (10 or 13), false otherwise.\n    '
    bool_0 = module_0.is_number(str_0)

def test_case_8():
    str_0 = '%:3KD\x0b"E|9in[\\\r'
    bool_0 = module_0.is_integer(str_0)

def test_case_9():
    bytes_0 = b'\xdd\x95+o\x1a\x18)\xf7I'
    bool_0 = module_0.is_pangram(bytes_0)
    str_0 = 'x'
    bool_1 = module_0.is_decimal(str_0)

def test_case_10():
    str_0 = 'r&ghU\\;2<kT]g'
    bool_0 = module_0.is_ip(str_0)
    bool_1 = module_0.is_isogram(str_0)
    bool_2 = module_0.is_url(bool_1)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_3 = i_s_b_n_checker_0.is_isbn_13()

def test_case_11():
    str_0 = '~O\n$Z`\\^qT\rf'
    bool_0 = module_0.is_email(str_0)

def test_case_12():
    bytes_0 = None
    bool_0 = module_0.is_isogram(bytes_0)
    list_0 = []
    str_0 = ';`K6o|d{DEN9]vkI(`e"'
    bool_1 = module_0.is_string(str_0)
    bool_2 = module_0.is_email(list_0)
    bytes_1 = b'Q\xa6T=\x0c"\xfdhq\t\xa8r\xd5P^'
    bool_3 = module_0.is_string(bytes_1)

def test_case_13():
    str_0 = "vXzusZ}EK>\t5L'~U\x0b<$$"
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_credit_card(str_0)
    bool_2 = module_0.is_isbn(str_0)
    bool_3 = module_0.is_full_string(str_0)
    bool_4 = module_0.is_camel_case(bool_1)

def test_case_14():
    bytes_0 = b'\xed\x8a\x83\xd5FS\xaa\x1cL\x15\x9a\xa3'
    bool_0 = module_0.is_camel_case(bytes_0)

def test_case_15():
    set_0 = None
    bool_0 = module_0.is_snake_case(set_0)

def test_case_16():
    str_0 = '^ue(N;_"GlT%ex'
    str_1 = ',MtmaFH\x0cvdYzh/l'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    bool_0 = i_s_b_n_checker_0.is_isbn_13()
    bool_1 = True
    bool_2 = module_0.is_isbn(str_0, bool_1)
    float_0 = -2284.0
    bool_3 = module_0.is_json(float_0)
    str_2 = '^fs\x0b^ 8NVGJ'
    bool_4 = module_0.is_ip(bool_3)
    bool_5 = module_0.is_isbn(str_2)
    bool_6 = module_0.is_uuid(bool_3)

def test_case_17():
    str_0 = "vXzusZ}EK>\t5L'~U\x0b<$$"
    float_0 = None
    bool_0 = module_0.is_full_string(float_0)
    str_1 = '*;1r/uu'
    str_2 = '<?,0``!C'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    bool_1 = i_s_b_n_checker_0.is_isbn_10()
    bool_2 = True
    bool_3 = module_0.is_uuid(bool_0, bool_2)
    bool_4 = module_0.is_credit_card(str_2)
    bool_5 = i_s_b_n_checker_0.is_isbn_10()
    str_3 = ''
    bool_6 = module_0.is_isogram(bool_1)
    bool_7 = module_0.is_email(bool_3)
    bool_8 = i_s_b_n_checker_0.is_isbn_10()
    bool_9 = i_s_b_n_checker_0.is_isbn_13()
    bool_10 = False
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_3, bool_10)
    bool_11 = i_s_b_n_checker_1.is_isbn_10()
    bool_12 = i_s_b_n_checker_1.is_isbn_10()
    bool_13 = module_0.is_palindrome(bool_5)
    bool_14 = module_0.is_credit_card(bool_5, str_1)
    bool_15 = module_0.is_ip(str_0)

def test_case_18():
    str_0 = '\n    Checks if the given string represents a valid ISBN (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn(\'9780312498580\') # returns true\n    >>> is_isbn(\'1506715214\') # returns true\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens ("-") in the string (default), false otherwise.\n    :return: True if valid ISBN (10 or 13), false otherwise.\n    '
    bool_0 = module_0.is_ip(str_0)
    bool_1 = module_0.is_number(str_0)

def test_case_19():
    str_0 = '.]6+*b#,Katv`i#$\nb'
    dict_0 = None
    bool_0 = module_0.is_snake_case(dict_0)
    bool_1 = module_0.is_ip(str_0)
    bool_2 = module_0.is_isbn_13(str_0)
    bool_3 = module_0.is_palindrome(str_0, bool_1)
    bool_4 = module_0.is_integer(str_0)

def test_case_20():
    str_0 = 'd{"name": "Peter"}'
    bool_0 = module_0.is_json(str_0)
    str_1 = '[1, 2, 3]'
    bool_1 = module_0.is_json(str_0)
    bool_2 = module_0.is_json(str_1)
    bool_3 = module_0.is_palindrome(bool_1, bool_0, bool_1)
    str_2 = '{nope}'
    bool_4 = module_0.is_json(str_2)

def test_case_21():
    bytes_0 = b'\xd1\xfa'
    bool_0 = module_0.is_pangram(bytes_0)

def test_case_22():
    str_0 = 'xy,O=B<\\\t4O`v?4tq\x0b'
    bool_0 = module_0.is_isbn_10(str_0)
    str_1 = "\n    Check if a string is a valid email.\n\n    Reference: https://tools.ietf.org/html/rfc3696#section-3\n\n    *Examples:*\n\n    >>> is_email('my.email@the-provider.com') # returns true\n    >>> is_email('@gmail.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if email, false otherwise.\n    "
    bool_1 = module_0.is_slug(bool_0)
    bool_2 = module_0.is_isogram(bool_0)
    int_0 = module_0.words_count(str_1)
    bool_3 = module_0.is_slug(str_0)
    bool_4 = module_0.is_ip_v4(bool_3)
    bool_5 = module_0.is_slug(bool_4)
    tuple_0 = ()
    bool_6 = module_0.is_palindrome(tuple_0, bool_3)
    list_0 = None
    bool_7 = module_0.is_credit_card(list_0)
    bool_8 = module_0.is_full_string(tuple_0)
    bool_9 = module_0.is_ip(tuple_0)

def test_case_23():
    str_0 = '"ujhQ4r!bH'
    bool_0 = True
    bool_1 = module_0.is_slug(bool_0)
    bool_2 = module_0.is_isbn_10(str_0)
    bool_3 = module_0.is_isbn_13(str_0, bool_0)
    str_1 = 'Wv4p)fEe'
    bool_4 = module_0.is_number(str_1)

def test_case_24():
    str_0 = "vXzusZ}EK>\t5L'~U\x0b<$$"
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_credit_card(str_0)
    bool_2 = module_0.is_isbn(str_0)
    bool_3 = module_0.is_full_string(str_0)
    bool_4 = module_0.contains_html(str_0)
    bool_5 = module_0.is_camel_case(bool_1)

def test_case_25():
    str_0 = 's{Anu{UpQl06'
    int_0 = module_0.words_count(str_0)

def test_case_26():
    str_0 = 'EZ'
    bool_0 = False
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_0)
    bool_1 = module_0.is_ip(i_s_b_n_checker_0)

def test_case_27():
    str_0 = '0.9'
    bool_0 = module_0.is_integer(str_0)
    bytes_0 = None
    dict_0 = {bytes_0: bytes_0}
    bool_1 = module_0.is_camel_case(str_0)
    bool_2 = False
    tuple_0 = (dict_0, dict_0, bool_2)
    bool_3 = module_0.is_isogram(bytes_0)
    bool_4 = module_0.is_uuid(bool_2)
    bool_5 = module_0.is_pangram(tuple_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_0)
    bool_6 = module_0.is_uuid(i_s_b_n_checker_0)
    bool_7 = module_0.is_isogram(bytes_0)
    str_1 = 'e'
    bool_8 = module_0.contains_html(str_1)

def test_case_28():
    str_0 = 'my.email@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_json(bool_0)
    str_1 = '[1, 2, 3]'
    bool_2 = module_0.is_json(str_1)
    str_2 = '{nope}'
    bool_3 = module_0.is_json(str_2)

def test_case_29():
    bool_0 = None
    bool_1 = module_0.is_palindrome(bool_0)
    str_0 = 'u:7.#R\\Nc'
    bool_2 = module_0.is_number(str_0)
    bool_3 = module_0.is_integer(str_0)
    bool_4 = module_0.is_isogram(bool_1)
    str_1 = '^'
    bool_5 = module_0.is_pangram(str_1)
    bool_6 = module_0.is_decimal(str_1)
    str_2 = '.uVtwh;@7R<`%}^1'
    str_3 = ''
    bool_7 = module_0.is_isogram(bool_3)
    bool_8 = module_0.is_email(bool_5)
    str_4 = 'k/^XUxUZ'
    bool_9 = True
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_4, bool_9)
    bool_10 = i_s_b_n_checker_0.is_isbn_10()
    bool_11 = i_s_b_n_checker_0.is_isbn_13()
    bool_12 = False
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_2, bool_12)
    bool_13 = i_s_b_n_checker_0.is_isbn_10()
    i_s_b_n_checker_2 = module_0.__ISBNChecker(str_1, bool_8)
    bool_14 = i_s_b_n_checker_2.is_isbn_10()
    str_5 = '5'
    bool_15 = module_0.is_decimal(str_5)
    bool_16 = module_0.is_url(str_2)
    bool_17 = module_0.is_ip(i_s_b_n_checker_0)
    bool_18 = i_s_b_n_checker_1.is_isbn_13()
    bool_19 = module_0.is_integer(str_5)
    bool_20 = module_0.is_ip(bool_10)
    str_6 = 'uqcG|'
    i_s_b_n_checker_3 = module_0.__ISBNChecker(str_6, bool_1)
    bool_21 = i_s_b_n_checker_0.is_isbn_13()
    bool_22 = module_0.is_ip_v4(bool_17)
    bool_23 = i_s_b_n_checker_1.is_isbn_13()
    bool_24 = module_0.is_camel_case(str_3)
    bool_25 = module_0.is_email(i_s_b_n_checker_2)

def test_case_30():
    str_0 = '9upE]sq#v3\r'
    int_0 = module_0.words_count(str_0)
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_isbn_10(str_0)
    str_1 = 'd|c;_l~e(]\x0cHQ\\{jsis'
    bool_2 = module_0.is_slug(int_0)
    str_2 = '\n    Remove html code contained into the given string.\n\n    *Examples:*\n\n    >>> strip_html(\'test: <a href="foo/bar">click here</a>\') # returns \'test: \'\n    >>> strip_html(\'test: <a href="foo/bar">click here</a>\', keep_tag_content=True) # returns \'test: click here\'\n\n    :param input_string: String to manipulate.\n    :type input_string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    '
    str_3 = 'AMERICAN_EXPRESS'
    bool_3 = module_0.is_integer(str_3)
    bool_4 = module_0.is_isbn(str_2)
    bool_5 = module_0.is_pangram(str_0)
    dict_0 = {bool_5: bool_2}
    bool_6 = module_0.is_credit_card(dict_0)
    bool_7 = module_0.is_ip(str_0)
    bool_8 = module_0.is_credit_card(str_2, str_3)
    bool_9 = module_0.is_full_string(str_1)
    bool_10 = module_0.is_ip(bool_9)

def test_case_31():
    str_0 = '9upE]sq#v3\r'
    int_0 = module_0.words_count(str_0)
    bool_0 = module_0.is_email(str_0)
    str_1 = ''
    bool_1 = module_0.is_slug(int_0)
    str_2 = '\n    Remove html code contained into the given string.\n\n    *Examples:*\n\n    >>> strip_html(\'test: <a href="foo/bar">click here</a>\') # returns \'test: \'\n    >>> strip_html(\'test: <a href="foo/bar">click here</a>\', keep_tag_content=True) # returns \'test: click here\'\n\n    :param input_string: String to manipulate.\n    :type input_string: str\n    :param keep_tag_content: True to preserve tag content, False to remove tag and its content too (default).\n    :type keep_tag_content: bool\n    :return: String with html removed.\n    '
    str_3 = "k 9]t'K#6-=qwc"
    bool_2 = module_0.is_integer(str_3)
    bool_3 = module_0.is_isbn(str_2)
    bool_4 = module_0.is_ip(bool_3)
    bool_5 = module_0.contains_html(str_2)
    bool_6 = module_0.is_snake_case(str_2)
    bool_7 = module_0.is_pangram(str_0)
    dict_0 = {bool_7: bool_1}
    bool_8 = module_0.is_credit_card(dict_0)
    bool_9 = module_0.is_ip(str_0)
    bool_10 = module_0.is_number(str_1)
    str_4 = '%mJdvaynj[z\n!-t0Va T'
    bool_11 = module_0.is_url(str_4)
    bool_12 = module_0.is_ip(bool_7)
    str_5 = '^5[1-5]\\d{14}$'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_5)
    bool_13 = i_s_b_n_checker_0.is_isbn_13()
    bool_14 = module_0.is_isbn(str_2, bool_6)
    bool_15 = i_s_b_n_checker_0.is_isbn_13()
    bool_16 = module_0.is_slug(bool_11)
    bool_17 = i_s_b_n_checker_0.is_isbn_13()
    bool_18 = module_0.is_json(bool_2)
    bool_19 = module_0.is_json(str_0)
    bool_20 = module_0.is_palindrome(str_3)
    bool_21 = module_0.is_email(str_2)

def test_case_32():
    str_0 = '978-0-306-40615-7'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = i_s_b_n_checker_0.is_isbn_13()
    str_1 = '978-0-306-40615-5'
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_1)
    bool_1 = i_s_b_n_checker_1.is_isbn_13()
    str_2 = '0-306-40615-6'
    i_s_b_n_checker_2 = module_0.__ISBNChecker(str_2)
    bool_2 = i_s_b_n_checker_2.is_isbn_13()
    str_3 = '978-1-61304-2'
    i_s_b_n_checker_3 = module_0.__ISBNChecker(str_3)
    bool_3 = i_s_b_n_checker_3.is_isbn_13()

def test_case_33():
    str_0 = 'Aleksandar@gmail.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = '.Aleksandar@gmail.com'
    bool_1 = module_0.is_email(str_1)
    str_2 = '@bit.edu'
    bool_2 = module_0.is_email(str_2)
    str_3 = 'A.A@bit.edu'
    bool_3 = module_0.is_email(str_3)
    str_4 = 'Aleksandar.A@bit.edu'
    bool_4 = module_0.is_email(str_4)
    str_5 = 'Aleksandar.A@bit.edu.rs'
    bool_5 = module_0.is_email(str_5)
    str_6 = 'Aleksandar.A@bit.edu.rs.'
    bool_6 = module_0.is_email(str_6)
    str_7 = '"Aleksandar.A@bit.edu.rs"@gmail.com'
    bool_7 = module_0.is_email(str_7)
    bool_8 = module_0.is_email(str_0)

def test_case_34():
    var_0 = None
    bool_0 = module_0.is_ip_v4(var_0)
    str_0 = 'nope'
    bool_1 = module_0.is_ip_v4(str_0)
    str_1 = '8.8.8.8'
    bool_2 = module_0.is_ip_v4(str_1)
    str_2 = '0.0.0.0'
    bool_3 = module_0.is_ip_v4(str_2)
    str_3 = '255.255.255.255'
    bool_4 = module_0.is_ip_v4(str_3)
    str_4 = '0.0.0.255'
    bool_5 = module_0.is_ip_v4(str_4)
    str_5 = '0.0.0.'
    bool_6 = module_0.is_ip_v4(str_5)
    bool_7 = module_0.is_json(bool_6)
    bool_8 = module_0.is_ip(bool_5)
    bool_9 = module_0.is_palindrome(str_1, bool_5)
    bool_10 = module_0.is_email(bool_2)

def test_case_35():
    str_0 = '[1, 2, 3]'
    bool_0 = module_0.is_json(str_0)
    str_1 = 'my.email\\\\@the-provider.com'
    bool_1 = module_0.is_email(str_1)

def test_case_36():
    str_0 = '=$6B'
    bool_0 = module_0.is_json(str_0)
    str_1 = '[1, 2, 3]'
    bool_1 = module_0.is_json(str_1)
    bool_2 = module_0.is_json(str_1)
    str_2 = '=-rse%4$dVf{'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2, bool_2)
    bool_3 = i_s_b_n_checker_0.is_isbn_10()
    bool_4 = module_0.is_ip(str_1)
    str_3 = 'is_ip_v4'
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_3, bool_0)
    bool_5 = i_s_b_n_checker_0.is_isbn_13()
    str_4 = ''
    bool_6 = module_0.is_isbn(str_4)
    bool_7 = i_s_b_n_checker_1.is_isbn_10()
    bool_8 = module_0.is_json(bool_7)
    bool_9 = False
    bool_10 = True
    bool_11 = module_0.is_palindrome(str_3, bool_9, bool_10)
    bool_12 = i_s_b_n_checker_0.is_isbn_10()
    bool_13 = module_0.is_email(i_s_b_n_checker_0)

def test_case_37():
    str_0 = '"very.(),:;<>[]\\".VERY.\\"very@\\ \\"very\\".unusual"@strange.example.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = 'joe@example.com'
    bool_1 = module_0.is_email(str_1)
    str_2 = 'joe'
    bool_2 = module_0.is_email(str_2)
    int_0 = 100
    bool_3 = module_0.is_email(int_0)

def test_case_38():
    str_0 = '5105105105105100'
    bool_0 = module_0.is_credit_card(str_0)
    str_1 = '5105105105105106'
    bool_1 = module_0.is_credit_card(str_1)
    str_2 = '378282246310005'
    bool_2 = module_0.is_credit_card(str_2)
    bool_3 = module_0.is_json(str_2)
    bool_4 = module_0.is_json(bool_2)

def test_case_39():
    str_0 = "{'test': 'is_json'}"
    bool_0 = module_0.is_json(str_0)

def test_case_40():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip(str_0)
    str_1 = '1.2.3'
    bool_1 = module_0.is_ip(str_1)

def test_case_41():
    str_0 = '250.200.100.75'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = '255.200.100.75'
    bool_1 = module_0.is_ip_v4(str_1)
    str_2 = 'nope'
    bool_2 = module_0.is_ip_v4(str_2)
    str_3 = '255.200.100.999'
    bool_3 = module_0.is_ip_v4(str_3)

def test_case_42():
    str_0 = '{"name": "Peter"}'
    str_1 = ';)%SM\r}'
    str_2 = '\\K5~&e%Yh&Kbk-+'
    list_0 = [str_1, str_0, str_2]
    bool_0 = module_0.is_url(str_0, list_0)
    bool_1 = module_0.is_url(str_1)
    str_3 = 'www.youtube.com'
    bool_2 = module_0.is_url(str_2)
    bool_3 = module_0.is_url(bool_0, list_0)
    bool_4 = module_0.is_url(bool_1)
    str_4 = 'http://ww.youtube.com/'
    bool_5 = module_0.is_url(str_4, list_0)
    str_5 = 'a9\x0bF[,EY'
    bool_6 = module_0.is_url(str_5)
    bool_7 = module_0.is_url(str_3)
    bool_8 = module_0.is_url(str_0)

def test_case_43():
    str_0 = 'my.email\\ @the-provider.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = 'my."email"@the-provider.com'
    bool_1 = module_0.is_email(str_1)
    str_2 = '"quoted"@gmail.com'
    bool_2 = module_0.is_email(str_2)
    str_3 = '"quoted@gmail.com'
    bool_3 = module_0.is_email(str_3)
    str_4 = 'my.email\\\\@the-provider.com'
    bool_4 = module_0.is_email(str_4)

def test_case_44():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip(str_0)
    str_1 = '2001:db8:85a3:0000:0000:8a2e:370:7334'
    bool_1 = module_0.is_ip(str_1)
    bool_2 = module_0.is_email(bool_1)
    str_2 = 'test.@test.test'
    bool_3 = module_0.is_email(str_2)
    bool_4 = module_0.is_ip_v6(str_2)
    bool_5 = module_0.is_email(bool_2)

def test_case_45():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip(str_0)
    str_1 = '2001:db8:85a3:0000:0000:8a2e:370:7334'
    bool_1 = module_0.is_ip(str_1)
    str_2 = '1.2.3'
    bool_2 = module_0.is_ip(str_2)

def test_case_46():
    str_0 = '0'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = i_s_b_n_checker_0.is_isbn_10()
    bool_1 = i_s_b_n_checker_0.is_isbn_13()
    bool_2 = i_s_b_n_checker_0.is_isbn_13()
    str_1 = '012345678'
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_1)
    bool_3 = i_s_b_n_checker_1.is_isbn_10()
    bool_4 = i_s_b_n_checker_1.is_isbn_13()
    str_2 = '0123456789'
    i_s_b_n_checker_2 = module_0.__ISBNChecker(str_2)
    bool_5 = i_s_b_n_checker_2.is_isbn_10()
    bool_6 = i_s_b_n_checker_2.is_isbn_13()
    i_s_b_n_checker_3 = module_0.__ISBNChecker(str_0)
    bool_7 = i_s_b_n_checker_3.is_isbn_10()

def test_case_47():
    str_0 = '9780312498580'
    bool_0 = module_0.is_isbn(str_0)
    bool_1 = False
    bool_2 = module_0.is_isbn(str_0, bool_1)
    str_1 = '1506715214'
    bool_3 = module_0.is_isbn(str_1)
    bool_4 = module_0.is_isbn(str_1, bool_1)
    str_2 = '978-0312498580'
    bool_5 = module_0.is_isbn(str_2)
    bool_6 = module_0.is_isbn(str_2, bool_1)
    str_3 = '150-6715214'
    bool_7 = module_0.is_isbn(str_3)
    bool_8 = module_0.is_isbn(str_3, bool_1)
    bool_9 = module_0.is_isbn(str_3, bool_1)
    bool_10 = module_0.is_isbn(str_3, bool_1)
    bool_11 = module_0.is_isbn(str_3, bool_1)

def test_case_48():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = 'nopz'
    bool_1 = module_0.is_email(bool_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    bool_2 = i_s_b_n_checker_0.is_isbn_10()
    bool_3 = module_0.is_email(bool_0)
    str_2 = 'jason..jason..jason@gmail.com'
    bool_4 = module_0.is_email(bool_0)
    bool_5 = module_0.is_email(str_2)