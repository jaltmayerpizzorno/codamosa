# Automatically generated by Pynguin.
import typesystem.fields as module_0
import decimal as module_1

def test_case_0():
    try:
        str_0 = ':Cs'
        field_0 = module_0.Field(description=str_0)
        union_0 = field_0.__or__(field_0)
        any_0 = union_0.validate(field_0)
    except BaseException:
        pass

def test_case_1():
    try:
        integer_0 = module_0.Integer()
        integer_1 = [integer_0]
        union_0 = module_0.Union(integer_1)
        any_0 = union_0.validate(integer_1)
    except BaseException:
        pass

def test_case_2():
    try:
        object_0 = module_0.Object()
        any_0 = object_0.validate(object_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '3Fc\x0c'
        integer_0 = module_0.Integer(exclusive_maximum=str_0, precision=str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        int_0 = 1
        none_type_0 = None
        object_0 = module_0.Object(additional_properties=bool_0, min_properties=int_0, max_properties=int_0, required=none_type_0)
        decimal_0 = module_1.Decimal()
        decimal_1 = module_0.Decimal(exclusive_maximum=decimal_0, multiple_of=decimal_0)
        any_0 = decimal_1.serialize(object_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Cannot convert field type '
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 3
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        date_0 = module_0.Date()
        dict_0 = None
        time_0 = module_0.Time()
        object_0 = module_0.Object(properties=date_0, pattern_properties=dict_0, property_names=time_0)
        bool_0 = True
        any_0 = object_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        field_0 = module_0.Field()
        array_0 = module_0.Array(field_0)
        any_0 = array_0.validate(array_0)
    except BaseException:
        pass

def test_case_9():
    try:
        validation_result_0 = None
        bool_0 = True
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0)
        any_0 = string_0.validate(validation_result_0)
        list_0 = []
        union_0 = module_0.Union(list_0)
        any_1 = union_0.validate(validation_result_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        integer_0 = module_0.Integer()
        integer_1 = [integer_0, integer_0, integer_0, integer_0]
        any_0 = module_0.Any()
        any_1 = any_0.validate(integer_0)
        union_0 = module_0.Union(integer_1)
        any_2 = union_0.validate(integer_0)
    except BaseException:
        pass

def test_case_11():
    try:
        date_time_0 = module_0.DateTime()
        str_0 = 'Gs  ^86D7H\x0bH#c_hbcW3'
        bool_0 = False
        field_0 = module_0.Field(allow_null=bool_0)
        any_0 = field_0.get_default_value()
        any_1 = field_0.get_default_value()
        const_0 = module_0.Const(any_1)
        union_0 = field_0.__or__(field_0)
        any_2 = const_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        date_time_0 = module_0.DateTime()
        str_0 = 'Gs  ^86D7H\x0bH#c_hbcW3'
        bool_0 = False
        field_0 = module_0.Field(allow_null=bool_0)
        any_0 = field_0.get_default_value()
        const_0 = module_0.Const(bool_0)
        union_0 = field_0.__or__(field_0)
        any_1 = const_0.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 263.19119
        const_0 = module_0.Const(float_0)
        any_0 = const_0.validate(float_0)
        number_0 = module_0.Number(exclusive_minimum=float_0, multiple_of=float_0)
        any_1 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = {}
        bool_0 = True
        any_0 = module_0.Any(default=dict_0, allow_null=bool_0)
        str_0 = ':{'
        field_0 = module_0.Field(description=str_0)
        dict_1 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        optional_0 = None
        object_0 = module_0.Object(pattern_properties=dict_1, additional_properties=field_0, required=optional_0, **dict_0)
        any_1 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_15():
    try:
        time_0 = module_0.Time()
        bool_0 = False
        str_0 = '4 L'
        bool_1 = None
        boolean_0 = module_0.Boolean(allow_null=bool_1)
        set_0 = {time_0, time_0, str_0}
        int_0 = 1634
        string_0 = module_0.String(allow_blank=bool_0, max_length=set_0, min_length=int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 263.08525675241987
        number_0 = module_0.Number(minimum=float_0, exclusive_minimum=float_0, exclusive_maximum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        date_time_0 = module_0.DateTime()
        int_0 = None
        float_0 = module_0.Float(maximum=date_time_0, exclusive_maximum=int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        date_0 = module_0.Date()
        boolean_0 = module_0.Boolean(default=date_0)
        str_0 = 'May not be null.'
        boolean_1 = module_0.Boolean(description=str_0)
        any_0 = boolean_1.validate(boolean_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -237
        bool_0 = False
        decimal_0 = module_1.Decimal()
        number_0 = module_0.Number(exclusive_minimum=decimal_0)
        str_0 = '6/dP|S^\nVK0Aw@_'
        field_0 = module_0.Field(description=str_0, default=str_0, allow_null=bool_0)
        array_0 = module_0.Array(number_0, field_0, int_0, int_0, bool_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 2
        var_0 = None
        bool_0 = False
        array_0 = module_0.Array(var_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        date_time_0 = module_0.DateTime(**dict_0)
        field_0 = module_0.Field(default=date_time_0)
        set_0 = {field_0, date_time_0, date_time_0}
        string_0 = module_0.String(**dict_0)
        array_0 = module_0.Array(date_time_0, field_0, set_0, string_0, **dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        decimal_0 = module_1.Decimal()
        int_0 = -2612
        array_0 = module_0.Array(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'AQ3#5\n\x0b!f>F\\'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(properties=dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        array_0 = None
        field_0 = module_0.Field()
        array_1 = module_0.Array(field_0)
        any_0 = array_1.validate(array_0)
    except BaseException:
        pass

def test_case_25():
    try:
        tuple_0 = ()
        array_0 = module_0.Array(tuple_0)
        object_0 = None
        any_0 = array_0.serialize(tuple_0)
        any_1 = object_0.validate(array_0)
    except BaseException:
        pass

def test_case_26():
    try:
        integer_0 = module_0.Integer()
        bool_0 = True
        array_0 = module_0.Array(integer_0, bool_0)
        int_0 = 2
        var_0 = [bool_0, int_0]
        any_0 = array_0.serialize(var_0)
        bool_1 = [bool_0, bool_0]
        any_1 = array_0.validate(bool_1)
    except BaseException:
        pass

def test_case_27():
    try:
        date_time_0 = module_0.DateTime()
        bool_0 = False
        field_0 = module_0.Field()
        int_0 = 1648
        string_0 = module_0.String(allow_blank=bool_0, min_length=int_0)
        bool_1 = field_0.has_default()
        str_0 = '[9h rn}\\|ZvuX%I$nl\\u'
        str_1 = 'S'
        float_0 = module_0.Float(minimum=int_0, maximum=int_0, exclusive_minimum=int_0, exclusive_maximum=int_0)
        field_1 = module_0.Field(title=str_0, description=str_1, default=float_0)
        choice_0 = module_0.Choice()
        str_2 = None
        field_2 = module_0.Field(title=str_2, default=field_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'AQ365\n\x0b5j!f>m\\'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, property_names=field_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = None
        field_0 = module_0.Field()
        boolean_0 = module_0.Boolean(description=str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 2017
        number_0 = module_0.Number(maximum=int_0, exclusive_minimum=int_0, exclusive_maximum=int_0, multiple_of=int_0)
        text_0 = module_0.Text()
        object_0 = module_0.Object(max_properties=int_0)
        any_0 = object_0.validate(text_0)
    except BaseException:
        pass

def test_case_31():
    try:
        dict_0 = {}
        str_0 = '0'
        object_0 = module_0.Object(required=str_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        float_0 = 262.0
        string_0 = module_0.String()
        any_0 = string_0.validate(float_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = ''
        bool_0 = True
        bool_1 = True
        int_0 = 0
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_1, max_length=int_0, pattern=str_0, format=str_0)
        string_1 = module_0.String(trim_whitespace=bool_0, min_length=string_0)
    except BaseException:
        pass

def test_case_34():
    try:
        dict_0 = {}
        optional_0 = None
        str_0 = ':Csp'
        field_0 = module_0.Field(description=str_0)
        field_1 = module_0.Field()
        date_time_0 = module_0.DateTime()
        str_1 = '9O"m\x0b9M/}^Jg'
        field_2 = module_0.Field(title=str_1, default=dict_0)
        object_0 = module_0.Object(additional_properties=field_2)
        bool_0 = True
        array_0 = module_0.Array(field_2, bool_0)
        any_0 = array_0.serialize(optional_0)
        any_1 = object_0.validate(any_0)
    except BaseException:
        pass

def test_case_35():
    try:
        object_0 = module_0.Object()
        object_1 = None
        any_0 = object_0.validate(object_1)
    except BaseException:
        pass

def test_case_36():
    try:
        date_time_0 = module_0.DateTime()
        bool_0 = False
        field_0 = module_0.Field()
        int_0 = 362
        string_0 = module_0.String(allow_blank=bool_0, min_length=int_0)
        str_0 = 'c'
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        tuple_0 = (int_0,)
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_0, property_names=field_0, required=tuple_0)
    except BaseException:
        pass

def test_case_37():
    try:
        float_0 = 261.771239
        number_0 = module_0.Number(exclusive_minimum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_38():
    try:
        float_0 = 263.19119
        number_0 = module_0.Number(exclusive_minimum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_39():
    try:
        float_0 = 262.115024355679
        str_0 = "4|=kPU{{'p.F\x0bBV\nv"
        number_0 = module_0.Number(minimum=float_0, precision=str_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_40():
    try:
        sequence_0 = None
        number_0 = module_0.Number()
        any_0 = number_0.validate(sequence_0)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 318
        field_0 = module_0.Field()
        str_0 = 'n#'
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'AQ365\n\x0b5j\t%>m\\'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        int_0 = -59
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, additional_properties=field_0, min_properties=int_0, max_properties=int_0)
        any_0 = field_0.serialize(field_0)
        any_1 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = -1020
        bool_0 = False
        dict_0 = {}
        choice_0 = module_0.Choice(**dict_0)
        string_0 = module_0.String(allow_blank=bool_0, max_length=int_0, format=choice_0, **dict_0)
    except BaseException:
        pass

def test_case_44():
    try:
        optional_0 = None
        string_0 = module_0.String(max_length=optional_0)
        const_0 = module_0.Const(string_0)
        str_0 = '_g/i,'
        any_0 = string_0.serialize(optional_0)
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        bool_1 = field_0.has_default()
        object_0 = module_0.Object(min_properties=str_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '(#'
        float_0 = module_0.Float(minimum=str_0)
    except BaseException:
        pass

def test_case_46():
    try:
        date_0 = module_0.Date()
        bool_0 = True
        int_0 = -449
        number_0 = module_0.Number(maximum=int_0)
        any_0 = number_0.validate(date_0, strict=bool_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = '[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
        field_0 = module_0.Field(title=str_0, default=str_0)
        list_0 = None
        bool_0 = False
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(list_0)
    except BaseException:
        pass

def test_case_48():
    try:
        float_0 = 263.191185662785
        str_0 = "4|=kPU{{'p.F\x0bBV\nv"
        number_0 = module_0.Number(minimum=float_0, precision=str_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_49():
    try:
        dict_0 = {}
        str_0 = ':Cs'
        field_0 = module_0.Field(description=str_0)
        dict_1 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(additional_properties=field_0, **dict_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = ':Csp'
        field_0 = module_0.Field(description=str_0)
        field_1 = module_0.Field()
        str_1 = 'Si\n'
        dict_0 = {str_0: field_0, str_0: field_1, str_1: field_1}
        date_time_0 = module_0.DateTime()
        union_0 = field_1.__or__(field_1)
        object_0 = module_0.Object(pattern_properties=dict_0, max_properties=union_0)
    except BaseException:
        pass

def test_case_51():
    try:
        validation_result_0 = None
        bool_0 = False
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0)
        any_0 = string_0.validate(validation_result_0)
    except BaseException:
        pass

def test_case_52():
    try:
        float_0 = 261.771
        number_0 = module_0.Number(maximum=float_0, exclusive_maximum=float_0)
        bool_0 = True
        any_0 = number_0.validate(float_0, strict=bool_0)
    except BaseException:
        pass

def test_case_53():
    try:
        dict_0 = {}
        int_0 = 2158
        object_0 = module_0.Object(min_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_54():
    try:
        dict_0 = {}
        str_0 = ':{'
        field_0 = module_0.Field(description=str_0)
        dict_1 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        optional_0 = None
        object_0 = module_0.Object(pattern_properties=dict_1, additional_properties=field_0, required=optional_0, **dict_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_55():
    try:
        time_0 = module_0.Time()
        bool_0 = True
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(time_0, strict=bool_0)
    except BaseException:
        pass

def test_case_56():
    try:
        validation_result_0 = None
        bool_0 = True
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0)
        any_0 = string_0.validate(validation_result_0)
        bool_1 = True
        field_0 = module_0.Field(allow_null=bool_1)
        list_0 = [field_0, field_0]
        const_0 = module_0.Const(string_0)
        union_0 = module_0.Union(list_0)
        dict_0 = {}
        string_1 = module_0.String(pattern=union_0, format=dict_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = '#ZkpEV$v*"bgDc@T'
        float_0 = module_0.Float(exclusive_minimum=str_0, precision=str_0)
    except BaseException:
        pass

def test_case_58():
    try:
        integer_0 = module_0.Integer()
        bool_0 = True
        array_0 = module_0.Array(integer_0, bool_0)
        bool_1 = [bool_0, bool_0]
        any_0 = array_0.validate(bool_1)
    except BaseException:
        pass

def test_case_59():
    try:
        int_0 = -430
        float_0 = 261.771239
        number_0 = module_0.Number(maximum=int_0, multiple_of=int_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_60():
    try:
        validation_result_0 = None
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(validation_result_0)
    except BaseException:
        pass

def test_case_61():
    try:
        any_0 = module_0.Any()
        dict_0 = {}
        union_0 = None
        bool_0 = True
        field_0 = module_0.Field(default=any_0, allow_null=bool_0)
        str_0 = 'a06cF|54`Uvf%"e*\\{l'
        field_1 = module_0.Field(title=str_0)
        union_1 = field_1.__or__(field_0)
        any_1 = union_1.validate(union_0)
        string_0 = module_0.String(**dict_0)
        field_2 = module_0.Field()
        int_0 = -1888
        optional_0 = None
        object_0 = module_0.Object(max_properties=int_0, required=optional_0)
        any_2 = object_0.validate(optional_0)
    except BaseException:
        pass

def test_case_62():
    try:
        str_0 = None
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0)
    except BaseException:
        pass

def test_case_63():
    try:
        dict_0 = {}
        str_0 = "pA#O'aE|J$i\nHWV:iR"
        field_0 = module_0.Field(description=str_0)
        object_0 = module_0.Object(additional_properties=field_0, **dict_0)
        list_0 = []
        decimal_0 = module_1.Decimal(*list_0)
        number_0 = module_0.Number(exclusive_minimum=decimal_0, multiple_of=decimal_0, **dict_0)
        number_1 = module_0.Number(precision=str_0, multiple_of=number_0, **dict_0)
    except BaseException:
        pass

def test_case_64():
    try:
        float_0 = 261.771239
        int_0 = -338
        number_0 = module_0.Number(multiple_of=float_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_65():
    try:
        array_0 = None
        field_0 = module_0.Field(default=array_0)
        str_0 = '[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
        field_1 = module_0.Field(title=str_0, default=str_0)
        union_0 = field_1.__or__(field_0)
        list_0 = None
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(list_0)
        integer_0 = module_0.Integer()
        integer_1 = [integer_0, integer_0]
        union_1 = module_0.Union(integer_1)
        any_1 = union_1.validate(integer_1)
    except BaseException:
        pass

def test_case_66():
    try:
        float_0 = 261.771239
        int_0 = -339
        number_0 = module_0.Number(multiple_of=float_0)
        number_1 = module_0.Number(minimum=float_0, exclusive_minimum=float_0)
        any_0 = number_1.validate(int_0)
    except BaseException:
        pass

def test_case_67():
    try:
        dict_0 = {}
        str_0 = 'Must be less than {exclusive_maximum}.'
        field_0 = module_0.Field(description=str_0)
        object_0 = module_0.Object(additional_properties=field_0, **dict_0)
        any_0 = object_0.validate(dict_0)
        str_1 = None
        dict_1 = {str_0: dict_0, str_0: object_0, str_0: any_0, str_1: str_0}
        any_1 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_68():
    try:
        dict_0 = {}
        string_0 = module_0.String()
        any_0 = string_0.serialize(dict_0)
        optional_0 = None
        str_0 = ":'qD{?b$32|"
        field_0 = module_0.Field(default=str_0)
        dict_1 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        int_0 = -4444
        object_0 = module_0.Object(properties=dict_1, min_properties=int_0)
        any_1 = object_0.validate(dict_0)
        object_1 = module_0.Object(min_properties=optional_0, required=str_0, **dict_0)
        object_2 = module_0.Object()
        bool_0 = True
        any_2 = object_1.validate(object_2, strict=bool_0)
    except BaseException:
        pass

def test_case_69():
    try:
        dict_0 = {}
        int_0 = -430
        choice_0 = module_0.Choice()
        number_0 = module_0.Number(maximum=int_0, exclusive_minimum=int_0, exclusive_maximum=int_0, precision=choice_0)
        const_0 = module_0.Const(choice_0)
        set_0 = {number_0}
        tuple_0 = (set_0,)
        bool_0 = True
        array_0 = module_0.Array(tuple_0, bool_0, **dict_0)
    except BaseException:
        pass

def test_case_70():
    try:
        dict_0 = {}
        str_0 = '$Bvzjb\t4rAO=,Lr'
        field_0 = module_0.Field(description=str_0)
        array_0 = module_0.Array()
        const_0 = module_0.Const(field_0)
        list_0 = [const_0]
        array_1 = module_0.Array(list_0, **dict_0)
        any_0 = array_1.validate(const_0)
    except BaseException:
        pass

def test_case_71():
    try:
        float_0 = 261.771239
        sequence_0 = None
        number_0 = module_0.Number(multiple_of=float_0)
        str_0 = '(err\rr='
        choice_0 = module_0.Choice(choices=str_0)
        str_1 = 'CD_TwVRg'
        any_0 = number_0.validate(float_0)
        str_2 = 'v{v"!ZN'
        field_0 = module_0.Field(title=str_2)
        str_3 = None
        str_4 = ':C'
        dict_0 = {str_0: field_0, str_3: field_0, str_4: field_0, str_1: field_0}
        list_0 = [field_0, field_0]
        union_0 = module_0.Union(list_0)
        int_0 = -1400
        object_0 = module_0.Object(properties=dict_0, property_names=field_0, min_properties=union_0, max_properties=int_0, required=sequence_0)
    except BaseException:
        pass

def test_case_72():
    try:
        dict_0 = {}
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        int_0 = -338
        object_0 = module_0.Object(additional_properties=field_0, property_names=field_0, min_properties=bool_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_73():
    try:
        str_0 = ':C'
        str_1 = 'D.R'
        field_0 = module_0.Field(description=str_1)
        list_0 = [str_0]
        bool_0 = True
        object_0 = module_0.Object(properties=list_0, additional_properties=bool_0)
    except BaseException:
        pass

def test_case_74():
    try:
        dict_0 = {}
        str_0 = '$:{'
        field_0 = module_0.Field(description=str_0)
        dict_1 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        optional_0 = None
        object_0 = module_0.Object(pattern_properties=dict_1, additional_properties=field_0, required=optional_0, **dict_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_75():
    try:
        float_0 = 261.771239
        sequence_0 = None
        number_0 = module_0.Number(multiple_of=float_0)
        str_0 = 'ZXQN1[-gMArH^f\x0b+S+i'
        str_1 = "<Kc'l.j`%fqI)"
        dict_0 = {str_0: sequence_0, str_1: str_0}
        object_0 = module_0.Object(pattern_properties=dict_0, required=sequence_0)
    except BaseException:
        pass

def test_case_76():
    try:
        str_0 = ''
        number_0 = module_0.Number()
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_77():
    try:
        str_0 = 'test'
        boolean_0 = module_0.Boolean()
        boolean_1 = {str_0: boolean_0}
        object_0 = module_0.Object(properties=boolean_1)
        str_1 = {str_0: str_0}
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_78():
    try:
        str_0 = ''
        string_0 = module_0.String()
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_79():
    try:
        decimal_0 = module_1.Decimal()
        float_0 = -3495.69
        float_1 = module_0.Float(maximum=decimal_0, exclusive_minimum=float_0, exclusive_maximum=decimal_0)
        dict_0 = {}
        bytes_0 = b'|r\xc7<\x00\n\xd3\x18\xec\x97'
        object_0 = module_0.Object(properties=dict_0, additional_properties=bytes_0)
    except BaseException:
        pass

def test_case_80():
    try:
        str_0 = '%Y-%m-%dT%H:%M:%S'
        str_1 = 'datetime'
        string_0 = module_0.String(format=str_1)
        any_0 = string_0.serialize(str_0)
    except BaseException:
        pass

def test_case_81():
    try:
        str_0 = 'name'
        str_1 = 'tom'
        text_0 = module_0.Text()
        object_0 = module_0.Object(properties=text_0)
        str_2 = 'peter'
        text_1 = module_0.Text()
        text_2 = {str_0: text_1}
        object_1 = module_0.Object(properties=text_2)
        object_2 = [object_0, object_1]
        union_0 = module_0.Union(object_2)
        any_0 = union_0.serialize(text_0)
        str_3 = {str_0: str_2}
        any_1 = union_0.validate(str_3)
        str_4 = 'name'
        str_5 = 'susan'
        str_6 = {str_4: str_5}
        any_2 = union_0.validate(str_6)
        str_7 = {union_0: object_2, str_4: str_5, str_4: object_1}
        any_3 = union_0.validate(str_7)
    except BaseException:
        pass

def test_case_82():
    try:
        str_0 = 'tom'
        text_0 = module_0.Text()
        object_0 = module_0.Object(properties=text_0)
        object_1 = [object_0, object_0]
        union_0 = module_0.Union(object_1)
        str_1 = 'name'
        str_2 = 'susan'
        str_3 = {str_1: str_2}
        any_0 = union_0.validate(str_3)
        str_4 = {union_0: object_1, str_1: str_2, str_1: object_1}
        any_1 = object_0.validate(str_4)
    except BaseException:
        pass

def test_case_83():
    try:
        string_0 = module_0.String()
        integer_0 = module_0.Integer()
        var_0 = [string_0, integer_0]
        union_0 = module_0.Union(var_0)
        str_0 = 'string'
        any_0 = union_0.validate(str_0)
        any_1 = string_0.serialize(str_0)
        float_0 = 1776.36369
        any_2 = union_0.validate(float_0)
    except BaseException:
        pass

def test_case_84():
    try:
        int_0 = 4
        string_0 = module_0.String(max_length=int_0)
        str_0 = 'abcde'
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_85():
    try:
        integer_0 = module_0.Integer()
        bool_0 = True
        array_0 = module_0.Array(integer_0, bool_0)
        int_0 = 2
        var_0 = [bool_0, int_0]
        any_0 = array_0.validate(var_0)
    except BaseException:
        pass

def test_case_86():
    try:
        int_0 = 4
        string_0 = module_0.String(max_length=int_0)
        str_0 = 'abc'
        any_0 = string_0.validate(str_0)
        str_1 = 'abcde'
        any_1 = string_0.validate(str_1)
    except BaseException:
        pass

def test_case_87():
    try:
        int_0 = 4
        string_0 = module_0.String(max_length=int_0)
        int_1 = 5
        string_1 = module_0.String(min_length=int_1)
        str_0 = '^[0-9]\\d*$'
        string_2 = module_0.String(pattern=str_0)
        str_1 = '12abc'
        any_0 = string_2.validate(str_1)
    except BaseException:
        pass

def test_case_88():
    try:
        int_0 = 25
        string_0 = module_0.String(min_length=int_0)
        str_0 = 'rIg\x0bP";4j'
        field_0 = module_0.Field(description=str_0)
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        str_1 = 'b-'
        any_0 = string_0.validate(str_1)
    except BaseException:
        pass

def test_case_89():
    try:
        string_0 = module_0.String()
        integer_0 = module_0.Integer()
        number_0 = module_0.Number()
        var_0 = [string_0, integer_0, number_0]
        array_0 = module_0.Array(var_0)
        int_0 = 3
        var_1 = [int_0]
        any_0 = array_0.serialize(var_1)
        any_1 = array_0.validate(var_1)
    except BaseException:
        pass