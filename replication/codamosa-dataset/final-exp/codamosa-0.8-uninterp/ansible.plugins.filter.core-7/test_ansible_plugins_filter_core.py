# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 9000
    var_0 = module_0.to_yaml(int_0)

def test_case_2():
    str_0 = 'doc'
    var_0 = module_0.to_bool(str_0)
    bytes_0 = b'\x99"\xe1\\9'
    var_1 = module_0.to_nice_yaml(bytes_0)

def test_case_3():
    bool_0 = True
    list_0 = []
    filter_module_0 = module_0.FilterModule()
    var_0 = module_0.mandatory(filter_module_0)
    var_1 = module_0.to_nice_json(list_0)
    set_0 = {bool_0}
    var_2 = module_0.flatten(set_0)
    var_3 = module_0.randomize_list(set_0)

def test_case_4():
    dict_0 = None
    var_0 = module_0.to_bool(dict_0)

def test_case_5():
    bytes_0 = b't\x06m'
    var_0 = module_0.to_bool(bytes_0)

def test_case_6():
    str_0 = 'Z'
    var_0 = module_0.quote(str_0)

def test_case_7():
    str_0 = '/etc/*.conf*'
    var_0 = module_0.fileglob(str_0)

def test_case_8():
    list_0 = []
    var_0 = module_0.regex_replace(list_0)

def test_case_9():
    str_0 = 'Hello wL*l'
    var_0 = module_0.regex_search(str_0, str_0)

def test_case_10():
    filter_module_0 = module_0.FilterModule()
    bytes_0 = b'\x15\x0b\x82@\xd8'
    tuple_0 = None
    var_0 = module_0.ternary(filter_module_0, bytes_0, tuple_0)
    bytes_1 = b'\xa3\x1b\xdc\x96\xd9B\xf0\xe9z\xb4'
    var_1 = module_0.b64encode(bytes_1)

def test_case_11():
    bool_0 = False
    var_0 = module_0.from_yaml_all(bool_0)

def test_case_12():
    filter_module_0 = module_0.FilterModule()
    var_0 = module_0.randomize_list(filter_module_0)

def test_case_13():
    bool_0 = True
    set_0 = {bool_0}
    var_0 = module_0.randomize_list(set_0)

def test_case_14():
    int_0 = -3467
    var_0 = module_0.mandatory(int_0)

def test_case_15():
    str_0 = ' -'
    var_0 = module_0.regex_search(str_0, str_0)
    var_1 = module_0.combine()

def test_case_16():
    list_0 = []
    float_0 = -2119.6
    list_1 = [list_0, list_0, list_0, float_0]
    var_0 = module_0.combine(*list_1)
    str_0 = '\\@'
    var_1 = module_0.regex_search(str_0, str_0, *list_0)
    str_1 = None
    list_2 = [list_0, str_1, str_1]
    str_2 = 'D3Tqh3d H~?'
    filter_module_0 = module_0.FilterModule()
    var_2 = module_0.regex_replace(list_2, str_2)
    var_3 = filter_module_0.filters()
    int_0 = 20
    var_4 = module_0.randomize_list(int_0)

def test_case_17():
    str_0 = '}%U\n)K>/[j{6e5tdOh'
    var_0 = module_0.fileglob(str_0)
    dict_0 = {}
    var_1 = module_0.b64decode(dict_0)

def test_case_18():
    bool_0 = True
    set_0 = {bool_0}
    var_0 = module_0.flatten(set_0)
    var_1 = module_0.randomize_list(set_0)

def test_case_19():
    tuple_0 = ()
    int_0 = 8
    str_0 = 's@d\r'
    dict_0 = {tuple_0: int_0, tuple_0: str_0}
    var_0 = module_0.rand(dict_0, int_0)

def test_case_20():
    str_0 = 'io`r$'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.comment(str_0, **dict_0)

def test_case_21():
    str_0 = 'foo[bar]baz'
    var_0 = module_0.regex_escape(str_0)
    str_1 = 'posix_basic'
    var_1 = module_0.regex_escape(str_0, str_1)

def test_case_22():
    float_0 = None
    var_0 = module_0.mandatory(float_0)
    var_1 = module_0.combine()
    var_2 = module_0.from_yaml_all(var_1)
    list_0 = []
    set_0 = None
    var_3 = module_0.subelements(list_0, list_0, set_0)

def test_case_23():
    str_0 = '[P&|Axc1n\n'
    bytes_0 = b'\xe8\xac\x1d\x05\xf3\x1e\xffgz\x03\xba'
    dict_0 = {str_0: bytes_0}
    var_0 = module_0.dict_to_list_of_dict_key_value_elements(dict_0)

def test_case_24():
    str_0 = ' -'
    var_0 = module_0.regex_search(str_0, str_0)

def test_case_25():
    str_0 = '2\tb44$&"VE E\x0c:V^GBTi'
    var_0 = module_0.to_bool(str_0)
    str_1 = None
    var_1 = module_0.path_join(str_0)
    var_2 = module_0.ternary(str_1, str_0, str_1)
    var_3 = module_0.mandatory(str_0)

def test_case_26():
    list_0 = []
    float_0 = -2119.6
    list_1 = [float_0, list_0, float_0]
    str_0 = '\\@'
    var_0 = module_0.regex_search(str_0, str_0, *list_0)
    str_1 = 'D3Tqh3d H~?'
    filter_module_0 = module_0.FilterModule()
    var_1 = module_0.mandatory(list_0)
    var_2 = module_0.regex_replace(list_1, str_1)
    var_3 = module_0.flatten(list_1)

def test_case_27():
    int_0 = 1
    var_0 = module_0.to_bool(int_0)
    bool_0 = False
    complex_0 = None
    dict_0 = None
    tuple_0 = (dict_0,)
    str_0 = 'XOj&!k\n|b\n,AEa'
    var_1 = module_0.ternary(bool_0, complex_0, tuple_0, str_0)

def test_case_28():
    str_0 = ''
    str_1 = '^.+$'
    str_2 = '\\g<0>'
    bool_0 = True
    var_0 = module_0.regex_replace(str_0, str_1, str_2, bool_0, bool_0)
    str_3 = 'foo'
    var_1 = module_0.regex_replace(str_3, str_0, str_0, bool_0, bool_0)

def test_case_29():
    str_0 = 'My text'
    var_0 = module_0.comment(str_0)
    var_1 = print(var_0)
    str_1 = 'erlang'
    var_2 = module_0.comment(str_0, str_1)
    var_3 = print(var_2)
    str_2 = 'c'
    var_4 = module_0.comment(str_0, str_2)
    var_5 = print(var_4)
    str_3 = 'cblock'
    var_6 = module_0.comment(str_0, str_3)
    var_7 = print(var_6)
    str_4 = 'xml'
    var_8 = module_0.comment(str_0, str_4)
    var_9 = print(var_8)
    str_5 = '\n\r'
    var_10 = module_0.comment(str_0, str_2)
    var_11 = print(var_10)
    str_6 = '-- '
    var_12 = module_0.comment(str_0, str_2)
    var_13 = print(var_12)
    str_7 = ''
    var_14 = module_0.comment(str_0, str_2)
    var_15 = print(var_14)
    str_8 = ' --'
    var_16 = module_0.comment(str_0, str_2)
    var_17 = print(var_16)
    str_9 = '== '
    var_18 = module_0.comment(str_0, str_2)
    var_19 = print(var_18)
    var_20 = module_0.comment(str_0, str_2)
    var_21 = print(var_20)

def test_case_30():
    bool_0 = True
    int_0 = 2
    var_0 = module_0.ternary(bool_0, bool_0, int_0)
    bool_1 = False
    var_1 = module_0.ternary(bool_1, bool_0, int_0)
    var_2 = None
    int_1 = 3
    var_3 = module_0.ternary(var_2, bool_0, int_0, int_1)
    str_0 = 'foo'
    var_4 = module_0.ternary(str_0, bool_0, int_0)
    str_1 = ''
    var_5 = module_0.ternary(str_1, bool_0, int_0)
    var_6 = module_0.ternary(str_1, bool_0, int_0, int_1)