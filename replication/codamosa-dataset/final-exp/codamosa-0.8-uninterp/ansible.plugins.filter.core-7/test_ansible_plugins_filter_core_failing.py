# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0
import ansible.template as module_1

def test_case_0():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.to_nice_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.b64encode(filter_module_0)
        var_1 = filter_module_0.filters()
        float_0 = -3988.4549
        list_0 = [filter_module_0, filter_module_0]
        var_2 = module_0.to_json(float_0, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'm5XR@D\x0c1PTO FPn25U'
        var_0 = module_0.comment(str_0)
        int_0 = 399
        var_1 = module_0.from_yaml_all(int_0)
        str_1 = '82prL5#'
        list_0 = [var_0]
        var_2 = module_0.to_datetime(list_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1591
        var_0 = module_0.strftime(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        str_0 = 'Ye\nz*kA{.'
        var_0 = module_0.strftime(bool_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 550
        set_0 = set()
        var_0 = module_0.randomize_list(set_0)
        filter_module_0 = None
        var_1 = module_0.quote(filter_module_0)
        bytes_0 = b'\x19\xd7\xabx'
        var_2 = module_0.regex_escape(bytes_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        filter_module_0 = module_0.FilterModule()
        list_0 = [filter_module_0]
        var_0 = module_0.regex_findall(filter_module_0, list_0, filter_module_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = None
        bool_0 = True
        var_0 = module_0.ternary(tuple_0, bool_0, bool_0)
        filter_module_0 = None
        var_1 = module_0.comment(filter_module_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'pxsix_bas\rc'
        var_0 = module_0.regex_escape(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        list_0 = [filter_module_0, filter_module_0]
        bytes_0 = None
        var_1 = module_0.from_yaml(bytes_0)
        int_0 = 2600
        var_2 = module_0.randomize_list(filter_module_0, int_0)
        var_3 = module_0.to_yaml(filter_module_0, *list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        var_0 = module_0.combine()
        str_0 = 'Jzkq'
        var_1 = module_0.from_yaml_all(str_0)
        bool_1 = False
        list_0 = [bool_0, bool_1]
        list_1 = []
        set_0 = None
        var_2 = module_0.subelements(list_0, list_1, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        filter_module_0 = None
        var_0 = module_0.get_hash(filter_module_0, filter_module_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ' -'
        float_0 = -992.8
        bool_0 = True
        var_0 = module_0.get_hash(bool_0)
        list_0 = [str_0, float_0]
        var_1 = module_0.regex_search(float_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        str_0 = '*L[3Jq2d?ON9a'
        list_0 = []
        var_0 = module_0.get_encrypted_password(bool_0, str_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x12\xa3\x15i\x02B\xcd\xd0X\xc3@h\xb6\x89\xe3'
        var_0 = module_0.to_uuid(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ' -'
        float_0 = -992.8
        list_0 = [float_0, str_0, str_0, str_0]
        var_0 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = None
        var_0 = module_0.comment(bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        set_0 = set()
        var_0 = module_0.from_yaml_all(set_0)
        float_0 = None
        list_0 = [set_0, float_0, var_0, var_0]
        float_1 = 2375.452
        tuple_0 = (float_1,)
        bytes_0 = b'\xd9\x15&\x9c%\xe9\xed\xd0\xbf\xf6|y\x0eV'
        var_1 = module_0.do_groupby(list_0, tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = None
        list_0 = []
        bool_0 = True
        set_0 = {bool_0, dict_0}
        var_0 = module_0.subelements(list_0, bool_0, set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = None
        list_0 = [int_0]
        set_0 = None
        var_0 = module_0.subelements(list_0, list_0, set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = -2066
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = None
        var_0 = module_0.to_json(float_0)
        str_0 = 'This one looks easy to fix. YAML thought it was looking for the start of a\nhash/dictionary and was confused to see a second "{". Most likely this was\nmeant to be an ansible template evaluation instead, so we have to give the\nparser a small hint that we wanted a string instead. The solution here is to\njust quote the entire value.\n\nFor instance, if the original line was:\n\n    app_path: {{ base_path }}/foo\n\nIt should be written as:\n\n    app_path: "{{ base_path }}/foo"\n'
        bytes_0 = b"f\xf8\xb5\xc5'K\x12\xd4\x9b"
        tuple_0 = (float_0, str_0, str_0, bytes_0)
        var_1 = module_0.path_join(tuple_0)
    except BaseException:
        pass

def test_case_22():
    try:
        dict_0 = None
        var_0 = module_0.path_join(dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'python'
        var_0 = module_0.path_join(str_0)
        str_1 = 'NAME,UUID'
        float_0 = -992.8
        int_0 = 191
        var_1 = module_0.regex_escape(int_0)
        list_0 = [str_1, float_0]
        var_2 = module_0.regex_search(float_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        list_0 = [filter_module_0, filter_module_0]
        var_1 = module_0.to_yaml(filter_module_0, *list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        list_0 = None
        bool_0 = True
        var_0 = module_0.to_bool(bool_0)
        filter_module_0 = module_0.FilterModule(*list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = 1000.0
        str_0 = 'qY.7#bSP4J(1\t'
        dict_0 = {str_0: str_0, float_0: float_0, float_0: float_0, str_0: float_0}
        var_0 = module_0.regex_findall(float_0, dict_0)
    except BaseException:
        pass

def test_case_27():
    try:
        dict_0 = None
        bool_0 = True
        var_0 = module_0.quote(bool_0)
        str_0 = 'dead but '
        int_0 = -4750
        tuple_0 = (str_0, int_0, str_0, dict_0)
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.get_encrypted_password(dict_0, tuple_0, filter_module_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = -3310
        float_0 = -4701.35
        bool_0 = True
        dict_0 = {int_0: float_0, float_0: float_0, int_0: bool_0}
        filter_module_0 = module_0.FilterModule()
        bool_1 = False
        dict_1 = {}
        str_0 = '|PDIV.<2uGWR[rkJHg.'
        str_1 = 'K8`{(=ITz7'
        dict_2 = {str_0: filter_module_0, str_1: bool_1}
        list_0 = [bool_1, dict_1, bool_0, dict_2]
        int_1 = 1012
        bool_2 = False
        list_1 = [str_0, bool_2, bool_2]
        var_0 = module_0.rand(dict_0, filter_module_0, list_0, int_1, list_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = ' -'
        float_0 = -992.8
        list_0 = [str_0, float_0]
        var_0 = module_0.regex_search(float_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'm5XR@D\x0c1PTO Pn25U'
        var_0 = module_0.comment(str_0)
        list_0 = None
        var_1 = module_0.subelements(list_0, list_0)
    except BaseException:
        pass

def test_case_31():
    try:
        tuple_0 = ()
        set_0 = set()
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(tuple_0, set_0)
        float_0 = 2526.09
        str_0 = 'bJ#=IE\t_N(5^'
        var_1 = module_0.subelements(float_0, set_0, str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'posix_basic'
        dict_0 = {}
        float_0 = 222.02
        var_0 = module_0.extract(str_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_33():
    try:
        filter_module_0 = module_0.FilterModule()
        int_0 = -1866
        str_0 = 'a&>WjD#4eaM3f2PP'
        set_0 = {int_0, str_0, filter_module_0}
        var_0 = module_0.rand(int_0, set_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = '^a(.*)c$'
        str_1 = 'abc'
        str_2 = 'A\\1C'
        var_0 = module_0.regex_replace(str_1, str_0, str_2)
        str_3 = 'abbc'
        var_1 = module_0.regex_replace(str_3, str_0, str_2)
        bool_0 = True
        var_2 = module_0.regex_replace(str_3, str_0, str_2, bool_0)
        str_4 = '\\1'
        var_3 = module_0.regex_replace(str_3, str_0, str_4, bool_0)
        int_0 = -400
        float_0 = 3609.203
        set_0 = None
        set_1 = {float_0, set_0, str_3}
        var_4 = module_0.extract(str_0, int_0, float_0, set_1)
    except BaseException:
        pass

def test_case_35():
    try:
        filter_module_0 = module_0.FilterModule()
        list_0 = [filter_module_0]
        var_0 = module_0.combine(*list_0)
        str_0 = '6@\n[L'
        str_1 = 'tXLK|PH\x0c%JsxTE=l'
        var_1 = module_0.extract(str_0, str_1, str_0, list_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '[P&|Axc1n\n'
        list_0 = [str_0, str_0, str_0, str_0]
        list_1 = [list_0, list_0, list_0, str_0]
        var_0 = module_0.combine(*list_1)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'G\x0cCE\t#)*dTB:\x0cI9q'
        int_0 = 4923
        dict_0 = {str_0: int_0, int_0: int_0, int_0: int_0}
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(int_0, dict_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = '3lBt\\EW'
        dict_0 = {str_0: str_0}
        var_0 = module_0.combine(**dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        bytes_0 = b''
        float_0 = -3898.714
        var_0 = module_0.to_uuid(bytes_0, float_0)
    except BaseException:
        pass

def test_case_40():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        list_1 = []
        set_0 = None
        var_0 = module_0.subelements(list_0, list_1, set_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bool_0 = False
        str_0 = '|/7Aaw27PQ\\?'
        dict_0 = {str_0: bool_0}
        list_0 = [dict_0, bool_0, dict_0, str_0]
        int_0 = None
        list_1 = [int_0]
        set_0 = None
        var_0 = module_0.subelements(list_0, list_1, set_0)
    except BaseException:
        pass

def test_case_42():
    try:
        list_0 = []
        float_0 = -4315.6
        var_0 = module_0.rand(list_0, float_0)
    except BaseException:
        pass

def test_case_43():
    try:
        dict_0 = None
        str_0 = "#6Wuf>'VzX"
        var_0 = module_0.from_yaml(str_0)
        list_0 = []
        str_1 = 'S=*=5kj%4'
        var_1 = module_0.mandatory(str_1)
        bool_0 = True
        filter_module_0 = module_0.FilterModule()
        var_2 = module_0.regex_escape(filter_module_0)
        set_0 = {bool_0, dict_0}
        var_3 = module_0.subelements(list_0, bool_0, set_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = "J\tz'c.u#n\tqRj!]3TnJ"
        var_0 = module_0.strftime(str_0)
        dict_0 = {str_0: str_0}
        str_1 = 'a7rxG5&+'
        var_1 = module_0.fileglob(str_1)
        filter_module_0 = module_0.FilterModule()
        var_2 = filter_module_0.filters()
        list_0 = [dict_0, var_0, dict_0, str_0]
        str_2 = '#;A*j#sn-.%:'
        int_0 = 571
        var_3 = module_0.strftime(str_2, int_0)
        var_4 = module_0.list_of_dict_key_value_elements_to_dict(list_0, dict_0)
    except BaseException:
        pass

def test_case_45():
    try:
        filter_module_0 = module_0.FilterModule()
        list_0 = [filter_module_0, filter_module_0]
        var_0 = module_0.to_yaml(filter_module_0, *list_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = ''
        bool_0 = True
        dict_0 = {str_0: bool_0}
        str_1 = 'python'
        var_0 = module_0.subelements(dict_0, str_1)
    except BaseException:
        pass

def test_case_47():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        list_1 = []
        set_0 = None
        int_0 = 568
        tuple_0 = (set_0, int_0)
        str_0 = 'B]scw'
        var_0 = module_0.flatten(tuple_0, str_0)
        var_1 = module_0.subelements(list_0, list_1, set_0)
    except BaseException:
        pass

def test_case_48():
    try:
        float_0 = 1.0
        bytes_0 = b'\xcd\x8a\xd7\x83'
        list_0 = [bytes_0]
        var_0 = module_0.rand(float_0, bytes_0, list_0)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = "ftOmoyM\n*U9'ep\\\n"
        bool_0 = True
        var_0 = module_0.randomize_list(str_0, bool_0)
        bool_1 = False
        str_1 = '|/7Aaw27PQ\\?'
        dict_0 = {str_1: bool_1}
        list_0 = [dict_0, bool_1, dict_0, str_1]
        int_0 = None
        list_1 = [int_0]
        set_0 = None
        var_1 = module_0.subelements(list_0, list_1, set_0)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = 'h2'
        var_0 = module_0.mandatory(str_0)
        bool_0 = False
        str_1 = '|/7Aaw27PQ\\?'
        dict_0 = {str_1: bool_0}
        list_0 = [dict_0, bool_0, dict_0, str_1]
        int_0 = None
        str_2 = 'wa'
        dict_1 = {str_1: var_0, str_2: list_0, str_2: bool_0}
        tuple_0 = None
        var_1 = module_0.flatten(dict_1, tuple_0, int_0)
        list_1 = [int_0]
        set_0 = None
        var_2 = module_0.subelements(list_0, list_1, set_0)
    except BaseException:
        pass

def test_case_51():
    try:
        bool_0 = True
        list_0 = []
        bytes_0 = b'>yB\xd3\xd18\xbaQ\xca\xf99\x8e\xb6\xff3\x08\xfap<'
        list_1 = [list_0, bool_0]
        var_0 = module_0.rand(bytes_0, bool_0, list_1)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'h#19'
        set_0 = {str_0, str_0}
        int_0 = 1
        bool_0 = True
        str_1 = '|/7Aaw27PQ\\?'
        dict_0 = {str_1: bool_0}
        list_0 = [dict_0, bool_0, dict_0, str_1]
        list_1 = [int_0]
        var_0 = module_0.subelements(list_0, list_1, set_0)
    except BaseException:
        pass

def test_case_53():
    try:
        int_0 = 463
        dict_0 = {int_0: int_0}
        complex_0 = None
        var_0 = module_0.to_uuid(dict_0, complex_0)
    except BaseException:
        pass

def test_case_54():
    try:
        bool_0 = False
        str_0 = '@q#'
        tuple_0 = (bool_0, str_0)
        bool_1 = False
        list_0 = [tuple_0, bool_1]
        var_0 = module_0.flatten(list_0, bool_1)
        list_1 = [bool_0]
        var_1 = module_0.strftime(list_1)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = 'h#19'
        var_0 = module_0.to_bool(str_0)
        str_1 = '.Sb'
        dict_0 = {}
        bool_0 = False
        bytes_0 = b'f\xa3"k\xad\xa4\xce\x988\x12Nr\xf8\xce\xaa^l\xa8'
        var_1 = module_0.rand(str_1, dict_0, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = 'BT)3'
        dict_0 = {str_0: str_0}
        var_0 = module_0.to_yaml(dict_0)
        bytes_0 = b'pQ!\xb1\xdf\xcaC\xf1\x88\xfb\x93\x90\x90\xa9\x86'
        dict_1 = {bytes_0: var_0, bytes_0: var_0, bytes_0: var_0}
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.regex_findall(bytes_0, dict_1, dict_0, filter_module_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = 'o]'
        bool_0 = True
        var_0 = module_0.quote(bool_0)
        int_0 = 2081
        var_1 = module_0.quote(int_0)
        str_1 = '3'
        list_0 = [str_0, str_0, bool_0]
        int_1 = 3026
        int_2 = -3581
        set_0 = {str_1, bool_0, var_1}
        var_2 = module_0.rand(list_0, int_1, int_2, set_0)
    except BaseException:
        pass

def test_case_58():
    try:
        bytes_0 = b'\xe6\x8a'
        dict_0 = {bytes_0: bytes_0}
        list_0 = [dict_0, dict_0]
        var_0 = module_0.combine(*list_0)
        var_1 = module_0.from_yaml_all(dict_0)
        filter_module_0 = module_0.FilterModule()
        str_0 = '\r4\x0c\tdecJd'
        var_2 = module_0.from_yaml(str_0)
    except BaseException:
        pass

def test_case_59():
    try:
        str_0 = ''
        str_1 = 'python'
        var_0 = module_0.regex_escape(str_0, str_1)
        str_2 = '[f]oo.bar\\baz'
        var_1 = module_0.regex_escape(str_2, str_1)
        str_3 = 'posix_basic'
        var_2 = module_0.regex_escape(str_2, str_3)
        str_4 = 'posix_extended'
        var_3 = module_0.regex_escape(str_2, str_4)
    except BaseException:
        pass

def test_case_60():
    try:
        var_0 = None
        str_0 = 'No None allowed'
        var_1 = module_0.mandatory(var_0, str_0)
        var_2 = None
        var_3 = module_0.mandatory(var_2)
        str_1 = 'foo'
        ansible_undefined_0 = module_1.AnsibleUndefined(str_1)
        var_4 = module_0.mandatory(ansible_undefined_0)
    except BaseException:
        pass