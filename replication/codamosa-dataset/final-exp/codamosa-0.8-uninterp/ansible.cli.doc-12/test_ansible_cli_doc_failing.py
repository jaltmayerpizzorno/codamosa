# Automatically generated by Pynguin.
import ansible.cli.doc as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        bytes_0 = b'&\x03#\xe2\xf4N\xfd\xcb\xd5uJI=O\xca\x1a'
        set_0 = {bytes_0, bytes_0}
        var_0 = module_0.jdump(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '7Oxo.PXz/e'
        dict_0 = {str_0: str_0}
        tuple_0 = (dict_0,)
        dict_1 = {str_0: str_0, str_0: str_0, str_0: tuple_0}
        var_0 = module_0.jdump(dict_1)
        str_1 = 'kern.osversion'
        bytes_0 = b'>Z\\\xaaz\xe7e\xfe\x8f!\xc1\xb1h\xd5\x14\x02\x11\xff\xbfb'
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        var_1 = doc_c_l_i_0.post_process_args(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        bytes_0 = b'\xa2\xc1\xeei\x88\x9c\x8ad9\xb6\xfb\x017\x97*\xb9\xab9k\xee'
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        var_0 = doc_c_l_i_0.get_man_text(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "%,'+'*((1)9"
        list_0 = [str_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.run()
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        role_mixin_0 = module_0.RoleMixin(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 8192
        int_1 = -2906
        list_0 = [int_1]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.display_plugin_list(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        role_mixin_0 = module_0.RoleMixin()
        str_0 = '\x0cEY}x (tkz.Gpy'
        str_1 = '5(<R1p:;o*9(^3-FG#i'
        dict_0 = {str_0: role_mixin_0, str_1: str_1, str_0: str_0}
        str_2 = 'VT\x0b;mq!@hT'
        doc_c_l_i_0 = module_0.DocCLI(str_2)
        var_0 = doc_c_l_i_0.get_plugin_metadata(role_mixin_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '?!)f'
        dict_0 = {str_0: str_0}
        bool_0 = None
        role_mixin_0 = module_0.RoleMixin()
        float_0 = 0.5
        list_0 = [float_0, float_0, float_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.format_snippet(dict_0, bool_0, role_mixin_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        int_0 = -3025
        bool_0 = False
        tuple_0 = (int_0, dict_0, bool_0)
        doc_c_l_i_0 = module_0.DocCLI(tuple_0)
        float_0 = -310.0
        list_0 = [int_0, float_0]
        bool_1 = False
        str_0 = '|yV27\x0b4zS|"&hV$'
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        int_1 = -84
        str_1 = '8#Rn\x0cG^S\x0b\\'
        var_0 = doc_c_l_i_0.format_plugin_doc(bool_1, str_0, plugin_not_found_0, dict_0, int_1, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        bytes_0 = b'&\x03#\xe2\xf4N\xfd\xcb\xd5uJI=O\xca\x1a'
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        doc_c_l_i_1 = module_0.DocCLI(doc_c_l_i_0)
        dict_0 = None
        list_1 = [doc_c_l_i_1, dict_0, doc_c_l_i_0]
        doc_c_l_i_2 = module_0.DocCLI(list_1)
        var_0 = doc_c_l_i_2.print_paths(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        role_mixin_0 = module_0.RoleMixin()
        str_0 = "I'&nH"
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        tuple_0 = ()
        float_0 = -937.760945
        var_0 = doc_c_l_i_0.get_role_man_text(tuple_0, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'b\tSdjEe}\\z3S('
        dict_0 = {str_0: str_0}
        str_1 = 'qf`=KG:\\?K@!F'
        complex_0 = None
        display_0 = module_1.Display()
        doc_c_l_i_0 = module_0.DocCLI(display_0)
        var_0 = doc_c_l_i_0.add_fields(str_0, dict_0, str_1, complex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        complex_0 = None
        str_0 = '+TW*fZ_-d;y8YR9=w5'
        list_0 = [complex_0, str_0, str_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        list_1 = []
        role_mixin_0 = module_0.RoleMixin(*list_1)
        dict_0 = {}
        list_2 = []
        var_0 = doc_c_l_i_0.add_fields(role_mixin_0, dict_0, list_2, role_mixin_0, str_0)
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        var_1 = doc_c_l_i_1.display_plugin_list(complex_0)
    except BaseException:
        pass

def test_case_12():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        display_0 = module_1.Display()
        dict_0 = {plugin_not_found_0: plugin_not_found_0, plugin_not_found_0: plugin_not_found_0}
        dict_1 = None
        str_0 = ''
        str_1 = 'p82zU71AktWfC"^\t\t4'
        bool_0 = True
        list_0 = [str_1, dict_0]
        float_0 = 2322.0
        str_2 = "\n- name: Download foo.conf\n  get_url:\n    url: http://example.com/path/file.conf\n    dest: /etc/foo.conf\n    mode: '0440'\n\n- name: Download file and force basic auth\n  get_url:\n    url: http://example.com/path/file.conf\n    dest: /etc/foo.conf\n    force_basic_auth: yes\n\n- name: Download file with custom HTTP headers\n  get_url:\n    url: http://example.com/path/file.conf\n    dest: /etc/foo.conf\n    headers:\n      key1: one\n      key2: two\n\n- name: Download file with check (sha256)\n  get_url:\n    url: http://example.com/path/file.conf\n    dest: /etc/foo.conf\n    checksum: sha256:b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c\n\n- name: Download file with check (md5)\n  get_url:\n    url: http://example.com/path/file.conf\n    dest: /etc/foo.conf\n    checksum: md5:66dffb5228a211e61d6d7ef4a86f5758\n\n- name: Download file with checksum url (sha256)\n  get_url:\n    url: http://example.com/path/file.conf\n    dest: /etc/foo.conf\n    checksum: sha256:http://example.com/path/sha256sum.txt\n\n- name: Download file from a file path\n  get_url:\n    url: file:///tmp/afile.txt\n    dest: /tmp/afilecopy.txt\n\n- name: < Fetch file that requires authentication.\n        username/password only available since 2.8, in older versions you need to use url_username/url_password\n  get_url:\n    url: http://example.com/path/file.conf\n    dest: /etc/foo.conf\n    username: bar\n    password: '{{ mysecret }}'\n"
        doc_c_l_i_0 = module_0.DocCLI(str_2)
        var_0 = doc_c_l_i_0.run()
        var_1 = doc_c_l_i_0.add_fields(dict_1, str_0, bool_0, list_0, float_0)
        var_2 = doc_c_l_i_0.init_parser()
        set_0 = set()
        var_3 = doc_c_l_i_0.get_man_text(set_0, plugin_not_found_0)
    except BaseException:
        pass