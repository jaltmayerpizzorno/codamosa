# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_0 = 886
        str_0 = ",Sf'G\x0c`Xzgf0L"
        int_1 = -2060
        int_2 = 96
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_0, tuple_0)
        bytes_0 = b'\xbePb\xb8\xe1\xbd\xa2\xe6\x02"^\xa3W\xd3G'
        tuple_2 = (int_0, str_0, tuple_1, bytes_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 2
        str_0 = ':jpW[oAWy[&'
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1
        str_0 = "a wl'D92\r[.:!^cYA*\\"
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -961
        str_0 = '|'
        str_1 = 'hlB\tTv}h3Jp'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_1, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.shift(int_0, str_0, int_0, tuple_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -616
        list_0 = None
        dict_0 = {}
        tuple_0 = (list_0, dict_0)
        int_1 = 36
        str_0 = 'J *W2:@'
        int_2 = 1592
        tuple_1 = (int_1, int_2)
        tuple_2 = (str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_0, int_1, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        grammar_1 = module_0.Grammar()
        list_0 = [grammar_0, grammar_0, grammar_1, grammar_0]
        parser_0 = module_1.Parser(grammar_0, list_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1391
        grammar_0 = module_0.Grammar()
        optional_0 = None
        str_0 = None
        int_1 = 1493
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        list_0 = None
        tuple_2 = (int_0, optional_0, tuple_1, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1
        var_0 = None
        str_0 = '!i'
        int_1 = None
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_2 = parser_0.classify(int_0, var_0, tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        grammar_0 = module_0.Grammar()
        str_0 = 'P(qr[oT V7tm=w'
        int_0 = 2965
        int_1 = 3
        list_0 = [int_0, str_0]
        parser_0 = module_1.Parser(grammar_0, list_0)
        parser_0.setup(int_1)
    except BaseException:
        pass