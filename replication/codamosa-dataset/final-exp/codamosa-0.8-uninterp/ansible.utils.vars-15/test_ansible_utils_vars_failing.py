# Automatically generated by Pynguin.
import ansible.utils.vars as module_0

def test_case_0():
    try:
        int_0 = None
        dict_0 = {int_0: int_0}
        var_0 = module_0.combine_vars(int_0, dict_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = set()
        int_0 = 27
        var_0 = module_0.merge_hash(set_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n# Obtain the stats of /etc/foo.conf, and check that the file still belongs\n# to \'root\'. Fail otherwise.\n- name: Get stats of a file\n  ansible.builtin.stat:\n    path: /etc/foo.conf\n  register: st\n- name: Fail if the file does not belong to \'root\'\n  ansible.builtin.fail:\n    msg: "Whoops! file ownership has changed"\n  when: st.stat.pw_name != \'root\'\n\n# Determine if a path exists and is a symlink. Note that if the path does\n# not exist, and we test sym.stat.islnk, it will fail with an error. So\n# therefore, we must test whether it is defined.\n# Run this to understand the structure, the skipped ones do not pass the\n# check performed by \'when\'\n- name: Get stats of the FS object\n  ansible.builtin.stat:\n    path: /path/to/something\n  register: sym\n\n- name: Print a debug message\n  ansible.builtin.debug:\n    msg: "islnk isn\'t defined (path doesn\'t exist)"\n  when: sym.stat.islnk is not defined\n\n- name: Print a debug message\n  ansible.builtin.debug:\n    msg: "islnk is defined (path must exist)"\n  when: sym.stat.islnk is defined\n\n- name: Print a debug message\n  ansible.builtin.debug:\n    msg: "Path exists and is a symlink"\n  when: sym.stat.islnk is defined and sym.stat.islnk\n\n- name: Print a debug message\n  ansible.builtin.debug:\n    msg: "Path exists and isn\'t a symlink"\n  when: sym.stat.islnk is defined and sym.stat.islnk == False\n\n\n# Determine if a path exists and is a directory.  Note that we need to test\n# both that p.stat.isdir actually exists, and also that it\'s set to true.\n- name: Get stats of the FS object\n  ansible.builtin.stat:\n    path: /path/to/something\n  register: p\n- name: Print a debug message\n  ansible.builtin.debug:\n    msg: "Path exists and is a directory"\n  when: p.stat.isdir is defined and p.stat.isdir\n\n- name: Don not do checksum\n  ansible.builtin.stat:\n    path: /path/to/myhugefile\n    get_checksum: no\n\n- name: Use sha256 to calculate checksum\n  ansible.builtin.stat:\n    path: /path/to/something\n    checksum_algorithm: sha256\n'
        set_0 = {str_0, str_0}
        var_0 = module_0.combine_vars(str_0, set_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xd6\xb3'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        var_0 = module_0.load_options_vars(list_0)
        str_0 = 'vTU)'
        set_0 = {str_0}
        var_1 = module_0._isidentifier_PY3(set_0)
        int_0 = -3085
        var_2 = module_0.merge_hash(set_0, int_0, str_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        tuple_0 = None
        var_0 = module_0.merge_hash(dict_0, dict_0, tuple_0)
        str_0 = 'download_dir requires dnf>=2.6.2. Current dnf version is %s'
        var_1 = module_0.merge_hash(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'M'
        var_0 = module_0._isidentifier_PY3(str_0)
        str_1 = 'S,S$2\tGyyip4!'
        str_2 = 'merge'
        list_0 = [str_1, str_0, str_1, str_1]
        bytes_0 = b'\x82\xc5y\xf76\xcf\xd2y\xdb\xaf,'
        var_1 = module_0.merge_hash(str_2, list_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_0.get_unique_id()
        bool_0 = True
        int_0 = -2868
        bytes_0 = b'\xe6_\x8c\xbc\x1a\xcf\x02\x03\xbc\x0e\xbfu\xb6}OA\x18\x98\x8f!'
        set_0 = {var_0}
        tuple_0 = (bytes_0, bytes_0, set_0)
        dict_0 = {int_0: bool_0, var_0: tuple_0}
        var_1 = module_0.combine_vars(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = module_0.get_unique_id()
        int_0 = -907
        var_1 = module_0.load_extra_vars(int_0)
        int_1 = 2481
        var_2 = module_0.load_options_vars(int_1)
        str_0 = 'qL7H2Va;'
        str_1 = 'H.IvO <}?"'
        str_2 = ''
        str_3 = 'merge'
        tuple_0 = ()
        list_0 = [str_1, str_3, str_3, var_1]
        tuple_1 = (str_3, tuple_0, list_0)
        tuple_2 = (tuple_1,)
        list_1 = [var_1, var_2, int_0, tuple_2]
        var_3 = module_0._isidentifier_PY3(list_1)
        var_4 = module_0.combine_vars(str_0, str_1, str_2)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        tuple_0 = None
        bytes_0 = b'.\xdf\xc6\xf9\xc4\xe6\xcf<\xa7\xaa\xb6\x86A\xe0\x19\x03'
        var_0 = module_0.load_extra_vars(bytes_0)
        var_1 = module_0.merge_hash(dict_0, dict_0, tuple_0)
        float_0 = -3851.44
        var_2 = module_0.load_options_vars(tuple_0)
        str_0 = '#H9@`?vV_'
        var_3 = module_0._isidentifier_PY3(str_0)
        var_4 = module_0._isidentifier_PY3(bytes_0)
        var_5 = module_0.combine_vars(dict_0, dict_0)
        var_6 = module_0.get_unique_id()
        var_7 = module_0.get_unique_id()
        list_0 = [dict_0]
        var_8 = module_0.combine_vars(list_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'a'
        set_0 = set()
        var_0 = module_0.load_options_vars(set_0)
        var_1 = module_0._isidentifier_PY3(str_0)
        str_1 = '.'
        var_2 = module_0.get_unique_id()
        int_0 = 2
        int_1 = [int_0]
        int_2 = {str_0: int_1}
        int_3 = {str_1: int_2}
        int_4 = {str_0: int_3}
        int_5 = {str_1: int_4}
        int_6 = {str_0: int_5}
        float_0 = -3366.0
        var_3 = module_0.load_extra_vars(float_0)
        var_4 = module_0.merge_hash(int_4, int_6)
        str_2 = 'replace'
        var_5 = module_0.load_options_vars(str_2)
        bool_0 = True
        var_6 = module_0.combine_vars(bool_0, set_0)
    except BaseException:
        pass