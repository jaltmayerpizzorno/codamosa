# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    var_0 = None
    maybe_0 = module_0.Maybe(var_0, bool_0)

def test_case_2():
    bool_0 = False
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)

def test_case_3():
    list_0 = []
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.map(list_0)

def test_case_4():
    str_0 = '\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        '
    float_0 = 2937.0
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    var_0 = maybe_0.bind(str_0)

def test_case_5():
    bytes_0 = b'\x87V\xe5}\x04\xdc@\xb6\x13\xf6\xae'
    str_0 = '-^p\r; g'
    str_1 = 'Z*wJ.uyQR>*\n(I]N'
    dict_0 = {str_0: str_0, str_1: str_0}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.ap(bytes_0)
    bool_1 = False
    bool_2 = True
    maybe_1 = module_0.Maybe(bool_1, bool_2)
    var_1 = maybe_1.to_lazy()
    var_2 = maybe_1.to_box()
    var_3 = maybe_1.to_lazy()

def test_case_6():
    float_0 = -1459.38149
    bool_0 = True
    bytes_0 = b'\xa3#\xfb\xac\x9c\xe34\x0f\xc7\xe6\x9amn\xb2\\TW'
    str_0 = '\n    Data type for storage any type of function.\n    This function (and all his mappers) will be called only during calling fold method\n    '
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = True
    maybe_1 = module_0.Maybe(bytes_0, bool_1)
    var_1 = maybe_1.filter(bool_0)
    bool_2 = False
    maybe_2 = module_0.Maybe(bool_2, bool_2)
    var_2 = maybe_2.get_or_else(float_0)

def test_case_7():
    object_0 = module_1.object()
    bool_0 = True
    int_0 = 4061
    set_0 = set()
    list_0 = []
    maybe_0 = module_0.Maybe(list_0, bool_0)
    var_0 = maybe_0.get_or_else(set_0)
    bytes_0 = b'^\xab1\x9as\xf1\x0e\t\xa6\xb6'
    maybe_1 = module_0.Maybe(bytes_0, bool_0)
    var_1 = maybe_1.to_lazy()
    str_0 = '(eF'
    var_2 = maybe_1.to_either()
    maybe_2 = module_0.Maybe(str_0, bool_0)
    var_3 = maybe_2.ap(int_0)
    maybe_3 = module_0.Maybe(object_0, bool_0)
    var_4 = maybe_3.to_validation()

def test_case_8():
    bool_0 = False
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_lazy()
    object_0 = module_1.object()
    bool_1 = False
    maybe_1 = module_0.Maybe(object_0, bool_1)
    bool_2 = maybe_1.__eq__(object_0)
    var_1 = maybe_1.to_either()

def test_case_9():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)
    var_0 = maybe_0.to_either()

def test_case_10():
    int_0 = 2682
    bool_0 = True
    object_0 = module_1.object()
    str_0 = '1Ng"9)h`2l[cup'
    tuple_0 = (object_0, str_0)
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    var_0 = maybe_0.to_box()
    var_1 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_2 = maybe_1.to_either()

def test_case_11():
    bool_0 = True
    str_0 = 'CG|Km<ubQ27V1*;;'
    bool_1 = True
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, bool_1)
    var_0 = maybe_0.to_lazy()
    maybe_1 = module_0.Maybe(str_0, bool_1)
    var_1 = maybe_1.bind(bool_0)
    var_2 = maybe_1.to_either()
    str_1 = '&(#3NuGDfL\\y'
    var_3 = maybe_1.map(str_1)

def test_case_12():
    dict_0 = {}
    list_0 = [dict_0]
    bytes_0 = b'\xc0\x12\xcc;\xfeBC\x05GN.\xa0{\xeff\xb8\x18\x96\x1f\xfb'
    tuple_0 = ()
    bool_0 = True
    tuple_1 = (list_0, tuple_0, bool_0)
    bool_1 = True
    maybe_0 = module_0.Maybe(tuple_1, bool_1)
    tuple_2 = (list_0, bytes_0, maybe_0, dict_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(tuple_2, bool_2)
    var_0 = maybe_1.to_try()

def test_case_13():
    int_0 = 862
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_try()

def test_case_14():
    bool_0 = False
    object_0 = module_1.object()
    maybe_0 = module_0.Maybe(object_0, bool_0)
    var_0 = maybe_0.to_validation()