# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    try:
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        int_0 = 24
        str_0 = 'derr=PIPE)'
        int_1 = 139
        str_1 = 'prep_cmd'
        bool_0 = True
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_1, str_1, bool_0, bool_0, placeholder=str_1)
        int_2 = 473
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(int_0, str_1, max_lines=int_2)
        str_2 = ansi_text_wrapper_2.fill(str_0)
        ansi_text_wrapper_3 = module_0.AnsiTextWrapper(max_lines=int_2, placeholder=str_2)
        bytes_0 = b'\xa5\xc8\xce\x01\xcag\xfe'
        int_3 = module_0.len_without_ansi(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        optional_0 = None
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=optional_0)
        str_0 = 'hBMKFXX5y!<\x0b?|l~]#F6'
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -142
        bool_0 = True
        str_0 = 'n 3&C0k]F+ ~R=9I\n'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ';7]RuMTgI'
        int_0 = 4044
        str_1 = "%Y'HL]G!8G1"
        int_1 = -2235
        str_2 = "Change the mode of a path.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    If the given ``path`` does NOT exist, nothing will be done.\n\n    This function will **NOT** change the mode of:\n\n    - symlinks (symlink targets that are files or directories will be changed)\n    - sockets\n    - fifo\n    - block devices\n    - char devices\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path of the file or directory to have it's mode changed.  This\n            value can be a :term:`glob pattern`.\n        mode_file (:obj:`int`, optional): The mode applied to the given\n            ``path`` that is a file or a symlink target that is a file.\n            Defaults to ``0o600``.\n        mode_dir (:obj:`int`, optional): The mode applied to the given\n            ``path`` that is a directory or a symlink target that is a\n            directory. Defaults to ``0o700``.\n        include_parent (:obj:`bool`, optional): A value of :obj:`True`` will\n            chmod the parent directory of the given ``path`` that contains a\n            a :term:`glob pattern`.  Defaults to :obj:`False`.\n\n    :rtype: :obj:`None`\n\n    Examples:\n        >>> from flutils.pathutils import chmod\n        >>> chmod('~/tmp/flutils.tests.osutils.txt', 0o660)\n\n        Supports a :term:`glob pattern`.  So to recursively change the mode\n        of a directory just do:\n\n        >>> chmod('~/tmp/**', mode_file=0o644, mode_dir=0o770)\n\n        To change the mode of a directory's immediate contents:\n\n        >>> chmod('~/tmp/*')\n\n    "
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_1, str_2, bool_0, bool_0, bool_0, int_0)
        int_2 = 2
        str_3 = '?I&r\\g*7Huxe%$'
        bool_1 = True
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_2, str_0, str_3, bool_1, int_2)
        str_4 = ansi_text_wrapper_1.fill(str_0)
        bool_2 = False
        bool_3 = True
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(int_0, str_1, bool_2, bool_3, bool_3, max_lines=int_0)
        str_5 = ansi_text_wrapper_2.fill(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\\a^X\n%l]{pC'
        bool_0 = True
        int_0 = 0
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, int_0, max_lines=int_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        str_1 = 'cmhI%LqfyyF\r\x0c>=&'
        bool_0 = True
        str_2 = 'fP"Dg[?j)\x0c\'FVA(?]*'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(str_1, bool_0, bool_0, placeholder=str_2)
        str_3 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        sequence_0 = None
        int_0 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_7():
    try:
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_0 = 'md``'
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = 'cDoNz'
        list_1 = ansi_text_wrapper_0.wrap(str_1)
        sequence_0 = None
        int_0 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "Run the given command and return the result.\n\n        Args:\n             cmd (:obj:`Sequence <typing.Sequence>`): The command\n             **kwargs: Any default_kwargs to pass to :obj:`subprocess.run`.\n                These default_kwargs will override any ``default_kwargs``\n                set in the constructor.\n\n        Raises:\n            FileNotFoundError: If the given ``cmd`` cannot be found.\n            ChildProcessError: If ``raise_error=True`` was set in this\n                class' constructor; and, the process (from running the\n                given ``cmd``) returns a non-zero value.\n            ValueError: If the given ``**kwargs`` has invalid arguments.\n\n        Example:\n\n            >>> from flutils.cmdutils import RunCmd\n            >>> from subprocess import PIPE\n            >>> import os\n            >>> run_command = RunCmd(stdout=PIPE, stderr=PIPE)\n            >>> result = run_command('ls -flap %s' % os.getcwd())\n            >>> result.return_code\n            0\n            >>> result.stdout\n            ...\n            >>> result = run_command('ls -flap %s' % os.path.expanduser('~'))\n        "
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = 'Dc\\acm\x0bZ~Ri?OoDlM\x0cH'
        bool_1 = False
        bytes_0 = b"\xa9\xb1\x8cB\xb0{\x96\x8a\x15\xf8W\x8d:\x8c'"
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(str_1, bool_1, bool_1, max_lines=bytes_0)
        str_2 = 'lI&\nYKa\x0c4O\\'
        bool_2 = True
        optional_0 = None
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_2, bool_2, bool_2, max_lines=optional_0)
        sequence_0 = None
        int_0 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 632
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_0 = ''
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = 'Dc\\acm\x0bZ~Ri?OoDlM\x0cH'
        bool_0 = False
        bool_1 = True
        bool_2 = False
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, bool_2, bool_1, bool_2, int_0, placeholder=str_1)
        str_2 = '0m@z'
        bool_3 = False
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_2, bool_3)
        sequence_0 = None
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '#SO]Q:'
        int_0 = module_0.len_without_ansi(str_0)
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_1 = 'es:'
        list_0 = ansi_text_wrapper_0.wrap(str_1)
        str_2 = 'A\rKp_)POv\x0c/Wl'
        list_1 = ansi_text_wrapper_0.wrap(str_2)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_0, max_lines=int_0)
        str_3 = '{156`$r!!Ks\x0bPtCx|l'
        str_4 = ansi_text_wrapper_0.fill(str_3)
        str_5 = ansi_text_wrapper_0.fill(str_1)
        str_6 = '7kA2$;y3Q8_R~'
        bool_0 = False
        none_type_0 = None
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_6, bool_0, max_lines=none_type_0)
        str_7 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
        str_8 = ansi_text_wrapper_1.fill(str_7)
        str_9 = ansi_text_wrapper_2.fill(str_4)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '"JjnSbx7b4'
        int_0 = module_0.len_without_ansi(str_0)
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_1 = 'es:'
        list_0 = ansi_text_wrapper_0.wrap(str_1)
        str_2 = 'A\rKp_)POv\x0c/Wl'
        list_1 = ansi_text_wrapper_0.wrap(str_2)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_0, max_lines=int_0)
        str_3 = '{156`$r!!Ks\x0bPtCx|l'
        str_4 = ansi_text_wrapper_0.fill(str_3)
        str_5 = ansi_text_wrapper_0.fill(str_1)
        str_6 = '7kA2$;yJQ8_R~'
        bool_0 = False
        none_type_0 = None
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_6, bool_0, max_lines=none_type_0)
        str_7 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
        str_8 = ansi_text_wrapper_1.fill(str_7)
        str_9 = ansi_text_wrapper_2.fill(str_4)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '+YS1]Q:'
        int_0 = module_0.len_without_ansi(str_0)
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = 'A\rKp_)POv\x0c/Wl'
        list_1 = ansi_text_wrapper_0.wrap(str_1)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_0, max_lines=int_0)
        str_2 = ansi_text_wrapper_0.fill(str_1)
        str_3 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
        str_4 = ansi_text_wrapper_1.fill(str_3)
        str_5 = ansi_text_wrapper_1.fill(str_4)
        sequence_0 = None
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '+YS1]Q:'
        int_0 = module_0.len_without_ansi(str_0)
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = 'A\rKp_)POv\x0c/Wl'
        list_1 = ansi_text_wrapper_0.wrap(str_1)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_0, max_lines=int_0)
        str_2 = ansi_text_wrapper_0.fill(str_1)
        str_3 = 'The path: %r can NOT e createdas a directory because t already exists as a %s.'
        str_4 = ansi_text_wrapper_0.fill(str_2)
        str_5 = ansi_text_wrapper_1.fill(str_3)
        str_6 = 'D\nE9'
        str_7 = ansi_text_wrapper_1.fill(str_5)
        str_8 = 'm('
        str_9 = ansi_text_wrapper_0.fill(str_8)
        str_10 = 'r:'
        int_1 = 604
        str_11 = 'sn&TN55]'
        bool_0 = False
        bool_1 = True
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_11, bool_0, bool_1, max_lines=int_1, placeholder=str_10)
        list_2 = ansi_text_wrapper_2.wrap(str_6)
    except BaseException:
        pass