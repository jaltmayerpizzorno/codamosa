# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        bool_0 = True
        bytes_0 = b''
        set_0 = {bool_0, bytes_0, bytes_0}
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.append(set_0)
        bool_1 = False
        immutable_list_1 = module_0.ImmutableList(var_0, bool_1)
        var_1 = immutable_list_1.__len__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '3l6SV}Sq^""\x0bJ'
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        set_0 = None
        var_0 = immutable_list_0.append(set_0)
        optional_0 = immutable_list_0.find(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        object_0 = module_1.object()
        str_0 = 'TEqcTZHuPdXEt[.8J.eC'
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(str_0, bool_0)
        bool_1 = immutable_list_0.__eq__(object_0)
        object_1 = module_1.object()
        immutable_list_1 = module_0.ImmutableList()
        var_0 = immutable_list_1.to_list()
        bool_2 = immutable_list_0.__eq__(object_0)
        str_1 = '|3CGVg;A:;RtJ+/@H6c'
        var_1 = immutable_list_0.map(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        object_0 = module_1.object()
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.to_list()
        immutable_list_1 = module_0.ImmutableList()
        var_1 = immutable_list_1.map(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        immutable_list_0 = module_0.ImmutableList()
        callable_0 = None
        optional_0 = immutable_list_0.find(callable_0)
        object_0 = module_1.object()
        bool_0 = False
        immutable_list_1 = module_0.ImmutableList(object_0, bool_0)
        immutable_list_2 = module_0.ImmutableList()
        var_0 = immutable_list_1.filter(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callable_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 512
        immutable_list_0 = module_0.ImmutableList()
        optional_0 = immutable_list_0.find(int_0)
        list_0 = []
        var_0 = immutable_list_0.filter(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        callable_0 = None
        var_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_1 = immutable_list_0.reduce(callable_0, var_0)
        immutable_list_1 = module_0.ImmutableList()
        var_2 = immutable_list_1.reduce(callable_0, var_1)
        bytes_0 = b'\x1bt\x95Q\xeb'
        bool_0 = True
        tuple_0 = (bool_0, bytes_0)
        immutable_list_2 = module_0.ImmutableList(bytes_0, tuple_0)
        var_3 = immutable_list_2.reduce(callable_0, var_2)
    except BaseException:
        pass

def test_case_9():
    try:
        immutable_list_0 = module_0.ImmutableList()
        optional_0 = immutable_list_0.find(immutable_list_0)
        var_0 = None
        callable_0 = None
        var_1 = immutable_list_0.reduce(callable_0, var_0)
        float_0 = 4226.993
        tuple_0 = (float_0,)
        var_2 = immutable_list_0.filter(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 756
        str_0 = 'HVKK%6im@5FI'
        immutable_list_0 = module_0.ImmutableList()
        optional_0 = immutable_list_0.find(str_0)
        object_0 = module_1.object()
        var_0 = immutable_list_0.__len__()
        immutable_list_1 = module_0.ImmutableList(object_0)
        var_1 = None
        var_2 = immutable_list_1.append(var_1)
        var_3 = immutable_list_1.unshift(var_1)
        int_1 = 2652
        list_0 = [object_0, int_0, int_1, int_0]
        var_4 = None
        var_5 = immutable_list_1.reduce(list_0, var_4)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "'d\t~mS\t=pZ*(nqCLX#"
        dict_0 = {}
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(dict_0, bool_0)
        optional_0 = immutable_list_0.find(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\n        Applies the function inside the Either[A] structure to another applicative type.\n\n        :param applicative: applicative contains function\n        :type applicative: Either[B]\n        :returns: new Either with result of contains function\n        :rtype: Either[A(B)]\n        '
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.__len__()
        int_0 = 66
        immutable_list_1 = module_0.ImmutableList()
        var_1 = immutable_list_1.append(int_0)
        list_0 = [str_0]
        bool_0 = True
        immutable_list_2 = module_0.ImmutableList(list_0, bool_0)
        var_2 = immutable_list_2.__add__(var_1)
        str_1 = immutable_list_2.__str__()
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        var_0 = None
        dict_0 = {}
        list_0 = [bool_0, dict_0, dict_0]
        immutable_list_0 = module_0.ImmutableList(list_0)
        var_1 = immutable_list_0.__add__(var_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -11
        immutable_list_0 = module_0.ImmutableList(int_0)
        var_0 = immutable_list_0 == immutable_list_0
        list_0 = []
        var_1 = immutable_list_0.filter(list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        immutable_list_1 = module_0.ImmutableList(bool_0)
        int_0 = 2
        immutable_list_2 = module_0.ImmutableList(int_0)
        var_0 = immutable_list_2 == immutable_list_2
        immutable_list_3 = module_0.ImmutableList(bool_0)
        immutable_list_4 = module_0.ImmutableList(int_0, immutable_list_3)
        var_1 = immutable_list_2 == immutable_list_4
        immutable_list_5 = module_0.ImmutableList(bool_0)
        immutable_list_6 = module_0.ImmutableList(int_0)
        callable_0 = None
        var_2 = immutable_list_0.map(callable_0)
    except BaseException:
        pass