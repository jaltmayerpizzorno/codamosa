# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.super_without_arguments as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    list_0 = [a_s_t_0, a_s_t_0]
    call_0 = module_0.Call(*list_0)
    super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(a_s_t_0)
    call_1 = super_without_arguments_transformer_0.visit_Call(call_0)

def test_case_2():
    str_0 = 'class Foo:\n  def __init__(self, x):\n    super()'
    var_0 = module_2.parse(str_0)
    super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(var_0)
    var_1 = super_without_arguments_transformer_0.visit(var_0)

def test_case_3():
    str_0 = 'class Foo:\n  def __init__(self, x):\n   supr()'
    var_0 = module_2.parse(str_0)
    super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(var_0)
    var_1 = super_without_arguments_transformer_0.visit(var_0)

def test_case_4():
    str_0 = 'super()'
    var_0 = module_2.parse(str_0)
    str_1 = 'class Foo:\n  def __init__(self, x):\n    super()'
    var_1 = module_2.parse(str_1)
    list_0 = [str_0, var_1]
    str_2 = 'fxl/X>~JC3^xq\x0bY0'
    str_3 = 'W2HQJ\\'
    dict_0 = {str_2: list_0, str_0: list_0, str_0: var_1, str_3: var_0}
    a_s_t_0 = module_0.AST(**dict_0)
    super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(a_s_t_0)
    super_without_arguments_transformer_1 = module_1.SuperWithoutArgumentsTransformer(a_s_t_0)
    str_4 = 'zqQW@-fI]9'
    dict_1 = {str_4: str_0}
    call_0 = module_0.Call(*list_0, **dict_1)
    a_s_t_1 = module_0.AST()
    super_without_arguments_transformer_2 = module_1.SuperWithoutArgumentsTransformer(var_1)
    call_1 = super_without_arguments_transformer_2.visit_Call(call_0)
    var_2 = super_without_arguments_transformer_2.visit(var_1)