# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        bytes_0 = b'\x9a\xf7\xc8\xb2\xfb\xed'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        complex_0 = None
        set_0 = {bytes_0, bytes_0, complex_0}
        var_0 = module_0.check_mutually_exclusive(set_0, dict_0)
        var_1 = module_0.check_type_bits(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -1781
        set_0 = {int_0, int_0, int_0}
        str_0 = 'J3ZD'
        var_0 = module_0.check_required_one_of(set_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Fn@'
        float_0 = None
        float_1 = None
        set_0 = {float_1, float_1, str_0}
        var_0 = module_0.check_required_arguments(float_1, set_0)
        int_0 = 1529
        var_1 = module_0.check_required_one_of(float_0, int_0)
        var_2 = module_0.check_missing_parameters(str_0)
        float_2 = 1.0
        var_3 = module_0.check_type_float(float_2)
        dict_0 = {float_0: float_2}
        str_1 = '1S'
        bytes_0 = b'\xf0\xe0\xd7\xbc\xa0\x99\xfaj\xe9\xb9\xbe'
        var_4 = module_0.check_required_arguments(dict_0, str_1, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Dle.0'
        var_0 = module_0.check_required_if(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'X>Z1MJ{Y'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -572.5881
        var_0 = module_0.check_type_dict(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = None
        var_0 = module_0.check_type_bool(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 0.001
        var_0 = module_0.check_type_int(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 127
        float_0 = 1530.807
        var_0 = module_0.check_type_float(float_0)
        list_0 = [var_0, float_0, float_0, int_0]
        var_1 = module_0.check_type_bytes(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '>;-oMGw"\\\rmf@?\n}9'
        var_0 = module_0.check_type_bytes(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'u'
        var_0 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1030
        dict_0 = {}
        var_0 = module_0.check_type_jsonarg(dict_0)
        list_0 = [dict_0, int_0]
        var_1 = module_0.check_required_if(dict_0, list_0)
        var_2 = module_0.check_type_str(int_0, int_0, dict_0)
        float_0 = -1929.84
        var_3 = module_0.check_type_float(float_0)
        str_0 = 'C+Y_o#m'
        list_1 = [dict_0, dict_0, str_0]
        str_1 = '/l7iPK:Bhe?WFoK'
        var_4 = module_0.check_required_together(list_1, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        var_0 = module_0.safe_eval(str_0)
        dict_0 = {}
        var_1 = module_0.check_required_arguments(dict_0, dict_0)
        bytes_0 = None
        var_2 = module_0.check_type_jsonarg(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = None
        var_0 = module_0.check_type_path(bytes_0)
        str_0 = '-6SXe\x0c\tMd`'
        var_1 = module_0.check_type_jsonarg(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 20
        list_0 = [int_0]
        str_0 = '$N'
        var_0 = module_0.count_terms(list_0, str_0)
        var_1 = module_0.check_type_float(int_0)
        str_1 = '*g&JAo\tv8'
        var_2 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = None
        set_0 = set()
        str_0 = 'hvDNj*Y'
        bytes_1 = None
        list_0 = [bytes_1, str_0]
        var_0 = module_0.check_mutually_exclusive(bytes_1, str_0, list_0)
        var_1 = module_0.check_required_one_of(bytes_0, set_0, str_0)
        int_0 = 2334
        var_2 = module_0.check_required_if(str_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        complex_0 = None
        dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
        var_0 = module_0.count_terms(complex_0, dict_0)
        str_0 = 't'
        var_1 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'a=2, b=1, c=3'
        var_0 = module_0.check_type_dict(str_0)
        float_0 = -737.3835
        list_0 = [float_0, str_0]
        str_1 = 'BO!OT 1j`*@0Vu(b\r'
        set_0 = {float_0, str_1}
        var_1 = module_0.check_required_one_of(list_0, set_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'ansible-connection'
        var_0 = module_0.check_type_float(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = False
        str_0 = 'W'
        var_0 = module_0.check_missing_parameters(bool_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        dict_0 = {}
        var_0 = module_0.check_required_arguments(dict_0, dict_0)
        bool_0 = False
        var_1 = module_0.check_required_if(dict_0, bool_0)
        str_0 = 'mnN:6q]p1'
        list_0 = [var_1, var_0, var_0, str_0]
        var_2 = module_0.check_type_str(list_0, dict_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        var_0 = module_0.check_type_int(bool_0)
        str_0 = 'X>Z1MJ{Y'
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = True
        var_0 = dict(required=bool_0)
        var_1 = dict(required=bool_0)
        var_2 = dict(a=var_0, b=var_1, c=var_1)
        var_3 = None
        var_4 = module_0.check_required_arguments(var_2, var_1, var_3)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = "'W"
        var_0 = module_0.count_terms(str_0, str_0)
        bool_0 = False
        str_1 = '\rMq\n'
        var_1 = module_0.count_terms(bool_0, str_1)
        var_2 = module_0.check_type_path(bool_0)
        list_0 = None
        var_3 = module_0.check_type_list(list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'name'
        str_1 = 'forLe'
        str_2 = 'example'
        str_3 = {str_0: str_2}
        str_4 = [str_0, str_1]
        var_0 = module_0.check_missing_parameters(str_3, str_4)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '.>U&5nF_W#|C=:d|0Uw$'
        var_0 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = None
        set_0 = set()
        str_0 = 'hvDNj*Y'
        bytes_1 = None
        list_0 = [bytes_1, str_0]
        var_0 = module_0.check_required_one_of(bytes_0, set_0, str_0)
        var_1 = module_0.check_type_list(list_0)
        int_0 = 636
        bool_0 = False
        var_2 = module_0.check_missing_parameters(int_0, bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'Fn@'
        var_0 = module_0.check_missing_parameters(str_0)
        float_0 = 1.0
        list_0 = []
        bytes_0 = b'\xf9\xf3\x0e\xb6\xb8\x17\xaez\xc7'
        str_1 = 'anI#M]7:Ta\t?0'
        tuple_0 = ()
        tuple_1 = (bytes_0, str_1, tuple_0)
        var_1 = module_0.check_required_one_of(list_0, tuple_1)
        var_2 = module_0.check_type_float(float_0)
        dict_0 = {var_2: float_0}
        var_3 = module_0.check_type_dict(dict_0)
        float_1 = -3049.63461
        var_4 = module_0.check_type_bool(float_1)
    except BaseException:
        pass

def test_case_28():
    try:
        complex_0 = None
        var_0 = module_0.check_type_float(complex_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '?7Nl%fnRdoR4=V4'
        str_1 = '_diff_peek'
        str_2 = '5_'
        var_0 = module_0.check_required_one_of(str_1, str_0, str_2)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'e'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = [str_0, str_1, str_2]
        str_4 = [str_3]
        str_5 = {str_0: str_1, str_1: str_1, str_2: str_1}
        var_0 = module_0.check_mutually_exclusive(str_4, str_5)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'a=2, b=1, c=3'
        str_1 = 'cWgt\n3E'
        dict_0 = {str_0: str_1}
        var_0 = module_0.check_required_by(dict_0, dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'a=2, b=1, c=3'
        var_0 = module_0.check_type_dict(str_0)
        str_1 = 'cWgt\n3E'
        dict_0 = {str_0: str_1, str_1: var_0, str_0: str_1}
        var_1 = module_0.check_required_by(dict_0, dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'state'
        str_1 = 'present'
        str_2 = 'path'
        str_3 = (str_2,)
        bool_0 = True
        var_0 = [str_0, str_1, str_3, bool_0]
        int_0 = 99
        str_4 = 'string_param'
        str_5 = (str_2, str_4)
        var_1 = [str_5, int_0, str_5]
        str_6 = 'other'
        str_7 = (str_1, str_4, str_6)
        var_2 = [str_3, int_0, str_7]
        var_3 = [str_6, str_1, str_0, bool_0]
        var_4 = [var_0, var_1, var_2, var_3]
        str_8 = 'foo'
        str_9 = {str_0: str_1, str_6: str_1, str_6: str_2, str_4: str_8}
        var_5 = module_0.check_required_if(var_4, str_9)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = True
        var_0 = dict(required=bool_0)
        var_1 = dict(required=bool_0)
        var_2 = dict()
        var_3 = dict(a=var_0, b=var_1, c=var_2)
        var_4 = dict(a=bool_0)
        var_5 = None
        var_6 = module_0.check_required_arguments(var_3, var_4, var_5)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'present'
        str_1 = 'state'
        str_2 = 'present'
        bool_0 = True
        var_0 = [str_1, str_2, str_0, bool_0]
        str_3 = 'someint'
        int_0 = 102
        str_4 = 'bool_param'
        str_5 = (str_4, str_2)
        var_1 = [str_3, int_0, str_5]
        var_2 = [var_0, var_1]
        bool_1 = False
        var_3 = {str_3: int_0, str_4: bool_1}
        var_4 = module_0.check_required_if(var_2, var_3)
    except BaseException:
        pass

def test_case_36():
    try:
        dict_0 = {}
        str_0 = 'C+Y_o#m'
        list_0 = [dict_0, dict_0, str_0]
        str_1 = 'RE9<\tQELr*|\ncU+3d$<`'
        var_0 = module_0.check_required_together(list_0, str_1)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '0z92P'
        float_0 = -2076.7
        var_0 = module_0.safe_eval(str_0, float_0)
        str_1 = 'os.path()'
        int_0 = 1948
        str_2 = '^lQ]_f%%{-pxEM\\{t'
        var_1 = module_0.safe_eval(str_1, int_0, str_2)
        bytes_0 = b'i\xa6\xe0b\xc5w\x15\x00\xe4\xb1H\xfa\xa2\xad\xda\xb9\xbb'
        str_3 = 'P'
        var_2 = module_0.check_required_together(bytes_0, str_3)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = '\x0b/n'
        var_0 = module_0.check_type_path(str_0)
        int_0 = -112
        var_1 = module_0.check_missing_parameters(int_0)
        str_1 = 'a=2, b=1, c\\=3'
        var_2 = module_0.check_type_dict(str_1)
        str_2 = 'uK\rm*zi]J;)X_/6P ('
        var_3 = module_0.check_type_int(str_2)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'import os'
        var_0 = module_0.safe_eval(str_0)
        bytes_0 = b'\xa7\x91Y\x1b\xda\x07\x82\xb00\x13\x0fH\x04T)\xa4\xf8E\x9d'
        str_1 = '/l7iPK:Bhe?WFoK'
        list_0 = [str_0, bytes_0, str_1]
        str_2 = ',H}SV\\NAE\x0cG;4oXkjm7'
        float_0 = None
        dict_0 = {str_0: str_1, str_2: float_0, bytes_0: var_0, str_0: float_0}
        var_1 = module_0.check_required_together(list_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = '{U#ia={-W}VMG\x0bnjNE8E'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass