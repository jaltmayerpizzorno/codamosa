# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 2306
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)

def test_case_2():
    set_0 = None
    float_0 = 1733.746473
    bool_0 = False
    try_0 = module_0.Try(float_0, bool_0)
    bool_1 = try_0.__eq__(set_0)

def test_case_3():
    str_0 = '\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    '
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    str_1 = try_0.__str__()

def test_case_4():
    bool_0 = True
    str_0 = '^z2-$~>\x0b-d'
    bool_1 = False
    bool_2 = False
    list_0 = [bool_0, str_0, str_0]
    bool_3 = False
    try_0 = module_0.Try(list_0, bool_3)
    var_0 = try_0.map(bool_2)
    str_1 = '\n        Evaluate function and memoize her output or return memoized value when function was evaluated.\n\n        :returns: result of function in Lazy\n        :rtype: A\n        '
    dict_0 = {bool_0: bool_1, str_0: str_1}
    try_1 = module_0.Try(str_0, bool_1)
    var_1 = try_1.bind(dict_0)
    try_2 = module_0.Try(str_0, bool_1)
    complex_0 = None
    var_2 = try_2.filter(complex_0)
    var_3 = try_2.on_success(bool_0)

def test_case_5():
    int_0 = -1345
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    float_0 = 4354.0
    var_0 = try_0.on_fail(float_0)
    bytes_0 = b'\x1b"J3C\x18\x00'
    bool_1 = False
    try_1 = module_0.Try(bytes_0, bool_1)
    var_1 = try_1.bind(try_0)
    bool_2 = try_1.__eq__(try_0)

def test_case_6():
    tuple_0 = ()
    int_0 = 1899
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    str_0 = try_0.__str__()
    list_0 = [tuple_0, tuple_0, tuple_0]
    bytes_0 = b'\xcf\x7f^'
    tuple_1 = (bytes_0,)
    bool_1 = False
    try_1 = module_0.Try(tuple_1, bool_1)
    var_0 = try_1.on_success(list_0)
    var_1 = try_1.on_success(try_1)

def test_case_7():
    str_0 = 'l5cxl1)QzO%'
    bool_0 = True
    try_0 = module_0.Try(str_0, bool_0)
    int_0 = 1808
    bool_1 = False
    try_1 = module_0.Try(int_0, bool_1)
    try_2 = module_0.Try(try_1, bool_1)
    var_0 = try_2.filter(try_0)

def test_case_8():
    int_0 = 2306
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    var_0 = try_0.get()

def test_case_9():
    set_0 = None
    float_0 = 1733.746473
    bool_0 = False
    bytes_0 = b'\x8bk'
    list_0 = []
    try_0 = module_0.Try(list_0, bool_0)
    var_0 = try_0.get_or_else(bytes_0)
    try_1 = module_0.Try(float_0, bool_0)
    bool_1 = try_1.__eq__(set_0)