# Automatically generated by Pynguin.
import tornado.ioloop as module_0
import tornado.tcpclient as module_1
import tornado.netutil as module_2
import socket as module_3
import concurrent.futures._base as module_4
import _asyncio as module_5
import datetime as module_6

def test_case_0():
    try:
        list_0 = []
        i_o_loop_0 = module_0.IOLoop()
        connector_0 = module_1._Connector(list_0, i_o_loop_0)
    except BaseException:
        pass

def test_case_1():
    try:
        resolver_0 = module_2.Resolver()
        resolver_0.close()
        t_c_p_client_0 = module_1.TCPClient(resolver_0)
        t_c_p_client_1 = module_1.TCPClient()
        i_o_loop_0 = module_0.IOLoop()
        address_family_0 = module_3.AddressFamily.AF_LLC
        tuple_0 = (address_family_0,)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        connector_0 = module_1._Connector(list_0, address_family_0)
    except BaseException:
        pass

def test_case_2():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = 'remove_timeout'
        connector_0 = module_1._Connector(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = 'remove_timeout'
        list_0 = []
        tuple_0 = (str_0, list_0)
        list_1 = [tuple_0, tuple_0, tuple_0]
        list_2 = []
        tuple_1 = (list_2, list_2)
        connector_0 = module_1._Connector(list_1, tuple_1)
        t_c_p_client_0 = module_1.TCPClient()
        float_0 = 0.0
        future_0 = connector_0.start(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = '\n7z'
        list_0 = []
        tuple_0 = (str_0, list_0)
        list_1 = [tuple_0, tuple_0, tuple_0]
        list_2 = []
        tuple_1 = (list_2, list_2)
        connector_0 = module_1._Connector(list_1, tuple_1)
        t_c_p_client_0 = module_1.TCPClient()
        float_0 = -1881.892
        connector_0.set_timeout(float_0)
        float_1 = 0.0
        future_0 = connector_0.start(float_1)
    except BaseException:
        pass

def test_case_5():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = '\nlz'
        list_0 = []
        tuple_0 = (str_0, list_0)
        str_1 = 'TORNADO_EXTENSION'
        list_1 = [tuple_0, tuple_0, tuple_0]
        list_2 = []
        tuple_1 = (list_2, list_2)
        connector_0 = module_1._Connector(list_1, tuple_1)
        float_0 = -1123.82144
        connector_0.set_connect_timeout(float_0)
        t_c_p_client_0 = module_1.TCPClient()
        tuple_2 = (list_0, str_1, connector_0, t_c_p_client_0)
        i_o_loop_0.clear_instance()
        list_3 = [tuple_0, tuple_0, tuple_0, tuple_2]
        callable_0 = None
        connector_1 = module_1._Connector(list_3, callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = 'o\nl'
        list_0 = []
        tuple_0 = (str_0, list_0)
        list_1 = [tuple_0, tuple_0, tuple_0]
        future_0 = module_4.Future()
        list_2 = []
        tuple_1 = (list_2, list_2)
        connector_0 = module_1._Connector(list_1, tuple_1)
        iterator_0 = None
        connector_0.on_timeout()
        address_family_0 = None
        future_1 = module_5.Future(*list_0)
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_1)
    except BaseException:
        pass

def test_case_7():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = 'o\nl'
        list_0 = []
        tuple_0 = (str_0, list_0)
        list_1 = [tuple_0, tuple_0]
        future_0 = module_4.Future()
        connector_0 = module_1._Connector(list_1, str_0)
        connector_0.clear_timeouts()
        connector_0.clear_timeout()
        str_1 = '\nlz'
        int_0 = None
        t_c_p_client_0 = module_1.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_1, int_0)
        iterator_0 = None
        connector_0.on_timeout()
        address_family_0 = None
        future_1 = module_5.Future()
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_1)
    except BaseException:
        pass

def test_case_8():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = '\n7z'
        list_0 = []
        tuple_0 = (str_0, list_0)
        list_1 = []
        tuple_1 = (list_1, list_1)
        list_2 = [tuple_0, tuple_0, tuple_0]
        connector_0 = module_1._Connector(list_2, tuple_1)
        connector_0.on_connect_timeout()
        connector_0.on_timeout()
        tuple_2 = None
        connector_1 = module_1._Connector(list_2, tuple_2)
        future_0 = connector_0.start()
    except BaseException:
        pass

def test_case_9():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = 'o\nl'
        list_0 = []
        tuple_0 = (str_0, list_0)
        t_c_p_client_0 = module_1.TCPClient()
        future_0 = module_4.Future()
        str_1 = '(S(%'
        tuple_1 = (str_1, i_o_loop_0)
        list_1 = [tuple_1, tuple_0]
        set_0 = set()
        connector_0 = module_1._Connector(list_1, set_0)
        future_1 = connector_0.start()
    except BaseException:
        pass

def test_case_10():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = 'o\nl'
        list_0 = []
        tuple_0 = (str_0, list_0)
        list_1 = [tuple_0]
        future_0 = module_4.Future()
        str_1 = 'Z@tBX'
        bytes_0 = b'6\xc3\xe3\xdfj\xacA}\x9cpM\xc5\x05\xf2n\xf1F\xe7\xd0='
        connector_0 = module_1._Connector(list_1, bytes_0)
        tuple_1 = connector_0.split(list_1)
        connector_1 = module_1._Connector(list_1, str_1)
        connector_1.clear_timeouts()
        connector_1.clear_timeout()
        timedelta_0 = module_6.timedelta()
        connector_0.set_connect_timeout(timedelta_0)
        connector_0.clear_timeouts()
        timedelta_1 = module_6.timedelta()
        connector_1.set_connect_timeout(timedelta_1)
        str_2 = 'a(ubqQ(d{3V'
        connector_0.on_timeout()
        int_0 = None
        connector_0.on_connect_timeout()
        t_c_p_client_0 = module_1.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_2, int_0)
        callable_0 = None
        connector_2 = module_1._Connector(list_1, callable_0)
        connector_2.on_timeout()
        str_3 = "$aN9E)'cooTBmw{;"
        dict_0 = {str_2: connector_2, str_3: i_o_stream_0}
        future_1 = module_5.Future(*list_0, **dict_0)
    except BaseException:
        pass