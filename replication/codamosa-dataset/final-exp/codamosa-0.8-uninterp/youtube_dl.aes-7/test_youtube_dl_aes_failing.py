# Automatically generated by Pynguin.
import youtube_dl.aes as module_0
import base64 as module_1
import youtube_dl.utils as module_2

def test_case_0():
    try:
        complex_0 = None
        str_0 = '_HL\\7Z(*,@he>tM18'
        list_0 = [str_0, complex_0, str_0]
        bytes_0 = b'\xb6\x93\x1f\x15/\xa5'
        var_0 = module_0.aes_ctr_decrypt(complex_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        complex_0 = None
        int_0 = 722
        list_0 = [complex_0]
        var_0 = module_0.aes_cbc_decrypt(int_0, list_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        complex_0 = None
        float_0 = 296.802271
        str_0 = '_HL\\7Z(*,@he>tM18'
        list_0 = [str_0, complex_0, str_0]
        tuple_0 = (float_0, list_0, float_0)
        var_0 = module_0.aes_cbc_encrypt(tuple_0, list_0, complex_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ':<3R/I/Hm|i(CR'
        var_0 = module_0.key_expansion(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = None
        str_0 = '074b95bdee76b9e3654137aee9c79dfe'
        var_0 = module_0.aes_decrypt(float_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xc3A*\xe0\xd8\xcf?\x1cY\x1eG\xc4\xea8\xa8'
        var_0 = module_0.sub_bytes_inv(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '+GeG):JwlD#'
        var_0 = module_0.rotate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xed`\xc6\xb3\xd7"\xb6{\x9a-L&'
        var_0 = module_0.mix_columns(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b''
        var_0 = module_0.aes_encrypt(bytes_0, bytes_0)
        bytes_1 = b'\xcf\x02`'
        var_1 = module_0.mix_columns_inv(bytes_1)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        var_0 = module_0.shift_rows(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = set()
        var_0 = module_0.shift_rows_inv(set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\r'
        var_0 = module_0.inc(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 1843
        bytes_0 = b'z\x96X7\x12'
        bool_0 = False
        list_0 = [bool_0]
        var_0 = module_0.aes_cbc_encrypt(int_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'This is a test for the encrypt function'
        var_0 = module_1.b64decode(bytes_0)
        var_1 = module_2.bytes_to_intlist(var_0)
        str_0 = '2Q/vUzL1UcvN9IYWp/n1vw=='
        var_2 = module_1.b64decode(str_0)
        var_3 = module_2.bytes_to_intlist(var_2)
        var_4 = module_0.aes_cbc_encrypt(bytes_0, var_1, var_3)
    except BaseException:
        pass