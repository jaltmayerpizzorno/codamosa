# Automatically generated by Pynguin.
import youtube_dl.aes as module_0
import youtube_dl.utils as module_1
import base64 as module_2

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b''
    var_0 = module_0.aes_encrypt(bytes_0, bytes_0)

def test_case_2():
    str_0 = '_HL\\7Z(*,@he>tM18'
    set_0 = {str_0}
    tuple_0 = (set_0,)
    var_0 = module_0.aes_decrypt(tuple_0, tuple_0)
    bytes_0 = b'\xfe\x84\xf1\xd4i\x0e\x16\xd5\xfe\x8e\xce\x88\xd6Z\xdb.\xd0X\xa6'
    var_1 = module_0.mix_columns(bytes_0)

def test_case_3():
    str_0 = 'L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ=='
    str_1 = 'YELLOW SUBMARINE'
    int_0 = 16
    var_0 = module_0.aes_decrypt_text(str_0, str_1, int_0)
    str_2 = 'aes_decrypt_text: FAILED'
    var_1 = print(str_2)

def test_case_4():
    str_0 = '!^8jtED3Eu0v,1y?TO\tr'
    var_0 = module_0.shift_rows(str_0)

def test_case_5():
    int_0 = 0
    int_1 = [int_0]
    int_2 = 16
    var_0 = int_1 * int_2
    var_1 = module_0.inc(var_0)
    var_2 = print(var_1)

def test_case_6():
    int_0 = 255
    int_1 = [int_0]
    int_2 = 16
    var_0 = int_1 * int_2
    int_3 = [int_0]
    var_1 = int_3 * int_2
    int_4 = [int_0]
    var_2 = int_4 * int_2
    var_3 = module_0.inc(var_1)

def test_case_7():
    bytes_0 = b'\xbc\xcd\x14c\x01\xde\xb9\x8771\x1b\x15l\x0cI\x15\xdc\x9f'
    var_0 = module_0.mix_columns(bytes_0)

def test_case_8():
    str_0 = '0'
    int_0 = 32
    var_0 = str_0 * int_0
    int_1 = 16
    var_1 = str_0 * int_1
    var_2 = str_0 * int_1
    var_3 = module_1.bytes_to_intlist(var_2)
    var_4 = module_1.bytes_to_intlist(var_0)
    var_5 = module_1.bytes_to_intlist(var_1)
    var_6 = module_0.aes_cbc_decrypt(var_3, var_4, var_5)
    var_7 = module_1.bytes_to_intlist(var_6)
    var_8 = module_1.bytes_to_intlist(var_2)
    var_9 = str_0 * int_0
    var_10 = str_0 * int_1
    var_11 = module_1.bytes_to_intlist(var_9)
    var_12 = module_1.bytes_to_intlist(var_10)
    var_13 = module_0.aes_cbc_decrypt(var_7, var_11, var_12)
    var_14 = module_1.bytes_to_intlist(var_13)

def test_case_9():
    bytes_0 = b'00112233445566778899aabbccddeeff'
    var_0 = bytes_0 + bytes_0
    bytes_1 = b'000102030405060708090a0b0c0d0s0f'
    var_1 = module_1.bytes_to_intlist(bytes_1)
    var_2 = module_0.aes_cbc_encrypt(var_1, var_1, var_1)

def test_case_10():
    str_0 = 'KUEhVeS2Y8yXiWxPdXneuQ=='
    var_0 = module_2.b64decode(str_0)
    str_1 = 'uJTvsI+Yvf8WJbx7E9ev9w=='
    var_1 = module_2.b64decode(str_1)
    int_0 = 0
    int_1 = 2
    bytes_0 = b'\xea\x1f1ywN6,*\x9b3<'
    bool_0 = False
    var_2 = module_0.rijndael_mul(bytes_0, bool_0)
    int_2 = [int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_0, int_1]
    var_3 = module_1.intlist_to_bytes(int_2)
    var_4 = module_1.bytes_to_intlist(var_1)
    var_5 = module_1.bytes_to_intlist(var_0)