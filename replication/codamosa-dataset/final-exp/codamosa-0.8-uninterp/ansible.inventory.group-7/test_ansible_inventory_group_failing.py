# Automatically generated by Pynguin.
import ansible.inventory.group as module_0

def test_case_0():
    try:
        dict_0 = {}
        group_0 = module_0.Group()
        var_0 = group_0.get_descendants(**dict_0)
        var_1 = group_0.__getstate__()
        var_2 = group_0.get_name()
        str_0 = 'y{eYo,n5xq'
        var_3 = group_0.__setstate__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.serialize()
        var_1 = group_0.add_child_group(group_0)
    except BaseException:
        pass

def test_case_2():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_3():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.get_hosts()
        var_1 = group_0.add_child_group(group_0)
    except BaseException:
        pass

def test_case_4():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.remove_host(group_0)
        var_1 = group_0.add_child_group(group_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xa0r\xbc"'
        group_0 = module_0.Group()
        var_0 = group_0.set_priority(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'A'
        group_0 = module_0.Group(str_0)
        str_1 = 'B'
        group_1 = module_0.Group(str_1)
        var_0 = group_0.add_child_group(group_1)
        var_1 = group_1.add_child_group(group_0)
    except BaseException:
        pass

def test_case_7():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.serialize()
        int_0 = -1242
        str_0 = 'E7v6c\t'
        dict_0 = {int_0: str_0}
        str_1 = 'H'
        var_1 = module_0.to_safe_group_name(str_0, dict_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'group1_children'
        group_0 = module_0.Group(str_0)
        str_1 = '}1\x0c&jp*zi(E_{'
        group_1 = module_0.Group(str_1)
        var_0 = group_1.add_child_group(group_0)
        group_2 = module_0.Group(str_0)
        var_1 = group_2.add_child_group(group_0)
        group_3 = module_0.Group(str_1)
        var_2 = group_3.add_child_group(group_2)
        var_3 = group_3.add_child_group(group_3)
    except BaseException:
        pass

def test_case_9():
    try:
        group_0 = module_0.Group()
        str_0 = 'ansible_group_priority'
        str_1 = '5'
        var_0 = group_0.set_variable(str_0, str_1)
        str_2 = 'prority'
        var_1 = group_0.set_variable(str_2, str_1)
        str_3 = '10'
        var_2 = group_0.set_variable(str_0, str_3)
        str_4 = '10.5'
        var_3 = group_0.set_variable(str_0, str_4)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'g1'
        group_0 = module_0.Group(str_0)
        str_1 = 'g2'
        group_1 = module_0.Group(str_1)
        str_2 = 'g3'
        group_2 = module_0.Group(str_2)
        str_3 = 'g4'
        group_3 = module_0.Group(str_3)
        var_0 = group_0.add_child_group(group_1)
        var_1 = group_1.add_child_group(group_2)
        var_2 = group_2.add_child_group(group_3)
        var_3 = group_3.add_child_group(group_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'g1'
        group_0 = module_0.Group(str_0)
        str_1 = 'g2'
        group_1 = module_0.Group(str_1)
        str_2 = 'g3'
        group_2 = module_0.Group(str_2)
        str_3 = 'g4'
        group_3 = module_0.Group(str_3)
        var_0 = group_0.add_child_group(group_1)
        var_1 = group_1.add_child_group(group_2)
        var_2 = group_1.__getstate__()
        var_3 = group_2.add_child_group(group_3)
        var_4 = group_3.add_child_group(group_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Uy_MkSzaar-'
        group_0 = module_0.Group(str_0)
        group_1 = module_0.Group(str_0)
        str_1 = ''
        group_2 = module_0.Group()
        var_0 = group_0.remove_host(group_2)
        group_3 = module_0.Group(str_1)
        var_1 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'group1_children'
        str_1 = '}1\x0c&jp*zi(E_{'
        group_0 = module_0.Group(str_1)
        group_1 = module_0.Group(str_0)
        var_0 = group_1.add_child_group(group_0)
        str_2 = 'g2_0'
        group_2 = module_0.Group(str_2)
        var_1 = group_2.add_child_group(group_1)
        var_2 = group_2.add_child_group(group_2)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'group1_children'
        group_0 = module_0.Group(str_0)
        str_1 = 'g1_0'
        group_1 = module_0.Group(str_1)
        var_0 = group_1.add_child_group(group_0)
        str_2 = 'g1_1'
        group_2 = module_0.Group(str_2)
        var_1 = group_2.add_child_group(group_0)
        str_3 = 'g2_0'
        group_3 = module_0.Group(str_3)
        var_2 = group_3.add_child_group(group_2)
        var_3 = group_1.add_child_group(group_3)
        var_4 = group_2.add_child_group(group_3)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'group1_children'
        group_0 = module_0.Group(str_0)
        str_1 = '}1\x0c&jp*zi(E_{'
        group_1 = module_0.Group(str_1)
        var_0 = group_1.add_child_group(group_0)
        group_2 = module_0.Group(str_0)
        var_1 = group_2.add_child_group(group_0)
        str_2 = 'g2_0'
        group_3 = module_0.Group(str_2)
        var_2 = group_3.add_child_group(group_1)
        var_3 = group_3.add_child_group(group_2)
        var_4 = group_3.add_child_group(group_3)
    except BaseException:
        pass

def test_case_16():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.get_descendants()
        str_0 = '}1\x0c&jp*zi(E_'
        group_1 = module_0.Group(str_0)
        var_1 = group_1.add_child_group(group_0)
        var_2 = group_1.add_child_group(group_0)
        str_1 = 'g2&0'
        group_2 = module_0.Group(str_1)
        var_3 = group_2.get_vars()
        var_4 = group_2.add_child_group(group_1)
        set_0 = set()
        tuple_0 = None
        list_0 = [set_0, str_1]
        var_5 = group_1.set_variable(tuple_0, list_0)
        int_0 = 2118
        var_6 = group_0.add_child_group(int_0)
    except BaseException:
        pass