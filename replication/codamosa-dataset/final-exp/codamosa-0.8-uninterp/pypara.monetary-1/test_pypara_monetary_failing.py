# Automatically generated by Pynguin.
import pypara.monetary as module_0
import pypara.currencies as module_1
import decimal as module_2

def test_case_0():
    try:
        none_price_0 = module_0.NonePrice()
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.abs()
        bool_0 = money_0.is_equal(some_price_0)
        price_2 = price_0.subtract(price_1)
        bool_1 = price_1.__gt__(price_0)
        str_0 = '1J,w<WRg8#V['
        str_1 = 'pO&?:Y^'
        int_0 = 3116
        bool_2 = some_price_0.lte(price_1)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_3 = price_0.negative()
        price_4 = price_3.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_1():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.abs()
        var_0 = money_0.__round__()
        list_0 = [var_0, money_0, none_money_0, var_0]
        none_money_1 = module_0.NoneMoney(*list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        str_0 = 'AZN'
        str_1 = '0DBc5^g6f'
        currency_type_0 = module_1.CurrencyType.METAL
        dict_0 = {str_0: currency_type_0, str_1: currency_type_0, str_0: str_1}
        decimal_0 = module_2.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        price_0 = module_0.Price()
        int_0 = 0
        none_price_0 = module_0.NonePrice()
        price_1 = none_price_0.multiply(int_0)
        bool_0 = price_0.__eq__(none_price_0)
        str_0 = "Q[M.8\x0bq$_hZ',I\x0bx"
        dict_0 = {str_0: int_0}
        none_money_0 = module_0.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        none_price_0 = module_0.NonePrice()
        str_0 = 'WC3'
        int_0 = -1178
        currency_type_0 = None
        list_0 = [int_0]
        decimal_0 = module_2.Decimal(*list_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_0 = none_price_0.with_ccy(currency_0)
        int_1 = none_price_0.as_integer()
    except BaseException:
        pass

def test_case_5():
    try:
        price_0 = None
        str_0 = 'uCz9\x0c=\n4 M'
        int_0 = 964
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        list_0 = []
        decimal_0 = module_2.Decimal(*list_0)
        int_1 = 2
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        str_1 = ',o.Y+VJgXFb4##G`'
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0, str_1)
        set_0 = set()
        none_price_0 = module_0.NonePrice()
        price_1 = none_price_0.abs()
        price_2 = price_1.__truediv__(set_0)
        price_3 = price_2.floor_divide(incompatible_currency_error_0)
        price_4 = price_3.subtract(price_0)
    except BaseException:
        pass

def test_case_6():
    try:
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        int_0 = 1128
        dict_0 = {}
        none_money_0 = module_0.NoneMoney(**dict_0)
        money_0 = none_money_0.divide(int_0)
        money_1 = money_0.floor_divide(currency_type_0)
        money_2 = none_money_0.positive()
        var_0 = money_2.__round__()
        bool_0 = money_2.lt(money_0)
        int_1 = 31
        money_3 = money_1.round(int_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_7():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        str_0 = "' is already registered"
        str_1 = '`?\t\x0b'
        int_0 = -1762
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = -2676
        decimal_1 = module_2.Decimal()
        int_2 = -76
        currency_0 = module_1.Currency(str_1, str_0, int_1, currency_type_0, decimal_1, int_2)
        decimal_2 = currency_0.quantize(decimal_0)
        currency_1 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_2, int_2)
        money_1 = money_0.convert(currency_1)
        str_2 = '!4HT8cTJJcbM[D='
        int_3 = -4323
        none_money_1 = module_0.NoneMoney()
        str_3 = 'v<'
        currency_type_1 = module_1.CurrencyType.METAL
        currency_2 = module_1.Currency(str_3, str_2, int_3, currency_type_1, decimal_1, int_3)
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_8():
    try:
        price_0 = module_0.Price()
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = price_0.times(var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.__abs__()
        decimal_0 = module_2.Decimal()
        none_money_0 = module_0.NoneMoney()
        money_2 = none_money_0.negative()
        none_price_0 = module_0.NonePrice()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'MZN'
        str_1 = 'mYKeV@ [NzkHj$`ROu6u'
        int_0 = -5
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_0 = module_2.Decimal()
        int_1 = -254
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.scalar_add(currency_0)
        str_2 = 'TRS\x0c?}b<R2,oG'
        int_2 = -818
        currency_type_1 = module_1.CurrencyType.ALTERNATIVE
        decimal_1 = module_2.Decimal()
        currency_1 = module_1.Currency(str_2, str_2, int_2, currency_type_1, decimal_1, int_2)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_1, currency_1)
        bytes_0 = b'\xb36\xb1\x97\xbf\xce\xbd\xd7?\x9f\xfc\xee\x92\x92\x1bX'
        money_1 = none_money_0.scalar_subtract(bytes_0)
        none_price_0 = module_0.NonePrice()
        incompatible_currency_error_1 = module_0.IncompatibleCurrencyError(currency_0, currency_1)
        dict_0 = {str_2: incompatible_currency_error_1, incompatible_currency_error_1: int_1}
        price_0 = none_price_0.negative()
        var_0 = price_0.__round__(int_1)
        str_3 = 'AWE|[4#p)]'
        dict_1 = {str_0: dict_0, str_0: var_0, str_3: none_price_0}
        some_price_0 = module_0.SomePrice(**dict_1)
    except BaseException:
        pass

def test_case_11():
    try:
        price_0 = module_0.Price()
        var_0 = price_0.__round__()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'MZN'
        decimal_0 = None
        money_0 = module_0.Money()
        money_1 = money_0.with_qty(decimal_0)
        str_1 = 'mYKeV@ [NzkHj$`ROu6u'
        int_0 = -5
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_1 = module_2.Decimal()
        int_1 = -254
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_1)
        none_money_0 = module_0.NoneMoney()
        int_2 = -212
        float_0 = -1225.55908
        list_0 = [float_0, none_money_0]
        money_2 = none_money_0.negative()
        money_3 = money_2.__truediv__(list_0)
        money_4 = money_3.scalar_subtract(int_2)
        bool_0 = none_money_0.lt(money_4)
        str_2 = 'TRS\x0c?}b<R2,oG'
        int_3 = -826
        currency_type_1 = module_1.CurrencyType.ALTERNATIVE
        decimal_2 = module_2.Decimal()
        currency_1 = module_1.Currency(str_2, str_2, int_3, currency_type_1, decimal_2, int_3)
        list_1 = []
        some_price_0 = module_0.SomePrice(*list_1)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        currency_type_0 = module_1.CurrencyType.METAL
        price_0 = none_price_0.floor_divide(var_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.add(price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = some_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_2)
        price_4 = price_2.subtract(price_3)
        bool_1 = money_2.__gt__(money_1)
        int_0 = 31
        price_5 = price_4.round(int_0)
        bool_2 = price_3.__gt__(price_2)
        bool_3 = price_1.__gt__(price_3)
        bool_4 = money_1.__bool__()
        bool_5 = some_money_0.lte(money_1)
        bool_6 = some_money_0.lt(money_2)
        bool_7 = price_1.__gt__(price_3)
        price_6 = price_3.__abs__()
        str_0 = '1J,<Wg8#V['
        money_3 = money_0.multiply(var_0)
        bool_8 = some_price_0.lte(price_1)
        money_4 = money_2.__sub__(money_1)
        int_1 = -1074
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_1)
        price_7 = price_4.convert(currency_0)
    except BaseException:
        pass

def test_case_14():
    try:
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        str_0 = 'AZN'
        currency_type_0 = module_1.CurrencyType.METAL
        dict_0 = {str_0: currency_type_0, str_0: currency_type_0, str_0: str_0}
        decimal_0 = module_2.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        none_money_0 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        int_0 = 1128
        money_0 = none_money_0.divide(int_0)
        money_1 = money_0.floor_divide(currency_type_0)
        money_2 = none_money_0.positive()
        var_0 = money_2.__round__()
        bool_0 = money_2.lt(money_0)
        int_1 = 31
        money_3 = money_1.round(int_1)
        none_money_1 = module_0.NoneMoney()
        money_4 = money_0.__add__(money_2)
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_16():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__()
        str_0 = "' is already registered"
        int_0 = -1762
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        decimal_1 = module_2.Decimal()
        int_1 = -76
        str_1 = None
        int_2 = None
        currency_0 = module_1.Currency(str_1, str_0, int_2, currency_type_0, decimal_1, int_1)
        decimal_2 = currency_0.quantize(decimal_0)
        currency_1 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_2, int_1)
        money_1 = money_0.convert(currency_1)
        none_money_1 = module_0.NoneMoney()
        float_0 = money_1.as_float()
    except BaseException:
        pass

def test_case_17():
    try:
        none_money_0 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        int_0 = 1128
        dict_0 = {}
        none_money_1 = module_0.NoneMoney(**dict_0)
        money_0 = none_money_1.divide(int_0)
        money_1 = money_0.floor_divide(currency_type_0)
        money_2 = money_0.subtract(money_1)
        var_0 = money_2.__round__()
        bool_0 = money_2.lt(money_0)
        int_1 = 31
        money_3 = money_1.round(int_1)
        none_money_2 = module_0.NoneMoney()
        money_4 = money_0.__add__(money_2)
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        price_3 = price_0.scalar_subtract(var_0)
        bool_0 = price_2.__gt__(price_1)
        str_0 = '0?(*dWlemFs3@/iIO '
        currency_type_0 = module_1.CurrencyType.METAL
        dict_0 = {str_0: currency_type_0, str_0: currency_type_0, str_0: str_0}
        bool_1 = price_1.lte(price_2)
        decimal_0 = module_2.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.__neg__()
        price_2 = price_0.__abs__()
        bool_0 = price_0.as_boolean()
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'MZN'
        str_1 = 'mYKeV@ [NzkHj$`ROu6u'
        int_0 = -5
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_0 = module_2.Decimal()
        int_1 = -254
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_money_0 = module_0.NoneMoney()
        str_2 = 'TRS\x0c?}b<R2,oG'
        int_2 = -818
        currency_type_1 = module_1.CurrencyType.ALTERNATIVE
        decimal_1 = module_2.Decimal()
        currency_1 = module_1.Currency(str_2, str_2, int_2, currency_type_1, decimal_1, int_2)
        money_0 = none_money_0.with_qty(decimal_0)
        some_price_0 = None
        var_0 = currency_0.__le__(some_price_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_1, currency_1)
        none_price_0 = module_0.NonePrice()
        incompatible_currency_error_1 = module_0.IncompatibleCurrencyError(currency_0, currency_1)
        dict_0 = {str_2: incompatible_currency_error_1, incompatible_currency_error_1: int_1}
        price_0 = none_price_0.negative()
        var_1 = price_0.__round__(int_1)
        dict_1 = {str_0: dict_0, str_0: var_1, str_0: none_price_0}
        some_price_1 = module_0.SomePrice(**dict_1)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -2224
        str_0 = 'X\t4b AM'
        str_1 = 'mYKeV@ [NzkHj$`ROu6u'
        int_1 = -5
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.scalar_add(currency_0)
        str_2 = 'TRS\x0c?}b<R2,oG'
        int_2 = -818
        currency_type_1 = module_1.CurrencyType.ALTERNATIVE
        decimal_1 = module_2.Decimal()
        currency_1 = module_1.Currency(str_2, str_2, int_2, currency_type_1, decimal_1, int_2)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_1, currency_1)
        none_price_0 = module_0.NonePrice()
        incompatible_currency_error_1 = module_0.IncompatibleCurrencyError(currency_0, currency_1)
        int_3 = none_money_0.as_integer()
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        bool_0 = some_price_0.as_boolean()
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        price_2 = price_0.subtract(price_1)
        bool_1 = price_1.__gt__(price_0)
        bool_2 = price_2.lte(price_2)
        price_3 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_23():
    try:
        decimal_0 = module_2.Decimal()
        price_0 = module_0.Price()
        price_1 = price_0.with_qty(decimal_0)
        price_2 = price_1.negative()
    except BaseException:
        pass

def test_case_24():
    try:
        none_money_0 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        int_0 = 1128
        dict_0 = {}
        none_money_1 = module_0.NoneMoney(**dict_0)
        money_0 = none_money_1.divide(int_0)
        money_1 = money_0.floor_divide(currency_type_0)
        bool_0 = none_money_0.gte(money_1)
        money_2 = none_money_0.positive()
        var_0 = money_2.__round__()
        bool_1 = money_2.lt(money_0)
        int_1 = 31
        money_3 = money_1.round(int_1)
        none_money_2 = module_0.NoneMoney()
        money_4 = money_0.__add__(money_2)
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_25():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.abs()
    except BaseException:
        pass

def test_case_26():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = price_0.subtract(price_0)
        bool_0 = price_0.lte(price_0)
        price_2 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_27():
    try:
        none_money_0 = module_0.NoneMoney()
        none_price_0 = module_0.NonePrice()
        float_0 = none_price_0.as_float()
    except BaseException:
        pass

def test_case_28():
    try:
        decimal_0 = None
        money_0 = module_0.Money()
        money_1 = money_0.with_qty(decimal_0)
        decimal_1 = module_2.Decimal()
        none_money_0 = module_0.NoneMoney()
        int_0 = -212
        float_0 = -1225.55908
        list_0 = [float_0, none_money_0]
        money_2 = none_money_0.negative()
        money_3 = money_2.__truediv__(list_0)
        money_4 = money_3.scalar_subtract(int_0)
        bool_0 = none_money_0.lt(money_4)
        str_0 = 'TRS\x0c?}b<R2,oG'
        int_1 = -826
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        decimal_2 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_1, currency_type_0, decimal_2, int_1)
        int_2 = -515
        var_0 = money_4.__round__(int_2)
        list_1 = []
        some_price_0 = module_0.SomePrice(*list_1)
    except BaseException:
        pass

def test_case_29():
    try:
        decimal_0 = module_2.Decimal()
        price_0 = module_0.Price()
        price_1 = price_0.positive()
    except BaseException:
        pass

def test_case_30():
    try:
        price_0 = module_0.Price()
        date_0 = None
        price_1 = price_0.with_dov(date_0)
        price_2 = price_0.abs()
    except BaseException:
        pass

def test_case_31():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        price_2 = none_price_0.scalar_add(var_0)
        bool_0 = price_1.__gt__(price_0)
        bool_1 = price_0.lte(price_1)
        price_3 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '1'
        var_0 = None
        list_0 = [str_0, str_0, str_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_33():
    try:
        price_0 = None
        none_price_0 = module_0.NonePrice()
        bool_0 = none_price_0.gte(price_0)
    except BaseException:
        pass

def test_case_34():
    try:
        decimal_0 = module_2.Decimal()
        float_0 = -403.0337
        price_0 = module_0.Price()
        price_1 = price_0.floor_divide(float_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '\n        Checks the equality of two price objects.\n\n        In particular:\n\n        1. ``True`` if ``other`` is a price object **and** all slots are same.\n        2. ``False`` otherwise.\n        '
        list_0 = [str_0, str_0, str_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = -2217
        complex_0 = None
        list_0 = [int_0, complex_0, int_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.multiply(int_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '&D[o`rH*$12nPim'
        list_0 = [str_0, str_0, str_0]
        some_price_0 = module_0.SomePrice(*list_0)
        float_0 = some_price_0.as_float()
    except BaseException:
        pass

def test_case_38():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.__add__(money_0)
        currency_0 = None
        money_2 = money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_39():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        price_1 = price_0.scalar_subtract(var_0)
        price_2 = price_0.floor_divide(var_0)
        bool_0 = price_1.__le__(price_2)
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        bool_1 = some_price_0.gt(price_1)
        price_3 = some_price_0.positive()
        price_4 = price_3.__floordiv__(var_0)
    except BaseException:
        pass

def test_case_40():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        price_1 = price_0.negative()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_1)
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_41():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        price_1 = price_0.negative()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_1)
        bool_0 = price_2.is_equal(some_price_0)
        str_0 = 'AZN'
        str_1 = '0DBc5^g6f'
        currency_type_0 = module_1.CurrencyType.METAL
        dict_0 = {str_0: currency_type_0, str_1: currency_type_0, str_0: str_1}
        decimal_0 = module_2.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_42():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        price_1 = price_0.scalar_subtract(var_0)
        price_2 = price_0.floor_divide(var_0)
        bool_0 = price_1.__le__(price_2)
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        bool_1 = some_price_0.gt(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_43():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = none_price_0.floor_divide(var_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.add(price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = some_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_2)
        price_4 = price_2.subtract(price_3)
        bool_1 = money_2.__gt__(money_1)
        bool_2 = price_3.__gt__(price_2)
        bool_3 = price_1.__gt__(price_3)
        bool_4 = money_1.__bool__()
        bool_5 = some_money_0.lte(money_1)
        bool_6 = some_money_0.lt(money_2)
        bool_7 = price_1.__gt__(price_3)
        bool_8 = some_price_0.gte(price_3)
        price_5 = price_3.__abs__()
        bool_9 = some_price_0.lte(price_1)
        money_3 = money_2.__sub__(money_1)
        money_4 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_44():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.positive()
        int_0 = -2349
        price_2 = some_price_0.round(int_0)
        price_3 = some_price_0.add(price_1)
        price_4 = price_1.subtract(price_3)
        bool_0 = price_3.__gt__(price_1)
        str_0 = '1J,w<WRg8#V['
        str_1 = 'pO&?:Y^'
        int_1 = 3116
        bool_1 = some_price_0.lte(price_3)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_1)
        price_5 = price_1.negative()
        price_6 = price_5.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_45():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.round()
    except BaseException:
        pass

def test_case_46():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'4]gPB|!z0lODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3272
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_0 = price_0.times(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = some_money_0.add(money_1)
        price_1 = some_price_0.multiply(var_0)
    except BaseException:
        pass

def test_case_47():
    try:
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        str_0 = 'ylG)Q\t\n ohF}?+ZZ~Z'
        price_2 = price_1.scalar_add(str_0)
    except BaseException:
        pass

def test_case_48():
    try:
        price_0 = module_0.Price()
        int_0 = 0
        float_0 = price_0.__float__()
        none_price_0 = module_0.NonePrice()
        price_1 = none_price_0.multiply(int_0)
        bool_0 = price_0.__eq__(none_price_0)
        str_0 = "Q[M.8\x0bq$_hZ',I\x0bx"
        dict_0 = {str_0: int_0}
        none_money_0 = module_0.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_49():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_50():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_51():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        decimal_0 = None
        price_3 = some_price_0.with_qty(decimal_0)
        price_4 = price_0.scalar_subtract(var_0)
        bool_0 = price_2.__gt__(price_1)
        str_0 = '0?(*dWlemFs3@/iIO '
        currency_type_0 = module_1.CurrencyType.METAL
        dict_0 = {str_0: currency_type_0, str_0: currency_type_0, str_0: str_0}
        bool_1 = price_1.lte(price_2)
        decimal_1 = module_2.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_52():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        price_1 = none_price_0.negative()
        price_2 = price_0.negative()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_3 = price_0.negative()
        price_4 = some_price_0.positive()
        price_5 = some_price_0.add(price_2)
        bool_0 = price_4.__ge__(price_4)
        str_0 = 'AZN'
        str_1 = '0DBc5^g6f'
        bool_1 = price_5.is_equal(var_0)
        currency_type_0 = module_1.CurrencyType.METAL
        dict_0 = {str_0: currency_type_0, str_1: currency_type_0, str_0: str_1}
        decimal_0 = module_2.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_53():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        price_2 = module_0.Price()
        price_3 = price_2.multiply(var_0)
    except BaseException:
        pass

def test_case_54():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        var_0 = None
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        price_2 = price_1.subtract(price_0)
        bool_0 = price_0.__gt__(price_1)
        int_0 = 3116
        bool_1 = some_price_0.lte(price_1)
        decimal_0 = module_2.Decimal()
        str_0 = ">q3'L6:5b=#[2;1dR"
        str_1 = 'l'
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_3 = price_2.negative()
        price_4 = price_0.convert(currency_0)
        bool_2 = price_3.lte(price_1)
        price_5 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_55():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        price_2 = price_0.subtract(price_1)
        bool_0 = price_1.__gt__(price_0)
        bool_1 = price_0.lte(price_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_56():
    try:
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        price_2 = price_0.subtract(price_1)
        bool_0 = price_1.__gt__(price_0)
        int_0 = some_price_0.as_integer()
    except BaseException:
        pass

def test_case_57():
    try:
        none_price_0 = module_0.NonePrice()
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        str_0 = '1J,w<WRg8#V['
        str_1 = 'pO&?:Y^'
        int_0 = 3116
        bool_0 = some_price_0.lte(price_1)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_2 = price_0.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_58():
    try:
        none_price_0 = module_0.NonePrice()
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        price_2 = price_0.subtract(price_1)
        bool_0 = price_1.__gt__(price_0)
        str_0 = '1J,w<WRg8#V['
        str_1 = 'pO&?:Y^'
        int_0 = 3116
        bool_1 = some_price_0.lte(price_1)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_3 = price_0.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_59():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        bool_0 = some_price_0.as_boolean()
        price_0 = some_price_0.positive()
        bool_1 = price_0.__gt__(price_0)
        bool_2 = some_price_0.lte(price_0)
        decimal_0 = module_2.Decimal()
        money_0 = some_price_0.times(var_0)
    except BaseException:
        pass

def test_case_60():
    try:
        none_price_0 = module_0.NonePrice()
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.add(price_0)
        price_2 = price_0.subtract(price_1)
        bool_0 = price_1.__gt__(price_0)
        str_0 = 'pO&?:Y^'
        int_0 = 3116
        str_1 = 'pO&?:Y^'
        int_1 = -1432
        bool_1 = some_price_0.lte(price_2)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        int_2 = -330
        currency_0 = module_1.Currency(str_1, str_0, int_2, currency_type_0, decimal_0, int_1)
        price_3 = price_2.negative()
        str_2 = 'x'
        str_3 = '\n    Type definition of the program which builds general ledger.\n    '
        int_3 = 1679
        currency_1 = module_1.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_3)
        bool_2 = True
        price_4 = price_1.with_ccy(currency_0)
        price_5 = price_4.convert(currency_1, bool_2)
    except BaseException:
        pass

def test_case_61():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        bool_0 = price_1.__bool__()
        price_3 = price_2.subtract(price_0)
        bool_1 = price_0.__gt__(price_1)
        str_0 = '1J,w<WRg8#V['
        list_1 = [str_0, list_0, price_1]
        some_price_1 = module_0.SomePrice(*list_1)
        bool_2 = some_price_1.lte(price_3)
    except BaseException:
        pass

def test_case_62():
    try:
        none_price_0 = module_0.NonePrice()
        var_0 = None
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        int_0 = 893
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 772
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_0.times(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        price_3 = price_1.subtract(price_2)
        bool_1 = price_2.__gt__(price_1)
        str_1 = '1J,w<WRg8#V['
        str_2 = '\rA\t.69\r(#'
        int_2 = 3116
        bool_2 = some_price_0.lte(price_2)
        currency_type_1 = module_1.CurrencyType.MONEY
        currency_1 = module_1.Currency(str_1, str_2, int_2, currency_type_1, decimal_0, int_2)
        price_4 = price_2.__floordiv__(var_0)
    except BaseException:
        pass

def test_case_63():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        currency_type_0 = module_1.CurrencyType.METAL
        price_0 = none_price_0.floor_divide(var_0)
        price_1 = price_0.add(price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_2)
        bool_0 = price_3.__gt__(price_2)
        bool_1 = price_1.__gt__(price_3)
        str_0 = 'p0\n?:'
        int_0 = 30
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        bool_2 = True
        money_0 = some_money_0.convert(currency_0, bool_2)
    except BaseException:
        pass

def test_case_64():
    try:
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'4]gPB|!z0lODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.positive()
        bool_0 = some_price_0.as_boolean()
        price_1 = some_price_0.add(price_0)
        price_2 = none_price_0.with_qty(decimal_0)
        bool_1 = price_1.__gt__(price_0)
        bool_2 = price_0.__gt__(price_1)
        price_3 = some_price_0.positive()
        price_4 = price_0.negative()
        bool_3 = price_4.__gt__(price_4)
        money_0 = some_money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_65():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        int_0 = 893
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 769
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.negative()
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_2)
        bool_0 = price_3.__gt__(price_2)
        currency_type_1 = module_1.CurrencyType.MONEY
        str_2 = '-\r^}A>Jaf3'
        dict_0 = {str_0: currency_type_1, str_2: int_1}
        decimal_1 = module_2.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_66():
    try:
        var_0 = None
        list_0 = [var_0, var_0, var_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.divide(var_0)
    except BaseException:
        pass

def test_case_67():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        int_0 = 893
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 769
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        bool_0 = True
        price_0 = none_price_0.convert(currency_0, bool_0)
        price_1 = price_0.__abs__()
        money_0 = price_1.times(var_0)
        price_2 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        price_3 = some_price_0.add(price_1)
        price_4 = module_0.Price()
        price_5 = price_4.subtract(price_3)
    except BaseException:
        pass

def test_case_68():
    try:
        none_price_0 = module_0.NonePrice()
        var_0 = None
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        int_0 = 893
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 769
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_0.times(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.lt(money_1)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        price_3 = price_1.subtract(price_2)
        bool_1 = price_2.__gt__(price_1)
        bool_2 = some_price_0.lte(price_2)
        price_4 = none_price_0.floor_divide(var_0)
        price_5 = module_0.Price()
        price_6 = price_5.convert(currency_0)
    except BaseException:
        pass

def test_case_69():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = none_price_0.floor_divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        price_3 = price_1.subtract(price_2)
        bool_0 = some_price_0.gte(price_0)
        bool_1 = some_price_0.lt(price_2)
        none_money_0 = module_0.NoneMoney()
        price_4 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_70():
    try:
        var_0 = None
        price_0 = module_0.Price()
        price_1 = price_0.__truediv__(var_0)
        float_0 = price_1.__float__()
    except BaseException:
        pass

def test_case_71():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZs\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_1 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_1.times(var_0)
        price_2 = price_1.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_0)
        money_1 = money_0.__pos__()
        price_3 = some_price_0.add(price_0)
        price_4 = price_0.subtract(price_3)
        bool_1 = money_0.__gt__(money_0)
        bool_2 = price_2.__gt__(price_3)
        bool_3 = some_price_0.lte(price_3)
        date_0 = None
        money_2 = money_1.with_dov(date_0)
        decimal_1 = module_2.Decimal()
        bool_4 = some_price_0.gte(price_3)
        bool_5 = some_price_0.lt(price_3)
        decimal_2 = currency_0.quantize(decimal_0)
        price_5 = price_4.convert(currency_0)
    except BaseException:
        pass

def test_case_72():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        int_0 = 893
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 769
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = some_money_0.round()
    except BaseException:
        pass

def test_case_73():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        int_0 = 893
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 769
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = some_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.with_ccy(currency_0)
        price_4 = price_2.subtract(price_3)
    except BaseException:
        pass

def test_case_74():
    try:
        price_0 = module_0.Price()
        str_0 = '1J,w<WRg8#V['
        int_0 = 1737
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_1 = price_0.with_ccy(currency_0)
        price_2 = price_0.__abs__()
        bool_0 = price_0.as_boolean()
    except BaseException:
        pass

def test_case_75():
    try:
        none_price_0 = module_0.NonePrice()
        var_0 = None
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        int_0 = 893
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 772
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_1 = price_0.times(var_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        money_2 = some_money_1.subtract(money_1)
        bool_0 = some_money_1.lt(money_2)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        price_3 = price_1.subtract(price_2)
        price_4 = some_price_0.add(price_3)
        price_5 = price_1.subtract(price_2)
        bool_1 = price_0.__gt__(price_1)
        money_3 = money_0.add(money_1)
        date_0 = None
        price_6 = some_price_0.with_dov(date_0)
        bool_2 = some_price_0.lte(price_4)
        decimal_1 = module_2.Decimal()
        bool_3 = some_price_0.gte(price_2)
        price_7 = none_price_1.floor_divide(var_0)
        price_8 = price_1.convert(currency_0, bool_3)
    except BaseException:
        pass

def test_case_76():
    try:
        none_price_0 = module_0.NonePrice()
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        int_0 = 893
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 772
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        none_price_2 = module_0.NonePrice()
        int_2 = money_0.__int__()
    except BaseException:
        pass

def test_case_77():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZs\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_1 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_1.times(var_0)
        price_2 = price_1.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_0)
        money_1 = some_money_0.add(money_0)
        price_3 = some_price_0.add(price_0)
        price_4 = price_0.subtract(price_3)
        bool_1 = money_0.__gt__(money_0)
        bool_2 = price_2.__gt__(price_3)
        bool_3 = some_price_0.lte(price_3)
        date_0 = None
        money_2 = money_1.with_dov(date_0)
        decimal_1 = module_2.Decimal()
        bool_4 = some_price_0.gte(price_3)
        bool_5 = some_price_0.lt(price_3)
        decimal_2 = currency_0.quantize(decimal_0)
        price_5 = price_4.convert(currency_0)
    except BaseException:
        pass

def test_case_78():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'4]gPB|!z0lODD7"
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        money_0 = price_0.times(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = price_0.times(var_0)
        money_3 = some_money_0.add(money_1)
        price_1 = some_price_0.add(price_0)
        price_2 = price_1.subtract(price_1)
        bool_0 = money_3.__gt__(money_1)
        bool_1 = price_1.__gt__(price_0)
        bool_2 = price_1.__gt__(price_1)
        bool_3 = money_1.__bool__()
        price_3 = some_price_0.positive()
        bool_4 = some_money_0.gte(money_1)
        bool_5 = money_1.__gt__(money_0)
        price_4 = price_2.negative()
        bool_6 = price_2.__gt__(price_2)
        bool_7 = price_0.__gt__(price_3)
        bool_8 = money_2.__bool__()
        price_5 = price_3.add(price_4)
        bool_9 = some_price_0.lte(price_5)
        decimal_1 = module_2.Decimal()
        price_6 = price_2.convert(currency_0, money_1)
    except BaseException:
        pass

def test_case_79():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZs\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.round(int_0)
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_1 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_1.times(var_0)
        price_2 = price_1.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = some_money_0.add(money_1)
        price_3 = some_price_0.positive()
        price_4 = some_price_0.add(price_3)
        price_5 = price_3.subtract(price_4)
        bool_1 = money_0.__gt__(money_0)
        bool_2 = price_4.__gt__(price_3)
        bool_3 = price_2.__gt__(price_4)
        bool_4 = some_price_0.lte(price_4)
        decimal_1 = module_2.Decimal()
        decimal_2 = module_2.Decimal()
        money_3 = some_money_0.with_qty(decimal_2)
    except BaseException:
        pass

def test_case_80():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZs\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = some_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_2)
        price_4 = price_2.subtract(price_3)
        bool_1 = money_0.__gt__(money_0)
        bool_2 = price_3.__gt__(price_2)
        bool_3 = price_3.__eq__(bool_0)
        bool_4 = price_1.__gt__(price_3)
        money_3 = module_0.Money()
        bool_5 = some_price_0.lte(price_3)
        money_4 = money_3.add(money_2)
    except BaseException:
        pass

def test_case_81():
    try:
        price_0 = module_0.Price()
        bool_0 = price_0.lt(price_0)
        list_0 = [price_0]
        none_money_0 = module_0.NoneMoney(*list_0)
    except BaseException:
        pass

def test_case_82():
    try:
        var_0 = None
        list_0 = [var_0, var_0, var_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_83():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = -287
        price_0 = some_price_0.round(int_0)
        str_0 = ';64p+cZEh+FZs\\@StOP'
        str_1 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = -3281
        price_1 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_2 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_0 = price_2.times(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = some_money_0.add(money_1)
        price_3 = some_price_0.positive()
        price_4 = some_price_0.add(price_3)
        price_5 = price_3.subtract(price_4)
        bool_1 = some_money_0.gte(money_0)
        bool_2 = money_0.__gt__(money_0)
        bool_3 = some_price_0.gte(price_1)
        bool_4 = some_price_0.lt(price_4)
        decimal_1 = currency_0.quantize(decimal_0)
        none_money_0 = module_0.NoneMoney()
        money_3 = money_2.with_ccy(currency_0)
        money_4 = money_2.__pos__()
        price_6 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_84():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = some_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = none_price_0.abs()
        bool_1 = none_price_0.lt(price_3)
        price_4 = some_price_0.add(price_2)
        price_5 = price_2.subtract(price_4)
        bool_2 = money_2.__gt__(money_1)
        bool_3 = price_4.__gt__(price_2)
        bool_4 = price_1.__gt__(price_4)
        bool_5 = money_1.__bool__()
        bool_6 = some_money_0.lte(money_1)
        decimal_1 = module_2.Decimal()
        bool_7 = some_money_0.lt(money_2)
        bool_8 = some_price_0.gte(price_4)
        bool_9 = some_price_0.lt(price_4)
        decimal_2 = currency_0.quantize(decimal_0)
        float_0 = some_money_0.as_float()
    except BaseException:
        pass

def test_case_85():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = some_money_0.add(money_0)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_0)
        price_4 = price_3.subtract(price_1)
        money_3 = some_money_0.with_ccy(currency_0)
        bool_1 = money_1.__gt__(money_3)
    except BaseException:
        pass

def test_case_86():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        money_1 = some_money_1.subtract(money_0)
        bool_0 = some_money_1.gte(money_1)
        money_2 = some_money_1.add(money_0)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_2)
        price_4 = price_3.subtract(price_3)
        bool_1 = money_1.__gt__(money_0)
        price_5 = some_price_0.with_ccy(currency_0)
        bool_2 = price_5.__gt__(price_3)
    except BaseException:
        pass

def test_case_87():
    try:
        int_0 = -3790
        list_0 = [int_0]
        money_0 = module_0.Money()
        float_0 = money_0.__float__()
        str_0 = ')lVu``([T$sSz0m;8u>'
        dict_0 = {str_0: list_0}
        none_price_0 = module_0.NonePrice(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_88():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'\\]gPB\\!z0PODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        money_0 = price_0.times(var_0)
        price_1 = price_0.__neg__()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = some_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_2)
        price_4 = price_2.subtract(price_3)
        bool_1 = money_2.__gt__(money_1)
        bool_2 = price_3.__gt__(price_2)
        bool_3 = price_1.__gt__(price_3)
        bool_4 = money_1.__bool__()
        bool_5 = some_money_0.lte(money_1)
        decimal_1 = module_2.Decimal()
        bool_6 = some_money_0.lt(money_2)
        bool_7 = some_money_0.is_equal(some_money_0)
        bool_8 = some_price_0.gte(price_3)
        bool_9 = price_1.__gt__(price_3)
        bool_10 = money_1.__bool__()
        bool_11 = some_price_0.lte(price_2)
        decimal_2 = module_2.Decimal()
        price_5 = price_2.convert(currency_0, bool_6)
    except BaseException:
        pass

def test_case_89():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'4]gPB|!z0lODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3281
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        money_0 = price_0.times(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = some_money_0.add(money_1)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        price_3 = price_1.subtract(price_2)
        bool_0 = money_2.__gt__(money_1)
        bool_1 = price_2.__gt__(price_1)
        bool_2 = price_1.__gt__(price_2)
        bool_3 = money_1.__bool__()
        price_4 = some_price_0.positive()
        price_5 = some_price_0.add(price_2)
        money_3 = some_money_0.with_ccy(currency_0)
        money_4 = money_3.__add__(money_2)
    except BaseException:
        pass

def test_case_90():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'4]gPB|!z0lODD7"
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        decimal_0 = module_2.Decimal()
        int_0 = 29
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        money_0 = price_0.times(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = some_money_0.add(money_1)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.add(price_1)
        price_3 = price_0.subtract(price_1)
        bool_0 = money_2.__gt__(money_1)
        bool_1 = price_0.__gt__(price_2)
        money_3 = money_2.__sub__(money_0)
        bool_2 = price_3.__gt__(price_2)
        bool_3 = money_0.__bool__()
        price_4 = some_price_0.with_ccy(currency_0)
        price_5 = some_price_0.add(price_4)
    except BaseException:
        pass

def test_case_91():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.__sub__(price_0)
        price_2 = price_0.__abs__()
        bool_0 = price_0.as_boolean()
    except BaseException:
        pass

def test_case_92():
    try:
        price_0 = module_0.Price()
        price_1 = module_0.Price()
        price_2 = price_0.add(price_1)
    except BaseException:
        pass

def test_case_93():
    try:
        price_0 = module_0.Price()
        none_price_0 = module_0.NonePrice()
        var_0 = None
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';64p+cZEh+FZ]\\@StOP'
        int_0 = 893
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 772
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        bool_0 = some_money_0.as_boolean()
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        bool_1 = money_0.gt(money_0)
        price_1 = none_price_0.convert(currency_0, incompatible_currency_error_0)
        money_1 = some_money_0.subtract(money_0)
        bool_2 = some_money_0.lt(money_1)
        price_2 = some_price_0.add(price_1)
        bool_3 = some_money_0.is_equal(list_0)
        price_3 = price_2.subtract(price_2)
        price_4 = some_price_0.add(price_3)
        bool_4 = price_4.__gt__(price_1)
        price_5 = price_1.negative()
        bool_5 = price_3.__gt__(price_5)
        price_6 = some_price_0.with_ccy(currency_0)
        bool_6 = price_6.as_boolean()
        bool_7 = price_0.__gt__(price_0)
        price_7 = none_price_1.divide(var_0)
        money_2 = money_0.subtract(money_1)
        bool_8 = price_4.lt(price_0)
    except BaseException:
        pass

def test_case_94():
    try:
        var_0 = None
        none_price_0 = module_0.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = "b4.z'4]gPB|!z0lODD7"
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_0 = -3272
        price_0 = none_price_0.floor_divide(var_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_0 = price_0.times(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_1 = none_price_0.positive()
        money_1 = some_money_0.subtract(money_0)
        money_2 = some_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.add(price_2)
        price_4 = price_2.subtract(price_3)
        none_money_0 = module_0.NoneMoney()
        bool_0 = money_2.__gt__(money_1)
        bool_1 = price_3.__gt__(price_2)
        bool_2 = price_2.__gt__(price_3)
        bool_3 = money_1.__bool__()
        price_5 = some_price_0.positive()
        price_6 = price_5.with_ccy(currency_0)
        bool_4 = some_money_0.gte(money_1)
        price_7 = price_6.negative()
        bool_5 = price_7.__gt__(price_6)
        bool_6 = price_6.as_boolean()
        bool_7 = price_0.__gt__(price_7)
        price_8 = none_price_0.divide(var_0)
        money_3 = money_1.subtract(money_1)
        bool_8 = price_6.lt(price_5)
    except BaseException:
        pass

def test_case_95():
    try:
        none_price_0 = module_0.NonePrice()
        var_0 = None
        none_price_1 = module_0.NonePrice()
        list_0 = [none_price_1, none_price_1, none_price_1]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = '&l1N,=<fm0w14?t1[Te'
        int_0 = 893
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        int_1 = 772
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        bool_0 = money_0.gt(money_0)
        price_0 = none_price_1.scalar_add(var_0)
        money_1 = some_money_0.with_ccy(currency_0)
        bool_1 = some_money_0.lt(money_1)
    except BaseException:
        pass

def test_case_96():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.abs()
    except BaseException:
        pass

def test_case_97():
    try:
        price_0 = module_0.Price()
        bool_0 = price_0.is_equal(price_0)
    except BaseException:
        pass

def test_case_98():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.negative()
    except BaseException:
        pass

def test_case_99():
    try:
        bool_0 = False
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.scalar_add(bool_0)
        money_1 = module_0.Money()
        money_2 = money_1.positive()
    except BaseException:
        pass

def test_case_100():
    try:
        price_0 = module_0.Price()
        decimal_0 = module_2.Decimal()
        bool_0 = price_0.__bool__()
        price_1 = price_0.__abs__()
        bool_1 = price_0.as_boolean()
    except BaseException:
        pass

def test_case_101():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.subtract(money_0)
    except BaseException:
        pass

def test_case_102():
    try:
        money_0 = module_0.Money()
        str_0 = 'Balance'
        money_1 = money_0.__floordiv__(str_0)
        bool_0 = money_0.__ge__(money_0)
        money_2 = money_0.abs()
    except BaseException:
        pass

def test_case_103():
    try:
        var_0 = None
        list_0 = [var_0, var_0, var_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = module_0.Money()
        money_1 = money_0.__mul__(var_0)
        money_2 = money_1.positive()
    except BaseException:
        pass

def test_case_104():
    try:
        str_0 = '1J,w<WRg8#V['
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_0 = module_0.Money()
        money_1 = money_0.with_ccy(currency_0)
        var_0 = money_1.__round__()
    except BaseException:
        pass

def test_case_105():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.__pos__()
        money_2 = money_0.subtract(money_1)
    except BaseException:
        pass

def test_case_106():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.negative()
    except BaseException:
        pass

def test_case_107():
    try:
        money_0 = module_0.Money()
        bool_0 = money_0.as_boolean()
    except BaseException:
        pass