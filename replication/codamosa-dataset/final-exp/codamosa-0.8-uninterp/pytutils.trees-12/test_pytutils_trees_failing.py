# Automatically generated by Pynguin.
import pytutils.trees as module_0

def test_case_0():
    try:
        str_0 = 'g\n"z19i1~X)'
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(tree_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tree_0 = module_0.Tree()
        bytes_0 = None
        var_0 = tree_0.__setitem__(tree_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'Ns\xf8\x85L\xff\xcb\xbf4#\xceV\x9e\xda\xfd{\xe4'
        tree_0 = module_0.Tree(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0]
        int_0 = 137
        str_0 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
        tree_0 = module_0.Tree()
        var_0 = tree_0.__setitem__(list_0, int_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 170.0
        str_0 = '\n            Override the __mro__ to fool `isinstance`.\n            '
        dict_0 = {str_0: str_0, float_0: float_0}
        str_1 = 'monokai'
        bytes_0 = b'Z\xce\xef\xd0m- \xd6\xa2G[G\xbc\x84\xe9\x07E\x94'
        bytes_1 = b'R\xf5MXEhv\xe2\xa4'
        var_0 = module_0.get_tree_node(dict_0, str_1, bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b')G\xd1\xb4!\x1dz\xeb#]\xb1'
        registry_tree_0 = None
        str_0 = '>'
        tree_0 = module_0.Tree(bytes_0, registry_tree_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = None
        str_0 = '(k'
        tuple_0 = (str_0,)
        registry_tree_0 = module_0.RegistryTree(tuple_0)
        float_0 = None
        tuple_1 = (set_0, float_0)
        str_1 = 'dsd-y\x0b{C#MX'
        bytes_0 = b'?4'
        tree_0 = module_0.Tree()
        var_0 = tree_0.__setitem__(tuple_1, str_1, bytes_0)
    except BaseException:
        pass