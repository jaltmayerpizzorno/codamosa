# Automatically generated by Pynguin.
import dataclasses_json.cfg as module_0
import marshmallow.fields as module_1

def test_case_0():
    try:
        str_0 = 'CatchAlGVar'
        dict_0 = module_0.config(undefined=str_0, field_name=str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '5.2jSl!me;uaHo|h=\x0c'
        dict_0 = module_0.config(encoder=str_0, undefined=str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "\n    This is a tricky situation where we need to check both the annotated\n    type info (which is usually a type from `typing`) and check the\n    value's type directly using `type()`.\n\n    If the type_arg is a generic we can use the annotated type, but if the\n    type_arg is a typevar we need to extract the reified type information\n    hence the check of `is_dataclass(vs)`\n    "
        dict_0 = module_0.config(decoder=str_0, undefined=str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'CatchAllVar'
        str_1 = '\r8,'
        dict_0 = {str_0: str_1}
        bool_0 = False
        bool_1 = True
        field_0 = module_1.Field(allow_none=dict_0, load_only=bool_0, dump_only=bool_1, error_messages=dict_0)
        dict_1 = {field_0: field_0}
        dict_2 = module_0.config(mm_field=field_0)
        dict_3 = module_0.config(dict_1, undefined=str_1, field_name=str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'dataclasses_json'
        dict_0 = module_0.config(undefined=str_0)
    except BaseException:
        pass