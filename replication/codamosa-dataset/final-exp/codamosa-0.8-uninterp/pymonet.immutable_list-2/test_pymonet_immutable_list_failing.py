# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.__len__()
        str_0 = "'"
        immutable_list_1 = module_0.ImmutableList()
        var_1 = immutable_list_1.filter(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        tuple_0 = (dict_0,)
        bool_1 = True
        immutable_list_0 = module_0.ImmutableList(tuple_0, bool_1)
        var_0 = immutable_list_0.to_list()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'B'
        int_0 = False
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.unshift(int_0)
        immutable_list_1 = module_0.ImmutableList(int_0, var_0)
        var_1 = immutable_list_1.map(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 459.8
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.map(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        optional_0 = None
        optional_1 = immutable_list_0.find(optional_0)
    except BaseException:
        pass

def test_case_6():
    try:
        immutable_list_0 = module_0.ImmutableList()
        dict_0 = {}
        bool_0 = False
        immutable_list_1 = module_0.ImmutableList(dict_0, bool_0)
        optional_0 = immutable_list_1.find(immutable_list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        str_0 = 'S]ZEEKgkDOD?`[{+'
        var_0 = None
        var_1 = immutable_list_0.reduce(str_0, var_0)
        var_2 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_8():
    try:
        object_0 = module_1.object()
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        bool_1 = immutable_list_0.__eq__(object_0)
        list_0 = [immutable_list_0, bool_0, bool_1]
        immutable_list_1 = module_0.ImmutableList(list_0)
        callable_0 = None
        var_0 = None
        var_1 = immutable_list_1.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = None
        immutable_list_0 = module_0.ImmutableList(var_0)
        var_1 = immutable_list_0.append(var_0)
        var_2 = immutable_list_0.__len__()
        var_3 = immutable_list_0.to_list()
        str_0 = immutable_list_0.__str__()
        immutable_list_1 = module_0.ImmutableList()
        callable_0 = None
        object_0 = module_1.object()
        bool_0 = immutable_list_1.__eq__(object_0)
        var_4 = None
        immutable_list_2 = module_0.ImmutableList(var_0, var_1)
        var_5 = immutable_list_1.reduce(callable_0, var_4)
        var_6 = immutable_list_2.unshift(var_0)
        immutable_list_3 = module_0.ImmutableList(bool_0)
        var_7 = immutable_list_2.append(var_0)
        callable_1 = None
        bool_1 = False
        immutable_list_4 = module_0.ImmutableList(bool_1)
        immutable_list_5 = module_0.ImmutableList()
        optional_0 = immutable_list_3.find(callable_1)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        float_0 = 843.7
        list_1 = None
        dict_0 = {}
        tuple_0 = (list_1, dict_0)
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.append(tuple_0)
        bool_0 = False
        immutable_list_1 = module_0.ImmutableList(bool_0)
        var_1 = immutable_list_1.append(float_0)
        immutable_list_2 = module_0.ImmutableList(list_0, var_1)
        var_2 = immutable_list_2.__len__()
        optional_0 = immutable_list_2.find(var_1)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = []
        object_0 = module_1.object()
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_0 = immutable_list_0.unshift(list_0)
        str_0 = immutable_list_0.__str__()
        immutable_list_1 = module_0.ImmutableList(var_0)
        immutable_list_2 = module_0.ImmutableList(bool_0)
        immutable_list_3 = module_0.ImmutableList()
        immutable_list_4 = module_0.ImmutableList()
        bool_1 = True
        immutable_list_5 = module_0.ImmutableList(bool_1)
        var_1 = None
        var_2 = immutable_list_1.__add__(var_1)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = None
        str_0 = '\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        '
        immutable_list_0 = module_0.ImmutableList(var_0)
        var_1 = immutable_list_0.unshift(var_0)
        optional_0 = immutable_list_0.find(str_0)
        immutable_list_1 = module_0.ImmutableList()
        var_2 = immutable_list_1.append(var_0)
        var_3 = immutable_list_1.__len__()
        var_4 = immutable_list_1.unshift(var_0)
        var_5 = immutable_list_1.to_list()
        str_1 = immutable_list_1.__str__()
        bool_0 = False
        immutable_list_2 = module_0.ImmutableList(var_2, bool_0)
        callable_0 = None
        object_0 = module_1.object()
        bool_1 = immutable_list_0.__eq__(object_0)
        var_6 = None
        var_7 = immutable_list_2.reduce(callable_0, var_6)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 1
        immutable_list_0 = module_0.ImmutableList()
        str_0 = immutable_list_0.__str__()
        var_0 = None
        immutable_list_1 = module_0.ImmutableList(int_0, var_0)
        var_1 = lambda x: x
        var_2 = immutable_list_1.filter(var_1)
        immutable_list_2 = module_0.ImmutableList(int_0, var_0)
        immutable_list_3 = module_0.ImmutableList(int_0, immutable_list_0)
        var_3 = immutable_list_3.filter(var_1)
        immutable_list_4 = module_0.ImmutableList(int_0, immutable_list_2)
        immutable_list_5 = module_0.ImmutableList(int_0, immutable_list_4)
        var_4 = immutable_list_5.filter(immutable_list_2)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1
        var_0 = None
        var_1 = lambda x: x
        immutable_list_0 = module_0.ImmutableList(int_0, var_0)
        int_1 = None
        immutable_list_1 = module_0.ImmutableList(int_1, immutable_list_0)
        var_2 = immutable_list_1.filter(var_1)
        object_0 = module_1.object()
        optional_0 = immutable_list_0.find(object_0)
    except BaseException:
        pass