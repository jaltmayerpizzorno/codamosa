# Automatically generated by Pynguin.
import pypara.accounting.ledger as module_0
import pypara.commons.zeitgeist as module_1
import pypara.accounting.generic as module_2

def test_case_0():
    try:
        dict_0 = {}
        date_range_0 = None
        dict_1 = None
        var_0 = module_0.build_general_ledger(date_range_0, dict_1, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        date_0 = None
        date_range_0 = module_1.DateRange(date_0, date_0)
        dict_0 = {}
        str_0 = '\n        Rounds the quantity of the monetary value to ``ndigits`` by using ``HALF_EVEN`` method if *defined*, itself\n        otherwise.\n        '
        var_0 = module_0.build_general_ledger(date_range_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        date_0 = None
        var_0 = None
        balance_0 = module_2.Balance(date_0, var_0)
        account_0 = None
        ledger_0 = module_0.Ledger(account_0, balance_0)
        var_1 = None
        var_2 = ledger_0.add(var_1)
    except BaseException:
        pass

def test_case_3():
    try:
        date_0 = None
        date_range_0 = module_1.DateRange(date_0, date_0)
        dict_0 = {}
        dict_1 = {}
        var_0 = module_0.build_general_ledger(date_range_0, dict_0, dict_1)
        var_1 = None
        balance_0 = module_2.Balance(date_0, var_1)
        account_0 = None
        ledger_0 = module_0.Ledger(account_0, balance_0)
        balance_1 = module_2.Balance(date_0, var_1)
        ledger_1 = module_0.Ledger(account_0, balance_1)
        dict_2 = {account_0: balance_1}
        var_2 = module_0.build_general_ledger(date_range_0, dict_2, dict_2)
    except BaseException:
        pass

def test_case_4():
    try:
        read_initial_balances_0 = None
        date_0 = None
        date_range_0 = module_1.DateRange(date_0, date_0)
        dict_0 = {}
        dict_1 = {}
        var_0 = module_0.build_general_ledger(date_range_0, dict_0, dict_1)
        var_1 = None
        balance_0 = module_2.Balance(date_0, var_1)
        account_0 = None
        ledger_0 = module_0.Ledger(account_0, balance_0)
        ledger_entry_0 = module_0.LedgerEntry(date_0, read_initial_balances_0, var_1)
        var_2 = ledger_0.add(ledger_entry_0)
    except BaseException:
        pass