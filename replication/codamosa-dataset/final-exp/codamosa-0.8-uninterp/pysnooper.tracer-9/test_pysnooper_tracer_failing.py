# Automatically generated by Pynguin.
import pysnooper.tracer as module_0

def test_case_0():
    try:
        str_0 = 'gFk*soMrce'
        set_0 = {str_0, str_0, str_0}
        tracer_0 = module_0.Tracer(str_0, set_0)
        list_0 = None
        var_0 = module_0.get_write_function(list_0, tracer_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = set()
        tracer_0 = module_0.Tracer(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tracer_0 = module_0.Tracer()
        int_0 = 0
        var_0 = tracer_0.__exit__(int_0, int_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'hello, world!\n'
        bool_0 = True
        list_0 = [str_0, str_0]
        file_writer_0 = module_0.FileWriter(str_0, list_0)
        var_0 = file_writer_0.write(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'get_source'
        set_0 = {str_0, str_0, str_0, str_0, str_0}
        tracer_0 = module_0.Tracer(str_0, set_0)
        dict_0 = {}
        tracer_1 = module_0.Tracer(tracer_0, dict_0)
        var_0 = tracer_1.__enter__()
    except BaseException:
        pass

def test_case_5():
    try:
        tracer_0 = module_0.Tracer()
        float_0 = -790.5631
        var_0 = tracer_0.__call__(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'get_source'
        set_0 = {str_0, str_0, str_0}
        tracer_0 = module_0.Tracer(str_0, set_0)
        var_0 = tracer_0.__enter__()
        var_1 = tracer_0.__enter__()
        dict_0 = None
        bool_0 = True
        var_2 = module_0.get_local_reprs(dict_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'get_source'
        set_0 = {str_0, str_0, str_0}
        tracer_0 = module_0.Tracer(str_0, set_0)
        var_0 = tracer_0.__enter__()
        str_1 = '8N}B#<6'
        str_2 = "\x0cGZbx'7hA"
        var_1 = tracer_0.__exit__(str_1, str_2, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'get_source'
        set_0 = {str_0, str_0, str_0, str_0, str_0}
        tracer_0 = module_0.Tracer(str_0, set_0)
        dict_0 = {}
        tracer_1 = module_0.Tracer(tracer_0, dict_0)
        var_0 = tracer_0.__enter__()
        list_0 = []
        list_1 = [tracer_0, set_0, list_0]
        var_1 = module_0.get_write_function(str_0, list_1)
        var_2 = tracer_1.__enter__()
    except BaseException:
        pass