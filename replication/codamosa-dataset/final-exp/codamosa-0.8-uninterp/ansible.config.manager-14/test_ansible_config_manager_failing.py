# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        str_0 = 'path'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definitions(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'M)'
        var_0 = module_0.get_config_type(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.find_ini_config_file()
        config_manager_0 = module_0.ConfigManager()
        plugin_0 = module_0.Plugin()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'`\xceqJCV\x86\xa2'
        config_manager_0 = module_0.ConfigManager(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.find_ini_config_file()
        list_0 = [var_0, var_0, var_0, var_0]
        setting_0 = module_0.Setting(*list_0)
        dict_0 = {setting_0: list_0}
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_plugin_vars(setting_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = None
        bool_0 = False
        str_0 = 'CBL#@ft@8/'
        tuple_0 = (bool_0, str_0, set_0)
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_plugin_vars(set_0, tuple_0)
        config_manager_1 = module_0.ConfigManager()
        str_1 = 'tF1'
        dict_0 = {}
        var_1 = config_manager_1.get_config_value(str_1, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 4976.7502
        str_0 = 'pathlist'
        dict_0 = None
        set_0 = {dict_0, float_0, str_0}
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(str_0, dict_0, set_0)
        tuple_0 = None
        list_0 = [float_0, tuple_0]
        var_1 = module_0.get_config_type(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Wm@.,q6*u sV\nU8al'
        bytes_0 = b'w!C\xc3XR\xea\xeb\xae\x8a\xb8\xbd\xa5\xbf08>'
        var_0 = module_0.ensure_type(str_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = None
        var_0 = config_manager_0.get_configuration_definitions(str_0)
        bool_0 = True
        str_1 = 'path'
        config_manager_1 = module_0.ConfigManager(bool_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        var_0 = module_0.get_ini_config_value(bool_0, dict_0)
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'\xae\xf0X\xc5\x93\xc9FKB~c\x19\xcd](\xd8'
        float_0 = -525.429107
        str_0 = '\x0c5KG|~S*1[5\\'
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(bytes_0, float_0, str_0)
        bool_1 = False
        var_2 = config_manager_0.update_config_data(bool_1)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager(bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        str_0 = '{BLY@ft@8/'
        config_manager_0 = module_0.ConfigManager()
        int_0 = -2916
        str_1 = 'hgh'
        set_0 = set()
        bytes_0 = b'\x10\x86\xf7B\t\x8b4\x85-\xa5\xbb\xd2'
        str_2 = '*Mh."tHc7nL~^]H}'
        dict_0 = {str_0: bytes_0, bool_0: config_manager_0, str_1: str_1}
        dict_1 = {str_0: bytes_0, str_2: int_0, str_0: dict_0}
        var_0 = config_manager_0.get_configuration_definition(dict_1, set_0, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        plugin_0 = None
        float_0 = -3321.9
        dict_0 = None
        var_0 = module_0.get_ini_config_value(dict_0, plugin_0)
        tuple_0 = (float_0,)
        var_1 = module_0.get_ini_config_value(plugin_0, tuple_0)
        dict_1 = None
        setting_0 = module_0.Setting(**dict_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        config_manager_0 = module_0.ConfigManager()
        bool_1 = False
        str_0 = 'jsonrpc response: %s'
        list_1 = [bool_1, bool_1, bool_1, str_0]
        tuple_0 = (config_manager_0, list_1)
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.update_config_data(list_0, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        float_0 = 1033.85
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.initialize_plugin_configuration_definitions(float_0, config_manager_0, float_0)
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        var_1 = module_0.get_ini_config_value(bool_0, dict_0)
        str_0 = 'CBL#@ft@8R'
        config_manager_2 = module_0.ConfigManager()
        config_manager_3 = module_0.ConfigManager()
        plugin_0 = None
        int_0 = None
        var_2 = config_manager_2.get_config_value(plugin_0, int_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        float_0 = 1033.85
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'Kxw]Hj\x0cB\\yz/\\\rDE'
        var_0 = module_0.resolve_path(str_0)
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(float_0, config_manager_0, float_0)
        str_1 = None
        var_2 = config_manager_0.get_configuration_definition(str_1)
        set_0 = None
        var_3 = config_manager_0.get_configuration_definition(set_0, config_manager_0, set_0)
        var_4 = config_manager_0.update_config_data()
        int_0 = 119
        complex_0 = None
        config_manager_1 = module_0.ConfigManager(complex_0)
        str_2 = '_valid_attrs'
        config_manager_2 = module_0.ConfigManager()
        var_5 = config_manager_2.get_plugin_options(complex_0, float_0, str_2)
        config_manager_3 = module_0.ConfigManager()
        var_6 = config_manager_0.get_plugin_vars(config_manager_3, bool_0)
        var_7 = config_manager_1.get_config_value(int_0, set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        float_0 = 1033.85
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.initialize_plugin_configuration_definitions(float_0, config_manager_0, float_0)
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        var_1 = module_0.get_ini_config_value(bool_0, dict_0)
        config_manager_2 = module_0.ConfigManager()
        config_manager_3 = module_0.ConfigManager()
        plugin_0 = None
        setting_0 = None
        tuple_0 = (setting_0,)
        config_manager_4 = module_0.ConfigManager()
        var_2 = config_manager_4.get_plugin_vars(tuple_0, config_manager_1)
        bool_1 = False
        float_1 = 0.5
        list_0 = None
        var_3 = config_manager_1.get_config_value(bool_1, plugin_0, config_manager_0, float_1, tuple_0, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 1.0
        list_0 = [float_0]
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'pathlist'
        str_1 = '#'
        dict_0 = {str_0: list_0, str_1: config_manager_0, str_1: str_1}
        var_0 = config_manager_0.update_config_data(dict_0)
    except BaseException:
        pass