# Automatically generated by Pynguin.
import semantic_release.helpers as module_0
import urllib3.util.retry as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'semantic-release <semantic-release>'
    list_0 = [str_0]
    var_0 = module_0.format_arg(list_0)

def test_case_2():
    bool_0 = True
    session_0 = module_0.build_requests_session(bool_0)
    retry_0 = module_1.Retry()
    session_1 = module_0.build_requests_session(retry_0, retry_0)
    str_0 = 'yw9]]vA\x0c+I8@$Q3i;E*:'
    var_0 = module_0.format_arg(str_0)

def test_case_3():
    bool_0 = True
    session_0 = module_0.build_requests_session(bool_0)

def test_case_4():
    str_0 = '<YSvyMFd\\g?'
    dict_0 = {}
    list_0 = [dict_0]
    int_0 = 5095
    session_0 = module_0.build_requests_session(list_0, int_0)
    str_1 = None
    dict_1 = {str_0: str_0, str_0: str_0, str_1: str_0}
    tuple_0 = None
    logged_function_0 = module_0.LoggedFunction(tuple_0)
    logged_function_1 = module_0.LoggedFunction(str_0)
    int_1 = -2157
    retry_0 = module_1.Retry(dict_1, int_1)
    session_1 = module_0.build_requests_session()
    logged_function_2 = module_0.LoggedFunction(session_1)
    str_2 = '`b3;'
    logged_function_3 = module_0.LoggedFunction(str_2)
    logged_function_4 = module_0.LoggedFunction(logged_function_3)
    var_0 = logged_function_4.__call__(retry_0)

def test_case_5():
    retry_0 = module_1.Retry()
    session_0 = module_0.build_requests_session(retry_0, retry_0)

def test_case_6():
    str_0 = 'documentation'
    logged_function_0 = module_0.LoggedFunction(str_0)

def test_case_7():
    str_0 = 'aX9DZ1f|9'
    str_1 = '\n    Returns the token for the current VCS\n\n    :return: The token in string form\n    '
    str_2 = ''
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_2: str_1}
    bool_0 = False
    logged_function_0 = module_0.LoggedFunction(bool_0)
    var_0 = logged_function_0.__call__(dict_0)

def test_case_8():
    bool_0 = False
    session_0 = module_0.build_requests_session(bool_0, bool_0)
    retry_0 = module_1.Retry()
    session_1 = module_0.build_requests_session(bool_0, retry_0)

def test_case_9():
    bool_0 = False
    session_0 = module_0.build_requests_session(bool_0)