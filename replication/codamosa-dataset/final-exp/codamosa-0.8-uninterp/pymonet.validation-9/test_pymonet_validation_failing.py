# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        str_0 = '\x0cH;)b53k^/S?RH2'
        set_0 = {str_0}
        tuple_0 = (set_0,)
        str_1 = '\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        '
        validation_0 = module_0.Validation(str_1, tuple_0)
        bool_0 = False
        validation_1 = module_0.Validation(validation_0, bool_0)
        var_0 = validation_1.to_box()
        str_2 = '\t? -g^Z~F+ZdzF'
        dict_0 = {}
        validation_2 = module_0.Validation(str_2, dict_0)
        var_1 = validation_2.__str__()
        validation_3 = module_0.Validation(tuple_0, tuple_0)
        var_2 = validation_3.ap(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = 'p`0>k/6'
        validation_0 = module_0.Validation(bool_0, str_0)
        validation_1 = module_0.Validation(validation_0, validation_0)
        var_0 = validation_1.__str__()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        int_0 = -3794
        validation_0 = module_0.Validation(bool_0, int_0)
        var_0 = validation_0.is_fail()
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        int_0 = 1370
        str_0 = '\x0bg\r^pl[=UI)9#'
        validation_0 = module_0.Validation(int_0, str_0)
        var_0 = validation_0.to_maybe()
        var_1 = validation_0.to_box()
        bytes_0 = b'\x8a\r\x17\x0e\xcd\xf2X\xd0\x9f\xab\xa7\xce'
        float_0 = 17.79333
        validation_1 = module_0.Validation(bytes_0, float_0)
        var_2 = validation_1.map(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -1922.7127
        dict_0 = None
        validation_0 = None
        tuple_0 = (dict_0, validation_0)
        validation_1 = module_0.Validation(tuple_0, dict_0)
        var_0 = validation_1.to_lazy()
        str_0 = ''
        dict_1 = {str_0: str_0, str_0: str_0}
        validation_2 = module_0.Validation(str_0, dict_1)
        var_1 = validation_2.to_either()
        var_2 = validation_2.bind(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'All[value={}]'
        tuple_0 = ()
        dict_0 = {str_0: str_0, tuple_0: tuple_0, tuple_0: tuple_0}
        int_0 = False
        set_0 = {int_0}
        validation_0 = module_0.Validation(int_0, set_0)
        var_0 = validation_0.ap(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\\@!a.vpi*w6%j>'
        str_1 = 'One[value={}]'
        validation_0 = module_0.Validation(str_0, str_1)
        var_0 = validation_0.is_fail()
        bytes_0 = b'\xf4\xcd'
        var_1 = validation_0.to_try()
        float_0 = 1587.0
        validation_1 = module_0.Validation(bytes_0, float_0)
        var_2 = validation_1.to_maybe()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'~pV<G\xc2\xb3/\xba\xcf\x90\x0e\xab\x98'
        set_0 = {bytes_0, bytes_0, bytes_0}
        tuple_0 = (set_0,)
        tuple_1 = (tuple_0,)
        str_0 = '\n        Take mapper function and return new instance of Left with the same value.\n\n        :returns: Copy of self\n        :rtype: Left[A]\n        '
        float_0 = -2394.8376
        bool_0 = False
        list_0 = []
        validation_0 = module_0.Validation(bool_0, list_0)
        var_0 = validation_0.to_either()
        list_1 = []
        bytes_1 = b'\xc7:\x03\xbd\xdcX\x00)\xc4\x0c\x10\xd3p H6\xbe'
        tuple_2 = (float_0, list_1, bytes_1)
        validation_1 = module_0.Validation(str_0, tuple_2)
        var_1 = validation_1.ap(tuple_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '!)C~\tm'
        tuple_0 = ()
        validation_0 = module_0.Validation(str_0, tuple_0)
        var_0 = validation_0.to_maybe()
        str_1 = '0?en.~HCEla/!^'
        str_2 = 'iG&D'
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1, str_1: str_2}
        bytes_0 = b'\x96;F\\\xbb\x90\xa7!\xbeQ\xcd\xff5'
        tuple_1 = (bytes_0,)
        validation_1 = module_0.Validation(dict_0, tuple_1)
        var_1 = validation_1.is_fail()
        str_3 = '\n        Transform Validation to Box.\n\n        :returns: Box with Validation value\n        :rtype: Box[A]\n        '
        var_2 = validation_1.__eq__(str_3)
        var_3 = validation_1.to_lazy()
        var_4 = validation_1.to_maybe()
        var_5 = validation_1.is_fail()
        dict_1 = {str_1: str_1, str_1: str_1}
        float_0 = 2572.54349
        var_6 = validation_1.__eq__(float_0)
        validation_2 = module_0.Validation(str_1, dict_1)
        validation_3 = module_0.Validation(tuple_1, validation_2)
        var_7 = validation_2.__str__()
        var_8 = validation_2.to_maybe()
        bool_0 = True
        validation_4 = module_0.Validation(bool_0, str_3)
        var_9 = validation_4.to_lazy()
        str_4 = '-B$%S'
        float_1 = 8.79
        validation_5 = module_0.Validation(str_4, float_1)
        var_10 = validation_3.map(str_1)
    except BaseException:
        pass