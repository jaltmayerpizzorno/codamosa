# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    int_0 = -3794
    validation_0 = module_0.Validation(bool_0, int_0)

def test_case_2():
    int_0 = True
    str_0 = ')=_Ma'
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: str_0}
    validation_0 = module_0.Validation(int_0, dict_0)
    var_0 = validation_0.is_success()
    int_1 = 1370
    str_1 = '\x0bg\r^pl[=UI)9#'
    validation_1 = module_0.Validation(int_1, str_1)
    var_1 = validation_1.to_maybe()
    var_2 = validation_0.__eq__(validation_1)
    var_3 = validation_1.to_box()
    var_4 = validation_0.to_box()

def test_case_3():
    list_0 = []
    float_0 = -124.73
    validation_0 = module_0.Validation(float_0, float_0)
    str_0 = '"riF5Azx\'(W`|=V5\r('
    str_1 = 'x#\\%pR6>K\x0c.9jGw)nx'
    tuple_0 = (validation_0, str_0, float_0, str_1)
    int_0 = -558
    tuple_1 = (list_0, tuple_0, int_0)
    float_1 = 354.415964
    list_1 = [float_1, float_1, float_1]
    bytes_0 = b'\xef\xe6s!\x01\xd306'
    validation_1 = module_0.Validation(list_1, bytes_0)
    var_0 = validation_1.__eq__(tuple_1)

def test_case_4():
    bytes_0 = b'\xe6\x86\x97\xc5'
    str_0 = 'G;fmsM,X2Kz'
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.__str__()
    bytes_1 = b'\xc0\xc8U\xe8\x9b\x82L\xb4\xabV\xd9'
    dict_0 = {bytes_1: bytes_1}
    validation_1 = module_0.Validation(bytes_1, dict_0)
    var_1 = validation_1.to_maybe()
    var_2 = validation_1.is_fail()

def test_case_5():
    int_0 = -2409
    bytes_0 = b'YK\xb3~\xb9?\xef\x03\x10'
    validation_0 = module_0.Validation(int_0, bytes_0)
    var_0 = validation_0.is_success()

def test_case_6():
    bytes_0 = b'8\x06\xf02Zcf3\x9c\xf9\x17z\xb5\xcb\x7f\xe5A"\xda'
    str_0 = '>'
    validation_0 = module_0.Validation(bytes_0, str_0)
    var_0 = validation_0.to_either()

def test_case_7():
    list_0 = None
    tuple_0 = (list_0,)
    set_0 = {tuple_0, tuple_0, list_0, tuple_0}
    bytes_0 = b'pO\x1d\r\xdc\x06x\xed4d'
    validation_0 = module_0.Validation(set_0, bytes_0)
    var_0 = validation_0.to_maybe()

def test_case_8():
    bool_0 = True
    set_0 = {bool_0}
    validation_0 = module_0.Validation(bool_0, set_0)
    var_0 = validation_0.to_box()

def test_case_9():
    str_0 = '0?en.~HCEla/!^'
    str_1 = 'iG&D'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_1}
    bytes_0 = b'\x96;F\\\xbb\x90\xa7!\xbeQ\xcd\xff5'
    tuple_0 = (bytes_0,)
    validation_0 = module_0.Validation(dict_0, tuple_0)
    var_0 = validation_0.is_fail()
    str_2 = '\n        Transform Validation to Box.\n\n        :returns: Box with Validation value\n        :rtype: Box[A]\n        '
    var_1 = validation_0.__eq__(str_2)
    var_2 = validation_0.to_lazy()
    var_3 = validation_0.to_maybe()
    var_4 = validation_0.is_fail()
    var_5 = validation_0.__eq__(validation_0)
    bool_0 = True
    validation_1 = module_0.Validation(bool_0, tuple_0)
    bytes_1 = b'\xf6ft\x19\xa7(\xee\x88\xd04'
    validation_2 = module_0.Validation(bytes_1, bytes_1)
    var_6 = validation_2.__str__()
    var_7 = validation_1.to_maybe()
    var_8 = validation_0.is_success()
    validation_3 = module_0.Validation(bool_0, validation_2)
    var_9 = validation_2.is_fail()