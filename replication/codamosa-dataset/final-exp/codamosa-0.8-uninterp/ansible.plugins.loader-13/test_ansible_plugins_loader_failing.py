# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'sed'
        var_0 = module_0.get_shell_plugin(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'QP7k&f'
        str_1 = '/etc/rc?.d/S??%s'
        bytes_0 = b'\x9f\x8b\x0fr\xf2R\x082\x9c\xd9f<\xc2\xfdP\xceJV\x88o'
        var_0 = plugin_load_context_0.record_deprecation(str_0, str_1, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1284
        str_0 = 'brthtime'
        bytes_0 = b''
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_0, plugin_load_context_0)
        str_1 = "%s doesn't appear to contain a role.\n  please remove this directory manually if you really want to put the role here."
        list_0 = [str_1, plugin_path_context_0]
        var_0 = plugin_load_context_0.redirect(str_0)
        plugin_loader_0 = module_0.PluginLoader(int_0, plugin_path_context_0, str_1, list_0)
        var_1 = plugin_loader_0.get(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 429.10704
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = '\r'
        dict_0 = {}
        var_1 = module_0.get_shell_plugin(dict_0, str_0)
        tuple_0 = ()
        bool_0 = True
        plugin_loader_0 = module_0.PluginLoader(float_0, dict_0, tuple_0, bool_0)
        bool_1 = False
        int_0 = -2300
        list_0 = [bool_1, int_0]
        var_2 = plugin_loader_0.print_paths()
        get_with_context_result_0 = module_0.get_with_context_result(*list_0)
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_0, get_with_context_result_0)
        var_3 = module_0.add_all_plugin_dirs(list_0)
        var_4 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '8iR[1NZQ\tJpV#JwPu_'
        set_0 = {str_0, str_0, str_0, str_0}
        bytes_0 = b'-'
        plugin_loader_0 = module_0.PluginLoader(str_0, set_0, bytes_0, bytes_0, str_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 429.10704
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = '\r'
        dict_0 = {}
        tuple_0 = ()
        bool_0 = False
        plugin_loader_0 = module_0.PluginLoader(float_0, dict_0, tuple_0, bool_0)
        var_1 = plugin_loader_0.has_plugin(plugin_load_context_0)
        list_0 = [str_0]
        var_2 = module_0.get_shell_plugin(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 69
        set_0 = {int_0}
        bool_0 = False
        bool_1 = True
        list_0 = [bool_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_1 = [list_0, plugin_load_context_0, list_0]
        dict_0 = {bool_1: list_0, plugin_load_context_0: list_0}
        plugin_loader_0 = module_0.PluginLoader(bool_0, bool_1, list_0, list_1, dict_0)
        var_0 = plugin_loader_0.find_plugin_with_context(int_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '/root/.ansible/plugins/doc_fragments/windows'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = "ihS\nif>f('"
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'f]~t[<}d8L\x0cNi"'
        var_0 = module_0.get_shell_plugin(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -728
        int_1 = 512
        list_0 = [int_1, int_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_loader_0 = module_0.PluginLoader(int_0, int_1, list_0, plugin_load_context_0)
        var_0 = plugin_loader_0.__getstate__()
        int_2 = -1284
        str_0 = 'birthtime'
        bytes_0 = b''
        plugin_load_context_1 = module_0.PluginLoadContext()
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_1, plugin_load_context_1)
        str_1 = "%s doesn't appear to contain a role.\n  please remove this directory manually if you really want to put the role here."
        list_1 = [str_1, plugin_path_context_0]
        var_1 = plugin_load_context_1.redirect(str_0)
        plugin_loader_1 = module_0.PluginLoader(int_2, plugin_path_context_0, str_1, list_1)
        var_2 = plugin_loader_1.get(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 310.4824
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [float_0]
        var_0 = module_0.add_all_plugin_dirs(list_0)
        bool_0 = True
        tuple_0 = ()
        var_1 = module_0.add_dirs_to_loader(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'sed'
        plugin_load_context_0 = module_0.PluginLoadContext()
        float_0 = 2390.0
        list_0 = [float_0]
        dict_0 = {float_0: str_0}
        bytes_0 = b'\xdcP\xfdk\xadr$@\x8e\x115\xb3\x95Y\x0e\xf8\xa4\xc8'
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, float_0, list_0, dict_0, dict_0, bytes_0)
        bool_0 = False
        str_1 = 'ebgI+\nc^D[(qlD'
        bytes_1 = b'\x10\x97\xd3D\x80'
        bool_1 = True
        tuple_0 = (bytes_1, bool_1)
        plugin_loader_1 = module_0.PluginLoader(bool_0, str_1, bytes_0, tuple_0)
        var_0 = plugin_loader_1.get(plugin_load_context_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Unit serial number:\\s+(\\w+)'
        str_1 = 'LLyJz'
        list_0 = [str_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\x8c\x96m\xc3'
        jinja2_loader_0 = module_0.Jinja2Loader(str_1, list_0, plugin_load_context_0, bytes_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = 'u2Y#a'
        str_1 = "*5.ws!f0U';4"
        bytes_0 = b'\x00W=`\x97'
        str_2 = ''
        int_0 = 80
        plugin_loader_0 = module_0.PluginLoader(str_1, bytes_0, str_2, int_0)
        var_1 = plugin_loader_0.add_directory(str_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        plugin_load_context_2 = module_0.PluginLoadContext()
        plugin_load_context_3 = module_0.PluginLoadContext()
        str_3 = 'l'
        str_4 = 'DO 9'
        list_0 = [str_3, str_4, var_0]
        var_2 = module_0.get_shell_plugin(list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        plugin_load_context_2 = module_0.PluginLoadContext()
        str_0 = 'D O'
        bytes_0 = None
        dict_0 = {}
        float_0 = 2761.849
        tuple_0 = ()
        bool_0 = None
        str_1 = '\x0b^Cyt@>fh?\x0bDJ%ve)'
        plugin_loader_0 = module_0.PluginLoader(float_0, tuple_0, bool_0, str_1)
        tuple_1 = (plugin_loader_0,)
        dict_1 = {str_0: float_0}
        plugin_loader_1 = module_0.PluginLoader(tuple_1, bytes_0, dict_1, plugin_load_context_2)
        var_0 = plugin_loader_1.__setstate__(dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'C'
        list_0 = [str_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_1 = "hsV:g/?8Gf?.p'"
        int_0 = 443
        str_2 = '_=fB|-i1'
        bool_0 = False
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, str_1, int_0, str_2, bool_0)
        var_0 = jinja2_loader_0.find_plugin(list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = '/input/ansible/plugins/shell/windows'
        bytes_0 = b':\x9fA\x00?\x99$\x02'
        plugin_path_context_0 = module_0.PluginPathContext(str_0, bytes_0)
        get_with_context_result_0 = None
        str_1 = '/usr/share/ansible/plugins/doc_fragments/windows'
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, plugin_path_context_0, get_with_context_result_0, str_1)
        var_0 = plugin_load_context_0.record_deprecation(str_0, jinja2_loader_0, jinja2_loader_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'Bn'
        dict_0 = {str_0: str_0}
        plugin_load_context_0 = module_0.PluginLoadContext()
        jinja2_loader_0 = None
        str_1 = "'`_"
        set_0 = set()
        var_0 = plugin_load_context_0.resolve(dict_0, jinja2_loader_0, str_1, set_0)
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_1 = plugin_load_context_1.record_deprecation(str_0, dict_0, plugin_load_context_0)
        list_0 = []
        list_1 = [list_0, var_0, set_0, var_1]
        tuple_0 = ()
        float_0 = -807.0
        str_2 = 'i_qC2'
        tuple_1 = (tuple_0, float_0, str_2, plugin_load_context_1)
        bool_0 = False
        var_2 = plugin_load_context_1.record_deprecation(tuple_1, list_1, bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = 'l'
        tuple_0 = None
        int_0 = 1932
        plugin_path_context_0 = module_0.PluginPathContext(tuple_0, int_0)
        complex_0 = None
        jinja2_loader_0 = None
        dict_0 = {int_0: str_0, int_0: tuple_0, jinja2_loader_0: complex_0}
        bool_0 = True
        set_0 = {str_0}
        plugin_loader_0 = module_0.PluginLoader(complex_0, jinja2_loader_0, dict_0, bool_0, set_0)
        list_0 = [complex_0, plugin_loader_0, var_0, int_0]
        plugin_loader_1 = module_0.PluginLoader(plugin_loader_0, set_0, list_0, bool_0, list_0)
        var_1 = plugin_loader_1.get(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = 'powershell'
        dict_0 = {}
        var_1 = module_0.get_shell_plugin(dict_0, str_0)
        var_2 = module_0.add_all_plugin_dirs(dict_0)
        var_3 = module_0.get_shell_plugin(dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = False
        get_with_context_result_0 = None
        float_0 = -963.538
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = "y'YG2^8'J;9TH':8?Kz"
        int_0 = -2899
        jinja2_loader_0 = module_0.Jinja2Loader(float_0, plugin_load_context_0, str_0, int_0)
        tuple_0 = None
        plugin_path_context_0 = module_0.PluginPathContext(jinja2_loader_0, tuple_0)
        list_0 = None
        jinja2_loader_1 = module_0.Jinja2Loader(bool_0, get_with_context_result_0, plugin_path_context_0, list_0, get_with_context_result_0)
        int_1 = 647
        int_2 = 647
        str_1 = '%[\r8=:yeIrI%~]pq9'
        str_2 = "\njtY&'"
        float_1 = -234.07
        jinja2_loader_2 = module_0.Jinja2Loader(int_2, str_1, str_2, float_1)
        var_0 = jinja2_loader_2.find_plugin(jinja2_loader_1, int_1)
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        bool_0 = True
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_loader_0 = module_0.PluginLoader(bool_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0)
        str_0 = 'iOT\n8!<A\t!Bb_6'
        str_1 = 'string_to_encrypt'
        var_0 = plugin_loader_0.has_plugin(str_0, str_1)
        var_1 = module_0.get_shell_plugin(dict_0)
    except BaseException:
        pass