# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        int_0 = -818
        position_0 = module_0.Position(int_0, int_0, int_0)
        parse_error_0 = module_0.ParseError(position=position_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ODZCbBrXaX6X\r^5'
        str_1 = '7f"i'
        str_2 = 'url'
        message_0 = module_0.Message(text=str_1, end_position=str_2)
        int_0 = 612
        int_1 = 615
        position_0 = module_0.Position(int_0, int_0, int_1)
        bool_0 = position_0.__eq__(str_0)
        parse_error_0 = module_0.ParseError(code=str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 3673
        int_1 = 2
        position_0 = module_0.Position(int_0, int_0, int_0)
        validation_result_0 = module_0.ValidationResult()
        bool_0 = position_0.__eq__(int_1)
        position_1 = module_0.Position(int_0, int_1, int_1)
        str_0 = 'yq '
        bool_1 = position_0.__eq__(position_0)
        message_0 = module_0.Message(text=str_0)
        base_error_0 = module_0.BaseError(key=int_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '(4J6~fgOL5>,qB(](C~'
        message_0 = module_0.Message(text=str_0, code=str_0)
        bool_0 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 4
        str_0 = 'd(Ax]2[*5}\n%GK\x0bb*C5]'
        message_0 = module_0.Message(text=str_0)
        str_1 = message_0.__repr__()
        message_1 = module_0.Message(text=str_0, code=str_0)
        list_0 = [message_1, message_1, message_1, message_1]
        base_error_0 = module_0.BaseError(key=int_0, messages=list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '^^+'
        str_1 = 'AZH!('
        message_0 = module_0.Message(text=str_1, key=str_0)
        list_0 = [message_0]
        message_1 = module_0.Message(text=str_0, index=message_0, start_position=list_0)
        str_2 = message_1.__repr__()
        str_3 = ''
        parse_error_0 = module_0.ParseError(text=str_3)
        str_4 = 'Lx||A=x,o'
        message_2 = module_0.Message(text=str_4)
        str_5 = message_2.__repr__()
        bytes_0 = b'\x06'
        validation_result_0 = module_0.ValidationResult(value=bytes_0)
        iterator_0 = validation_result_0.__iter__()
        base_error_0 = module_0.BaseError()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2436
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = 'L+rH@N]2!!'
        base_error_0 = module_0.BaseError(code=str_0, key=str_0, messages=str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        base_error_0 = module_0.BaseError(messages=list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -4133
        str_0 = ';'
        base_error_0 = module_0.BaseError(text=str_0)
        iterator_0 = base_error_0.__iter__()
        int_1 = -4216
        position_0 = module_0.Position(int_0, int_0, int_1)
        str_1 = "!RSl8#=MrADv''Gitoe"
        base_error_1 = module_0.BaseError(code=str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        validation_result_0 = module_0.ValidationResult()
        base_error_0 = module_0.BaseError(text=str_0, code=str_0)
        int_0 = base_error_0.__hash__()
        none_type_0 = None
        validation_error_0 = module_0.ValidationError(position=none_type_0)
    except BaseException:
        pass

def test_case_10():
    try:
        message_0 = None
        int_0 = 1394
        int_1 = 1651
        int_2 = -1757
        position_0 = module_0.Position(int_0, int_1, int_2)
        int_3 = -18
        position_1 = module_0.Position(int_1, int_1, int_3)
        bool_0 = position_0.__eq__(position_1)
        bool_1 = position_0.__eq__(message_0)
        str_0 = position_1.__repr__()
        int_4 = 3
        str_1 = 'm:%=4C>qua\r"'
        message_1 = module_0.Message(text=str_1)
        list_0 = [message_1, message_1]
        validation_result_0 = module_0.ValidationResult()
        bool_2 = validation_result_0.__bool__()
        base_error_0 = module_0.BaseError(key=int_4, messages=list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        int_0 = 0
        int_1 = 5
        position_0 = module_0.Position(int_0, int_1, int_0)
        message_0 = module_0.Message(text=str_0, start_position=dict_0, end_position=position_0)
        list_0 = [message_0, message_0]
        validation_error_0 = module_0.ValidationError(messages=list_0)
        str_1 = '[zupn0{C?Ssf&\x0c'
        int_2 = None
        position_1 = module_0.Position(int_2, int_2, int_2)
        str_2 = position_1.__repr__()
        str_3 = position_1.__repr__()
        str_4 = position_1.__repr__()
        message_1 = module_0.Message(text=str_1, code=str_1, position=position_1, end_position=position_1)
    except BaseException:
        pass

def test_case_12():
    try:
        validation_result_0 = module_0.ValidationResult()
        str_0 = "Expecting ':' delimiter"
        float_0 = -1224.8
        int_0 = 788
        int_1 = -512
        position_0 = module_0.Position(int_0, int_0, int_1)
        message_0 = module_0.Message(text=str_0, code=str_0, key=str_0, index=float_0, start_position=position_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '{+"Hbq>3Z/!#3'
        dict_0 = {str_0: str_0}
        message_0 = module_0.Message(text=str_0)
        bool_0 = message_0.__eq__(dict_0)
        int_0 = -4005
        int_1 = 2371
        int_2 = -4017
        position_0 = module_0.Position(int_0, int_1, int_2)
        message_1 = module_0.Message(text=str_0, position=dict_0, start_position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -262
        int_1 = 6
        position_0 = module_0.Position(int_0, int_1, int_0)
        str_0 = position_0.__repr__()
        str_1 = 'z_Mq'
        message_0 = module_0.Message(text=str_1)
        str_2 = position_0.__repr__()
        list_0 = [message_0, message_0]
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        validation_result_0 = module_0.ValidationResult()
        dict_0 = {validation_result_0: validation_result_0}
        validation_result_1 = module_0.ValidationResult(value=dict_0, error=dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 3673
        int_1 = 2
        position_0 = module_0.Position(int_0, int_0, int_0)
        validation_result_0 = module_0.ValidationResult()
        bool_0 = position_0.__eq__(int_1)
        position_1 = module_0.Position(int_0, int_1, int_1)
        base_error_0 = module_0.BaseError(text=position_1)
        str_0 = base_error_0.__str__()
        str_1 = 'yq '
        str_2 = position_1.__repr__()
        bool_1 = position_0.__eq__(position_0)
        message_0 = module_0.Message(text=str_1)
        str_3 = message_0.__repr__()
        str_4 = '-jM1b+8SiviLmzm[8R\n'
        message_1 = module_0.Message(text=str_4, position=position_0)
        dict_0 = {int_1: int_1}
        bool_2 = base_error_0.__eq__(dict_0)
        list_0 = [message_0, message_0, message_0]
        base_error_1 = module_0.BaseError(position=position_1, messages=list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 3673
        int_1 = -3817
        position_0 = module_0.Position(int_0, int_0, int_0)
        validation_result_0 = module_0.ValidationResult()
        bool_0 = position_0.__eq__(int_1)
        position_1 = module_0.Position(int_0, int_1, int_1)
        base_error_0 = module_0.BaseError(text=position_1)
        str_0 = base_error_0.__str__()
        str_1 = 'sZwFC\\~%lfy'
        str_2 = '-jM12b+8SiviLzBm[8R\n'
        message_0 = module_0.Message(text=str_2, position=position_0)
        bool_1 = message_0.__eq__(str_1)
        int_2 = message_0.__hash__()
        int_3 = base_error_0.__len__()
        int_4 = message_0.__hash__()
        str_3 = base_error_0.__repr__()
        validation_error_0 = module_0.ValidationError(key=str_0, position=position_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 2
        position_0 = module_0.Position(int_0, int_0, int_0)
        bool_0 = position_0.__eq__(int_0)
        str_0 = 'b#If$>bh#8!n_(|+0i|G'
        base_error_0 = module_0.BaseError(text=str_0)
        iterator_0 = base_error_0.__iter__()
        position_1 = module_0.Position(int_0, int_0, int_0)
        base_error_1 = module_0.BaseError(text=position_1)
        bool_1 = position_0.__eq__(position_0)
        str_1 = base_error_1.__str__()
        str_2 = 'sZwFC\\~%lfy'
        validation_result_0 = module_0.ValidationResult()
        list_0 = base_error_0.messages(add_prefix=str_1)
        iterator_1 = validation_result_0.__iter__()
        int_1 = 898
        str_3 = '-jM12b+8SiviLzBm[8R\n'
        message_0 = module_0.Message(text=str_3, position=position_0)
        bool_2 = message_0.__eq__(str_2)
        tuple_0 = ()
        base_error_2 = module_0.BaseError(text=str_2, key=int_1, position=tuple_0)
        int_2 = base_error_2.__len__()
        str_4 = base_error_2.__repr__()
        validation_error_0 = module_0.ValidationError(key=str_1, position=position_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = ''
        message_0 = module_0.Message(text=str_0, code=str_0, key=str_0, start_position=str_0)
        int_0 = -28
        int_1 = 1549
        position_0 = module_0.Position(int_0, int_0, int_1)
        message_1 = module_0.Message(text=str_0, code=str_0, key=str_0, start_position=position_0)
        bool_0 = message_1.__eq__(message_0)
        base_error_0 = module_0.BaseError(code=str_0)
    except BaseException:
        pass