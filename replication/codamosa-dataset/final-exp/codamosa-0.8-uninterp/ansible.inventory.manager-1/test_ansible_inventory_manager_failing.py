# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    try:
        float_0 = -2177.5373
        bool_0 = True
        inventory_manager_0 = module_0.InventoryManager(float_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '%E&O}x tr}}'
        var_0 = module_0.order_patterns(str_0)
        tuple_0 = ()
        var_1 = module_0.split_host_pattern(tuple_0)
        bool_0 = True
        bool_1 = False
        inventory_manager_0 = module_0.InventoryManager(bool_1)
        var_2 = inventory_manager_0.add_host(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1408.039504
        str_0 = '\n- name: Set default locale to fr_FR.UTF-8\n  ansible.builtin.debconf:\n    name: locales\n    question: locales/default_environment_locale\n    value: fr_FR.UTF-8\n    vtype: select\n\n- name: Set to generate locales\n  ansible.builtin.debconf:\n    name: locales\n    question: locales/locales_to_be_generated\n    value: en_US.UTF-8 UTF-8, fr_FR.UTF-8 UTF-8\n    vtype: multiselect\n\n- name: Accept oracle license\n  ansible.builtin.debconf:\n    name: oracle-java7-installer\n    question: shared/accepted-oracle-license-v1-1\n    value: \'true\'\n    vtype: select\n\n- name: Specifying package you can register/return the list of questions and current values\n  ansible.builtin.debconf:\n    name: tzdata\n\n- name: Pre-configure tripwire site passphrase\n  ansible.builtin.debconf:\n    name: tripwire\n    question: tripwire/site-passphrase\n    value: "{{ site_passphrase }}"\n    vtype: password\n  no_log: True\n'
        str_1 = 'z&.\t) NAH{7'
        inventory_manager_0 = module_0.InventoryManager(str_1)
        inventory_manager_1 = module_0.InventoryManager(float_0, str_0, inventory_manager_0)
        list_0 = [inventory_manager_1]
        str_2 = ':1T&$\\P#{QfJCts{'
        inventory_manager_2 = module_0.InventoryManager(str_2)
        var_0 = inventory_manager_2.add_group(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '_ansible_delegated_vars'
        dict_0 = {}
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_0 = inventory_manager_0.restrict_to_hosts(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -634
        dict_0 = {int_0: int_0}
        int_1 = 40
        inventory_manager_0 = module_0.InventoryManager(int_1)
        var_0 = inventory_manager_0.remove_restriction()
        var_1 = inventory_manager_0.get_hosts(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        dict_0 = {}
        bool_0 = False
        int_0 = 65536
        tuple_0 = (dict_0, list_0, bool_0, int_0)
        bool_1 = False
        inventory_manager_0 = module_0.InventoryManager(bool_1)
        str_0 = 't5jGkG6V?~'
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0, str_0)
        int_1 = -1119
        var_0 = inventory_manager_1.get_host(int_1)
        str_1 = '\udce5'
        inventory_manager_2 = module_0.InventoryManager(dict_0, str_1)
        var_1 = inventory_manager_0.subset(dict_0)
        inventory_manager_3 = module_0.InventoryManager(str_1, list_0)
        var_2 = module_0.order_patterns(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        complex_0 = None
        bytes_0 = b'\xca)m\x1cw\xed\xc0\xb2\x96\xde\x1b\x8e\xef!Q\xccs'
        str_0 = ''
        inventory_manager_0 = module_0.InventoryManager(complex_0, bytes_0, str_0)
        bytes_1 = b'\xec\xd9H\x03!\xb0\x9aL\x04\xd0\xe9/'
        int_0 = 10
        inventory_manager_1 = module_0.InventoryManager(int_0)
        var_0 = inventory_manager_1.remove_restriction()
        list_0 = []
        inventory_manager_2 = module_0.InventoryManager(dict_0)
        inventory_manager_3 = module_0.InventoryManager(inventory_manager_2)
        var_1 = inventory_manager_3.restrict_to_hosts(list_0)
        tuple_0 = (dict_0, bytes_1)
        bool_0 = True
        inventory_manager_4 = module_0.InventoryManager(bool_0)
        var_2 = inventory_manager_2.remove_restriction()
        var_3 = inventory_manager_4.add_group(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 2144
        tuple_0 = ()
        str_0 = "`a]Td9ocM3`P'"
        dict_0 = {}
        inventory_manager_0 = module_0.InventoryManager(dict_0)
        var_0 = inventory_manager_0.get_hosts(int_0, tuple_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = None
        inventory_manager_0 = module_0.InventoryManager(list_0)
        var_0 = inventory_manager_0.reconcile_inventory()
        var_1 = inventory_manager_0.get_groups_dict()
        bool_0 = True
        float_0 = 1708.16
        str_0 = '1 8G\n'
        inventory_manager_1 = module_0.InventoryManager(float_0, str_0)
        var_2 = inventory_manager_1.clear_caches()
        var_3 = inventory_manager_0.restrict_to_hosts(list_0)
        bool_1 = True
        inventory_manager_2 = module_0.InventoryManager(bool_0)
        str_1 = '\n"a]29*"~tH\x0cRhEP'
        inventory_manager_3 = module_0.InventoryManager(inventory_manager_2, str_1)
        int_0 = -1119
        var_4 = inventory_manager_3.get_host(int_0)
        var_5 = inventory_manager_2.parse_source(bool_1)
        var_6 = inventory_manager_1.get_groups_dict()
        var_7 = inventory_manager_3.get_groups_dict()
        var_8 = inventory_manager_3.subset(inventory_manager_3)
        str_2 = 'DVMDs\nK Aj\x0bU'
        var_9 = inventory_manager_1.list_hosts(str_2)
        var_10 = inventory_manager_3.list_hosts()
        var_11 = inventory_manager_1.get_groups_dict()
        var_12 = inventory_manager_3.restrict_to_hosts(inventory_manager_1)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = None
        str_0 = '1q<d\\'
        tuple_0 = ()
        inventory_manager_0 = module_0.InventoryManager(tuple_0)
        var_1 = inventory_manager_0.clear_caches()
        inventory_manager_1 = module_0.InventoryManager(var_0, str_0)
        str_1 = 'bowish'
        var_2 = inventory_manager_0.add_group(str_1)
        str_2 = '&\n~6\x0c^=.MpFlG&'
        var_3 = inventory_manager_1.subset(str_2)
        var_4 = inventory_manager_1.list_hosts()
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = None
        var_1 = []
        inventory_manager_0 = module_0.InventoryManager(var_0, var_1)
        var_2 = inventory_manager_0._subset
        var_3 = inventory_manager_0.subset(inventory_manager_0)
        var_4 = inventory_manager_0._subset
        var_5 = inventory_manager_0.subset(var_0)
        var_6 = inventory_manager_0._subset
        str_0 = 'foo'
        str_1 = [str_0]
        var_7 = inventory_manager_0.subset(str_1)
        var_8 = inventory_manager_0._subset
        var_9 = inventory_manager_0.subset(str_0)
        var_10 = inventory_manager_0._subset
        str_2 = '@/tmp/bar'
        var_11 = inventory_manager_0.subset(str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = None
        float_0 = None
        int_0 = 2714
        bool_0 = True
        float_1 = -2165.982
        tuple_0 = (int_0, bool_0, float_1)
        list_0 = [float_0]
        tuple_1 = (float_0, tuple_0, tuple_0, list_0)
        inventory_manager_0 = module_0.InventoryManager(dict_0, tuple_1)
    except BaseException:
        pass