# Automatically generated by Pynguin.
import httpie.output.formatters.colors as module_0
import pygments.lexers as module_1
import httpie.context as module_2
import pygments.formatters.terminal256 as module_3

def test_case_0():
    try:
        environment_0 = None
        set_0 = {environment_0, environment_0, environment_0}
        color_formatter_0 = module_0.ColorFormatter(environment_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'u4'
        optional_0 = module_0.get_lexer(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
        str_0 = 'text/foo'
        optional_0 = module_0.get_lexer(str_0)
        bytes_0 = b'$smX\xd5'
        int_0 = -1959
        optional_1 = module_0.get_lexer(str_0, bytes_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'json'
        var_0 = module_1.get_lexer_by_name(str_0)
        terminal_formatter_0 = None
        environment_0 = module_2.Environment()
        terminal256_formatter_0 = module_3.Terminal256Formatter()
        str_1 = 'format_options'
        bytes_0 = b'\xbae\x187\x17\xac&\xdb\xfb?\x1e\xe2\xda\x94"\xcc'
        tuple_0 = (bytes_0, terminal_formatter_0)
        dict_0 = {str_1: terminal256_formatter_0, str_1: tuple_0, str_0: terminal256_formatter_0, str_0: tuple_0}
        color_formatter_0 = module_0.ColorFormatter(environment_0, terminal256_formatter_0, **dict_0)
        optional_0 = module_0.get_lexer(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'json'
        terminal_formatter_0 = None
        environment_0 = module_2.Environment()
        terminal256_formatter_0 = module_3.Terminal256Formatter()
        str_1 = 'format_options'
        bytes_0 = b'\xbae\x187\x17\xac&\xdb\xfb?\x1e\xe2\xda\x94"\xcc'
        tuple_0 = (bytes_0, terminal_formatter_0)
        dict_0 = {str_1: terminal256_formatter_0, str_1: tuple_0, str_0: terminal256_formatter_0, str_0: tuple_0}
        color_formatter_0 = module_0.ColorFormatter(environment_0, terminal256_formatter_0, **dict_0)
        str_2 = "Return processed `content`.\n\n        :param mime: E.g., 'application/atom+xml'.\n        :param content: The body content as text\n\n        "
        str_3 = 'config.json'
        str_4 = color_formatter_0.format_body(str_2, str_3)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'json'
        var_0 = module_1.get_lexer_by_name(str_0)
        solarized256_style_0 = module_0.Solarized256Style()
        terminal_formatter_0 = None
        environment_0 = module_2.Environment()
        terminal256_formatter_0 = module_3.Terminal256Formatter()
        str_1 = 'format_options'
        bytes_0 = b'\xbae\x187\x17\xac&\xdb\xfb?\x1e\xe2\xda\x94"\xcc'
        tuple_0 = (bytes_0, terminal_formatter_0)
        dict_0 = {str_1: tuple_0, str_1: tuple_0, str_0: environment_0, str_0: tuple_0}
        simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer(**dict_0)
        color_formatter_0 = module_0.ColorFormatter(environment_0, **dict_0)
        str_2 = None
        type_0 = color_formatter_0.get_style_class(str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'json'
        var_0 = module_1.get_lexer_by_name(str_0)
        solarized256_style_0 = module_0.Solarized256Style()
        terminal_formatter_0 = None
        environment_0 = module_2.Environment()
        terminal256_formatter_0 = module_3.Terminal256Formatter()
        str_1 = 'format_options'
        bytes_0 = b'\xbae\x187\x17\xac&\xdb\xfb?\x1e\xe2\xda\x94"\xcc'
        tuple_0 = (bytes_0, terminal_formatter_0)
        dict_0 = {str_1: tuple_0, str_1: tuple_0, str_0: environment_0, str_0: tuple_0}
        simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
        str_2 = 'n@k@XnZxoWD&Z\t~\x0b0+'
        float_0 = 691.58551
        dict_1 = {bytes_0: solarized256_style_0, simplified_h_t_t_p_lexer_0: dict_0, terminal_formatter_0: float_0, str_2: str_2}
        bytes_1 = b'\xfd'
        color_formatter_0 = module_0.ColorFormatter(environment_0, dict_1, bytes_1, **dict_0)
    except BaseException:
        pass