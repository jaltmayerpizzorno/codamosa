# Automatically generated by Pynguin.
import httpie.output.formatters.colors as module_0
import pygments.lexers as module_1
import httpie.context as module_2
import pygments.formatters.terminal256 as module_3

def test_case_0():
    pass

def test_case_1():
    str_0 = 'c&\nXn@/z/!F0&(\nAm1[%'
    optional_0 = module_0.get_lexer(str_0)

def test_case_2():
    str_0 = '\n    Possibly converts response data for prettified terminal display.\n\n    See httpie-msgpack for an examle converter plugin:\n\n        <https://github.com/rasky/httpie-msgpack>.\n\n    '
    optional_0 = module_0.get_lexer(str_0, str_0)

def test_case_3():
    str_0 = 'toe"t/foo'
    optional_0 = module_0.get_lexer(str_0)
    bool_0 = True
    optional_1 = module_0.get_lexer(str_0, bool_0, str_0)

def test_case_4():
    str_0 = 'application/json'
    optional_0 = module_0.get_lexer(str_0)

def test_case_5():
    str_0 = 'text/foo'
    optional_0 = module_0.get_lexer(str_0)
    bool_0 = True
    str_1 = '{"foo":"bar"}'
    optional_1 = module_0.get_lexer(str_0, bool_0, str_1)

def test_case_6():
    str_0 = 'application/json'
    bool_0 = True
    optional_0 = module_0.get_lexer(str_0, bool_0, str_0)

def test_case_7():
    str_0 = 'application/json'
    bool_0 = True
    optional_0 = module_0.get_lexer(str_0, bool_0, str_0)
    str_1 = "Return processed `content`.\n\n        :param mime: E.g., 'application/atom+xml'.\n        :param content: The body content as text\n\n        "
    optional_1 = module_0.get_lexer(str_1)

def test_case_8():
    str_0 = 'json'
    var_0 = module_1.get_lexer_by_name(str_0)
    terminal_formatter_0 = None
    environment_0 = module_2.Environment()
    terminal256_formatter_0 = module_3.Terminal256Formatter()
    str_1 = 'format_options'
    bytes_0 = b'\xbae\x187\x17\xac&\xdb\xfb?\x1e\xe2\xda\x94"\xcc'
    tuple_0 = (bytes_0, terminal_formatter_0)
    dict_0 = {str_1: tuple_0, str_1: tuple_0, str_0: environment_0, str_0: tuple_0}
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer(**dict_0)
    color_formatter_0 = module_0.ColorFormatter(environment_0, terminal256_formatter_0, **dict_0)
    type_0 = color_formatter_0.get_style_class(str_0)
    str_2 = "Return processed `content`.\n\n        :param mime: E.g., 'application/atom+xml'.\n        :param content: The body content as text\n\n        "
    optional_0 = module_0.get_lexer(str_2, environment_0)

def test_case_9():
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    solarized256_style_0 = module_0.Solarized256Style()
    str_0 = 'json'
    var_0 = module_1.get_lexer_by_name(str_0)
    terminal_formatter_0 = None
    environment_0 = module_2.Environment()
    terminal256_formatter_0 = module_3.Terminal256Formatter()
    str_1 = 'format_options'
    bytes_0 = b'\xbae\x187\x17\xac&\xdb\xfb?\x1e\xe2\xda\x94"\xcc'
    tuple_0 = (bytes_0, terminal_formatter_0)
    var_1 = terminal256_formatter_0.get_style_defs()
    dict_0 = {str_1: terminal256_formatter_0, str_1: tuple_0, str_0: terminal256_formatter_0, str_0: tuple_0}
    str_2 = '$j9=[,OV6:\n'
    str_3 = "ZA'"
    color_formatter_0 = module_0.ColorFormatter(environment_0, **dict_0)
    str_4 = color_formatter_0.format_headers(str_3)
    dict_1 = {str_0: var_0, str_2: environment_0}
    simplified_h_t_t_p_lexer_1 = module_0.SimplifiedHTTPLexer(**dict_1)
    color_formatter_1 = module_0.ColorFormatter(environment_0, terminal256_formatter_0, **dict_0)
    type_0 = color_formatter_1.get_style_class(str_0)
    str_5 = "Return processed `content`.\n\n        :param mime: E.g., 'application/atom+xml'.\n        :param content: The body content as text\n\n        "
    optional_0 = color_formatter_1.get_lexer_for_body(str_5, str_2)

def test_case_10():
    str_0 = 'application/\rdon'
    str_1 = 'json'
    var_0 = module_1.get_lexer_by_name(str_1)
    terminal_formatter_0 = None
    environment_0 = module_2.Environment()
    terminal256_formatter_0 = module_3.Terminal256Formatter()
    str_2 = 'format_options'
    bytes_0 = b'\xbae\x187\x17\xac&\xdb\xfb?\x1e\xe2\xda\x94"\xcc'
    str_3 = 'Y46\r,uw5\nY$B)'
    str_4 = '--body'
    tuple_0 = (bytes_0, terminal_formatter_0)
    dict_0 = {str_2: tuple_0, str_3: bytes_0, str_4: tuple_0, str_2: tuple_0, str_0: environment_0, str_1: tuple_0}
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer(**dict_0)
    color_formatter_0 = module_0.ColorFormatter(environment_0, terminal256_formatter_0, **dict_0)
    str_5 = color_formatter_0.format_body(str_4, str_0)
    type_0 = color_formatter_0.get_style_class(str_1)
    terminal256_formatter_1 = module_3.Terminal256Formatter(**dict_0)

def test_case_11():
    str_0 = 'applicati)on/json'
    str_1 = 'json'
    var_0 = module_1.get_lexer_by_name(str_1)
    terminal_formatter_0 = None
    environment_0 = module_2.Environment()
    terminal256_formatter_0 = module_3.Terminal256Formatter()
    str_2 = 'format_options'
    bytes_0 = b'\xbae\x187\x17\xac&\xdb\xfb?\x1e\xe2\xda\x94"\xcc'
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    tuple_0 = (bytes_0, terminal_formatter_0)
    dict_0 = {str_2: tuple_0, str_2: tuple_0, str_0: environment_0, str_1: tuple_0}
    simplified_h_t_t_p_lexer_1 = module_0.SimplifiedHTTPLexer(**dict_0)
    color_formatter_0 = module_0.ColorFormatter(environment_0, terminal256_formatter_0, **dict_0)
    terminal256_formatter_1 = module_3.Terminal256Formatter(**dict_0)
    str_3 = ';[e\\7l/+^|:Qgk<'
    type_0 = color_formatter_0.get_style_class(str_3)
    str_4 = 'Kpj;!uh'
    str_5 = color_formatter_0.format_body(str_4, str_0)
    type_1 = color_formatter_0.get_style_class(str_5)
    terminal256_formatter_2 = module_3.Terminal256Formatter(**dict_0)