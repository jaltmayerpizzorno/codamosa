# Automatically generated by Pynguin.
import ansible.plugins.action.fetch as module_0

def test_case_0():
    try:
        str_0 = 'collection_name must be a non-empty string of the form namespace.collection'
        bool_0 = False
        set_0 = set()
        str_1 = '%s --keyring %s del %s'
        float_0 = 1843.69
        list_0 = [float_0, bool_0]
        action_module_0 = module_0.ActionModule(bool_0, set_0, set_0, str_1, float_0, list_0)
        var_0 = action_module_0.run(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        tuple_0 = None
        tuple_1 = (tuple_0,)
        int_0 = 5150
        bytes_0 = b'\x03./\x85\x86\xdb\xb5'
        float_0 = -1425.0
        bool_1 = False
        bytes_1 = b'\xa7\xf5\xe0^q\x8c9\xa3\xe1\xe78'
        int_1 = -1516
        str_0 = "\n- include_role:\n    name: myrole\n\n- name: Run tasks/other.yaml instead of 'main'\n  include_role:\n    name: myrole\n    tasks_from: other\n\n- name: Pass variables to role\n  include_role:\n    name: myrole\n  vars:\n    rolevar1: value from task\n\n- name: Use role in loop\n  include_role:\n    name: '{{ roleinputvar }}'\n  loop:\n    - '{{ roleinput1 }}'\n    - '{{ roleinput2 }}'\n  loop_control:\n    loop_var: roleinputvar\n\n- name: Conditional role\n  include_role:\n    name: myrole\n  when: not idontwanttorun\n\n- name: Apply tags to tasks within included file\n  include_role:\n    name: install\n    apply:\n      tags:\n        - install\n  tags:\n    - always\n"
        tuple_2 = (int_1, str_0)
        float_1 = 2200.837
        int_2 = 131072
        action_module_0 = module_0.ActionModule(bool_1, bytes_0, bytes_1, tuple_2, float_1, int_2)
        float_2 = 2861.79
        str_1 = "#R'\x0c\tzbt*cEwBP\x0c"
        int_3 = 24
        tuple_3 = (float_2, str_1, action_module_0, int_3)
        str_2 = ''
        list_0 = [int_0]
        float_3 = None
        action_module_1 = module_0.ActionModule(action_module_0, tuple_3, str_0, str_2, list_0, float_3)
        str_3 = ''
        action_module_2 = module_0.ActionModule(action_module_1, int_2, int_2, str_3, int_0, bytes_0)
        str_4 = 'ffT.c@VXVQx-Z6NIuH'
        tuple_4 = (bytes_0, float_0, action_module_2, str_4)
        int_4 = 64
        bytes_2 = b'\xb1\xaa'
        action_module_3 = module_0.ActionModule(int_0, tuple_4, int_4, bytes_2, str_3, list_0)
        var_0 = action_module_3.run(bool_0, tuple_1)
    except BaseException:
        pass