# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        str_0 = ''
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 's;)t@6\x0b+'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '>=Lt'
        bool_0 = module_0.booleanize(str_0)
        str_1 = '(wKmS;x'
        str_2 = module_0.strip_html(str_1)
        str_3 = 'snake_case_to_camel'
        str_4 = module_0.strip_html(str_3)
        int_0 = -2875
        str_5 = module_0.compress(str_2, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'P=3I wFT q<v^ 0D'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_3 = module_0.asciify(str_2)
        str_4 = module_0.asciify(str_2)
        str_5 = '(\\s"[^"]+"(?=[?.:!,;])|(?<=\\S)"[^"]+"\\s|(?<=\\S)"[^"]+"(?=[?.:!,;])|\\s\\([^)]+\\)(?=[?.:!,;])|(?<=\\S)\\([^)]+\\)\\s|(?<=\\S)(\\([^)]+\\))(?=[?.:!,;]))'
        str_6 = module_0.slugify(str_5)
        str_7 = "xvn_,&4gOUC(d'\rIwj"
        str_8 = module_0.asciify(str_7)
        str_9 = 'y[(M[z7]'
        str_10 = module_0.prettify(str_9)
        str_11 = 'zYmv!af j7"mH'
        str_12 = module_0.slugify(str_11)
        str_13 = 'MASTERCARD'
        bool_0 = module_0.booleanize(str_13)
        str_14 = module_0.strip_html(str_0)
        str_15 = 'bI.8*BNkJjd.7([$zUb'
        int_0 = 15
        str_16 = module_0.compress(str_15, str_12, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 64
        list_0 = [int_0, int_0, int_0, int_0]
        string_compressor_0 = module_0.__StringCompressor()
        list_1 = [list_0, int_0, int_0, list_0]
        string_formatter_0 = module_0.__StringFormatter(list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'va.ZCYmurG>|DXo'
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.slugify(str_1)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_3 = 'ZE/Z?'
        str_4 = module_0.reverse(str_3)
        list_0 = []
        string_compressor_0 = module_0.__StringCompressor(*list_0)
        str_5 = '1$rBkPf:;pF-QN[!'
        str_6 = module_0.roman_encode(str_5)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 2917.7245
        var_0 = module_0.camel_case_to_snake(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        str_1 = module_0.snake_case_to_camel(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        str_1 = module_0.shuffle(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '-'
        bool_0 = True
        str_1 = module_0.strip_html(str_0, bool_0)
        set_0 = {str_1}
        var_0 = module_0.camel_case_to_snake(set_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        string_compressor_0 = module_0.__StringCompressor()
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        str_0 = None
        str_1 = module_0.slugify(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        bool_0 = module_0.booleanize(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        str_1 = module_0.strip_margin(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'is_isogram'
        int_0 = -751
        var_0 = module_0.camel_case_to_snake(str_0, int_0)
        string_compressor_0 = module_0.__StringCompressor()
        str_1 = module_0.snake_case_to_camel(str_0)
        int_1 = 3999
        str_2 = module_0.roman_encode(int_1)
        str_3 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_4 = module_0.asciify(str_3)
        str_5 = module_0.prettify(str_2)
        str_6 = module_0.strip_html(str_0)
        str_7 = '%.Sm{gX:J@;=g-Y_9NX\n'
        str_8 = '.VhCr\x0b#w&2b'
        str_9 = module_0.asciify(str_6)
        str_10 = module_0.compress(str_8, str_7, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'P=3I wFT q<v^ 0D'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_3 = module_0.asciify(str_2)
        str_4 = 'ish{i'
        str_5 = module_0.slugify(str_4)
        str_6 = module_0.asciify(str_2)
        str_7 = module_0.prettify(str_2)
        str_8 = module_0.slugify(str_5)
        str_9 = '\n    Converts a string into a "slug" using provided separator.\n    The returned string has the following properties:\n\n    - it has no spaces\n    - all letters are in lower case\n    - all punctuation signs and non alphanumeric chars are removed\n    - words are divided using provided separator\n    - all chars are encoded as ascii (by using `asciify()`)\n    - is safe for URL\n\n    *Examples:*\n\n    >>> slugify(\'Top 10 Reasons To Love Dogs!!!\') # returns: \'top-10-reasons-to-love-dogs\'\n    >>> slugify(\'Mönstér Mägnët\') # returns \'monster-magnet\'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign used to join string tokens (default to "-").\n    :type separator: str\n    :return: Slug string\n    '
        str_10 = module_0.strip_html(str_9)
        str_11 = module_0.compress(str_4)
        str_12 = 'n>KC.<,g\r.EE\x0b'
        str_13 = 'vV*PGl5h'
        str_14 = module_0.strip_margin(str_13)
        str_15 = module_0.shuffle(str_12)
        int_0 = module_0.roman_decode(str_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '\r\\!'
        str_1 = module_0.slugify(str_0)
        str_2 = module_0.slugify(str_1)
        bool_0 = True
        str_3 = module_0.snake_case_to_camel(str_0, bool_0)
        str_4 = "=x'b%Gh0+rd"
        str_5 = module_0.prettify(str_4)
        str_6 = module_0.decompress(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'is_isogram'
        int_0 = -751
        var_0 = module_0.camel_case_to_snake(str_0, int_0)
        str_1 = module_0.snake_case_to_camel(str_0)
        int_1 = 3999
        str_2 = module_0.roman_encode(int_1)
        str_3 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_4 = module_0.asciify(str_3)
        str_5 = module_0.strip_margin(str_1)
        str_6 = module_0.prettify(str_2)
        str_7 = '(kNc\x0b??v}mo#14?'
        str_8 = '%.Sm{gX:J@;=g-Y_9NX\n'
        str_9 = module_0.compress(str_7, str_8)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = None
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = None
        str_1 = module_0.reverse(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'P=3I wFT q<v^ 0D'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_3 = module_0.asciify(str_2)
        str_4 = 'ish{i'
        str_5 = module_0.slugify(str_4)
        str_6 = '&9>OVcKDLmDp*Lt'
        string_formatter_0 = module_0.__StringFormatter(str_6)
        str_7 = string_formatter_0.format()
        str_8 = module_0.asciify(str_2)
        str_9 = module_0.prettify(str_2)
        str_10 = module_0.slugify(str_8)
        bool_0 = module_0.booleanize(str_4)
        str_11 = None
        str_12 = module_0.strip_html(str_11)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'P=3I wFT q<v^ 0D'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_3 = module_0.asciify(str_2)
        str_4 = 'ish{i'
        str_5 = module_0.slugify(str_4)
        str_6 = module_0.asciify(str_2)
        str_7 = module_0.slugify(str_6)
        bool_0 = module_0.booleanize(str_4)
        str_8 = module_0.strip_html(str_7, bool_0)
        str_9 = 'Qs_sbn_1_'
        str_10 = '\n    Checks if a string is a valid ip v6.\n\n    *Examples:*\n\n    >>> is_ip_v6(\'2001:db8:85a3:0000:0000:8a2e:370:7334\') # returns true\n    >>> is_ip_v6(\'2001:db8:85a3:0000:0000:8a2e:370:?\') # returns false (invalid "?")\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if a v6 ip, false otherwise.\n    '
        str_11 = module_0.compress(str_10)
        str_12 = module_0.strip_margin(str_2)
        str_13 = module_0.shuffle(str_9)
        str_14 = 'strip_html'
        int_0 = module_0.roman_decode(str_14)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'P=3I wFT q<v^ 0D'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_3 = module_0.asciify(str_2)
        str_4 = 'ish{i'
        str_5 = module_0.slugify(str_4)
        str_6 = module_0.asciify(str_2)
        str_7 = module_0.prettify(str_2)
        str_8 = 'secure_random_hex'
        str_9 = module_0.slugify(str_8)
        bool_0 = module_0.booleanize(str_2)
        str_10 = '{\\,)C,Qn^z\x0bD J|Ih:AS'
        str_11 = module_0.strip_html(str_10)
        str_12 = module_0.compress(str_10)
        str_13 = module_0.strip_margin(str_2)
        str_14 = '{xAA'
        str_15 = module_0.shuffle(str_14)
        str_16 = 'is_uuid'
        int_0 = module_0.roman_decode(str_16)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'P=3I wFT q<v^ 0D'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_3 = module_0.asciify(str_1)
        str_4 = 'ish{i'
        str_5 = '4(\n>UA!7C=kv:<!)'
        str_6 = module_0.slugify(str_2, str_5)
        str_7 = '^[^\\S\\r\\n]+'
        str_8 = module_0.asciify(str_7)
        str_9 = module_0.prettify(str_6)
        str_10 = module_0.slugify(str_5)
        str_11 = 'zM>I_}\x0b;'
        bool_0 = module_0.booleanize(str_11)
        bool_1 = True
        str_12 = module_0.strip_html(str_4, bool_1)
        str_13 = 'B/=8yIy'
        int_0 = None
        str_14 = module_0.compress(str_13, str_8, int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'is_isogram'
        int_0 = -751
        var_0 = module_0.camel_case_to_snake(str_0, int_0)
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'is_isogram'
        str_1 = module_0.snake_case_to_camel(str_0)
        int_0 = 3981
        str_2 = module_0.roman_encode(int_0)
        str_3 = module_0.prettify(str_2)
        str_4 = '(kNc\x0b??v}mo#14?'
        str_5 = '%.Sm{gX:J@;=g-Y_9NX\n'
        str_6 = module_0.compress(str_4, str_5)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'P=3I wFT q<v^ 0D'
        str_1 = module_0.snake_case_to_camel(str_0)
        int_0 = 3980
        str_2 = module_0.slugify(str_1)
        str_3 = module_0.roman_encode(int_0)
        str_4 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_5 = module_0.asciify(str_4)
        str_6 = '%T`u8GG\x0bdH\nR=%"\t\'k'
        str_7 = module_0.slugify(str_6)
        str_8 = module_0.prettify(str_3)
        str_9 = 's!'
        str_10 = module_0.slugify(str_9)
        str_11 = '(kNc\x0b??v}mo#14?'
        bool_0 = module_0.booleanize(str_11)
        str_12 = module_0.strip_html(str_10, bool_0)
        str_13 = 'h?1N#L_&l~./QY'
        str_14 = '%.Sm{gX:J@;=g-Y_9NX\n'
        str_15 = ' L)Dq gTTh}=?Y'
        str_16 = module_0.compress(str_15)
        str_17 = module_0.compress(str_13, str_14)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'P=3I wFT q<v^ 0D'
        str_1 = module_0.snake_case_to_camel(str_0)
        int_0 = 3994
        str_2 = module_0.roman_encode(int_0)
        str_3 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_4 = module_0.asciify(str_3)
        str_5 = '%T`u8GG\x0bdH\nR=%"\t\'k'
        str_6 = module_0.slugify(str_5)
        str_7 = module_0.prettify(str_2)
        str_8 = 's!'
        str_9 = module_0.slugify(str_8)
        str_10 = '(kNc\x0b??v}mo#14?'
        bool_0 = module_0.booleanize(str_10)
        str_11 = module_0.strip_html(str_9, bool_0)
        str_12 = 'h?1N#L_&l~./QY'
        str_13 = '%.Sm{gX:J@;=g-Y_9NX\n'
        str_14 = module_0.compress(str_12, str_13)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'is_isogram'
        int_0 = -751
        str_1 = 'KGDF'
        str_2 = module_0.strip_margin(str_1)
        var_0 = module_0.camel_case_to_snake(str_0, int_0)
        str_3 = 'P=3I wFT q<v^ 0D'
        str_4 = module_0.snake_case_to_camel(str_3)
        int_1 = 4006
        str_5 = module_0.roman_encode(int_1)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'zsTisogram'
        str_1 = "|G?'['C~(\nDD:["
        str_2 = module_0.reverse(str_1)
        int_0 = -751
        var_0 = module_0.camel_case_to_snake(str_0, int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'the-silliest_BAND in the world'
        string_formatter_0 = module_0.__StringFormatter(str_0)
        str_1 = string_formatter_0.format()
        str_2 = 'SPACES_INSIDE'
        str_3 = module_0.asciify(str_2)
        str_4 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - S;ring cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
        str_5 = module_0.prettify(str_4)
        bool_0 = module_0.booleanize(str_5)
        bytes_0 = b'\x93\xa5Z\x9f\xbdL\x02\xd7'
        string_formatter_1 = module_0.__StringFormatter(bytes_0)
    except BaseException:
        pass