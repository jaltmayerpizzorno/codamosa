# Automatically generated by Pynguin.
import ansible.inventory.data as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        tuple_0 = ()
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.deserialize(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        inventory_data_0 = module_0.InventoryData()
        dict_0 = {}
        var_0 = inventory_data_0.deserialize(dict_0)
        set_0 = set()
        str_0 = 'YCfF<\\'
        var_1 = inventory_data_0.add_host(set_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -1130.0
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_group(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'test_group'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'test_group2'
        var_1 = inventory_data_0.add_group(str_1)
        str_2 = ''
        var_2 = inventory_data_0.add_group(str_2)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -722.02538
        inventory_data_0 = module_0.InventoryData()
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.get_host(inventory_data_0)
        var_1 = inventory_data_0.remove_group(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        inventory_data_0 = module_0.InventoryData()
        dict_0 = {inventory_data_0: inventory_data_0, inventory_data_0: inventory_data_0, inventory_data_0: inventory_data_0, inventory_data_0: inventory_data_0}
        tuple_0 = (dict_0,)
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.reconcile_inventory()
        var_1 = inventory_data_0.add_host(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_group(bool_0)
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_1.reconcile_inventory()
        bytes_0 = None
        var_2 = inventory_data_1.add_host(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'myhost'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.reconcile_inventory()
        var_2 = inventory_data_0.remove_host(var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '2$@=|8'
        int_0 = -1168
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_group(int_0)
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_1.get_groups_dict()
        inventory_data_2 = module_0.InventoryData()
        var_2 = inventory_data_1.reconcile_inventory()
        dict_0 = {}
        var_3 = inventory_data_1.add_host(str_0, dict_0)
        inventory_data_3 = module_0.InventoryData()
        str_1 = 'LdNf7$[[M'
        tuple_0 = None
        var_4 = inventory_data_1.set_variable(str_1, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        inventory_data_0 = module_0.InventoryData()
        bytes_0 = b'\xe1C\xcf'
        var_0 = inventory_data_0.reconcile_inventory()
        str_0 = '<string>'
        var_1 = inventory_data_0.add_child(bytes_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.reconcile_inventory()
        str_0 = '@sb&7k3WCI[lHw8'
        var_1 = inventory_data_0.add_host(str_0)
        float_0 = 998.0
        var_2 = inventory_data_1.get_host(float_0)
        int_0 = -2109
        var_3 = inventory_data_0.remove_group(int_0)
        var_4 = inventory_data_1.serialize()
        inventory_data_2 = module_0.InventoryData()
        list_0 = [int_0, int_0]
        inventory_data_3 = module_0.InventoryData()
        var_5 = inventory_data_3.remove_host(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'test_group'
        var_0 = inventory_data_0.add_group(str_0)
        var_1 = inventory_data_0.add_group(str_0)
        str_1 = 'test_group2'
        var_2 = inventory_data_0.add_group(str_1)
        str_2 = ''
        var_3 = inventory_data_0.add_group(str_2)
    except BaseException:
        pass

def test_case_12():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'localhost'
        str_1 = 'all'
        var_0 = inventory_data_0.add_host(str_0, str_1)
        str_2 = 'testhost1'
        var_1 = inventory_data_0.add_host(str_0, str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'all'
        str_1 = 'cnlgGo_kb%<$ '
        var_0 = inventory_data_0.add_child(str_0, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        str_0 = 'B'
        var_1 = inventory_data_0.add_host(str_0)
        int_0 = 0
        var_2 = inventory_data_0.remove_group(int_0)
        var_3 = inventory_data_0.reconcile_inventory()
        inventory_data_1 = module_0.InventoryData()
        var_4 = inventory_data_0.get_groups_dict()
        var_5 = inventory_data_1.serialize()
        var_6 = inventory_data_0.reconcile_inventory()
        var_7 = inventory_data_0.add_group(str_0)
        inventory_data_2 = module_0.InventoryData()
        var_8 = inventory_data_2.get_groups_dict()
        str_1 = 'M6<W(wq'
        var_9 = inventory_data_2.get_host(str_1)
        var_10 = inventory_data_0.reconcile_inventory()
        group_0 = module_1.Group(str_0)
        var_11 = inventory_data_2.remove_host(group_0)
        str_2 = 'ungrouped'
        var_12 = inventory_data_1.add_host(str_2)
        var_13 = inventory_data_2.reconcile_inventory()
        list_0 = []
        var_14 = inventory_data_0.add_host(list_0)
    except BaseException:
        pass