# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        str_0 = 'F'
        int_0 = False
        validation_0 = module_0.Validation(str_0, int_0)
        var_0 = validation_0.to_try()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -6079.90536
        dict_0 = {}
        tuple_0 = (dict_0,)
        str_0 = 'FA'
        validation_0 = module_0.Validation(float_0, str_0)
        var_0 = validation_0.to_maybe()
        validation_1 = module_0.Validation(float_0, tuple_0)
        var_1 = validation_1.is_success()
        var_2 = validation_1.to_lazy()
        int_0 = 2010
        float_1 = 2263.07
        str_1 = "$&q#y'@w\x0bY"
        int_1 = 1154
        dict_1 = {float_1: int_0, str_1: int_1}
        float_2 = -2187.53
        var_3 = validation_1.__eq__(float_2)
        var_4 = validation_1.__eq__(dict_1)
        var_5 = validation_0.__str__()
        validation_2 = module_0.Validation(str_1, int_1)
        var_6 = validation_2.map(float_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = None
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        set_0 = set()
        tuple_0 = ()
        validation_0 = module_0.Validation(set_0, tuple_0)
        var_0 = validation_0.__str__()
        bytes_0 = b'\xbe~\x98\xcb'
        str_0 = ''
        validation_1 = module_0.Validation(bytes_0, str_0)
        var_1 = validation_0.ap(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = None
        float_0 = -2585.582055
        validation_0 = module_0.Validation(tuple_0, float_0)
        var_0 = validation_0.to_box()
        int_0 = False
        validation_1 = module_0.Validation(float_0, int_0)
        bytes_0 = b'\x92\xf1\xcfC\xf7\xf8K\x16\xba\xa0\xb2*m\x11\xad5\x9a\x13\xb5'
        var_1 = validation_1.__eq__(bytes_0)
        var_2 = validation_1.__str__()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -691
        bool_0 = False
        validation_0 = module_0.Validation(int_0, bool_0)
        var_0 = validation_0.is_fail()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "sNgb`c:1NX,'"
        int_0 = True
        bool_0 = False
        dict_0 = {}
        validation_0 = module_0.Validation(dict_0, dict_0)
        tuple_0 = (bool_0, validation_0, str_0)
        var_0 = validation_0.to_either()
        bytes_0 = b'k\x84'
        validation_1 = module_0.Validation(tuple_0, bytes_0)
        var_1 = validation_1.to_box()
        validation_2 = module_0.Validation(str_0, int_0)
        bool_1 = True
        dict_1 = {bool_1: bool_1, bool_1: bool_1}
        validation_3 = module_0.Validation(bool_1, dict_1)
        var_2 = validation_3.is_success()
        str_1 = '\n        Return monad value.\n\n        :returns: monad value\n        :rtype: A\n        '
        tuple_1 = (str_1,)
        var_3 = validation_3.map(tuple_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xf0\xf9Uy\xe3e\x1a\xf3'
        list_0 = None
        set_0 = {bytes_0, bytes_0, bytes_0}
        str_0 = '%Q9<.\x0b\tILtdBmw-Rb^4g'
        validation_0 = module_0.Validation(set_0, str_0)
        var_0 = validation_0.bind(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 370.9654
        set_0 = {float_0, float_0}
        bool_0 = False
        str_0 = '<k%\\R'
        validation_0 = module_0.Validation(bool_0, str_0)
        var_0 = validation_0.ap(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -451.5
        bool_0 = True
        bytes_0 = b'L'
        int_0 = False
        dict_0 = {bytes_0: bool_0, bool_0: int_0}
        str_0 = '5?\r;) '
        list_0 = [str_0]
        tuple_0 = (dict_0, str_0, list_0)
        tuple_1 = (tuple_0, bytes_0)
        float_1 = 670.33
        set_0 = None
        validation_0 = module_0.Validation(float_1, set_0)
        validation_1 = module_0.Validation(tuple_1, str_0)
        var_0 = validation_1.__eq__(float_0)
        float_2 = -1014.007023
        var_1 = validation_1.to_either()
        list_1 = []
        validation_2 = module_0.Validation(float_2, list_1)
        var_2 = validation_2.is_success()
        var_3 = validation_1.ap(validation_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'NA`&M'
        set_0 = None
        tuple_0 = (str_0, set_0)
        bytes_0 = b'\xe2\xc5GY#Q'
        validation_0 = module_0.Validation(tuple_0, bytes_0)
        var_0 = validation_0.to_lazy()
        complex_0 = None
        var_1 = validation_0.bind(complex_0)
    except BaseException:
        pass