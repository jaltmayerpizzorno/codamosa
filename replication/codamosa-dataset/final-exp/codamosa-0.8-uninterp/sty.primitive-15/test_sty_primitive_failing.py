# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        str_0 = 'PTK\tt26A}21]'
        list_0 = [str_0, str_0, str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        type_0 = None
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        register_0.set_eightbit_call(type_0)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        register_0.mute()
        register_0.unmute()
        register_0.unmute()
        register_0.unmute()
        type_0 = None
        str_0 = ';'
        register_0.set_renderfunc(type_0, str_0)
        register_1 = register_0.copy()
        dict_0 = {str_0: register_0}
        var_0 = register_1.as_namedtuple()
        str_1 = register_0.__call__(**dict_0)
        list_0 = None
        register_0.set_eightbit_call(list_0)
        register_0.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'OtUcT('
        str_1 = '/0HkFxb{*7)J6@@t\t'
        dict_0 = {str_0: str_0, str_0: str_1, str_0: str_0}
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.set_rgb_call(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_0.mute()
        register_0.unmute()
        register_0.unmute()
        type_0 = None
        str_0 = ';'
        register_0.set_renderfunc(type_0, str_0)
        str_1 = "sO-'2@-]YJ@"
        register_1 = register_0.copy()
        dict_0 = {str_1: register_0}
        register_2 = register_1.copy()
        str_2 = register_0.__call__(**dict_0)
        list_0 = None
        register_0.set_eightbit_call(list_0)
        dict_1 = register_0.as_dict()
        register_2.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_0.mute()
        register_0.unmute()
        register_0.unmute()
        register_0.unmute()
        type_0 = None
        str_0 = ';'
        register_0.set_renderfunc(type_0, str_0)
        str_1 = "sO-'2@-]YJ@"
        register_1 = register_0.copy()
        register_0.set_rgb_call(type_0)
        dict_0 = {str_1: register_0}
        var_0 = register_1.as_namedtuple()
        str_2 = register_0.__call__(**dict_0)
        list_0 = None
        register_0.set_eightbit_call(list_0)
        dict_1 = register_0.as_dict()
        register_1.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_0.unmute()
        register_0.unmute()
        register_1 = register_0.copy()
        type_0 = None
        str_0 = ';'
        register_0.set_renderfunc(type_0, str_0)
        var_0 = register_1.as_namedtuple()
        register_2 = register_1.copy()
        list_0 = None
        register_0.set_eightbit_call(list_0)
        dict_0 = register_1.as_dict()
        dict_1 = {}
        str_1 = register_0.__call__(**dict_1)
        style_0 = module_0.Style()
        style_1 = module_0.Style()
        var_1 = register_0.__setattr__(str_0, style_1)
        str_2 = '<l'
        register_0.mute()
        register_0.set_rgb_call(str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_0.unmute()
        register_0.unmute()
        register_0.mute()
        str_0 = 'd'
        dict_0 = {}
        style_0 = module_0.Style(**dict_0)
        var_0 = register_0.__setattr__(str_0, style_0)
        register_1 = register_0.copy()
        type_0 = None
        str_1 = ';'
        register_0.set_renderfunc(type_0, str_1)
        register_2 = register_1.copy()
        var_1 = register_1.as_namedtuple()
        register_3 = register_2.copy()
        register_0.set_eightbit_call(type_0)
        dict_1 = register_1.as_dict()
        dict_2 = {}
        str_2 = register_0.__call__(**dict_2)
        style_1 = module_0.Style()
        style_2 = module_0.Style()
        var_2 = register_2.__setattr__(str_1, style_2)
        str_3 = '<l'
        list_0 = [str_3, str_1, str_3, str_3]
        register_0.mute()
        str_4 = register_3.__call__(*list_0)
        register_0.set_rgb_call(str_3)
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        str_0 = 'nR.bCN0nPTnq'
        list_0 = [str_0, str_0, str_0]
        str_1 = register_0.__call__(*list_0)
        register_2.unmute()
        str_2 = 'LPF}N0`{_4C'
        str_3 = '\n    Define Eightbit Foreground.\n\n    More info about 8-bit terminal colors: https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n\n    :param num: Eightbit number.\n    '
        dict_0 = {str_2: str_3}
        str_4 = 'n\t'
        style_0 = module_0.Style()
        style_1 = style_0.__new__(dict_0, value=str_4)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        list_0 = [str_0]
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_1 = register_1.__call__(*list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '.%T7f1M9Ry4FG'
        list_0 = [str_0, str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        float_0 = 207.739
        list_1 = [style_0, str_0, float_0]
        style_1 = module_0.Style(*list_1)
        register_1 = module_0.Register()
        register_2 = register_0.copy()
        var_0 = register_0.__setattr__(str_0, style_1)
    except BaseException:
        pass