# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    register_0 = module_0.Register()

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    str_0 = '\n        You can call a register-object directly. A call like this ``fg(144)``\n        is a Eightbit-call. With this method you can define the render-type for such calls.\n\n        :param rendertype: The new rendertype that is used for Eightbit-calls.\n        '
    style_0 = module_0.Style()
    register_0 = module_0.Register()
    var_0 = register_0.__setattr__(str_0, style_0)

def test_case_3():
    int_0 = -1031
    list_0 = [int_0]
    dict_0 = {}
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    str_0 = register_1.__call__(*list_0, **dict_0)

def test_case_4():
    register_0 = module_0.Register()
    register_1 = module_0.Register()
    str_0 = register_1.__call__()
    register_0.mute()
    register_1.mute()
    register_0.unmute()

def test_case_5():
    register_0 = module_0.Register()
    register_0.mute()
    str_0 = '6V*q<2g,.?*62Kyh[p='
    list_0 = [str_0, str_0, str_0]
    str_1 = register_0.__call__(*list_0)
    str_2 = 'COx%'
    register_0.mute()
    register_1 = register_0.copy()
    list_1 = [str_2, str_2]
    str_3 = '2EwH=z:{1)H'
    str_4 = '(Z_'
    style_0 = module_0.Style()
    dict_0 = {str_2: list_1, str_2: register_0, str_3: register_0, str_4: register_0}
    str_5 = register_0.__call__(*list_1, **dict_0)

def test_case_6():
    type_0 = None
    bytes_0 = b'N\x80U\x04Y'
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_1.set_renderfunc(type_0, bytes_0)

def test_case_7():
    str_0 = 'PTK\tt26A}21]'
    list_0 = [str_0, str_0, str_0]
    style_0 = module_0.Style(*list_0)
    register_0 = module_0.Register()
    register_0.mute()

def test_case_8():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_0.unmute()

def test_case_9():
    register_0 = module_0.Register()
    dict_0 = register_0.as_dict()

def test_case_10():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    style_0 = module_0.Style()
    str_0 = 'Y*Rupy 0'
    dict_0 = register_2.as_dict()
    callable_0 = None
    register_2.set_renderfunc(str_0, callable_0)
    register_3 = register_2.copy()
    var_0 = register_2.as_namedtuple()

def test_case_11():
    register_0 = module_0.Register()
    register_1 = register_0.copy()

def test_case_12():
    register_0 = module_0.Register()
    register_0.unmute()
    register_0.unmute()
    register_1 = register_0.copy()
    type_0 = None
    str_0 = ';'
    register_0.set_renderfunc(type_0, str_0)
    var_0 = register_1.as_namedtuple()
    register_2 = register_0.copy()
    dict_0 = register_1.as_dict()
    dict_1 = {}
    str_1 = register_0.__call__(**dict_1)
    style_0 = module_0.Style()
    style_1 = module_0.Style()
    var_1 = register_1.__setattr__(str_0, style_1)
    str_2 = '<l'
    list_0 = [str_2, str_0, str_2, str_2]
    register_0.mute()
    str_3 = register_2.__call__(*list_0)
    str_4 = 'B6B'
    var_2 = register_2.__setattr__(str_4, style_1)
    register_3 = register_1.copy()
    var_3 = register_2.as_namedtuple()
    var_4 = register_2.as_namedtuple()
    register_2.set_rgb_call(type_0)
    register_4 = register_0.copy()
    register_5 = register_1.copy()
    register_2.set_rgb_call(type_0)
    register_6 = register_3.copy()
    register_6.unmute()
    register_7 = module_0.Register()
    register_5.unmute()