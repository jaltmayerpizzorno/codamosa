# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        optional_0 = None
        int_0 = -1876
        parse_error_0 = module_0.ParseError(code=optional_0, messages=int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        base_error_0 = module_0.BaseError(code=str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Must be an array.'
        list_0 = [str_0, str_0, str_0]
        base_error_0 = module_0.BaseError(text=str_0)
        list_1 = base_error_0.messages()
        parse_error_0 = None
        message_0 = module_0.Message(text=str_0, key=str_0, index=list_0, position=parse_error_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        str_0 = 'pqa(>^4atnf%z\x0ciOE6L'
        int_0 = -156
        position_0 = module_0.Position(int_0, int_0, int_0)
        base_error_0 = module_0.BaseError(text=str_0, position=position_0)
        var_0 = base_error_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'L8'
        int_0 = -3327
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_0 = module_0.Message(text=str_0, start_position=position_0, end_position=position_0)
        int_1 = message_0.__hash__()
        str_1 = message_0.__repr__()
        str_2 = '"doAm/}.dcI#S7'
        message_1 = module_0.Message(text=str_2, code=str_2, key=str_2)
        bool_0 = message_1.__eq__(str_2)
        base_error_0 = module_0.BaseError(text=message_1)
        iterator_0 = base_error_0.__iter__()
        str_3 = 'j2i@F'
        none_type_0 = None
        message_2 = module_0.Message(text=str_3, code=str_2, key=str_3, start_position=none_type_0)
        str_4 = '2-42/\\h?h\x0b*+\n\x0cY%e0'
        message_3 = module_0.Message(text=str_4, code=str_1, position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '2b ?_(*j5;u]%f:?M'
        int_0 = -3909
        int_1 = -1175
        position_0 = module_0.Position(int_0, int_0, int_1)
        message_0 = module_0.Message(text=str_0, position=position_0, start_position=position_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'bp02-g'
        validation_result_0 = module_0.ValidationResult(value=str_0)
        message_0 = module_0.Message(text=str_0, key=str_0)
        str_1 = message_0.__repr__()
        base_error_0 = module_0.BaseError(code=str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 4
        position_0 = module_0.Position(int_0, int_0, int_0)
        bool_0 = position_0.__eq__(position_0)
        optional_0 = None
        str_0 = "7Jj'd43mKm*"
        validation_result_0 = module_0.ValidationResult(value=optional_0, error=str_0)
        str_1 = '.pmNi)*?T}\tN-S<J'
        list_0 = None
        message_0 = module_0.Message(text=str_1, key=str_1, index=list_0, end_position=position_0)
        list_1 = [message_0, message_0, message_0, message_0]
        base_error_0 = module_0.BaseError(key=int_0, messages=list_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1295
        int_1 = -1898
        int_2 = 2268
        position_0 = module_0.Position(int_0, int_1, int_2)
        str_0 = position_0.__repr__()
        str_1 = 'TGN#8"+=}f@\\,'
        base_error_0 = module_0.BaseError(text=str_1, key=int_0)
        list_0 = []
        bool_0 = base_error_0.__eq__(list_0)
        validation_error_0 = module_0.ValidationError(position=base_error_0, messages=list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = set()
        base_error_0 = module_0.BaseError(messages=set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'bp02-g'
        validation_result_0 = module_0.ValidationResult(value=str_0)
        message_0 = module_0.Message(text=str_0, key=str_0)
        base_error_0 = module_0.BaseError(code=str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        validation_result_0 = module_0.ValidationResult()
        str_0 = 'Z=IB-;D-o5lP0\\3r8|'
        validation_result_1 = module_0.ValidationResult(value=validation_result_0, error=str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '"doAm/}.dcI#S7'
        message_0 = module_0.Message(text=str_0, code=str_0, key=str_0)
        bool_0 = message_0.__eq__(str_0)
        any_0 = None
        validation_result_0 = module_0.ValidationResult(value=any_0)
        list_0 = [message_0]
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, key=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '"doAm/}.dcI#S7'
        message_0 = module_0.Message(text=str_0, code=str_0, key=str_0)
        bool_0 = message_0.__eq__(str_0)
        base_error_0 = module_0.BaseError(text=message_0)
        iterator_0 = base_error_0.__iter__()
        int_0 = -940
        int_1 = 3
        position_0 = module_0.Position(int_0, int_0, int_1)
        str_1 = position_0.__repr__()
        validation_result_0 = module_0.ValidationResult()
        str_2 = validation_result_0.__repr__()
        base_error_1 = module_0.BaseError(code=str_0, key=str_0, messages=validation_result_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '"doAm/}.dcI#S7'
        message_0 = module_0.Message(text=str_0, index=str_0)
        bool_0 = message_0.__eq__(message_0)
        list_0 = [message_0]
        validation_result_0 = module_0.ValidationResult()
        bool_1 = validation_result_0.__bool__()
        parse_error_0 = module_0.ParseError(messages=list_0)
        base_error_0 = module_0.BaseError(messages=parse_error_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '"doAm/}.dcI#S7'
        message_0 = module_0.Message(text=str_0, code=str_0, key=str_0)
        base_error_0 = module_0.BaseError(text=message_0)
        list_0 = base_error_0.messages(add_prefix=str_0)
        int_0 = 1
        int_1 = -912
        int_2 = 2852
        position_0 = module_0.Position(int_0, int_1, int_2)
        validation_result_0 = module_0.ValidationResult(error=base_error_0)
        str_1 = validation_result_0.__repr__()
        bool_0 = position_0.__eq__(list_0)
        parse_error_0 = module_0.ParseError(text=str_1)
        int_3 = -930
        int_4 = 2
        position_1 = module_0.Position(int_3, int_4, int_0)
        str_2 = position_1.__repr__()
        base_error_1 = module_0.BaseError(code=str_1)
    except BaseException:
        pass