# Automatically generated by Pynguin.
import youtube_dl.aes as module_0
import youtube_dl.utils as module_1

def test_case_0():
    try:
        str_0 = 'b~-'
        set_0 = {str_0}
        var_0 = module_0.aes_ctr_decrypt(str_0, str_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = None
        bool_0 = None
        set_0 = None
        var_0 = module_0.aes_cbc_decrypt(dict_0, bool_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'GZy6sIZ6wl9NJOKB-jnmVQ'
        var_0 = module_1.bytes_to_intlist(bytes_0)
        var_1 = module_0.key_expansion(var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        str_0 = 'M;\x0bUr'
        var_0 = module_0.aes_encrypt(set_0, str_0)
        str_1 = '-nGL]/o3'
        var_1 = module_0.key_expansion(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ZWedF/+Br@r3_#C'
        var_0 = module_0.aes_decrypt(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b''
        int_0 = 151
        str_0 = '.t+"`p\t@L&'
        var_0 = module_0.aes_decrypt_text(bytes_0, int_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'C'
        var_0 = module_0.sub_bytes_inv(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = None
        int_0 = 706
        var_0 = module_0.key_schedule_core(tuple_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\x08'
        str_0 = 'fcx*O/^qSr0^9&'
        var_0 = module_0.xor(bytes_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '+03xZy-h\rx3>'
        var_0 = module_0.mix_columns_inv(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = None
        var_0 = module_0.shift_rows(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'l\xd7n\xcf'
        bytes_1 = b'\xe3lC\x97\xbe\xb0\xad.\x1e\xa8o\x0e\xbe\xff\xfe\x8e'
        var_0 = module_0.shift_rows_inv(bytes_1)
        var_1 = module_0.mix_columns_inv(bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '<\\if`N\x0c7GB?'
        var_0 = module_0.inc(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 100000000.0
        var_0 = module_0.inc(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0]
        var_0 = module_0.rotate(list_0)
        bytes_0 = b'd\xf0\xed'
        var_1 = module_0.aes_cbc_decrypt(list_0, list_0, bytes_0)
        float_0 = None
        var_2 = module_0.mix_columns_inv(float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        str_0 = '^j[#3c*dn-~\x0cF+n{u'
        dict_0 = {bool_0: bool_0, bool_0: bool_0, str_0: str_0}
        tuple_0 = (dict_0, str_0)
        int_0 = 345
        var_0 = module_0.aes_cbc_encrypt(bool_0, tuple_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'l\xd7n\xcf'
        var_0 = module_0.mix_columns_inv(bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0, bool_0]
        bytes_0 = b'\xf6;\xb5\xc5'
        var_0 = module_0.aes_cbc_decrypt(bool_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'l\xd7n\xcf'
        list_0 = []
        var_0 = module_0.aes_decrypt(list_0, bytes_0)
        tuple_0 = ()
        var_1 = module_0.mix_columns_inv(tuple_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\x16`\x8f\x8b)\xdb^\xca\xfdj \xf0_\xf2\x88\x86\xd0\xcf'
        var_0 = module_1.bytes_to_intlist(bytes_0)
        var_1 = module_0.aes_cbc_encrypt(var_0, var_0, var_0)
        float_0 = 283.69657
        tuple_0 = (float_0,)
        dict_0 = {bytes_0: bytes_0, bytes_0: tuple_0, bytes_0: var_0}
        var_2 = module_0.inc(dict_0)
    except BaseException:
        pass