# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    try:
        bool_0 = True
        blueprint_group_0 = module_0.BlueprintGroup(bool_0)
        int_0 = blueprint_group_0.__len__()
        str_0 = '+R3,My@/.'
        blueprint_0 = module_1.Blueprint(str_0)
        str_1 = '\x0c<KF'
        blueprint_group_1 = module_0.BlueprintGroup(str_1)
        blueprint_group_1.append(blueprint_0)
        int_1 = None
        str_2 = '\\20Ht08#Bb)`,#'
        blueprint_group_0.__setitem__(int_1, str_2)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = None
        str_0 = 'qy~UD5(0Q}w\x0cNQ-'
        dict_0 = {str_0: str_0}
        blueprint_0 = module_1.Blueprint(str_0, str_0, dict_0)
        str_1 = '5-;0blF_[C\x0bp8'
        tuple_0 = (blueprint_0, str_0, str_1, str_1)
        blueprint_group_0 = module_0.BlueprintGroup(tuple_0)
        var_0 = blueprint_group_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0]
        set_1 = set()
        str_0 = 'e?cr y{@`'
        tuple_0 = (list_0, set_1, str_0)
        bool_0 = False
        float_0 = -5307.9865
        blueprint_group_0 = module_0.BlueprintGroup(float_0)
        blueprint_group_0.__setitem__(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.__delitem__(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 205
        str_0 = ''
        bool_0 = False
        blueprint_0 = module_1.Blueprint(str_0, str_0, str_0, bool_0)
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_1 = module_0.BlueprintGroup(blueprint_group_0)
        blueprint_group_1.insert(int_0, blueprint_0)
        int_1 = -1136
        str_1 = 'Tf7V@f${rnL-Eh{Jv\rnm'
        blueprint_1 = module_1.Blueprint(str_1, str_1)
        str_2 = 'HZAgLz<xD\t('
        blueprint_2 = module_1.Blueprint(str_2)
        bytes_0 = b'\x10]\x90j'
        blueprint_group_2 = module_0.BlueprintGroup(blueprint_2, bytes_0)
        blueprint_group_2.insert(int_1, blueprint_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 299
        str_0 = '\n        Run the HTTP Server and listen until keyboard interrupt or term\n        signal. On termination, drain connections before closing.\n\n        :param host: Address to host on\n        :type host: str\n        :param port: Port to host on\n        :type port: int\n        :param debug: Enables debug output (slows server)\n        :type debug: bool\n        :param auto_reload: Reload app whenever its source code is changed.\n                            Enabled by default in debug mode.\n        :type auto_relaod: bool\n        :param ssl: SSLContext, or location of certificate and key\n                    for SSL encryption of worker(s)\n        :type ssl: SSLContext or dict\n        :param sock: Socket for the server to accept connections from\n        :type sock: socket\n        :param workers: Number of processes received before it is respected\n        :type workers: int\n        :param protocol: Subclass of asyncio Protocol class\n        :type protocol: type[Protocol]\n        :param backlog: a number of unaccepted connections that the system\n                        will allow before refusing new connections\n        :type backlog: int\n        :param register_sys_signals: Register SIG* events\n        :type register_sys_signals: bool\n        :param access_log: Enables writing access logs (slows server)\n        :type access_log: bool\n        :param unix: Unix socket to listen on instead of TCP port\n        :type unix: str\n        :return: Nothing\n        '
        blueprint_0 = module_1.Blueprint(str_0, str_0)
        list_0 = None
        bool_0 = True
        dict_0 = {list_0: list_0, list_0: list_0, list_0: bool_0}
        tuple_0 = (dict_0,)
        blueprint_group_0 = module_0.BlueprintGroup(tuple_0)
        blueprint_group_0.insert(int_0, blueprint_0)
    except BaseException:
        pass

def test_case_6():
    try:
        blueprint_group_0 = module_0.BlueprintGroup()
        var_0 = blueprint_group_0.middleware()
        list_0 = [var_0, blueprint_group_0, blueprint_group_0, blueprint_group_0]
        str_0 = '_port'
        dict_0 = {}
        int_0 = -3347
        blueprint_0 = module_1.Blueprint(str_0)
        blueprint_group_0.insert(int_0, blueprint_0)
        int_1 = 573
        blueprint_group_1 = module_0.BlueprintGroup(dict_0, int_1)
        var_1 = blueprint_group_0.middleware(*list_0, **dict_0)
    except BaseException:
        pass