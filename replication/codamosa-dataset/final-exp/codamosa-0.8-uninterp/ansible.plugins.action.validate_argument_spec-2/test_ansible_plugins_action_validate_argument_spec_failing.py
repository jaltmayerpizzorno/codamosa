# Automatically generated by Pynguin.
import ansible.plugins.action.validate_argument_spec as module_0

def test_case_0():
    try:
        str_0 = "LdV0.\rFbWx'L]a(uZv&"
        set_0 = {str_0}
        list_0 = []
        bytes_0 = b"\xae{*'\xdf\xc9]\x0f)\xd4\x1d\xc7U"
        set_1 = {bytes_0, bytes_0, bytes_0}
        bool_0 = True
        str_1 = 'CDVN(sq^1.'
        set_2 = {bytes_0, bool_0, bool_0, bool_0}
        list_1 = [bool_0, bytes_0, set_2]
        float_0 = 512.0
        action_module_0 = module_0.ActionModule(set_1, bool_0, str_1, set_1, list_1, float_0)
        var_0 = action_module_0.get_args_from_task_vars(set_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        bool_0 = False
        int_0 = -23
        str_0 = "yIa'\tr\rb0'%2"
        float_0 = 520.0
        action_module_0 = module_0.ActionModule(list_0, list_0, bool_0, int_0, str_0, float_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        bool_0 = False
        int_0 = -23
        str_0 = "yI&Ta\tr\rb0'%2"
        float_0 = 1541.0
        action_module_0 = module_0.ActionModule(list_0, list_0, bool_0, int_0, str_0, float_0)
        var_0 = action_module_0.run(list_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        str_0 = '\nargument_errors:\n  description: A list of arg validation errors.\n  returned: failure\n  type: list\n  elements: str\n  sample:\n    - "error message 1"\n    - "error message 2"\n\nargument_spec_data:\n  description: A dict of the data from the \'argument_spec\' arg.\n  returned: failure\n  type: dict\n  sample:\n    some_arg:\n      type: "str"\n    some_other_arg:\n      type: "int"\n      required: true\n\nvalidate_args_context:\n  description: A dict of info about where validate_args_spec was used\n  type: dict\n  returned: always\n  sample:\n    name: my_role\n    type: role\n    path: /home/user/roles/my_role/\n    argument_spec_name: main\n'
        set_0 = {str_0, str_0, str_0, str_0}
        str_1 = '#d6TNJ$('
        float_0 = 1.8546091953139112
        dict_0 = {bool_0: bool_0, str_0: bool_0, float_0: str_1, float_0: str_0}
        bool_1 = True
        tuple_0 = (str_0, float_0, bool_1)
        dict_1 = {}
        bytes_0 = b'\xdb\x060Y\xa1\x13m\x96'
        tuple_1 = (bytes_0, set_0)
        action_module_0 = module_0.ActionModule(str_1, tuple_1, set_0, bool_0, dict_1, dict_1)
        var_0 = action_module_0.get_args_from_task_vars(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        str_0 = '\nargument_errors:\n  description: A list of arg validation errors.\n  returned: failure\n  type: list\n  elements: str\n  sample:\n    - "error message 1"\n    - "error message 2"\n\nargument_spec_data:\n  description: A dict of the data from the \'argument_spec\' arg.\n  returned: failure\n  type: dict\n  sample:\n    some_arg:\n      type: "str"\n    some_other_arg:\n      type: "int"\n      required: true\n\nvalidate_args_context:\n  description: A dict of info about where validate_args_spec was used\n  type: dict\n  returned: always\n  sample:\n    name: my_role\n    type: role\n    path: /home/user/roles/my_role/\n    argument_spec_name: main\n'
        set_0 = {str_0, str_0, str_0, str_0}
        str_1 = '#d6TNJ$('
        float_0 = 0.5
        bool_1 = True
        tuple_0 = (str_0, float_0, bool_1)
        list_0 = [str_1, set_0, bool_0]
        dict_0 = {}
        bytes_0 = b"k#>\xb5\xc7\x06'(\xd8L\x02\xf5\x92\xa3\x99r\x0e\xc5\xe3"
        int_0 = 182
        tuple_1 = (bytes_0, set_0)
        action_module_0 = module_0.ActionModule(str_1, tuple_1, set_0, bool_0, dict_0, dict_0)
        float_1 = 5117.09
        action_module_1 = module_0.ActionModule(list_0, dict_0, bytes_0, int_0, action_module_0, float_1)
        var_0 = action_module_1.get_args_from_task_vars(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        str_0 = '\nargument_errors:\n  description: A list of arg validation errors.\n  returned: failure\n  type: list\n  elements: str\n  sample:\n    - "error message 1"\n    - "error message 2"\n\nargument_spec_data:\n  description: A dict of the data from the \'argument_spec\' arg.\n  returned: failure\n  type: dict\n  sample:\n    some_arg:\n      type: "str"\n    some_other_arg:\n      type: "int"\n      required: true\n\nvalidate_args_context:\n  description: A dict of info about where validate_args_spec was used\n  type: dict\n  returned: always\n  sample:\n    name: my_role\n    type: role\n    path: /home/user/roles/my_role/\n    argument_spec_name: main\n'
        set_0 = {str_0, str_0, str_0, str_0}
        str_1 = '#d6TNJ$('
        float_0 = 0.5
        dict_0 = {bool_0: bool_0, str_0: bool_0, float_0: str_1, float_0: str_0}
        float_1 = 461.6
        bool_1 = False
        tuple_0 = (str_0, float_1, bool_1)
        list_0 = [str_1, set_0, bool_0]
        dict_1 = {}
        bytes_0 = b"k#>\xb5\xc7\x06'(\xd8L\x02\xf5\x92\xa3\x99r\x0e\xc5\xe3"
        int_0 = 182
        bytes_1 = b'\xdb\x060Y\xa1\x13m\x96'
        tuple_1 = (bytes_1, set_0)
        action_module_0 = module_0.ActionModule(str_1, tuple_1, set_0, bool_0, dict_1, dict_1)
        float_2 = 5117.09
        action_module_1 = module_0.ActionModule(list_0, dict_1, bytes_0, int_0, action_module_0, float_2)
        var_0 = action_module_1.get_args_from_task_vars(dict_0, tuple_0)
    except BaseException:
        pass