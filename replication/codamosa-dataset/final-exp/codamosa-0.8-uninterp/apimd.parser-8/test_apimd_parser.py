# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = '@RvA\t;-dCJo.mhB'
    str_1 = module_0.parent(str_0)

def test_case_2():
    str_0 = 'C*Ogr{tE^`?5NGZ|'
    bool_0 = module_0.is_public_family(str_0)

def test_case_3():
    parser_0 = module_0.Parser()
    str_0 = '1Z'
    bool_0 = module_0.is_public_family(str_0)
    var_0 = parser_0.__post_init__()
    expr_0 = module_1.expr()
    str_1 = parser_0.compile()
    dict_0 = None
    str_2 = module_0.code(str_1)
    str_3 = 'kb%.]V.PCqk4-\x0c,'
    str_4 = parser_0.resolve(str_3, expr_0)
    var_1 = parser_0.__eq__(dict_0)
    str_5 = module_0.const_type(expr_0)

def test_case_4():
    str_0 = 'I$'
    str_1 = module_0.doctest(str_0)

def test_case_5():
    str_0 = '}rCd<Uhv2]\x0c%'
    str_1 = '6{}\x0cd=tE4'
    str_2 = 'cMZC,-Y/COZ2L~&RBO<'
    str_3 = '>@We'
    str_4 = None
    dict_0 = {str_1: str_2, str_3: str_4}
    str_5 = None
    resolver_0 = module_0.Resolver(str_0, dict_0, str_5)

def test_case_6():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    attribute_0 = module_1.Attribute(*list_0)
    str_0 = 'Bf.NrNuPFzY}}M<j'
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
    expr_0 = module_1.expr()
    str_1 = module_0.const_type(expr_0)

def test_case_7():
    parser_0 = module_0.Parser()
    str_0 = 'a'
    parser_0.load_docstring(str_0, str_0)

def test_case_8():
    str_0 = 'Gn'
    list_0 = [str_0, str_0, str_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    bool_0 = False
    dict_0 = {}
    dict_1 = {str_0: str_0}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1)
    parser_0.globals(str_0, ann_assign_0)

def test_case_9():
    str_0 = 'if a:\n    b'
    bool_0 = False
    int_0 = 267
    parser_0 = module_0.Parser(bool_0, int_0)
    parser_0.parse(str_0, str_0)
    str_1 = parser_0.compile()

def test_case_10():
    str_0 = 'if a:\n    b'
    bool_0 = True
    int_0 = 254
    parser_0 = module_0.Parser(bool_0, int_0)
    parser_0.parse(str_0, str_0)
    str_1 = parser_0.compile()
    expr_0 = module_1.expr()
    str_2 = module_0.const_type(expr_0)

def test_case_11():
    str_0 = None
    import_from_0 = module_1.ImportFrom()
    bool_0 = False
    str_1 = 'typing'
    str_2 = None
    str_3 = 'GvTc"'
    str_4 = 'hN@\tQt'
    str_5 = '@'
    str_6 = ''
    dict_0 = {str_1: str_1, str_2: str_3, str_3: str_4, str_5: str_6}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    parser_0.imports(str_0, import_from_0)

def test_case_12():
    str_0 = '-'
    list_0 = [str_0, str_0, str_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    bool_0 = False
    dict_0 = {}
    subscript_0 = module_1.Subscript(*list_0)
    str_1 = None
    dict_1 = {str_1: str_1}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1)
    assign_0 = module_1.Assign(*list_0)
    parser_0.globals(str_1, assign_0)

def test_case_13():
    parser_0 = module_0.Parser()
    str_0 = 'LZ'
    bool_0 = module_0.is_public_family(str_0)
    var_0 = parser_0.__post_init__()
    expr_0 = module_1.expr()
    str_1 = parser_0.compile()
    dict_0 = None
    str_2 = 'kb%.]V.PCqk4-\x0c,'
    str_3 = parser_0.resolve(str_2, expr_0)
    var_1 = parser_0.__eq__(dict_0)
    str_4 = module_0.const_type(expr_0)

def test_case_14():
    str_0 = '/i4Akx-e<)Cp{\x0c'
    str_1 = module_0.esc_underscore(str_0)

def test_case_15():
    expr_0 = module_1.expr()
    str_0 = module_0.const_type(expr_0)

def test_case_16():
    bool_0 = False
    int_0 = 254
    str_0 = '"*=B%B\x0b\r$@wC!R[[Gvl'
    str_1 = module_0.esc_underscore(str_0)
    parser_0 = module_0.Parser(bool_0, int_0)
    list_0 = []
    stmt_0 = None
    list_1 = [stmt_0, stmt_0, stmt_0]
    parser_0.class_api(str_1, str_1, list_0, list_1)

def test_case_17():
    str_0 = 'LZ'
    bool_0 = module_0.is_public_family(str_0)
    expr_0 = module_1.expr()
    str_1 = module_0.const_type(expr_0)

def test_case_18():
    bool_0 = True
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    str_0 = parser_0.compile()

def test_case_19():
    str_0 = 'if a:\n    b'
    bool_0 = True
    bool_1 = True
    dict_0 = {str_0: str_0, str_0: str_0}
    parser_0 = module_0.Parser(bool_0, bool_1, dict_0, dict_0)
    str_1 = parser_0.compile()
    str_2 = 'ev Pl'
    var_0 = module_1.parse(str_0, str_2)

def test_case_20():
    str_0 = 'Gn'
    list_0 = [str_0, str_0, str_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    str_1 = 'xR+UL4$:>_p&4:u\rpdt?'
    subscript_0 = module_1.Subscript(*list_0)
    str_2 = None
    str_3 = ''
    dict_0 = {str_2: str_3}
    resolver_0 = module_0.Resolver(str_3, dict_0, str_3)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
    resolver_1 = module_0.Resolver(str_1, dict_0)

def test_case_21():
    str_0 = 'Gn'
    list_0 = [str_0, str_0, str_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    bool_0 = False
    dict_0 = {}
    subscript_0 = module_1.Subscript(*list_0)
    str_1 = None
    dict_1 = {str_1: str_1}
    resolver_0 = module_0.Resolver(str_0, dict_1)
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1)
    assign_0 = module_1.Assign(*list_0)
    parser_0.globals(str_1, assign_0)

def test_case_22():
    str_0 = '_'
    str_1 = module_0.esc_underscore(str_0)
    str_2 = 'a'
    str_3 = module_0.esc_underscore(str_2)
    str_4 = '_a'
    bool_0 = module_0.is_public_family(str_0)
    str_5 = module_0.esc_underscore(str_4)
    str_6 = 'a_'
    str_7 = module_0.esc_underscore(str_6)
    str_8 = module_0.esc_underscore(str_1)
    str_9 = 'aaa'
    str_10 = module_0.esc_underscore(str_9)
    str_11 = 'aY_'
    str_12 = module_0.esc_underscore(str_11)
    str_13 = '__'
    str_14 = module_0.esc_underscore(str_13)

def test_case_23():
    str_0 = '_'
    str_1 = module_0.esc_underscore(str_0)
    str_2 = 'a'
    str_3 = module_0.esc_underscore(str_2)
    str_4 = '_a'
    str_5 = module_0.esc_underscore(str_4)
    str_6 = 'a_'
    str_7 = module_0.esc_underscore(str_6)
    str_8 = 'a_b'
    str_9 = module_0.esc_underscore(str_8)
    str_10 = 'aaa'
    str_11 = module_0.esc_underscore(str_10)
    str_12 = 'a_a_'
    str_13 = module_0.esc_underscore(str_12)
    str_14 = '__'
    str_15 = module_0.esc_underscore(str_14)

def test_case_24():
    str_0 = '>>> print(1)'
    str_1 = module_0.doctest(str_0)
    bool_0 = module_0.is_magic(str_0)

def test_case_25():
    str_0 = '>>> print(1)'
    str_1 = module_0.doctest(str_0)
    str_2 = '>>> print(1)\n    print(1)\n>>> print(2)'
    str_3 = module_0.doctest(str_2)

def test_case_26():
    int_0 = 0
    str_0 = '1'
    var_0 = module_1.parse(str_0)
    var_1 = var_0.body[int_0]
    var_2 = var_1.value
    str_1 = module_0.const_type(var_2)
    str_2 = '1.1'
    var_3 = module_1.parse(str_2)
    var_4 = var_3.body[int_0]
    str_3 = module_0.const_type(var_3)
    str_4 = '1j'
    var_5 = module_1.parse(str_4)
    var_6 = var_5.body[int_0]
    var_7 = var_6.value
    str_5 = module_0.const_type(var_7)
    str_6 = 'XTo3e'
    var_8 = module_1.parse(str_6)
    var_9 = var_8.body[int_0]
    var_10 = var_9.value
    str_7 = module_0.const_type(var_10)
    str_8 = 'False'
    var_11 = module_1.parse(str_8)
    var_12 = var_11.body[int_0]
    str_9 = module_0.const_type(var_6)
    str_10 = 'None'
    var_13 = module_1.parse(str_10)
    var_14 = var_13.body[int_0]
    var_15 = var_14.value
    str_11 = module_0.const_type(var_15)
    var_16 = module_1.parse(str_7)
    var_17 = var_16.body[int_0]
    var_18 = var_17.value
    str_12 = module_0.const_type(var_18)
    str_13 = '{"a", "b"}'
    var_19 = module_1.parse(str_13)
    var_20 = var_19.body[int_0]
    var_21 = var_20.value
    str_14 = module_0.const_type(var_21)