# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1
import collections.abc as module_2

def test_case_0():
    try:
        str_0 = None
        str_1 = module_0.doctest(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        constant_0 = module_1.Constant()
        str_0 = '}T\\{h=`mo'
        expr_0 = module_1.expr()
        str_1 = module_0.const_type(expr_0)
        str_2 = "Z*hR=>'!lEJ&w>^TS751"
        import_0 = module_1.Import()
        dict_0 = {}
        parser_0 = module_0.Parser(dict_0)
        resolver_0 = module_0.Resolver(str_0, dict_0, str_2)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        import_0 = module_1.Import()
        str_1 = 'lY\x0b\x0caA^*l*E@z.&'
        str_2 = 'collections.abc.MappingView'
        str_3 = '%+06sK=1l'
        dict_0 = {str_1: str_2, str_3: str_3, str_2: str_2}
        parser_0 = module_0.Parser(dict_0, dict_0)
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'j4\x0bHyT\x0cAs1J5]Wk'
        list_0 = [str_0, str_0, str_0, str_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        int_0 = 2946
        str_1 = '4*GqGv>>.*+g='
        str_2 = '^5Ha#&KBp4yLB[\nz#'
        dict_0 = {str_1: str_2}
        str_3 = '}{8IKiH|3M@zBGm'
        resolver_0 = module_0.Resolver(str_1, dict_0, str_3)
        parser_0 = module_0.Parser(int_0)
        parser_0.api(str_0, function_def_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'E?xQ#/(Ci9c)!'
        str_1 = 'zYB(.c"[IT\x0b.(L$B.Mb'
        list_0 = [str_1, str_1, str_0]
        arguments_0 = module_1.arguments(*list_0)
        constant_0 = module_1.Constant()
        bool_0 = False
        parser_0 = module_0.Parser()
        parser_0.func_api(str_0, str_1, arguments_0, constant_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'hyAqPThP\\'
        str_1 = module_0.esc_underscore(str_0)
        str_2 = '}W0eA;-Yp|Q*'
        int_0 = -1302
        parser_0 = module_0.Parser(int_0)
        bool_0 = parser_0.is_public(str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'bool'
        async_function_def_0 = module_1.AsyncFunctionDef()
        str_1 = '`ID\x0cr'
        int_0 = -1075
        dict_0 = {str_1: int_0}
        dict_1 = {}
        parser_0 = module_0.Parser(dict_0, dict_1)
        parser_0.api(str_0, async_function_def_0, prefix=str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'B\\;!=(jVF\x0c:nbc9'
        str_1 = '/`i(E\tNAx'
        str_2 = '--dir'
        str_3 = 'x#j'
        str_4 = ':li[/\x0cO. pJt'
        str_5 = module_0.code(str_4)
        str_6 = '3s-g~\x0bV8?e]F1e*W'
        str_7 = 'XBnk\\t:DJ nc%bg/q\t_h'
        dict_0 = {str_1: str_2, str_1: str_3, str_1: str_6, str_1: str_7}
        str_8 = 'G^a'
        resolver_0 = module_0.Resolver(str_0, dict_0, str_8)
        list_0 = [str_8, str_2, str_2]
        dict_1 = {}
        parser_0 = module_0.Parser(dict_1, dict_0)
        var_0 = parser_0.__repr__()
        str_9 = 'BC&XOcdE5jM\rm*'
        str_10 = '|,Gj- 5Ci$>*$(x|I*,w'
        dict_2 = {}
        expr_0 = module_1.expr(**dict_2)
        list_1 = [expr_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        list_2 = [function_def_0, dict_1, list_1]
        parser_0.class_api(str_9, str_10, list_1, list_2)
    except BaseException:
        pass

def test_case_8():
    try:
        constant_0 = module_1.Constant()
        str_0 = '}T\\{h=`mo'
        expr_0 = module_1.expr()
        str_1 = module_0.const_type(expr_0)
        str_2 = "Z*hR=>'!lEJ&w>^TS751"
        import_0 = module_1.Import()
        dict_0 = {}
        parser_0 = module_0.Parser(dict_0)
        str_3 = module_0.code(str_2)
        resolver_0 = module_0.Resolver(str_0, dict_0, str_2)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'root'
        str_1 = 'x'
        str_2 = 'root.x'
        str_3 = 'root.n'
        str_4 = 'root.o'
        str_5 = 'root.a.b'
        str_6 = 'y'
        str_7 = 'o'
        str_8 = 'c'
        str_9 = {str_1: str_6, str_2: str_3, str_3: str_7, str_4: str_6, str_5: str_8}
        resolver_0 = module_0.Resolver(str_0, str_9)
        int_0 = 0
        var_0 = module_1.parse(str_1)
        var_1 = var_0.body[int_0]
        var_2 = resolver_0.visit(var_1)
        str_10 = 'a.b'
        var_3 = module_1.parse(str_10)
        list_0 = None
        dict_0 = {str_6: str_7}
        assign_0 = module_1.Assign(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        list_0 = [str_0, str_0]
        dict_0 = {}
        name_0 = module_1.Name(*list_0, **dict_0)
        str_1 = 'v['
        str_2 = '&.vT2QamE\x0b2?("uG'
        str_3 = 'in'
        str_4 = ',)\ti3'
        dict_1 = {str_2: str_3, str_0: str_3, str_4: str_0}
        resolver_0 = module_0.Resolver(str_1, dict_1)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        async_function_def_0 = module_1.AsyncFunctionDef()
        bool_0 = False
        str_5 = '\x0c{ b'
        str_6 = 'i\x0b_/ej3;wiBtFn3'
        list_1 = [str_0, str_5, bool_0]
        str_7 = '0'
        dict_2 = {str_5: str_6, str_7: str_6}
        expr_0 = module_1.expr(*list_1, **dict_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '>>> print(1)'
        str_1 = module_0.doctest(str_0)
        str_2 = module_0.code(str_1)
        str_3 = '```python'
        list_0 = []
        name_0 = module_1.Name(*list_0)
        dict_0 = {str_2: str_0, str_2: str_0}
        resolver_0 = module_0.Resolver(str_3, dict_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_12():
    try:
        iterable_0 = None
        str_0 = module_0.table(items=iterable_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'MU<dfF'
        assign_0 = module_1.Assign()
        str_1 = 'Z*6ny)'
        str_2 = None
        str_3 = '\'9tUa?H?Q4l)E"D'
        list_0 = [str_1, str_2, str_3, str_0]
        iterable_0 = None
        str_4 = module_0.table(*list_0, items=iterable_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'root'
        str_1 = 'x'
        str_2 = 'root.x'
        str_3 = 'root.n'
        str_4 = 'root.o'
        str_5 = 'root.a.b'
        str_6 = 'n'
        str_7 = 'c'
        str_8 = {str_1: str_7, str_2: str_6, str_3: str_3, str_4: str_7, str_5: str_7}
        resolver_0 = module_0.Resolver(str_0, str_8)
        int_0 = 0
        var_0 = module_1.parse(str_1)
        var_1 = var_0.body[int_0]
        var_2 = resolver_0.visit(var_1)
        var_3 = module_1.parse(str_3)
        var_4 = var_3.body[int_0]
        var_5 = module_1.parse(str_3)
        var_6 = var_5.body[int_0]
        var_7 = resolver_0.visit(var_6)
        var_8 = module_1.parse(str_7)
        var_9 = var_8.body[int_0]
        var_10 = module_1.parse(str_6)
        var_11 = var_10.body[int_0]
        var_12 = resolver_0.visit(var_11)
        var_13 = module_1.parse(str_7)
        var_14 = var_13.body[int_0]
        var_15 = module_1.parse(str_4)
        var_16 = var_15.body[int_0]
        var_17 = resolver_0.visit(var_16)
        var_18 = module_1.parse(str_3)
        var_19 = var_18.body[int_0]
        var_20 = module_1.parse(str_1)
        var_21 = var_20.body[int_0]
        var_22 = resolver_0.visit(var_21)
        var_23 = var_21.body[str_4]
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0]
        ann_assign_0 = module_1.AnnAssign(*list_0)
        dict_0 = {}
        str_1 = 'xR+UL4$:>_p&4:u\rpdt?'
        str_2 = module_0.code(str_0)
        str_3 = 'Hf\x0bC>(UZw2*'
        str_4 = '```'
        subscript_0 = module_1.Subscript(*list_0)
        str_5 = 'q|'
        bool_0 = module_0.is_public_family(str_5)
        dict_1 = {str_3: str_3}
        str_6 = '#33`EakA\\\\AFLWlzd<v)'
        resolver_0 = module_0.Resolver(str_0, dict_1, str_6)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
        str_7 = module_0.esc_underscore(str_6)
        resolver_1 = module_0.Resolver(str_1, dict_1)
        parser_0 = module_0.Parser(bool_0, dict_0, dict_1)
        assign_0 = module_1.Assign(*list_0)
        str_8 = parser_0.compile()
        parser_0.globals(str_1, assign_0)
        str_9 = '<Ml2R'
        str_10 = module_0.esc_underscore(str_1)
        str_11 = module_0.parent(str_1)
        expr_0 = module_1.expr()
        str_12 = parser_0.resolve(str_3, expr_0, str_7)
        dict_2 = {str_9: str_4}
        str_13 = module_0.const_type(expr_0)
        assign_1 = module_1.Assign(**dict_2)
        attribute_0 = module_1.Attribute(*list_0)
        a_s_t_1 = resolver_1.visit_Attribute(attribute_0)
        str_14 = '`m\tG\t8}:%qZM4,Ea#tu'
        str_15 = module_0.esc_underscore(str_14)
        sequence_0 = module_2.Sequence()
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'w+'
        str_1 = '?I7:fh!JCmzh<w@<&'
        assign_0 = module_1.Assign()
        str_2 = None
        str_3 = '\'9tUa?H?Q4l)E"D'
        list_0 = [str_0, str_2, str_3, str_1, str_0]
        iterable_0 = None
        str_4 = module_0.table(*list_0, items=iterable_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'if a:\n    b'
        bool_0 = False
        bool_1 = True
        str_1 = '_<y\\tPcz!'
        str_2 = 'Sf<6Y<qvnBTAf1<'
        list_0 = [bool_0, str_0, str_1, bool_1]
        arguments_0 = module_1.arguments(*list_0)
        expr_0 = module_1.expr()
        bool_2 = True
        dict_0 = {}
        str_3 = '{WTxm_i4~r5x{JXH'
        str_4 = 'X1'
        str_5 = '?OqgDTwJ|EOQI'
        dict_1 = {str_0: str_0, str_1: str_3, str_4: str_3, str_5: str_1}
        parser_0 = module_0.Parser(bool_0, bool_2, dict_0, dict_1, dict_1, dict_1)
        parser_0.func_api(str_2, str_2, arguments_0, expr_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        bool_0 = True
        str_1 = 'E;]6Mx\t"cT$bzF9/bO6'
        str_2 = 'r(9zO3a'
        str_3 = '9dy\x0c],CV#C,'
        list_0 = [str_0]
        constant_0 = module_1.Constant(*list_0)
        str_4 = 'Dc7r&f;'
        str_5 = None
        dict_0 = {str_2: str_1, str_4: str_1, str_3: str_5}
        str_6 = '-bhy\x0c<z^'
        resolver_0 = module_0.Resolver(str_0, dict_0, str_6)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        str_7 = 'dm%XRn5B'
        str_8 = ''
        dict_1 = {str_1: str_1, str_1: str_2, str_1: str_3, str_7: str_8}
        parser_0 = module_0.Parser(bool_0, dict_1)
        parser_0.parse(str_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'k'
        str_1 = 'pyIPw5U}8I'
        module_x_var_0 = None
        int_0 = -3181
        str_2 = '`g@d#M'
        str_3 = '#?\x0b6-S\\F'
        int_1 = 157
        dict_0 = {str_2: int_0, str_0: int_0, str_3: int_1}
        dict_1 = {}
        str_4 = "'RW(d*fs>Vm\\"
        str_5 = '^'
        dict_2 = {str_4: str_3, str_2: str_3, str_5: str_0}
        parser_0 = module_0.Parser(int_0, dict_0, dict_1, dict_2, dict_2)
        parser_0.load_docstring(str_1, module_x_var_0)
        class_def_0 = None
        bool_0 = True
        int_2 = 1443
        str_6 = ',z'
        str_7 = '4&/30UK/'
        str_8 = 'pv%w=aQNIRx2lQIorV'
        str_9 = '^BDFg>Up\\'
        str_10 = 'PX}R1\t0.\r'
        dict_3 = {str_6: str_6, str_6: str_7, str_8: str_9, str_10: str_10}
        parser_1 = module_0.Parser(bool_0, int_2, dict_3)
        parser_1.api(str_0, class_def_0)
    except BaseException:
        pass