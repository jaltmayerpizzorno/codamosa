# Automatically generated by Pynguin.
import tornado.netutil as module_0
import ssl as module_1
import socket as module_2
import tornado.ioloop as module_3
import concurrent.futures._base as module_4

def test_case_0():
    try:
        int_0 = 2015
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '*PFp53l'
        socket_0 = module_0.bind_unix_socket(str_0)
        s_s_l_socket_0 = None
        callable_0 = module_0.add_accept_handler(socket_0, s_s_l_socket_0)
    except BaseException:
        pass

def test_case_2():
    try:
        executor_resolver_0 = module_0.ExecutorResolver()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'LtPb4*'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = 'BWw'
        resolver_0 = module_0.Resolver()
        str_2 = 'iaO>\\]B2";`ZMu!'
        dict_1 = {str_0: dict_0, str_1: resolver_0, str_2: str_0}
        executor_resolver_0 = module_0.ExecutorResolver(**dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        blocking_resolver_0 = module_0.BlockingResolver()
    except BaseException:
        pass

def test_case_5():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_6():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        dict_0 = {}
        s_s_l_context_0 = module_1.SSLContext()
        bool_0 = module_0.is_valid_ip(str_0)
        int_0 = 0
        bool_1 = module_0.is_valid_ip(str_0)
        int_1 = 3219
        int_2 = -3358
        list_0 = module_0.bind_sockets(int_0)
        list_1 = [int_2, dict_0]
        override_resolver_0 = module_0.OverrideResolver(*list_1)
        awaitable_0 = override_resolver_0.resolve(str_0, int_1)
    except BaseException:
        pass

def test_case_8():
    try:
        socket_0 = module_2.socket()
        str_0 = '{%'
        dict_0 = {str_0: socket_0, str_0: str_0}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'yD<4\x0cN)NL]gDZ9%VX'
        int_0 = 2268
        socket_0 = module_0.bind_unix_socket(str_0, int_0)
        resolver_0 = module_0.Resolver()
        str_1 = None
        int_1 = -1577
        socket_1 = module_0.bind_unix_socket(str_1, int_1)
    except BaseException:
        pass

def test_case_10():
    try:
        resolver_0 = module_0.Resolver()
        resolver_0.close()
        int_0 = 2785
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '*>Fp53l'
        socket_0 = module_0.bind_unix_socket(str_0)
        list_0 = [str_0, str_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'C*]8'
        address_family_0 = module_2.AddressFamily.AF_UNSPEC
        int_0 = -2782
        bool_0 = True
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0, int_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        s_s_l_context_0 = None
        s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
    except BaseException:
        pass

def test_case_14():
    try:
        default_executor_resolver_0 = module_0.DefaultExecutorResolver()
        str_0 = '.'
        bool_0 = module_0.is_valid_ip(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 3059
        str_0 = ''
        address_family_0 = module_2.AddressFamily.AF_BRIDGE
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 0
        list_0 = module_0.bind_sockets(int_0)
        var_0 = len(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        str_1 = "5zYN\x0bs(%\r}'c^OsJ0>("
        int_0 = 0
        list_0 = module_0.bind_sockets(int_0)
        bool_0 = module_0.is_valid_ip(str_0)
        bool_1 = module_0.is_valid_ip(str_1)
        int_1 = 65536
        address_family_0 = module_2.AddressFamily.AF_INET6
        list_1 = module_0.bind_sockets(int_1, str_0, address_family_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        dict_0 = {}
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
        str_1 = "5zYN\x0bs(%\r}'c^OsJ0>("
        int_0 = 1875
        socket_0 = module_0.bind_unix_socket(str_1, int_0)
        s_s_l_context_1 = module_1.SSLContext()
        bool_0 = module_0.is_valid_ip(str_1)
        str_2 = '6'
        dict_1 = {str_2: socket_0, str_2: str_2, str_1: str_0}
        s_s_l_context_2 = module_1.SSLContext(**dict_1)
        bool_1 = module_0.is_valid_ip(str_2)
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
        int_1 = 2102
        list_0 = module_0.bind_sockets(int_1, str_1, int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = None
        str_1 = "5zYN\x0bs(%\r}'c^OsJ0>("
        int_0 = 1875
        socket_0 = module_0.bind_unix_socket(str_1, int_0)
        none_type_0 = None
        callable_0 = None
        i_o_loop_0 = module_3.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        awaitable_0 = i_o_loop_2.run_in_executor(none_type_0, callable_0)
        callable_1 = module_0.add_accept_handler(socket_0, awaitable_0)
        s_s_l_context_0 = module_1.SSLContext()
        bool_0 = module_0.is_valid_ip(str_1)
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0, str_0)
        int_1 = 0
        list_0 = module_0.bind_sockets(int_1)
        bool_1 = module_0.is_valid_ip(str_0)
        bool_2 = module_0.is_valid_ip(str_1)
        list_1 = [bool_2, int_0, str_1]
        override_resolver_0 = module_0.OverrideResolver(*list_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '#'
        var_0 = dict(certfile=str_0)
        s_s_l_context_0 = module_0.ssl_options_to_context(var_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = "5zYN\x0bs(%\r}'c^OsJ0>("
        int_0 = 1875
        i_o_loop_0 = module_3.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        s_s_l_context_0 = module_1.SSLContext()
        int_1 = 0
        list_0 = module_0.bind_sockets(int_1)
        bool_0 = module_0.is_valid_ip(str_0)
        bool_1 = module_0.is_valid_ip(str_0)
        executor_resolver_0 = module_0.ExecutorResolver()
        executor_resolver_0.close()
        list_1 = [bool_1, int_0, str_0]
        override_resolver_0 = module_0.OverrideResolver(*list_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = None
        dict_0 = {}
        str_1 = "5zYN\x0bs(%\r}'c^OsJ0>("
        int_0 = 1875
        socket_0 = module_0.bind_unix_socket(str_1, int_0)
        none_type_0 = None
        callable_0 = None
        i_o_loop_0 = module_3.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_0.instance()
        awaitable_0 = i_o_loop_2.run_in_executor(none_type_0, callable_0)
        callable_1 = module_0.add_accept_handler(socket_0, awaitable_0)
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0, str_0)
        int_1 = 0
        list_0 = module_0.bind_sockets(int_1)
        bool_0 = module_0.is_valid_ip(str_0)
        bool_1 = module_0.is_valid_ip(str_1)
        dict_1 = None
        executor_resolver_0 = module_0.ExecutorResolver()
        executor_0 = module_4.Executor()
        executor_resolver_0.initialize(executor_0)
        executor_resolver_0.close()
        override_resolver_0 = module_0.OverrideResolver(**dict_1)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '.'
        int_0 = -615
        socket_0 = module_0.bind_unix_socket(str_0, int_0)
    except BaseException:
        pass