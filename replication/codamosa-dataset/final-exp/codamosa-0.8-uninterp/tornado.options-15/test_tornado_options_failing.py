# Automatically generated by Pynguin.
import tornado.options as module_0

def test_case_0():
    try:
        str_0 = '=c8Wp5=C'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'IV.6<;\rw;bjvA9bn'
        none_type_0 = None
        option_parser_0.define(str_0, str_0, str_0, none_type_0)
        str_1 = None
        any_0 = option_parser_0.__getitem__(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'E'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        str_1 = ''
        dict_0 = option_parser_0.group_dict(str_1)
        option_parser_0.__setitem__(str_0, str_1)
        str_2 = '/input/tornado/options.py'
        option_parser_0.parse_config_file(str_2)
        option_parser_1 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.print_help()
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        option_parser_0.print_help()
        mockable_0 = option_parser_0.mockable()
        str_0 = '!S`Y7('
        mockable_0.__setattr__(str_0, option_parser_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Unit test for _Option.parse(self, value)\n\n    This method is called by _parse_command_line() and _parse_config_file()\n\n    What happens if self.multiple is True?\n    '
        option_parser_0 = module_0.OptionParser()
        str_1 = 'list'
        str_2 = 'validate_ert'
        option_0 = module_0._Option(str_1, str_1, str_1)
        any_0 = option_0.value()
        option_1 = module_0._Option(str_2, any_0, str_2, str_1)
        str_3 = '6\nF>!'
        option_parser_1 = module_0.OptionParser()
        iterator_0 = option_parser_1.__iter__()
        bool_0 = True
        module_0.define(str_0, iterator_0, bool_0, str_3)
        iterable_0 = option_parser_0.items()
        bool_1 = False
        list_0 = [option_1, str_1, option_0]
        list_1 = [iterable_0, option_parser_0, list_0]
        option_2 = module_0._Option(str_3, any_0, iterable_0, bool_1, str_0, list_1)
        option_2.set(option_1)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'D e{oL`v'
        bool_0 = False
        option_parser_0 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\rdMF{1awS[0Ymp'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        str_0 = ':<RG9Y?{FRyRm\x0bp\t'
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'RW'
        str_1 = '*(cu:Rhg`p9gn?h'
        option_0 = module_0._Option(str_1, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '!-/a* +D\x0b|k`'
        bool_0 = False
        option_0 = module_0._Option(str_0, str_0, bool_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        option_parser_0.__setitem__(str_0, str_0)
        option_parser_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        error_0 = module_0.Error()
        str_0 = '\tv8*(\t+M=Yg]A'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ''
        optional_0 = None
        module_0.print_help(optional_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        dict_0 = {}
        module_0.print_help(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        option_parser_1 = module_0.OptionParser()
        str_0 = 'n\x0b'
        dict_0 = option_parser_1.as_dict()
        module_0.define(str_0, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'nasm'
        str_1 = '--'
        str_2 = 'g5$[;LA]'
        list_0 = [str_0, str_1, str_2]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        str_1 = '\x0c#MzD}x2|A*fr'
        str_2 = '&F66Z6'
        list_0 = [str_1, str_1, str_2]
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_0.define(str_0)
        option_parser_0.__setitem__(str_0, str_0)
        str_3 = '/input/tornado/options.py'
        option_parser_0.parse_config_file(str_3)
        list_2 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_20():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        option_parser_0.print_help()
        mockable_1 = module_0._Mockable(option_parser_0)
        option_parser_0.print_help()
        dict_0 = option_parser_0.as_dict()
        str_0 = 'P\nh6;b/>P\x0bdhYlN$ZLO'
        dict_1 = option_parser_0.group_dict(str_0)
        list_0 = []
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        str_1 = None
        option_parser_0.__setitem__(str_0, str_1)
        str_2 = '/input/tornado/options.py'
        option_parser_0.parse_config_file(str_2)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
        str_1 = '/input/tornado/options.py'
        option_parser_0.parse_config_file(str_1)
        str_2 = 'uj2'
        str_3 = '\\.7a.R'
        list_0 = [str_1, str_2, str_3]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        option_parser_0.__setitem__(str_0, str_0)
        iterable_0 = option_parser_0.items()
        str_1 = '/input/tornado/options.py'
        option_parser_0.parse_config_file(str_1)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
        str_1 = '/input/tornado/options.py'
        option_parser_0.parse_config_file(str_1)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'E1-`P\tU0htV'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = '/input/tornado/options.py'
        bool_0 = True
        option_parser_0.parse_config_file(str_1, bool_0)
        option_parser_1 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'E1-`P\tU0htV'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        str_1 = 'name'
        str_2 = '<ast>'
        dict_0 = option_parser_0.group_dict(str_2)
        str_3 = "o'wtion.cf\t"
        option_parser_0.__setattr__(str_1, str_3)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        str_1 = 'y&\r?v[s8n8'
        list_0 = [str_0, option_parser_0]
        option_parser_0.define(str_1, option_parser_0, list_0, str_1, str_0, str_1)
        option_parser_0.__setitem__(str_1, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        optional_0 = None
        bool_0 = True
        option_parser_1.define(str_0, optional_0, str_0, str_0, bool_0, str_0)
        str_1 = 'name'
        option_parser_0.__setitem__(str_1, option_parser_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 't'
        bool_0 = False
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, str_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'e'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
        mockable_0.__setattr__(str_0, mockable_0)
    except BaseException:
        pass