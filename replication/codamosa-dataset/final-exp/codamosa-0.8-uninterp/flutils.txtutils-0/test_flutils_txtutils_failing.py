# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    try:
        sequence_0 = None
        int_0 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_1():
    try:
        sequence_0 = None
        int_0 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Convert the given ``text`` of base64 characters into the base64\n    decoded bytes.\n\n    Args:\n        text (str): The string input.  The given string input can span\n            across many lines and be indented any number of spaces.\n        errors (str): Not used.  This argument exists to meet the\n            interface requirements.  Any value given to this argument\n            is ignored.\n\n    Returns:\n        bytes: The given ``text`` converted into base64 bytes.\n        int: The length of the returned bytes.\n    '
        int_0 = 50987760
        bool_0 = True
        bool_1 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, bool_0, bool_1, bool_0, int_0, max_lines=int_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '12<d#\\Y'
        str_1 = 'gAy^@"uSuCdIAxe7pTc5'
        bool_0 = False
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(str_1, bool_0, bool_0)
        str_2 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '[cJ)'
        bool_0 = True
        int_0 = 384
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '`'
        str_1 = '>g1h$vI0$9V=n'
        bool_0 = False
        bool_1 = False
        int_0 = -3235
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_1, max_lines=int_0, placeholder=str_0)
        str_2 = ansi_text_wrapper_0.fill(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -2574
        str_0 = '[X6T\tTFL3W$[>VpVSE3V'
        bool_0 = True
        str_1 = 'R'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_1)
        str_2 = ansi_text_wrapper_0.fill(str_0)
        sequence_0 = None
        str_3 = '['
        list_0 = ansi_text_wrapper_0.wrap(str_3)
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -3966
        str_0 = 'B}P9rcvs*%'
        bool_0 = True
        str_1 = '|TnW#.AP(#$Z0JvDopxS'
        str_2 = "0WNSc'0"
        int_1 = 1680
        str_3 = '(#$Z0JvDopxS'
        int_2 = None
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_1, str_3, str_1, bool_0, bool_0, bool_0, bool_0, int_2, max_lines=int_0, placeholder=str_0)
        list_0 = ansi_text_wrapper_0.wrap(str_2)
        str_4 = '[cJ)'
        list_1 = ansi_text_wrapper_0.wrap(str_4)
        bool_1 = False
        str_5 = '62{;j_VR$F'
        bool_2 = None
        bool_3 = True
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(str_5, bool_1, bool_2, bool_3)
        str_6 = 'b\rFqTXA-\\Ybq+'
        str_7 = ansi_text_wrapper_0.fill(str_6)
        bool_4 = True
        str_8 = 'command'
        int_3 = 6
        str_9 = 'H(&e-^UqH3L3N"^'
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_8, bool_4, int_3, placeholder=str_9)
        str_10 = '_'
        list_2 = ansi_text_wrapper_0.wrap(str_10)
        str_11 = '!\n}NX_}`)!'
        str_12 = ansi_text_wrapper_1.fill(str_11)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -3966
        bool_0 = True
        str_0 = '|TnW#.AP(#$Z0JvDopxS'
        str_1 = "0WNSc'0"
        int_1 = 1680
        str_2 = '(#$Z0JvDopxS'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_1, str_2, str_0, bool_0, bool_0, bool_0, int_0, max_lines=int_0, placeholder=str_1)
        list_0 = ansi_text_wrapper_0.wrap(str_1)
        str_3 = ''
        list_1 = ansi_text_wrapper_0.wrap(str_3)
        bool_1 = False
        str_4 = '62{;j_VR$F'
        bool_2 = None
        bool_3 = True
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(str_4, bool_1, bool_2, bool_3)
        str_5 = 'b\rFqTXA-\\Ybq+'
        str_6 = ansi_text_wrapper_1.fill(str_5)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -3966
        str_0 = '|TnW#.AP(#$Z0JvDopxS'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = 'Xs4a'
        bool_0 = True
        str_2 = 'R'
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_2)
        str_3 = ansi_text_wrapper_1.fill(str_1)
        sequence_0 = None
        list_1 = ansi_text_wrapper_1.wrap(str_3)
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -3966
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_0 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = '[X6T\tTFL3W$[>VpVSE3V'
        list_1 = ansi_text_wrapper_0.wrap(str_1)
        str_2 = '62{;j_VR$F'
        str_3 = 'R'
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_3)
        str_4 = ansi_text_wrapper_1.fill(str_1)
        sequence_0 = None
        list_2 = ansi_text_wrapper_0.wrap(str_2)
        str_5 = '\x0b68\n'
        list_3 = ansi_text_wrapper_1.wrap(str_5)
        str_6 = ansi_text_wrapper_0.fill(str_5)
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -2574
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_0 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = '[X6T\tTFL3W$[>VpVSE3V'
        list_1 = ansi_text_wrapper_0.wrap(str_1)
        bool_0 = True
        str_2 = ''
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_2)
        str_3 = ansi_text_wrapper_1.fill(str_1)
        sequence_0 = None
        str_4 = '['
        list_2 = ansi_text_wrapper_1.wrap(str_4)
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -3966
        str_0 = 'B}P9rcvs*%'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_1 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
        list_0 = ansi_text_wrapper_0.wrap(str_1)
        str_2 = '[X6T\tTFL3W$[>VpVSE3V'
        list_1 = ansi_text_wrapper_0.wrap(str_2)
        bool_0 = True
        str_3 = 'R'
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_3)
        str_4 = ansi_text_wrapper_1.fill(str_2)
        list_2 = ansi_text_wrapper_0.wrap(str_2)
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(max_lines=int_0)
        str_5 = ansi_text_wrapper_2.fill(str_0)
        list_3 = ansi_text_wrapper_2.wrap(str_1)
        sequence_0 = None
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -3976
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_0 = "A property decorator that is only computed once per instance and then\n    replaces itself with an ordinary attribute.\n\n    Deleting the attribute resets the property.\n\n    Note:\n        In Python 3.8 the :obj:`functools.cached_property` decorator was\n        added. It is recommended to use the built-in\n        :obj:`functools.cached_property`; provided you're using\n        Python >= 3.8.  :obj:`~flutils.decorators.cached_property` remains\n        for use with Python 3.6 and 3.7.\n\n    Example:\n\n        Code::\n\n            from flutils.decorators import cached_property\n\n            class MyClass:\n\n                def __init__(self):\n                    self.x = 5\n\n                @cached_property\n                def y(self):\n                    return self.x + 1\n\n        Usage:\n\n            >>> obj = MyClass()\n            >>> obj.y\n            6\n\n    *New in version 0.2.0*\n\n    This decorator is a derivative work of\n    `cached_property <https://bit.ly/2R9U3Qa>`__ and is:\n\n    `Copyright © 2015 Daniel Greenfeld; All Rights Reserved\n    <https://bit.ly/2CwtJM1>`__\n\n    Also this decorator is a derivative work of\n    `cached_property  <https://bit.ly/2JbYB5L>`__ and is:\n\n    `Copyright © 2011 Marcel Hellkamp <https://bit.ly/2ECEO0M>`__\n\n    "
        str_1 = ansi_text_wrapper_0.fill(str_0)
        str_2 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
        list_0 = ansi_text_wrapper_0.wrap(str_2)
        str_3 = 'Xs4a'
        list_1 = ansi_text_wrapper_0.wrap(str_3)
        bool_0 = True
        str_4 = '-5?;<\\fA(Fq7P'
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, placeholder=str_4)
        str_5 = '\tw$}x"QL``'
        bool_1 = False
        str_6 = '. The identifier, '
        str_7 = ansi_text_wrapper_1.fill(str_6)
        bool_2 = False
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_5, bool_1, bool_2)
        str_8 = 'm\r=k \n=mmPFq,"3W'
        str_9 = ansi_text_wrapper_0.fill(str_8)
        str_10 = '9q:22Yt\to=>.))%'
        list_2 = ansi_text_wrapper_0.wrap(str_10)
        int_1 = 80
        bool_3 = True
        ansi_text_wrapper_3 = module_0.AnsiTextWrapper(str_0, bool_3, int_1, max_lines=int_0)
        list_3 = ansi_text_wrapper_2.wrap(str_4)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'foo\x1b[38;5;209mbar\x1b[0m'
        int_0 = module_0.len_without_ansi(str_0)
        str_1 = 'foo'
        str_2 = '\x1b[38;5;209m'
        str_3 = 'bar'
        str_4 = '\x1b[0m'
        str_5 = [str_1, str_2, str_3, str_4]
        int_1 = module_0.len_without_ansi(str_5)
        str_6 = 'bar\x1b[0m'
        bool_0 = True
        bool_1 = False
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_1)
        str_7 = ansi_text_wrapper_0.fill(str_6)
    except BaseException:
        pass