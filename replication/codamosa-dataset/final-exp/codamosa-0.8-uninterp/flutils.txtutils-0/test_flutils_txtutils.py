# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    str_0 = "A :obj:`NamedTuple <typing.NamedTuple>` that holds a completed\n    process' information.\n\n    Attributes:\n         return_code (int): The process return code.\n         stdout (str): All lines of the ``stdout`` from the process.\n         stderr (str): All lines of the ``stderr`` from the process.\n         cmd (str): The command that the process ran.\n    "
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(str_0, bool_0, bool_0)

def test_case_1():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    str_1 = 'lg1'
    list_0 = [str_1, str_1]
    int_0 = 66
    str_2 = '==_t?1^KzdWpo\\"'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0, placeholder=str_2)
    list_1 = ansi_text_wrapper_0.wrap(str_1)
    int_1 = module_0.len_without_ansi(list_0)
    int_2 = module_0.len_without_ansi(str_0)

def test_case_2():
    str_0 = 'minor'
    int_0 = 80
    str_1 = ''
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_1, bool_0, bool_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_3():
    int_0 = -3966
    str_0 = 'B}P9rcvs*%'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    bool_1 = True
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, bool_1, bool_1, bool_1, placeholder=str_0)
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_0, bool_1)
    list_1 = ansi_text_wrapper_0.wrap(str_0)

def test_case_4():
    int_0 = -2574
    bool_0 = True
    str_0 = 'B'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_0)
    str_1 = '['
    list_0 = ansi_text_wrapper_0.wrap(str_1)

def test_case_5():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_6():
    str_0 = 'B}P9rcvs*%'
    int_0 = 2
    bool_0 = False
    bool_1 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, bool_0, bool_1, int_0)
    str_1 = ' Cannot be a builtin name.'
    str_2 = ansi_text_wrapper_0.fill(str_1)

def test_case_7():
    int_0 = -3966
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    str_0 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    str_1 = '[X6T\tTFL3W$[>VpVSE3V'
    list_1 = ansi_text_wrapper_0.wrap(str_1)
    bool_0 = True
    str_2 = 'R'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_2)
    str_3 = ansi_text_wrapper_1.fill(str_1)

def test_case_8():
    int_0 = 1948
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    str_0 = 'The path: %r can NOT be created as a directory because it already exists as a %s.'
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    str_1 = '[X6T\tTFL3W$[>VpVSE3V'
    list_1 = ansi_text_wrapper_0.wrap(str_1)
    bool_0 = True
    str_2 = '6{;j_VR$F'
    str_3 = '.'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0, placeholder=str_3)
    str_4 = ansi_text_wrapper_1.fill(str_1)
    list_2 = ansi_text_wrapper_0.wrap(str_2)
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper()

def test_case_9():
    str_0 = '\x1b[38;5;209fobr\x1by[0m'
    int_0 = module_0.len_without_ansi(str_0)