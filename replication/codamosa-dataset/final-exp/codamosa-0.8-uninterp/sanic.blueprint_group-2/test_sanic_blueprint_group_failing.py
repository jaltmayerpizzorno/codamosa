# Automatically generated by Pynguin.
import sanic.blueprints as module_0
import sanic.blueprint_group as module_1

def test_case_0():
    try:
        int_0 = -765
        str_0 = 'w>E\x0b<Ig vM/_!I:T'
        blueprint_0 = module_0.Blueprint(str_0, str_0, int_0)
        blueprint_group_0 = module_1.BlueprintGroup()
        blueprint_group_0.insert(int_0, blueprint_0)
        float_0 = -1723.5
        blueprint_group_1 = module_1.BlueprintGroup(float_0)
        var_0 = blueprint_group_1.middleware()
        bytes_0 = b'I\xd9\xc1\x94\xec\xc9\xc3\x01\x1e\xc1\xb6v}F\xea\xfc\xbc\xb6\x85\xd5'
        list_0 = [bytes_0, float_0]
        blueprint_group_1.__setitem__(bytes_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = '`""$'
        blueprint_0 = module_0.Blueprint(str_0)
        list_0 = []
        str_1 = 'k*>\rH.4w$CH\x0bi'
        blueprint_group_0 = module_1.BlueprintGroup(list_0, str_1)
        var_0 = blueprint_group_0.__iter__()
        blueprint_group_0.append(blueprint_0)
        list_1 = [bool_0, bool_0, bool_0, bool_0]
        blueprint_group_1 = module_1.BlueprintGroup()
        blueprint_group_1.__delitem__(list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 500
        blueprint_group_0 = module_1.BlueprintGroup()
        str_0 = ''
        var_0 = blueprint_group_0.__iter__()
        var_1 = blueprint_group_0.__iter__()
        blueprint_0 = module_0.Blueprint(str_0, str_0)
        int_1 = blueprint_group_0.__len__()
        blueprint_group_1 = module_1.BlueprintGroup()
        blueprint_group_2 = module_1.BlueprintGroup()
        blueprint_group_1.insert(int_0, blueprint_0)
        bytes_0 = b'\x87RS7\x9e`\xbf'
        set_0 = {bytes_0}
        var_2 = blueprint_group_1.__getitem__(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        blueprint_group_0 = module_1.BlueprintGroup()
        var_0 = blueprint_group_0.middleware()
        set_0 = {blueprint_group_0, blueprint_group_0, blueprint_group_0, blueprint_group_0}
        blueprint_group_0.__setitem__(set_0, blueprint_group_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '#Zi'
        blueprint_group_0 = module_1.BlueprintGroup()
        blueprint_group_0.__delitem__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '#0IOs-5xm\r.w7W`'
        blueprint_0 = module_0.Blueprint(str_0)
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        float_0 = 15.0
        blueprint_group_0 = module_1.BlueprintGroup(dict_0, float_0)
        blueprint_group_0.append(blueprint_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1133
        str_0 = '\x0c;nDl\tK\x0b\t0*t1E;'
        blueprint_0 = module_0.Blueprint(str_0, str_0)
        str_1 = '{9'
        blueprint_1 = module_0.Blueprint(str_1, str_1, str_1)
        blueprint_group_0 = module_1.BlueprintGroup(blueprint_1)
        blueprint_group_0.insert(int_0, blueprint_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'8\xe4\x13\xb9\xd5\xcf\xe9n\xcf*f\xb5\x93Q-'
        blueprint_group_0 = module_1.BlueprintGroup(bytes_0)
        var_0 = blueprint_group_0.middleware()
        list_0 = []
        blueprint_group_0.__delitem__(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        blueprint_0 = None
        str_0 = 'G7<2:Zw*49_3@`Z#3r!'
        str_1 = '!j\r)1NkH'
        tuple_0 = ()
        blueprint_group_0 = module_1.BlueprintGroup(str_1, tuple_0)
        list_0 = [str_0, blueprint_group_0, str_0]
        blueprint_1 = module_0.Blueprint(str_1)
        blueprint_group_0.append(blueprint_1)
        blueprint_group_1 = module_1.BlueprintGroup(str_0, list_0)
        blueprint_group_1.append(blueprint_0)
    except BaseException:
        pass

def test_case_9():
    try:
        blueprint_group_0 = module_1.BlueprintGroup()
        var_0 = blueprint_group_0.__iter__()
        var_1 = blueprint_group_0.middleware()
        list_0 = [var_1, var_0, var_1]
        str_0 = 'Y+C5Z"4'
        str_1 = '$zZgucrY{\x0c[ImR `'
        str_2 = '\n    Model for defining a file. It is a ``namedtuple``, therefore you can\n    iterate over the object, or access the parameters by name.\n\n    :param type: The mimetype, defaults to text/plain\n    :param body: Bytes of the file\n    :param name: The filename\n    '
        dict_0 = {str_0: var_0, str_1: str_1, str_2: var_0, str_1: blueprint_group_0}
        var_2 = blueprint_group_0.middleware(*list_0, **dict_0)
        set_0 = {blueprint_group_0, blueprint_group_0, blueprint_group_0, blueprint_group_0}
        blueprint_group_0.__setitem__(set_0, blueprint_group_0)
    except BaseException:
        pass

def test_case_10():
    try:
        blueprint_group_0 = module_1.BlueprintGroup()
        var_0 = blueprint_group_0.__iter__()
        int_0 = 725
        str_0 = '\n        Decorate a function to be registered as a websocket route\n\n        :param uri: path of the URL\n        :param host: Host IP or FQDN details\n        :param strict_slashes: If the API endpoint needs to terminate\n                               with a "/" or not\n        :param subprotocols: optional list of str with supported subprotocols\n        :param name: A unique name assigned to the URL so that it can\n                     be used with :func:`url_for`\n        :return: tuple of routes, decorated function\n        '
        blueprint_0 = module_0.Blueprint(str_0, str_0, str_0)
        blueprint_group_0.insert(int_0, blueprint_0)
        var_1 = blueprint_group_0.middleware()
        list_0 = [var_1, var_0, var_1]
        str_1 = 'Y+C5Z"4'
        str_2 = '$zZgucrY{\x0c[ImR `'
        str_3 = '\n    Model for defining a file. It is a ``namedtuple``, therefore you can\n    iterate over the object, or access the parameters by name.\n\n    :param type: The mimetype, defaults to text/plain\n    :param body: Bytes of the file\n    :param name: The filename\n    '
        blueprint_group_0.insert(int_0, blueprint_0)
        dict_0 = {str_1: var_0, str_2: str_2, str_3: var_0, str_2: blueprint_group_0}
        var_2 = blueprint_group_0.middleware(*list_0, **dict_0)
    except BaseException:
        pass