# Automatically generated by Pynguin.
import typesystem.fields as module_0
import decimal as module_1
import typesystem.base as module_2

def test_case_0():
    try:
        field_0 = module_0.Field()
        bool_0 = True
        str_0 = '\n    Conditional sub-item matching.\n\n    You should use custom validation instead.\n    '
        boolean_0 = module_0.Boolean(title=str_0, description=str_0, allow_null=bool_0)
        any_0 = boolean_0.validate(boolean_0)
    except BaseException:
        pass

def test_case_1():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        any_0 = union_0.validate(field_0)
    except BaseException:
        pass

def test_case_2():
    try:
        object_0 = module_0.Object()
        any_0 = object_0.validate(object_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        dict_0 = {}
        string_0 = module_0.String()
        any_0 = string_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 6
        number_0 = module_0.Number(exclusive_minimum=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        decimal_0 = module_1.Decimal()
        number_0 = module_0.Number(minimum=decimal_0, maximum=decimal_0, exclusive_maximum=decimal_0, multiple_of=decimal_0)
        any_0 = number_0.validate(decimal_0)
    except BaseException:
        pass

def test_case_6():
    try:
        decimal_0 = module_1.Decimal()
        number_0 = module_0.Number()
        any_0 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '!D+kg{%I@'
        number_0 = module_0.Number()
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        field_0 = module_0.Field()
        decimal_0 = module_0.Decimal()
        any_0 = decimal_0.serialize(field_0)
    except BaseException:
        pass

def test_case_9():
    try:
        text_0 = module_0.Text()
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(text_0)
    except BaseException:
        pass

def test_case_10():
    try:
        integer_0 = None
        bool_0 = False
        str_0 = '6jQvrc'
        boolean_0 = module_0.Boolean(description=str_0, default=integer_0)
        any_0 = boolean_0.validate(integer_0, strict=bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        choice_0 = module_0.Choice()
        var_0 = None
        any_0 = choice_0.validate(var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        object_0 = module_0.Object()
        dict_0 = {}
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        array_0 = module_0.Array(bool_0, bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        choice_0 = module_0.Choice()
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        any_0 = union_0.validate(choice_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'h'
        any_0 = module_0.Any(default=str_0)
        any_1 = any_0.validate(str_0)
        string_0 = module_0.String(pattern=str_0, format=str_0)
        array_0 = module_0.Array()
        any_2 = array_0.validate(string_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        const_0 = module_0.Const(str_0)
        string_0 = module_0.String(pattern=str_0, format=str_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        object_0 = module_0.Object()
        bool_0 = None
        int_0 = -18
        str_0 = 'X3/"rnlGBUcC"#$#:'
        dict_0 = {str_0: object_0, str_0: object_0, str_0: int_0}
        const_0 = module_0.Const(dict_0)
        any_0 = const_0.validate(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        string_0 = module_0.String()
        array_0 = module_0.Array(string_0)
        str_0 = 'op'
        str_1 = [str_0, str_0]
        any_0 = array_0.validate(str_1)
        string_1 = module_0.String()
        array_1 = module_0.Array(string_1)
        field_0 = module_0.Field(title=str_1, default=any_0)
    except BaseException:
        pass

def test_case_19():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        bool_0 = False
        int_0 = -116
        int_1 = 659
        int_2 = -229
        position_0 = module_2.Position(int_0, int_1, int_2)
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, pattern=position_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        int_0 = 6
        string_0 = module_0.String(trim_whitespace=bool_0, min_length=int_0)
        number_0 = module_0.Number(exclusive_minimum=int_0)
        any_0 = number_0.validate(int_0, strict=bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        tuple_0 = None
        bool_0 = True
        bool_1 = True
        boolean_0 = module_0.Boolean(allow_null=bool_1)
        any_0 = boolean_0.validate(tuple_0, strict=bool_0)
        field_0 = module_0.Field()
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        any_1 = union_0.validate(bool_1)
    except BaseException:
        pass

def test_case_22():
    try:
        date_time_0 = module_0.DateTime()
        list_0 = [date_time_0, date_time_0, date_time_0, date_time_0]
        object_0 = module_0.Object(properties=list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        none_type_0 = None
        int_0 = -1341
        array_0 = module_0.Array(none_type_0, int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        time_0 = module_0.Time()
        choice_0 = module_0.Choice()
        choice_1 = module_0.Choice()
        decimal_0 = module_0.Decimal(multiple_of=time_0)
    except BaseException:
        pass

def test_case_25():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        array_0 = module_0.Array(field_0)
        any_0 = array_0.validate(union_0)
    except BaseException:
        pass

def test_case_26():
    try:
        array_0 = module_0.Array()
        date_time_0 = None
        any_0 = array_0.validate(date_time_0)
    except BaseException:
        pass

def test_case_27():
    try:
        object_0 = module_0.Object()
        dict_0 = {}
        any_0 = object_0.validate(dict_0)
        str_0 = None
        field_0 = module_0.Field(description=str_0, default=any_0)
    except BaseException:
        pass

def test_case_28():
    try:
        date_0 = module_0.Date()
        bool_0 = False
        str_0 = '3'
        field_0 = module_0.Field(title=str_0)
        any_0 = field_0.serialize(date_0)
        set_0 = {bool_0, bool_0, bool_0}
        time_0 = module_0.Time()
        string_0 = module_0.String(allow_blank=bool_0, max_length=set_0, format=time_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = -9
        dict_0 = {}
        object_0 = module_0.Object(min_properties=int_0, max_properties=int_0, **dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = False
        bool_1 = False
        decimal_0 = module_1.Decimal()
        number_0 = module_0.Number(exclusive_minimum=decimal_0, multiple_of=decimal_0)
        decimal_1 = module_0.Decimal()
        any_0 = number_0.validate(bool_0, strict=bool_1)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 5
        str_0 = 'dJ\t`LXcG-Y@;=MwzC'
        bool_0 = True
        number_0 = module_0.Number(minimum=int_0, maximum=int_0, exclusive_maximum=int_0, precision=str_0)
        any_0 = number_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '!D+kg{%I@'
        dict_0 = {}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, required=str_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        object_0 = module_0.Object()
        bool_0 = None
        any_0 = object_0.validate(bool_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = None
        field_0 = module_0.Field()
        str_0 = '>OD*VL^U<59)kl:8('
        field_1 = module_0.Field(description=str_0)
        union_0 = field_1.__or__(field_0)
        any_0 = union_0.validate(bool_0, bool_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = " Dq\x0csQ'vtDgx|-{_<3"
        any_0 = module_0.Any(description=str_0)
        str_1 = '\tOphk|aW :'
        field_0 = module_0.Field(default=str_1)
        const_0 = module_0.Const(field_0)
        number_0 = module_0.Number(exclusive_minimum=const_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '.AB'
        boolean_0 = module_0.Boolean(title=str_0)
        any_0 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 12
        str_0 = "PIag'FV/j?Qfq7"
        const_0 = module_0.Const(str_0)
        field_0 = module_0.Field(default=str_0)
        array_0 = module_0.Array(field_0, field_0, int_0, int_0)
        any_0 = array_0.validate(int_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 336
        bytes_0 = b''
        number_0 = module_0.Number(precision=bytes_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_39():
    try:
        list_0 = None
        int_0 = 2
        decimal_0 = module_0.Decimal(exclusive_minimum=int_0)
        any_0 = decimal_0.serialize(list_0)
        array_0 = module_0.Array()
        bool_0 = True
        any_1 = array_0.serialize(any_0)
        str_0 = '3#aV3MeT[Eg=V"'
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, pattern=str_0)
    except BaseException:
        pass

def test_case_40():
    try:
        bool_0 = None
        int_0 = -32
        number_0 = module_0.Number(minimum=int_0, exclusive_minimum=int_0)
        any_0 = number_0.validate(bool_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = '!D+kg{%I@'
        dict_0 = {}
        object_0 = module_0.Object(properties=dict_0, required=str_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_42():
    try:
        dict_0 = {}
        choice_0 = module_0.Choice()
        none_type_0 = None
        number_0 = module_0.Number(minimum=choice_0, multiple_of=none_type_0, **dict_0)
    except BaseException:
        pass

def test_case_43():
    try:
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        int_0 = 20
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        array_0 = module_0.Array(integer_0, bool_0)
        int_1 = 9
        str_0 = 'test'
        var_0 = [str_0, int_1, int_1, int_0, int_1, int_0, int_1, str_0]
        any_0 = array_0.validate(var_0, strict=bool_0)
    except BaseException:
        pass

def test_case_44():
    try:
        object_0 = module_0.Object()
        dict_0 = {}
        bool_0 = False
        str_0 = "o%{P1,[{'"
        field_0 = module_0.Field(description=str_0, default=str_0, allow_null=bool_0)
        field_1 = module_0.Field(allow_null=bool_0)
        union_0 = field_1.__or__(field_0)
        decimal_0 = module_1.Decimal()
        number_0 = module_0.Number(exclusive_maximum=union_0, precision=str_0, multiple_of=decimal_0, **dict_0)
    except BaseException:
        pass

def test_case_45():
    try:
        decimal_0 = module_1.Decimal()
        str_0 = '8\x0be+<ZmU!]\tA8>'
        str_1 = 'q].]L{\x0cq'
        boolean_0 = module_0.Boolean(title=str_0, description=str_1)
        int_0 = -1169
        decimal_1 = module_0.Decimal(maximum=int_0)
        complex_0 = None
        const_0 = module_0.Const(complex_0)
        list_0 = [str_1, boolean_0]
        bool_0 = False
        any_0 = const_0.validate(list_0, bool_0)
    except BaseException:
        pass

def test_case_46():
    try:
        object_0 = module_0.Object()
        int_0 = 257
        none_type_0 = None
        float_0 = module_0.Float(minimum=int_0, exclusive_minimum=int_0, precision=none_type_0)
        none_type_1 = None
        integer_0 = module_0.Integer(maximum=float_0, precision=none_type_1, multiple_of=int_0)
    except BaseException:
        pass

def test_case_47():
    try:
        boolean_0 = module_0.Boolean()
        bool_0 = True
        any_0 = boolean_0.validate(boolean_0, strict=bool_0)
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = 336
        number_0 = module_0.Number(exclusive_maximum=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_49():
    try:
        bool_0 = True
        str_0 = 'taF|+LnQ'
        string_0 = module_0.String(trim_whitespace=bool_0, format=str_0)
        str_1 = None
        field_0 = module_0.Field(description=str_0, default=string_0)
        str_2 = '<csf:Y.\x0ch\\6u'
        str_3 = None
        dict_0 = {str_1: field_0, str_2: field_0, str_1: field_0, str_3: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0)
    except BaseException:
        pass

def test_case_50():
    try:
        dict_0 = {}
        date_time_0 = module_0.DateTime(**dict_0)
        int_0 = 1469
        decimal_0 = module_0.Decimal(exclusive_maximum=int_0)
        list_0 = [decimal_0, int_0, decimal_0]
        object_0 = module_0.Object(additional_properties=list_0, min_properties=int_0)
    except BaseException:
        pass

def test_case_51():
    try:
        bool_0 = False
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(bool_0)
        bool_1 = False
        any_1 = boolean_0.validate(boolean_0, strict=bool_1)
    except BaseException:
        pass

def test_case_52():
    try:
        bool_0 = True
        bool_1 = False
        list_0 = []
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_1, min_length=list_0)
    except BaseException:
        pass

def test_case_53():
    try:
        int_0 = 5
        int_1 = -31
        number_0 = module_0.Number(multiple_of=int_0)
        int_2 = 849
        number_1 = module_0.Number(minimum=int_0, exclusive_minimum=int_1, exclusive_maximum=int_2, multiple_of=int_2)
        any_0 = number_1.validate(int_0)
    except BaseException:
        pass

def test_case_54():
    try:
        none_type_0 = None
        int_0 = 1452
        date_0 = module_0.Date()
        string_0 = module_0.String(max_length=none_type_0, min_length=int_0, format=date_0)
    except BaseException:
        pass

def test_case_55():
    try:
        dict_0 = {}
        int_0 = -18
        int_1 = 5
        dict_1 = {}
        date_0 = module_0.Date()
        list_0 = [dict_1, int_0]
        object_0 = module_0.Object(properties=date_0, min_properties=int_0, max_properties=int_1, required=list_0, **dict_0)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = ''
        int_0 = -1292
        number_0 = module_0.Number(minimum=int_0, maximum=int_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_57():
    try:
        dict_0 = {}
        str_0 = '\\;wF.k2<~$d71jl]9Gy%'
        field_0 = module_0.Field(title=str_0, description=str_0)
        integer_0 = module_0.Integer(precision=str_0)
        const_0 = module_0.Const(integer_0, **dict_0)
        array_0 = module_0.Array(field_0, integer_0, const_0)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = '-|l$nQ'
        any_0 = module_0.Any()
        any_1 = any_0.validate(str_0)
        text_0 = module_0.Text()
        object_0 = module_0.Object(min_properties=text_0)
    except BaseException:
        pass

def test_case_59():
    try:
        field_0 = module_0.Field()
        any_0 = field_0.get_default_value()
        date_0 = module_0.Date()
        decimal_0 = module_1.Decimal()
        decimal_1 = module_0.Decimal(exclusive_maximum=decimal_0, multiple_of=decimal_0)
        object_0 = module_0.Object(property_names=field_0, max_properties=decimal_1)
    except BaseException:
        pass

def test_case_60():
    try:
        string_0 = module_0.String()
        integer_0 = module_0.Integer()
        var_0 = [string_0, string_0, integer_0, integer_0]
        union_0 = module_0.Union(var_0)
        any_0 = union_0.validate(integer_0)
    except BaseException:
        pass

def test_case_61():
    try:
        string_0 = module_0.String()
        date_time_0 = None
        any_0 = string_0.validate(date_time_0)
    except BaseException:
        pass

def test_case_62():
    try:
        bool_0 = None
        int_0 = -32
        number_0 = module_0.Number(minimum=int_0, exclusive_minimum=int_0)
        list_0 = [bool_0, bool_0, int_0, bool_0]
        array_0 = module_0.Array(list_0, int_0, int_0)
    except BaseException:
        pass

def test_case_63():
    try:
        str_0 = '8\x0be+<ZmU!\tA8>'
        bool_0 = True
        string_0 = module_0.String(allow_blank=bool_0, pattern=str_0, format=str_0)
        bool_1 = False
        any_0 = string_0.validate(str_0, strict=bool_1)
    except BaseException:
        pass

def test_case_64():
    try:
        str_0 = '^A3lp l>?#ru<L)'
        field_0 = None
        dict_0 = {str_0: field_0}
        optional_0 = None
        field_1 = module_0.Field(title=str_0, description=str_0, default=field_0)
        object_0 = module_0.Object(properties=dict_0, additional_properties=field_0, min_properties=optional_0, required=field_1)
    except BaseException:
        pass

def test_case_65():
    try:
        str_0 = ''
        string_0 = module_0.String(pattern=str_0, format=str_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_66():
    try:
        str_0 = ''
        int_0 = 5
        bool_0 = False
        string_0 = module_0.String(trim_whitespace=bool_0, min_length=int_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_67():
    try:
        dict_0 = {}
        str_0 = '\\7'
        bool_0 = False
        field_0 = module_0.Field(description=str_0, default=dict_0, allow_null=bool_0)
        dict_1 = {str_0: field_0, str_0: field_0}
        time_0 = module_0.Time()
        object_0 = module_0.Object(properties=dict_1, pattern_properties=dict_1, additional_properties=bool_0, property_names=field_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_68():
    try:
        int_0 = 5
        dict_0 = {}
        object_0 = module_0.Object(min_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_69():
    try:
        int_0 = 337
        bytes_0 = b'\xb3'
        number_0 = module_0.Number(precision=bytes_0)
        str_0 = 'lsKc\x0c2\t8-^\x0b1=TC_N'
        field_0 = None
        dict_0 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_0, max_properties=int_0)
    except BaseException:
        pass

def test_case_70():
    try:
        dict_0 = {}
        number_0 = module_0.Number()
        str_0 = None
        bool_0 = None
        field_0 = module_0.Field(allow_null=bool_0)
        str_1 = ":Gg[ip:'8E+$yR|*2<gZ"
        dict_1 = {str_0: field_0, str_1: field_0}
        object_0 = module_0.Object(properties=dict_1, pattern_properties=dict_1, additional_properties=bool_0, **dict_0)
    except BaseException:
        pass

def test_case_71():
    try:
        string_0 = module_0.String()
        array_0 = module_0.Array(string_0)
        str_0 = 'og'
        str_1 = [str_0, str_0]
        any_0 = array_0.validate(str_1)
        bool_0 = False
        object_0 = module_0.Object(additional_properties=bool_0, required=str_1)
        any_1 = object_0.validate(array_0)
    except BaseException:
        pass

def test_case_72():
    try:
        dict_0 = {}
        str_0 = 'Dk]%@'
        bool_0 = False
        field_0 = module_0.Field(description=str_0, default=dict_0, allow_null=bool_0)
        dict_1 = {str_0: field_0}
        object_0 = module_0.Object(properties=dict_1, required=str_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_73():
    try:
        dict_0 = {}
        str_0 = 'g_'
        bool_0 = True
        field_0 = module_0.Field(description=str_0, default=dict_0, allow_null=bool_0)
        dict_1 = {str_0: field_0}
        object_0 = module_0.Object(properties=dict_1, required=str_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_74():
    try:
        str_0 = 'a~'
        int_0 = -1292
        number_0 = module_0.Number(minimum=int_0, maximum=int_0)
        string_0 = module_0.String(max_length=int_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_75():
    try:
        float_0 = -2588.1
        number_0 = module_0.Number(minimum=float_0, maximum=float_0, exclusive_maximum=float_0, multiple_of=float_0)
        int_0 = -899
        number_1 = module_0.Number(minimum=float_0, maximum=int_0, multiple_of=float_0)
        any_0 = number_1.validate(int_0)
    except BaseException:
        pass

def test_case_76():
    try:
        int_0 = 535
        str_0 = 'sxmWeG^D8`,1"dOyBL'
        bool_0 = False
        string_0 = module_0.String(allow_blank=bool_0, min_length=int_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_77():
    try:
        dict_0 = {}
        str_0 = 'Dkg{%I@'
        bool_0 = True
        field_0 = module_0.Field(title=str_0, description=str_0, default=dict_0, allow_null=bool_0)
        dict_1 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_1)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_78():
    try:
        float_0 = 1408.067
        number_0 = module_0.Number(maximum=float_0, exclusive_minimum=float_0)
        dict_0 = {}
        str_0 = '\\7'
        bool_0 = False
        str_1 = ',.8=MyA[1+MI=$@L'
        bool_1 = False
        field_0 = module_0.Field(description=str_1, allow_null=bool_1)
        dict_1 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(properties=dict_1)
        any_0 = object_0.validate(dict_0)
        field_1 = module_0.Field(description=str_0, default=dict_0, allow_null=bool_0)
        dict_2 = {str_0: field_1}
        int_0 = 635
        object_1 = module_0.Object(properties=dict_2, property_names=field_1, min_properties=int_0)
        any_1 = object_1.validate(int_0)
    except BaseException:
        pass

def test_case_79():
    try:
        object_0 = module_0.Object()
        str_0 = ']AwNA|N%'
        dict_0 = {str_0: object_0}
        date_time_0 = module_0.DateTime()
        dict_1 = {date_time_0: dict_0, object_0: dict_0}
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_80():
    try:
        dict_0 = {}
        str_0 = 'g_'
        bool_0 = False
        field_0 = module_0.Field(description=str_0, default=dict_0, allow_null=bool_0)
        dict_1 = {str_0: field_0}
        dict_2 = None
        object_0 = module_0.Object(properties=dict_2, additional_properties=bool_0, required=str_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_81():
    try:
        object_0 = module_0.Object()
        str_0 = 'awR=M!sC:DD<l'
        dict_0 = {str_0: str_0, str_0: object_0}
        none_type_0 = None
        field_0 = module_0.Field(title=str_0)
        object_1 = module_0.Object(properties=none_type_0, additional_properties=field_0)
        any_0 = object_1.validate(dict_0)
    except BaseException:
        pass

def test_case_82():
    try:
        float_0 = -2602.655861010314
        int_0 = -1292
        number_0 = module_0.Number(minimum=int_0, maximum=float_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_83():
    try:
        string_0 = module_0.String()
        array_0 = module_0.Array(string_0)
        str_0 = [array_0]
        any_0 = array_0.validate(str_0)
    except BaseException:
        pass

def test_case_84():
    try:
        str_0 = 'C'
        str_1 = 'car'
        str_2 = (str_0, str_1)
        str_3 = 'D'
        str_4 = 'dog'
        str_5 = (str_3, str_4)
        str_6 = 'cat'
        str_7 = (str_0, str_6)
        str_8 = [str_2, str_5, str_7]
        choice_0 = module_0.Choice(choices=str_8)
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(str_1)
    except BaseException:
        pass

def test_case_85():
    try:
        str_0 = 'date'
        string_0 = module_0.String(format=str_0)
        str_1 = '2015-07-23'
        any_0 = string_0.serialize(str_1)
    except BaseException:
        pass

def test_case_86():
    try:
        string_0 = module_0.String()
        integer_0 = module_0.Integer()
        var_0 = [string_0, integer_0]
        union_0 = module_0.Union(var_0)
        float_0 = -1055.76
        any_0 = union_0.validate(float_0)
    except BaseException:
        pass

def test_case_87():
    try:
        string_0 = module_0.String()
        array_0 = module_0.Array(string_0)
        str_0 = 'op'
        str_1 = [str_0, str_0, array_0]
        any_0 = array_0.validate(str_1)
    except BaseException:
        pass

def test_case_88():
    try:
        dict_0 = {}
        str_0 = 'g_'
        bool_0 = True
        field_0 = module_0.Field(description=str_0, default=dict_0, allow_null=bool_0)
        bool_1 = field_0.has_default()
        validation_error_0 = None
        union_0 = field_0.__or__(field_0)
        any_0 = union_0.validate(validation_error_0)
        any_1 = union_0.validate(str_0)
    except BaseException:
        pass

def test_case_89():
    try:
        list_0 = []
        bool_0 = True
        array_0 = module_0.Array(list_0, bool_0, bool_0)
        any_0 = array_0.validate(list_0, strict=bool_0)
    except BaseException:
        pass

def test_case_90():
    try:
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        int_0 = 20
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        var_0 = [field_0, integer_0]
        bool_1 = False
        array_0 = module_0.Array(var_0, bool_1)
        int_1 = 15
        str_0 = 'test'
        var_1 = [int_0, int_0, int_1, int_0, int_1, int_0, int_0, str_0]
        any_0 = array_0.validate(var_1, strict=bool_0)
    except BaseException:
        pass

def test_case_91():
    try:
        dict_0 = {}
        str_0 = '_'
        bool_0 = False
        field_0 = module_0.Field(description=str_0, default=dict_0, allow_null=bool_0)
        dict_1 = {str_0: field_0}
        object_0 = module_0.Object(properties=dict_1, required=str_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_92():
    try:
        bool_0 = True
        int_0 = 15
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        var_0 = [integer_0]
        array_0 = module_0.Array(var_0, bool_0)
        any_0 = array_0.validate(var_0)
    except BaseException:
        pass

def test_case_93():
    try:
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        int_0 = -9
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        var_0 = [field_0, integer_0]
        array_0 = module_0.Array(var_0, bool_0)
        list_0 = []
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_94():
    try:
        choice_0 = module_0.Choice()
        date_0 = module_0.Date()
        bool_0 = True
        array_0 = module_0.Array(date_0, bool_0)
        date_time_0 = None
        list_0 = [date_0, array_0, array_0, date_time_0, date_time_0, date_time_0]
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_95():
    try:
        str_0 = 'ntgeir'
        date_0 = module_0.Date()
        bool_0 = False
        array_0 = module_0.Array(date_0, bool_0)
        date_time_0 = None
        list_0 = [date_0, array_0, array_0, str_0, date_time_0, date_time_0, date_time_0]
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass