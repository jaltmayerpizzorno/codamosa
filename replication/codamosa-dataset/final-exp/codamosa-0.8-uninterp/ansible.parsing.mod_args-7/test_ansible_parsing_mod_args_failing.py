# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        int_0 = 741
        module_args_parser_0 = module_0.ModuleArgsParser(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '-'
        dict_0 = {str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '-'
        dict_0 = {str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse(module_args_parser_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'action'
        str_1 = 'coy srg=a dest=b>\n!'
        str_2 = {str_1: str_0, str_0: str_1, str_0: str_1, str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'action'
        str_1 = {str_0: str_0}
        var_0 = None
        module_args_parser_0 = module_0.ModuleArgsParser(str_1, var_0)
        str_2 = {str_0: str_1}
        var_1 = None
        module_args_parser_1 = module_0.ModuleArgsParser(str_2, var_1)
        var_2 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'action'
        str_1 = 'coy srg=a dest=b!'
        str_2 = {str_1: str_0, str_0: str_1, str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        str_3 = 'command'
        var_0 = {str_3: str_0}
        module_args_parser_1 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_1.parse()
        var_2 = module_args_parser_0.parse(module_args_parser_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'action'
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        str_2 = 'ejK^{|XkR"Q'
        str_3 = {str_2: str_1, module_args_parser_0: str_2, str_2: str_1}
        str_4 = "*;\t\t@8'w\x0cnI{'b\r+7v"
        module_args_parser_1 = module_0.ModuleArgsParser(str_3)
        set_0 = {str_4, str_4, module_args_parser_1}
        str_5 = 'Pw"Uz'
        dict_0 = {str_5: module_args_parser_1}
        module_args_parser_2 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_2.parse(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        str_0 = 'action'
        str_1 = 'copy src=a dest=b!e'
        str_2 = {str_0: str_1}
        module_args_parser_1 = module_0.ModuleArgsParser(str_2)
        str_3 = 'local_action'
        str_4 = 'command /bin/echo hello world'
        str_5 = {str_3: str_4, str_0: str_0}
        module_args_parser_2 = module_0.ModuleArgsParser(str_5)
        var_0 = module_args_parser_2.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        str_0 = 'action'
        str_1 = 'copy src=a dest=b!e'
        str_2 = {str_0: str_1}
        module_args_parser_1 = module_0.ModuleArgsParser(str_2)
        str_3 = 'local_action'
        bool_0 = False
        var_0 = module_args_parser_1.parse(bool_0)
        var_1 = module_args_parser_1.parse()
        var_2 = module_args_parser_1.parse()
        str_4 = '_uses_shell'
        str_5 = 'command'
        var_3 = {str_5: str_0}
        module_args_parser_2 = module_0.ModuleArgsParser(var_3)
        var_4 = module_args_parser_2.parse()
        var_5 = module_args_parser_2.parse()
        var_6 = module_args_parser_1.parse()
        str_6 = 'F6(|>[M\\QK2/\n4 S"$7'
        set_0 = {str_6, str_4, module_args_parser_2}
        dict_0 = {str_3: var_1}
        module_args_parser_3 = module_0.ModuleArgsParser(dict_0)
        var_7 = module_args_parser_3.parse(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'test'
        var_0 = dict(action=str_0, delegate_to=str_0, args=str_0)
        var_1 = None
        module_args_parser_0 = module_0.ModuleArgsParser(var_0, var_1)
        var_2 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'delegate_to'
        str_1 = 'shell'
        str_2 = 'action'
        str_3 = 'args'
        str_4 = 'nyc1'
        str_5 = 'whoami'
        str_6 = 'helloworld'
        int_0 = 2
        var_0 = {str_0: str_4, str_1: str_5, str_2: str_6, str_3: int_0}
        str_7 = 'collection_list'
        module_args_parser_0 = module_0.ModuleArgsParser(var_0, str_7)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass