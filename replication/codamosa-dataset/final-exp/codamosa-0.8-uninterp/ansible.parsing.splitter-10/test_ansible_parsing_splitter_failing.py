# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    try:
        bool_0 = True
        str_0 = '\n    \\[\n        (?:[0-9a-f]+:[0-9a-f]+)         # hexadecimal begin:end\n        (?::[0-9]+)?                    # numeric :step (optional)\n    \\]\n'
        var_0 = module_0.parse_kv(str_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        var_0 = module_0.parse_kv(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x07#^W>lw\xf8P`x\xe54\x06'
        var_0 = module_0.join_args(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -1824.9785
        var_0 = module_0.split_args(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'world"'
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "j{{ln@e'>"
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '7Sqm\r"\''
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'name: a=b c=#foo bar" d=\'foo ba r\' \\\ne="foobar" f=\'foo bar\' g=\'foo\\\'s bar\''
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '4Y\tQb'
        var_0 = module_0.join_args(str_0)
        str_1 = '2'
        var_1 = module_0.parse_kv(str_1)
        str_2 = "/3QVJ{%8ac(_'4?({3"
        var_2 = module_0.parse_kv(str_2)
    except BaseException:
        pass