# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n        Example docstring.\n\n        :param a: An integer.\n        :param b: Optional string. Defaults to "None".\n        :raises ValueError: if a negative integer is passed\n        :returns: bool\n        :returns: int\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '\n    This is for testing the parsing of docstrings.\n    This is the long description.\n\n    This is new paragraph in the long description.\n\n    :param a: Description of argument a\n    :type a: int\n    :param b: Description of argument b\n    :type b: str\n    :returns: Description of return value.\n    :rtype: bool\n    :raises ValueError: Description of what causes ValueError to be raised\n    :raises TypeError: Description of what causes TypeError to be raised\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = 'Rrz'
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = "Regular expression pattern matching this section's header.\n\n        This pattern will match this instance's ``title`` attribute in\n        an anonymous group.\n        "
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = '\n    This is short description.\n\n    This is long description.\n\n    :param foo:  It is a foo.\n    :param bar=None: It is a bar.\n    :type bar: str\n    :returns: It is a return value.\n    rtype: str\n    :raises ValueError: It raises the ValueError exception.\n   '
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'Test function\n:param str content: Content to be added.\n:return: The result\n'
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '    Short description.\n\n    More detailed description.\n\n    :param arg1: argument one\n    :param arg2: argument two\n    :returns: something\n    :raises ValueError: when arg1 == arg2\n    :raises TypeError: when arg1 != arg2\n    :raises: when arg2 != arg2\n    :returns: something\n    :yields: a thing\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    str_0 = '\n    Parse the ReST-style docstring into its components.\n\n    :param int x: The X coordinate.\n    :param int y: The Y coordinate.\n    :returns: parsed docstring\n    :rtype: Docstring\n    '
    docstring_0 = module_0.parse(str_0)