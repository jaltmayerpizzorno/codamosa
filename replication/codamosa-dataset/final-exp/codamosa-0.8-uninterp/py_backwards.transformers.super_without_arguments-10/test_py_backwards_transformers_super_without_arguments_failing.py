# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.transformers.super_without_arguments as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    try:
        str_0 = 'class A:\n  def __init__(self):\n    super()'
        var_0 = module_0.parse(str_0)
        super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(str_0)
        var_1 = super_without_arguments_transformer_0.visit(var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'class A:\n  def __init__(self):\n    super()'
        var_0 = module_0.parse(str_0)
        super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(var_0)
        list_0 = [var_0, str_0, str_0]
        str_1 = 'A}\x0c'
        str_2 = 'bpjo*U@\x0ceuL8MlK=#&z'
        dict_0 = {str_0: super_without_arguments_transformer_0, str_1: var_0, str_2: str_1}
        call_0 = module_2.Call(*list_0, **dict_0)
        call_1 = super_without_arguments_transformer_0.visit_Call(call_0)
        var_1 = super_without_arguments_transformer_0.visit(var_0)
        list_1 = None
        var_2 = super_without_arguments_transformer_0.visit(list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'class A:\n  def __init__(self):\n    uper()'
        var_0 = module_0.parse(str_0)
        super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(var_0)
        list_0 = [var_0, str_0, str_0]
        str_1 = 'A}\x0c'
        str_2 = 'bpjo*U@\x0ceuL8MlK=#&z'
        dict_0 = {str_0: super_without_arguments_transformer_0, str_1: var_0, str_2: str_1}
        call_0 = module_2.Call(*list_0, **dict_0)
        call_1 = super_without_arguments_transformer_0.visit_Call(call_0)
        var_1 = super_without_arguments_transformer_0.visit(var_0)
        list_1 = None
        var_2 = super_without_arguments_transformer_0.visit(list_1)
    except BaseException:
        pass