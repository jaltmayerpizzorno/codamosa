# Automatically generated by Pynguin.
import ansible.module_utils.urls as module_0

def test_case_0():
    try:
        int_0 = -1281
        dict_0 = {int_0: int_0, int_0: int_0}
        parse_result_dotted_dict_0 = None
        list_0 = [dict_0]
        connection_error_0 = module_0.ConnectionError(*list_0)
        missing_module_error_0 = module_0.MissingModuleError(parse_result_dotted_dict_0, connection_error_0)
        var_0 = module_0.prepare_multipart(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '`Q}quYRy0.+@#0c|Cw'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        var_0 = custom_h_t_t_p_s_handler_0.https_open(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'!\x8d\xae\x00H\xebq\xca'
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(bytes_0)
        proxy_error_0 = module_0.ProxyError()
        dict_0 = {}
        request_0 = module_0.Request()
        var_0 = request_0.delete(proxy_error_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(bool_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 3600
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(int_0)
        var_0 = unix_h_t_t_p_connection_0.connect()
    except BaseException:
        pass

def test_case_6():
    try:
        request_0 = module_0.Request()
        bytes_0 = b''
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(bytes_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 560
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(int_0)
        var_0 = unix_h_t_t_p_connection_0.__call__()
    except BaseException:
        pass

def test_case_8():
    try:
        request_with_method_0 = None
        var_0 = module_0.generic_urlparse(request_with_method_0)
    except BaseException:
        pass

def test_case_9():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        var_0 = parse_result_dotted_dict_0.as_list()
        dict_0 = {}
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(dict_0)
        str_0 = '\x0b2G\\dDUR'
        list_0 = []
        var_1 = module_0.build_ssl_validation_error(custom_h_t_t_p_s_handler_0, str_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        request_0 = module_0.Request()
        str_0 = 'https'
        var_0 = request_0.put(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        bytes_0 = b'\xf3\x91\xc18\xf3\xc3\x8a'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(dict_0, bytes_0)
        list_0 = [s_s_l_validation_handler_0, bytes_0, s_s_l_validation_handler_0, bytes_0]
        var_0 = s_s_l_validation_handler_0.make_context(list_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0]
        proxy_error_0 = module_0.ProxyError()
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        bool_0 = False
        connection_error_0 = module_0.ConnectionError(*list_0)
        missing_module_error_0 = None
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(connection_error_0, missing_module_error_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(custom_h_t_t_p_s_handler_0, proxy_error_0)
        s_s_l_validation_handler_1 = module_0.SSLValidationHandler(bool_0, s_s_l_validation_handler_0, list_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(missing_module_error_0)
        var_0 = s_s_l_validation_handler_1.make_context(proxy_error_0, unix_h_t_t_p_connection_0)
    except BaseException:
        pass

def test_case_13():
    try:
        request_0 = module_0.Request()
        s_s_l_validation_error_0 = None
        var_0 = request_0.patch(s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = None
        no_s_s_l_error_0 = module_0.NoSSLError()
        var_0 = module_0.getpeercert(dict_0, no_s_s_l_error_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\x19\xbbB\xc1X\xdf\x15\x1b\x89\xb0\xeb{&q'
        var_0 = module_0.generic_urlparse(bytes_0)
        str_0 = 'Jx^'
        request_0 = module_0.Request(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        request_0 = module_0.Request()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(request_0, request_0)
        str_0 = '\n0vdDHxe'
        dict_0 = {str_0: s_s_l_validation_handler_0}
        var_0 = module_0.url_argument_spec()
        var_1 = s_s_l_validation_handler_0.http_request(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0, tuple_0]
        int_0 = 14
        var_0 = module_0.atexit_remove_file(int_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        int_1 = 538
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(int_1)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, unix_h_t_t_p_handler_0)
        var_1 = s_s_l_validation_handler_0.get_ca_certs()
        unix_h_t_t_p_handler_1 = module_0.UnixHTTPHandler(list_0)
        int_2 = 499
        complex_0 = None
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(tuple_0)
        request_with_method_0 = module_0.RequestWithMethod(list_0, int_2, complex_0, unix_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_18():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        float_0 = 1000.0
        proxy_error_0 = module_0.ProxyError()
        no_s_s_l_error_0 = module_0.NoSSLError()
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(proxy_error_0)
        request_0 = module_0.Request(tuple_0, list_0, float_0, proxy_error_0, no_s_s_l_error_0, unix_h_t_t_p_handler_0)
        var_0 = request_0.patch(tuple_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 1338
        str_0 = '\n    Quickly find short_description using string methods instead of node parsing.\n    This does not return a full set of documentation strings and is intended for\n    operations like ansible-doc -l.\n    '
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(int_0, str_0)
        set_0 = set()
        bool_0 = True
        var_0 = s_s_l_validation_handler_0.make_context(set_0, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        unix_h_t_t_p_s_connection_0 = None
        var_0 = module_0.maybe_add_ssl_handler(parse_result_dotted_dict_0, unix_h_t_t_p_s_connection_0, unix_h_t_t_p_s_connection_0)
        request_0 = module_0.Request()
        str_0 = '5%/A'
        list_0 = [str_0]
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0)
        missing_module_error_0 = module_0.MissingModuleError(custom_h_t_t_p_s_connection_0, parse_result_dotted_dict_0)
        int_0 = 4645
        var_1 = request_0.post(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        dict_0 = {}
        proxy_error_0 = module_0.ProxyError(**dict_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(proxy_error_0)
        list_0 = []
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict(*list_0, **dict_0)
        var_0 = parse_result_dotted_dict_0.as_list()
        bytes_0 = b'\x0bX\xb5\x8c`\xe8\xda.\xd1\xfc\xbc'
        no_s_s_l_error_0 = module_0.NoSSLError()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(bytes_0, no_s_s_l_error_0, custom_h_t_t_p_s_handler_0)
        list_1 = [custom_h_t_t_p_s_handler_0, unix_h_t_t_p_connection_0]
        var_1 = module_0.rfc2822_date_string(list_1)
    except BaseException:
        pass

def test_case_22():
    try:
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        str_0 = ''
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_0)
        dict_0 = {}
        proxy_error_0 = module_0.ProxyError(**dict_0)
        custom_h_t_t_p_s_connection_0 = None
        var_0 = unix_h_t_t_p_handler_0.http_open(custom_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = "\n    Quickly find\tshort_description using string methods instead of node parsing.\n    Thgs does not return a full set of document'tion strings and is intended for\n    operati*ns like ansible-doc -l.\n    "
        float_0 = -4133.354072935445
        connection_error_0 = None
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        list_0 = [custom_h_t_t_p_s_handler_0, float_0, str_0]
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        dict_0 = {float_0: list_0}
        bytes_0 = b'\x9f\xb4[0%d'
        request_0 = module_0.Request(connection_error_0, connection_error_0, custom_h_t_t_p_s_handler_0, list_0, connection_error_0, s_s_l_validation_error_0, h_t_t_p_s_client_auth_handler_0, dict_0, bytes_0)
        var_0 = request_0.patch(connection_error_0, request_0)
    except BaseException:
        pass

def test_case_24():
    try:
        s_s_l_validation_error_0 = None
        unix_h_t_t_p_s_connection_0 = None
        list_0 = [s_s_l_validation_error_0, s_s_l_validation_error_0, s_s_l_validation_error_0, unix_h_t_t_p_s_connection_0]
        str_0 = ';'
        var_0 = module_0.basic_auth_header(list_0, str_0)
        missing_module_error_0 = None
        var_1 = module_0.getpeercert(missing_module_error_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = -1293.0
        int_0 = 1338
        str_0 = '\n    Quickly find short_description using string methods instead of node parsing.\n    This does not return a full set of documentation strings and is intended for\n    operations like ansible-doc -l.\n    '
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(int_0, str_0)
        var_0 = s_s_l_validation_handler_0.detect_no_proxy(float_0)
        connection_error_0 = None
        var_1 = module_0.get_channel_binding_cert_hash(connection_error_0)
        list_0 = []
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        missing_module_error_0 = module_0.MissingModuleError(list_0, custom_h_t_t_p_s_handler_0)
        no_s_s_l_error_0 = module_0.NoSSLError()
        tuple_0 = (list_0, missing_module_error_0, no_s_s_l_error_0)
        dict_0 = {}
        custom_h_t_t_p_s_handler_1 = module_0.CustomHTTPSHandler()
        var_2 = module_0.fetch_file(tuple_0, dict_0, custom_h_t_t_p_s_handler_1)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1349
        str_0 = 'https'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(int_0, str_0)
        proxy_error_0 = None
        var_0 = s_s_l_validation_handler_0.validate_proxy_response(proxy_error_0)
    except BaseException:
        pass

def test_case_27():
    try:
        dict_0 = None
        var_0 = module_0.prepare_multipart(dict_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'%<1\x19C\n'
        list_0 = [bytes_0]
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(list_0)
        var_0 = unix_h_t_t_p_s_connection_0.__call__()
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'localhost'
        str_1 = '443'
        str_2 = '/usr/local/etc/ca-certificates'
        str_3 = '/etc/ssl/certs'
        str_4 = [str_2, str_3]
        var_0 = module_0.build_ssl_validation_error(str_0, str_1, str_4)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 't!Kcijxt\x0cK+'
        float_0 = 1369.52959
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(str_0, float_0)
        bool_0 = False
        missing_module_error_0 = module_0.MissingModuleError(s_s_l_validation_handler_0, bool_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(custom_h_t_t_p_s_handler_0)
        bool_1 = True
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bool_1)
        dict_0 = {}
        proxy_error_0 = module_0.ProxyError(**dict_0)
        var_0 = module_0.open_url(missing_module_error_0, unix_h_t_t_p_handler_0, unix_h_t_t_p_connection_0, bool_1, proxy_error_0)
    except BaseException:
        pass

def test_case_31():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        float_0 = 1449.701507
        proxy_error_0 = module_0.ProxyError()
        no_s_s_l_error_0 = module_0.NoSSLError()
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(float_0)
        request_0 = module_0.Request(tuple_0, list_0, float_0, proxy_error_0, no_s_s_l_error_0, unix_h_t_t_p_handler_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_0)
        int_0 = -753
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(int_0)
        unix_h_t_t_p_s_connection_1 = module_0.UnixHTTPSConnection(unix_h_t_t_p_s_connection_0)
        unix_h_t_t_p_connection_0 = None
        var_0 = module_0.open_url(s_s_l_validation_error_0, unix_h_t_t_p_s_connection_1, tuple_0, unix_h_t_t_p_connection_0, request_0)
    except BaseException:
        pass

def test_case_32():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        proxy_error_0 = module_0.ProxyError()
        no_s_s_l_error_0 = module_0.NoSSLError()
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(proxy_error_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(unix_h_t_t_p_handler_0)
        h_t_t_p_s_client_auth_handler_0 = None
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(list_0, h_t_t_p_s_client_auth_handler_0)
        str_0 = 'zl3IhK|[=".'
        bool_0 = None
        var_0 = module_0.open_url(s_s_l_validation_handler_0, h_t_t_p_s_client_auth_handler_0, str_0, bool_0, proxy_error_0)
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = False
        list_0 = [bool_0]
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(list_0)
        str_0 = 'X=h7YcY9 '
        bytes_0 = b'\x0em\x86'
        int_0 = 1758
        str_1 = '\rGy=<|7n\tU+t }c5k\x0c]'
        str_2 = '{="ta\tgS)lWr]:@s}y'
        str_3 = None
        dict_0 = {str_2: int_0, str_1: str_0, str_3: str_0}
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(dict_0)
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(h_t_t_p_s_client_auth_handler_0)
        connection_error_0 = None
        set_0 = {unix_h_t_t_p_handler_0}
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(set_0)
        float_0 = -95.55033352504647
        missing_module_error_0 = module_0.MissingModuleError(str_1, unix_h_t_t_p_connection_0)
        dict_1 = {}
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(dict_1)
        var_0 = module_0.open_url(bytes_0, int_0, dict_0, connection_error_0, set_0, custom_h_t_t_p_s_handler_0, float_0, missing_module_error_0, unix_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_34():
    try:
        proxy_error_0 = module_0.ProxyError()
        dict_0 = {}
        request_0 = module_0.Request()
        var_0 = request_0.delete(proxy_error_0, **dict_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 32603
        str_0 = '\n    Quickly find short_description using string methods instead of node parsing.\n    This does not return a full set of documentation strings and is intended for\n    operations like ansible-doc -l.\n    '
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(int_0, str_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
        set_0 = set()
        no_s_s_l_error_0 = module_0.NoSSLError()
        float_0 = -1975.0
        var_1 = s_s_l_validation_handler_0.validate_proxy_response(float_0, set_0)
    except BaseException:
        pass

def test_case_36():
    try:
        tuple_0 = None
        proxy_error_0 = module_0.ProxyError()
        no_s_s_l_error_0 = module_0.NoSSLError()
        proxy_error_1 = module_0.ProxyError()
        dict_0 = {tuple_0: proxy_error_1}
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(dict_0)
        unix_h_t_t_p_s_connection_1 = module_0.UnixHTTPSConnection(unix_h_t_t_p_s_connection_0)
        request_with_method_0 = None
        float_0 = 0.001
        bool_0 = False
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(request_with_method_0, float_0, bool_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        float_1 = -2915.8
        str_0 = "'WnR`\rV(J[jbcy"
        s_s_l_validation_handler_1 = module_0.SSLValidationHandler(s_s_l_validation_error_0, float_1, str_0)
        var_0 = s_s_l_validation_handler_1.get_ca_certs()
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 1338
        str_0 = '\n    Quickly find short_description using string methods instead of node parsing.\n    This does not return a full set of documentation strings and is intended for\n    operations like ansible-doc -l.\n    '
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(int_0, str_0)
        float_0 = -4133.101
        connection_error_0 = None
        var_0 = module_0.get_channel_binding_cert_hash(connection_error_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        list_0 = [custom_h_t_t_p_s_handler_0, s_s_l_validation_handler_0, float_0]
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        dict_0 = {float_0: float_0}
        bytes_0 = b'j\x9f\xb4[0%d'
        request_0 = module_0.Request(connection_error_0, connection_error_0, custom_h_t_t_p_s_handler_0, list_0, connection_error_0, s_s_l_validation_error_0, h_t_t_p_s_client_auth_handler_0, dict_0, bytes_0)
        var_1 = h_t_t_p_s_client_auth_handler_0.https_open(custom_h_t_t_p_s_handler_0)
    except BaseException:
        pass

def test_case_38():
    try:
        request_0 = module_0.Request()
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        connection_error_0 = module_0.ConnectionError()
        dict_0 = {}
        bytes_0 = b"\xe4\x1e\x13\xd6`\xa8\xd2']\xa5\xab;\xd3\xdd:\xc0\x1fG"
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bytes_0)
        var_0 = module_0.build_ssl_validation_error(h_t_t_p_s_client_auth_handler_0, connection_error_0, dict_0, unix_h_t_t_p_connection_0)
    except BaseException:
        pass

def test_case_39():
    try:
        float_0 = -441.0
        list_0 = [float_0, float_0, float_0]
        list_1 = [list_0]
        no_s_s_l_error_0 = module_0.NoSSLError(*list_1)
        str_0 = 'CC@e+Gjyhug\ti1'
        dict_0 = {str_0: str_0, str_0: str_0}
        request_0 = module_0.Request(dict_0, str_0)
        var_0 = request_0.head(no_s_s_l_error_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = '\n    Quickly find short_description using string methods instead of node parsing.\n    This does not return a full set of documentation strings and is intended for\n    operations like ansible-doc -l.\n    '
        set_0 = set()
        str_1 = 'x1'
        str_2 = 'Unable to make %s into to %s, failed final rename from %s: %s'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_2)
        var_0 = module_0.fetch_url(str_1, unix_h_t_t_p_handler_0, str_0, set_0)
    except BaseException:
        pass

def test_case_41():
    try:
        request_0 = module_0.Request()
        dict_0 = {}
        var_0 = module_0.prepare_multipart(dict_0)
        float_0 = 1000.0
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(float_0)
        unix_h_t_t_p_connection_1 = module_0.UnixHTTPConnection(unix_h_t_t_p_connection_0)
        var_1 = request_0.get(unix_h_t_t_p_connection_1)
    except BaseException:
        pass

def test_case_42():
    try:
        dict_0 = {}
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(dict_0)
        str_0 = 'i'
        list_0 = [str_0, str_0]
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(custom_h_t_t_p_s_connection_0)
        request_with_method_0 = module_0.RequestWithMethod(custom_h_t_t_p_s_handler_0, str_0, unix_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_43():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        int_0 = 20
        var_0 = module_0.atexit_remove_file(int_0)
        float_0 = 1000.0
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        int_1 = 538
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(int_1)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, unix_h_t_t_p_handler_0)
        var_1 = s_s_l_validation_handler_0.get_ca_certs()
        proxy_error_0 = module_0.ProxyError()
        no_s_s_l_error_0 = module_0.NoSSLError()
        unix_h_t_t_p_handler_1 = module_0.UnixHTTPHandler(proxy_error_0)
        request_0 = module_0.Request(tuple_0, list_0, float_0, proxy_error_0, no_s_s_l_error_0, unix_h_t_t_p_handler_1)
        dict_0 = {s_s_l_validation_handler_0: s_s_l_validation_error_0}
        var_2 = request_0.options(dict_0)
    except BaseException:
        pass

def test_case_44():
    try:
        request_0 = module_0.Request()
        str_0 = 'L&{}\rj_Q:}<tVQ'
        var_0 = request_0.put(str_0)
    except BaseException:
        pass

def test_case_45():
    try:
        request_0 = module_0.Request()
        str_0 = '5%/e'
        list_0 = [str_0]
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0)
        var_0 = custom_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_46():
    try:
        int_0 = 1349
        dict_0 = {int_0: int_0, int_0: int_0}
        var_0 = module_0.prepare_multipart(dict_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'https://raw.githubusercontent.com/ansible/ansible-modules-core/devel/command/library/command.py'
        bool_0 = False
        var_0 = module_0.maybe_add_ssl_handler(str_0, bool_0)
        str_1 = 'https://raw.githubusercontent.com/ansible/ansible-modules-core/devel/command/library/command.py'
        bool_1 = True
        str_2 = 'test/ansible_test/unit/utils/requests_ca_bundle'
        var_1 = module_0.maybe_add_ssl_handler(str_1, bool_1, str_2)
        var_2 = var_1.http
    except BaseException:
        pass