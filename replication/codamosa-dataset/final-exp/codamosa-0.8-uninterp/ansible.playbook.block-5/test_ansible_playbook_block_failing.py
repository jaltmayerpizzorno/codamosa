# Automatically generated by Pynguin.
import ansible.playbook.block as module_0

def test_case_0():
    try:
        block_0 = module_0.Block()
        var_0 = block_0.get_first_parent_include()
        str_0 = '%s rev-parse %s'
        var_1 = block_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        block_0 = module_0.Block(tuple_0)
        var_0 = block_0.get_first_parent_include()
        block_1 = module_0.Block()
        bytes_0 = b'\x00\x10Q\xc8\xe2\xf1RE\xca\x93=\x86(\xcc\xe2'
        block_2 = module_0.Block(bytes_0)
        float_0 = -286.00383
        var_1 = block_2.__ne__(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '2qoDn\\,`;\rzqk bn'
        bytes_0 = b'\xbd\x1d\x1f'
        block_0 = module_0.Block(str_0, bytes_0)
        int_0 = 1821
        block_1 = module_0.Block()
        block_2 = module_0.Block(int_0, block_1)
        var_0 = block_2.get_vars()
        block_3 = module_0.Block()
        var_1 = block_3.copy()
        str_1 = 'Dav?b-#cP7o0'
        var_2 = block_3.is_block(str_1)
        block_4 = module_0.Block()
        var_3 = block_4.deserialize(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 0.0001
        dict_0 = {float_0: float_0}
        list_0 = [dict_0, float_0, float_0]
        bool_0 = False
        block_0 = module_0.Block(list_0, bool_0, bool_0)
        int_0 = -1402
        var_0 = block_0.load(list_0, block_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'command'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        block_0 = module_0.Block(str_0, dict_0)
        list_0 = [str_0, block_0]
        set_0 = set()
        tuple_0 = (str_0, list_0, set_0)
        float_0 = 2538.085
        var_0 = block_0.is_block(dict_0)
        block_1 = module_0.Block(block_0, tuple_0, float_0, str_0)
        var_1 = block_1.get_first_parent_include()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 0.0001
        int_0 = -160
        bytes_0 = b'Q\xc3'
        block_0 = module_0.Block(int_0, bytes_0)
        var_0 = block_0.has_tasks()
        dict_0 = {float_0: float_0}
        float_1 = 0.5
        list_0 = [float_1, float_1, float_1]
        tuple_0 = ()
        block_1 = module_0.Block(list_0, tuple_0)
        var_1 = block_1.preprocess_data(dict_0)
        block_2 = module_0.Block()
        list_1 = [block_2]
        bytes_1 = b'\x94\x1d\x9a\x00\x93\xef\xf8\xbf+Ab\xce\xca\x060'
        var_2 = block_2.__repr__()
        block_3 = module_0.Block(bytes_1)
        var_3 = block_3.preprocess_data(bytes_1)
        var_4 = block_2.preprocess_data(list_0)
        var_5 = block_2.__repr__()
        var_6 = block_3.load(list_1)
    except BaseException:
        pass

def test_case_6():
    try:
        block_0 = module_0.Block()
        int_0 = 2110
        block_1 = module_0.Block(block_0, int_0)
        var_0 = block_1.serialize()
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = None
        int_0 = 303
        int_1 = -6
        float_0 = -679.08025
        int_2 = False
        tuple_0 = (int_2, dict_0)
        block_0 = module_0.Block(int_1, float_0, tuple_0)
        var_0 = block_0.set_loader(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'checking if winrm_host %s is an IPv6 address'
        float_0 = 0.2
        block_0 = module_0.Block(str_0)
        block_1 = module_0.Block(str_0, float_0, block_0)
        var_0 = block_1.serialize()
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        bytes_0 = b'\x02^\x9e\xa46'
        float_0 = 534.17
        str_0 = 'jMQIR\x0crY'
        tuple_0 = (float_0, str_0, float_0)
        list_0 = [set_0, float_0]
        block_0 = module_0.Block(list_0)
        var_0 = block_0.__repr__()
        float_1 = 0.0001
        block_1 = module_0.Block(bytes_0, tuple_0, float_1)
        var_1 = block_1.get_include_params()
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        str_0 = '0242ac11-0011-35e9-b50c-000000003458'
        block_0 = module_0.Block(list_0, str_0)
        var_0 = block_0.all_parents_static()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'RaEd`\rTc2_tJ5hO3'
        float_0 = 532.0
        block_0 = module_0.Block(str_0, float_0)
        var_0 = block_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'.B#\xf8R\xf7HKT^J${\xc7)f\xb1k6'
        float_0 = 2.0
        block_0 = module_0.Block(bytes_0, float_0)
        var_0 = block_0.copy()
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\x99\x8e\x809>\xc2\xcb\x9c\xfc\x13\x08\xe0M'
        str_0 = ''
        float_0 = 991.2015
        block_0 = module_0.Block(str_0, float_0)
        set_0 = set()
        list_0 = [set_0, str_0, str_0]
        block_1 = module_0.Block(bytes_0, block_0, list_0)
        var_0 = block_1.serialize()
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1821
        block_0 = module_0.Block()
        float_0 = -1749.776095
        var_0 = block_0.preprocess_data(float_0)
        block_1 = module_0.Block(int_0, block_0)
        var_1 = block_1.get_vars()
        str_0 = 'Dav?b-#cP7o0'
        var_2 = block_0.is_block(str_0)
        var_3 = block_0.all_parents_static()
        var_4 = block_0.set_loader(block_0)
        var_5 = block_1.serialize()
        list_0 = [str_0]
        int_1 = 5054
        var_6 = block_1.load(block_0, list_0, int_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '2qoDn\\,`;\rzqk bn'
        str_1 = "\n    # simple range\n    # ansible -i 'host[1:10],' -m ping\n\n    # still supports w/o ranges also\n    # ansible-playbook -i 'localhost,' play.yml\n"
        bytes_0 = b''
        block_0 = module_0.Block()
        list_0 = [bytes_0]
        var_0 = block_0.set_loader(list_0)
        str_2 = '0242ac11-0011-35e9-b50c-000000000253'
        block_1 = module_0.Block(str_1, bytes_0, str_2)
        var_1 = block_1.filter_tagged_tasks(str_0)
        int_0 = -2508
        var_2 = block_1.preprocess_data(str_1)
        bytes_1 = b'\xec\x99\x85\xeb%\x8b\xb0La\x9e\x98\x9b\xe8\xb3C\x84C[\xf2\xee'
        var_3 = block_1.is_block(bytes_1)
        list_1 = None
        var_4 = block_1.get_vars()
        str_3 = 'safe'
        set_0 = {str_3, str_3, int_0, list_1}
        block_2 = module_0.Block(str_3, list_1, set_0, list_1)
        var_5 = block_1.copy(block_2)
        block_3 = module_0.Block(bytes_0)
        var_6 = block_1.serialize()
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = "*&:\r'jdQ`z&GR1"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = '/sys/devices/virtual/dmi/id/bios_date'
        str_2 = "\n    # simple range\n    # anible -i 'host[1:10],' -m ping\n\n    # still supports w/o ranges also\n    # ansible-plybook -i 'localhost,' play.yml\n"
        bytes_0 = b''
        str_3 = '0242ac11-0011-35e9-b50c-000000000253'
        block_0 = module_0.Block(str_2, bytes_0, str_3)
        var_0 = block_0.filter_tagged_tasks(str_1)
        int_0 = -2502
        var_1 = block_0.preprocess_data(str_2)
        block_1 = module_0.Block(dict_0, str_0)
        bytes_1 = b'\xec\x99\x85\xeb%\x8b\xb0La\x9e\x98\x9b\xe8\xb3C\x84C[\xf2\xee'
        var_2 = block_1.is_block(bytes_1)
        float_0 = -1749.776095
        list_0 = None
        bool_0 = True
        block_2 = module_0.Block(block_0, dict_0)
        var_3 = block_0.get_vars()
        var_4 = block_2.filter_tagged_tasks(bytes_0)
        str_4 = 'safe'
        set_0 = {str_1, str_4, int_0, list_0}
        block_3 = module_0.Block(str_4, list_0, set_0, list_0)
        var_5 = block_3.copy()
        tuple_0 = (int_0, list_0, bool_0)
        block_4 = module_0.Block(tuple_0, list_0)
        var_6 = block_3.is_block(str_0)
        var_7 = block_0.set_loader(float_0)
    except BaseException:
        pass