# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n    Summarize information about the process or its state\n\n    This function is useful for printing the current value of simulation\n    parameters in the output console.\n\n    Parameters\n    ----------\n    t : float\n        The time at which to print the report\n    y : list\n        The state of the system at time t\n    args : dict\n        Extra metadata to be included in the report.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_3():
    str_0 = '\n    Short description.\n    Long description.\n\n    Parameters\n    ----------\n    arg_name\n        argdescription\n    arg_2 : type, optional\n        descriptions can also span...\n        ... multiple lines\n\n    Returns\n    -------\n    return_name : type\n        A description of this returned value\n    another_type\n        Return names are optional, types are required\n\n    Raises\n    ------\n    ValueError\n        A description of what might raise ValueError\n\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)
    section_0 = module_0.Section(str_0, str_0)
    var_0 = numpydoc_parser_0.add_section(section_0)

def test_case_4():
    str_0 = 'A short description.\n\n    A long description which spans multiple lines.\n\n    **kwargs : optional\n        Keyword arguments.\n        Can span multiple\n        lines.\n\n    Returns\n    -------\n    flag : bool (optional)\n        Flag whether something was done.\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)
    numpydoc_parser_1 = module_0.NumpydocParser()
    str_1 = ''
    docstring_1 = numpydoc_parser_1.parse(str_1)

def test_case_5():
    str_0 = 'Example function with types documentedwin the docstring.\n\n    Parameters\n    ----------\n    param1 : int\n        The first parameter.\n    param2 : str\n        The second parameter.\n\n    Returns\n    -------\n 7  bool\n        True if successful, False otherwise.\n\n    Raises\n    ------\n    KeyError\n        When a key is <ot found.\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = 'li&oZ[2>g3](P!'
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_7():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '\n.. deprecated:: 1.2.0\n    \tUse ``test`` instead of ``test2``, which is removed in verison ``1.4.0``.\n    \tAlso ``test3`` is deprecated.\n    '
    docstring_0 = numpydoc_parser_0.parse(str_0)
    var_0 = docstring_0.meta

def test_case_8():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '\n    This is the short description.\n\n    This is the first line of the long description.\n\n    This is the second line of the long description.\n\n    Parameters\n    ----------\n        param_1 : some type\n            This is the first parameter.\n\n        param_2 : some other type\n            This is the second parameter.\n\n    Returns\n    -------\n        bool\n            This is the return value.\n\n    Warning\n    -------\n        This is the warning.\n    '
    docstring_0 = numpydoc_parser_0.parse(str_0)
    var_0 = print(docstring_0)

def test_case_9():
    str_0 = 'Example function with types documented in the docstring.\n\n    Parameters\n    ----------\n    param1 : int\n        The first parameter.\n    param2 : str\n        The second parameter.\n\n    Returns\n    -------\n    bool\n        True if successful, False otherwise.\n\n    Raise\n    ------\n    KeyError\n        When a key is not found.\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_10():
    str_0 = '\n    Short description.\n    Long description.\n\n    Parameters\n    ----------\n    arg_name\n        arg_description\n    arg_2 : type, optional\n        descriptions can also span...\n        ... multiple lines\n\n    Returns\n    -------\n    return_name : type\n        A description of this returned value\n    another_type\n        Return names are optional, types are required\n\n    Raises\n    ------\n    ValueError\n        A description of what might raise ValueError\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = 'Example function with types documented in the docstring.\n\n    Parameters\n    ----------\n    param1 : int\n        The first parameter.\n    param2 : str\n        The second parameter.\n\n    Returns\n    -------\n    bool\n        True if successful, False otherwise.\n\n    Raises\n    ------\n    KeyError\n        When a key is not found.\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_12():
    str_0 = 'Example function with types documented in the docstring.\n\n    Parameters\n    ----------\n    param1 : int\n       The first parameter.\n    param2 : str\n        The secnd parameter.\n\n    Returns\n    -------    bool\n        True if successful, False otherwise.\n\n    Raises\n    ------\n    KyError\n        When a key is not found.\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_13():
    str_0 = "Sample docstring\n\nNote: This is a sample docstring.\n\nParameters\n----------\na : optional\n    An optional string.\n    Default is '1'.\n\nb : list, optional\n    The second argument.\n\nReturns\n-------\ndict\n    A dictionary containing b"
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_14():
    str_0 = 'Example function with types d\\cumented in the docstring.\n    Parameters\n    ----------\n    param1 : int\n        The first parameter.\n    param2 : str\n        The secnd parameter.\n\n    Returns\n    -------\n    bool\n        True if successful, False otherwise.\n\n    Raises\n    ------\n    KyError\n        When a key is not found.\n\n    '
    docstring_0 = module_0.parse(str_0)