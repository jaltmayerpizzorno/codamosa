# Automatically generated by Pynguin.
import tornado.log as module_0
import logging as module_1

def test_case_0():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = log_formatter_0.format(log_formatter_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_2():
    try:
        module_0.enable_pretty_logging()
        module_0.enable_pretty_logging()
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'xs\r875>.'
        bool_0 = False
        log_formatter_0 = module_0.LogFormatter(bool_0)
        str_1 = 'KHzevCN=Dl'
        bool_1 = True
        dict_0 = None
        log_formatter_1 = module_0.LogFormatter(str_1, str_0, bool_1, dict_0)
        str_2 = log_formatter_0.format(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '9'
        log_formatter_0 = module_0.LogFormatter()
        log_formatter_1 = module_0.LogFormatter(str_0)
        str_1 = 'e\r}[`^ba'
        bool_0 = True
        log_formatter_2 = module_0.LogFormatter(str_1, bool_0)
        tuple_0 = None
        logger_0 = module_1.Logger(tuple_0)
        module_0.enable_pretty_logging(logger_0)
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.enable_pretty_logging()
        none_type_0 = None
        bool_0 = False
        module_0.enable_pretty_logging(none_type_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        int_0 = 2408
        int_1 = 4
        int_2 = 1071
        int_3 = -4468
        dict_0 = {int_0: int_1, int_0: int_2, int_2: int_3}
        log_formatter_0 = module_0.LogFormatter(dict_0)
        dict_1 = {bool_0: bool_0}
        module_0.define_logging_options(dict_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "}4!f'*\nz~X*B_dVJ"
        log_formatter_0 = module_0.LogFormatter(str_0)
        str_1 = 'Z}}FHm'
        log_formatter_1 = module_0.LogFormatter(str_1, str_1)
        any_0 = None
        tuple_0 = ()
        logger_0 = module_1.Logger(tuple_0)
        module_0.enable_pretty_logging(any_0, logger_0)
        bool_0 = True
        str_2 = log_formatter_1.format(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        logger_0 = None
        bytes_0 = b'\x01\xbc\xfe\x0f\x02nQM\xa3\xc4\x80\x97\xe9\x85\x88\n\x11\x0b'
        float_0 = 3379.13819
        list_0 = [logger_0, logger_0]
        tuple_0 = (logger_0, bytes_0)
        log_record_0 = module_1.LogRecord(logger_0, bytes_0, logger_0, float_0, list_0, tuple_0, list_0)
        log_formatter_0 = module_0.LogFormatter()
        str_0 = log_formatter_0.format(log_record_0)
    except BaseException:
        pass