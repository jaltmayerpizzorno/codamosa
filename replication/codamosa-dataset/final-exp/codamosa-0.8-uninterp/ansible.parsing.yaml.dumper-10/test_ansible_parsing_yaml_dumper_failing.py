# Automatically generated by Pynguin.
import ansible.parsing.yaml.dumper as module_0
import ansible.parsing.yaml.objects as module_1
import ansible.template as module_2
import ansible.utils.unsafe_proxy as module_3

def test_case_0():
    try:
        bool_0 = True
        str_0 = '>O,Z\n}~'
        list_0 = None
        dict_0 = {str_0: bool_0, bool_0: str_0, str_0: str_0, str_0: list_0}
        ansible_dumper_0 = module_0.AnsibleDumper(bool_0, str_0, dict_0)
        ansible_unicode_0 = module_1.AnsibleUnicode()
        var_0 = ansible_dumper_0.represent_data(ansible_unicode_0)
        int_0 = -1899
        var_1 = module_0.represent_undefined(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        str_0 = 'test_represent_undefined'
        ansible_undefined_0 = module_2.AnsibleUndefined(str_0)
        var_1 = ansible_dumper_0.represent(ansible_undefined_0)
    except BaseException:
        pass

def test_case_2():
    try:
        ansible_unsafe_bytes_0 = module_3.AnsibleUnsafeBytes()
        str_0 = '~V#`aeZ'
        float_0 = 1618.4578
        str_1 = '[:vr\\uU'
        dict_0 = {str_0: str_0, str_0: float_0, str_1: str_1, str_0: float_0}
        ansible_mapping_0 = module_1.AnsibleMapping(**dict_0)
        ansible_dumper_0 = module_0.AnsibleDumper(str_0, float_0, ansible_mapping_0)
        var_0 = ansible_dumper_0.represent(ansible_unsafe_bytes_0)
    except BaseException:
        pass