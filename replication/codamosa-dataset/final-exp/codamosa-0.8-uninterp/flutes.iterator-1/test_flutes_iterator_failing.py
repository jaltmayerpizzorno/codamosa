# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        complex_0 = None
        dict_0 = {}
        var_0 = module_0.scanr(complex_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -3984
        str_0 = 'BLOCKSIZE'
        str_1 = 's5&{m<#-F3 7i2w<'
        str_2 = '8L\n!CE%i(9u'
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_2: str_1}
        var_0 = module_0.scanr(int_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -2862
        float_0 = -2423.34
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
        lazy_list_0 = module_0.LazyList(dict_0)
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 15
        complex_0 = None
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        range_1 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(complex_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'aDD&\x0cp|i~\x0c}RYz(61'
        list_0 = [str_0, str_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 15
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        iterator_0 = module_0.drop_until(dict_0, lazy_list_0)
        var_0 = list(iterator_0)
        complex_0 = None
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        var_1 = lazy_list_0.__len__()
        range_1 = module_0.Range(*list_0)
        int_1 = range_1.__next__()
        var_2 = range_0.__getitem__(complex_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 2347
        iterable_0 = None
        iterator_0 = module_0.chunk(int_0, iterable_0)
        iterator_1 = module_0.chunk(int_0, iterable_0)
        float_0 = -1109.06
        map_list_0 = module_0.MapList(iterator_0, float_0)
        int_1 = map_list_0.__len__()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "A wrapper over a list that allows lazily performing transformations on the list elements. It's basically the\n    built-in :py:func:`map` function, with support for indexing operators. An example use case:\n\n    .. code:: python\n\n        >>> import bisect\n\n        >>> # Find index of the first element in `a` whose square is >= 10.\n        ... a = [1, 2, 3, 4, 5]\n        ... pos = bisect.bisect_left(MapList(lambda x: x * x, a), 10)\n        3\n\n        >>> # Find the first index `i` such that `a[i] * b[i]` is >= 10.\n        ... b = [2, 3, 4, 5, 6]\n        ... pos = bisect.bisect_left(MapList(lambda i: a[i] * b[i], Range(len(a))), 10)\n        2\n\n    :param func: The transformation to perform on list elements.\n    :param lst: The list to wrap.\n    "
        bool_0 = False
        list_0 = [str_0, bool_0]
        iterator_0 = module_0.drop_until(bool_0, list_0)
        str_1 = 'N\r\t'
        map_list_0 = module_0.MapList(iterator_0, str_1)
        iterator_1 = map_list_0.__iter__()
        map_list_1 = module_0.MapList(str_0, iterator_1)
        str_2 = 'NFP:i{A[I}H6iD'
        var_0 = map_list_1.__getitem__(str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "J EU=>\\f3=ZN\x0cDy'"
        iterator_0 = module_0.split_by(str_0)
        int_0 = 4
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        iterator_1 = range_0.__iter__()
        map_list_0 = module_0.MapList(int_0, iterator_1)
        int_1 = -1598
        float_0 = 1.0
        iterator_2 = map_list_0.__iter__()
        iterator_3 = module_0.drop(int_1, float_0)
        int_2 = 1548
        var_0 = map_list_0.__getitem__(int_2)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = None
        iterable_0 = None
        iterator_0 = module_0.take(int_0, iterable_0)
        dict_0 = {}
        str_0 = '__len__ is not available before the iterable is depleted'
        map_list_0 = module_0.MapList(dict_0, str_0)
        lazy_list_0 = module_0.LazyList(map_list_0)
        var_0 = lazy_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        map_list_0 = None
        var_0 = lazy_list_0.__getitem__(map_list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        iterator_0 = None
        str_0 = 's,8aR&g'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'aDD&\x0cp|i~\x0c}RYz(61'
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        var_0 = lazy_list_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 15
        var_0 = lambda x: x > int_0
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        var_1 = lazy_list_0.__iter__()
        iterator_0 = module_0.drop_until(var_0, lazy_list_0)
        var_2 = list(iterator_0)
        list_0 = [var_0, var_0, var_1]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 15
        var_0 = lambda x: x > int_0
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        var_1 = lazy_list_0.__iter__()
        iterator_0 = module_0.drop_until(var_0, lazy_list_0)
        var_2 = list(iterator_0)
        list_0 = [var_0, int_0, var_2, var_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 4
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        iterator_0 = range_0.__iter__()
        map_list_0 = module_0.MapList(int_0, iterator_0)
        int_1 = map_list_0.__len__()
        int_2 = -1598
        float_0 = 1.0
        iterator_1 = module_0.drop(int_2, float_0)
        str_0 = 'fM9:&/X:=\t7B;Oj'
        map_list_1 = module_0.MapList(str_0, map_list_0)
        iterator_2 = map_list_1.__iter__()
        bool_0 = False
        lazy_list_0 = module_0.LazyList(range_0)
        var_0 = lazy_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 4
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        int_1 = -1598
        float_0 = 1.0
        iterator_0 = module_0.drop(int_1, float_0)
        str_0 = '5A'
        bytes_0 = b'\xe9'
        var_0 = module_0.scanr(str_0, bytes_0)
        lazy_list_0 = module_0.LazyList(list_0)
        var_1 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        str_1 = 'Z[G=A|+>pc.~9$jS@D'
        int_0 = None
        bool_0 = True
        iterator_0 = module_0.chunk(int_0, bool_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        str_2 = 'a}>IpR.p?Xy;'
        dict_0 = {str_0: str_0, str_1: lazy_list_0, str_1: int_0, str_2: lazy_list_0}
        list_0 = [bool_0, str_0]
        var_0 = module_0.scanr(dict_0, dict_0, *list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = True
        str_0 = '.'
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        int_0 = 3
        int_1 = 17
        var_1 = lambda x: x % int_0 == int_1
        iterator_1 = module_0.split_by(var_0, criterion=var_1)
        var_2 = list(iterator_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 10
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        callable_0 = None
        dict_0 = {range_0: range_0}
        list_1 = [range_0, dict_0, int_0]
        lazy_list_0 = module_0.LazyList(list_1)
        map_list_0 = module_0.MapList(callable_0, lazy_list_0)
        map_list_1 = module_0.MapList(map_list_0, range_0)
        iterator_0 = range_0.__iter__()
        map_list_2 = module_0.MapList(int_0, iterator_0)
        int_1 = map_list_2.__len__()
        float_0 = 1288.0
        iterator_1 = module_0.drop(int_0, float_0)
        str_0 = '5A'
        bytes_0 = b'\xe9'
        var_0 = module_0.scanr(str_0, bytes_0)
        map_list_3 = module_0.MapList(str_0, map_list_2)
        iterator_2 = map_list_3.__iter__()
        iterator_3 = map_list_0.__iter__()
        tuple_0 = (dict_0, str_0, lazy_list_0)
        iterator_4 = module_0.split_by(iterator_1, criterion=list_0, separator=tuple_0)
        bool_0 = False
        lazy_list_1 = module_0.LazyList(iterator_4)
        var_1 = lazy_list_1.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 10
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        callable_0 = None
        dict_0 = {range_0: range_0}
        list_1 = [range_0, dict_0, int_0]
        lazy_list_0 = module_0.LazyList(list_1)
        map_list_0 = module_0.MapList(callable_0, lazy_list_0)
        map_list_1 = module_0.MapList(map_list_0, range_0)
        iterator_0 = range_0.__iter__()
        map_list_2 = module_0.MapList(int_0, iterator_0)
        int_1 = map_list_2.__len__()
        str_0 = '5A'
        bytes_0 = b'\xe9'
        var_0 = module_0.scanr(str_0, bytes_0)
        str_1 = 'fM9:&/X:=\t7B;Oj'
        map_list_3 = module_0.MapList(str_0, map_list_2)
        iterator_1 = map_list_3.__iter__()
        iterator_2 = map_list_0.__iter__()
        str_2 = '[/ov_D68b) [o9}8\tP'
        int_2 = -755
        dict_1 = {str_1: str_2}
        iterator_3 = module_0.drop(int_2, dict_1)
        lazy_list_1 = module_0.LazyList(iterator_3)
        int_3 = 2
        var_1 = lazy_list_1.__getitem__(int_3)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 2716
        iterator_0 = module_0.drop(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 3
        int_1 = 1
        int_2 = 2
        int_3 = 4
        int_4 = 5
        int_5 = 6
        int_6 = 7
        int_7 = 8
        int_8 = 9
        int_9 = [int_1, int_2, int_0, int_3, int_4, int_5, int_6, int_7, int_8]
        iterator_0 = module_0.chunk(int_0, int_9)
        var_0 = list(iterator_0)
        var_1 = []
        iterator_1 = module_0.chunk(int_0, var_1)
        var_2 = list(iterator_1)
        int_10 = [int_1, int_2, int_0, int_3, int_4]
        iterator_2 = module_0.chunk(int_0, int_10)
        var_3 = list(iterator_2)
        int_11 = 0
        int_12 = [int_1, int_2, int_0, int_3, int_4]
        iterator_3 = module_0.chunk(int_11, int_12)
        var_4 = list(iterator_3)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = -1121
        iterable_0 = None
        iterator_0 = module_0.take(int_0, iterable_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 2
        int_1 = 4
        int_2 = [int_1, int_0, int_0, int_1, int_1]
        iterator_0 = module_0.drop(int_0, int_2)
        var_0 = list(iterator_0)
        int_3 = 0
        iterator_1 = module_0.drop(int_3, int_1)
        var_1 = list(iterator_1)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 5
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(var_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 36
        iterable_0 = None
        iterator_0 = module_0.take(int_0, iterable_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ' Split by: '
        bool_0 = True
        str_1 = '.'
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_1)
        var_0 = list(iterator_0)
        int_0 = 3
        int_1 = 17
        var_1 = lambda x: x % int_0 == int_1
        iterator_1 = module_0.split_by(var_0, criterion=var_1)
        var_2 = list(iterator_1)
    except BaseException:
        pass

def test_case_29():
    try:
        bool_0 = False
        str_0 = '.'
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        int_0 = 10
        list_0 = [var_0, var_0, iterator_0]
        iterator_1 = module_0.chunk(int_0, list_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        var_1 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_30():
    try:
        lazy_list_0 = None
        list_0 = [lazy_list_0, lazy_list_0, lazy_list_0, lazy_list_0]
        int_0 = -1004
        list_1 = [lazy_list_0]
        iterator_0 = module_0.chunk(int_0, list_1)
        list_2 = [list_0, iterator_0, lazy_list_0]
        var_0 = module_0.scanr(list_2, list_1, *list_1)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 3
        int_1 = 1
        int_2 = 2
        int_3 = 4
        int_4 = [int_1, int_2, int_0, int_3]
        iterator_0 = module_0.take(int_0, int_4)
        var_0 = list(iterator_0)
        int_5 = 5
        var_1 = []
        iterator_1 = module_0.take(int_5, var_1)
        var_2 = list(iterator_1)
        int_6 = 0
        int_7 = [int_1, int_2, int_0]
        iterator_2 = module_0.take(int_6, int_7)
        var_3 = list(iterator_2)
        var_4 = []
        iterator_3 = module_0.take(int_6, var_4)
        var_5 = list(iterator_3)
        int_8 = 10
        iterator_4 = module_0.take(int_8, int_5)
        var_6 = list(iterator_4)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 5
        var_0 = lambda x: x > int_0
        int_1 = -1
        var_1 = range(int_1)
        iterator_0 = module_0.drop_until(var_0, var_1)
        var_2 = list(iterator_0)
        var_3 = lambda x: x
        int_2 = 1
        int_3 = 2
        int_4 = 0
        int_5 = 3
        int_6 = 4
        int_7 = [int_2, int_3, int_4, int_4, int_2, int_2, int_3, int_5, int_6, int_0]
        iterator_1 = module_0.drop_until(var_3, int_7)
        var_4 = list(iterator_1)
        bool_0 = False
        int_8 = 7
        int_9 = 8
        int_10 = [int_2, int_3, int_5, int_6, int_0, int_7, int_8, int_9, int_2, int_1]
        iterator_2 = module_0.drop_until(var_3, int_10)
        var_5 = list(iterator_2)
        bool_1 = True
        var_6 = lambda x: bool_1
        var_7 = list(iterator_0)
        var_8 = lambda x: x > int_5
        var_9 = [bool_0, bool_1, int_3]
        iterator_3 = module_0.drop_until(var_8, var_9)
        var_10 = list(iterator_3)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = -3699
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(int_0)
        iterable_0 = None
        iterator_0 = module_0.take(int_0, iterable_0)
        lazy_list_0 = module_0.LazyList(iterable_0)
    except BaseException:
        pass