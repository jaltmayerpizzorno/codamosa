# Automatically generated by Pynguin.
import sanic.response as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = None
        h_t_t_p_response_0 = module_0.text(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ef:e?xaP-&>L]'
        list_0 = [str_0, str_0, str_0, str_0]
        float_0 = -365.079808
        var_0 = module_0.stream(list_0, str_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xd14nc#Ub\xb9'
        str_0 = 'd&bwk'
        str_1 = '4&T\x0b:Oe^'
        str_2 = 'KEEP_ALIVE_TIMEOUT'
        str_3 = 'B%@\x0b(@Wcfj{'
        str_4 = 'DELETE'
        str_5 = None
        dict_0 = {str_0: str_1, str_2: str_3, str_4: str_5}
        str_6 = "\n        Abstract method implemented to turn the `BlueprintGroup` class\n        into a list like object to support all the existing behavior.\n\n        This method is used to perform the list's indexed setter operation.\n\n        :param index: Index to use for inserting a new Blueprint item\n        :param item: New `Blueprint` object.\n        :return: None\n        "
        h_t_t_p_response_0 = module_0.redirect(str_6, dict_0)
        str_7 = '>r@T+GF.:1cioSv'
        var_0 = module_0.stream(bytes_0, dict_0, str_7, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        base_h_t_t_p_response_0.send(bool_0)
        base_h_t_t_p_response_0.send(bool_0)
        var_0 = None
        str_0 = 'deprecated'
        h_t_t_p_response_0 = module_0.HTTPResponse(var_0, str_0)
        int_0 = 256
        bytes_0 = b'z\xcf\xc2\xabLJ\xdd\xf4\xf3mJV\xbb\xe6B\x96\xf7p\xd2'
        int_1 = 63
        list_0 = [bool_0, bool_0, var_0, bytes_0]
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(list_0, int_1)
        float_0 = -617.54
        var_1 = module_0.stream(bytes_0, int_1, int_0, str_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'p\x0bl.RfM6,gEQjvD'
        optional_0 = None
        list_0 = [optional_0]
        streaming_h_t_t_p_response_0 = module_0.file_stream(str_0)
        var_0 = streaming_h_t_t_p_response_0.send(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'p\x0bXl.RfM6,gEQjvD'
        str_1 = '?=Z'
        int_0 = -3454
        h_t_t_p_response_0 = module_0.html(str_0, int_0)
        var_0 = module_0.stream(str_1, h_t_t_p_response_0)
        optional_0 = None
        list_0 = [optional_0]
        streaming_h_t_t_p_response_0 = module_0.file_stream(str_1, int_0, int_0, str_1, str_1)
        str_2 = 'vY>WCN\n'
        str_3 = None
        str_4 = None
        h_t_t_p_response_1 = module_0.json(str_4)
        dict_0 = {str_3: str_2, str_1: str_3, str_4: int_0}
        h_t_t_p_response_2 = module_0.text(str_2, dict_0)
        var_1 = streaming_h_t_t_p_response_0.send(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'p\x0bXl.RfM6,gEQjvD'
        str_1 = 'V}4jOa%jXvIOQG'
        str_2 = '65Q]YOS\\u'
        streaming_h_t_t_p_response_0 = module_0.file_stream(str_2)
        str_3 = '<]EH}n['
        str_4 = 'C`8?3Eu+n(z6Lt\x0bB'
        dict_0 = {str_1: str_2, str_3: str_2, str_3: str_0, str_2: str_4}
        h_t_t_p_response_0 = module_0.empty(dict_0)
        str_5 = 'XJ+F\x0b~FD~+N1&}b'
        h_t_t_p_response_1 = module_0.text(str_5)
        str_6 = '?=Z'
        str_7 = ''
        dict_1 = {str_6: dict_0, str_7: streaming_h_t_t_p_response_0}
        int_0 = -2854
        pure_path_0 = module_1.PurePath()
        h_t_t_p_response_2 = module_0.json(dict_1, int_0, dict_0, str_2, pure_path_0, **dict_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'p\x0bXl.RfM6,gEQjvD'
        str_1 = 'V}4jOa%jXvIOQG'
        str_2 = '65Q]YOS\\u'
        str_3 = '<]EH}n['
        str_4 = 'C`8?3Eu+n(z6Lt\x0bB'
        dict_0 = {str_1: str_2, str_3: str_2, str_3: str_0, str_2: str_4}
        h_t_t_p_response_0 = module_0.empty(dict_0)
        str_5 = 'XJ+F\x0b~FD~+N1&}b'
        h_t_t_p_response_1 = module_0.text(str_5)
        str_6 = '?=Z'
        int_0 = -3454
        str_7 = None
        int_1 = None
        h_t_t_p_response_2 = module_0.html(str_7, int_1)
        var_0 = module_0.stream(str_6, h_t_t_p_response_2)
        bytes_0 = b'V\x93\xef'
        tuple_0 = (int_0,)
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(bytes_0, int_1, dict_0, tuple_0)
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        base_h_t_t_p_response_0.send()
        optional_0 = None
        list_0 = [optional_0]
        streaming_h_t_t_p_response_1 = module_0.file_stream(str_6, int_0, str_3, dict_0, str_2, bytes_0)
        str_8 = None
        str_9 = None
        str_10 = '\rm1v3--'
        dict_1 = {}
        list_1 = []
        h_t_t_p_response_3 = module_0.file(str_10, dict_1, str_8, list_1)
        h_t_t_p_response_4 = module_0.json(str_9)
        var_1 = streaming_h_t_t_p_response_1.send(*list_0)
    except BaseException:
        pass