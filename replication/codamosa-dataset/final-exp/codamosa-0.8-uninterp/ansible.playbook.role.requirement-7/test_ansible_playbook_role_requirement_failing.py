# Automatically generated by Pynguin.
import ansible.playbook.role.requirement as module_0

def test_case_0():
    try:
        bool_0 = False
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1539.52729
        list_0 = [float_0, float_0, float_0, float_0]
        bool_0 = True
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.scm_archive_role(list_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2819.398
        tuple_0 = ()
        bool_0 = True
        str_0 = '\n    This is a HP-UX User manipulation class.\n\n    This overrides the following methods from the generic class:-\n      - create_user()\n      - remove_user()\n      - modify_user()\n    '
        tuple_1 = (float_0, tuple_0, bool_0, str_0)
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.repo_url_to_role_name(tuple_1)
        role_requirement_1 = module_0.RoleRequirement()
        str_1 = "8hY@VOyAZ'dSZ Y`Q+l+"
        var_1 = role_requirement_0.role_yaml_parse(str_1)
        var_2 = role_requirement_0.role_yaml_parse(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n        Safely evaluate an expression node or a string containing a Python\n        expression.  The string or node provided may only consist of the  following\n        Python literal structures: strings, numbers, tuples, lists, dicts,  booleans,\n        and None.\n        '
        role_requirement_0 = module_0.RoleRequirement()
        role_requirement_1 = module_0.RoleRequirement()
        var_0 = role_requirement_1.role_yaml_parse(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        role_requirement_1 = module_0.RoleRequirement()
        str_0 = ',@y;#f)~b,MqXXNepW'
        role_requirement_2 = module_0.RoleRequirement()
        var_0 = role_requirement_2.repo_url_to_role_name(str_0)
        role_requirement_3 = module_0.RoleRequirement()
        var_1 = role_requirement_3.role_yaml_parse(str_0)
        str_1 = 'g\\W.i@I7]V'
        var_2 = role_requirement_0.repo_url_to_role_name(str_1)
        int_0 = 40
        var_3 = role_requirement_3.scm_archive_role(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        str_0 = '[{9>0akre'
        var_0 = role_requirement_0.role_yaml_parse(str_0)
        var_1 = role_requirement_0.repo_url_to_role_name(str_0)
        role_requirement_1 = module_0.RoleRequirement()
        role_requirement_2 = module_0.RoleRequirement()
        str_1 = '3]Se@,r[[0/'
        var_2 = role_requirement_2.role_yaml_parse(str_1)
        float_0 = 1827.8996425024711
        var_3 = role_requirement_1.role_yaml_parse(var_0)
        str_2 = 'python3-apt'
        var_4 = role_requirement_2.role_yaml_parse(str_2)
        var_5 = role_requirement_0.role_yaml_parse(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'role'
        list_0 = [str_0]
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(list_0)
    except BaseException:
        pass