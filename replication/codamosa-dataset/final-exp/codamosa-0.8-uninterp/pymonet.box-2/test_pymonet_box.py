# Automatically generated by Pynguin.
import pymonet.box as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = None
    box_0 = module_0.Box(var_0)

def test_case_2():
    object_0 = module_1.object()
    str_0 = '\n        Tae mapper function and return new instance of Left wit# the same value.\n\n        :returns: Copy of`self\n        :rtype: Left[A]\n        '
    box_0 = module_0.Box(str_0)
    bool_0 = box_0.__eq__(object_0)

def test_case_3():
    var_0 = None
    box_0 = module_0.Box(var_0)
    box_1 = module_0.Box(box_0)
    str_0 = 'AsOi/.a{T(6x6gFC'
    box_2 = module_0.Box(str_0)
    str_1 = box_2.__str__()

def test_case_4():
    str_0 = '\n        Return rejected Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: rejected Task\n        :rtype: Task[Function(reject, _) -> A]\n        '
    box_0 = module_0.Box(str_0)
    var_0 = box_0.to_either()

def test_case_5():
    dict_0 = {}
    str_0 = '-dAhcbbBpz)V1'
    str_1 = '&xP4omI`=/<zTR'
    dict_1 = {str_0: str_0, str_1: str_1}
    box_0 = module_0.Box(dict_1)
    var_0 = box_0.to_lazy()
    box_1 = module_0.Box(dict_0)
    var_1 = box_1.to_try()

def test_case_6():
    var_0 = None
    box_0 = module_0.Box(var_0)
    int_0 = None
    list_0 = [int_0, int_0, int_0]
    box_1 = module_0.Box(list_0)
    var_1 = box_1.to_validation()

def test_case_7():
    int_0 = 1
    box_0 = module_0.Box(int_0)
    box_1 = module_0.Box(int_0)
    box_2 = module_0.Box(int_0)
    box_3 = module_0.Box(int_0)
    var_0 = box_2 == box_3
    box_4 = module_0.Box(int_0)
    str_0 = '1'
    var_1 = box_4 == str_0