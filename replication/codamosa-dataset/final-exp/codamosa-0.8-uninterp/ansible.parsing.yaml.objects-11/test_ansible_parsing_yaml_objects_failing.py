# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -1306.82
        list_0 = [float_0, float_0, float_0]
        bytes_0 = b'\xcbg'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 90
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 304
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        list_0 = []
        list_1 = [list_0, list_0, list_0, list_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__reversed__()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_2.__getslice__(int_0, ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(int_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bytes_0 = b'<3\x0f\xfdk\x90\xaf\xc9\xba\xd1'
        tuple_0 = (bytes_0,)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_1.count(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        str_0 = '2404:6800:400a:800::1012'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(ansible_unicode_0)
        int_0 = None
        var_1 = ansible_vault_encrypted_unicode_0.__mul__(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\nmodule: systemd\nauthor:\n    - Ansible Core Team\nversion_added: "2.2"\nshort_description:  Manage systemd units\ndescription:\n    - Controls systemd units (services, timers, and so on) on remote hosts.\noptions:\n    name:\n        description:\n            - Name of the unit. This parameter takes the name of exactly one unit to work with.\n            - When no extension is given, it is implied to a C(.service) as systemd.\n            - When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).\n        type: str\n        aliases: [ service, unit ]\n    state:\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              C(restarted) will always bounce the unit. C(reloaded) will always reload.\n        type: str\n        choices: [ reloaded, restarted, started, stopped ]\n    enabled:\n        description:\n            - Whether the unit should start on boot. B(At least one of state and enabled are required.)\n        type: bool\n    force:\n        description:\n            - Whether to override existing symlinks.\n        type: bool\n        version_added: 2.6\n    masked:\n        description:\n            - Whether the unit should be masked or not, a masked unit is impossible to start.\n        type: bool\n    daemon_reload:\n        description:\n            - Run daemon-reload before doing any other operations, to make sure systemd has read any changes.\n            - When set to C(true), runs daemon-reload even if the module does not start or stop anything.\n        type: bool\n        default: no\n        aliases: [ daemon-reload ]\n    daemon_reexec:\n        description:\n            - Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.\n        type: bool\n        default: no\n        aliases: [ daemon-reexec ]\n        version_added: "2.8"\n    scope:\n        description:\n            - Run systemctl within a given service manager scope, either as the default system scope C(system),\n              the current user\'s scope C(user), or the scope of all users C(global).\n            - "For systemd to work with \'user\', the executing user must have its own instance of dbus started and accessible (systemd requirement)."\n            - "The user dbus process is normally started during normal login, but not during the run of Ansible tasks.\n              Otherwise you will probably get a \'Failed to connect to bus: no such file or directory\' error."\n            - The user must have access, normally given via setting the ``XDG_RUNTIME_DIR`` variable, see example below.\n\n        type: str\n        choices: [ system, user, global ]\n        default: system\n        version_added: "2.7"\n    no_block:\n        description:\n            - Do not synchronously wait for the requested operation to finish.\n              Enqueued job will continue without Ansible blocking on its completion.\n        type: bool\n        default: no\n        version_added: "2.3"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - Since 2.4, one of the following options is required C(state), C(enabled), C(masked), C(daemon_reload), (C(daemon_reexec) since 2.8),\n      and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name).\n    - Before 2.4 you always required C(name).\n    - Globs are not supported in name, i.e ``postgres*.service``.\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - A system managed by systemd.\n'
        dict_0 = None
        str_1 = 'mOA{A>%YFU%ZO'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(dict_0)
        var_1 = ansible_vault_encrypted_unicode_0.__len__()
        bytes_0 = b''
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_2 = ansible_vault_encrypted_unicode_1.__mod__(ansible_vault_encrypted_unicode_1)
        var_3 = ansible_vault_encrypted_unicode_1.istitle()
        var_4 = ansible_vault_encrypted_unicode_1.isascii()
        var_5 = ansible_vault_encrypted_unicode_1.isalnum()
        str_2 = ''
        int_0 = 69
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_6 = ansible_vault_encrypted_unicode_2.__ge__(str_2)
        dict_1 = {}
        ansible_unicode_0 = None
        set_0 = {str_0}
        var_7 = ansible_vault_encrypted_unicode_2.__ne__(set_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_8 = ansible_vault_encrypted_unicode_1.replace(ansible_unicode_0, dict_1, ansible_mapping_0)
    except BaseException:
        pass

def test_case_8():
    try:
        ansible_base_y_a_m_l_object_0 = None
        str_0 = 'ApKs?\x0biAr`$SXNK2Mn\n'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.split(ansible_base_y_a_m_l_object_0)
        bytes_0 = b'x\xf7\xfb\xcb,Mu\x05h\x88\xaa\\QA~%\xe3\xaa'
        var_1 = ansible_vault_encrypted_unicode_0.count(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [ansible_unicode_0, ansible_unicode_0]
        list_1 = [list_0, list_0]
        str_0 = 'Nh>$LW"W~Q'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.endswith(list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        bool_0 = True
        dict_0 = {str_0: bool_0}
        list_0 = []
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.index(bool_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        list_0 = [ansible_sequence_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.isprintable()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_1.__lt__(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = None
        str_0 = '_!Qwp""6`As$3'
        dict_0 = {str_0: str_0}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        tuple_0 = (list_0, dict_0, ansible_base_y_a_m_l_object_0)
        str_1 = '&<[2.J.,Zn+'
        str_2 = '[)hM\x0cwB2y'
        dict_1 = {str_1: list_0, str_0: dict_0, str_0: ansible_base_y_a_m_l_object_0, str_2: tuple_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.isnumeric()
        float_0 = 6.6
        list_1 = [float_0, float_0, float_0, float_0]
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_2.join(tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        float_0 = -3594.10308
        var_0 = ansible_vault_encrypted_unicode_0.partition(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x9b\xb4:\xd4\x0c\xa1^\xe5\x86\x0c\xaeO\xd5\x15'
        str_0 = '@JpV\t:bf75o/s~N?/.'
        str_1 = '+i@ZINB:Cg>\r_^'
        dict_0 = {str_1: str_1}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.replace(bytes_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = None
        str_0 = 'Set default values for parameters when no value is supplied.\n\n    Modifies parameters directly.\n\n    :arg argument_spec: Argument spec\n    :type argument_spec: dict\n\n    :arg parameters: Parameters to evaluate\n    :type parameters: dict\n\n    :kwarg set_default: Whether or not to set the default values\n    :type set_default: bool\n\n    :returns: Set of strings that should not be logged.\n    :rtype: set\n    '
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.rindex(list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        list_1 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.rjust(list_0, *list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'lladdr'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.rsplit()
        var_1 = ansible_vault_encrypted_unicode_0.__hash__()
        list_0 = []
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
        var_2 = ansible_vault_encrypted_unicode_0.rjust(ansible_mapping_0, *list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_19():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        list_0 = None
        int_0 = 2111
        var_0 = ansible_vault_encrypted_unicode_0.format_map(int_0)
        var_1 = ansible_vault_encrypted_unicode_1.zfill(list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        list_0 = [ansible_sequence_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.isprintable()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_1.__int__()
    except BaseException:
        pass

def test_case_21():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = -1641
        set_0 = {int_0, int_0, int_0}
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(set_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '2404:6800:400a:800::1012'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        int_0 = None
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bytes_0 = b''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        bool_0 = True
        var_1 = ansible_vault_encrypted_unicode_0.__rmod__(bool_0)
        var_2 = ansible_vault_encrypted_unicode_0.isascii()
        var_3 = ansible_vault_encrypted_unicode_0.isalnum()
        str_0 = ''
        int_0 = 69
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_4 = ansible_vault_encrypted_unicode_1.__ge__(str_0)
        var_5 = ansible_vault_encrypted_unicode_0.__contains__(var_3)
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = {}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.lower()
        var_1 = ansible_vault_encrypted_unicode_0.isprintable()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = None
        str_0 = '--comment'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        set_0 = {ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_2 = ansible_vault_encrypted_unicode_2.__contains__(bool_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'wv=^y'
        bytes_0 = b'\t[<\x18\xf0A'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.strip()
        var_1 = ansible_vault_encrypted_unicode_0.istitle()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.__len__()
        var_3 = ansible_vault_encrypted_unicode_1.__len__()
        list_0 = [var_0, var_3, var_0]
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        str_0 = '#bgvQwp3GS'
        var_0 = ansible_vault_encrypted_unicode_0.rsplit(str_0)
        str_1 = 'njPR*P(w(kH.\tK:'
        var_1 = ansible_vault_encrypted_unicode_0.__le__(str_1)
        list_0 = [ansible_base_y_a_m_l_object_0, str_1]
        tuple_0 = ()
        var_2 = ansible_vault_encrypted_unicode_0.startswith(list_0, tuple_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'FA/WMQwV1'
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_1 = ansible_vault_encrypted_unicode_0.ljust(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '@'
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.split()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        dict_0 = {ansible_vault_encrypted_unicode_0: var_0, ansible_vault_encrypted_unicode_1: str_0, ansible_unicode_0: var_0}
        var_1 = ansible_vault_encrypted_unicode_0.rpartition(dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        ansible_base_y_a_m_l_object_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_sequence_1 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_1)
        var_0 = ansible_vault_encrypted_unicode_2.find(ansible_vault_encrypted_unicode_1, ansible_sequence_0)
    except BaseException:
        pass

def test_case_31():
    try:
        ansible_mapping_0 = None
        int_0 = -1365
        list_0 = []
        list_1 = [list_0, list_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(ansible_mapping_0, int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '<]T_d{RC|m\\*Bn'
        var_0 = ansible_vault_encrypted_unicode_0.__radd__(str_0)
        var_1 = ansible_vault_encrypted_unicode_0.swapcase()
        var_2 = ansible_vault_encrypted_unicode_0.startswith(ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_33():
    try:
        dict_0 = None
        str_0 = 'mOA{A>%YFU%ZO'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(dict_0)
        bytes_0 = b''
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.istitle()
        var_2 = ansible_vault_encrypted_unicode_1.isascii()
        var_3 = ansible_vault_encrypted_unicode_1.isalnum()
        str_1 = ';r'
        int_0 = 69
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_4 = ansible_vault_encrypted_unicode_2.__ge__(str_1)
        var_5 = ansible_vault_encrypted_unicode_0.format()
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = -1281
        str_0 = '\'u<x=o"e5 4'
        dict_0 = {int_0: str_0, str_0: str_0, str_0: int_0}
        list_0 = [dict_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        set_0 = {ansible_vault_encrypted_unicode_0}
        list_1 = [set_0, str_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_2.__le__(ansible_vault_encrypted_unicode_1)
        bool_0 = False
        list_2 = [bool_0]
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_2)
        var_1 = ansible_vault_encrypted_unicode_3.rstrip()
        bool_1 = False
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(bool_1)
        var_2 = ansible_vault_encrypted_unicode_4.__reversed__()
        var_3 = ansible_vault_encrypted_unicode_4.__rmod__(bool_0)
        ansible_unicode_1 = module_0.AnsibleUnicode()
        list_3 = [var_1]
        var_4 = ansible_vault_encrypted_unicode_4.__getslice__(ansible_unicode_1, list_3)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '\nmodule: systemd\nauthor:\n    - Ansible Core Team\nversion_added: "2.2"\nshort_description:  Manage systemd units\ndescription:\n    - Controls systemd units (services, timers, and so on) on remote hosts.\noptions:\n    name:\n        description:\n            - Name of the unit. This parameter takes the name of exactly one unit to work with.\n            - When no extension is given, it is implied to a C(.service) as systemd.\n            - When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).\n        type: str\n        aliases: [ service, unit ]\n    state:\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              C(restarted) will always bounce the unit. C(reloaded) will always reload.\n        type: str\n        choices: [ reloaded, restarted, started, stopped ]\n    enabled:\n        description:\n            - Whether the unit should start on boot. B(At least one of state and enabled are required.)\n        type: bool\n    force:\n        description:\n            - Whether to override existing symlinks.\n        type: bool\n        version_added: 2.6\n    masked:\n        description:\n            - Whether the unit should be masked or not, a masked unit is impossible to start.\n        type: bool\n    daemon_reload:\n        description:\n            - Run daemon-reload before doing any other operations, to make sure systemd has read any changes.\n            - When set to C(true), runs daemon-reload even if the module does not start or stop anything.\n        type: bool\n        default: no\n        aliases: [ daemon-reload ]\n    daemon_reexec:\n        description:\n            - Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.\n        type: bool\n        default: no\n        aliases: [ daemon-reexec ]\n        version_added: "2.8"\n    scope:\n        description:\n            - Run systemctl within a given service manager scope, either as the default system scope C(system),\n              the current user\'s scope C(user), or the scope of all users C(global).\n            - "For systemd to work with \'user\', the executing user must have its own instance of dbus started and accessible (systemd requirement)."\n            - "The user dbus process is normally started during normal login, but not during the run of Ansible tasks.\n              Otherwise you will probably get a \'Failed to connect to bus: no such file or directory\' error."\n            - The user must have access, normally given via setting the ``XDG_RUNTIME_DIR`` variable, see example below.\n\n        type: str\n        choices: [ system, user, global ]\n        default: system\n        version_added: "2.7"\n    no_block:\n        description:\n            - Do not synchronously wait for the requested operation to finish.\n              Enqueued job will continue without Ansible blocking on its completion.\n        type: bool\n        default: no\n        version_added: "2.3"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - Since 2.4, one of the following options is required C(state), C(enabled), C(masked), C(daemon_reload), (C(daemon_reexec) since 2.8),\n      and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name).\n    - Before 2.4 you always required C(name).\n    - Globs are not supported in name, i.e ``postgres*.service``.\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - A system managed by systemd.\n'
        dict_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(dict_0)
        dict_1 = {str_0: str_0, str_0: str_0}
        str_1 = ''
        int_0 = -3340
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_1 = ansible_vault_encrypted_unicode_1.__ge__(str_1)
        dict_2 = {}
        ansible_unicode_0 = None
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_2)
        float_0 = 2563.881
        tuple_0 = (str_1, float_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        list_0 = [str_1, ansible_base_y_a_m_l_object_0, dict_2]
        var_2 = ansible_vault_encrypted_unicode_3.center(ansible_unicode_0, *list_0)
    except BaseException:
        pass

def test_case_36():
    try:
        dict_0 = None
        str_0 = 'mOA{A>%YFU%ZO'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(dict_0)
        bytes_0 = b''
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.istitle()
        var_2 = ansible_vault_encrypted_unicode_1.isascii()
        var_3 = ansible_vault_encrypted_unicode_1.isalnum()
        str_1 = ''
        int_0 = 69
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_4 = ansible_vault_encrypted_unicode_2.__ge__(str_1)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_5 = ansible_vault_encrypted_unicode_1.replace(ansible_vault_encrypted_unicode_1, ansible_mapping_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_37():
    try:
        dict_0 = None
        str_0 = 'mOA{A>%YFU%ZO'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(dict_0)
        bool_0 = False
        list_0 = [var_0]
        var_1 = ansible_vault_encrypted_unicode_0.find(bool_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_38():
    try:
        bool_0 = False
        tuple_0 = (bool_0,)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.lstrip()
        dict_0 = None
        str_0 = 'mOA{A>%YFU%ZO'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bytes_0 = b'M\x8fO:\xab\x8e'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_2.istitle()
        var_2 = ansible_vault_encrypted_unicode_2.isascii()
        var_3 = ansible_vault_encrypted_unicode_2.isalnum()
        var_4 = ansible_vault_encrypted_unicode_1.__eq__(dict_0)
        str_1 = ''
        bool_1 = True
        var_5 = ansible_vault_encrypted_unicode_1.__ne__(bool_1)
        var_6 = ansible_vault_encrypted_unicode_0.isidentifier()
        var_7 = ansible_vault_encrypted_unicode_0.__ge__(str_1)
        set_0 = {var_5, var_2}
        list_0 = [ansible_vault_encrypted_unicode_1, bool_1]
        str_2 = '0{*D\\&qJyb6p?}3B'
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_8 = ansible_vault_encrypted_unicode_3.replace(set_0, ansible_vault_encrypted_unicode_3, list_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 304
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        list_0 = []
        list_1 = [list_0, list_0, list_0, list_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__reversed__()
        float_0 = -1934.447
        bool_0 = False
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_2.__getslice__(float_0, bool_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_2 = ansible_vault_encrypted_unicode_3.__getslice__(int_0, ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_40():
    try:
        bool_0 = False
        tuple_0 = (bool_0,)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.lstrip()
        dict_0 = None
        str_0 = 'mOA{A>%YFU%ZO'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bytes_0 = b'M\x8fO:\xab\x8e'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_2.istitle()
        var_2 = ansible_vault_encrypted_unicode_2.isascii()
        var_3 = ansible_vault_encrypted_unicode_2.isalnum()
        str_1 = ''
        bool_1 = True
        var_4 = ansible_vault_encrypted_unicode_1.__ne__(bool_1)
        int_0 = 69
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_5 = ansible_vault_encrypted_unicode_0.isidentifier()
        var_6 = ansible_vault_encrypted_unicode_3.__ge__(str_1)
        var_7 = ansible_vault_encrypted_unicode_0.__add__(ansible_vault_encrypted_unicode_1)
        float_0 = -1628.49988
        var_8 = ansible_vault_encrypted_unicode_1.__ne__(float_0)
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
    except BaseException:
        pass

def test_case_41():
    try:
        dict_0 = None
        str_0 = 'mOA{A>%YFU%ZO'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(dict_0)
        bytes_0 = b''
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.istitle()
        var_2 = ansible_vault_encrypted_unicode_1.isascii()
        var_3 = ansible_vault_encrypted_unicode_1.isalnum()
        str_1 = ''
        int_0 = 69
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_4 = ansible_vault_encrypted_unicode_2.__ge__(str_1)
        dict_1 = {}
        ansible_unicode_0 = None
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_5 = ansible_vault_encrypted_unicode_1.rfind(ansible_vault_encrypted_unicode_1)
        var_6 = ansible_vault_encrypted_unicode_1.replace(ansible_unicode_0, dict_1, ansible_mapping_0)
    except BaseException:
        pass

def test_case_42():
    try:
        bool_0 = False
        tuple_0 = (bool_0,)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.lstrip()
        var_1 = ansible_vault_encrypted_unicode_0.__reversed__()
        str_0 = '\nmodule: systemd\nauthor:\n    - Ansible Core Team\nversion_added: "2.2"\nshort_description:  Manage systemd units\ndescription:\n    - Controls systemd units (services, timers, and so on) on remote hosts.\noptions:\n    name:\n        description:\n            - Name of the unit. This parameter takes the name of exactly one unit to work with.\n            - When no extension is given, it is implied to a C(.service) as systemd.\n            - When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).\n        type: str\n        aliases: [ service, unit ]\n    state:\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              C(restarted) will always bounce the unit. C(reloaded) will always reload.\n        type: str\n        choices: [ reloaded, restarted, started, stopped ]\n    enabled:\n        description:\n            - Whether the unit should start on boot. B(At least one of state and enabled are required.)\n        type: bool\n    force:\n        description:\n            - Whether to override existing symlinks.\n        type: bool\n        version_added: 2.6\n    masked:\n        description:\n            - Whether the unit should be masked or not, a masked unit is impossible to start.\n        type: bool\n    daemon_reload:\n        description:\n            - Run daemon-reload before doing any other operations, to make sure systemd has read any changes.\n            - When set to C(true), runs daemon-reload even if the module does not start or stop anything.\n        type: bool\n        default: no\n        aliases: [ daemon-reload ]\n    daemon_reexec:\n        description:\n            - Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.\n        type: bool\n        default: no\n        aliases: [ daemon-reexec ]\n        version_added: "2.8"\n    scope:\n        description:\n            - Run systemctl within a given service manager scope, either as the default system scope C(system),\n              the current user\'s scope C(user), or the scope of all users C(global).\n            - "For systemd to work with \'user\', the executing user must have its own instance of dbus started and accessible (systemd requirement)."\n            - "The user dbus process is normally started during normal login, but not during the run of Ansible tasks.\n              Otherwise you will probably get a \'Failed to connect to bus: no such file or directory\' error."\n            - The user must have access, normally given via setting the ``XDG_RUNTIME_DIR`` variable, see example below.\n\n        type: str\n        choices: [ system, user, global ]\n        default: system\n        version_added: "2.7"\n    no_block:\n        description:\n            - Do not synchronously wait for the requested operation to finish.\n              Enqueued job will continue without Ansible blocking on its completion.\n        type: bool\n        default: no\n        version_added: "2.3"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - Since 2.4, one of the following options is required C(state), C(enabled), C(masked), C(daemon_reload), (C(daemon_reexec) since 2.8),\n      and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name).\n    - Before 2.4 you always required C(name).\n    - Globs are not supported in name, i.e ``postgres*.service``.\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - A system managed by systemd.\n'
        str_1 = 'mOA{A>%YFU%ZO'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        bytes_0 = b'M\x8fO:\xab\x8e'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_2 = ansible_vault_encrypted_unicode_2.istitle()
        dict_0 = {str_0: str_0, str_0: str_0}
        var_3 = ansible_vault_encrypted_unicode_2.isascii()
        var_4 = ansible_vault_encrypted_unicode_0.__reversed__()
        var_5 = ansible_vault_encrypted_unicode_2.isalnum()
        bool_1 = True
        var_6 = ansible_vault_encrypted_unicode_1.__ne__(bool_1)
        int_0 = 69
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_7 = ansible_vault_encrypted_unicode_0.isidentifier()
        var_8 = ansible_vault_encrypted_unicode_2.__ge__(ansible_vault_encrypted_unicode_0)
        dict_1 = {}
        set_0 = {str_0}
        str_2 = '\x0b|AQR$l[:'
        var_9 = ansible_vault_encrypted_unicode_2.__add__(str_2)
        var_10 = ansible_vault_encrypted_unicode_3.__ne__(set_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        tuple_1 = None
        ansible_vault_encrypted_unicode_5 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_11 = ansible_vault_encrypted_unicode_4.__eq__(tuple_1)
        float_0 = -741.0
        ansible_vault_encrypted_unicode_6 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_12 = ansible_vault_encrypted_unicode_6.__gt__(float_0)
    except BaseException:
        pass