# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)

def test_case_2():
    str_0 = 'p['
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.isalnum()

def test_case_3():
    bytes_0 = b'DUMMY DATA'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()

def test_case_4():
    str_0 = '\tqr&= n'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.__eq__(str_0)

def test_case_5():
    str_0 = 'this is aHQ tes`'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.__ne__(str_0)

def test_case_6():
    ansible_unicode_0 = module_0.AnsibleUnicode()
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
    var_0 = ansible_vault_encrypted_unicode_0.__reversed__()

def test_case_7():
    list_0 = []
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
    ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)

def test_case_8():
    list_0 = []
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
    var_0 = ansible_vault_encrypted_unicode_0.__unicode__()

def test_case_9():
    list_0 = []
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
    var_0 = ansible_vault_encrypted_unicode_0.__hash__()

def test_case_10():
    ansible_unicode_0 = module_0.AnsibleUnicode()
    set_0 = set()
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
    var_0 = ansible_vault_encrypted_unicode_0.__lt__(ansible_unicode_0)

def test_case_11():
    str_0 = 'v;)\r},kq6SN<&g\thvs'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.expandtabs()

def test_case_12():
    str_0 = 'vault-test'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    str_1 = 'vault-test/'
    ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
    dict_0 = {}
    ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
    var_0 = ansible_vault_encrypted_unicode_1.format_map(ansible_mapping_0)
    str_2 = 'vault-test-2'
    ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_2)
    var_1 = ansible_vault_encrypted_unicode_0 < ansible_vault_encrypted_unicode_2

def test_case_13():
    ansible_mapping_0 = module_0.AnsibleMapping()
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
    var_0 = ansible_vault_encrypted_unicode_0.isascii()

def test_case_14():
    bytes_0 = b'\x99'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_0 = ansible_vault_encrypted_unicode_0.isdecimal()

def test_case_15():
    str_0 = 'aGRvo'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.isdigit()

def test_case_16():
    float_0 = 1.0
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
    var_0 = ansible_vault_encrypted_unicode_0.isidentifier()

def test_case_17():
    float_0 = -1563.414461
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
    var_0 = ansible_vault_encrypted_unicode_0.istitle()

def test_case_18():
    float_0 = -33.07
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
    var_0 = ansible_vault_encrypted_unicode_0.lower()

def test_case_19():
    str_0 = '\nmodule: systemd\nauthor:\n    - Ansible Core Team\nversion_added: "2.2"\nshort_description:  Manage systemd units\ndescription:\n    - Controls systemd units (services, timers, and so on) on remote hosts.\noptions:\n    name:\n        description:\n            - Name of the unit. This parameter takes the name of exactly one unit to work with.\n            - When no extension is given, it is implied to a C(.service) as systemd.\n            - When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).\n        type: str\n        aliases: [ service, unit ]\n    state:\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              C(restarted) will always bounce the unit. C(reloaded) will always reload.\n        type: str\n        choices: [ reloaded, restarted, started, stopped ]\n    enabled:\n        description:\n            - Whether the unit should start on boot. B(At least one of state and enabled are required.)\n        type: bool\n    force:\n        description:\n            - Whether to override existing symlinks.\n        type: bool\n        version_added: 2.6\n    masked:\n        description:\n            - Whether the unit should be masked or not, a masked unit is impossible to start.\n        type: bool\n    daemon_reload:\n        description:\n            - Run daemon-reload before doing any other operations, to make sure systemd has read any changes.\n            - When set to C(true), runs daemon-reload even if the module does not start or stop anything.\n        type: bool\n        default: no\n        aliases: [ daemon-reload ]\n    daemon_reexec:\n        description:\n            - Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.\n        type: bool\n        default: no\n        aliases: [ daemon-reexec ]\n        version_added: "2.8"\n    scope:\n        description:\n            - Run systemctl within a given service manager scope, either as the default system scope C(system),\n              the current user\'s scope C(user), or the scope of all users C(global).\n            - "For systemd to work with \'user\', the executing user must have its own instance of dbus started and accessible (systemd requirement)."\n            - "The user dbus process is normally started during normal login, but not during the run of Ansible tasks.\n              Otherwise you will probably get a \'Failed to connect to bus: no such file or directory\' error."\n            - The user must have access, normally given via setting the ``XDG_RUNTIME_DIR`` variable, see example below.\n\n        type: str\n        choices: [ system, user, global ]\n        default: system\n        version_added: "2.7"\n    no_block:\n        description:\n            - Do not synchronously wait for the requested operation to finish.\n              Enqueued job will continue without Ansible blocking on its completion.\n        type: bool\n        default: no\n        version_added: "2.3"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - Since 2.4, one of the following options is required C(state), C(enabled), C(masked), C(daemon_reload), (C(daemon_reexec) since 2.8),\n      and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name).\n    - Before 2.4 you always required C(name).\n    - Globs are not supported in name, i.e ``postgres*.service``.\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - A system managed by systemd.\n'
    bytes_0 = b'\xc9\x0e\xe0\xe1\xca\x14;'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_0 = ansible_vault_encrypted_unicode_0.istitle()
    dict_0 = {ansible_vault_encrypted_unicode_0: var_0, var_0: bytes_0, str_0: str_0}
    ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
    var_1 = ansible_vault_encrypted_unicode_0.rstrip()
    var_2 = ansible_vault_encrypted_unicode_1.isalnum()
    str_1 = 'is_Identifier'
    ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_1)
    ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
    ansible_sequence_0 = module_0.AnsibleSequence()
    var_3 = ansible_vault_encrypted_unicode_0.__ne__(ansible_base_y_a_m_l_object_0)

def test_case_20():
    float_0 = 0.0001
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
    var_0 = ansible_vault_encrypted_unicode_0.splitlines()

def test_case_21():
    str_0 = '~9dtA72[YSAQgi LAcyB'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.swapcase()

def test_case_22():
    str_0 = '\nmodule: systemd\nauthor:\n    - Ansible Core Team\nversion_added: "2.2"\nshort_description:  Manage systemd units\ndescription:\n    - Controls systemd units (services, timers, and so on) on remote hosts.\noptions:\n    name:\n        description:\n            - Name of the unit. This parameter takes the name of exactly one unit to work with.\n            - When no extension is given, it is implied to a C(.service) as systemd.\n            - When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).\n        type: str\n        aliases: [ service, unit ]\n    state:\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              C(restarted) will always bounce the unit. C(reloaded) will always reload.\n        type: str\n        choices: [ reloaded, restarted, started, stopped ]\n    enabled:\n        description:\n            - Whether the unit should start on boot. B(At least one of state and enabled are required.)\n        type: bool\n    force:\n        description:\n            - Whether to override existing symlinks.\n        type: bool\n        version_added: 2.6\n    masked:\n        description:\n            - Whether the unit should be masked or not, a masked unit is impossible to start.\n        type: bool\n    daemon_reload:\n        description:\n            - Run daemon-reload before doing any other operations, to make sure systemd has read any changes.\n            - When set to C(true), runs daemon-reload even if the module does not start or stop anything.\n        type: bool\n        default: no\n        aliases: [ daemon-reload ]\n    daemon_reexec:\n        description:\n            - Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.\n        type: bool\n        default: no\n        aliases: [ daemon-reexec ]\n        version_added: "2.8"\n    scope:\n        description:\n            - Run systemctl within a given service manager scope, either as the default system scope C(system),\n              the current user\'s scope C(user), or the scope of all users C(global).\n            - "For systemd to work with \'user\', the executing user must have its own instance of dbus started and accessible (systemd requirement)."\n            - "The user dbus process is normally started during normal login, but not during the run of Ansible tasks.\n              Otherwise you will probably get a \'Failed to connect to bus: no such file or directory\' error."\n            - The user must have access, normally given via setting the ``XDG_RUNTIME_DIR`` variable, see example below.\n\n        type: str\n        choices: [ system, user, global ]\n        default: system\n        version_added: "2.7"\n    no_block:\n        description:\n            - Do not synchronously wait for the requested operation to finish.\n              Enqueued job will continue without Ansible blocking on its completion.\n        type: bool\n        default: no\n        version_added: "2.3"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - Since 2.4, one of the following options is required C(state), C(enabled), C(masked), C(daemon_reload), (C(daemon_reexec) since 2.8),\n      and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name).\n    - Before 2.4 you always required C(name).\n    - Globs are not supported in name, i.e ``postgres*.service``.\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - A system managed by systemd.\n'
    bytes_0 = b'\xc9\x0e\xe0\xe1\xca\x14;'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_0 = ansible_vault_encrypted_unicode_0.istitle()
    dict_0 = {ansible_vault_encrypted_unicode_0: var_0, var_0: bytes_0, str_0: str_0}
    ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
    var_1 = ansible_vault_encrypted_unicode_0.rstrip()
    var_2 = ansible_vault_encrypted_unicode_1.isalnum()
    var_3 = ansible_vault_encrypted_unicode_1.upper()
    str_1 = 'is_Identifier'
    ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_1)
    ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
    ansible_sequence_0 = module_0.AnsibleSequence()
    var_4 = ansible_vault_encrypted_unicode_0.__ne__(ansible_base_y_a_m_l_object_0)

def test_case_23():
    float_0 = -1934.447
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
    var_0 = ansible_vault_encrypted_unicode_0.isspace()

def test_case_24():
    dict_0 = {}
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
    var_0 = ansible_vault_encrypted_unicode_0.split()

def test_case_25():
    bytes_0 = b'\xe1)\xa9\x88'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_0 = ansible_vault_encrypted_unicode_0.__repr__()

def test_case_26():
    list_0 = []
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
    var_0 = ansible_vault_encrypted_unicode_0.islower()

def test_case_27():
    str_0 = '8ujP\r+G;K!A#>ZLW1a='
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.isnumeric()

def test_case_28():
    int_0 = 69
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
    var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
    dict_0 = {}
    ansible_mapping_0 = module_0.AnsibleMapping()
    ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
    var_1 = ansible_vault_encrypted_unicode_0.isupper()

def test_case_29():
    str_0 = '\tqr&= '
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.lstrip()

def test_case_30():
    ansible_unicode_0 = module_0.AnsibleUnicode()
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
    var_0 = ansible_vault_encrypted_unicode_0.capitalize()

def test_case_31():
    float_0 = 174.721
    ansible_sequence_0 = module_0.AnsibleSequence()
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
    var_0 = ansible_vault_encrypted_unicode_0.__radd__(float_0)

def test_case_32():
    str_0 = '~U8?"JqX3'
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
    var_0 = ansible_vault_encrypted_unicode_0.title()

def test_case_33():
    set_0 = set()
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
    var_0 = ansible_vault_encrypted_unicode_0.isalpha()

def test_case_34():
    bool_0 = False
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
    var_0 = ansible_vault_encrypted_unicode_0.casefold()

def test_case_35():
    bool_0 = False
    tuple_0 = (bool_0,)
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
    var_0 = ansible_vault_encrypted_unicode_0.lstrip()
    var_1 = ansible_vault_encrypted_unicode_0.lower()
    bytes_0 = b'M\x8fO:\xab\x8e'
    list_0 = [var_0]
    float_0 = 1935.371296
    ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
    var_2 = ansible_vault_encrypted_unicode_1.format(*list_0)
    ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_3 = ansible_vault_encrypted_unicode_2.istitle()
    var_4 = ansible_vault_encrypted_unicode_2.isascii()
    var_5 = ansible_vault_encrypted_unicode_2.isalnum()
    str_0 = ''
    bool_1 = True
    var_6 = ansible_vault_encrypted_unicode_1.__ne__(bool_1)
    int_0 = 69
    ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(int_0)
    var_7 = ansible_vault_encrypted_unicode_0.isidentifier()
    var_8 = ansible_vault_encrypted_unicode_3.__ge__(str_0)
    dict_0 = {}
    str_1 = '\x0b|AQR$l[:'
    var_9 = ansible_vault_encrypted_unicode_2.__add__(str_1)
    ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
    ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
    ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
    var_10 = ansible_vault_encrypted_unicode_1.count(ansible_vault_encrypted_unicode_3)

def test_case_36():
    bool_0 = False
    tuple_0 = (bool_0,)
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
    var_0 = ansible_vault_encrypted_unicode_0.lstrip()
    var_1 = ansible_vault_encrypted_unicode_0.__reversed__()
    str_0 = '\nmodule: systemd\nauthor:\n    - Ansible Core Team\nversion_added: "2.2"\nshort_description:  Manage systemd units\ndescription:\n    - Controls systemd units (services, timers, and so on) on remote hosts.\noptions:\n    name:\n        description:\n            - Name of the unit. This parameter takes the name of exactly one unit to work with.\n            - When no extension is given, it is implied to a C(.service) as systemd.\n            - When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).\n        type: str\n        aliases: [ service, unit ]\n    state:\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              C(restarted) will always bounce the unit. C(reloaded) will always reload.\n        type: str\n        choices: [ reloaded, restarted, started, stopped ]\n    enabled:\n        description:\n            - Whether the unit should start on boot. B(At least one of state and enabled are required.)\n        type: bool\n    force:\n        description:\n            - Whether to override existing symlinks.\n        type: bool\n        version_added: 2.6\n    masked:\n        description:\n            - Whether the unit should be masked or not, a masked unit is impossible to start.\n        type: bool\n    daemon_reload:\n        description:\n            - Run daemon-reload before doing any other operations, to make sure systemd has read any changes.\n            - When set to C(true), runs daemon-reload even if the module does not start or stop anything.\n        type: bool\n        default: no\n        aliases: [ daemon-reload ]\n    daemon_reexec:\n        description:\n            - Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.\n        type: bool\n        default: no\n        aliases: [ daemon-reexec ]\n        version_added: "2.8"\n    scope:\n        description:\n            - Run systemctl within a given service manager scope, either as the default system scope C(system),\n              the current user\'s scope C(user), or the scope of all users C(global).\n            - "For systemd to work with \'user\', the executing user must have its own instance of dbus started and accessible (systemd requirement)."\n            - "The user dbus process is normally started during normal login, but not during the run of Ansible tasks.\n              Otherwise you will probably get a \'Failed to connect to bus: no such file or directory\' error."\n            - The user must have access, normally given via setting the ``XDG_RUNTIME_DIR`` variable, see example below.\n\n        type: str\n        choices: [ system, user, global ]\n        default: system\n        version_added: "2.7"\n    no_block:\n        description:\n            - Do not synchronously wait for the requested operation to finish.\n              Enqueued job will continue without Ansible blocking on its completion.\n        type: bool\n        default: no\n        version_added: "2.3"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - Since 2.4, one of the following options is required C(state), C(enabled), C(masked), C(daemon_reload), (C(daemon_reexec) since 2.8),\n      and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name).\n    - Before 2.4 you always required C(name).\n    - Globs are not supported in name, i.e ``postgres*.service``.\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - A system managed by systemd.\n'
    str_1 = 'mOA{A>%YFU%ZO'
    ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
    bytes_0 = b'M\x8fO:\xab\x8e'
    ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_2 = ansible_vault_encrypted_unicode_2.istitle()
    dict_0 = {str_0: str_0, str_0: str_0}
    var_3 = ansible_vault_encrypted_unicode_2.isascii()
    var_4 = ansible_vault_encrypted_unicode_2.isalnum()
    str_2 = ''
    bool_1 = True
    var_5 = ansible_vault_encrypted_unicode_1.__ne__(bool_1)
    int_0 = 69
    ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(int_0)
    var_6 = ansible_vault_encrypted_unicode_0.isidentifier()
    var_7 = ansible_vault_encrypted_unicode_3.__ge__(str_2)
    dict_1 = {}
    var_8 = ansible_vault_encrypted_unicode_2.__add__(str_2)
    ansible_mapping_0 = module_0.AnsibleMapping()
    ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
    int_1 = -1109
    ansible_vault_encrypted_unicode_5 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
    ansible_vault_encrypted_unicode_6 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
    var_9 = ansible_vault_encrypted_unicode_6.__eq__(int_1)
    var_10 = ansible_vault_encrypted_unicode_3.__contains__(ansible_vault_encrypted_unicode_2)

def test_case_37():
    bool_0 = True
    tuple_0 = (bool_0,)
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
    var_0 = ansible_vault_encrypted_unicode_0.lstrip()
    var_1 = ansible_vault_encrypted_unicode_0.__reversed__()
    str_0 = '\nmodule: systemd\nauthor:\n    - Ansible Core Team\nversion_added: "2.2"\nshort_description:  Manage systemd units\ndescription:\n    - Controls systemd units (services, timers, and so on) on remote hosts.\noptions:\n    name:\n        description:\n            - Name of the unit. This parameter takes the name of exactly one unit to work with.\n            - When no extension is given, it is implied to a C(.service) as systemd.\n            - When using in a chroot environment you always need to specify the name of the unit with the extension. For example, C(crond.service).\n        type: str\n        aliases: [ service, unit ]\n    state:\n        description:\n            - C(started)/C(stopped) are idempotent actions that will not run commands unless necessary.\n              C(restarted) will always bounce the unit. C(reloaded) will always reload.\n        type: str\n        choices: [ reloaded, restarted, started, stopped ]\n    enabled:\n        description:\n            - Whether the unit should start on boot. B(At least one of state and enabled are required.)\n        type: bool\n    force:\n        description:\n            - Whether to override existing symlinks.\n        type: bool\n        version_added: 2.6\n    masked:\n        description:\n            - Whether the unit should be masked or not, a masked unit is impossible to start.\n        type: bool\n    daemon_reload:\n        description:\n            - Run daemon-reload before doing any other operations, to make sure systemd has read any changes.\n            - When set to C(true), runs daemon-reload even if the module does not start or stop anything.\n        type: bool\n        default: no\n        aliases: [ daemon-reload ]\n    daemon_reexec:\n        description:\n            - Run daemon_reexec command before doing any other operations, the systemd manager will serialize the manager state.\n        type: bool\n        default: no\n        aliases: [ daemon-reexec ]\n        version_added: "2.8"\n    scope:\n        description:\n            - Run systemctl within a given service manager scope, either as the default system scope C(system),\n              the current user\'s scope C(user), or the scope of all users C(global).\n            - "For systemd to work with \'user\', the executing user must have its own instance of dbus started and accessible (systemd requirement)."\n            - "The user dbus process is normally started during normal login, but not during the run of Ansible tasks.\n              Otherwise you will probably get a \'Failed to connect to bus: no such file or directory\' error."\n            - The user must have access, normally given via setting the ``XDG_RUNTIME_DIR`` variable, see example below.\n\n        type: str\n        choices: [ system, user, global ]\n        default: system\n        version_added: "2.7"\n    no_block:\n        description:\n            - Do not synchronously wait for the requested operation to finish.\n              Enqueued job will continue without Ansible blocking on its completion.\n        type: bool\n        default: no\n        version_added: "2.3"\nextends_documentation_fragment: action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n    - Since 2.4, one of the following options is required C(state), C(enabled), C(masked), C(daemon_reload), (C(daemon_reexec) since 2.8),\n      and all except C(daemon_reload) and (C(daemon_reexec) since 2.8) also require C(name).\n    - Before 2.4 you always required C(name).\n    - Globs are not supported in name, i.e ``postgres*.service``.\n    - The service names might vary by specific OS/distribution\nrequirements:\n    - A system managed by systemd.\n'
    str_1 = 'mOA{A>%YFU%ZO'
    ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
    bytes_0 = b'M\x8fO:\xab\x8e'
    ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_2 = ansible_vault_encrypted_unicode_2.istitle()
    var_3 = ansible_vault_encrypted_unicode_2.isascii()
    var_4 = ansible_vault_encrypted_unicode_2.isalnum()
    bool_1 = True
    var_5 = ansible_vault_encrypted_unicode_1.__ne__(bool_1)
    var_6 = ansible_vault_encrypted_unicode_0.isidentifier()
    var_7 = ansible_vault_encrypted_unicode_0.__ge__(str_0)
    str_2 = '\x0b|AQR$l[:'
    var_8 = ansible_vault_encrypted_unicode_2.__add__(str_2)
    ansible_mapping_0 = module_0.AnsibleMapping()
    var_9 = ansible_vault_encrypted_unicode_0.__len__()
    ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
    ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
    float_0 = 364.0
    var_10 = ansible_vault_encrypted_unicode_0.__eq__(float_0)
    ansible_vault_encrypted_unicode_5 = module_0.AnsibleVaultEncryptedUnicode(bool_1)
    var_11 = ansible_vault_encrypted_unicode_2.__gt__(ansible_vault_encrypted_unicode_1)

def test_case_38():
    float_0 = 2731.8
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
    bytes_0 = b'\x1c\xe8\x81\xda-('
    ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
    var_0 = ansible_vault_encrypted_unicode_1.__lt__(ansible_vault_encrypted_unicode_0)