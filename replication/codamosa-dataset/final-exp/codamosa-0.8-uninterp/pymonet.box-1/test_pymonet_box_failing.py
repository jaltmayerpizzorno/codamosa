# Automatically generated by Pynguin.
import builtins as module_0
import pymonet.box as module_1

def test_case_0():
    try:
        set_0 = set()
        object_0 = module_0.object()
        box_0 = module_1.Box(object_0)
        var_0 = box_0.map(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1129.1
        box_0 = module_1.Box(float_0)
        str_0 = box_0.__str__()
        callable_0 = None
        var_0 = box_0.bind(callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        complex_0 = None
        float_0 = -2199.8408
        tuple_0 = (complex_0, float_0)
        str_0 = 'x\tXvG`'
        str_1 = '\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    '
        dict_0 = {str_0: str_0, str_1: str_1}
        box_0 = module_1.Box(dict_0)
        var_0 = box_0.ap(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 604
        box_0 = module_1.Box(int_0)
        var_0 = box_0.to_maybe()
        int_1 = 2229
        str_0 = '`Zk(uZV#)\rWl|5l`dn:x'
        box_1 = module_1.Box(str_0)
        var_1 = box_1.map(int_1)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -522
        box_0 = module_1.Box(int_0)
        var_0 = box_0.to_validation()
        var_1 = box_0.to_either()
        object_0 = None
        var_2 = box_0.ap(object_0)
    except BaseException:
        pass

def test_case_5():
    try:
        object_0 = module_0.object()
        bool_0 = False
        box_0 = module_1.Box(bool_0)
        bool_1 = box_0.__eq__(object_0)
        var_0 = box_0.to_validation()
        var_1 = box_0.to_maybe()
        var_2 = box_0.to_try()
        str_0 = box_0.__str__()
        str_1 = box_0.__str__()
        str_2 = box_0.__str__()
        var_3 = box_0.to_lazy()
        box_1 = module_1.Box(bool_0)
        bool_2 = box_0.__eq__(object_0)
        var_4 = box_1.to_try()
        tuple_0 = (bool_0,)
        var_5 = box_1.ap(tuple_0)
    except BaseException:
        pass