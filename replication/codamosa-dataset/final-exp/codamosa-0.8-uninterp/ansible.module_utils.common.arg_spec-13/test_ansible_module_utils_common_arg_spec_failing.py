# Automatically generated by Pynguin.
import ansible.module_utils.common.arg_spec as module_0

def test_case_0():
    try:
        str_0 = 'aliases'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = {str_0: str_0, str_0: str_0, str_0: str_1}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_2, str_0, str_0, str_1, str_0, str_0)
        var_0 = argument_spec_validator_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0)
        complex_0 = None
        var_0 = argument_spec_validator_0.validate(complex_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "The conditional check '%s' failed. The error was: %s"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_1)
        list_0 = [argument_spec_validator_0, dict_1]
        var_0 = argument_spec_validator_0.validate(dict_1, *list_0)
        var_1 = argument_spec_validator_0.validate(dict_0)
        validation_result_0 = module_0.ValidationResult(argument_spec_validator_0)
        bytes_0 = b'\x1dv\xa7\xfax\xf4'
        validation_result_1 = module_0.ValidationResult(bytes_0)
        bool_0 = True
        tuple_0 = (bool_0,)
        int_0 = 117
        argument_spec_validator_1 = None
        set_0 = None
        dict_2 = {int_0: argument_spec_validator_1, validation_result_0: set_0, tuple_0: dict_0}
        var_2 = argument_spec_validator_0.validate(dict_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'al9iases'
        str_1 = 'options'
        str_2 = {str_1: str_0, str_1: str_1}
        str_3 = {str_1: str_2, str_0: str_2, str_1: str_2}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_3, str_1, str_0, str_2, str_0, str_0)
        var_0 = argument_spec_validator_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'aliases'
        str_1 = {str_0: str_0}
        str_2 = 'options'
        str_3 = {str_2: str_1, str_2: str_2}
        str_4 = {str_2: str_1, str_0: str_1, str_2: str_3}
        int_0 = -1079
        bytes_0 = b'\xe0:\xd4\xea\xa2\x80\xd5^\xd5\x18\xc1\x89l.'
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_4, int_0, bytes_0, bytes_0)
        dict_0 = {argument_spec_validator_0: int_0}
        var_0 = argument_spec_validator_0.validate(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'aliases'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = {str_0: str_1, str_0: str_0, str_0: str_1}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_2, str_1, str_2, str_1, str_0, str_1)
        var_0 = argument_spec_validator_0.validate(str_1)
    except BaseException:
        pass