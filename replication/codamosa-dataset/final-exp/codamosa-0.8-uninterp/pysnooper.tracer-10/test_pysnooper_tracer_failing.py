# Automatically generated by Pynguin.
import pysnooper.tracer as module_0

def test_case_0():
    try:
        list_0 = []
        var_0 = module_0.get_local_reprs(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x03@\x1ae8\x88\xaa\x94es\x97%\r\x9c'
        var_0 = module_0.get_path_and_source_from_frame(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        unavailable_source_0 = module_0.UnavailableSource()
        str_0 = 'l~@YmZN>C&'
        set_0 = {str_0}
        var_0 = unavailable_source_0.__getitem__(set_0)
        var_1 = module_0.get_write_function(unavailable_source_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'I?'
        tracer_0 = module_0.Tracer(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 0
        list_0 = [int_0, int_0, int_0, int_0]
        tracer_0 = module_0.Tracer(int_0, list_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        file_writer_0 = None
        tracer_1 = module_0.Tracer(tracer_0, file_writer_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__call__(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = None
        set_0 = None
        tracer_0 = module_0.Tracer(set_0)
        list_0 = None
        str_0 = None
        str_1 = ';x%O_^yP%d'
        dict_0 = {str_0: int_0, str_1: int_0}
        var_0 = tracer_0.write(dict_0)
        var_1 = tracer_0.__enter__()
        bytes_0 = b'\xcc\xb2\x00\xbb\xb9\x8e\x7f8\x9f\xf2\xe6'
        var_2 = module_0.get_write_function(bytes_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'P,l\rmS~N%sN'
        tracer_0 = module_0.Tracer(str_0)
        bool_0 = True
        file_writer_0 = module_0.FileWriter(bool_0, bool_0)
        var_0 = file_writer_0.write(tracer_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'h3'
        list_0 = [str_0, str_0, str_0]
        bytes_0 = b'2\xca'
        tracer_0 = module_0.Tracer(str_0, list_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        var_1 = tracer_0.__enter__()
        var_2 = tracer_0.__call__(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__exit__(tracer_0, tracer_0, tracer_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tracer_0 = module_0.Tracer()
        unavailable_source_0 = module_0.UnavailableSource()
        file_writer_0 = module_0.FileWriter(unavailable_source_0, unavailable_source_0)
        var_0 = tracer_0.__enter__()
        str_0 = '04\x0b6jtMau&.aj'
        int_0 = 431
        var_1 = module_0.get_write_function(str_0, int_0)
        list_0 = None
        var_2 = tracer_0.__call__(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        float_0 = 2416.8
        file_writer_0 = module_0.FileWriter(bool_0, float_0)
        str_0 = 'FW$d$wU'
        tracer_0 = module_0.Tracer(str_0)
        var_0 = tracer_0.write(file_writer_0)
        bool_1 = True
        tracer_1 = module_0.Tracer()
        var_1 = tracer_1.__call__(bool_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '0\x0b=Ia>+/B}&x'
        tracer_0 = module_0.Tracer(str_0)
        bool_0 = False
        file_writer_0 = module_0.FileWriter(bool_0, bool_0)
        var_0 = file_writer_0.write(tracer_0)
    except BaseException:
        pass

def test_case_15():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        str_0 = '0Y$XmK'
        unavailable_source_0 = module_0.UnavailableSource()
        file_writer_0 = module_0.FileWriter(str_0, unavailable_source_0)
        bool_0 = True
        float_0 = -283.0
        var_1 = tracer_0.__exit__(file_writer_0, bool_0, float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 1860.83
        float_1 = 3166.241
        file_writer_0 = module_0.FileWriter(float_0, float_1)
        str_0 = 'x'
        list_0 = []
        bool_0 = False
        str_1 = '1#A/+&U'
        tracer_0 = module_0.Tracer(str_0, list_0, list_0, bool_0, str_1)
    except BaseException:
        pass