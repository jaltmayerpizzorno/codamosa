# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        bytes_0 = b';'
        var_0 = module_0.check_type_dict(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{4"[,=.{Tg/4Y5,i]'
        tuple_0 = ()
        bool_0 = True
        var_0 = module_0.check_required_one_of(tuple_0, bool_0, tuple_0)
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'fo.bar()'
        var_0 = module_0.safe_eval(str_0)
        set_0 = {str_0, str_0, str_0, var_0}
        list_0 = None
        var_1 = module_0.check_required_one_of(list_0, list_0, list_0)
        str_1 = '^:"^-T@#r"C\\fP\rNiE'
        var_2 = module_0.check_required_together(set_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'w8byy#^9y"jY?W(FDdG'
        bool_0 = True
        var_0 = module_0.check_required_arguments(str_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xe4'
        list_0 = [bytes_0]
        var_0 = module_0.check_required_if(list_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/ByzztYg|0v}'
        var_0 = module_0.check_type_str(str_0)
        str_1 = 'w\\abY|6"64l$<!!I'
        var_1 = module_0.check_type_int(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'u\x0cmQ!V-8\ni6(ZJ+\t|e(b'
        var_0 = module_0.check_type_list(str_0)
        str_1 = '\\d/qmjq4\tf}8'
        var_1 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = None
        var_0 = module_0.check_type_list(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 977.452
        var_0 = module_0.check_type_bool(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xf9\xe2R\xb2\x88Gp\x1b\xf9\xff@\xad\xb6\xed#'
        var_0 = module_0.check_type_bool(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'D\x0c\xde\xf0$\x88\x15\x9f'
        var_0 = module_0.check_type_int(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        set_0 = set()
        var_0 = module_0.check_type_float(set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'o\xe4\xdc\xd3\xc8\x98=v'
        var_0 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        var_0 = module_0.check_type_bytes(set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '^'
        var_0 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 331
        var_0 = module_0.check_type_jsonarg(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -388
        var_0 = module_0.check_type_list(int_0)
        str_0 = 'ed}H'
        var_1 = module_0.check_type_jsonarg(str_0)
        str_1 = '\\d/qmjq4\tf}8'
        var_2 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = [str_0, str_1]
        str_3 = [str_2]
        int_0 = 1
        var_0 = dict(a=int_0, b=int_0)
        var_1 = module_0.check_mutually_exclusive(str_3, var_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '_\t?AW~Ym`!-pM!%'
        var_0 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '{4"[,=.{Tg/4Y5,i]'
        str_1 = '\\U(s~_yQg9:-r2/`u>,t'
        var_0 = module_0.check_required_one_of(str_1, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = None
        list_0 = [int_0, int_0, int_0, int_0]
        bytes_0 = None
        var_0 = module_0.check_type_str(list_0, bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 's%%?6'
        bool_0 = False
        var_0 = module_0.check_required_by(str_0, bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'\xe2'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.check_type_path(bytes_0)
        var_1 = module_0.check_type_jsonarg(dict_0)
        var_2 = module_0.check_type_dict(bytes_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '\\d/qmjq4\tf}8'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = -521.98088
        var_0 = module_0.check_type_float(float_0)
        bytes_0 = b'\x1e\xde\xc0\xbd\x14\x1e\x04\xfa\xa4K\x95Q\xb9\x1d'
        dict_0 = {bytes_0: bytes_0}
        bool_0 = True
        tuple_0 = (dict_0, bool_0)
        var_1 = module_0.check_mutually_exclusive(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '{4"[,!G=.{Tg/4Y5,iP]'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = b'\t\xceZ\x13'
        list_0 = [bytes_0, bytes_0]
        var_0 = module_0.check_required_if(list_0, list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'd.(T\t+"9W$hqO"'
        float_0 = None
        list_0 = [str_0, float_0, str_0]
        dict_0 = {str_0: str_0, float_0: str_0, str_0: list_0}
        int_0 = -4070
        var_0 = module_0.check_required_arguments(dict_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '9[%~fP>=y ?6'
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '3@M\r0M2L_#_:?'
        set_0 = None
        tuple_0 = None
        float_0 = 3412.16214
        var_0 = module_0.safe_eval(set_0, tuple_0, float_0)
        var_1 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bytes_0 = b''
        list_0 = [bytes_0]
        var_0 = module_0.check_missing_parameters(bytes_0, list_0)
    except BaseException:
        pass

def test_case_31():
    try:
        float_0 = -1300.8831
        dict_0 = {}
        list_0 = [float_0, float_0]
        var_0 = module_0.check_missing_parameters(dict_0, list_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'z'
        str_1 = 'c'
        str_2 = [str_0, str_1]
        str_3 = {str_0: str_0}
        var_0 = module_0.check_missing_parameters(str_3, str_2)
    except BaseException:
        pass

def test_case_33():
    try:
        dict_0 = None
        bytes_0 = b'\xcc\x94%\xb7%r\x89\xda\x98\xfeR\xcau\xed\x04'
        var_0 = module_0.check_required_by(dict_0, bytes_0)
        str_0 = "LK3Ty' |F\x0cO~/i"
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        float_0 = None
        int_0 = 2697
        var_0 = module_0.check_required_together(float_0, int_0)
        str_0 = 'K)66wOqXeR\x0cqP'
        set_0 = set()
        var_1 = module_0.check_required_one_of(str_0, set_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'import foo'
        var_0 = module_0.safe_eval(str_0)
        str_1 = 'P^'
        list_0 = []
        set_0 = {str_0, str_1, var_0}
        var_1 = module_0.check_required_one_of(str_1, list_0, set_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '{4"[,!G=.{Tg45,iP]'
        set_0 = None
        float_0 = 1736.0
        var_0 = module_0.check_mutually_exclusive(set_0, float_0)
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = -11
        str_0 = 'k$.1/"x#4qR27\x0bgE}v[5'
        dict_0 = {int_0: str_0}
        var_0 = module_0.check_required_by(dict_0, dict_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = '{4"[,=.{Tg/4Y5,i]'
        float_0 = None
        str_1 = '\n        Iterate through all plugins of this type\n\n        A plugin loader is initialized with a specific type.  This function is an iterator returning\n        all of the plugins of that type to the caller.\n\n        :kwarg path_only: If this is set to True, then we return the paths to where the plugins reside\n            instead of an instance of the plugin.  This conflicts with class_only and both should\n            not be set.\n        :kwarg class_only: If this is set to True then we return the python class which implements\n            a plugin rather than an instance of the plugin.  This conflicts with path_only and both\n            should not be set.\n        :kwarg _dedupe: By default, we only return one plugin per plugin name.  Deduplication happens\n            in the same way as the :meth:`get` and :meth:`find_plugin` methods resolve which plugin\n            should take precedence.  If this is set to False, then we return all of the plugins\n            found, including those with duplicate names.  In the case of duplicates, the order in\n            which they are returned is the one that would take precedence first, followed by the\n            others  in decreasing precedence order.  This should only be used by subclasses which\n            want to manage their own deduplication of the plugins.\n        :*args: Any extra arguments are passed to each plugin when it is instantiated.\n        :**kwargs: Any extra keyword arguments are passed to each plugin when it is instantiated.\n        '
        set_0 = {str_1, str_1, str_0}
        var_0 = module_0.check_required_arguments(float_0, str_1, set_0)
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, str_0, tuple_0]
        var_1 = module_0.check_type_dict(list_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 15
        bool_0 = True
        str_0 = 'k$.1/"x#4qR27\x0bgE}v[5'
        dict_0 = {}
        var_0 = module_0.check_type_dict(dict_0)
        dict_1 = {int_0: str_0, int_0: bool_0}
        var_1 = module_0.check_required_by(dict_1, dict_1)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = -404
        var_0 = module_0.check_type_list(int_0)
        str_0 = 'ed}H'
        var_1 = module_0.check_type_jsonarg(var_0)
        str_1 = None
        bytes_0 = b'\x80\xd2\xf6\xd3'
        var_2 = module_0.check_required_by(str_1, bytes_0)
        dict_0 = {str_0: var_2}
        var_3 = module_0.check_required_if(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = '{b_'
        list_0 = [str_0, str_0]
        dict_0 = {}
        var_0 = module_0.check_mutually_exclusive(list_0, dict_0)
        float_0 = -972.63
        tuple_0 = (str_0, float_0)
        dict_1 = {float_0: float_0}
        var_1 = module_0.check_required_if(tuple_0, dict_1)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '~4@[,!G=6{Tz45>,iP]'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = '} EK=}o!b\x0c[I(\\+RZ'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = '^o;'
        str_1 = 'b_r'
        str_2 = [str_1, str_1]
        str_3 = [str_0, str_1, str_2]
        str_4 = [str_3]
        str_5 = {str_0: str_1}
        var_0 = module_0.check_required_if(str_4, str_5, str_1)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'state'
        str_1 = 'name'
        str_2 = 'present'
        str_3 = 'test.txt'
        str_4 = {str_0: str_2, str_1: str_3, str_2: str_1}
        str_5 = (str_3,)
        bool_0 = True
        var_0 = [str_0, str_2, str_5, bool_0]
        str_6 = (str_1,)
        str_7 = [str_1, str_3, str_6]
        str_8 = 'absent'
        str_9 = (str_0,)
        str_10 = [str_0, str_8, str_9]
        str_11 = [str_8, str_8, str_10]
        var_1 = [var_0, str_7, str_10, str_11]
        var_2 = module_0.check_required_if(var_1, str_4)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'nWm'
        str_1 = '!e^ctO7]{}~QWJP D'
        str_2 = 'test.txt'
        str_3 = {str_0: str_1, str_0: str_2, str_1: str_0}
        bool_0 = False
        var_0 = [str_2, str_0, str_3, bool_0]
        str_4 = [str_0, str_2, str_0]
        set_0 = set()
        int_0 = 264
        var_1 = module_0.safe_eval(set_0, int_0)
        str_5 = '56'
        str_6 = [str_0, str_5, str_0]
        str_7 = [str_1, str_5, str_0]
        var_2 = [var_0, str_4, str_6, str_7]
        str_8 = {str_0: str_2}
        var_3 = module_0.check_required_if(var_2, str_8)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'fo.bar(C'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = '2(?`r2{*\r]'
        var_0 = module_0.check_required_together(dict_0, str_1)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = 'Z'
        str_1 = 'name'
        str_2 = 'content'
        str_3 = 'present'
        str_4 = 'test.txt'
        str_5 = {str_0: str_3, str_1: str_4, str_2: str_1}
        bool_0 = True
        var_0 = [str_0, str_3, str_5, bool_0]
        str_6 = (str_2,)
        str_7 = [str_1, str_4, str_6]
        set_0 = set()
        int_0 = 264
        var_1 = module_0.safe_eval(set_0, int_0)
        str_8 = 'absent'
        str_9 = (str_2,)
        str_10 = [str_0, str_8, str_9]
        str_11 = (str_1,)
        str_12 = [str_2, str_8, str_11]
        var_2 = [var_0, str_7, str_10, str_12]
        str_13 = {str_0: str_3, str_1: str_4}
        var_3 = module_0.check_required_if(var_2, str_13)
    except BaseException:
        pass

def test_case_49():
    try:
        bool_0 = True
        var_0 = dict(required=bool_0)
        bool_1 = True
        var_1 = dict(required=bool_1)
        var_2 = dict(a=var_0, b=var_1)
        var_3 = module_0.check_required_arguments(var_2, var_1)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'aaa'
        str_3 = 'bbb'
        str_4 = {str_0: str_2, str_1: str_3}
        str_5 = [str_1]
        str_6 = {str_0: str_5}
        var_0 = module_0.check_required_by(str_6, str_4)
        var_1 = None
        var_2 = {str_0: str_2, str_1: var_1}
        str_7 = [str_1]
        str_8 = {str_0: str_7}
        var_3 = module_0.check_required_by(str_8, var_2)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        var_0 = None
        var_1 = dict(a=str_0, b=str_1, c=str_2, d=var_0)
        var_2 = None
        var_3 = None
        var_4 = module_0.check_required_by(var_2, var_1, var_3)
        str_3 = 'd'
        str_4 = [str_0, str_3]
        str_5 = [str_2]
        var_5 = dict(b=str_4, d=str_5)
        var_6 = None
        var_7 = module_0.check_required_by(var_5, var_1, var_6)
    except BaseException:
        pass