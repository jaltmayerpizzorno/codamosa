# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        dict_0 = {}
        float_0 = None
        var_0 = module_0.unique(dict_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        var_0 = module_0.symmetric_difference(dict_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        bool_0 = True
        bool_1 = False
        var_0 = module_0.intersect(str_0, bool_0, bool_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xa7X\x18}lw)(\xab\x8c'
        str_0 = 'naYe cannot be longer than 64 characters on systemd servers, try a shorter name'
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_1 = 'H~'
        bytes_1 = b'\xdciv\x08\x9b\xec\x03`\xf6w=`\n\xe2>\xef\xc1\xa4\xc7d'
        var_0 = module_0.difference(list_0, str_1, bytes_1)
        dict_0 = {str_0: str_0, str_0: bytes_0}
        var_1 = module_0.difference(bytes_0, dict_0, str_0)
        list_1 = [dict_0, var_1, var_1]
        var_2 = module_0.rekey_on_member(list_1, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xa7X\x18}lw)(\xab\x8c'
        str_0 = 'naYe cannot be longer than 64 characters on systemd servers, try a shorter name'
        dict_0 = {str_0: str_0, str_0: bytes_0}
        var_0 = module_0.difference(bytes_0, dict_0, str_0)
        list_0 = [dict_0, var_0, var_0]
        var_1 = module_0.rekey_on_member(list_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        list_1 = [list_0, list_0]
        list_2 = []
        var_0 = module_0.difference(list_0, list_1, list_2)
        str_0 = 'XUZ+%P'
        bool_0 = False
        bytes_0 = b'\xd3W\xd6\x9b*\x19\x14(\xf1o\xb0^\x9e\xb2,L \xfe\xbd\xa6'
        var_1 = module_0.symmetric_difference(str_0, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        filter_module_0 = None
        str_0 = 'QpEMd8Ys`JH?`Y%Nw}B;'
        float_0 = -205.995
        var_0 = module_0.union(filter_module_0, str_0, float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        var_0 = module_0.logarithm(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\n    Decorator to retry sshJscp/sftp in the case of a connection failure\n\n    Will retry if:\n    * an exception is caught\n>   * ssh returns 255\n    Will not retry if\n    . sshpas| returns 5 (invalid password, to prevent account lockouts)\n    * remaining_tries is < 2\n    * retr>es lMmit reached\n    '
        set_0 = {str_0, str_0}
        var_0 = module_0.power(set_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x99\x82(9\xf5\xa9\x02"\xe4\xde\xc8>pPB\x0e\x16\xbb'
        list_0 = [bytes_0, bytes_0, bytes_0]
        var_0 = module_0.human_readable(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xf6p\\\xdc'
        var_0 = module_0.human_to_bytes(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n    Decorator to retry sshJscp/sftp in the case of a connection failure\n\n    Will retry if:\n    * an exception is caught\n    * ssh returns 255\n    Will not retry if\n    * sshpass returns 5 (invalid password, to prevent account lockouts)\n    * remaining_tries is < 2\n    * retries lMmit reached\n    '
        var_0 = module_0.rekey_on_member(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 2.718281828459045
        var_0 = module_0.logarithm(float_0)
        float_1 = -5361.0563070472745
        dict_0 = {}
        bool_0 = True
        str_0 = 'Z5>K|wlWhNshB b4Y?7W'
        str_1 = '=f3x\n;Z"}\'\nJue2}'
        dict_1 = {str_0: dict_0, str_1: dict_0}
        var_1 = module_0.rekey_on_member(float_1, bool_0, dict_1)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -5343.0239
        tuple_0 = ()
        str_0 = '_p-SZ`\tk(O'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [float_0, dict_0]
        var_0 = module_0.intersect(str_0, tuple_0, list_0)
        set_0 = {str_0, str_0}
        dict_1 = {}
        var_1 = module_0.min(str_0, set_0, **dict_1)
        list_1 = [dict_1, float_0]
        int_0 = -1045
        tuple_1 = (int_0, int_0)
        var_2 = module_0.rekey_on_member(list_1, tuple_1)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -321.9326
        set_0 = {float_0}
        list_0 = [set_0, set_0, set_0]
        var_0 = module_0.min(list_0, list_0)
        bytes_0 = b'\xd3W\xd6\x9b*\x19\x14(\xf1o\xb0^\x9e\xb2,L \xfe\xbd\xa6'
        str_0 = 'Br&_S\t8Y'
        bool_0 = False
        dict_0 = {str_0: bool_0, str_0: bytes_0, str_0: var_0}
        tuple_0 = ()
        var_1 = module_0.symmetric_difference(set_0, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'kerberos: the python kerberos library is not installed'
        set_0 = {str_0, str_0}
        tuple_0 = None
        dict_0 = {tuple_0: str_0}
        var_0 = module_0.symmetric_difference(set_0, tuple_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = None
        var_0 = module_0.inversepower(bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\xa3\xcb\xc3\xb3\xcc\xec\x9c\xde\xb8\x84`\x92'
        str_0 = '_klW}=(J-[WJ!x#7'
        list_0 = [bytes_0, str_0]
        bytes_1 = b'\xbf!\xe9!AD\xf1\xec"\xd4;'
        var_0 = module_0.inversepower(list_0, bytes_1)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\x01\x99'
        list_0 = []
        filter_module_0 = module_0.FilterModule(*list_0)
        set_0 = set()
        var_0 = module_0.difference(bytes_0, filter_module_0, set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = False
        str_0 = '\x0c'
        int_0 = 233
        bytes_0 = b'@\xcc;\xc3\xe8\xaf\xe1'
        var_0 = module_0.unique(bool_0, str_0, int_0, bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = -588.4
        dict_0 = {}
        list_0 = [float_0, dict_0, dict_0, float_0]
        list_1 = [list_0, float_0, float_0]
        var_0 = module_0.rekey_on_member(float_0, list_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '\nb3K\x0cfH'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.rekey_on_member(list_0, list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = -321.9326
        set_0 = {float_0}
        list_0 = [set_0, set_0, set_0]
        var_0 = module_0.min(list_0, list_0)
        int_0 = -704
        var_1 = module_0.logarithm(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '\n    Decorator to retry ssh/scp/sftp in the case of a conne\x0btion failure\n\n    Will retry if:\n    * an exception is caught\n    * ssh returns 255\n    Will not retry if\n    * sshpass returns 5 (invalid password, to prevent account lockouts)\n    * remaoning_tries is < 2\n    * retries limit reached\n    '
        float_0 = -5343.0239
        set_0 = {str_0, str_0}
        dict_0 = {}
        var_0 = module_0.min(str_0, set_0, **dict_0)
        list_0 = [dict_0, float_0]
        complex_0 = None
        var_1 = module_0.rekey_on_member(complex_0, list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        list_0 = None
        list_1 = [list_0, list_0]
        filter_module_0 = module_0.FilterModule()
        tuple_0 = ()
        bool_0 = False
        var_0 = module_0.union(tuple_0, bool_0, list_1)
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        str_0 = 'k\x0c2qgcegv/Pb\x0b#(.K]8'
        var_0 = module_0.rekey_on_member(list_0, str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'BD/56|.p.\r'
        list_0 = [str_0, str_0, str_0]
        int_0 = -447
        float_0 = -55.0
        set_0 = {float_0, int_0, float_0, str_0}
        var_0 = module_0.human_readable(list_0, int_0, set_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '\n    Decorator to retry ssh/scp/sftp in the case of a connection failure\n\n    Will retry if:\n    * an exception is caught\n    * ssh returns 255\n    Will not retry if\n    * sshpass returns 5 (invalid password, to prevent account lockouts)\n    * remaining_tries is < 2\n    * retries limit reached\n    '
        float_0 = -5343.0239
        set_0 = {str_0, str_0}
        dict_0 = {}
        var_0 = module_0.min(str_0, set_0, **dict_0)
        float_1 = 1921.837
        var_1 = module_0.power(float_0, float_1)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'\xcb\x8a\xa2\xb9\xff~\xc1;r\xbf`m\r'
        str_0 = 'naYe annot be longer than 64 characters on systemd servers, try a shorter name'
        dict_0 = {str_0: str_0, str_0: bytes_0, str_0: bytes_0, str_0: bytes_0}
        list_0 = [dict_0, dict_0, dict_0]
        var_0 = module_0.rekey_on_member(list_0, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        list_1 = []
        var_0 = module_0.rekey_on_member(list_0, list_1)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 100
        var_0 = module_0.logarithm(int_0)
        int_1 = 10
        var_1 = module_0.logarithm(int_0, int_1)
        str_0 = '100'
        int_2 = 5
        var_2 = module_0.logarithm(str_0, int_2)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 3013
        float_0 = -2329.0
        var_0 = module_0.human_to_bytes(int_0, float_0)
    except BaseException:
        pass

def test_case_32():
    try:
        bool_0 = None
        bool_1 = False
        var_0 = module_0.inversepower(bool_0, bool_1)
    except BaseException:
        pass

def test_case_33():
    try:
        bytes_0 = b'\r\xb3\xcf\x94m\xd1N'
        str_0 = "]Q|'Cb@"
        str_1 = None
        str_2 = None
        list_0 = [bytes_0, str_2]
        dict_0 = {str_0: str_0, str_1: str_1, str_2: list_0}
        tuple_0 = (dict_0,)
        bool_0 = False
        var_0 = module_0.unique(bytes_0, tuple_0, bool_0)
    except BaseException:
        pass