# Automatically generated by Pynguin.
import argparse as module_0
import ansible.cli.arguments.option_helpers as module_1

def test_case_0():
    pass

def test_case_1():
    namespace_0 = module_0.Namespace()
    str_0 = 'foo'
    var_0 = []
    var_1 = module_1.ensure_value(namespace_0, str_0, var_0)
    var_2 = getattr(namespace_0, str_0)
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = [int_0, int_1, int_2]
    var_3 = module_1.ensure_value(namespace_0, str_0, int_3)
    var_4 = getattr(namespace_0, str_0)

def test_case_2():
    var_0 = module_1.unfrack_path()

def test_case_3():
    bytes_0 = b'\xf2\x94\xc4TS"\x90\x8b0K'
    tuple_0 = (bytes_0,)
    var_0 = module_1.maybe_unfrack_path(tuple_0)

def test_case_4():
    var_0 = module_1.version()

def test_case_5():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_check_options(argument_parser_0)
    str_0 = '--check'
    str_1 = [str_0]
    var_1 = argument_parser_0.parse_args(str_1)
    argument_parser_1 = module_0.ArgumentParser()
    var_2 = module_1.add_check_options(argument_parser_1)
    str_2 = '--syntax-check'
    str_3 = [str_2]
    var_3 = argument_parser_1.parse_args(str_3)
    argument_parser_2 = module_0.ArgumentParser()
    var_4 = module_1.add_check_options(argument_parser_2)
    str_4 = '--diff'
    str_5 = [str_4]
    var_5 = argument_parser_2.parse_args(str_5)

def test_case_6():
    str_0 = 'ansible-doc'
    argument_parser_0 = module_0.ArgumentParser(str_0)
    var_0 = module_1.add_connect_options(argument_parser_0)
    var_1 = module_1.unfrack_path()
    set_0 = {str_0}
    var_2 = module_1.unfrack_path(set_0)

def test_case_7():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_fork_options(argument_parser_0)
    str_0 = '-f'
    str_1 = [str_0, str_0]
    var_1 = argument_parser_0.parse_args(str_1)

def test_case_8():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_inventory_options(argument_parser_0)

def test_case_9():
    str_0 = 'add_meta_options'
    argument_parser_0 = module_0.ArgumentParser(str_0)
    var_0 = module_1.add_meta_options(argument_parser_0)
    str_1 = '--force-handlers'
    str_2 = '--flush-cache'
    str_3 = [str_1, str_2]
    var_1 = argument_parser_0.parse_args(str_3)

def test_case_10():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_output_options(argument_parser_0)

def test_case_11():
    str_0 = 'test_add_vault_options'
    argument_parser_0 = module_0.ArgumentParser(str_0)
    var_0 = module_1.add_vault_options(argument_parser_0)
    str_1 = '--ask-vault-password'
    var_1 = argument_parser_0.parse_args(str_1)

def test_case_12():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_subset_options(argument_parser_0)
    var_1 = argument_parser_0.parse_args()
    str_0 = '-t'
    str_1 = 'foo'
    str_2 = [str_0, str_1]
    var_2 = argument_parser_0.parse_args(str_2)
    str_3 = 'bar'
    str_4 = [str_3, str_1, str_3, str_3]
    var_3 = argument_parser_0.parse_args(str_4)

def test_case_13():
    str_0 = 'test_add_vault_options'
    argument_parser_0 = module_0.ArgumentParser(str_0)
    var_0 = module_1.add_vault_options(argument_parser_0)
    str_1 = '--vault-id'
    str_2 = 'testid'
    str_3 = '--ask-vault-password'
    str_4 = '--vault-password-file'
    str_5 = 'testfile'
    str_6 = [str_1, str_2, str_3, str_4, str_5]
    var_1 = argument_parser_0.parse_args(str_6)

def test_case_14():
    argument_parser_0 = module_0.ArgumentParser()
    str_0 = '--foo'
    var_0 = module_1.add_async_options(argument_parser_0)
    var_1 = []
    var_2 = argument_parser_0.parse_args(var_1)
    str_1 = 'baz'
    str_2 = [str_0, str_1]
    var_3 = argument_parser_0.parse_args(str_2)
    str_3 = 'qux'
    str_4 = [str_0, str_1, str_0, str_3]
    var_4 = argument_parser_0.parse_args(str_4)

def test_case_15():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_runas_options(argument_parser_0)
    var_1 = argument_parser_0.parse_args()

def test_case_16():
    var_0 = module_1.version()
    int_0 = 9000
    list_0 = []
    prepend_list_action_0 = None
    bytes_0 = b'p\xa4\xe0\xd0'
    set_0 = {prepend_list_action_0, bytes_0, prepend_list_action_0, var_0, int_0}
    bool_0 = None
    unrecognized_argument_0 = None
    bool_1 = None
    tuple_0 = (bytes_0, set_0, bool_1)
    str_0 = 'Ib9/_\\z*&'
    argument_parser_0 = module_0.ArgumentParser(unrecognized_argument_0, tuple_0, str_0)
    var_1 = module_1.add_runtask_options(argument_parser_0)
    ansible_version_0 = module_1.AnsibleVersion(list_0, prepend_list_action_0, bytes_0, prepend_list_action_0, set_0, int_0, bool_0)
    tuple_1 = None
    str_1 = None
    bytes_1 = b'\xab\x1e#\xe8\x9f\xc3A\x0b\x8f\xec\x01\xb0\xd0'
    str_2 = '\\\\[0-9]{3@}'
    list_1 = [tuple_1, str_1]
    set_1 = {bytes_1, var_0, int_0}
    ansible_version_1 = module_1.AnsibleVersion(str_2, list_1, set_1)
    bool_2 = True
    ansible_version_2 = module_1.AnsibleVersion(bool_2, ansible_version_1)
    str_3 = 'u"",t/2lY2W%Qyb6\n$|{'
    str_4 = 'D9!a{P'
    dict_0 = {str_4: bool_2, str_2: prepend_list_action_0}
    namespace_0 = module_0.Namespace(**dict_0)
    argument_parser_1 = module_0.ArgumentParser(set_1, namespace_0, int_0)
    int_1 = 2039
    str_5 = 'vE"hM\x0bYM^l_Q(F'
    var_2 = ansible_version_1.__call__(argument_parser_1, int_1, str_5, prepend_list_action_0)
    prepend_list_action_1 = module_1.PrependListAction(str_3, int_0)
    var_3 = module_1.create_base_parser(prepend_list_action_1, list_1)
    bool_3 = False
    float_0 = None
    str_6 = 'S'
    int_2 = 1905
    unrecognized_argument_1 = module_1.UnrecognizedArgument(int_2, bool_0, tuple_1)
    set_2 = {bool_3, bytes_1}
    prepend_list_action_2 = module_1.PrependListAction(int_0, float_0, str_6, unrecognized_argument_1, set_2)