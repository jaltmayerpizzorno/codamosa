# Automatically generated by Pynguin.
import tornado.options as module_0
import typing as module_1

def test_case_0():
    try:
        str_0 = '<'
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "Q}/=}ZW)x:\n4F'"
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'J'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_0.__setitem__(str_0, option_parser_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = None
        list_0 = [str_1]
        module_0.define(str_1, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/input/tornado/log.py'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_0.print_help()
        str_0 = '/input/tornado/options.py'
        option_parser_1 = module_0.OptionParser()
        option_parser_2 = module_0.OptionParser()
        option_parser_0.print_help()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'PcPMbAwhF,;r7`-{z~@o'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        iterator_0 = option_parser_0.__iter__()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        str_0 = 'rQ;wo'
        option_0 = module_0._Option(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.print_help()
        dict_0 = option_parser_1.as_dict()
        option_parser_1.print_help()
        str_1 = 'AN5F'
        str_2 = 'MCF7==uzx'
        int_0 = -4266
        bool_0 = False
        option_0 = module_0._Option(str_2, int_0, str_0, bool_0, str_0, str_2)
        any_0 = option_0.parse(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'test_option'
        str_1 = 'JK'
        optional_0 = None
        option_0 = module_0._Option(str_0, str_0, str_1, optional_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        module_0.print_help()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '--name'
        str_1 = [str_0, str_0, str_0, str_0, str_0]
        option_parser_0 = module_0.OptionParser()
        str_2 = 'name'
        option_parser_0.define(str_2)
        list_0 = option_parser_0.parse_command_line(str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'tornado_test'
        str_1 = '--name'
        str_2 = 'hello'
        str_3 = [str_0, str_1, str_2, str_2, str_2]
        option_parser_0 = module_0.OptionParser()
        str_4 = 'name'
        option_parser_0.define(str_4)
        option_parser_0.run_parse_callbacks()
        list_0 = option_parser_0.parse_command_line(str_3)
    except BaseException:
        pass

def test_case_15():
    try:
        module_0.print_help()
        str_0 = 'Q@x(lI2\x0b>Z\x0ct^EY_p4N'
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        str_1 = '/input/tornado/log.py'
        module_0.define(str_1, str_1)
    except BaseException:
        pass

def test_case_16():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.add_parse_callback(option_parser_0)
        str_0 = 'R'
        list_0 = [str_0, str_0, str_0, str_0]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        callable_0 = None
        option_parser_1 = module_0.OptionParser()
        option_parser_1.add_parse_callback(callable_0)
        option_parser_2 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_2)
        text_i_o_0 = module_1.TextIO()
        module_0.print_help(text_i_o_0)
        str_0 = '<ast>'
        any_0 = option_parser_2.__getattr__(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'xS'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'Ta.Y&tn8DVJMd;='
        module_0.add_parse_callback(str_0)
        option_parser_0 = module_0.OptionParser()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'Fe^#vEWjs4H'
        list_0 = [str_0]
        bool_0 = False
        list_1 = module_0.parse_command_line(list_0, bool_0)
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_2 = []
        error_0 = module_0.Error(*list_2)
        iterator_0 = option_parser_0.__iter__()
        str_1 = 'aw'
        option_parser_0.run_parse_callbacks()
        option_parser_1 = module_0.OptionParser()
        any_0 = option_parser_1.__getitem__(str_1)
    except BaseException:
        pass

def test_case_21():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_0 = [str_0, str_0]
        dict_0 = option_parser_0.as_dict()
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_0.print_help()
        str_1 = 'w?C5['
        dict_1 = option_parser_0.group_dict(str_1)
        str_2 = 'A'
        option_parser_0.run_parse_callbacks()
        dict_2 = option_parser_0.group_dict(str_2)
        mockable_0 = module_0._Mockable(option_parser_0)
        option_parser_1 = module_0.OptionParser()
        dict_3 = option_parser_1.group_dict(str_0)
        dict_4 = option_parser_1.as_dict()
        str_3 = '/input/tornado/log.py'
        option_parser_2 = module_0.OptionParser()
        bool_0 = False
        bool_1 = option_parser_2.__contains__(str_0)
        option_parser_1.parse_config_file(str_3, bool_0)
        option_parser_2.print_help()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'R<\\>em /w8'
        option_0 = module_0._Option(str_0, str_0, str_0)
        dict_0 = None
        option_parser_0 = module_0.OptionParser()
        option_0.set(dict_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        list_0 = [str_0, str_0]
        list_1 = option_parser_0.parse_command_line(list_0)
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = 'GPYh9\x0clI6_|3x $;g'
        none_type_0 = None
        str_2 = None
        bool_0 = False
        option_parser_0.define(str_1, none_type_0, str_2, str_2, bool_0, option_parser_0)
        option_parser_0.run_parse_callbacks()
        dict_1 = option_parser_0.group_dict(str_0)
        option_parser_1 = module_0.OptionParser()
        dict_2 = option_parser_1.group_dict(str_0)
        option_parser_0.__setitem__(str_1, bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '--'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        list_0 = [str_0, str_0]
        dict_0 = option_parser_1.as_dict()
        list_1 = option_parser_1.parse_command_line(list_0)
        option_parser_1.print_help()
        str_1 = 'GQ`|sVF;TkE\x0bese:'
        dict_1 = option_parser_1.group_dict(str_1)
        str_2 = 'A'
        option_parser_1.run_parse_callbacks()
        dict_2 = option_parser_1.group_dict(str_2)
        mockable_0 = module_0._Mockable(option_parser_1)
        option_parser_2 = module_0.OptionParser()
        option_parser_3 = module_0.OptionParser()
        dict_3 = option_parser_1.as_dict()
        dict_4 = option_parser_1.as_dict()
        option_parser_4 = module_0.OptionParser()
        option_parser_4.print_help()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '=*[%Tk?'
        list_0 = [str_0, str_0, str_0, str_0]
        bool_0 = True
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, str_0, iterable_0)
        option_0.set(list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '/input/tornado/log.py'
        str_1 = '!Al=%P9I\r7'
        complex_0 = None
        str_2 = '0=(S'
        bool_0 = False
        bool_1 = True
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_1, complex_0, str_2, str_0, bool_0, str_1, bool_1)
        option_parser_1 = module_0.OptionParser()
        iterable_0 = option_parser_1.items()
        option_parser_2 = module_0.OptionParser()
        list_0 = [str_0, str_0]
        dict_0 = option_parser_2.as_dict()
        list_1 = option_parser_2.parse_command_line(list_0)
        option_parser_2.print_help()
        str_3 = 'A'
        option_parser_2.run_parse_callbacks()
        dict_1 = option_parser_1.group_dict(str_3)
        mockable_0 = option_parser_2.mockable()
        option_parser_3 = module_0.OptionParser()
        bool_2 = option_parser_3.__contains__(str_0)
        str_4 = '--'
        mockable_0.__setattr__(str_4, option_parser_3)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        list_0 = [str_0, str_0]
        dict_0 = option_parser_0.as_dict()
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_0.print_help()
        str_1 = 'w?C5['
        dict_1 = option_parser_0.group_dict(str_1)
        str_2 = 'GPYh9\x0clI6_|3x $;g'
        none_type_0 = None
        str_3 = None
        bool_0 = False
        option_parser_0.define(str_2, none_type_0, str_3, str_3, bool_0, option_parser_0)
        mockable_0 = option_parser_0.mockable()
        option_parser_1 = module_0.OptionParser()
        bool_1 = option_parser_0.__contains__(str_1)
        tuple_0 = None
        mockable_0.__setattr__(str_2, tuple_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        list_0 = [str_0, str_0]
        dict_0 = option_parser_1.as_dict()
        list_1 = option_parser_1.parse_command_line(list_0)
        option_parser_1.print_help()
        dict_1 = option_parser_0.group_dict(str_0)
        str_1 = 'w?C5['
        dict_2 = option_parser_1.group_dict(str_1)
        str_2 = 'GPYh9\x0clI6_|3x $;g'
        none_type_0 = None
        str_3 = None
        bool_0 = True
        option_parser_0.define(str_2, none_type_0, str_3, str_3, bool_0, option_parser_1)
        str_4 = 'A'
        option_parser_0.add_parse_callback(dict_0)
        option_parser_1.run_parse_callbacks()
        dict_3 = option_parser_1.group_dict(str_4)
        mockable_0 = module_0._Mockable(option_parser_1)
        option_parser_2 = module_0.OptionParser()
        dict_4 = option_parser_2.group_dict(str_0)
        dict_5 = option_parser_1.as_dict()
        str_5 = '/input/tornado/log.py'
        bool_1 = False
        option_parser_2.parse_config_file(str_5, bool_1)
        str_6 = '`4}'
        dict_6 = option_parser_2.group_dict(str_6)
        mockable_1 = option_parser_0.mockable()
        option_parser_0.__setitem__(str_2, iterable_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_0 = [str_0, str_0]
        dict_0 = option_parser_0.group_dict(str_0)
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_0.print_help()
        str_1 = 'GPYh9\x0clI6_|3x $;g'
        none_type_0 = None
        str_2 = None
        bool_0 = True
        option_parser_0.define(str_1, none_type_0, str_2, str_2, bool_0, option_parser_0)
        option_parser_0.run_parse_callbacks()
        str_3 = '<ast>'
        dict_1 = option_parser_0.group_dict(str_3)
        mockable_0 = module_0._Mockable(option_parser_0)
        option_parser_1 = module_0.OptionParser()
        dict_2 = option_parser_1.group_dict(str_0)
        dict_3 = option_parser_1.as_dict()
        option_parser_2 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0, bool_0)
        list_2 = option_parser_0.parse_command_line()
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'R<\\>em /w8'
        option_0 = module_0._Option(str_0, str_0, str_0)
        dict_0 = None
        option_parser_0 = module_0.OptionParser()
        option_0.set(dict_0)
        any_0 = option_0.value()
        option_0.set(any_0)
        any_1 = option_0.value()
        option_parser_1 = module_0.OptionParser()
        list_0 = option_parser_1.parse_command_line()
    except BaseException:
        pass