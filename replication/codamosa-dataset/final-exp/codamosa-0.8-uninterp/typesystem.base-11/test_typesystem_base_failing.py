# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        str_0 = 'sruD:y '
        parse_error_0 = module_0.ParseError(text=str_0, code=str_0)
        int_0 = -691
        position_0 = module_0.Position(int_0, int_0, int_0)
        base_error_0 = module_0.BaseError(text=str_0, position=position_0)
        bool_0 = base_error_0.__eq__(str_0)
        int_1 = 2
        position_1 = module_0.Position(int_0, int_1, int_0)
        base_error_1 = module_0.BaseError()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\n    Raised by `.validate()` or returned by `.validate_or_error()`.\n    '
        int_0 = 2400
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_0 = module_0.Message(text=str_0, end_position=position_0)
        bool_0 = message_0.__eq__(str_0)
        base_error_0 = module_0.BaseError(code=str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ']MI7=hDf[x '
        message_0 = module_0.Message(text=str_0)
        str_1 = message_0.__repr__()
        str_2 = message_0.__repr__()
        int_0 = message_0.__hash__()
        int_1 = message_0.__hash__()
        tuple_0 = ()
        parse_error_0 = module_0.ParseError(text=tuple_0)
        base_error_0 = module_0.BaseError(code=parse_error_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'tag:yaml.org,2002:bool'
        list_0 = [str_0, str_0]
        base_error_0 = module_0.BaseError(code=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        optional_0 = None
        parse_error_0 = module_0.ParseError(code=optional_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '9'
        int_0 = 3210
        str_1 = '/'
        int_1 = -1291
        int_2 = 6
        position_0 = module_0.Position(int_1, int_0, int_2)
        message_0 = module_0.Message(text=str_1, key=str_1, start_position=position_0)
        str_2 = 'aAAE\x0bj>ec({q'
        message_1 = module_0.Message(text=str_2, index=position_0, start_position=position_0)
        list_0 = [message_0, message_1, message_0]
        base_error_0 = module_0.BaseError(key=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        parse_error_0 = module_0.ParseError(messages=bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x98&\xce?'
        validation_result_0 = module_0.ValidationResult(error=bytes_0)
        dict_0 = {}
        list_0 = [validation_result_0, bytes_0, dict_0, validation_result_0]
        base_error_0 = module_0.BaseError(text=list_0)
        str_0 = base_error_0.__str__()
        int_0 = 4211
        validation_error_0 = module_0.ValidationError(key=int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        validation_result_0 = module_0.ValidationResult()
        str_0 = 'Ik$|Pq`'
        int_0 = -220
        int_1 = -5288
        int_2 = -1663
        position_0 = module_0.Position(int_1, int_0, int_2)
        bool_0 = position_0.__eq__(position_0)
        str_1 = 'B'
        message_0 = module_0.Message(text=str_1, key=str_0, position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -651
        validation_result_0 = module_0.ValidationResult()
        str_0 = validation_result_0.__repr__()
        int_1 = 2866
        iterator_0 = validation_result_0.__iter__()
        position_0 = module_0.Position(int_0, int_1, int_0)
        list_0 = [str_0, str_0]
        message_0 = module_0.Message(text=str_0, key=int_0, index=list_0, start_position=position_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 6
        position_0 = module_0.Position(int_0, int_0, int_0)
        str_0 = position_0.__repr__()
        str_1 = 'e:o#U_sbN\x0bf(gX`\t'
        str_2 = 'g;xX]*;GY89'
        message_0 = module_0.Message(text=str_2)
        bool_0 = message_0.__eq__(str_1)
        str_3 = message_0.__repr__()
        int_1 = 1001
        position_1 = module_0.Position(int_0, int_0, int_1)
        str_4 = 'blank'
        int_2 = -1454
        int_3 = None
        position_2 = module_0.Position(int_2, int_0, int_3)
        message_1 = module_0.Message(text=str_4, position=position_2)
        message_2 = module_0.Message(text=str_2, position=position_2, start_position=position_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'tag:yaml.org,2002:bool'
        str_1 = 'XTo $.gNvwEW%'
        list_0 = [str_1]
        message_0 = module_0.Message(text=str_1, key=str_0, end_position=list_0)
        str_2 = message_0.__repr__()
        list_1 = [str_0, str_0]
        base_error_0 = module_0.BaseError(code=str_0, messages=list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        validation_result_0 = module_0.ValidationResult()
        bool_0 = validation_result_0.__bool__()
        str_0 = ''
        message_0 = None
        list_0 = [message_0, message_0, message_0]
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, messages=list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'pc-UHP'
        message_0 = module_0.Message(text=str_0)
        list_0 = [message_0, message_0]
        bool_0 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(messages=list_0)
        str_1 = base_error_0.__repr__()
        validation_result_0 = module_0.ValidationResult()
        str_2 = validation_result_0.__repr__()
        str_3 = validation_result_0.__repr__()
        base_error_1 = module_0.BaseError(text=str_1)
        str_4 = base_error_1.__str__()
        str_5 = message_0.__repr__()
        int_0 = -2703
        int_1 = -220
        position_0 = module_0.Position(int_0, int_1, int_0)
        bool_1 = position_0.__eq__(base_error_0)
        base_error_2 = module_0.BaseError(code=str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 3
        validation_result_0 = module_0.ValidationResult(value=int_0)
        var_0 = iter(validation_result_0)
        var_1 = list(var_0)
        validation_error_0 = module_0.ValidationError()
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'd.F;n`T0soi?Rt\x0b'
        int_0 = 3
        float_0 = -314.0
        validation_result_0 = module_0.ValidationResult(value=float_0)
        str_1 = validation_result_0.__repr__()
        base_error_0 = module_0.BaseError(text=str_0)
        int_1 = base_error_0.__hash__()
        int_2 = 372
        int_3 = -2893
        int_4 = 1386
        position_0 = module_0.Position(int_1, int_3, int_4)
        bool_0 = position_0.__eq__(int_2)
        int_5 = 4
        position_1 = module_0.Position(int_0, int_2, int_5)
        str_2 = None
        bool_1 = position_1.__eq__(str_0)
        str_3 = base_error_0.__repr__()
        message_0 = module_0.Message(text=str_2, key=int_1, index=base_error_0, position=position_1)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 1
        validation_result_0 = module_0.ValidationResult(value=int_0)
        var_0 = iter(validation_result_0)
        var_1 = next(var_0)
        var_2 = next(var_0)
        int_1 = 2
        str_0 = 'test'
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_result_1 = module_0.ValidationResult(value=int_1, error=validation_error_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 3
        int_1 = -112
        int_2 = -1169
        position_0 = module_0.Position(int_0, int_1, int_2)
        bool_0 = True
        base_error_0 = module_0.BaseError(position=position_0, messages=bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        validation_result_0 = module_0.ValidationResult()
        str_0 = '}5/D7ax&OPx`enT@V!\n'
        message_0 = module_0.Message(text=str_0, code=str_0, key=str_0)
        int_0 = 4
        int_1 = -1848
        position_0 = module_0.Position(int_0, int_0, int_1)
        str_1 = position_0.__repr__()
        int_2 = message_0.__hash__()
        str_2 = validation_result_0.__repr__()
        str_3 = validation_result_0.__repr__()
        str_4 = position_0.__repr__()
        bool_0 = position_0.__eq__(str_3)
        int_3 = 1109
        bool_1 = position_0.__eq__(int_3)
        list_0 = []
        parse_error_0 = module_0.ParseError(messages=list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'd.F;n`T0soi?Rt\x0b'
        float_0 = -314.0
        validation_result_0 = module_0.ValidationResult(value=float_0)
        str_1 = validation_result_0.__repr__()
        base_error_0 = module_0.BaseError(text=str_0)
        int_0 = base_error_0.__hash__()
        int_1 = 372
        int_2 = -2893
        int_3 = 2
        position_0 = module_0.Position(int_0, int_2, int_3)
        bool_0 = position_0.__eq__(int_1)
        int_4 = base_error_0.__hash__()
        int_5 = base_error_0.__len__()
        list_0 = base_error_0.messages()
        base_error_1 = module_0.BaseError(text=str_0)
        list_1 = base_error_0.messages(add_prefix=int_1)
        base_error_2 = module_0.BaseError(code=str_0, position=position_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'pc-UHP'
        message_0 = module_0.Message(text=str_0)
        list_0 = [message_0, message_0]
        base_error_0 = module_0.BaseError(messages=list_0)
        str_1 = base_error_0.__repr__()
        validation_result_0 = module_0.ValidationResult()
        str_2 = validation_result_0.__repr__()
        int_0 = 2
        str_3 = base_error_0.__str__()
        bool_0 = validation_result_0.__bool__()
        iterator_0 = validation_result_0.__iter__()
        str_4 = validation_result_0.__repr__()
        str_5 = validation_result_0.__repr__()
        str_6 = 'search'
        message_1 = module_0.Message(text=str_6, start_position=bool_0)
        int_1 = message_1.__hash__()
        int_2 = 285
        int_3 = 722
        position_0 = module_0.Position(int_2, int_3, int_0)
        str_7 = position_0.__repr__()
        str_8 = position_0.__repr__()
        str_9 = 'ZhI_x\\!1yx+"\\/,po4~w'
        validation_error_0 = module_0.ValidationError(code=str_9)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'tag:yaml.org,2002:bool'
        str_1 = 'XTo $.gNvwEW%'
        list_0 = [str_1]
        base_error_0 = module_0.BaseError(text=str_0)
        bool_0 = base_error_0.__eq__(str_0)
        message_0 = module_0.Message(text=str_1, key=str_0, end_position=list_0)
        str_2 = message_0.__repr__()
        list_1 = [str_0, str_0]
        base_error_1 = module_0.BaseError(code=str_0, messages=list_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'pc-UHP'
        message_0 = module_0.Message(text=str_0)
        list_0 = [message_0, message_0]
        base_error_0 = module_0.BaseError(messages=list_0)
        str_1 = base_error_0.__repr__()
        validation_result_0 = module_0.ValidationResult()
        str_2 = validation_result_0.__repr__()
        str_3 = validation_result_0.__repr__()
        str_4 = 'F&_N2FLKRW+'
        base_error_1 = module_0.BaseError(text=str_1)
        str_5 = base_error_1.__str__()
        int_0 = -2703
        int_1 = -220
        position_0 = module_0.Position(int_0, int_1, int_0)
        bool_0 = position_0.__eq__(base_error_0)
        base_error_2 = module_0.BaseError(text=str_4)
        str_6 = base_error_2.__str__()
        str_7 = validation_result_0.__repr__()
        bool_1 = validation_result_0.__bool__()
        iterator_0 = validation_result_0.__iter__()
        str_8 = validation_result_0.__repr__()
        int_2 = 3246
        position_1 = module_0.Position(int_2, int_1, int_2)
        str_9 = position_1.__repr__()
        str_10 = position_0.__repr__()
        validation_error_0 = module_0.ValidationError(text=str_2, key=str_8)
        bool_2 = validation_result_0.__bool__()
        validation_result_1 = module_0.ValidationResult(error=validation_error_0)
        str_11 = validation_result_1.__repr__()
        list_1 = [str_4]
        message_1 = module_0.Message(text=str_10, index=list_1, end_position=position_1)
        str_12 = message_1.__repr__()
        validation_result_2 = module_0.ValidationResult(error=validation_error_0)
        bool_3 = validation_result_0.__bool__()
        base_error_3 = module_0.BaseError()
    except BaseException:
        pass

def test_case_23():
    try:
        validation_result_0 = module_0.ValidationResult()
        str_0 = validation_result_0.__repr__()
        str_1 = 'Ik$|Pq`'
        int_0 = -2703
        int_1 = -220
        position_0 = module_0.Position(int_0, int_1, int_0)
        base_error_0 = module_0.BaseError(text=str_0)
        str_2 = base_error_0.__str__()
        str_3 = 'U]R'
        message_0 = module_0.Message(text=str_3, code=str_3, position=position_0)
        str_4 = message_0.__repr__()
        bool_0 = validation_result_0.__bool__()
        str_5 = validation_result_0.__repr__()
        validation_result_1 = module_0.ValidationResult()
        bool_1 = validation_result_0.__bool__()
        base_error_1 = module_0.BaseError(code=str_1, position=position_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '9D;=fwt'
        list_0 = []
        message_0 = module_0.Message(text=str_0, key=str_0, start_position=list_0)
        str_1 = message_0.__repr__()
        str_2 = '\n    Recursively set the definitions that string-referenced `Reference` fields\n    should use.\n    '
        base_error_0 = module_0.BaseError(code=str_2, key=str_2)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'pc-UHP'
        message_0 = module_0.Message(text=str_0)
        list_0 = [message_0, message_0, message_0, message_0]
        bool_0 = message_0.__eq__(message_0)
        base_error_0 = module_0.BaseError(messages=list_0)
        str_1 = base_error_0.__repr__()
        validation_result_0 = module_0.ValidationResult()
        str_2 = validation_result_0.__repr__()
        int_0 = 1
        position_0 = module_0.Position(int_0, int_0, int_0)
        validation_result_1 = module_0.ValidationResult()
        bool_1 = base_error_0.__eq__(validation_result_1)
        str_3 = 'Must have no more than {max_items} items.'
        base_error_1 = module_0.BaseError(text=str_1)
        str_4 = base_error_1.__str__()
        int_1 = -2688
        validation_error_0 = module_0.ValidationError(text=str_1)
        validation_result_2 = module_0.ValidationResult(error=validation_error_0)
        int_2 = -220
        position_1 = module_0.Position(int_1, int_2, int_1)
        bool_2 = position_1.__eq__(base_error_0)
        str_5 = base_error_0.__str__()
        iterator_0 = base_error_0.__iter__()
        message_1 = module_0.Message(text=str_3, code=str_4, key=str_4)
        bool_3 = base_error_1.__eq__(validation_error_0)
        str_6 = message_0.__repr__()
        bool_4 = validation_result_2.__bool__()
        str_7 = validation_result_0.__repr__()
        base_error_2 = module_0.BaseError(key=str_3, position=position_1)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 29
        str_0 = '-{/Zr+CVg['
        list_0 = [int_0, str_0]
        validation_result_0 = module_0.ValidationResult()
        bool_0 = validation_result_0.__bool__()
        message_0 = module_0.Message(text=str_0, index=list_0)
        str_1 = message_0.__repr__()
        int_1 = 246
        float_0 = 552.57706
        message_1 = module_0.Message(text=str_1, code=str_0, end_position=float_0)
        list_1 = [message_0, message_0, message_0, message_1]
        parse_error_0 = module_0.ParseError(messages=list_1)
        int_2 = -1020
        position_0 = module_0.Position(int_1, int_0, int_2)
        str_2 = position_0.__repr__()
        list_2 = [message_0]
        parse_error_1 = module_0.ParseError(key=int_2, position=position_0, messages=list_2)
    except BaseException:
        pass