# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '    Foo func.\n\n    :param x: X value\n    :param y: Y value\n    :return: the result\n    :raises ValueError: when bad things happen\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '*.;L@p;|!K`<FAZP9/'
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = '\nSample module docstring\n\n:param first_param: This is the first parameter.\n:param second_param: This is the second parameter.\n:returns: None\n:raises SomeException: When an exception is raised.\n:raises OtherException: When another exception is raised.\nThis line should be ignored, when calculating the long description.\n'
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = None
    docstring_0 = module_0.parse(str_0)
    str_1 = 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        return_name : type\n            A description of this returned value\n        another_type\n            Return names are optional, types are required\n    '
    docstring_1 = module_0.parse(str_1)
    docstring_2 = module_0.parse(str_1)

def test_case_5():
    str_0 = '\n:param string prompt: The prompt displayed to the user.(defaults to "Selection: ")\n:raises RuntimeError: If no valid choice was made\n:returns: The choice made by the user\n    '
    docstring_0 = module_0.parse(str_0)
    var_0 = print(str_0)

def test_case_6():
    str_0 = '\n        Short description.\n\n        Long description.\n\n        :param type_name arg_name:\n        :param type_name? arg_name:\n        :param type_name? arg_name: Defaults to value.\n        :param type_name? arg_name:\n        Defaults to value.\n\n        :returns:\n        :returns type_name:\n        :returns type_name: long description\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'Summarize a number\n    This is the "long" description.\n\n    :param x: the number to be summarized\n    :type x: int | str\n    :param y: the other number to be summarized\n    :type y: int | str\n    :param operator: the operator to apply\n    :type operator: str\n    :return: the answer\n    :rtype: int | float\n    :raises: a custom exception if x is invalid\n    :raises: a custom exception if y is invalid\n    :raises: a custom exception if operator is invalid\n    '
    docstring_0 = module_0.parse(str_0)