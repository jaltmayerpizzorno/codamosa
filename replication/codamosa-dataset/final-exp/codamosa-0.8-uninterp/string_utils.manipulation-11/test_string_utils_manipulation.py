# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    string_compressor_0 = module_0.__StringCompressor()

def test_case_1():
    string_compressor_0 = module_0.__StringCompressor()
    int_0 = 3435
    str_0 = module_0.roman_encode(int_0)

def test_case_2():
    str_0 = '|Skhh]f\r'
    str_1 = module_0.compress(str_0)
    str_2 = module_0.asciify(str_1)

def test_case_3():
    str_0 = "\n    Similarly to native Python's `range()`, returns a Generator object which generates a new roman number\n    on each iteration instead of an integer.\n\n    *Example:*\n\n    >>> for n in roman_range(7): print(n)\n    >>> # prints: I, II, III, IV, V, VI, VII\n    >>> for n in roman_range(start=7, stop=1, step=-1): print(n)\n    >>> # prints: VII, VI, V, IV, III, II, I\n\n    :param stop: Number at which the generation must stop (must be <= 3999).\n    :param start: Number at which the generation must start (must be >= 1).\n    :param step: Increment of each generation step (default to 1).\n    :return: Generator of roman numbers.\n    "
    str_1 = module_0.prettify(str_0)

def test_case_4():
    str_0 = 'Lorem ipsum dolor . sit amet    , consectetur https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwjwu_G-6bPWAhUBzIMKHdH6AqUQFggnMAA&url=https%3A%2F%2Fit.wikipedia.org%2Fwiki%2FOctopus_spiralis&usg=AOvVaw2iwmZYF_pKjB0eIN-T7TzT'
    str_1 = module_0.prettify(str_0)

def test_case_5():
    str_0 = '^3[47]\\d{13}$'
    var_0 = module_0.camel_case_to_snake(str_0)

def test_case_6():
    str_0 = '\n    Checks whether the given string represents a decimal or not.\n\n    A decimal may be signed or unsigned or use a "scientific notation".\n\n    >>> is_decimal(\'42.0\') # returns true\n    >>> is_decimal(\'42\') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    '
    str_1 = module_0.snake_case_to_camel(str_0)

def test_case_7():
    str_0 = '\n    Custom error raised when received object is not a string as expected.\n    '
    str_1 = module_0.compress(str_0)
    str_2 = 'D3[@cZq'
    bool_0 = False
    str_3 = module_0.shuffle(str_2)
    str_4 = module_0.snake_case_to_camel(str_0, bool_0)
    str_5 = module_0.slugify(str_1, str_2)

def test_case_8():
    str_0 = 'QHR\x0b3{],QBs)!@kg_tL'
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)

def test_case_9():
    str_0 = '\n    Custom error raised when received object is not a string as expected.\n    '
    str_1 = module_0.compress(str_0)
    string_compressor_0 = module_0.__StringCompressor()
    str_2 = '=3[@cZq'
    str_3 = module_0.slugify(str_1, str_2)

def test_case_10():
    str_0 = '\n    Custom error raised when received object is not a string as expected.\n    '
    str_1 = module_0.strip_margin(str_0)
    str_2 = module_0.compress(str_0)
    bool_0 = False
    str_3 = module_0.snake_case_to_camel(str_0, bool_0)

def test_case_11():
    str_0 = '\x0cC+8[#\x0bag'
    str_1 = module_0.reverse(str_0)
    str_2 = ''
    str_3 = module_0.shuffle(str_2)
    str_4 = 'Tm9\\ZDb!o8x'
    str_5 = module_0.strip_html(str_4)
    str_6 = module_0.compress(str_4)
    str_7 = '[E-z0E6TI--+ lDCHm^k'
    bool_0 = False
    str_8 = 'I\x0cob\x0b v.}/.=4sP'
    str_9 = module_0.snake_case_to_camel(str_7, bool_0, str_8)
    str_10 = module_0.decompress(str_6)

def test_case_12():
    str_0 = ';hOb^>%pt.'
    str_1 = 'SPACES_AROUND'
    str_2 = module_0.shuffle(str_1)
    str_3 = 'wm|{>f"7)89RE2j3"kW'
    var_0 = module_0.camel_case_to_snake(str_1, str_3)
    bool_0 = True
    str_4 = module_0.strip_html(str_0, bool_0)
    str_5 = '?_WW\rVf\x0bdE"|4hUWnXZ#'
    str_6 = module_0.slugify(str_5, str_2)
    str_7 = 'd\\c]8j7P,`2z!w`C?'
    str_8 = module_0.prettify(str_7)
    bool_1 = module_0.booleanize(str_6)

def test_case_13():
    int_0 = 133
    str_0 = module_0.roman_encode(int_0)
    str_1 = '`v'
    str_2 = module_0.strip_margin(str_1)
    str_3 = 'd\\c]8j7P,`2z!w`C?'
    str_4 = module_0.prettify(str_3)
    str_5 = '@mgHz5-'
    bool_0 = module_0.booleanize(str_5)
    string_compressor_0 = module_0.__StringCompressor()
    int_1 = module_0.roman_decode(str_0)

def test_case_14():
    int_0 = 217
    str_0 = ';hOb^>%pt.'
    bool_0 = True
    str_1 = module_0.strip_html(str_0, bool_0)
    str_2 = 'Eq?MW1h@y\x0c%DgxSEc'
    str_3 = module_0.strip_margin(str_2)
    str_4 = module_0.roman_encode(int_0)
    str_5 = 'r3r}\t4I:_5(H'
    bool_1 = module_0.booleanize(str_2)
    str_6 = module_0.prettify(str_5)
    int_1 = module_0.roman_decode(str_4)
    str_7 = 'LEFT_SPACE'
    str_8 = module_0.snake_case_to_camel(str_7, str_4)
    str_9 = '&5//wQl*w|d6'
    bool_2 = module_0.booleanize(str_9)

def test_case_15():
    str_0 = 'ThisIsACamelStringTest'
    var_0 = module_0.camel_case_to_snake(str_0)

def test_case_16():
    str_0 = ' test  string'
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()
    str_2 = 'test string     '
    string_formatter_1 = module_0.__StringFormatter(str_2)
    str_3 = string_formatter_1.format()
    str_4 = 'test :string'
    string_formatter_2 = module_0.__StringFormatter(str_4)
    str_5 = string_formatter_2.format()
    str_6 = 'test  ?string'
    string_formatter_3 = module_0.__StringFormatter(str_6)
    str_7 = string_formatter_3.format()
    str_8 = 'test.   string'
    string_formatter_4 = module_0.__StringFormatter(str_8)
    str_9 = string_formatter_4.format()
    str_10 = 'test  &string'
    string_formatter_5 = module_0.__StringFormatter(str_10)
    str_11 = string_formatter_5.format()
    str_12 = 'test  !string'
    string_formatter_6 = module_0.__StringFormatter(str_12)
    str_13 = string_formatter_6.format()
    str_14 = "test  'string"
    string_formatter_7 = module_0.__StringFormatter(str_14)
    str_15 = string_formatter_7.format()
    str_16 = 'test  "string'
    string_formatter_8 = module_0.__StringFormatter(str_16)
    str_17 = string_formatter_8.format()
    str_18 = 'test  %string'
    string_formatter_9 = module_0.__StringFormatter(str_18)
    str_19 = string_formatter_9.format()

def test_case_17():
    str_0 = ' test  string'
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()
    str_2 = 'tes)t string     '
    string_formatter_1 = module_0.__StringFormatter(str_2)
    str_3 = string_formatter_1.format()
    str_4 = 'test :string'
    string_formatter_2 = module_0.__StringFormatter(str_4)
    str_5 = string_formatter_2.format()
    str_6 = 'test  ?string'
    string_formatter_3 = module_0.__StringFormatter(str_6)
    str_7 = string_formatter_3.format()
    str_8 = "\n    Check if a string is a valid email.\n\n    Reference: https://tools.ietf.org/html/rfc3696#section-3\n\n    *Examples:*\n\n    >>> is_email('my.email@the-provider.com') # returns true\n    >>> is_email('@gmail.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if email, false otherwise.\n    "
    str_9 = module_0.prettify(str_8)