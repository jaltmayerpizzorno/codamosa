# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        int_0 = -875
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'DataAccessObject'
        var_0 = module_0.camel_case_to_snake(str_0)
        str_1 = 'Ma'
        str_2 = module_0.roman_encode(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '}\r:]cZbd\nY'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '`v'
        str_1 = module_0.strip_margin(str_0)
        str_2 = '.K#UCz<:NUFMIqI'
        str_3 = module_0.slugify(str_1, str_2)
        str_4 = module_0.prettify(str_2)
        bool_0 = module_0.booleanize(str_2)
        string_compressor_0 = module_0.__StringCompressor()
        int_0 = module_0.roman_decode(str_2)
    except BaseException:
        pass

def test_case_4():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        str_0 = None
        str_1 = "g+CCjsOmZo'He"
        str_2 = module_0.shuffle(str_1)
        str_3 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        int_0 = 320
        str_1 = module_0.compress(str_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ';hOb^>%pt.'
        str_1 = '&'
        str_2 = module_0.slugify(str_0)
        str_3 = module_0.prettify(str_0)
        bool_0 = module_0.booleanize(str_1)
        int_0 = 2133
        str_4 = module_0.compress(str_1, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '^-qf!R&j6jpQK'
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        set_0 = set()
        string_formatter_0 = module_0.__StringFormatter(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Lorem ipsum dolor . sit amet    , consectetur https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwjwu_G-6bPWAhUBzIMKHdH6AqUQFggnMAA&url=https%3A%2F%2Fit.wikipedia.org%2Fwiki%2FOctopus_spiralis&usg=AOvVaw2iwmZYF_pKjB0eIN-T7TzT'
        str_1 = module_0.prettify(str_0)
        string_compressor_0 = module_0.__StringCompressor()
        var_0 = module_0.camel_case_to_snake(string_compressor_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        str_1 = 'YLbZfb.p'
        bool_0 = module_0.booleanize(str_1)
        str_2 = 'j~q\n&bcm&0(tVrQ'
        bool_1 = module_0.booleanize(str_2)
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        bool_0 = module_0.booleanize(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = module_0.strip_margin(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        str_1 = module_0.strip_html(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\tu`[FH#1S'
        str_1 = module_0.shuffle(str_0)
        str_2 = 'Q'
        str_3 = module_0.asciify(str_2)
        str_4 = 'n/4BT\r~(2xD'
        str_5 = module_0.shuffle(str_4)
        str_6 = module_0.reverse(str_5)
        str_7 = module_0.reverse(str_2)
        str_8 = '_U?k'
        str_9 = 'UPPERCASE_AFTER_SIGN'
        str_10 = module_0.snake_case_to_camel(str_8, str_9)
        str_11 = None
        str_12 = module_0.reverse(str_11)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '5D./0E{BzJ9.]`/A'
        string_compressor_0 = module_0.__StringCompressor()
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.strip_margin(str_1)
        str_3 = module_0.asciify(str_2)
        str_4 = '?)g1wNE@hMRrF(|_.ok<'
        string_formatter_0 = module_0.__StringFormatter(str_4)
        str_5 = string_formatter_0.format()
        bool_0 = module_0.booleanize(str_0)
        str_6 = None
        str_7 = module_0.shuffle(str_6)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        string_formatter_0 = module_0.__StringFormatter(str_0)
        str_1 = string_formatter_0.format()
        str_2 = 'r"7e'
        str_3 = module_0.reverse(str_2)
        bool_0 = module_0.booleanize(str_3)
        str_4 = '{-LUE'
        int_0 = 1196
        str_5 = module_0.compress(str_4, str_4, int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 168
        str_0 = module_0.roman_encode(int_0)
        str_1 = '\n    Checks whether the given string represents a decimal or not.\n\n    A decimal may be signed or unsigned or use a "scientific notation".\n\n    >>> is_decimal(\'42.0\') # returns true\n    >>> is_decimal(\'42\') # returns false\n\n    :param input_string: String to check\n    :type input_string: str\n    :return: True if integer, false otherwise\n    '
        str_2 = module_0.slugify(str_1, str_1)
        str_3 = 'd\\c]8j7P,`2z!w`C?'
        str_4 = module_0.prettify(str_3)
        bool_0 = module_0.booleanize(str_3)
        string_compressor_0 = module_0.__StringCompressor()
        int_1 = module_0.roman_decode(str_2)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '"$`b5W>4GTS,$%\x0bN'
        str_1 = module_0.strip_margin(str_0)
        int_0 = 133
        str_2 = module_0.roman_encode(int_0)
        str_3 = '`v'
        str_4 = module_0.strip_margin(str_3)
        str_5 = None
        str_6 = module_0.slugify(str_5)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 140
        str_0 = module_0.roman_encode(int_0)
        str_1 = None
        str_2 = module_0.snake_case_to_camel(str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 197
        str_0 = ';hOb^>%pt.'
        bool_0 = True
        str_1 = module_0.strip_html(str_0, bool_0)
        str_2 = 'Eq?MW1h@y\x0c%DgxSEc'
        str_3 = module_0.strip_margin(str_2)
        str_4 = module_0.roman_encode(int_0)
        str_5 = '_WW\rVf\x0bdE"|4hUWnXZ#'
        str_6 = 'r3r}\t4I:_5(H'
        str_7 = 'M'
        str_8 = module_0.slugify(str_7)
        str_9 = module_0.prettify(str_6)
        bool_1 = module_0.booleanize(str_0)
        int_1 = module_0.roman_decode(str_4)
        str_10 = module_0.snake_case_to_camel(str_4, str_5)
        str_11 = '^[a-zA-Z]*([a-z]+[A-Z]+|[A-Z]+[a-z]+)[a-zA-Z\\d]*$'
        str_12 = 'iM\'D,s"rgSi+aL@V'
        str_13 = module_0.compress(str_11, str_12)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 217
        str_0 = ';hOb^>%pt.'
        bool_0 = True
        str_1 = module_0.strip_html(str_0, bool_0)
        str_2 = 'Eq?MW1h@y\x0c%DgxSEc'
        str_3 = module_0.strip_margin(str_2)
        str_4 = module_0.roman_encode(int_0)
        str_5 = '_WW\rVf\x0bdE"|4hUWnXZ#'
        str_6 = 'r3r}\t4I:_5(H'
        str_7 = 'M'
        str_8 = module_0.slugify(str_7)
        str_9 = module_0.prettify(str_6)
        bool_1 = module_0.booleanize(str_0)
        int_1 = module_0.roman_decode(str_4)
        str_10 = module_0.snake_case_to_camel(str_4, str_5)
        str_11 = module_0.strip_margin(str_7)
        str_12 = 'q\x0c'
        bool_2 = module_0.booleanize(str_12)
        str_13 = '\\NL'
        str_14 = 'slugify'
        int_2 = -3494
        str_15 = module_0.compress(str_13, str_14, int_2)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'y'
        str_1 = module_0.reverse(str_0)
        int_0 = 217
        str_2 = ';hOb^>%pt.'
        bool_0 = True
        str_3 = module_0.strip_html(str_2, bool_0)
        str_4 = 'Eq?MW1h@y\x0c%DgxSEc'
        str_5 = module_0.strip_margin(str_4)
        str_6 = 'y'
        var_0 = module_0.camel_case_to_snake(str_6)
        str_7 = module_0.roman_encode(int_0)
        str_8 = 'r3r}\t4I:_5(H'
        str_9 = 'M'
        str_10 = module_0.slugify(str_9)
        str_11 = module_0.prettify(str_8)
        str_12 = module_0.asciify(str_9)
        bool_1 = module_0.booleanize(str_2)
        int_1 = module_0.roman_decode(str_7)
        str_13 = 'LEFT_SPACE'
        str_14 = module_0.snake_case_to_camel(str_13, str_7)
        bool_2 = module_0.booleanize(str_7)
        str_15 = '=k_O$aSW<XZ$-V\x0cK>%]'
        int_2 = None
        str_16 = module_0.compress(str_15, str_12, int_2)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'y'
        str_1 = module_0.reverse(str_0)
        int_0 = 217
        str_2 = ';hOb^>%pt.'
        bool_0 = True
        str_3 = module_0.strip_html(str_2, bool_0)
        str_4 = 'Eq?MW1h@y\x0c%DgxSEc'
        str_5 = module_0.strip_margin(str_4)
        str_6 = 'y'
        var_0 = module_0.camel_case_to_snake(str_6)
        str_7 = module_0.roman_encode(int_0)
        str_8 = 'r3r}\t4I:_5(H'
        int_1 = 746
        str_9 = module_0.roman_encode(int_1)
        str_10 = 'M'
        str_11 = module_0.slugify(str_10)
        bool_1 = module_0.booleanize(str_4)
        str_12 = module_0.prettify(str_8)
        str_13 = module_0.asciify(str_10)
        bool_2 = module_0.booleanize(str_2)
        int_2 = module_0.roman_decode(str_7)
        str_14 = 'LEFT_SPACE_'
        str_15 = module_0.snake_case_to_camel(str_14, str_7)
        int_3 = 2897
        var_1 = module_0.camel_case_to_snake(int_3)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 217
        str_0 = ';hOb^>%pt.'
        bool_0 = True
        str_1 = module_0.strip_html(str_0, bool_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_2 = 'Eq?MW1h@y\x0c%DgxSEc'
        str_3 = module_0.strip_margin(str_2)
        str_4 = 'y'
        var_0 = module_0.camel_case_to_snake(str_4)
        str_5 = module_0.roman_encode(int_0)
        str_6 = '_WW\rVf\x0bdE"|4hUWnXZ#'
        str_7 = 'r3r}\t4I:_5(H'
        str_8 = module_0.snake_case_to_camel(str_6)
        str_9 = 'M'
        str_10 = module_0.slugify(str_9)
        bool_1 = module_0.booleanize(str_2)
        str_11 = module_0.prettify(str_7)
        str_12 = module_0.asciify(str_9)
        bool_2 = module_0.booleanize(str_0)
        int_1 = module_0.roman_decode(str_5)
        str_13 = 'LEFT_SPACE'
        str_14 = module_0.snake_case_to_camel(str_13, bool_1)
        str_15 = 'Ea\x0b'
        str_16 = module_0.compress(str_15, str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'y'
        str_1 = module_0.reverse(str_0)
        bool_0 = True
        str_2 = module_0.snake_case_to_camel(str_1, bool_0)
        int_0 = 4723
        str_3 = ';hOb^>%pt.'
        bool_1 = False
        str_4 = module_0.strip_html(str_3, bool_1)
        str_5 = module_0.slugify(str_4)
        str_6 = 'Eq?MW1hy\x0c%DgxSEc'
        str_7 = module_0.strip_margin(str_6)
        str_8 = 'y'
        str_9 = ',E+.?kvd'
        str_10 = module_0.prettify(str_9)
        var_0 = module_0.camel_case_to_snake(str_8)
        str_11 = module_0.asciify(str_1)
        str_12 = module_0.roman_encode(int_0)
    except BaseException:
        pass