# Automatically generated by Pynguin.
import tornado.ioloop as module_0
import tornado.tcpclient as module_1
import ssl as module_2
import concurrent.futures._base as module_3
import socket as module_4
import _asyncio as module_5
import datetime as module_6

def test_case_0():
    try:
        list_0 = []
        i_o_loop_0 = module_0.IOLoop()
        connector_0 = module_1._Connector(list_0, i_o_loop_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'embedded_css'
        int_0 = -1721
        list_0 = []
        s_s_l_context_0 = module_2.SSLContext(*list_0)
        t_c_p_client_0 = module_1.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, s_s_l_context_0)
        t_c_p_client_1 = module_1.TCPClient(i_o_stream_0)
        t_c_p_client_1.close()
        tuple_0 = ()
        t_c_p_client_2 = module_1.TCPClient()
        t_c_p_client_2.close()
        list_1 = [tuple_0, tuple_0, tuple_0, tuple_0]
        str_1 = 'August'
        dict_0 = {str_1: t_c_p_client_2}
        list_2 = [dict_0, t_c_p_client_2]
        connector_0 = module_1._Connector(list_1, list_2)
    except BaseException:
        pass

def test_case_2():
    try:
        i_o_loop_0 = module_0.IOLoop()
        str_0 = 'L5a^_v+;'
        tuple_0 = (i_o_loop_0, str_0)
        list_0 = [tuple_0]
        connector_0 = module_1._Connector(list_0, str_0)
        connector_0.on_timeout()
        connector_0.on_timeout()
        float_0 = -1620.43
        connector_0.clear_timeouts()
        connector_0.clear_timeout()
        future_0 = connector_0.start(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'S\nTU6?+Bxvj 2Vp!s'
        i_o_loop_0 = module_0.IOLoop()
        str_1 = 'L5a^_v+;'
        tuple_0 = (i_o_loop_0, str_1)
        list_0 = [tuple_0]
        connector_0 = module_1._Connector(list_0, str_0)
        future_0 = module_3.Future()
        address_family_0 = module_4.AddressFamily.AF_BLUETOOTH
        future_1 = module_5.Future()
        connector_0.on_connect_done(future_0, address_family_0, tuple_0, future_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Set connect timeout to IOloop'
        i_o_loop_0 = module_0.IOLoop()
        str_1 = 'L5a^_v+;'
        tuple_0 = (i_o_loop_0, str_1)
        list_0 = [tuple_0]
        int_0 = 1498
        connector_0 = module_1._Connector(list_0, str_0)
        connector_0.on_connect_timeout()
        str_2 = 'q'
        str_3 = None
        dict_0 = {str_1: str_1, str_2: str_1, str_3: i_o_loop_0}
        connector_0.on_connect_timeout()
        t_c_p_client_0 = module_1.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, dict_0, str_3)
        connector_1 = module_1._Connector(list_0, str_1)
        timedelta_0 = module_6.timedelta()
        connector_1.set_connect_timeout(timedelta_0)
        connector_1.on_timeout()
        t_c_p_client_1 = module_1.TCPClient()
        connector_0.on_timeout()
        connector_1.on_timeout()
        connector_1.clear_timeouts()
        connector_1.clear_timeout()
        callable_0 = None
        list_1 = [tuple_0, tuple_0]
        connector_2 = module_1._Connector(list_1, callable_0)
        future_0 = connector_0.start()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'S\nTU6?+Bxvj 2Vp!s'
        list_0 = []
        i_o_loop_0 = module_0.IOLoop()
        str_1 = 'L5a^_v+;'
        tuple_0 = (i_o_loop_0, str_1)
        list_1 = [tuple_0]
        int_0 = 1498
        connector_0 = module_1._Connector(list_1, str_0)
        connector_0.on_connect_timeout()
        str_2 = 'A6l'
        str_3 = 'q'
        future_0 = module_3.Future()
        address_family_0 = module_4.AddressFamily.AF_BLUETOOTH
        future_1 = module_5.Future()
        connector_0.on_connect_done(future_0, address_family_0, tuple_0, future_1)
        connector_0.on_connect_timeout()
        str_4 = None
        dict_0 = {str_2: str_2, str_3: str_1, str_4: i_o_loop_0}
        t_c_p_client_0 = module_1.TCPClient()
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, dict_0, str_4)
        connector_1 = module_1._Connector(list_1, str_1)
        connector_1.on_timeout()
        float_0 = 1000.0
        connector_1.set_timeout(float_0)
        connector_1.clear_timeouts()
        connector_1.clear_timeout()
        callable_0 = None
        connector_2 = module_1._Connector(list_0, callable_0)
    except BaseException:
        pass