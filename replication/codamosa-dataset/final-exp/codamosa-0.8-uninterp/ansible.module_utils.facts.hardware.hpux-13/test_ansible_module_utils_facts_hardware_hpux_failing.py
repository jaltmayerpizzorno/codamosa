# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.hpux as module_0

def test_case_0():
    try:
        tuple_0 = ()
        h_p_u_x_hardware_0 = module_0.HPUXHardware(tuple_0)
        var_0 = h_p_u_x_hardware_0.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        h_p_u_x_hardware_collector_0 = module_0.HPUXHardwareCollector()
        bytes_0 = b'\x01\xc1q*!\x0bx\xb8C\x17J\xbb`\xb1\xf5&'
        bytes_1 = b'd-\xe2\x94\xe2\xf5\x17\xc2\xfe'
        h_p_u_x_hardware_0 = module_0.HPUXHardware(bytes_1)
        var_0 = h_p_u_x_hardware_0.get_hw_facts(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'NAME="(.*)"'
        bool_0 = True
        h_p_u_x_hardware_0 = module_0.HPUXHardware(bool_0)
        var_0 = h_p_u_x_hardware_0.get_memory_facts(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'I=,,z<9_2lOO\tRV'
        h_p_u_x_hardware_0 = module_0.HPUXHardware(str_0)
        dict_0 = {}
        float_0 = 681.07624
        h_p_u_x_hardware_1 = module_0.HPUXHardware(float_0)
        var_0 = h_p_u_x_hardware_1.get_cpu_facts()
        h_p_u_x_hardware_2 = module_0.HPUXHardware(h_p_u_x_hardware_0, dict_0)
        var_1 = h_p_u_x_hardware_2.get_hw_facts()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'B.11.31'
        h_p_u_x_hardware_0 = module_0.HPUXHardware(str_0)
        str_1 = 'ansible_architecture'
        str_2 = 'ansible_distribution_version'
        str_3 = 'ia64'
        str_4 = {str_1: str_3, str_2: str_0}
        var_0 = h_p_u_x_hardware_0.get_cpu_facts(str_4)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1947
        list_0 = None
        bytes_0 = None
        h_p_u_x_hardware_collector_0 = module_0.HPUXHardwareCollector(bytes_0)
        tuple_0 = (int_0, list_0, h_p_u_x_hardware_collector_0)
        list_1 = [tuple_0]
        h_p_u_x_hardware_0 = module_0.HPUXHardware(list_1, list_0)
        var_0 = h_p_u_x_hardware_0.get_cpu_facts()
        str_0 = '9000/800'
        int_1 = 1600
        int_2 = 809
        float_0 = -763.4
        float_1 = 1520.7806
        h_p_u_x_hardware_1 = module_0.HPUXHardware(list_1, float_1)
        tuple_1 = (int_1, int_2, float_0)
        h_p_u_x_hardware_2 = module_0.HPUXHardware(tuple_1)
        var_1 = h_p_u_x_hardware_2.get_cpu_facts()
        str_1 = 'B.11.31'
        var_2 = dict(ansible_architecture=str_0, ansible_distribution_version=str_1)
        h_p_u_x_hardware_3 = module_0.HPUXHardware(var_2)
        str_2 = 'ansible_architecture'
        str_3 = 'ansible_distribution_version'
        str_4 = {str_2: str_0, str_3: str_1}
        var_3 = h_p_u_x_hardware_3.get_cpu_facts(str_4)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'ia64'
        str_1 = 'HP-UX'
        str_2 = 'B.11.23'
        var_0 = dict(ansible_architecture=str_0, ansible_system=str_1, ansible_distribution=str_1, ansible_distribution_version=str_2)
        int_0 = 0
        var_1 = None
        var_2 = lambda x, **kwargs: (int_0, x, var_1)
        var_3 = dict(run_command=var_2)
        var_4 = dict(module=var_3)
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_4)
        var_5 = h_p_u_x_hardware_0.populate(var_0)
    except BaseException:
        pass