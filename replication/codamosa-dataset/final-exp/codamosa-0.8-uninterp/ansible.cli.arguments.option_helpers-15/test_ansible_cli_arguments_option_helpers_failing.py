# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        var_0 = module_0.version()
        dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
        str_0 = '?'
        bytes_0 = b'\xe9\xc6'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(dict_0, bytes_0)
        set_0 = None
        float_0 = -1909.9
        var_1 = module_0.unfrack_path()
        prepend_list_action_0 = module_0.PrependListAction(float_0, str_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        var_2 = sorting_help_formatter_0.add_arguments(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'U`Nn}ri:;4}zt/N'
        int_0 = 147
        list_0 = [int_0]
        float_0 = -593.06974
        bool_0 = True
        bytes_0 = b'\xb0\xc6^r\\\x00\x18}q#\xd3\xae\x7f\x1b'
        prepend_list_action_0 = module_0.PrependListAction(float_0, bool_0, bytes_0)
        tuple_0 = ()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bool_0)
        int_1 = 0
        unrecognized_argument_0 = module_0.UnrecognizedArgument(int_1, bytes_0, list_0)
        ansible_version_0 = module_0.AnsibleVersion(str_0, str_0, bytes_0, tuple_0, sorting_help_formatter_0, unrecognized_argument_0)
        var_0 = module_0.add_output_options(ansible_version_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1076.976
        list_0 = [float_0, float_0]
        bool_0 = True
        int_0 = -2497
        str_0 = '4e*t\ttp7\x0bx'
        prepend_list_action_0 = module_0.PrependListAction(str_0, bool_0, int_0, str_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'U`Nn}ri:;4}zt/N'
        int_0 = 147
        list_0 = [int_0]
        float_0 = -593.06974
        bool_0 = True
        bytes_0 = b'\xb0\xc6^r\\\x00\x18}q#\xd3\xae\x7f\x1b'
        prepend_list_action_0 = module_0.PrependListAction(float_0, bool_0, bytes_0)
        var_0 = prepend_list_action_0.__call__(str_0, int_0, str_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_version_0 = None
        str_0 = 'SH]%u'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_0)
        var_0 = module_0.ensure_value(ansible_version_0, str_0, sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 0.0001
        str_0 = "2.12.1\n  config file = None\n  configured module search path = ['/root/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']\n  ansible python module location = /input/ansible\n  ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections\n  executable location = /usr/local/bin/pynguin\n  python version = 3.10.2 (main, Mar  2 2022, 03:44:48) [GCC 10.2.1 20210110]\n  jinja version = 3.1.2\n  libyaml = True"
        var_0 = module_0.maybe_unfrack_path(str_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0)
        var_1 = module_0.add_subset_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x0b\x85\xea1\xefF\xabu\xa6\xfe~'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.version(dict_0)
        bool_0 = True
        str_0 = '*iBD"j^^/\nR=AQ4..'
        var_1 = module_0.add_runas_prompt_options(bool_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        var_0 = module_0.add_runtask_options(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 0.0
        set_0 = {float_0, float_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        var_0 = module_0.add_tasknoplay_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x8f`\x04\x8d\xafS\xbf\x89\x9eC"y\t\x12d'
        var_0 = module_0.add_check_options(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = module_0.version()
        dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
        str_0 = '?'
        float_0 = 604.6
        ansible_version_0 = None
        unrecognized_argument_0 = module_0.UnrecognizedArgument(float_0, ansible_version_0, str_0)
        bytes_0 = b'\xe9\xc6'
        unrecognized_argument_1 = module_0.UnrecognizedArgument(dict_0, bytes_0)
        complex_0 = None
        float_1 = 3277.974296
        prepend_list_action_0 = module_0.PrependListAction(complex_0, float_1, float_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(prepend_list_action_0)
        var_1 = module_0.add_module_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'U`Nn}ri:;4}zt/N'
        int_0 = 147
        list_0 = [int_0]
        float_0 = -593.06974
        int_1 = 306
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0, int_1)
        bool_0 = False
        bytes_0 = b'\x92M\x1aRJ\xf78z\xb7\xf84\xba9\x95]\x01\xde\x9d\xc8"'
        prepend_list_action_0 = module_0.PrependListAction(list_0, str_0, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = module_0.version()
        dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
        bytes_0 = b'\xe9\xc6'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(dict_0, bytes_0)
        set_0 = None
        float_0 = -1909.9
        str_0 = 'Nuva'
        prepend_list_action_0 = module_0.PrependListAction(float_0, str_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_1 = -259.7
        str_1 = 'k\t;*%7_I-Io|n\\"nmx0'
        bool_0 = False
        str_2 = '6[u#:.Xk'
        bool_1 = True
        list_0 = [set_0]
        ansible_version_0 = module_0.AnsibleVersion(bool_1, dict_0, float_0, prepend_list_action_0, list_0)
        ansible_version_1 = module_0.AnsibleVersion(unrecognized_argument_0, bool_0, set_0, str_2, ansible_version_0, sorting_help_formatter_0, float_0)
        bytes_1 = b'\xf1\xc0o\x8c\x90p\x8d\x1a\xc8\xc0\xe7\xb2F:'
        ansible_version_2 = module_0.AnsibleVersion(str_1, ansible_version_1, bytes_1)
        var_1 = ansible_version_2.__call__(prepend_list_action_0, unrecognized_argument_0, float_1)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = module_0.version()
        dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
        str_0 = '?'
        bytes_0 = b'\xe9\xc6'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(dict_0, bytes_0)
        tuple_0 = (str_0, unrecognized_argument_0)
        str_1 = '\n0 upgraded, 0 newly installed'
        var_1 = unrecognized_argument_0.__call__(str_1, tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '?'
        set_0 = None
        float_0 = -1909.9
        var_0 = module_0.unfrack_path()
        prepend_list_action_0 = module_0.PrependListAction(float_0, str_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        var_1 = prepend_list_action_0.__call__(prepend_list_action_0, sorting_help_formatter_0, prepend_list_action_0)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = module_0.version()
        dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0}
        str_0 = '?'
        bytes_0 = b'\xe9\xc6'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(dict_0, bytes_0)
        tuple_0 = (str_0, unrecognized_argument_0)
        set_0 = None
        float_0 = -1909.9
        var_1 = module_0.unfrack_path()
        str_1 = 'N:ouva'
        prepend_list_action_0 = module_0.PrependListAction(float_0, str_1)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_1 = -694.3634
        str_2 = ': : Warning: Cannot s(at: No such file or directoryw'
        set_1 = set()
        list_0 = [set_1]
        tuple_1 = (list_0,)
        prepend_list_action_1 = module_0.PrependListAction(tuple_1, prepend_list_action_0, str_0, list_0)
        str_3 = "OO*=\\A:N w/;<5'oJ"
        str_4 = None
        dict_1 = {str_3: var_1, str_4: set_0, str_2: float_1, str_1: tuple_0}
        namespace_0 = module_1.Namespace(**dict_1)
    except BaseException:
        pass