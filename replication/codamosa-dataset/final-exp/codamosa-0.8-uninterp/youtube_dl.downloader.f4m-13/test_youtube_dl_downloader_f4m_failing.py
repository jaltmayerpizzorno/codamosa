# Automatically generated by Pynguin.
import youtube_dl.downloader.f4m as module_0
import youtube_dl.compat as module_1

def test_case_0():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_bootstrap_info()
    except BaseException:
        pass

def test_case_1():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_long_long()
    except BaseException:
        pass

def test_case_2():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_char()
    except BaseException:
        pass

def test_case_3():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_string()
    except BaseException:
        pass

def test_case_4():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x92\xf85\xd2'
        list_0 = [bytes_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_6():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '5\x0cB%qt>N=s'
        var_0 = module_0.build_fragments_list(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        data_truncated_error_0 = module_0.DataTruncatedError()
        bytes_0 = b''
        var_0 = module_0.write_unsigned_int(data_truncated_error_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        flv_reader_0 = module_0.FlvReader()
        list_0 = [flv_reader_0]
        var_0 = module_0.write_metadata_tag(flv_reader_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = module_0.write_flv_header(flv_reader_0)
        var_1 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -2597
        data_truncated_error_0 = module_0.DataTruncatedError()
        flv_reader_0 = module_0.FlvReader()
        float_0 = 173.8
        f4m_f_d_0 = module_0.F4mFD(int_0, float_0)
        var_0 = f4m_f_d_0.real_download(data_truncated_error_0, flv_reader_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -619.68
        dict_0 = None
        var_0 = module_0.write_metadata_tag(float_0, dict_0)
        list_0 = [dict_0]
        flv_reader_0 = module_0.FlvReader(*list_0)
        data_truncated_error_0 = module_0.DataTruncatedError()
        flv_reader_1 = module_0.FlvReader()
        var_1 = flv_reader_1.read_unsigned_char()
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xa0#\xcb\x94\xfeQ.\xf6[Y^[\x1eXE\xc2W\x00\xf4\xe7'
        var_0 = module_0.read_bootstrap_info(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n        <manifest xmlns="http://ns.adobe.com/f4m/1.0"/>\n    '
        var_0 = module_1.compat_etree_fromstring(str_0)
        var_1 = module_0.get_base_url(var_0)
        str_1 = '\n        <manifest xmlns="http://ns.adobe.com/f4m/1.0">\n            </aseURL>http://media.example.com/base/url</baseURL>\n        </manifest>\n    '
        var_2 = module_1.compat_etree_fromstring(str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'segments'
        str_1 = 'fragments'
        bool_0 = False
        str_2 = 'segment_run'
        int_0 = 28
        int_1 = 1588
        int_2 = (int_0, int_1)
        int_3 = [int_2]
        int_4 = {str_2: int_3}
        int_5 = [int_4]
        str_3 = 'first'
        var_0 = {str_0: bool_0, str_3: str_0, str_3: int_0, str_2: bool_0}
        var_1 = {str_2: bool_0, str_0: int_2, str_3: int_1, str_0: bool_0}
        var_2 = [var_0, var_1]
        var_3 = {str_1: var_2}
        var_4 = [var_3]
        var_5 = {str_0: bool_0, str_0: int_5, str_1: var_4}
        var_6 = module_0.build_fragments_list(var_5)
    except BaseException:
        pass