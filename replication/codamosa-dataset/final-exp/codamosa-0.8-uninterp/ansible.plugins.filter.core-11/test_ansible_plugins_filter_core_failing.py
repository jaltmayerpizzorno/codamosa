# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0
import ansible.errors as module_1

def test_case_0():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        str_0 = '--icmpv6-type'
        bool_0 = True
        tuple_0 = (bool_0,)
        var_0 = module_0.to_yaml(tuple_0)
        dict_1 = {str_0: dict_0}
        var_1 = module_0.randomize_list(dict_1)
        list_0 = []
        var_2 = module_0.subelements(dict_1, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ': R(A'
        int_0 = 1134
        list_0 = [str_0]
        var_0 = module_0.to_nice_yaml(int_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        var_0 = module_0.to_nice_json(int_0)
        str_0 = 'J5o25^d'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: int_0}
        var_1 = module_0.comment(str_0, **dict_0)
        str_1 = "FmZSRy'ZaT;:GPW"
        var_2 = module_0.regex_replace(str_0, str_1)
        var_3 = module_0.to_bool(int_0)
        filter_module_0 = module_0.FilterModule(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        var_0 = module_0.quote(list_0)
        int_0 = -460
        var_1 = module_0.to_datetime(int_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = None
        dict_0 = {int_0: int_0, int_0: int_0}
        var_0 = module_0.strftime(int_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '"0G;'
        var_0 = module_0.strftime(str_0)
        list_0 = [str_0]
        var_1 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '--icmpv6EtyLe'
        float_0 = -3737.0
        float_1 = -3366.52
        list_0 = [str_0, float_1, float_1, str_0]
        list_1 = []
        var_0 = module_0.from_yaml_all(list_1)
        var_1 = module_0.regex_search(float_0, float_1, *list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Bitrig'
        dict_0 = None
        str_1 = '%x@5 (Rb.'
        str_2 = 'mH@>&@)Jn*)'
        dict_1 = {str_0: dict_0, str_1: str_1, str_2: str_0, str_0: dict_0}
        var_0 = module_0.get_hash(dict_1)
        bool_0 = True
        var_1 = module_0.from_yaml(bool_0)
        list_0 = None
        str_3 = 'auth_timeout'
        str_4 = '{i^*\x0b%'
        str_5 = "c\\Uo=q'kTf"
        var_2 = module_0.from_yaml_all(str_5)
        bytes_0 = None
        str_6 = 'M\x0c\thS->}ol+h?@Mr#FW'
        dict_2 = {str_3: list_0, str_4: bytes_0, str_6: str_3}
        filter_module_0 = module_0.FilterModule(*list_0, **dict_2)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1317
        dict_0 = {int_0: int_0}
        bool_0 = None
        str_0 = "$+pB8iFr'rg4i\t|C8\n%,"
        var_0 = module_0.randomize_list(str_0)
        list_0 = []
        dict_1 = {}
        var_1 = module_0.regex_search(dict_0, bool_0, *list_0, **dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 737
        var_0 = module_0.get_hash(int_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '--icmpv6EtyLe'
        float_0 = -3366.52
        set_0 = set()
        var_0 = module_0.get_hash(set_0)
        list_0 = [str_0, float_0, float_0, str_0]
        var_1 = module_0.regex_search(float_0, float_0, *list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        filter_module_0 = None
        var_0 = module_0.get_encrypted_password(filter_module_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = None
        int_0 = 20
        dict_0 = {int_0: int_0}
        var_0 = module_0.get_encrypted_password(float_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        filter_module_0 = module_0.FilterModule()
        int_0 = -268
        var_0 = module_0.to_uuid(filter_module_0, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = "'q$,+7_GRY?"
        dict_0 = {str_0: str_0, str_0: str_0}
        float_0 = 885.3561
        list_0 = [dict_0, str_0, float_0]
        var_0 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        tuple_0 = ()
        var_0 = module_0.comment(tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '\n'
        float_0 = None
        var_0 = module_0.extract(str_0, str_0, float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = -1890.2
        filter_module_0 = None
        list_0 = []
        var_0 = module_0.randomize_list(list_0)
        dict_0 = {filter_module_0: filter_module_0, filter_module_0: float_0, float_0: float_0}
        var_1 = module_0.to_uuid(dict_0)
        str_0 = 'jn}(IVv\t$\x0c300]S{(~'
        dict_1 = {str_0: float_0, str_0: str_0}
        var_2 = module_0.do_groupby(float_0, dict_0, dict_1)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\x1d\n\xcd$\xc01\x0c\x8f\xe8\x95\r\x8f\xd9\x1c\x15y\x9c\xd1]\xe4'
        tuple_0 = ()
        var_0 = module_0.b64decode(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '\t],'
        var_0 = module_0.subelements(str_0, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '\n'
        var_0 = module_0.combine()
        list_0 = [str_0]
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = None
        str_0 = 'bWy//o`#ObwoEd W'
        var_0 = module_0.mandatory(int_0, str_0)
        var_1 = module_0.comment(str_0)
        filter_module_0 = module_0.FilterModule()
        var_2 = module_0.list_of_dict_key_value_elements_to_dict(filter_module_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '/var/lib/apt/lists'
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.path_join(list_0)
        list_1 = [str_0, str_0, str_0]
        var_1 = module_0.get_hash(str_0, list_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '#'
        var_0 = module_0.to_bool(str_0)
        complex_0 = None
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.path_join(complex_0)
    except BaseException:
        pass

def test_case_25():
    try:
        var_0 = module_0.combine()
        list_0 = None
        str_0 = '-3icmpv~6EtyL5?|e'
        var_1 = module_0.regex_replace()
        bool_0 = True
        var_2 = module_0.path_join(str_0)
        var_3 = module_0.mandatory(bool_0, str_0)
        float_0 = -4595.19
        var_4 = module_0.randomize_list(float_0)
        list_1 = [var_1, list_0, list_0]
        var_5 = module_0.subelements(list_1, float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '?V`q_VE(1A3'
        var_0 = module_0.path_join(str_0)
        list_0 = []
        var_1 = module_0.combine(*list_0)
        bytes_0 = b'\xbe]D1\xad\xb0\xb6\x8e\x08\xd7\xed\x16\x83nV'
        var_2 = module_0.mandatory(bytes_0)
        filter_module_0 = module_0.FilterModule()
        var_3 = filter_module_0.filters()
        bool_0 = True
        var_4 = module_0.to_bool(bool_0)
        var_5 = module_0.to_nice_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'l'
        bytes_0 = b";\x8c$\xf9t\xfe4a\x0c'\xa7g\xc0%\xe1\x12\x97J_\x9a"
        var_0 = module_0.regex_findall(str_0, bytes_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'?\x85p\xd8\xa3\x04)\xa0\x92\xa7M'
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        var_0 = module_0.regex_findall(bytes_0, set_0, set_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'mq}Q1?[.VX<MCc}\\'
        str_1 = 'rmgroup'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        float_0 = 0.001
        var_0 = module_0.get_encrypted_password(dict_0, float_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '\n'
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'Ay'
        dict_0 = {str_0: str_0}
        var_0 = module_0.subelements(dict_0, str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '0BOa@g'
        var_0 = module_0.combine()
        list_0 = [var_0, str_0]
        list_1 = [list_0]
        tuple_0 = (str_0, list_1)
        var_1 = module_0.subelements(list_1, tuple_0, list_1)
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = False
        float_0 = -3231.3
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(bool_0, float_0)
    except BaseException:
        pass

def test_case_34():
    try:
        list_0 = None
        str_0 = '--icmpv6type'
        bytes_0 = b'\x00\xd2\xa0<\xc6\xaf\x0e;\xc9"R\x08\xe1j\x9c'
        set_0 = set()
        var_0 = module_0.extract(bytes_0, str_0, list_0, set_0)
    except BaseException:
        pass

def test_case_35():
    try:
        float_0 = 1364.605857
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = filter_module_0.filters()
        var_2 = filter_module_0.filters()
        var_3 = filter_module_0.filters()
        var_4 = filter_module_0.filters()
        var_5 = filter_module_0.filters()
        var_6 = filter_module_0.filters()
        bytes_0 = None
        int_0 = 885
        var_7 = module_0.rand(bytes_0, float_0, int_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 'python'
        tuple_0 = ()
        var_0 = module_0.to_bool(tuple_0)
        list_0 = [var_0, tuple_0, str_0]
        var_1 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_37():
    try:
        filter_module_0 = module_0.FilterModule()
        float_0 = -1797.83
        var_0 = module_0.regex_escape(filter_module_0, float_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = '\n'
        list_0 = [str_0, str_0]
        int_0 = 1302
        var_0 = module_0.rand(list_0, int_0)
        str_1 = '\t],'
        var_1 = module_0.subelements(str_0, str_1)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = '\n'
        bytes_0 = b'\x93 -\xab\x80'
        var_0 = module_0.from_yaml_all(bytes_0)
        float_0 = 1.0
        list_0 = [str_0, float_0, str_0]
        str_1 = '.\n&E.'
        str_2 = ',[R,P`q//jM'
        dict_0 = {str_1: list_0, str_2: float_0}
        var_1 = module_0.combine(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'T83!yN{1#F>I"'
        float_0 = 0.001
        var_0 = module_0.regex_replace(float_0)
        bool_0 = False
        set_0 = {str_0, str_0, bool_0}
        str_1 = '+5mG"DaQ\'-\\\n\r4*'
        var_1 = module_0.rand(set_0, bool_0, str_1)
    except BaseException:
        pass

def test_case_41():
    try:
        filter_module_0 = None
        dict_0 = {filter_module_0: filter_module_0, filter_module_0: filter_module_0, filter_module_0: filter_module_0, filter_module_0: filter_module_0}
        int_0 = 3737
        int_1 = -1204
        list_0 = [filter_module_0]
        var_0 = module_0.rand(dict_0, int_0, int_1, list_0)
    except BaseException:
        pass

def test_case_42():
    try:
        list_0 = None
        str_0 = '--icmpv6-type'
        var_0 = module_0.regex_search(list_0, str_0)
        var_1 = module_0.regex_replace()
        dict_0 = {str_0: var_1}
        var_2 = module_0.to_json(dict_0)
        set_0 = {var_0, var_2}
        str_1 = 'python'
        float_0 = -1315.4314
        var_3 = module_0.rand(set_0, str_1, float_0)
    except BaseException:
        pass

def test_case_43():
    try:
        dict_0 = {}
        str_0 = '--icmpv6-type'
        dict_1 = {str_0: dict_0}
        list_0 = []
        var_0 = module_0.subelements(dict_1, list_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = '--icmpv6EtyLe'
        float_0 = -3366.52
        list_0 = [str_0, float_0, float_0, str_0]
        var_0 = module_0.regex_search(float_0, float_0, *list_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '\n'
        var_0 = module_0.combine()
        float_0 = None
        list_0 = [str_0]
        list_1 = [list_0]
        var_1 = module_0.randomize_list(list_1, list_1)
        var_2 = module_0.extract(str_0, str_0, float_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'f}QRN/\n8{ed0{R/'
        var_0 = module_0.from_yaml(str_0)
        str_1 = '*PzIe\x0bq=G^qVb"\'f'
        list_0 = [str_1, str_1]
        int_0 = 1325
        var_1 = module_0.rand(list_0, int_0)
        str_2 = '24<\tYf1K`'
        bytes_0 = b'Q6!\x99-\xad\xf9\xeeE\xbdN?\x96\xfa\xb2Lz\x17\xb2'
        var_2 = module_0.subelements(bytes_0, str_2, bytes_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'T,_q"='
        dict_0 = {str_0: str_0}
        filter_module_0 = module_0.FilterModule()
        bool_0 = True
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(dict_0, filter_module_0, bool_0)
        str_1 = 'aaV_7&he6-LWR\x0c&UW'
        str_2 = 'O>_8h#jrkX~'
        var_1 = module_0.to_json(str_2)
        list_0 = [str_2, str_2, str_2]
        float_0 = -809.3592
        var_2 = module_0.randomize_list(float_0)
        var_3 = module_0.subelements(list_0, str_1)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = '0BOa@g'
        var_0 = module_0.combine()
        list_0 = [var_0, str_0]
        var_1 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = '\n'
        complex_0 = None
        int_0 = None
        set_0 = {str_0}
        var_0 = module_0.ternary(complex_0, int_0, str_0, set_0)
        var_1 = module_0.combine()
        list_0 = [str_0]
        var_2 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = None
        bool_0 = False
        tuple_0 = (bool_0, bool_0)
        int_0 = -324
        tuple_1 = (dict_0, str_1, tuple_0, int_0)
        list_0 = [tuple_1, tuple_0, tuple_0]
        var_0 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_51():
    try:
        int_0 = 1302
        float_0 = 924.0
        tuple_0 = (int_0,)
        dict_0 = {}
        list_0 = [dict_0, float_0]
        var_0 = module_0.extract(float_0, int_0, tuple_0, list_0)
    except BaseException:
        pass

def test_case_52():
    try:
        dict_0 = {}
        str_0 = '--icmpv6-type'
        dict_1 = {str_0: dict_0}
        var_0 = module_0.randomize_list(dict_1)
        list_0 = []
        int_0 = None
        int_1 = None
        list_1 = [str_0, str_0, var_0]
        var_1 = module_0.ternary(int_1, list_1, list_0)
        var_2 = module_0.regex_search(int_0, dict_1, **dict_1)
    except BaseException:
        pass

def test_case_53():
    try:
        var_0 = module_0.combine()
        list_0 = []
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = '_|3O'
        int_0 = -230
        var_0 = module_0.to_nice_yaml(int_0)
        dict_0 = {str_0: str_0}
        tuple_0 = ()
        var_1 = module_0.to_bool(tuple_0)
        list_0 = [str_0, tuple_0, var_1, var_1]
        float_0 = -3046.6463
        ansible_filter_error_0 = module_1.AnsibleFilterError(float_0, dict_0)
        var_2 = module_0.randomize_list(list_0, ansible_filter_error_0)
        list_1 = [tuple_0, str_0]
        var_3 = module_0.combine(*list_1)
        var_4 = module_0.to_nice_yaml(str_0, *list_1)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = 'T,_q"='
        tuple_0 = (str_0,)
        bytes_0 = b'\xec\xacl\xaeq8\xde\x9ef\xdc\xd0 -\xb0_'
        bool_0 = False
        list_0 = [bytes_0, str_0]
        var_0 = module_0.regex_replace(tuple_0, bytes_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_56():
    try:
        complex_0 = None
        str_0 = 'T,_q"='
        dict_0 = {str_0: str_0}
        tuple_0 = ()
        var_0 = module_0.to_bool(tuple_0)
        filter_module_0 = module_0.FilterModule()
        bool_0 = True
        str_1 = '%prog -U <repository> [options] [<playbook.yml>]'
        var_1 = module_0.regex_findall(complex_0, str_0, str_1, filter_module_0)
        var_2 = module_0.dict_to_list_of_dict_key_value_elements(dict_0, filter_module_0, bool_0)
        str_2 = 'aaV_7&he6-LWR\x0c&UW'
        str_3 = 'O>_8h#jrkX~'
        var_3 = module_0.to_json(str_3)
        list_0 = [str_3, str_3, str_3]
        float_0 = -809.3592
        var_4 = module_0.randomize_list(float_0)
        var_5 = module_0.subelements(list_0, str_2)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = '/etc/resolv.conf'
        var_0 = module_0.fileglob(str_0)
        str_1 = '/etc/resolv.conf*'
        var_1 = module_0.fileglob(str_1)
        int_0 = 1391
        var_2 = module_0.fileglob(int_0)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = '[qXr{F'
        list_0 = None
        var_0 = module_0.to_uuid(str_0, list_0)
    except BaseException:
        pass

def test_case_59():
    try:
        filter_module_0 = module_0.FilterModule()
        set_0 = {filter_module_0, filter_module_0, filter_module_0}
        list_0 = []
        bytes_0 = b'\xc6\xe5\xf5lK\xa4Vs\xa8'
        var_0 = filter_module_0.filters()
        var_1 = module_0.rand(filter_module_0, set_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = 'uoo'
        var_0 = module_0.regex_escape(str_0)
        var_1 = module_0.regex_escape(str_0)
        str_1 = '(foo'
        var_2 = module_0.regex_escape(str_1)
        str_2 = '[foo'
        var_3 = module_0.regex_escape(str_2)
        str_3 = ']foo'
        var_4 = module_0.regex_escape(str_3)
        str_4 = '{foo'
        var_5 = module_0.regex_escape(str_4)
        filter_module_0 = module_0.FilterModule()
        ansible_filter_error_0 = module_1.AnsibleFilterError(filter_module_0)
        set_0 = {str_0, str_3, str_3, str_1}
        list_0 = [var_4]
        var_6 = module_0.regex_search(ansible_filter_error_0, set_0, *list_0)
    except BaseException:
        pass

def test_case_61():
    try:
        str_0 = 'yes'
        var_0 = module_0.to_bool(str_0)
        tuple_0 = None
        bool_0 = None
        str_1 = None
        str_2 = "HB;\\e^m.F3'B4\ntsEo8\r"
        dict_0 = {str_1: var_0, str_2: var_0, str_1: tuple_0}
        var_1 = module_0.comment(tuple_0, bool_0, **dict_0)
    except BaseException:
        pass