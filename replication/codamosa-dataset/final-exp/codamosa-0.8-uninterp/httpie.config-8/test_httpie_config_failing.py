# Automatically generated by Pynguin.
import pathlib as module_0
import httpie.config as module_1

def test_case_0():
    try:
        path_0 = module_0.Path()
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        var_0 = base_config_dict_0.load()
    except BaseException:
        pass

def test_case_1():
    try:
        config_0 = module_1.Config()
        var_0 = config_0.save()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Zj!hu{W\x0b'
        str_1 = '%s; charset=%s'
        dict_0 = {str_0: str_0, str_1: str_0}
        path_0 = module_0.Path(**dict_0)
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        var_0 = base_config_dict_0.delete()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'te1t.json'
        base_config_dict_0 = module_1.BaseConfigDict(str_0)
        var_0 = base_config_dict_0.save()
    except BaseException:
        pass

def test_case_4():
    try:
        path_0 = module_1.get_default_config_dir()
        list_0 = [path_0, path_0, path_0]
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        var_0 = base_config_dict_0.save(list_0)
        base_config_dict_1 = module_1.BaseConfigDict(path_0)
        var_1 = base_config_dict_1.delete()
        path_1 = None
        base_config_dict_2 = module_1.BaseConfigDict(path_1)
        var_2 = base_config_dict_2.delete()
    except BaseException:
        pass

def test_case_5():
    try:
        path_0 = module_1.get_default_config_dir()
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        base_config_dict_1 = module_1.BaseConfigDict(path_0)
        var_0 = path_0.is_mount()
        var_1 = path_0.__enter__()
        path_1 = module_0.Path()
        base_config_dict_2 = module_1.BaseConfigDict(path_0)
        base_config_dict_3 = module_1.BaseConfigDict(path_1)
        base_config_dict_4 = module_1.BaseConfigDict(path_0)
        base_config_dict_5 = module_1.BaseConfigDict(path_0)
        var_2 = base_config_dict_5.load()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n        If `auth_parse` is set to `True`, then `username`\n        and `password` contain the parsed credentials.\n\n        Use `self.raw_auth` to access the raw value passed through\n        `--auth, -a`.\n\n        Return a ``requests.auth.AuthBase`` subclass instance.\n\n        '
        list_0 = [str_0, str_0, str_0]
        dict_0 = {}
        path_0 = module_0.Path(**dict_0)
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        bool_0 = base_config_dict_0.is_new()
        str_1 = ''
        path_1 = module_1.get_default_config_dir()
        base_config_dict_1 = module_1.BaseConfigDict(path_1)
        var_0 = base_config_dict_1.delete()
        dict_1 = {str_1: str_1}
        path_2 = module_0.Path(*list_0, **dict_1)
        base_config_dict_2 = module_1.BaseConfigDict(path_2)
        var_1 = base_config_dict_2.save()
    except BaseException:
        pass