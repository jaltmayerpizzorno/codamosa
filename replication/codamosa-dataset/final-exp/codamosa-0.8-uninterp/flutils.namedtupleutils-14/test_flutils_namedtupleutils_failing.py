# Automatically generated by Pynguin.
import collections.abc as module_0
import flutils.namedtupleutils as module_1
import types as module_2

def test_case_0():
    try:
        mapping_0 = module_0.Mapping()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1201.0
        bool_0 = True
        float_1 = 552.4
        list_0 = [float_1]
        tuple_0 = (float_0, bool_0, list_0)
        var_0 = module_1.to_namedtuple(tuple_0)
        var_1 = None
        var_2 = module_1.to_namedtuple(var_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'e_qDz\\2<L5]c4vZn+\tl'
        var_0 = module_1.to_namedtuple(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        var_0 = module_1.to_namedtuple(list_0)
        var_1 = module_1.to_namedtuple(list_0)
        var_2 = module_1.to_namedtuple(list_0)
        var_3 = module_1.to_namedtuple(list_0)
        str_0 = 'Y?ytJw?'
        dict_0 = {str_0: var_0}
        simple_namespace_0 = module_2.SimpleNamespace(**dict_0)
        var_4 = module_1.to_namedtuple(simple_namespace_0)
        list_1 = [var_4, var_2]
        var_5 = module_1.to_namedtuple(list_1)
        mapping_0 = module_0.Mapping()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0]
        var_0 = module_1.to_namedtuple(list_0)
        list_1 = []
        var_1 = module_1.to_namedtuple(list_1)
        var_2 = module_1.to_namedtuple(list_1)
        var_3 = None
        var_4 = module_1.to_namedtuple(var_3)
    except BaseException:
        pass

def test_case_5():
    try:
        simple_namespace_0 = module_2.SimpleNamespace()
        var_0 = module_1.to_namedtuple(simple_namespace_0)
        list_0 = []
        var_1 = module_1.to_namedtuple(list_0)
        var_2 = module_1.to_namedtuple(list_0)
        str_0 = 'Ygyt8w\x0c'
        dict_0 = {str_0: var_1}
        simple_namespace_1 = module_2.SimpleNamespace(**dict_0)
        var_3 = module_1.to_namedtuple(list_0)
        var_4 = module_1.to_namedtuple(simple_namespace_1)
        var_5 = module_1.to_namedtuple(simple_namespace_1)
        var_6 = module_1.to_namedtuple(simple_namespace_0)
        var_7 = module_1.to_namedtuple(simple_namespace_1)
        var_8 = module_1.to_namedtuple(simple_namespace_0)
        mapping_0 = module_0.Mapping()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'bftE'
        list_0 = None
        str_1 = '; Jn-s)[Ma3'
        bytes_0 = b'R\xd0\xb7\x91\x03='
        float_0 = 726.36
        dict_0 = {bytes_0: list_0, str_0: bytes_0, list_0: float_0, float_0: str_0}
        tuple_0 = (str_1, dict_0)
        bool_0 = True
        tuple_1 = (list_0, tuple_0, bool_0)
        var_0 = module_1.to_namedtuple(tuple_1)
    except BaseException:
        pass