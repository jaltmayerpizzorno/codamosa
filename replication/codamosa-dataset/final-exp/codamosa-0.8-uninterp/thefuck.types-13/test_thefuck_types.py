# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'ls'
    command_0 = module_0.Command(str_0, str_0)

def test_case_2():
    float_0 = 0.85
    list_0 = [float_0, float_0, float_0]
    bytes_0 = b'\xaf0'
    int_0 = -3100
    corrected_command_0 = module_0.CorrectedCommand(bytes_0, bytes_0, int_0)
    str_0 = 'Lls,vCYWdGd\x0b)pDrkRb:'
    command_0 = module_0.Command(list_0, str_0)
    var_0 = command_0.__eq__(list_0)
    list_1 = [bytes_0, list_0, bytes_0, int_0]
    bool_0 = True
    str_1 = 'j)%=n\\t#H!7^f$F'
    bytes_1 = b''
    rule_0 = module_0.Rule(list_0, corrected_command_0, list_1, bool_0, list_1, str_1, bytes_1)
    var_1 = rule_0.__repr__()

def test_case_3():
    str_0 = ''
    command_0 = module_0.Command(str_0, str_0)
    bool_0 = True
    rule_0 = module_0.Rule(str_0, command_0, command_0, command_0, command_0, command_0, bool_0)
    var_0 = rule_0.is_match(command_0)
    var_1 = rule_0.__repr__()

def test_case_4():
    str_0 = '%{'
    var_0 = None
    bool_0 = False
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    command_0 = module_0.Command(str_0, var_0)
    var_1 = rule_0.is_match(command_0)
    bool_1 = True
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    var_2 = command_0.update()
    var_3 = rule_1.is_match(command_0)

def test_case_5():
    str_0 = ''
    command_0 = module_0.Command(str_0, str_0)
    bool_0 = True
    rule_0 = module_0.Rule(str_0, command_0, command_0, command_0, command_0, command_0, bool_0)
    var_0 = rule_0.is_match(command_0)

def test_case_6():
    str_0 = 'AwjWHs/6'
    var_0 = None
    bool_0 = False
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    str_1 = "B'\n3h\nss%K"
    var_1 = rule_0.__eq__(str_1)
    command_0 = module_0.Command(str_0, var_0)
    var_2 = rule_0.is_match(command_0)
    bool_1 = True
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    var_3 = rule_1.is_match(command_0)

def test_case_7():
    str_0 = 'k\\sHEMTf+%^\rn+5d:'
    var_0 = None
    bool_0 = False
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    command_0 = module_0.Command(str_0, var_0)
    var_1 = rule_0.is_match(command_0)
    bool_1 = True
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    var_2 = rule_1.is_match(command_0)
    var_3 = rule_1.__eq__(rule_0)

def test_case_8():
    bytes_0 = b'\xaf0'
    int_0 = -3100
    corrected_command_0 = module_0.CorrectedCommand(bytes_0, bytes_0, int_0)
    tuple_0 = (int_0,)
    var_0 = corrected_command_0.__eq__(tuple_0)

def test_case_9():
    str_0 = ''
    str_1 = '5X\ne\npzlu]&[f'
    str_2 = 'Q"'
    corrected_command_0 = module_0.CorrectedCommand(str_1, str_1, str_2)
    bytes_0 = b''
    corrected_command_1 = module_0.CorrectedCommand(corrected_command_0, str_0, bytes_0)
    var_0 = corrected_command_1.__hash__()
    bool_0 = False
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    command_0 = module_0.Command(str_0, corrected_command_1)
    var_1 = rule_0.is_match(command_0)
    command_1 = module_0.Command(str_0, var_1)
    var_2 = rule_0.is_match(command_1)

def test_case_10():
    str_0 = ''
    var_0 = None
    float_0 = 489.3729
    dict_0 = {str_0: str_0}
    corrected_command_0 = module_0.CorrectedCommand(float_0, float_0, dict_0)
    var_1 = corrected_command_0.__repr__()
    bool_0 = False
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    command_0 = module_0.Command(str_0, var_0)
    var_2 = rule_0.is_match(command_0)
    bool_1 = True
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    var_3 = rule_1.is_match(command_0)

def test_case_11():
    bool_0 = False
    str_0 = ''
    str_1 = '\x03'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: bool_0, str_1: str_1}
    bytes_0 = b'\xa4\xe4b\x0f\x8c8*\xbe4\xd5o\x8e\xb0?\xd3\x01\xdf\xf2#='
    float_0 = 1940.36416
    command_0 = module_0.Command(bytes_0, float_0)
    var_0 = command_0.__eq__(bytes_0)
    command_1 = module_0.Command(bool_0, dict_0)
    str_2 = '56:r4= AB^e99,Xm@=*'
    list_0 = [command_1, command_1, var_0, str_0]
    str_3 = '"+6m5y'
    corrected_command_0 = None
    str_4 = None
    int_0 = 224
    dict_1 = {var_0: bytes_0}
    bytes_1 = b'T\xf4$x~\x87_L\x0bA\x14\xd4'
    str_5 = '!mA17miM"\rDb_'
    set_0 = {bytes_1, str_5}
    tuple_0 = (set_0, list_0)
    dict_2 = None
    dict_3 = {}
    list_1 = [set_0, dict_3]
    rule_0 = module_0.Rule(dict_1, set_0, tuple_0, dict_2, dict_0, list_1, set_0)
    tuple_1 = (int_0, rule_0)
    tuple_2 = (float_0, tuple_1, tuple_0, bool_0)
    dict_4 = {}
    str_6 = 'RC\x0b7O}()'
    list_2 = None
    rule_1 = module_0.Rule(bytes_0, tuple_2, set_0, list_1, dict_4, str_6, list_2)
    rule_2 = module_0.Rule(list_0, command_0, dict_0, str_3, corrected_command_0, str_4, rule_1)
    command_2 = module_0.Command(list_0, rule_2)
    var_1 = command_0.__eq__(command_2)
    str_7 = 'Ap2f'
    tuple_3 = (bool_0,)
    int_1 = -885
    dict_5 = {str_7: tuple_3, tuple_3: float_0}
    rule_3 = module_0.Rule(str_7, float_0, tuple_3, int_1, str_7, bool_0, dict_5)
    command_3 = module_0.Command(command_1, str_2)
    int_2 = 3000
    command_4 = module_0.Command(int_2, dict_0)
    var_2 = command_4.update()
    var_3 = command_3.__repr__()
    dict_6 = {bool_0: var_3}
    list_3 = [command_1, str_2]
    int_3 = 153
    rule_4 = module_0.Rule(dict_0, int_3, list_3, dict_6, list_3, dict_0, int_3)
    tuple_4 = ()
    var_4 = rule_4.__repr__()
    rule_5 = module_0.Rule(dict_6, list_3, rule_4, rule_4, tuple_4, dict_0, tuple_4)
    var_5 = rule_5.get_corrected_commands(bool_0)

def test_case_12():
    str_0 = ''
    var_0 = None
    bool_0 = False
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    command_0 = module_0.Command(str_0, var_0)
    var_1 = rule_0.is_match(command_0)
    bool_1 = True
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    var_2 = rule_1.is_match(command_0)