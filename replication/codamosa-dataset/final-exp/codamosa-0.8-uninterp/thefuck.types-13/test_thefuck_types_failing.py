# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        dict_0 = {}
        float_0 = -1535.35
        set_0 = set()
        corrected_command_0 = module_0.CorrectedCommand(float_0, set_0, set_0)
        var_0 = corrected_command_0.run(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2758.139
        list_0 = [float_0, float_0, float_0]
        bytes_0 = b'b\xad\x88\xc3q?B'
        str_0 = ''
        command_0 = module_0.Command(bytes_0, str_0)
        bytes_1 = b'\xaf0'
        int_0 = -3062
        corrected_command_0 = module_0.CorrectedCommand(bytes_1, bytes_1, int_0)
        str_1 = 'Lls,vCYWdGd\x0b)pDrkRb:'
        command_1 = module_0.Command(list_0, str_1)
        var_0 = command_1.__eq__(list_0)
        list_1 = [bytes_1, list_0, bytes_1, int_0]
        bool_0 = True
        list_2 = []
        str_2 = 'j)%=n\\t#H!7^f$F'
        bytes_2 = b''
        rule_0 = module_0.Rule(list_0, corrected_command_0, list_1, bool_0, list_2, str_2, bytes_2)
        var_1 = command_1.update()
        var_2 = corrected_command_0.run(list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        list_0 = [str_0]
        str_1 = 'sudo {}'
        int_0 = -2641
        corrected_command_0 = module_0.CorrectedCommand(list_0, str_1, int_0)
        var_0 = None
        bool_0 = False
        rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
        tuple_0 = ()
        str_2 = None
        tuple_1 = (tuple_0, str_2)
        command_0 = module_0.Command(tuple_1, tuple_1)
        bytes_0 = b'\xd5\xce\xa2\xbc\xc8\xd0f\x1e\xc3\xe8\xd4\xf3\x1e\x1f\xf1\xac:\x9a \x8d'
        bytes_1 = b'\xe9!\x1f\xe8\x9b\x90>\x0f\xde\xb2'
        corrected_command_1 = module_0.CorrectedCommand(command_0, bytes_0, bytes_1)
        float_0 = 1562.9423
        bytes_2 = b'_\x0616sXa\xdc\x1c\x04\xb8\xc0I\x0e\xedx/g'
        dict_0 = {float_0: str_2, bool_0: var_0, var_0: str_2, var_0: var_0}
        list_1 = [str_2, tuple_1]
        corrected_command_2 = module_0.CorrectedCommand(dict_0, list_1, tuple_0)
        var_1 = corrected_command_2.__eq__(bytes_2)
        var_2 = corrected_command_0.__eq__(corrected_command_2)
        str_3 = 'U-'
        float_1 = -571.574
        corrected_command_3 = module_0.CorrectedCommand(str_3, float_1, str_1)
        command_1 = module_0.Command(corrected_command_3, bytes_0)
        var_3 = rule_0.is_match(rule_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'rule'
        bool_0 = True
        var_0 = lambda cmd: bool_0
        str_1 = 'yes'
        str_2 = 'no'
        str_3 = [str_1, str_2]
        var_1 = lambda cmd: str_3
        var_2 = None
        int_0 = 5
        rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, var_2, int_0, bool_0)
        str_4 = 'echo'
        command_0 = module_0.Command(str_4, str_4)
        corrected_command_0 = module_0.CorrectedCommand(str_1, var_2, int_0)
        int_1 = 10
        corrected_command_1 = module_0.CorrectedCommand(str_2, var_2, int_1)
        var_3 = rule_0.get_corrected_commands(command_0)
        var_4 = list(var_3)
    except BaseException:
        pass