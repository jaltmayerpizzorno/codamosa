# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        str_0 = "$J)R'r];h,ibObNFy"
        float_0 = 1000.0
        set_0 = {str_0, str_0, str_0, float_0}
        module_args_parser_0 = module_0.ModuleArgsParser(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'c|v.,A6"%/_\'z*`'
        dict_0 = {str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'copy'
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'c|v.,A6"%/_\'z*`'
        dict_0 = {str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse(module_args_parser_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'tree'
        str_1 = 'delegate_to'
        str_2 = 'action'
        str_3 = 'I]H7xh'
        str_4 = {str_1: str_3, str_0: str_2, str_1: str_1, str_1: str_0, str_2: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        float_0 = 284.5797
        var_0 = module_args_parser_0.parse(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'copy'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_2 = {str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse()
        str_3 = {str_0: var_0}
        module_args_parser_1 = module_0.ModuleArgsParser(str_3)
        var_1 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'shell'
        str_1 = 'command'
        str_2 = 'echo "hello"'
        var_0 = dict(module=str_1, args=str_2)
        var_1 = dict(action=str_0, local_action=var_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_1)
        var_2 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'copy'
        str_1 = 'src'
        str_2 = 'dC3est'
        str_3 = 'file'
        str_4 = {str_1: str_3, str_2: str_2}
        str_5 = {str_0: str_4}
        module_args_parser_0 = module_0.ModuleArgsParser(str_5)
        var_0 = module_args_parser_0.parse()
        str_6 = 'action'
        str_7 = 'copy src=file dest=dest'
        str_8 = {str_0: str_7}
        str_9 = {str_6: str_8}
        module_args_parser_1 = module_0.ModuleArgsParser(str_9)
        var_1 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'copy'
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        str_2 = {str_0: module_args_parser_0}
        module_args_parser_1 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'copy'
        str_1 = 'C3est'
        str_2 = 'file'
        str_3 = {str_1: str_2, str_1: str_1}
        str_4 = {str_0: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        bool_0 = False
        var_0 = module_args_parser_0.parse(bool_0)
        var_1 = module_args_parser_0.parse()
        str_5 = 'action'
        str_6 = 'copy src=file estdest'
        str_7 = {bool_0: bool_0, str_0: str_1, str_5: module_args_parser_0, str_6: module_args_parser_0}
        module_args_parser_1 = module_0.ModuleArgsParser(str_7)
        var_2 = module_args_parser_0.parse()
        var_3 = module_args_parser_1.parse()
    except BaseException:
        pass