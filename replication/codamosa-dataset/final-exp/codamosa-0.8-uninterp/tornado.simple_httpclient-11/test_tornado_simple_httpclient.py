# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.ioloop as module_1
import socket as module_2
import tornado.tcpclient as module_3
import tornado.httpclient as module_4
import tornado.netutil as module_5

def test_case_0():
    pass

def test_case_1():
    str_0 = 'TD^0v*$ie|i'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)

def test_case_2():
    str_0 = ")T*(~`OB;\n=-.U:e@'cc"
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = h_t_t_p_timeout_error_0.__str__()

def test_case_3():
    str_0 = 'A|PvbjHT`2Pwk$'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)

def test_case_4():
    str_0 = 'A|PvbjHT`2Pwk$'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_5():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()

def test_case_6():
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    list_0 = [i_o_loop_0]
    dict_0 = {}
    simple_async_h_t_t_p_client_1 = module_0.SimpleAsyncHTTPClient(*list_0, **dict_0)
    simple_async_h_t_t_p_client_1.close()

def test_case_7():
    i_o_loop_0 = module_1.IOLoop()
    str_0 = '_&0{hr!2K;\r2tVL(Uk'
    int_0 = -1292
    address_family_0 = module_2.AddressFamily.AF_CAN
    str_1 = 'tornado.simple_httpclient'
    dict_0 = {str_1: address_family_0, str_1: str_0}
    t_c_p_client_0 = module_3.TCPClient(i_o_loop_0)
    i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, address_family_0, dict_0, str_1)
    str_2 = 'openid.return_to'
    float_0 = 0.5
    bool_0 = True
    h_t_t_p_request_0 = module_4.HTTPRequest(str_2, str_2, float_0, str_0, str_1, str_0, int_0, bool_0, dict_0)
    int_1 = -1558
    callable_0 = None
    int_2 = 74
    int_3 = 334
    h_t_t_p_connection_0 = module_0._HTTPConnection(int_1, h_t_t_p_request_0, i_o_stream_0, callable_0, int_0, t_c_p_client_0, int_2, int_3)
    h_t_t_p_connection_0.on_connection_close()

def test_case_8():
    i_o_loop_0 = module_1.IOLoop()
    async_h_t_t_p_client_0 = module_4.AsyncHTTPClient()
    str_0 = '?15y\r\r['
    bool_0 = True
    str_1 = 'SCRIPT_NAME'
    selectable_0 = module_1._Selectable()
    i_o_loop_0.remove_handler(selectable_0)
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_1)
    future_0 = async_h_t_t_p_client_0.fetch(str_0, bool_0)
    future_1 = async_h_t_t_p_client_0.fetch(str_0)
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_1)
    int_0 = -345
    resolver_0 = module_5.Resolver()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.initialize(h_t_t_p_timeout_error_0, int_0, resolver_0)
    h_t_t_p_timeout_error_1 = module_0.HTTPTimeoutError(str_1)
    str_2 = h_t_t_p_timeout_error_1.__str__()
    simple_async_h_t_t_p_client_1 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_1.close()
    future_2 = async_h_t_t_p_client_0.fetch(str_2)

def test_case_9():
    str_0 = '%uR~yS7^'
    i_o_loop_0 = module_1.IOLoop()
    async_h_t_t_p_client_0 = module_4.AsyncHTTPClient()
    str_1 = '?15y\r\r['
    bool_0 = True
    str_2 = 'SCRIPT_NAME'
    selectable_0 = module_1._Selectable()
    i_o_loop_0.remove_handler(selectable_0)
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_2)
    str_3 = h_t_t_p_stream_closed_error_0.__str__()
    future_0 = async_h_t_t_p_client_0.fetch(str_1, bool_0)
    future_1 = async_h_t_t_p_client_0.fetch(str_1)
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_2)
    int_0 = -345
    resolver_0 = module_5.Resolver()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.initialize(h_t_t_p_timeout_error_0, int_0, resolver_0)
    int_1 = -2236
    int_2 = 27
    str_4 = '?'
    callable_0 = None
    str_5 = h_t_t_p_timeout_error_0.__str__()
    callable_1 = None
    t_c_p_client_0 = None
    simple_async_h_t_t_p_client_1 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_1.close()
    bytes_0 = b'\xf1\xc8\x143\xf9E.\x95w\xccj@\x8f\xad\xaf'
    str_6 = 'hl\rx\\m]l'
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    h_t_t_p_request_0 = module_4.HTTPRequest(str_6, str_6, bool_0, str_6, bool_0, str_4, awaitable_0)
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_0, callable_1, int_2, t_c_p_client_0, int_0, int_1)
    h_t_t_p_connection_0.data_received(bytes_0)
    future_2 = async_h_t_t_p_client_0.fetch(str_5)