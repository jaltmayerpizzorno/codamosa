# Automatically generated by Pynguin.
import tornado.ioloop as module_0
import tornado.simple_httpclient as module_1
import tornado.tcpclient as module_2
import tornado.httpclient as module_3
import tornado.httputil as module_4
import tornado.netutil as module_5

def test_case_0():
    try:
        i_o_loop_0 = module_0.IOLoop()
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        str_0 = '\x0bBVh\r1]%'
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_0)
        int_0 = 45
        h_t_t_p_request_0 = None
        callable_0 = None
        tuple_0 = (simple_async_h_t_t_p_client_0,)
        t_c_p_client_0 = module_2.TCPClient()
        int_1 = 10
        h_t_t_p_connection_0 = module_1._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_0, tuple_0, int_0, t_c_p_client_0, int_1, int_0)
        h_t_t_p_connection_0.on_connection_close()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '%uR~yS7^'
        i_o_loop_0 = module_0.IOLoop()
        async_h_t_t_p_client_0 = module_3.AsyncHTTPClient()
        str_1 = '$Z;L\tb3}nO|eAO'
        str_2 = ';>'
        str_3 = 'ue_ZK$,T\r$.\nH,~RF@'
        dict_0 = {str_1: str_1, str_2: str_0, str_3: str_3, str_3: str_3}
        h_t_t_p_headers_0 = module_4.HTTPHeaders(**dict_0)
        bool_0 = True
        str_4 = '{Yt\rL.'
        optional_0 = None
        bool_1 = False
        future_0 = async_h_t_t_p_client_0.fetch(str_1, bool_1)
        h_t_t_p_request_0 = module_3.HTTPRequest(str_4, str_2, optional_0, str_3, future_0, bool_1, str_4, bool_1, bool_0)
        int_0 = -2864
        float_0 = 0.5
        selectable_0 = module_0._Selectable()
        h_t_t_p_request_1 = module_3.HTTPRequest(str_0, h_t_t_p_headers_0, str_4, str_2, float_0, bool_1, int_0, str_0, selectable_0, int_0, str_4, bool_0, bool_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '%uR~yS7^'
        i_o_loop_0 = module_0.IOLoop()
        str_1 = '$Z;L\tb3}nO|eAO'
        str_2 = ';>'
        str_3 = '=bN0z'
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_3)
        dict_0 = {str_1: str_0, str_0: str_1, str_1: str_1, str_2: str_0}
        h_t_t_p_headers_0 = module_4.HTTPHeaders(**dict_0)
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        str_4 = "X<;'M{!r7mKMtC8'H!"
        float_0 = 1.0
        bool_0 = False
        str_5 = None
        dict_1 = {str_5: h_t_t_p_timeout_error_0, str_5: float_0, str_3: str_3}
        h_t_t_p_request_0 = module_3.HTTPRequest(str_4, str_2, float_0, str_1, bool_0, str_2, str_3, dict_1)
        iterable_0 = h_t_t_p_headers_0.get_all()
        int_0 = 1398
        t_c_p_client_0 = module_2.TCPClient()
        h_t_t_p_connection_0 = module_1._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, iterable_0, dict_0, int_0, t_c_p_client_0, int_0, int_0)
        simple_async_h_t_t_p_client_0.close()
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '%uR~yS7^'
        i_o_loop_0 = module_0.IOLoop()
        str_1 = '$Z;L\tb3}nO|eAO'
        str_2 = ';>'
        str_3 = '=bN0z'
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_3)
        dict_0 = {str_1: str_0, str_0: str_1, str_1: str_1, str_2: str_0}
        h_t_t_p_headers_0 = module_4.HTTPHeaders(**dict_0)
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        str_4 = "X<;'M{!r7mKMtC8'H!"
        float_0 = 1.0
        bool_0 = False
        str_5 = '`.pVg@'
        list_0 = []
        none_type_0 = None
        h_t_t_p_request_0 = module_3.HTTPRequest(str_4, float_0, bool_0, str_5, list_0, str_4, bool_0, none_type_0)
        awaitable_0 = None
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, awaitable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '%u;R~yS7^'
        i_o_loop_0 = module_0.IOLoop()
        async_h_t_t_p_client_0 = module_3.AsyncHTTPClient()
        str_1 = '?15y\r\r['
        str_2 = 'ue_ZK$,T\r$.\nH,~RF@'
        bool_0 = True
        str_3 = 'SCRIPT_NAME'
        selectable_0 = module_0._Selectable()
        i_o_loop_0.remove_handler(selectable_0)
        h_t_t_p_stream_closed_error_0 = module_1.HTTPStreamClosedError(str_3)
        str_4 = h_t_t_p_stream_closed_error_0.__str__()
        str_5 = 'Y\rLa'
        future_0 = async_h_t_t_p_client_0.fetch(str_1, bool_0)
        int_0 = -2848
        future_1 = async_h_t_t_p_client_0.fetch(str_1)
        h_t_t_p_timeout_error_0 = module_1.HTTPTimeoutError(str_3)
        int_1 = -345
        resolver_0 = module_5.Resolver()
        simple_async_h_t_t_p_client_0 = module_1.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.initialize(h_t_t_p_timeout_error_0, int_1, resolver_0, int_0)
        int_2 = -2236
        str_6 = '?'
        datetime_0 = None
        optional_0 = None
        str_7 = None
        none_type_0 = None
        h_t_t_p_request_0 = module_3.HTTPRequest(str_5, str_2, str_6, datetime_0, optional_0, str_0, str_6, str_2, bool_0, str_7, none_type_0, bool_0)
        callable_0 = None
        h_t_t_p_timeout_error_1 = module_1.HTTPTimeoutError(str_5)
        str_8 = h_t_t_p_timeout_error_1.__str__()
        callable_1 = None
        t_c_p_client_0 = None
        simple_async_h_t_t_p_client_1 = module_1.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_1.close()
        future_2 = async_h_t_t_p_client_0.fetch(str_8)
        int_3 = -2697
        h_t_t_p_connection_0 = module_1._HTTPConnection(simple_async_h_t_t_p_client_1, h_t_t_p_request_0, callable_0, callable_1, int_2, t_c_p_client_0, int_3, int_3)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass