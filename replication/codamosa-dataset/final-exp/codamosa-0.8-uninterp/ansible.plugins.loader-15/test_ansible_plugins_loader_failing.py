# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = ')'
        bytes_0 = b'\xdc\xa4l\xbbg\xe42T\x86\xf4e?LD\xd9'
        list_0 = [bytes_0, str_0, var_0]
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, list_0)
        bool_0 = False
        str_1 = None
        str_2 = '6&bx+$y'
        dict_0 = {str_1: list_0, str_1: str_1, str_2: bool_0}
        get_with_context_result_0 = module_0.get_with_context_result(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'cmd'
        set_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, set_0: set_0, set_0: str_0}
        bytes_0 = b'\xe8\x07ZuV8\x9f\x11'
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(set_0, dict_0, bytes_0)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '__init__'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'module'
        str_1 = 'qg4<IfUz^gDE\x0cGNFeq'
        list_0 = [str_0, str_1, str_1]
        set_0 = set()
        tuple_0 = ()
        jinja2_loader_0 = module_0.Jinja2Loader(str_1, list_0, set_0, tuple_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xa4\xdd[\xdd\x82:\xe4\xf2D\xa9\x02'
        list_0 = [bytes_0]
        str_0 = ''
        str_1 = '/usr/share/ansible/plugi@s/doc_frgments/windows'
        list_1 = [str_1, str_1, str_0, str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, str_0, list_1, list_0)
        var_0 = plugin_loader_0.get(str_1)
        var_1 = module_0.get_shell_plugin(plugin_loader_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '*s75eNYv1sph6\x0bJfwi'
        set_0 = {str_0, str_0}
        plugin_path_context_0 = module_0.PluginPathContext(set_0, str_0)
        int_0 = 4095
        str_1 = "G +2W'#"
        bytes_0 = b'\xa0\x8c\xac\x1d!\xcaQs\xbe\xca\xc5$'
        str_2 = '^8F Xh%:W}izoN,Jm$/z'
        float_0 = 1288.6673
        str_3 = 'required_together'
        tuple_0 = (str_1, str_2, float_0, str_3)
        float_1 = 411.6
        plugin_loader_0 = module_0.PluginLoader(str_1, bytes_0, tuple_0, float_1)
        var_0 = plugin_loader_0.__setstate__(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'D'
        float_0 = 3974.76
        set_0 = None
        tuple_0 = ()
        bool_0 = False
        plugin_loader_0 = module_0.PluginLoader(tuple_0, plugin_load_context_0, bool_0, set_0)
        var_0 = plugin_loader_0.format_paths(tuple_0)
        var_1 = plugin_loader_0.has_plugin(str_0)
        var_2 = module_0.get_shell_plugin(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        float_0 = 1059.14
        plugin_loader_0 = None
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, plugin_load_context_0, float_0, plugin_loader_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'shell'
        var_0 = module_0.get_shell_plugin(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        str_0 = 'autoremove'
        int_0 = 799
        set_0 = {int_0, int_0}
        bytes_0 = b'\xdbN\x05\xad\x813\xa81\xe7\xdd#^v\x14@\x12M\xcb!2'
        plugin_loader_0 = module_0.PluginLoader(str_0, int_0, set_0, bytes_0, bytes_0)
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_loader_0, set_0, int_0, set_0, list_0)
        str_1 = '"<<v[wUaMt+kYT3a'
        tuple_0 = ()
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = False
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_1 = 1349
        plugin_loader_1 = module_0.PluginLoader(plugin_load_context_0, bool_0, plugin_load_context_1, int_1)
        var_0 = plugin_loader_1.find_plugin(jinja2_loader_0, str_1, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'D'
        float_0 = 3974.76
        list_0 = [str_0, str_0]
        set_0 = None
        plugin_loader_0 = module_0.PluginLoader(float_0, list_0, set_0, set_0)
        plugin_path_context_0 = module_0.PluginPathContext(str_0, plugin_loader_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        tuple_0 = ()
        dict_0 = {}
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_loader_0, dict_0, plugin_path_context_0, plugin_loader_0)
        var_0 = jinja2_loader_0.find_plugin(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\xa0\xf7\x9c\xda\xb4\x90do\xd2a;\xc8\x93\x1f\x04BJ\x88'
        bool_0 = False
        str_0 = 'j?]!>#wAbM\nR'
        int_0 = 1377
        bytes_1 = b'\x9a\xa0\xb4q\x9d8\x11\r\xb7\xfcz\xbaE\x15'
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, str_0, int_0, bytes_1)
        var_0 = plugin_load_context_0.record_deprecation(bytes_0, jinja2_loader_0, jinja2_loader_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        bool_1 = True
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'#z\x1d\x01\xba"\x90.\xba\x01#\xfb\x8f\xf0;\x7f\xd03\xc9\xf9'
        plugin_loader_0 = module_0.PluginLoader(bool_1, plugin_load_context_0, bytes_0, bytes_0)
        var_0 = plugin_loader_0.get_with_context(bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xa4\xdd[\xdd\x82:\xe4\xf2D\xa9\x02'
        list_0 = [bytes_0]
        str_0 = ''
        str_1 = 'ww\\'
        list_1 = [str_1, str_1, str_0, str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, str_0, list_1, list_0)
        var_0 = plugin_loader_0.get(str_1)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\xe7\x96\x18\x03+\xb1(7\xfb\xc4Q\x8e\xed\xc6'
        list_0 = [bytes_0]
        str_0 = ''
        str_1 = '/usr/share/ansible/plugins/doc_fragments/windows'
        var_0 = module_0.add_all_plugin_dirs(str_1)
        list_1 = [str_1, str_1, str_0, str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, str_0, list_1, list_0)
        dict_0 = {}
        plugin_path_context_0 = None
        plugin_path_context_1 = module_0.PluginPathContext(dict_0, plugin_path_context_0)
        var_1 = plugin_loader_0.has_plugin(plugin_path_context_1, bytes_0)
        int_0 = 74
        str_2 = 'Q[lUr!`mj,gr~Sq~e&i'
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_path_context_2 = module_0.PluginPathContext(str_2, str_2)
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_2 = plugin_loader_0.has_plugin(int_0)
        var_3 = plugin_loader_0.print_paths()
        var_4 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_16():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'D'
        float_0 = 3974.76
        set_0 = None
        tuple_0 = ()
        bool_0 = False
        plugin_loader_0 = module_0.PluginLoader(tuple_0, plugin_load_context_0, bool_0, set_0)
        var_0 = plugin_loader_0.has_plugin(str_0)
        var_1 = module_0.get_shell_plugin(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 10
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.get_shell_plugin(int_0, plugin_load_context_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'sh'
        str_1 = '@/Z'
        var_0 = module_0.get_shell_plugin(str_0, str_1)
        str_2 = None
        var_1 = module_0.get_shell_plugin(str_2, str_1)
        var_2 = var_1.executable
        var_3 = module_0.get_shell_plugin(str_0)
        var_4 = str_1.SHELL_FAMILY
    except BaseException:
        pass

def test_case_19():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = None
        var_0 = module_0.get_shell_plugin(int_0, plugin_load_context_0)
        str_0 = 'D'
        float_0 = 3974.76
        list_0 = [str_0, str_0]
        set_0 = None
        plugin_loader_0 = module_0.PluginLoader(float_0, list_0, set_0, set_0)
        plugin_path_context_0 = module_0.PluginPathContext(str_0, plugin_loader_0)
        str_1 = 'HbZlan3 PS^'
        plugin_load_context_1 = module_0.PluginLoadContext()
        tuple_0 = ()
        bool_0 = False
        plugin_loader_1 = module_0.PluginLoader(tuple_0, plugin_load_context_1, bool_0, set_0)
        jinja2_loader_0 = module_0.Jinja2Loader(str_1, plugin_load_context_1, plugin_loader_1, plugin_loader_1)
        var_1 = plugin_loader_0.format_paths(tuple_0)
        dict_0 = {plugin_loader_1: list_0, plugin_load_context_0: plugin_loader_0, plugin_loader_1: var_1}
        str_2 = '+z5$c~-!Ns]J<Bk!.Uu"'
        str_3 = 'vd>t|?re*urN'
        jinja2_loader_1 = module_0.Jinja2Loader(dict_0, str_2, plugin_path_context_0, str_3, jinja2_loader_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '@/Z'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        str_2 = 't?9'
        var_1 = module_0.add_all_plugin_dirs(str_2)
        var_2 = var_0.executable
        list_0 = [var_2, var_1, var_1, str_1]
        str_3 = 'GsIw817'
        bool_0 = False
        int_0 = -1321
        bytes_0 = b'\xc9\xe0w\xf6\x80\x941\x84\xaa\x8c\x15\xf5'
        str_4 = 'U4.BM<D}8D'
        plugin_loader_0 = module_0.PluginLoader(str_3, bool_0, int_0, bytes_0, str_4)
        var_3 = plugin_loader_0.__getstate__()
        var_4 = plugin_loader_0.has_plugin(list_0)
        tuple_0 = None
        float_0 = -418.369822
        var_5 = module_0.get_shell_plugin(tuple_0, float_0)
        var_6 = str_0.SHELL_FAMILY
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 1108
        bool_0 = True
        str_0 = '))#B:FE\\\x0b`i}.)8['
        float_0 = 567.78
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_loader_0 = module_0.PluginLoader(int_0, bool_0, str_0, float_0, plugin_load_context_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'\xe7\x96\x18\x03+\xb1(7\xfb\xc4Q\x8e\xed\xc6'
        list_0 = [bytes_0]
        str_0 = ''
        str_1 = '/usr/share/ansible/plugins/doc_fragments/windows'
        var_0 = module_0.add_all_plugin_dirs(str_1)
        list_1 = [str_1, str_1, str_0, str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, str_0, list_1, list_0)
        dict_0 = {str_0: bytes_0}
        plugin_path_context_0 = None
        plugin_path_context_1 = module_0.PluginPathContext(dict_0, plugin_path_context_0)
        var_1 = plugin_loader_0.has_plugin(plugin_path_context_1, bytes_0)
        bool_0 = True
        int_0 = 74
        str_2 = 'Q[lUr!`mj,gr~Sq~e&i'
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_path_context_2 = module_0.PluginPathContext(str_2, str_2)
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_2 = plugin_loader_0.has_plugin(int_0)
        var_3 = plugin_loader_0.print_paths()
        plugin_load_context_2 = module_0.PluginLoadContext()
        plugin_load_context_3 = module_0.PluginLoadContext()
        var_4 = plugin_loader_0.__getstate__()
        plugin_path_context_3 = module_0.PluginPathContext(dict_0, str_2)
        str_3 = 'stdout argument not allowed, it will be overridden.'
        var_5 = plugin_loader_0.get_with_context(str_3, *list_1, **dict_0)
        var_6 = plugin_loader_0.find_plugin(str_1, bool_0, int_0)
        var_7 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '3h{L\\'
        var_0 = module_0.get_shell_plugin(str_0, str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'sh'
        var_0 = module_0.get_shell_plugin(str_0, str_0)
        str_1 = None
        var_1 = module_0.get_shell_plugin(str_1, str_0)
        var_2 = var_1.executable
        var_3 = module_0.get_shell_plugin(str_0)
        var_4 = str_1.SHELL_FAMILY
    except BaseException:
        pass

def test_case_25():
    try:
        tuple_0 = ()
        jinja2_loader_0 = None
        str_0 = '#Pm<HY_N'
        bytes_0 = b'\x90\x184\xa7\xf8r\xe3\x06aK\xd6S\xdc'
        str_1 = '\x0bVH<4D1qi+"'
        int_0 = 1098
        str_2 = '4?4(0IW=H7'
        get_with_context_result_0 = None
        bool_0 = True
        jinja2_loader_1 = module_0.Jinja2Loader(get_with_context_result_0, tuple_0, tuple_0, bool_0)
        bytes_1 = b'?\xac\xa4O\xa4\xd9\xd9\xb8\x84\x8bj\xb5\xf0\xb9\x9d\xd2'
        dict_0 = {str_2: jinja2_loader_1, tuple_0: bytes_0, bytes_1: bool_0, bytes_1: jinja2_loader_1}
        float_0 = 33.108
        str_3 = None
        dict_1 = {str_3: jinja2_loader_0}
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_path_context_0 = module_0.PluginPathContext(dict_1, plugin_load_context_0)
        plugin_loader_0 = module_0.PluginLoader(int_0, dict_0, float_0, plugin_path_context_0, tuple_0)
        plugin_path_context_1 = module_0.PluginPathContext(str_1, plugin_loader_0)
        int_1 = -2427
        bool_1 = False
        plugin_path_context_2 = module_0.PluginPathContext(int_1, bool_1)
        bytes_2 = b';'
        set_0 = {bool_1, bytes_2, int_1, bytes_2}
        plugin_load_context_1 = module_0.PluginLoadContext()
        list_0 = [int_1, tuple_0, plugin_load_context_1, bytes_2]
        dict_2 = {}
        plugin_loader_1 = module_0.PluginLoader(plugin_path_context_2, bytes_2, set_0, list_0, dict_2)
        var_0 = plugin_loader_1.find_plugin_with_context(jinja2_loader_0, str_0, bytes_0, plugin_path_context_1)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '_ca/OK,'
        var_0 = module_0.get_shell_plugin(str_0, str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = ''
        str_1 = '/usr/share/ansible/plugins/doc_fragments/windows'
        list_0 = [str_1, str_1, str_0, str_1]
        str_2 = '/pynguin/windows'
        str_3 = '45w&CUu1QKk+U8+v'
        dict_0 = {}
        float_0 = -2029.9
        int_0 = -761
        jinja2_loader_0 = module_0.Jinja2Loader(str_2, str_3, dict_0, float_0, int_0)
        str_4 = '\tV"~:qYUg\n'
        set_0 = {str_1}
        str_5 = "E\x0b]wF:q~+}7,v\\g'1\t%?"
        jinja2_loader_1 = module_0.Jinja2Loader(str_4, list_0, set_0, str_5)
        var_0 = jinja2_loader_1.find_plugin(jinja2_loader_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ':j?WO~!p"lS#.4IP'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        tuple_0 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        float_0 = -1424.0
        str_0 = 'bw'
        dict_0 = {str_0: tuple_0}
        str_1 = '(\x0cAz6!p!'
        set_0 = {float_0, str_0, str_1}
        list_0 = [set_0, dict_0, float_0]
        int_0 = -2220
        str_2 = 'C@6,TJp3o;2'
        plugin_loader_0 = module_0.PluginLoader(str_1, list_0, int_0, str_2)
        var_0 = plugin_loader_0.__setstate__(dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '@/Z'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        tuple_0 = None
        float_0 = -418.369822
        int_0 = 952
        bool_0 = True
        set_0 = {bool_0, bool_0}
        list_0 = [str_1, tuple_0]
        plugin_loader_0 = module_0.PluginLoader(int_0, bool_0, set_0, list_0)
        str_2 = ''
        var_1 = plugin_loader_0.add_directory(str_2)
        var_2 = module_0.get_shell_plugin(tuple_0, float_0)
        float_1 = 0.001
        int_1 = -3593
        list_1 = [str_1]
        jinja2_loader_0 = module_0.Jinja2Loader(str_1, int_1, list_1, tuple_0)
        str_3 = 'T'
        jinja2_loader_1 = module_0.Jinja2Loader(str_1, float_1, jinja2_loader_0, str_3)
        var_3 = jinja2_loader_1.all()
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '@/Z'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        float_0 = 609.98
        bytes_0 = b'\\2\xbb\x1f'
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_loader_0 = module_0.PluginLoader(str_1, str_0, bytes_0, plugin_load_context_0, float_0)
        var_1 = module_0.add_all_plugin_dirs(bytes_0)
        str_2 = ''
        var_2 = plugin_loader_0.add_directory(str_2)
        var_3 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '@/Z'
        str_1 = None
        str_2 = 'J4Qr?f\r>'
        bytes_0 = b'6\x1623~\x81U\x18\x7fF\x8fdn\xf8_\xdc'
        set_0 = {str_2, str_1}
        bytes_1 = b'>\xc6\xb3\xe9\xa6\xd6K'
        plugin_loader_0 = module_0.PluginLoader(str_2, bytes_0, set_0, bytes_1)
        var_0 = plugin_loader_0.all()
        var_1 = module_0.get_shell_plugin(str_1, str_0)
        tuple_0 = None
        float_0 = 609.98
        int_0 = 952
        bool_0 = False
        set_1 = {bool_0, bool_0}
        str_3 = 'pss68\tk='
        bytes_2 = b'\\2\xbb\x1f'
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_loader_1 = module_0.PluginLoader(str_1, str_3, bytes_2, plugin_load_context_0, float_0)
        var_2 = plugin_loader_1.has_plugin(tuple_0)
        var_3 = module_0.add_all_plugin_dirs(bytes_2)
        str_4 = 'v('
        var_4 = plugin_load_context_0.resolve(str_4, set_1, plugin_load_context_0, plugin_loader_0)
        list_0 = None
        str_5 = '7Jb\x0b[)BweNjU'
        var_5 = plugin_load_context_0.record_deprecation(tuple_0, list_0, str_5)
        list_1 = [str_0, str_3, tuple_0]
        plugin_loader_2 = module_0.PluginLoader(int_0, bool_0, set_1, list_1)
        str_6 = ''
        var_6 = plugin_loader_2.has_plugin(set_0)
        var_7 = plugin_loader_2.add_directory(str_6)
        var_8 = module_0.get_shell_plugin(tuple_0, float_0)
        var_9 = plugin_loader_2.print_paths()
    except BaseException:
        pass