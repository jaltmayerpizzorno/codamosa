# Automatically generated by Pynguin.
import youtube_dl.aes as module_0

def test_case_0():
    try:
        set_0 = None
        var_0 = module_0.shift_rows(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'$\xf6\xe3\xfb3\xcdh\t\xda \xbf\x7f\x98'
        var_0 = module_0.aes_encrypt(bytes_0, bytes_0)
        set_0 = {bytes_0}
        str_0 = 'k-J79JG%,7!j+\nFl'
        var_1 = module_0.aes_cbc_decrypt(set_0, str_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x82[\x86f\x8b\x06Q'
        str_0 = '=AHwxp\\'
        list_0 = [str_0, str_0]
        var_0 = module_0.aes_cbc_encrypt(bytes_0, str_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b"\xccZ\x80Q'\xb2\xaf\xd9\x04\xc6@\xbe\xa8"
        var_0 = module_0.key_expansion(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'R?e[g'
        var_0 = module_0.sub_bytes(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 221
        var_0 = module_0.sub_bytes_inv(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Ä®'
        var_0 = module_0.mix_columns(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        var_0 = module_0.mix_columns_inv(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\x0b'
        var_0 = module_0.inc(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '`+[Yv9\x0bn$'
        bytes_0 = b'f\xea\x85\xfe\x97v\x921l3\xa5#\xe9\xb0W\xf1C]'
        var_0 = module_0.aes_decrypt(str_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '='
        bool_0 = False
        dict_0 = {bool_0: str_0, bool_0: bool_0, str_0: bool_0}
        var_0 = module_0.rijndael_mul(dict_0, bool_0)
        list_0 = [dict_0]
        list_1 = [list_0, bool_0, str_0, bool_0]
        var_1 = module_0.aes_decrypt_text(str_0, bool_0, list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 255
        int_1 = [int_0, int_0, int_0, int_0]
        var_0 = module_0.inc(int_1)
        int_2 = [int_1, int_1, int_1, int_1]
        var_1 = module_0.inc(int_2)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Io5O5zn5mN/N+zS5pS56Wg5pW95yS56WgA=='
        int_0 = -12
        var_0 = module_0.aes_decrypt_text(str_0, str_0, int_0)
    except BaseException:
        pass