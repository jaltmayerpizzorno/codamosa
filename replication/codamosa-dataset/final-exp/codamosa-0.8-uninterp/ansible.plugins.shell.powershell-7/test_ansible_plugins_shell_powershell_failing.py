# Automatically generated by Pynguin.
import ansible.plugins.shell.powershell as module_0
import shlex as module_1

def test_case_0():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.env_prefix()
        var_1 = shell_module_0.mkdtemp(shell_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        shell_module_0 = module_0.ShellModule()
        list_0 = []
        var_0 = shell_module_0.checksum(list_0)
        var_1 = shell_module_0.join_path()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -183.7
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.get_remote_filename(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xbbe\xab\x06\xb7\x8c\xb0\x08\xc0\x8e\xf7\xb1OZ'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.path_has_trailing_slash(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1793
        set_0 = {int_0, int_0}
        bytes_0 = b'\xf7\x88[Z\x16'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.chmod(set_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'ztz,\rDl\\h7h?Jh'
        bool_0 = True
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.chown(str_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n---\nmodule: pause\nshort_description: Pause playbook execution\ndescription:\n  - Pauses playbook execution for a set amount of time, or until a prompt is acknowledged.\n    All parameters are optional. The default behavior is to pause with a prompt.\n  - To pause/wait/sleep per host, use the M(ansible.builtin.wait_for) module.\n  - You can use C(ctrl+c) if you wish to advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely.\n    To continue early press C(ctrl+c) and then C(c). To abort a playbook press C(ctrl+c) and then C(a).\n  - The pause module integrates into async/parallelized playbooks without any special considerations (see Rolling Updates).\n    When using pauses with the C(serial) playbook parameter (as in rolling updates) you are only prompted once for the current group of hosts.\n  - This module is also supported for Windows targets.\nversion_added: "0.8"\noptions:\n  minutes:\n    description:\n      - A positive number of minutes to pause for.\n  seconds:\n    description:\n      - A positive number of seconds to pause for.\n  prompt:\n    description:\n      - Optional text to use for the prompt message.\n  echo:\n    description:\n      - Controls whether or not keyboard input is shown when typing.\n      - Has no effect if \'seconds\' or \'minutes\' is set.\n    type: bool\n    default: \'yes\'\n    version_added: 2.5\nauthor: "Tim Bielawa (@tbielawa)"\nextends_documentation_fragment:\n  -  action_common_attributes\n  -  action_common_attributes.conn\n  -  action_common_attributes.flow\nattributes:\n    action:\n        support: full\n    async:\n        support: none\n    become:\n        support: none\n    bypass_host_loop:\n        support: full\n    check_mode:\n        support: none\n    connection:\n        support: none\n    delegation:\n        support: none\n    diff_mode:\n        support: none\n    platform:\n        platforms: all\nnotes:\n      - Starting in 2.2,  if you specify 0 or negative for minutes or seconds, it will wait for 1 second, previously it would wait indefinitely.\n      - User input is not captured or echoed, regardless of echo setting, when minutes or seconds is specified.\n'
        int_0 = 10
        str_1 = '8 \x0bY"VOV'
        dict_0 = {str_0: int_0, str_1: str_1}
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.remove(int_0, dict_0)
        shell_module_1 = module_0.ShellModule()
        list_0 = [str_1, var_0]
        var_1 = shell_module_1.set_user_facl(dict_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.mkdtemp()
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        str_0 = 'A$a?pJwk;}WHB^ \\$'
        str_1 = '[<ansible.plugins.shell.powershell.ShellModule object at 0x7f8420097f70>, (), (), \'PowerShell -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -EncodedCommand UwBlAHQALQBTAHQAcgBpAGMAdABNAG8AZABlACAALQBWAGUAcgBzAGkAbwBuACAATABhAHQAZQBzAHQACgBJAGYAIAAoAFQAZQBzAHQALQBQAGEAdABoACAAJwAKAEkAZgAgACgAVABlAHMAdAAtAFAAYQB0AGgAIAAnACcAWwBGAGEAbABzAGUAXQAnACcAKQAKAHsACgAkAHIAZQBzACAAPQAgADAAOwAKAH0ACgBFAGwAcwBlAAoAewAKACQAcgBlAHMAIAA9ACAAMQA7AAoAfQAKAFcAcgBpAHQAZQAtAE8AdQB0AHAAdQB0ACAAJwAnACQAcgBlAHMAJwAnADsACgBFAHgAaQB0ACAAJAByAGUAcwA7AAoAJwApAAoAewAKACQAcgBlAHMAIAA9ACAAMAA7AAoAfQAKAEUAbABzAGUACgB7AAoAJAByAGUAcwAgAD0AIAAxADsACgB9AAoAVwByAGkAdABlAC0ATwB1AHQAcAB1AHQAIAAnACQAcgBlAHMAJwA7AAoARQB4AGkAdAAgACQAcgBlAHMAOwAKAEkAZgAgACgALQBuAG8AdAAgACQAPwApACAAewAgAEkAZgAgACgARwBlAHQALQBWAGEAcgBpAGEAYgBsAGUAIABMAEEAUwBUAEUAWABJAFQAQwBPAEQARQAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAAUwBpAGwAZQBuAHQAbAB5AEMAbwBuAHQAaQBuAHUAZQApACAAewAgAGUAeABpAHQAIAAkAEwAQQBTAFQARQBYAEkAVABDAE8ARABFACAAfQAgAEUAbABzAGUAIAB7ACAAZQB4AGkAdAAgADEAIAB9ACAAfQA=\', "\\n            If (Test-Path \'[False]\')\\n            {\\n                $res = 0;\\n            }\\n            Else\\n            {\\n                $res = 1;\\n            }\\n            Write-Output \'$res\';\\n            Exit $res;\\n         ", "\\n            If (Test-Path \'[False]\')\\n            {\\n                $res = 0;\\n            }\\n            Else\\n            {\\n                $res = 1;\\n            }\\n            Write-Output \'$res\';\\n            Exit $res;\\n         "]'
        str_2 = 'NbUW( g[W'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.build_module_command(dict_0, str_0, str_1, str_2)
        list_0 = [var_0, str_0, str_0, str_1]
        float_0 = -110.0
        set_0 = {str_1, float_0, str_0}
        var_1 = shell_module_0.chmod(list_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = ()
        str_0 = 'use_proxy'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.get_remote_filename(str_0)
        list_0 = [tuple_0]
        var_1 = shell_module_0.wrap_for_exec(list_0)
        shell_module_1 = module_0.ShellModule()
        int_0 = -560
        str_1 = 'unknown error generating sequence: %s'
        var_2 = shell_module_1.build_module_command(int_0, tuple_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = None
        shell_module_0 = module_0.ShellModule()
        str_0 = '#!powershell'
        str_1 = 'test_ShellModule_build_module_command.tmp'
        str_2 = 'o|h#Bs!Ah-xs"\t|b'
        dict_0 = {str_2: str_0, str_2: str_2}
        var_1 = shell_module_0.wrap_for_exec(dict_0)
        var_2 = shell_module_0.build_module_command(str_0, str_0, str_0, str_1)
        var_3 = print(var_2)
        bytes_0 = b't\xe3\xb2\xd6DpS6'
        var_4 = shell_module_0.path_has_trailing_slash(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.mkdtemp(shell_module_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x8d\xfb\xef\xe8"\xd0\xad\xf7r\x86yU7'
        list_0 = [bytes_0, bytes_0, bytes_0]
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.join_path(*list_0)
        shell_module_1 = module_0.ShellModule()
        var_1 = shell_module_1.path_has_trailing_slash(shell_module_1)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = None
        shell_module_0 = module_0.ShellModule()
        str_0 = 'ei'
        var_1 = shell_module_0.remove(str_0)
        bool_0 = True
        var_2 = shell_module_0.expand_user(bool_0)
        str_1 = '#!pLwershell'
        str_2 = '/usr/bin/python'
        var_3 = shell_module_0.build_module_command(str_0, str_1, str_2, str_2)
        var_4 = shell_module_0.mkdtemp()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '#!powershell'
        str_1 = ''
        str_2 = 'notepad'
        str_3 = [str_1, str_1, str_2]
        int_0 = -356
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.expand_user(int_0)
        dict_0 = {}
        var_1 = shell_module_0.expand_user(dict_0)
        shell_module_1 = module_0.ShellModule()
        var_2 = module_1.join(str_3)
        var_3 = shell_module_1.build_module_command(str_3, str_0, var_2)
        var_4 = var_0.bootstrap_wrapper
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '#!powershell'
        str_1 = []
        int_0 = -356
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.expand_user(int_0)
        var_1 = None
        shell_module_1 = module_0.ShellModule()
        str_2 = ''
        var_2 = module_1.join(str_1)
        var_3 = shell_module_1.build_module_command(str_2, str_0, var_2)
        var_4 = shell_module_1.bootstrap_wrapper
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'C:/'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.path_has_trailing_slash(str_0)
        str_1 = 'C:\\'
        shell_module_1 = module_0.ShellModule()
        var_1 = shell_module_1.path_has_trailing_slash(str_1)
    except BaseException:
        pass