# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        bool_0 = None
        doc_c_l_i_0 = module_0.DocCLI(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0}
        doc_c_l_i_0 = module_0.DocCLI(dict_0)
        var_0 = doc_c_l_i_0.init_parser()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'w=>/71[]{'
        float_0 = 0.0001
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.post_process_args(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 1.5
        str_0 = '>#UYQefRxC\rUmT)N Ojv'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.display_plugin_list(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -928
        str_0 = 'N/A'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.init_parser()
        float_0 = 1.0
        doc_c_l_i_1 = module_0.DocCLI(float_0)
        var_1 = doc_c_l_i_1.get_all_plugins_of_type(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        set_0 = set()
        var_0 = module_0.add_collection_plugins(bool_0, set_0)
        role_mixin_0 = module_0.RoleMixin()
        doc_c_l_i_0 = module_0.DocCLI(role_mixin_0)
        float_0 = -2437.3006
        str_0 = 'XLDh];<4\\{f^W,`s">1)'
        var_1 = doc_c_l_i_0.get_plugin_metadata(str_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        role_mixin_0 = module_0.RoleMixin()
        bool_0 = False
        list_0 = []
        role_mixin_1 = module_0.RoleMixin(*list_0)
        bool_1 = True
        doc_c_l_i_0 = module_0.DocCLI(bool_1)
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(role_mixin_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x85\xd3\x81\xf5\xcc\xad\x99\x88\xdb7i\xd4\xde'
        bool_0 = False
        str_0 = 'E#_S}&Ph'
        bytes_1 = b"4\x10Z\x02\xbcUT'\xadW"
        doc_c_l_i_0 = module_0.DocCLI(bytes_1)
        var_0 = doc_c_l_i_0.format_snippet(bytes_0, bool_0, str_0)
        var_1 = doc_c_l_i_0.init_parser()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -1690
        doc_c_l_i_0 = module_0.DocCLI(int_0)
        bool_0 = False
        dict_0 = {}
        str_0 = '@X8Nnt_:>M0)C_z4!HTe'
        str_1 = 'CallbackModule'
        dict_1 = {str_1: int_0, str_0: int_0}
        list_0 = [str_0, dict_1]
        bytes_0 = b'3_\x0c\xf9f\xab\xd8\xbaD`\x97\t%\xb5\x8aP'
        var_0 = doc_c_l_i_0.format_plugin_doc(bool_0, bool_0, dict_0, list_0, bytes_0, dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'lookup'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
        dict_0 = {}
        tuple_0 = None
        var_1 = doc_c_l_i_0.get_role_man_text(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = ()
        float_0 = 788.4
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        dict_0 = {tuple_0: tuple_0}
        var_0 = doc_c_l_i_0.get_man_text(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '=),YU:0'
        str_1 = 'lookup'
        tuple_0 = ()
        float_0 = -105.66
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.add_fields(str_0, str_1, str_0, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b"\xcd\x9c\xd1\x95\xafxYP\x1a\x0cd\x9a\xac'\t"
        var_0 = module_0.jdump(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '=),YU:0'
        dict_0 = {str_0: str_0}
        var_0 = module_0.jdump(dict_0)
        str_1 = 'lookup'
        doc_c_l_i_0 = module_0.DocCLI(str_1)
        var_1 = doc_c_l_i_0.run()
        list_0 = [var_1, str_0]
        dict_1 = {}
        plugin_not_found_0 = module_0.PluginNotFound(*list_0, **dict_1)
        var_2 = module_0.add_collection_plugins(str_0, plugin_not_found_0)
        bytes_0 = b'\xb9\xf9\xec\xba\xd2\xfe\x1f\xce\x948G\x8f'
        str_2 = 'T'
        list_1 = []
        var_3 = doc_c_l_i_0.format_snippet(doc_c_l_i_0, str_2, list_1)
        doc_c_l_i_1 = module_0.DocCLI(list_0)
        var_4 = doc_c_l_i_1.get_role_man_text(bytes_0, dict_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '=)kU:0'
        list_0 = [str_0, str_0, str_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.run()
        dict_0 = {str_0: str_0}
        bool_0 = True
        plugin_not_found_0 = module_0.PluginNotFound()
        doc_c_l_i_1 = module_0.DocCLI(plugin_not_found_0)
        str_1 = 'lookup'
        float_0 = 184.21
        doc_c_l_i_2 = module_0.DocCLI(float_0)
        var_1 = doc_c_l_i_2.format_snippet(bool_0, doc_c_l_i_1, str_1)
        var_2 = module_0.jdump(dict_0)
        str_2 = '(lookup'
        doc_c_l_i_3 = module_0.DocCLI(str_2)
        var_3 = doc_c_l_i_3.run()
        var_4 = doc_c_l_i_3.get_man_text(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '=)kU:0'
        int_0 = 11
        tuple_0 = ()
        dict_0 = {}
        list_0 = [tuple_0, dict_0, dict_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.add_fields(int_0, tuple_0, dict_0, list_0, int_0)
        dict_1 = {str_0: str_0}
        bool_0 = False
        plugin_not_found_0 = module_0.PluginNotFound()
        doc_c_l_i_1 = module_0.DocCLI(plugin_not_found_0)
        str_1 = 'lookup'
        var_1 = doc_c_l_i_1.format_snippet(bool_0, doc_c_l_i_1, str_1)
        var_2 = module_0.jdump(dict_1)
        str_2 = '(lookup'
        doc_c_l_i_2 = module_0.DocCLI(str_2)
        var_3 = doc_c_l_i_2.run()
        plugin_not_found_1 = module_0.PluginNotFound()
        bytes_0 = b'?\x00\xc8\xe5 @\xe2\x84L\x1fu'
        var_4 = doc_c_l_i_2.find_plugins(str_2, plugin_not_found_1, bytes_0)
        var_5 = doc_c_l_i_2.add_fields(str_0, str_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'fgO#_)V.P~'
        plugin_not_found_0 = module_0.PluginNotFound()
        float_0 = 219.52298321129146
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(str_0, plugin_not_found_0, str_0)
    except BaseException:
        pass