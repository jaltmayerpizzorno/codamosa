# Automatically generated by Pynguin.
import docstring_parser.google as module_0

def test_case_0():
    pass

def test_case_1():
    google_parser_0 = module_0.GoogleParser()

def test_case_2():
    str_0 = "0'k<J;\n|l1.3Q4tud"
    docstring_0 = module_0.parse(str_0)
    str_1 = ')!\r#FX'
    docstring_1 = module_0.parse(str_1)
    google_parser_0 = module_0.GoogleParser()
    complex_0 = None
    google_parser_1 = module_0.GoogleParser(complex_0)
    docstring_2 = google_parser_0.parse(str_1)
    list_0 = [docstring_1, str_1, str_1]
    section_0 = module_0.Section(*list_0)
    var_0 = google_parser_0.add_section(section_0)
    var_1 = google_parser_0.add_section(section_0)
    docstring_3 = module_0.parse(str_0)

def test_case_3():
    str_0 = "cF'JAFLYMv@GV5/wW#)"
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = 'Sums two numbers.\n        \n        Args:\n            a (int): first number to add\n            b (int): second number to add\n        Returns:\n            int: the sum\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = None
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)
    str_1 = 'Sums two numbers.\n        \n        Args:\n            a (int): first number to add\n            b (int): second number to add\n        Returns:\n            int: the sum\n        '
    docstring_1 = module_0.parse(str_1)

def test_case_6():
    str_0 = 'Sums two numbers.\n        \n        Args:\n            a (int): first number to add\n            b (int): second number to add\n        Returns:\n            int: the sum\n        '
    str_1 = '(\x0bcE\t#lp/tf'
    google_parser_0 = module_0.GoogleParser(str_1)
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'Sums two numbers.\n        \n        Args:\n            a (int): first number to add\n            b (int): second number to add\n       Returns:\n            int: the sum\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = 'summary\n\nlong description\n\nArgs:\n  arg1:  desc1\n  arg2:  desc2\n'
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    str_0 = ''
    str_1 = 'summary\n'
    docstring_0 = module_0.parse(str_1)
    docstring_1 = module_0.parse(str_0)
    str_2 = 'summary\nlong description\n'
    docstring_2 = module_0.parse(str_2)
    str_3 = 'summary\n\nlong description\n\nArgs:\n  arg1:\n  arg2:\n'
    docstring_3 = module_0.parse(str_3)
    str_4 = 'summary\n\nlong description\n\nArgs:\n  arg1:  desc1\n  arg2:  desc2\n'
    docstring_4 = module_0.parse(str_4)

def test_case_10():
    str_0 = 'Sums two numbers.\n        \n        Args:\n            a (int):firt number to add\n            b (int): second number to add\n        Returns:\n            int: the sum\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = ' '
    docstring_0 = module_0.parse(str_0)
    str_1 = 'Sums two numbers.\n        \n        Args:\n            a (int): first number to add\n            b (int): second number to add\n        Returns:\n            int: the sum\n        '
    docstring_1 = module_0.parse(str_1)

def test_case_12():
    str_0 = 'Sums two numbers.D        \n        Args:\n            a (int): firt number to add\n            b (int): second number to3add\n        Returns:\n         f  int: the sum\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_13():
    none_type_0 = None
    section_type_0 = module_0.SectionType.SINGULAR
    google_parser_0 = module_0.GoogleParser(none_type_0, section_type_0)
    str_0 = 'Sums two numbers.D        \n        Args:\n            a (int): first number to add\n            b (int): second number to add\n        Returns:\n            int: the sum\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_14():
    str_0 = 'Sample Google style docstring.\n\nArgs:\n    name: name.\n    age: age.\n\nReturns:\n    return value.\n\nRaises:\n    ValueError: raises.\n'
    docstring_0 = module_0.parse(str_0)

def test_case_15():
    str_0 = 'Example of a Google-style Python docstring.\n\nArgs:\n    arg1 (int, optional): The first argument.\n    arg2 (str, optional): The second argument. Only one\n        sentence allowed.\n    *args: Variable length argument list.\n    **kwargs: Arbitrary keyword arguments.\n\nRaises:\n    AttributeError: The ``Raises`` section is a list of all exceptions\n        that are relevant to the interface.\n    ValueError: If `param2` is equal to `param1`.\n\nReturns:\n    bool: The return value. True for success, False otherwise.\n    \n    \n    \n        '
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = module_0.parse(str_0)

def test_case_16():
    str_0 = '\nBlah blah blah\n\nArgs:\n    first (str): first thing\n    second (int, optional): second thing. Defaults to 1.\n\nExample:\n\n   some code\n   some other code\n\nReturns:\n    (:class:`.ReturnType`): a return\n'
    google_parser_0 = module_0.GoogleParser()
    docstring_0 = google_parser_0.parse(str_0)