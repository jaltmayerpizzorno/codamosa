# Automatically generated by Pynguin.
import sanic.response as module_0
import sanic.models.protocol_types as module_1
import sanic.compat as module_2

def test_case_0():
    try:
        str_0 = '\\\x0b~*sM"aY\'@\n'
        str_1 = 'Yqg:R\x0b,N'
        str_2 = '|<Pj26ad'
        h_t_t_p_response_0 = module_0.text(str_2)
        h_t_t_p_response_1 = module_0.redirect(str_0, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        dict_0 = {}
        int_0 = 379
        callable_0 = None
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(callable_0, str_0)
        streaming_h_t_t_p_response_1 = module_0.StreamingHTTPResponse(dict_0, int_0, streaming_h_t_t_p_response_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x8c\xbc\xad\xbf\xd4^\xb5'
        str_0 = 'yO~Vw:!FrF'
        dict_0 = {str_0: str_0}
        h_t_t_p_response_0 = module_0.html(bytes_0, dict_0)
        bytes_1 = b'\x8d\xb5\xd0\x9f|\xd2,7\x9e~=e\x02G\xfb\xbb"'
        int_0 = 124
        dict_1 = {int_0: bytes_1, bytes_1: h_t_t_p_response_0, h_t_t_p_response_0: int_0}
        h_t_t_p_response_1 = module_0.HTTPResponse(dict_1, str_0)
        h_t_t_p_response_2 = module_0.json(h_t_t_p_response_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '}ElZr&}'
        str_1 = '\n    **Status**: 413 Payload Too Large\n    '
        h_t_t_p_response_0 = module_0.text(str_1)
        h_t_t_p_response_1 = module_0.file(str_1, str_1)
        str_2 = 'j@^T`+eEZRdV^3T'
        h_t_t_p_response_2 = module_0.redirect(str_0)
        str_3 = 'Path'
        dict_0 = {str_1: str_3}
        h_t_t_p_response_3 = module_0.file(str_3, dict_0)
        dict_1 = {str_0: str_0, str_0: str_0, str_2: str_2}
        int_0 = 539
        bool_0 = False
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(h_t_t_p_response_0, int_0, bool_0)
        var_0 = streaming_h_t_t_p_response_0.write(str_1)
        h_t_m_l_protocol_0 = module_1.HTMLProtocol(**dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'P'
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        base_h_t_t_p_response_0.send()
        int_0 = -1061
        int_1 = -1654
        h_t_t_p_response_0 = module_0.json(int_0, int_1)
        h_t_t_p_response_1 = module_0.html(str_0, int_0)
        base_h_t_t_p_response_1 = module_0.BaseHTTPResponse()
        bytes_0 = b'\xd1\x8f\xb0h(?)j\x05y\xc6XJ\x1f4\xd5'
        var_0 = module_0.stream(str_0, bytes_0)
        base_h_t_t_p_response_1.send()
        base_h_t_t_p_response_1.send()
        str_1 = 'ci#\tV'
        str_2 = 'Vd|\x0c*=<WLg'
        str_3 = '=\rs)OMQcj?'
        dict_0 = {str_1: str_0, str_2: str_3, str_3: str_1, str_1: str_1}
        h_t_t_p_response_2 = module_0.HTTPResponse(dict_0)
        h_t_t_p_response_3 = module_0.redirect(str_0, dict_0, str_3)
        int_2 = -2391
        tuple_0 = ()
        var_1 = module_0.stream(bytes_0, int_2, dict_0, str_2, tuple_0)
        str_4 = "a\x0cV\rPT@^%'l4kQv"
        str_5 = '[L\t\t\r3vqOBh.I$Va*'
        h_t_t_p_response_4 = module_0.text(str_4, dict_0, str_5)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(callable_0)
        str_0 = 'P'
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        base_h_t_t_p_response_0.send()
        var_0 = streaming_h_t_t_p_response_0.send()
        int_0 = -1061
        int_1 = -1654
        h_t_t_p_response_0 = module_0.json(int_0, int_1)
        h_t_t_p_response_1 = module_0.html(str_0, int_0)
        base_h_t_t_p_response_1 = module_0.BaseHTTPResponse()
        bytes_0 = b'\xd1\x8f\xb0h(?)j\x05y\xc6XJ\x1f4\xd5'
        var_1 = module_0.stream(str_0, bytes_0)
        base_h_t_t_p_response_1.send()
        base_h_t_t_p_response_1.send()
        str_1 = 'ci#\tYV'
        str_2 = 'Vd|\x0c*=<WLg'
        str_3 = '=\rs)OMQcj?'
        dict_0 = {str_1: str_0, str_2: str_3, str_3: str_1, str_1: str_1}
        h_t_t_p_response_2 = module_0.empty(dict_0)
        h_t_t_p_response_3 = module_0.HTTPResponse(dict_0)
        h_t_t_p_response_4 = module_0.empty()
        h_t_t_p_response_5 = module_0.redirect(str_0, dict_0, str_3)
        int_2 = -2391
        str_4 = 'deprecated'
        tuple_0 = ()
        var_2 = module_0.stream(bytes_0, int_2, dict_0, str_4, tuple_0)
        str_5 = None
        h_t_t_p_response_6 = module_0.text(str_5, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'P'
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        dict_0 = {}
        int_0 = -2552
        bytes_0 = b'\x1b'
        header_0 = module_2.Header()
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(dict_0, int_0, bytes_0, str_0, header_0)
    except BaseException:
        pass