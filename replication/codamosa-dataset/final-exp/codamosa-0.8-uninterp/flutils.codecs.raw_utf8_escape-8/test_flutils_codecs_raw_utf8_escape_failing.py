# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        str_0 = 'oSC]A\rq7io9<i'
        module_0.register()
        int_0 = -1253
        tuple_0 = (str_0, int_0)
        tuple_1 = module_0.encode(str_0)
        tuple_2 = module_0.decode(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x10\xc1\xd8\xef\x14\x94\xa5\xed\xf6H`'
        int_0 = -1695
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        user_string_1 = module_1.UserString(int_0)
        tuple_1 = module_0.encode(user_string_1, user_string_1)
        tuple_2 = module_0.encode(user_string_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xc7j\xe00\x1eC\x95\x1b{\x83\xc7\x83n\xe7\x8a'
        tuple_0 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '3)'
        module_0.register()
        module_0.register()
        dict_0 = {}
        tuple_0 = module_0.decode(dict_0, str_0)
        tuple_1 = module_0.encode(str_0)
        module_0.register()
        module_0.register()
        tuple_2 = module_0.encode(str_0)
        module_0.register()
        byte_string_0 = None
        tuple_3 = module_0.decode(byte_string_0)
    except BaseException:
        pass

def test_case_4():
    try:
        module_0.register()
        str_0 = 'eutf8h'
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xc3_x<I\x14\xc9\x10'
        int_0 = 448
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        tuple_1 = module_0.encode(user_string_0, user_string_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'c5%7Uz'
        tuple_0 = module_0.encode(str_0)
        module_0.register()
        user_string_0 = module_1.UserString(str_0)
        tuple_1 = module_0.encode(user_string_0, str_0)
        bytes_0 = b'u#\xad\xcaZ\xdb\xdc\xd7U\x1b\\\x84K\x96\x95'
        module_0.register()
        tuple_2 = module_0.decode(bytes_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'A subclass of the module type which triggers loading upon attribute\n    access.\n\n    This class is a "derivative work" of the Python\n    `importlib.util._LazyModule <https://bit.ly/2EBPI1g>`_, and is:\n\n    `Copyright Â© 2001-2018 Python Software Foundation; All Rights Reserved\n    <https://bit.ly/2JzG17l>`_\n\n    This differs from the ``importlib.util._LazyModule`` in that it tracks\n    the state of the Lazy Loaded module and has had some\n    `unused code <https://bit.ly/2EARVu6>` removed.\n    '
        set_0 = {str_0}
        user_string_0 = module_1.UserString(set_0)
        tuple_0 = module_0.encode(user_string_0, user_string_0)
        str_1 = 'c5%7Uz'
        tuple_1 = module_0.encode(str_1)
        user_string_1 = module_1.UserString(str_1)
        tuple_2 = module_0.encode(user_string_1, str_1)
        str_2 = "\rg4K)g^5\x0by'"
        tuple_3 = module_0.encode(str_2)
        bytes_0 = b"\x05\xe1\xfe\x9b#y\x83'\\\xed\xca\xa7\xe8\x1e"
        tuple_4 = module_0.decode(bytes_0)
    except BaseException:
        pass