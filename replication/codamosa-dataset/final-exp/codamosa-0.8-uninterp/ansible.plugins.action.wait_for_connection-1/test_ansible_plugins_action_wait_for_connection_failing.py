# Automatically generated by Pynguin.
import ansible.plugins.action.wait_for_connection as module_0

def test_case_0():
    try:
        timed_out_exception_0 = module_0.TimedOutException()
        list_0 = []
        str_0 = 'jinja2_native'
        int_0 = 1021
        bool_0 = True
        bytes_0 = b'\xaebW\x06\xab\x8bf'
        list_1 = [bytes_0, list_0, bytes_0]
        str_1 = 'nu\x0cg`ue>'
        str_2 = '+\r6,5>>p]Z)b&D9TI4C'
        float_0 = 2233.08378
        int_1 = -1097
        action_module_0 = module_0.ActionModule(list_1, str_1, list_0, str_2, float_0, int_1)
        dict_0 = {float_0: str_0, timed_out_exception_0: str_1}
        action_module_1 = module_0.ActionModule(action_module_0, list_0, int_1, list_0, dict_0, bytes_0)
        var_0 = action_module_1.do_until_success_or_timeout(bool_0, int_0, str_0, list_1, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        timed_out_exception_0 = module_0.TimedOutException()
        dict_0 = {}
        timed_out_exception_1 = module_0.TimedOutException()
        int_0 = 2366
        str_0 = '9"U$K .LUG3Swf!&g'
        str_1 = '[K$\r9dR'
        set_0 = {str_0, timed_out_exception_1, str_1, int_0}
        action_module_0 = module_0.ActionModule(dict_0, timed_out_exception_1, int_0, str_0, str_1, set_0)
        var_0 = action_module_0.run(timed_out_exception_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        bool_0 = True
        dict_1 = {}
        float_0 = -823.68
        float_1 = 4271.2139
        float_2 = -4313.0
        bytes_0 = b'\x16i\xf3\x8d\xd2}y\xb2h\x7f['
        action_module_0 = module_0.ActionModule(dict_1, float_0, float_1, float_1, float_2, bytes_0)
        var_0 = action_module_0.run(list_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        timed_out_exception_0 = module_0.TimedOutException()
        list_0 = []
        bool_0 = None
        bytes_0 = b'\x1a\x91'
        bytes_1 = b'\xaeb\xc6\x06\xab\x8bf'
        bytes_2 = b'\xea$\xf2/(`\x1d'
        list_1 = [timed_out_exception_0, list_0, bytes_0, bytes_1]
        bool_1 = True
        str_0 = 'cX]q`f\n_'
        str_1 = ''
        dict_0 = {str_0: timed_out_exception_0, str_1: str_1, str_0: bytes_2}
        str_2 = '&,sjbFZ_$M_$('
        set_0 = {bytes_1, bytes_2}
        bytes_3 = b'\xfd\x997\xcd\x86\x86\xbd\xc7\xbcC\xf2\xed\x7f\xd2\xaa\xad32'
        str_3 = '\n  play #%d (%s): %s'
        bool_2 = True
        list_2 = [bool_0, list_0]
        action_module_0 = module_0.ActionModule(bytes_3, set_0, str_3, bool_2, list_2, dict_0)
        action_module_1 = module_0.ActionModule(list_0, str_2, set_0, action_module_0, str_2, timed_out_exception_0)
        var_0 = action_module_1.do_until_success_or_timeout(list_1, bool_1, dict_0, timed_out_exception_0)
    except BaseException:
        pass

def test_case_4():
    try:
        timed_out_exception_0 = module_0.TimedOutException()
        list_0 = []
        str_0 = 'jinja2_native'
        bool_0 = None
        int_0 = -1129
        bytes_0 = b'\x1a\x91'
        bool_1 = True
        bytes_1 = b'\xea$\xf2/(`\x1d'
        list_1 = [bytes_1, list_0, bytes_1]
        str_1 = 'nu\x0cg`ue>'
        float_0 = 2233.08378
        int_1 = -1097
        str_2 = 'loZb#Ak)'
        str_3 = 'ERROR: modified files exist in the repository.'
        str_4 = 'gcOiAcma'
        tuple_0 = ()
        set_0 = {tuple_0, float_0}
        str_5 = '&;=u}s;v|5`bwx6<b=TS'
        dict_0 = {str_2: set_0, str_1: str_2, str_4: int_0, str_5: str_4}
        dict_1 = {str_5: bytes_1, int_1: bytes_0, bytes_1: str_2}
        action_module_0 = module_0.ActionModule(list_0, set_0, dict_0, timed_out_exception_0, dict_1, list_0)
        tuple_1 = (str_3, str_4, action_module_0, str_5)
        tuple_2 = (str_0, str_2, tuple_1)
        float_1 = -181.65554
        action_module_1 = module_0.ActionModule(timed_out_exception_0, tuple_2, action_module_0, timed_out_exception_0, bytes_1, float_1)
        action_module_2 = module_0.ActionModule(list_1, str_1, list_0, str_3, float_0, int_1)
        dict_2 = {float_0: str_0, timed_out_exception_0: str_1}
        action_module_3 = module_0.ActionModule(action_module_2, list_0, int_1, list_0, dict_2, bytes_1)
        var_0 = action_module_3.do_until_success_or_timeout(bool_0, int_0, bytes_0, bool_1, bytes_1)
    except BaseException:
        pass

def test_case_5():
    try:
        timed_out_exception_0 = module_0.TimedOutException()
        list_0 = []
        int_0 = 1021
        bytes_0 = b'\xaeb\xc6\x06\xab\x8bf'
        bytes_1 = b'\xea$\xf2/(`\x1d'
        list_1 = [timed_out_exception_0, list_0, bytes_1, bytes_0]
        str_0 = 'cX]q`f\n_'
        str_1 = ''
        dict_0 = {str_0: timed_out_exception_0, str_1: str_1, str_0: bytes_1}
        set_0 = {bytes_0, bytes_1}
        bytes_2 = b'\xfd\x997\xcd\x86\x86\xbd\xc7\xbcC\xf2\xed\x7f\xd2\xaa\xad32'
        str_2 = '\n  play #%d (%s): %s'
        bool_0 = True
        action_module_0 = module_0.ActionModule(bytes_2, set_0, str_2, bool_0, list_1, dict_0)
        float_0 = 1.5
        str_3 = None
        action_module_1 = module_0.ActionModule(list_0, float_0, list_0, timed_out_exception_0, str_3, list_0)
        list_2 = [set_0, bytes_2, timed_out_exception_0, str_1]
        tuple_0 = (str_1, int_0, action_module_1, str_3)
        var_0 = action_module_0.do_until_success_or_timeout(timed_out_exception_0, float_0, list_2, tuple_0)
    except BaseException:
        pass