# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0
import collections as module_1

def test_case_0():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = 'H:QBz9X,<["*"'
        str_1 = "'y#;J{%R7\r9A4"
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace(str_1)
        var_1 = module_0.tsort(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '>lUE8g[=\n;_/_'
        bytes_0 = b'\x15\x18e\xbd\xb9\x12\xaah)P'
        var_0 = module_0.collector_classes_from_gather_subset(str_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = ')o2{PP>MS\\{Dk'
        var_1 = module_0.build_fact_id_to_collector_map(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b"\xce\xca\x9b\x97W'\xf7\xdca\xf3*\x17"
        str_0 = 'NWc\x0b4I"W~'
        var_0 = module_0.find_unresolved_requires(bytes_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -3555.0
        list_0 = [float_0]
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0)
        str_0 = 'qDEv+B6ztQ.Gt'
        set_0 = {str_0, str_0, str_0}
        str_1 = 'update_only'
        str_2 = '=@\n'
        dict_0 = {str_1: str_1, str_2: str_2}
        collector_not_found_error_1 = module_0.CollectorNotFoundError()
        var_0 = module_0.find_unresolved_requires(set_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        list_0 = [var_0, var_0, var_0]
        str_0 = '\x0b<:@J]BOF'
        var_1 = module_0.resolve_requires(list_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 100.0
        bytes_0 = b'\x07\xa3\x12\x06\x86\xc1\x9f\xf0=\xc2\\\xcb0\xb7\xa1\xd4`\x98\xff'
        bytes_1 = b'PA\x83\xd1\xd1'
        str_0 = ' Handles Negotiate/Kerberos support through the gssapi library. '
        str_1 = 'Failed to %s service: %s'
        dict_0 = {str_0: str_0}
        dict_1 = {str_0: str_0, str_1: str_0, str_1: dict_0}
        base_fact_collector_0 = module_0.BaseFactCollector(dict_1)
        var_0 = base_fact_collector_0.collect_with_namespace(bytes_0, bytes_1)
        base_fact_collector_1 = module_0.BaseFactCollector(float_0)
        list_0 = [float_0, float_0]
        base_fact_collector_2 = module_0.BaseFactCollector(list_0)
        var_1 = base_fact_collector_2.collect()
        str_2 = 'IBJ\\`/r'
        list_1 = [str_2]
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_1)
        list_2 = [str_2, str_2, str_2, str_2]
        var_2 = module_0.get_collector_names()
        var_3 = module_0.resolve_requires(str_2, list_2)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = '[ q,hz('
        list_0 = [dict_0, dict_0, str_0, dict_0]
        str_1 = None
        dict_1 = {str_0: str_0, str_1: list_0, str_1: dict_0}
        var_0 = module_0.resolve_requires(dict_0, dict_1)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        unresolved_fact_dep_1 = module_0.UnresolvedFactDep()
        str_2 = 'j8\x0b}4\n,a'
        base_fact_collector_0 = module_0.BaseFactCollector(str_2)
        var_1 = base_fact_collector_0.collect_with_namespace()
        var_2 = module_0.collector_classes_from_gather_subset()
        bytes_0 = b'\xcb'
        bool_0 = True
        var_3 = module_0.find_unresolved_requires(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_0 = [unresolved_fact_dep_0]
        var_0 = module_0.tsort(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        dict_0 = {unresolved_fact_dep_0: unresolved_fact_dep_0, unresolved_fact_dep_0: unresolved_fact_dep_0}
        base_fact_collector_0 = module_0.BaseFactCollector(dict_0)
        var_0 = base_fact_collector_0.collect_with_namespace()
        list_0 = [unresolved_fact_dep_0]
        var_1 = module_0.tsort(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 500.27705
        list_0 = [float_0, float_0, float_0, float_0]
        list_1 = [float_0, float_0]
        set_0 = {float_0}
        var_0 = module_0.collector_classes_from_gather_subset(float_0, list_0, list_1, list_1, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'v-E8O[(I'
        str_1 = 'x*4vYclSH\x0c&'
        list_0 = [str_1, str_0, str_0, str_1]
        dict_0 = {str_1: list_0}
        var_0 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xa9\xfd\xef:\xc5\x0f'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.tsort(dict_0)
        var_1 = module_0.get_collector_names()
        bool_0 = False
        base_fact_collector_0 = module_0.BaseFactCollector(bool_0)
        str_0 = 'B9FbAyEKpkLIt>WX>f1'
        var_2 = module_0.build_dep_data(bool_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Linux'
        dict_0 = {}
        var_0 = module_0.build_dep_data(str_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 1737.681151
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        base_fact_collector_0 = module_0.BaseFactCollector()
        tuple_0 = (collector_not_found_error_0, base_fact_collector_0)
        list_0 = [float_0, tuple_0, base_fact_collector_0]
        bool_0 = True
        str_0 = '""f8P7Qjps_Ylg'
        str_1 = 'q\np5'
        dict_0 = {cycle_found_in_fact_deps_0: bool_0, str_0: tuple_0, str_1: bool_0}
        var_0 = module_0.get_collector_names(unresolved_fact_dep_0, cycle_found_in_fact_deps_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        str_0 = 'qbL0oNLG3!prsz'
        list_0 = [dict_0, dict_0, str_0, dict_0]
        str_1 = None
        dict_1 = {str_0: str_0, str_1: list_0, str_1: dict_0}
        str_2 = '|'
        dict_2 = {str_2: str_1}
        list_1 = [dict_2, str_1, list_0, dict_1]
        var_0 = module_0.resolve_requires(list_1, list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'm\txo`d}f66'
        str_1 = '5>=&y'
        var_0 = frozenset(str_0)
        var_1 = frozenset(str_0)
        var_2 = module_0.get_collector_names(var_0, var_1)
        var_3 = module_0.get_collector_names(var_0, var_1, str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        str_0 = 'Qo*B)npg\x0c3<XFn'
        base_fact_collector_0 = module_0.BaseFactCollector(str_0)
        defaultdict_0 = module_1.defaultdict()
        bool_0 = True
        list_0 = None
        tuple_0 = (base_fact_collector_0, defaultdict_0, bool_0, list_0)
        var_0 = module_0.build_fact_id_to_collector_map(tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = {}
        str_0 = '[ q,hz('
        var_0 = module_0.get_collector_names(str_0, str_0)
        list_0 = [str_0, dict_0, str_0, dict_0]
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        dict_1 = {str_0: str_0, str_0: list_0, str_0: dict_0}
        var_1 = module_0.resolve_requires(dict_0, dict_1)
        list_1 = [list_0, dict_0, var_0]
        collector_not_found_error_1 = module_0.CollectorNotFoundError(*list_1)
        list_2 = []
        base_fact_collector_0 = module_0.BaseFactCollector()
        tuple_0 = (base_fact_collector_0,)
        var_2 = base_fact_collector_0.collect_with_namespace(collector_not_found_error_0)
        list_3 = [str_0, var_2, tuple_0]
        var_3 = base_fact_collector_0.collect_with_namespace(list_3)
        base_fact_collector_1 = module_0.BaseFactCollector(tuple_0, base_fact_collector_0)
        var_4 = base_fact_collector_1.collect_with_namespace()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        str_1 = 'X'
        var_5 = module_0.select_collector_classes(list_2, str_0)
        bytes_0 = b'*\xf9\x02\x89X\x972&\xec\xb0\xbbk\x19\xb8'
        var_6 = base_fact_collector_0.collect(unresolved_fact_dep_0)
        base_fact_collector_2 = module_0.BaseFactCollector(str_0)
        int_0 = None
        list_4 = [int_0, bytes_0, collector_not_found_error_0]
        base_fact_collector_3 = module_0.BaseFactCollector()
        var_7 = module_0.collector_classes_from_gather_subset(int_0, bytes_0, list_4)
        unresolved_fact_dep_1 = module_0.UnresolvedFactDep()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        float_0 = 0.2
        dict_2 = {str_1: base_fact_collector_3, str_0: unresolved_fact_dep_1}
        defaultdict_0 = module_1.defaultdict(**dict_2)
        var_8 = module_0.collector_classes_from_gather_subset(cycle_found_in_fact_deps_0, collector_not_found_error_1, tuple_0, float_0, defaultdict_0, list_4)
    except BaseException:
        pass