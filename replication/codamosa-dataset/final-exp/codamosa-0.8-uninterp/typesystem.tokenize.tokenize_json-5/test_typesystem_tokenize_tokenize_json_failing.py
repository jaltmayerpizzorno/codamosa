# Automatically generated by Pynguin.
import typesystem.tokenize.tokenize_json as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        bytes_0 = b'{H\xaaP\xac\xa0\x91*C?\x87\x81W'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x867&\xaf'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xae\\\x89I\xd0\x9d'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n    {\n        "string": "hello",\n        "number": 1.0,\n        "array": ["hello", 1.0],\n        "dict": {"foo": "bar"\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tokenizing_decoder_0 = module_0._TokenizingDecoder()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'C?FDQTW`)ZQxyz'
        field_0 = None
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'n\xb3\x96+\x81\x88\nR\xe5\xd3\x93\x98\x90\x1a\xd2'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "}|00'Yj"
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'tI4x(6& L5;8\n'
        field_0 = module_1.Field(title=str_0, description=str_0)
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'fP'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\n\x8c1'
        token_0 = module_0.tokenize_json(bytes_0)
        token_1 = module_0.tokenize_json(bytes_0)
        field_0 = module_1.Field(default=token_1)
        any_0 = module_0.validate_json(bytes_0, field_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "{\r\x0bwJ_$/'f=}"
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\n    {\n        "string":F"hello",\n        "number": 1.0,\n        "array": ["hello", 1.0],\n        "dict": {"foo": "bar"\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n    {\n        "string": "ello",\n       "numer": 1.0,\n        "array": ["hello", 1.0],\n     t  "dictk: {"foo": "bar"\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\n    {\n        "tring: "ello",\n      "numer": 1.0,\n        "array": ["hello", 1.0],\n        "dict": {"foo": "bar"\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\n    {\n        "string": "hello",\n        "number": 1.0,\n        "array": ["hello", 1.0\x0c,\n        "dict": {"foo": "bar"\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '['
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\n    {\n       "string": "hell3",\n        "number": 1.0,\n       "array": ["hello", 10],\n        "dict":  "foo": "bar"\n    }\n    '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass