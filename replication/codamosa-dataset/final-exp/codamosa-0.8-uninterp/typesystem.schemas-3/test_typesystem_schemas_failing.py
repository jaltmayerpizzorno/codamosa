# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        str_0 = '\n    A validation or parse error, containing one or more error messages.\n    Error information is accessible either by accessing as a dict-like object,\n    eg. `dict(error)` or by returning the list of messages with `error.messages()`.\n\n    ValidationError is either raised, in the `validate()` usage:\n\n    value = MySchema.validate(data)\n\n    Or returned in the `validate_or_error()` usage:\n\n    value, error = MySchema.validate_or_error(data)\n    '
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(iterator_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'a'
        list_0 = [str_0]
        schema_0 = module_0.Schema(*list_0)
        dict_0 = {}
        str_1 = schema_0.__repr__()
        reference_0 = module_0.Reference(str_0, **dict_0)
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        int_0 = schema_definitions_0.__len__()
        iterator_0 = schema_0.__iter__()
        union_0 = None
        reference_1 = module_0.Reference(str_0, union_0, **dict_0)
        bool_0 = False
        any_0 = reference_1.validate(list_0, strict=bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        field_0 = module_1.Field()
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_definitions_0.__delitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        schema_0 = module_0.Schema()
        str_0 = '.Y&Y~r~EyipeyeGE<+h'
        list_0 = [str_0, str_0, schema_0, str_0]
        schema_metaclass_0 = module_0.SchemaMetaclass(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'm^/\na5a;\\\x0c'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        schema_0 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'G9=&Ond:_nlpx*(\\v'
        field_0 = module_1.Field(title=str_0, default=str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_0)
        list_0 = None
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        schema_0 = None
        str_0 = '~_-^ ~$cMO;>vU;|i~`'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(schema_0)
        str_1 = "e1(49[c'\n(G"
        dict_0 = {str_1: str_1, str_1: str_1}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        iterator_0 = schema_definitions_0.__iter__()
        schema_definitions_0.__delitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        field_0 = module_1.Field(default=iterator_0)
        any_0 = field_0.get_default_value()
        list_0 = [any_0, any_0, schema_definitions_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        any_0 = schema_0.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_10():
    try:
        schema_0 = module_0.Schema()
        str_0 = 'HVr*(wP,y0&B\x0cf=3)'
        dict_0 = {}
        reference_0 = module_0.Reference(str_0, **dict_0)
        str_1 = None
        reference_1 = module_0.Reference(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        iterator_0 = None
        str_0 = 'k2E}X7k~'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(iterator_0)
    except BaseException:
        pass

def test_case_12():
    try:
        field_0 = module_1.Field()
        bool_0 = field_0.has_default()
        str_0 = ':'
        dict_0 = {str_0: field_0}
        schema_0 = module_0.Schema()
        str_1 = schema_0.__repr__()
        iterator_0 = schema_0.__iter__()
        bool_1 = schema_0.__eq__(schema_0)
        list_0 = [schema_0]
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0, **dict_0)
        int_0 = schema_definitions_0.__len__()
        iterator_1 = schema_0.__iter__()
        reference_0 = module_0.Reference(str_1, field_0)
        any_0 = reference_0.validate(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        int_0 = schema_0.__len__()
        str_1 = '83[p#n&<Q:gp?\r;'
        dict_0 = {str_0: str_0, str_1: schema_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_0.__setitem__(str_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = None
        str_0 = '$BiwE0t}a|=&H\n^5f[w'
        reference_0 = module_0.Reference(str_0)
        bool_0 = True
        field_0 = module_1.Field(title=str_0, allow_null=bool_0)
        any_0 = field_0.serialize(dict_0)
        list_0 = [any_0]
        str_1 = 'GGl7;g2{m'
        dict_1 = {str_1: list_0}
        schema_0 = module_0.Schema(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_15():
    try:
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(schema_0)
        iterator_0 = schema_0.__iter__()
        int_0 = schema_0.__len__()
        field_0 = module_1.Field()
        bool_1 = field_0.has_default()
        str_0 = ':'
        dict_0 = {str_0: field_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        module_0.set_definitions(field_0, schema_definitions_0)
        str_1 = schema_0.__repr__()
        bool_2 = schema_0.__eq__(schema_0)
        iterator_1 = schema_0.__iter__()
        bool_3 = schema_0.__eq__(iterator_1)
        list_0 = [schema_0]
        schema_definitions_1 = module_0.SchemaDefinitions(*list_0, **dict_0)
        int_1 = schema_0.__len__()
        int_2 = schema_definitions_0.__len__()
        schema_1 = module_0.Schema()
        schema_2 = module_0.Schema(*list_0)
        int_3 = schema_definitions_1.__len__()
        iterator_2 = schema_2.__iter__()
        reference_0 = module_0.Reference(str_1)
        schema_definitions_2 = module_0.SchemaDefinitions(*list_0, **dict_0)
        iterator_3 = schema_definitions_1.__iter__()
        bool_4 = True
        reference_1 = module_0.Reference(str_0, dict_0)
        any_0 = reference_1.validate(iterator_1, strict=bool_4)
    except BaseException:
        pass

def test_case_16():
    try:
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(schema_0)
        int_0 = schema_0.__len__()
        field_0 = module_1.Field()
        bool_1 = field_0.has_default()
        str_0 = 'V'
        dict_0 = {str_0: field_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        module_0.set_definitions(field_0, schema_definitions_0)
        bytes_0 = b'\xc9\x0f\xe2x"a\x1ep'
        schema_1 = module_0.Schema()
        list_0 = [bool_1, bytes_0, schema_definitions_0, schema_1]
        schema_metaclass_0 = module_0.SchemaMetaclass(*list_0)
    except BaseException:
        pass