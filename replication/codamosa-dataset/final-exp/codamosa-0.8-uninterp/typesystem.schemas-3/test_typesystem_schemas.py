# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    pass

def test_case_1():
    schema_definitions_0 = module_0.SchemaDefinitions()

def test_case_2():
    bool_0 = False
    schema_definitions_0 = module_0.SchemaDefinitions()
    schema_definitions_0.__setitem__(bool_0, schema_definitions_0)
    any_0 = schema_definitions_0.__getitem__(bool_0)

def test_case_3():
    field_0 = module_1.Field()
    schema_definitions_0 = module_0.SchemaDefinitions()
    module_0.set_definitions(field_0, schema_definitions_0)

def test_case_4():
    schema_0 = module_0.Schema()

def test_case_5():
    str_0 = ''
    list_0 = [str_0]
    schema_0 = module_0.Schema(*list_0)

def test_case_6():
    schema_0 = module_0.Schema()
    str_0 = schema_0.__repr__()

def test_case_7():
    schema_0 = module_0.Schema()
    bool_0 = schema_0.__eq__(schema_0)

def test_case_8():
    str_0 = None
    dict_0 = {str_0: str_0}
    schema_0 = module_0.Schema()
    bool_0 = schema_0.__eq__(dict_0)
    schema_1 = module_0.Schema()
    str_1 = schema_1.__repr__()
    iterator_0 = schema_1.__iter__()

def test_case_9():
    schema_0 = module_0.Schema()
    object_0 = module_1.Object(pattern_properties=schema_0)

def test_case_10():
    schema_0 = module_0.Schema()
    int_0 = schema_0.__len__()

def test_case_11():
    schema_0 = module_0.Schema()
    str_0 = 'L'
    reference_0 = module_0.Reference(str_0)
    any_0 = reference_0.serialize(schema_0)

def test_case_12():
    str_0 = '=3qtM`e<!bz#)4!0'
    dict_0 = {str_0: str_0, str_0: str_0}
    list_0 = [dict_0]
    schema_0 = module_0.Schema(*list_0)