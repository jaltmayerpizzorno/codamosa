# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 257
        int_1 = 1
        str_0 = ''
        leaf_0 = module_0.Leaf(int_1, str_0)
        leaf_1 = [leaf_0]
        node_0 = module_0.Node(int_0, leaf_1)
        var_0 = repr(node_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1900
        str_0 = 'g1dYoh|}C2cthg'
        leaf_0 = module_0.Leaf(int_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'w\re(T1v1'
        int_0 = 1202
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        node_pattern_0 = module_0.NodePattern(wildcard_pattern_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_6():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'N\x0b|&apBM\nO;sLB8]'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = {wildcard_pattern_0}
        negated_pattern_0 = module_0.NegatedPattern(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'E ZOiFo)!Pk1!LDX{['
        int_0 = -928
        list_0 = []
        list_1 = []
        node_0 = module_0.Node(int_0, list_0, str_0, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -1765
        str_0 = '/-|h0n(3Ag-!(C8#'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = []
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_10():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = ''
        dict_0 = {str_0: str_0}
        base_pattern_0 = module_0.BasePattern(**dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'bae_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        int_0 = -829
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'bae_naUme'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 53
        str_1 = 'C`-]+=~2Kp-2('
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_1, tuple_0)
        str_2 = ''
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_2)
        leaf_1 = leaf_0.clone()
        str_3 = leaf_0.__str__()
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = -1124
        str_0 = '\x0cy^/nPbZsu)wkH'
        bool_0 = negated_pattern_0.match(str_0)
        str_1 = 'E ZOiFo)!PkLDX{['
        wildcard_pattern_0 = module_0.WildcardPattern(str_1)
        bool_1 = wildcard_pattern_0.match(negated_pattern_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = None
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 2805
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 297
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        list_1 = [node_1, node_1, node_0]
        str_0 = ''
        node_2 = module_0.Node(int_0, list_1, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'E ZOiFo)!PkLDX{['
        int_0 = 2
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'Bp}\x0c5+K<mp'
        int_0 = 93
        str_1 = 'av'
        leaf_0 = module_0.Leaf(int_0, str_1)
        leaf_1 = leaf_0.clone()
        str_2 = leaf_1.__str__()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 1226
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 56
        str_0 = '/rM"\tKsR`>R&'
        bytes_0 = b'\x97\x8c\x16J\x87Q\xfc'
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(bytes_0)
        int_1 = 3439
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = [int_0, int_0, str_0, tuple_1]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
        grammar_0 = module_1.Grammar()
        grammar_0.report()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1)
        iterator_0 = leaf_0.post_order()
        iterator_1 = wildcard_pattern_0.generate_matches(iterator_0)
        iterator_2 = leaf_0.leaves()
        any_0 = wildcard_pattern_0.optimize()
        int_2 = -1312
        leaf_1 = leaf_0.clone()
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_2)
    except BaseException:
        pass

def test_case_22():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 3023
        list_0 = []
        str_0 = '*\x0bE~UA?/@^#J&j4#^7'
        dict_0 = {}
        node_0 = module_0.Node(int_0, list_0, str_0, dict_0)
        int_1 = 48
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1, int_1)
        bool_0 = wildcard_pattern_0.match(grammar_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'E ZOiFo)!Pk1!LDX{['
        int_0 = 9
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 1226
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, int_0)
        node_0.replace(node_0)
    except BaseException:
        pass

def test_case_25():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 1197
        str_0 = 's%1s'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = -1101
        str_0 = 'E ZOiFo)!PkLDX{['
        int_1 = 2147
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1, int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'bae_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        int_0 = -829
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 1264
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_0 = node_0.__str__()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'Node'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        optional_0 = None
        node_pattern_0 = module_0.NodePattern(optional_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 1264
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_0 = node_0.__str__()
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 62
        str_0 = '/rM"\tKsR`>R&'
        int_1 = 1785
        list_0 = []
        any_0 = None
        node_0 = module_0.Node(int_1, list_0, any_0, str_0)
        bytes_0 = b'\x97\x8c\x16J\x87Q\xfc'
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(bytes_0)
        int_2 = 3439
        tuple_0 = (int_2, int_0)
        tuple_1 = (str_0, tuple_0)
        list_1 = [int_0, int_0, str_0, tuple_1, bytes_0]
        int_3 = 2003
        list_2 = []
        float_0 = -3500.0
        node_1 = module_0.Node(int_3, list_2, float_0, list_1)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_1)
        grammar_0 = module_1.Grammar()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_2)
        iterator_0 = leaf_0.pre_order()
        node_1.set_child(int_1, node_1)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 2685
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        iterator_0 = node_0.post_order()
        node_0.append_child(node_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 1234
        str_0 = 'mj#>y'
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 19
        grammar_0 = module_1.Grammar()
        leaf_pattern_0 = module_0.LeafPattern(int_0, grammar_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'NodSe'
        node_0 = None
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(node_0)
        int_0 = -276
        wildcard_pattern_0 = module_0.WildcardPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = {str_0}
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        bytes_0 = b'\x82-*\x88\xf6\x11\x18\x94\xe6\x1f\x86'
        iterator_0 = negated_pattern_0.generate_matches(bytes_0)
        iterator_1 = negated_pattern_0.generate_matches(set_0)
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'bae_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0, str_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'Bp}\x0c5+Kd<mB'
        int_0 = 1
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        iterator_0 = wildcard_pattern_0.generate_matches(str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        str_1 = None
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 98
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_0, tuple_0)
        int_2 = None
        list_0 = [int_2, wildcard_pattern_0, str_1, tuple_1]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_1, list_0)
        leaf_1 = leaf_0.clone()
        bool_0 = wildcard_pattern_0.match(leaf_1)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 62
        str_0 = '/rM"\tKsR`>R&'
        int_1 = 1785
        list_0 = []
        any_0 = None
        node_0 = module_0.Node(int_1, list_0, any_0, str_0)
        bytes_0 = b'y\xd8\x0f\x85x\xbe\xf3\xf7N\xf8Y\xdc\xe2/\xf5T\x98V7'
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(bytes_0)
        int_2 = 3429
        tuple_0 = (int_2, int_0)
        tuple_1 = (str_0, tuple_0)
        str_1 = '#uBe 1\t'
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_1, str_1)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        node_pattern_0 = module_0.NodePattern(int_2, leaf_2)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 654
        str_0 = 'kXleqMO$'
        dict_0 = {str_0: str_0, str_0: str_0}
        wildcard_pattern_0 = module_0.WildcardPattern(dict_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 1243
        grammar_0 = module_1.Grammar()
        optional_0 = None
        float_0 = 1172.523521
        list_0 = []
        optional_1 = None
        node_0 = module_0.Node(int_0, list_0, optional_1)
        tuple_0 = (int_0, optional_0, float_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 1182
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        grammar_0 = module_1.Grammar()
        int_1 = 2
        str_0 = '|N~4%r'
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        list_1 = [list_0, list_0, int_0, int_1]
        leaf_0 = module_0.Leaf(int_1, str_0, tuple_1, list_1)
        iterator_0 = leaf_0.leaves()
        wildcard_pattern_0 = module_0.WildcardPattern(iterator_0, int_1, int_1)
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = 1282
        str_0 = 'kXleqMG$'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        wildcard_pattern_0 = module_0.WildcardPattern(dict_0, int_0, int_0, str_0)
        tuple_0 = ()
        list_0 = []
        any_0 = wildcard_pattern_0.optimize()
        list_1 = [dict_0, int_0, any_0]
        node_0 = module_0.Node(int_0, list_0, any_0, str_0, list_1)
        node_1 = node_0.clone()
        int_1 = -1507
        str_1 = ''
        str_2 = 'qF;\nSM(==qbc*64\x0bCr'
        tuple_1 = (int_1, int_1)
        tuple_2 = (str_2, tuple_1)
        list_2 = [tuple_1, tuple_0, wildcard_pattern_0, str_0]
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_2, list_2)
    except BaseException:
        pass

def test_case_44():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0, list_0]
        negated_pattern_0 = module_0.NegatedPattern()
        iterator_0 = negated_pattern_0.generate_matches(list_1)
        wildcard_pattern_0 = module_0.WildcardPattern(iterator_0)
    except BaseException:
        pass

def test_case_45():
    try:
        int_0 = 1225
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        optional_0 = node_0.remove()
        int_1 = node_0.depth()
        optional_1 = node_0.get_lineno()
        node_1 = node_0.clone()
        node_0.append_child(node_1)
        node_0.append_child(node_1)
        str_0 = 'wR~ZoxS=(m7/PUlV.m'
        list_1 = None
        leaf_0 = module_0.Leaf(int_1, str_0, list_1)
        node_0.invalidate_sibling_maps()
        leaf_1 = leaf_0.clone()
        node_1.replace(node_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'z'
        int_0 = 1
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
    except BaseException:
        pass

def test_case_47():
    try:
        int_0 = 1226
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        optional_0 = node_0.remove()
        int_1 = node_0.depth()
        iterator_0 = node_0.pre_order()
        str_0 = 'print'
        leaf_0 = module_0.Leaf(int_1, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        leaf_3 = leaf_0.clone()
        node_1 = node_0.clone()
        str_1 = 'F>'
        wildcard_pattern_0 = module_0.WildcardPattern(str_1)
        any_0 = wildcard_pattern_0.optimize()
        node_0.append_child(leaf_3)
        optional_1 = node_0.get_lineno()
        node_0.replace(leaf_3)
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = 1254
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        optional_0 = node_0.remove()
        int_1 = node_0.depth()
        iterator_0 = node_0.pre_order()
        str_0 = 'print'
        leaf_0 = module_0.Leaf(int_1, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        leaf_3 = leaf_1.clone()
        leaf_4 = leaf_2.clone()
        node_1 = node_0.clone()
        str_1 = 'F>'
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_1)
        any_0 = wildcard_pattern_0.optimize()
        node_0.append_child(node_1)
        optional_1 = node_0.get_lineno()
        node_2 = None
        node_1.replace(node_2)
    except BaseException:
        pass