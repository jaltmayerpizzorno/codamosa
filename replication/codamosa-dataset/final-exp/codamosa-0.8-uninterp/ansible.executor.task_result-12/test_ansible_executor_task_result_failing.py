# Automatically generated by Pynguin.
import ansible.executor.task_result as module_0

def test_case_0():
    try:
        str_0 = 'd<Ozk{ttr='
        set_0 = None
        task_result_0 = module_0.TaskResult(str_0, str_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{"changed": false, "failed": false, "invocation": { "module_args": { "msg": "Hello world!" } }, "rc": 0, "stderr": "", "stdout": "", "stdout_lines": [ "Hello world!" ], "warnings": []}'
        var_0 = None
        task_result_0 = module_0.TaskResult(var_0, var_0, str_0)
        var_1 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -1902.0
        float_1 = -1145.0
        str_0 = 'Linux Mint'
        bytes_0 = b'\xd8Ug\x15\xffp>\xd1'
        task_result_0 = module_0.TaskResult(float_0, float_1, str_0, bytes_0)
        var_0 = task_result_0.is_failed()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "gU#A?Ese5!5<E\nH1\rn'"
        list_0 = [str_0, str_0, str_0]
        str_1 = '4\n\t1,p=Jir8525_S4\\Bo'
        task_result_0 = module_0.TaskResult(list_0, list_0, str_1)
        var_0 = task_result_0.is_unreachable()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\t6*[\r&WdaojpO'
        bool_0 = True
        dict_0 = {str_0: str_0, str_0: str_0, str_0: bool_0, str_0: str_0}
        str_1 = '/usr/bin/uname -i'
        task_result_0 = module_0.TaskResult(str_0, dict_0, str_1)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        str_0 = '-@3{K;0;UMa/TcL}'
        str_1 = '_x4'
        task_result_0 = module_0.TaskResult(dict_0, str_0, str_1)
        var_0 = task_result_0.is_skipped()
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = None
        str_0 = 'failed'
        bool_0 = True
        bool_1 = {str_0: bool_0}
        task_result_0 = module_0.TaskResult(var_0, var_0, bool_1)
        var_1 = task_result_0.is_failed()
        var_2 = task_result_0.clean_copy()
    except BaseException:
        pass