# Automatically generated by Pynguin.
import marshmallow.fields as module_0
import dataclasses_json.cfg as module_1
import dataclasses_json.undefined as module_2

def test_case_0():
    try:
        bool_0 = True
        optional_0 = None
        str_0 = "'fChB\rPj8"
        dict_0 = {str_0: bool_0, str_0: optional_0, str_0: str_0}
        field_0 = module_0.Field(missing=bool_0, metadata=optional_0, **dict_0)
        dict_1 = module_1.config(mm_field=field_0, undefined=str_0, field_name=str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Oaj'
        dict_0 = module_1.config(undefined=str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        global_config_0 = module_1._GlobalConfig()
        exclude_0 = module_1.Exclude()
        exclude_1 = module_1.Exclude()
        list_0 = []
        undefined_0 = module_2.Undefined.INCLUDE
        dict_0 = module_1.config(letter_case=list_0, undefined=undefined_0)
        str_0 = 'V0i\x0c{K{)#Wj\nlE'
        var_0 = exclude_1.<lambda>(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'w>2CE$C&\tCj\tTwhm'
        undefined_0 = module_2.Undefined.INCLUDE
        list_0 = [undefined_0, undefined_0, undefined_0]
        dict_0 = module_1.config(decoder=undefined_0, field_name=str_0, exclude=list_0)
        str_1 = '^^i'
        dict_1 = {str_1: str_1}
        field_0 = module_0.Field(**dict_1)
        validation_error_0 = field_0.make_error(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        global_config_0 = module_1._GlobalConfig()
        undefined_0 = module_2.Undefined.INCLUDE
        none_type_0 = None
        dict_1 = module_1.config(dict_0, encoder=global_config_0, undefined=undefined_0, exclude=none_type_0)
        global_config_1 = module_1._GlobalConfig()
        str_0 = '&~\x0b'
        exclude_0 = module_1.Exclude()
        bool_0 = False
        field_0 = module_0.Field(dump_default=str_0, dump_only=bool_0)
        global_config_2 = module_1._GlobalConfig()
        dict_2 = {}
        exclude_1 = module_1.Exclude(**dict_2)
        exclude_2 = module_1.Exclude()
        bool_1 = True
        optional_0 = None
        list_0 = [bool_1]
        dict_3 = module_1.config(decoder=optional_0, letter_case=list_0, exclude=dict_2)
    except BaseException:
        pass

def test_case_5():
    try:
        global_config_0 = module_1._GlobalConfig()
        dict_0 = {global_config_0: global_config_0, global_config_0: global_config_0}
        str_0 = 'exclude'
        dict_1 = module_1.config(dict_0, letter_case=dict_0, undefined=str_0, field_name=str_0)
    except BaseException:
        pass