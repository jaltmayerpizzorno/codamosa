# Automatically generated by Pynguin.
import pysnooper.tracer as module_0

def test_case_0():
    try:
        str_0 = '\n'
        var_0 = module_0.get_path_and_source_from_frame(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{indent}Return value:.. {return_value_repr}'
        dict_0 = {str_0: str_0}
        var_0 = module_0.get_write_function(dict_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '[C#u\\$'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        file_writer_0 = None
        tracer_0 = module_0.Tracer(str_0, dict_0, file_writer_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        tracer_0 = module_0.Tracer(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = None
        list_0 = [set_0]
        dict_0 = None
        str_0 = '__name__'
        int_0 = -67
        file_writer_0 = module_0.FileWriter(set_0, list_0)
        set_1 = set()
        tracer_0 = module_0.Tracer(file_writer_0, set_1)
        var_0 = tracer_0.__exit__(dict_0, str_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__call__(tracer_0)
    except BaseException:
        pass

def test_case_6():
    try:
        unavailable_source_0 = None
        tracer_0 = module_0.Tracer(unavailable_source_0)
        var_0 = tracer_0.__enter__()
        int_0 = -5
        str_0 = 'o=jLTA@6[GPO&b8'
        str_1 = 'Cup0K~CKD?\\PG/0Z}5'
        var_1 = module_0.get_write_function(str_0, str_1)
        var_2 = tracer_0.__call__(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = None
        bool_0 = True
        float_0 = -4865.33
        file_writer_0 = module_0.FileWriter(bool_0, float_0)
        var_0 = file_writer_0.write(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tracer_0 = module_0.Tracer()
        str_0 = 'o=jLTA@6[GPO&b8'
        var_0 = tracer_0.__enter__()
        str_1 = '1xVHOi[Kzv'
        unavailable_source_0 = module_0.UnavailableSource()
        str_2 = ''
        dict_0 = {str_0: str_0, str_2: str_2, str_0: var_0}
        file_writer_0 = module_0.FileWriter(dict_0, dict_0)
        var_1 = file_writer_0.write(str_1)
        int_0 = 754
        file_writer_1 = module_0.FileWriter(int_0, str_0)
        str_3 = None
        dict_1 = {str_3: str_0}
        var_2 = file_writer_1.write(dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        unavailable_source_0 = None
        tracer_0 = module_0.Tracer(unavailable_source_0)
        complex_0 = None
        var_0 = tracer_0.__enter__()
        var_1 = tracer_0.__enter__()
        file_writer_0 = module_0.FileWriter(complex_0, str_0)
        var_2 = file_writer_0.write(unavailable_source_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xac?\xfc\x04\x9a:\xf99~e\xc0\x1a\x10?h:'
        str_0 = None
        unavailable_source_0 = None
        list_0 = []
        tracer_0 = module_0.Tracer(unavailable_source_0)
        var_0 = tracer_0.set_thread_info_padding(bytes_0)
        complex_0 = None
        str_1 = '\x0b\x0c'
        var_1 = tracer_0.__enter__()
        file_writer_0 = module_0.FileWriter(complex_0, str_1)
        bool_0 = True
        dict_0 = {str_0: list_0, str_0: bytes_0}
        str_2 = "ya%d5^o&X6d16i:1f\x0c'"
        dict_1 = {bool_0: str_2, bool_0: bytes_0, bytes_0: str_2}
        tracer_1 = module_0.Tracer(bool_0, dict_0, dict_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'exception'
        set_0 = set()
        float_0 = -1142.529
        tracer_0 = module_0.Tracer(str_0, set_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tracer_0 = module_0.Tracer()
        str_0 = '5i4)uXA]4f%TBgCC'
        set_0 = {tracer_0}
        var_0 = tracer_0.__exit__(str_0, set_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        bool_0 = True
        set_0 = {var_0}
        str_0 = 'return'
        dict_0 = {str_0: tracer_0}
        var_1 = tracer_0.__exit__(bool_0, set_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        unavailable_source_0 = None
        tracer_0 = module_0.Tracer(unavailable_source_0)
        var_0 = tracer_0.__enter__()
        bytes_0 = b''
        tracer_1 = module_0.Tracer(tracer_0, bytes_0)
        float_0 = -3395.191
        var_1 = tracer_0.__call__(float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        unavailable_source_0 = None
        tracer_0 = module_0.Tracer(unavailable_source_0)
        var_0 = tracer_0.__enter__()
        var_1 = tracer_0.__enter__()
        int_0 = -28
        var_2 = tracer_0.__call__(int_0)
    except BaseException:
        pass