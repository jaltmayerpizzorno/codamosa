# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    try:
        str_0 = 'h)T+#-j/M%W)Z0f2'
        docstring_0 = module_0.parse(str_0)
        str_1 = '|SM7I^b{ML}y~C\r"0c'
        section_0 = module_0.Section(str_0, str_1)
        dict_0 = {docstring_0: str_0, str_0: str_0}
        numpydoc_parser_0 = module_0.NumpydocParser(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'MSes\n_T>xjxQp'
        docstring_0 = module_0.parse(str_0)
        str_1 = '=v<R}s\n9R@?:%M/m~${m'
        section_0 = module_0.Section(str_0, str_0)
        str_2 = '.*:. Defaults to (.PD\\.'
        returns_section_0 = module_0.ReturnsSection(str_0, str_2)
        str_3 = None
        docstring_1 = module_0.parse(str_1)
        str_4 = 'Except'
        k_v_section_0 = module_0._KVSection(str_2, str_2)
        iterable_0 = section_0.parse(str_4)
        str_5 = 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        return_name : type\n            A description of this returned value\n        another_type\n            Return names are optional, types are required\n    '
        section_1 = module_0.Section(str_5, str_3)
        str_6 = ''
        iterable_1 = k_v_section_0.parse(str_6)
        numpydoc_parser_0 = module_0.NumpydocParser()
        numpydoc_parser_1 = module_0.NumpydocParser()
        var_0 = numpydoc_parser_1.add_section(section_0)
        iterable_2 = k_v_section_0.parse(str_4)
        numpydoc_parser_2 = module_0.NumpydocParser(iterable_2)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n    Parse the numpy-style docstring into its components.\n\n    :returns: parsed docstring\n\n    Parameters\n    ----------\n    text : str\n        input text\n\n    Returns\n    -------\n    Docstring\n        parsed docstring\n\n    Raises\n    ------\n    KeyError\n        if the parsing fails\n\n    Other Parameters\n    ----------------\n    whatever : int\n        whatever you want\n    '
        k_v_section_0 = module_0._KVSection(str_0, str_0)
        iterable_0 = k_v_section_0.parse(str_0)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
        str_1 = "06dTa,[P{YQa'z`G~\r'"
        docstring_0 = module_0.parse(str_1)
        str_2 = ';\t?~WVq=Lrn&7.fqio\tj'
        docstring_1 = numpydoc_parser_0.parse(str_2)
    except BaseException:
        pass