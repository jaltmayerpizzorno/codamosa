# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0
import docstring_parser.common as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = "summary line\n\n    Extended description\n\n    Parameters\n    ----------\n    arg1 : int\n        Description of `arg1`\n    arg2 : str, optional\n        Description of `arg2` (the default is '2').\n    arg3 : str, optional, defaults to '3'\n        Description of `arg3` (the default is '3').\n    arg4, optional, defaults to 4\n        Description of `arg4` (the default is 4).\n    arg5 : int, optional (default: 5)\n        Description of `arg` (the default is 5).\n\n    Returns\n    -------\n    int\n        Description of return value.\n    "
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_3():
    str_0 = 'deprecated'
    str_1 = 'deprecation'
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_1)
    str_2 = '\n0.1.1\n    Use :func:`~collections.deque.rotate` instead.\n'
    iterable_0 = deprecation_section_0.parse(str_2)
    var_0 = list(iterable_0)
    str_3 = [str_1]
    str_4 = 'Use :func:`~collections.deque.rotate` instead.'
    str_5 = '0.1.1'
    docstring_deprecated_0 = module_1.DocstringDeprecated(str_3, str_4, str_5)

def test_case_4():
    str_0 = '\n    Parse the numpy-style docstring into its components.\n\n    :returns: parsed docstring\n\n    Parameters\n    ----------\n    text : str\n        input text\n\n    Returns\n    -------\n    Docstring\n        parsed docstring\n\n    Raises\n    ------\n    KeyError\n        if the parsing fails\n\n    Other Parameters\n    ----------------\n    whatever : int\n        whatever you want\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = module_0.parse(str_0)
    str_1 = 'Relate'
    section_0 = module_0.Section(str_1, str_0)
    var_0 = numpydoc_parser_0.add_section(section_0)

def test_case_5():
    str_0 = 'MK-u%% f>'
    str_1 = '<5BOo(hj+'
    docstring_0 = module_0.parse(str_1)
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_1 = numpydoc_parser_0.parse(str_0)
    str_2 = 'Setup sections.\n\n        :param sections: Recognized sections or None to defaults.\n        :param title_colon: require colon after section title.\n        '
    docstring_2 = numpydoc_parser_0.parse(str_2)
    str_3 = None
    docstring_3 = numpydoc_parser_0.parse(str_3)
    returns_section_0 = module_0.ReturnsSection(str_3, str_1)

def test_case_6():
    str_0 = '}9#o}iu<n_vyA=6'
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_7():
    str_0 = 'deprecation'
    str_1 = ''
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_1)
    iterable_0 = deprecation_section_0.parse(str_1)
    var_0 = next(iterable_0)
    str_2 = [str_1]
    str_3 = 'None'
    docstring_deprecated_0 = module_1.DocstringDeprecated(str_2, str_3, str_3)
    str_4 = '\n'
    iterable_1 = deprecation_section_0.parse(str_4)
    var_1 = next(iterable_1)
    str_5 = [str_1]
    var_2 = None
    docstring_deprecated_1 = module_1.DocstringDeprecated(str_5, var_2, var_2)
    str_6 = '0.3.4\ntest1234'
    iterable_2 = deprecation_section_0.parse(str_6)
    var_3 = next(iterable_2)
    str_7 = [str_1]
    str_8 = 'test1234'
    str_9 = '0.3.4'
    docstring_deprecated_2 = module_1.DocstringDeprecated(str_7, str_8, str_9)

def test_case_8():
    str_0 = '\n    A Functions with paramaterized values\n    Parameters\n    ----------\n    data : countable, iterable\n        The data to be tested.\n\n    value : numeric\n        The value of interest (default is 0)\n\n    Returns\n    -------\n    int\n        Number of occurrences of value in data.\n\n    Notes\n    -----\n    The value parameter is positional only for version 0.16.0 and later.\n\n    Examples\n    --------\n    Count the number of zeros in a list:\n\n    >>> count([0, 1, 0, 2, 0])\n    3\n\n    Count the number of sixes in a tuple:\n\n    >>> count((1, 2, 3, 6, 6, 6, 6, 7, 8, 6), 6)\n    4\n\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_9():
    str_0 = '\n    Parse the numpy-style docstring into its compnents.\n\n    :returns: parsed docstring\n\n    Parameters\n    ----------\n    text : str\n        input text\n\n    Returns\n    ------\n    Docstring\n        parsed docstring\n\n    Raises\n    ------\n    KeyError\n        if the parsing fails\n\n    Other Parameters\n    ----------------\n    whatever : int\n        whateveryou want\n    '
    docstring_0 = module_0.parse(str_0)