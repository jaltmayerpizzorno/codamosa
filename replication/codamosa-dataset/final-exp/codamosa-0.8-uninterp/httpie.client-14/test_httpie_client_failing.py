# Automatically generated by Pynguin.
import httpie.client as module_0
import httpie.cli.dicts as module_1
import argparse as module_2
import pathlib as module_3

def test_case_0():
    try:
        dict_0 = {}
        var_0 = module_0.dump_request(dict_0)
        namespace_0 = None
        dict_1 = module_0.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ajA*7Dj${$\\}|<'
        str_1 = 'bytes=%d-'
        list_0 = []
        dict_0 = {str_0: str_0, str_0: str_0, str_1: list_0}
        request_headers_dict_0 = module_1.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        namespace_0 = module_2.Namespace(**dict_0)
        path_0 = module_3.Path(**dict_0)
        request_headers_dict_0 = module_1.RequestHeadersDict()
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
        iterable_0 = module_0.collect_messages(namespace_0, path_0)
        iterable_1 = module_0.collect_messages(namespace_0, path_0)
        dict_1 = module_0.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_3():
    try:
        namespace_0 = module_2.Namespace()
        request_headers_dict_0 = module_0.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        namespace_0 = module_2.Namespace(**dict_0)
        dict_1 = module_0.make_send_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_5():
    try:
        namespace_0 = module_2.Namespace()
        dict_0 = module_0.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_6():
    try:
        namespace_0 = module_2.Namespace()
        dict_0 = module_0.make_request_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        session_0 = module_0.build_requests_session(bool_0)
        bool_1 = True
        session_1 = module_0.build_requests_session(bool_1)
        session_2 = module_0.build_requests_session(bool_0, session_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'rb'
        str_1 = '\n    Translate `max-age` into `expires` for Requests to take it into account.\n\n    HACK/FIXME: <https://github.com/psf/requests/issues/5743>\n\n    '
        request_headers_dict_0 = module_1.RequestHeadersDict()
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
        str_2 = module_0.ensure_path_as_is(str_0, str_1)
        namespace_0 = module_2.Namespace()
        dict_0 = None
        path_0 = module_3.Path()
        iterable_0 = module_0.collect_messages(namespace_0, path_0, path_0)
        str_3 = 'const'
        var_0 = module_0.dump_request(dict_0)
        dict_1 = {str_2: var_0, str_3: namespace_0}
        namespace_1 = module_2.Namespace(**dict_1)
        request_headers_dict_2 = module_1.RequestHeadersDict(**dict_1)
        request_headers_dict_3 = module_0.finalize_headers(request_headers_dict_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'rb'
        str_1 = '\n    Translate `max-age` into `expires` for Requests to take it into account.\n\n    HACK/FIXME: <https://github.com/psf/requests/issues/5743>\n\n    '
        request_headers_dict_0 = module_1.RequestHeadersDict()
        request_headers_dict_1 = module_0.finalize_headers(request_headers_dict_0)
        str_2 = module_0.ensure_path_as_is(str_0, str_1)
        bool_0 = True
        session_0 = module_0.build_requests_session(bool_0)
        str_3 = 'jj};ITbDe\x0bD^h1'
        namespace_0 = module_2.Namespace()
        dict_0 = None
        path_0 = module_3.Path()
        iterable_0 = module_0.collect_messages(namespace_0, path_0, path_0)
        str_4 = 'const'
        var_0 = module_0.dump_request(dict_0)
        dict_1 = {str_2: namespace_0, str_3: iterable_0, str_2: str_3, str_4: namespace_0}
        request_headers_dict_2 = module_1.RequestHeadersDict(iterable_0, **dict_1)
    except BaseException:
        pass