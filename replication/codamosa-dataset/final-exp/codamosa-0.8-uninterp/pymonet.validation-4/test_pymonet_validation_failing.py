# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        float_0 = 127.703
        list_0 = [float_0]
        bytes_0 = b'\xbbD\x9e\x9aZ&\xbd\xe2\xfc\xd5'
        bool_0 = True
        validation_0 = module_0.Validation(bytes_0, bool_0)
        var_0 = validation_0.__eq__(list_0)
        dict_0 = {bytes_0: bool_0}
        int_0 = -441
        validation_1 = module_0.Validation(dict_0, int_0)
        str_0 = 'c'
        var_1 = validation_1.ap(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        float_0 = -972.43
        str_0 = '\n        Transform Validation to Maybe.\n\n        :returns: Maybe with Validation Value when Validation has no errors, in other case empty Maybe\n        :rtype: Maybe[A | None]\n        '
        validation_0 = module_0.Validation(float_0, str_0)
        var_0 = validation_0.__str__()
        bytes_0 = b'\xe7$\x12\xc5\xbe'
        validation_1 = None
        list_0 = [bytes_0, bytes_0, validation_1, bool_0]
        int_0 = True
        var_1 = validation_0.to_try()
        dict_0 = {str_0: list_0}
        str_1 = 'PSGU]\x0bRQa0-z:W\\!ry'
        validation_2 = module_0.Validation(dict_0, str_1)
        var_2 = validation_2.is_fail()
        validation_3 = module_0.Validation(list_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'Yj=/\x1ey=l^Fn5\x9b'
        str_0 = '.n<]t#A\t{78By:{\t,Sl'
        dict_0 = {bytes_0: bytes_0, bytes_0: str_0}
        validation_0 = module_0.Validation(bytes_0, dict_0)
        bytes_1 = b'a\xd0'
        validation_1 = module_0.Validation(bytes_1, bytes_1)
        var_0 = validation_1.map(validation_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        int_0 = -1321
        tuple_0 = (int_0,)
        str_0 = ''
        validation_0 = module_0.Validation(tuple_0, str_0)
        var_0 = validation_0.bind(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'+\x9a^Q\xbe\xe1\x1f\x93'
        bytes_1 = b'z\xc6+\n\xea\xa0uQ\xf2\xae\x8b\xc9\xd2\xc32\xb9P\x1b!/'
        float_0 = -661.572243
        list_0 = [bytes_0, bytes_0, bytes_0]
        validation_0 = module_0.Validation(float_0, list_0)
        var_0 = validation_0.ap(bytes_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 198
        set_0 = {int_0}
        bytes_0 = b'\xfa\x89\xe8\xd5\x0b\x97\xa9\xc5'
        validation_0 = module_0.Validation(bytes_0, set_0)
        var_0 = validation_0.to_either()
        var_1 = validation_0.to_lazy()
        var_2 = validation_0.__eq__(validation_0)
        var_3 = validation_0.to_lazy()
        str_0 = '\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        '
        bytes_1 = b'}v1\xbd/4\xb6\x1a\xf6\xdd\xe8r2\xef\x1a\xc5\xe4'
        var_4 = validation_0.__eq__(bytes_1)
        var_5 = validation_0.to_maybe()
        tuple_0 = (str_0,)
        float_0 = -852.582
        validation_1 = module_0.Validation(tuple_0, float_0)
        var_6 = validation_0.to_box()
        var_7 = validation_0.ap(bytes_1)
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = set()
        bytes_0 = b'\xfa\x89\xe8\xd5\x0b\x97\xa9\xc5'
        validation_0 = module_0.Validation(bytes_0, set_0)
        var_0 = validation_0.to_either()
        var_1 = validation_0.to_lazy()
        var_2 = validation_0.__eq__(validation_0)
        var_3 = validation_0.to_try()
        bytes_1 = b'}v1\xbd/4\xb6\x1a\xf6\xdd\xe8r2\xef\x1a\xc5\xe4'
        var_4 = validation_0.to_maybe()
        var_5 = validation_0.to_lazy()
        var_6 = validation_0.ap(bytes_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'O%{'
        float_0 = -588.4
        validation_0 = module_0.Validation(str_0, float_0)
        var_0 = validation_0.to_try()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'AUn3J'
        dict_0 = {str_0: str_0}
        validation_0 = module_0.Validation(str_0, dict_0)
        var_0 = validation_0.__str__()
        bool_0 = None
        bytes_0 = b'\x86\xb6$\xfbQ\x12\xe4\xe5\xf2J\xf1\x96|\xf0'
        validation_1 = module_0.Validation(bool_0, bytes_0)
        var_1 = validation_0.to_either()
        bytes_1 = b'\xb0\\\xb4\xe7Z\xce\x1b\x9c1'
        list_0 = [bytes_1, bytes_1, bytes_1]
        var_2 = validation_1.to_lazy()
        var_3 = validation_1.is_success()
        validation_2 = module_0.Validation(bytes_1, list_0)
        var_4 = validation_2.__eq__(validation_1)
        var_5 = validation_2.is_success()
        set_0 = None
        bytes_2 = b'\xc4\x19\xf0U9)9\xdf\x02\xbc\x95'
        bool_1 = True
        validation_3 = module_0.Validation(set_0, bool_1)
        var_6 = validation_3.map(bytes_2)
    except BaseException:
        pass