# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        list_0 = []
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        str_0 = '{&5H9$}'
        int_0 = 3476
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        str_0 = '5&K'
        int_0 = 3253
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n    {\n        "a": 1,\n        "b": 2,\n        "c": 3,\n        "d": function()\n        {\n            return this.a + this.b + this.c;\n        }\n    }\n    '
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'd'
        var_0 = j_s_interpreter_0.extract_function(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x12\xf3\x07\x1b~\x101\x981('
        bytes_1 = b'^\xfb'
        int_0 = 93
        j_s_interpreter_0 = module_0.JSInterpreter(bytes_1, int_0)
        var_0 = j_s_interpreter_0.call_function(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        str_0 = '{&5&K'
        int_0 = -2123
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        int_0 = 395
        str_0 = 'vb.y{w/eTI'
        dict_0 = {str_0: str_0, int_0: list_0}
        var_0 = j_s_interpreter_0.interpret_expression(str_0, j_s_interpreter_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        j_s_interpreter_0 = module_0.JSInterpreter(dict_0)
        set_0 = set()
        list_0 = [set_0]
        j_s_interpreter_1 = module_0.JSInterpreter(list_0)
        str_0 = 'J.u-'
        str_1 = '\rHBpta\\Zv/0JO;R5(x=i'
        int_0 = 3479
        var_0 = j_s_interpreter_1.interpret_expression(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 3694.0
        str_0 = ''
        set_0 = {float_0, float_0, str_0, float_0}
        list_0 = [float_0, float_0, float_0]
        list_1 = []
        j_s_interpreter_0 = module_0.JSInterpreter(list_0, list_1)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, set_0, set_0)
        list_2 = None
        j_s_interpreter_1 = module_0.JSInterpreter(list_2)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        str_0 = 'zp=1vi):tY=\\Pl{'
        int_0 = 3251
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        j_s_interpreter_0 = module_0.JSInterpreter(list_0)
        str_0 = '(?\x0b@X$V\x0c13\\RM'
        bytes_0 = b'\x17R:\x05`\x8f'
        var_0 = j_s_interpreter_0.interpret_expression(str_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'function test(arg1,arg2){stmt1;stmt2;}'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'test'
        var_0 = j_s_interpreter_0.extract_function(str_1)
        str_2 = 'test=function(arg1,arg2){stmt1;stmt2;}'
        j_s_interpreter_1 = module_0.JSInterpreter(str_2)
        var_1 = j_s_interpreter_1.extract_function(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n        a = 1;\n        b = (function () {\n            return [\n                "a",\n                "b",\n                "c"\n            ];\n        }());\n    '
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'a = 1'
        var_0 = j_s_interpreter_0.interpret_statement(str_1, j_s_interpreter_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'p'
        str_1 = 'objectA'
        set_0 = {str_1, str_0, str_0}
        list_0 = []
        float_0 = -57.723318038495265
        list_1 = [str_0]
        tuple_0 = (list_0, float_0, set_0, list_1)
        tuple_1 = (set_0, tuple_0)
        tuple_2 = (tuple_1,)
        bool_0 = False
        tuple_3 = (tuple_2, bool_0)
        j_s_interpreter_0 = module_0.JSInterpreter(tuple_3)
        j_s_interpreter_1 = module_0.JSInterpreter(str_1)
        str_2 = 'list'
        str_3 = 'foo'
        str_4 = 'bar'
        str_5 = {str_3: str_4}
        str_6 = 'a'
        str_7 = 'b'
        str_8 = [str_6, str_7]
        str_9 = {str_1: str_5, str_2: str_8}
        j_s_interpreter_2 = module_0.JSInterpreter(str_0, str_9)
        str_10 = '1 + 2 + 3 - R.4'
        var_0 = {}
        int_0 = 100
        var_1 = j_s_interpreter_2.interpret_expression(str_10, var_0, int_0)
    except BaseException:
        pass