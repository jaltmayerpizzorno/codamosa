# Automatically generated by Pynguin.
import ansible.playbook.helpers as module_0
import ansible.parsing.mod_args as module_1

def test_case_0():
    try:
        int_0 = 4124
        str_0 = 'wg,c$T!Hq1V\ns}4'
        list_0 = [str_0, str_0, int_0, int_0]
        dict_0 = {}
        module_args_parser_0 = None
        var_0 = module_0.load_list_of_blocks(list_0, dict_0, module_args_parser_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'The only expected key is metadata, but got keys: {keys'
        int_0 = -146
        var_0 = module_0.load_list_of_blocks(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = 'HA>fGUr {`2^+_&'
        var_0 = module_0.load_list_of_tasks(bool_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -300
        list_0 = [int_0, int_0, int_0, int_0]
        int_1 = None
        bool_0 = False
        var_0 = module_0.load_list_of_tasks(list_0, int_1, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -3632.1978
        str_0 = '\\)&,z'
        list_0 = [float_0, str_0]
        var_0 = module_0.load_list_of_roles(list_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.load_list_of_roles(tuple_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '?-T.XC)>'
        int_0 = None
        bool_0 = True
        list_0 = [int_0, bool_0, str_0]
        bytes_0 = b"F\x81`s\xfeL\x96\xc3\t\xeb'\xb4b\x030\x9e\xd5\xa7"
        tuple_0 = ()
        var_0 = module_0.load_list_of_blocks(list_0, bytes_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '3}~'
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, str_0, dict_0]
        bytes_0 = b'^zy\x97t\x7fH\xedO\x8d'
        tuple_0 = None
        var_0 = module_0.load_list_of_blocks(list_0, dict_0, dict_0, dict_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '3}~'
        dict_0 = {}
        list_0 = [dict_0, str_0, dict_0]
        bytes_0 = b'^zy\x97t\x7fH\xedO\x8d'
        tuple_0 = None
        var_0 = module_0.load_list_of_blocks(list_0, dict_0, dict_0, dict_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0, str_0, dict_0, str_0, dict_0]
        module_args_parser_0 = module_1.ModuleArgsParser()
        bytes_0 = None
        bool_0 = True
        tuple_0 = ()
        var_0 = module_0.load_list_of_blocks(list_0, module_args_parser_0, bytes_0, bool_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [str_0]
        str_1 = '.L7z);3g'
        var_0 = module_0.load_list_of_roles(list_0, str_1)
        list_1 = [dict_0, dict_0, str_0, dict_0]
        float_0 = -1092.13961
        var_1 = module_0.load_list_of_blocks(list_1, dict_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'block'
        str_1 = 'name'
        str_2 = 'Block1'
        str_3 = {str_1: str_2}
        str_4 = [str_3]
        str_5 = {str_0: str_4}
        str_6 = 'Task1'
        str_7 = {str_1: str_6}
        str_8 = 'Block2'
        str_9 = {str_1: str_8}
        str_10 = [str_9]
        str_11 = {str_0: str_10}
        str_12 = [str_5, str_7, str_11]
        var_0 = None
        var_1 = module_0.load_list_of_tasks(str_12, var_0, var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xf3JxA\x93\x05\xea\xb0\x12v\x9d\x18J\x16\x92\xc0\xd1'
        dict_0 = {bytes_0: bytes_0}
        list_0 = [dict_0, dict_0, bytes_0]
        bytes_1 = b'\x1d-\xee\x15L%\x11\xd1C\x11'
        float_0 = -981.1478
        tuple_0 = (bytes_0, float_0)
        var_0 = module_0.load_list_of_tasks(list_0, bytes_1, tuple_0)
    except BaseException:
        pass