# Automatically generated by Pynguin.
import ansible.plugins.callback.default as module_0

def test_case_0():
    try:
        callback_module_0 = module_0.CallbackModule()
        int_0 = None
        set_0 = None
        callback_module_1 = module_0.CallbackModule()
        dict_0 = {set_0: callback_module_1}
        var_0 = callback_module_1.set_options(dict_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -3517
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_failed(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_remaining()
        list_0 = [bool_0]
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_1.v2_runner_on_ok(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_on_skipped(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'eJh#zuLH+\x0bIPL\tWXnuX'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_unreachable(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1425.9193
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_playbook_on_no_hosts_matched()
        var_1 = callback_module_0.v2_playbook_on_play_start(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_remaining()
        str_0 = '&'
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_1.v2_playbook_on_start(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Ye'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_task_start(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 3540.4
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_cleanup_task_start(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        callback_module_0 = module_0.CallbackModule()
        bool_0 = True
        var_0 = callback_module_0.v2_playbook_on_handler_task_start(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'q5Z'
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_on_start(bytes_0, callback_module_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n    Create an options parser for all ansible scripts\n    '
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_on_file_diff(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -1748
        set_0 = {int_0, int_0, int_0, int_0}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_item_on_ok(set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ',\x0c/'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_item_on_failed(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        callback_module_0 = module_0.CallbackModule()
        dict_0 = {}
        var_0 = callback_module_0.v2_playbook_on_include(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_playbook_on_stats(callback_module_0)
    except BaseException:
        pass

def test_case_16():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_start(callback_module_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\xbee\xf63\x9c_t\xc0\xc1\x87;\xb4`\x7fz\xcd\xffc'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_retry(bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_on_async_poll(callback_module_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '\n'
        list_0 = [str_0, str_0, str_0]
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_notify(str_0, list_0)
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_1.v2_runner_on_async_ok(dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        list_0 = [callback_module_0, callback_module_1, callback_module_0, callback_module_0]
        str_0 = '#s\x0cFiB+>y-)Cd'
        tuple_0 = (str_0,)
        bytes_0 = b'}Y\xdaT\x88O\xd7\xdc\x94\xf1\x13^\x02U>\x17\xe8\xaa\xb2'
        list_1 = [callback_module_0, bytes_0, list_0, tuple_0]
        tuple_1 = (list_0, tuple_0, bytes_0, list_1)
        var_0 = callback_module_1.v2_runner_on_async_failed(tuple_1)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = -3196.771
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_item_on_skipped(float_0)
    except BaseException:
        pass