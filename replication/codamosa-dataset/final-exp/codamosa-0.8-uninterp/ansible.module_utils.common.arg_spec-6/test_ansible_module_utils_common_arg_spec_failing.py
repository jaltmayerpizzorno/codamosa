# Automatically generated by Pynguin.
import ansible.module_utils.common.arg_spec as module_0

def test_case_0():
    try:
        float_0 = -521.5
        validation_result_0 = module_0.ValidationResult(float_0)
        dict_0 = {validation_result_0: validation_result_0, validation_result_0: float_0, float_0: float_0}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2227.02
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*list_0, **dict_0)
        var_0 = module_argument_spec_validator_0.validate(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'name'
        str_1 = 'age'
        str_2 = 'type'
        str_3 = 'str'
        str_4 = {str_2: str_3}
        str_5 = 'int'
        str_6 = {str_2: str_5}
        str_7 = {str_0: str_4, str_1: str_6}
        str_8 = [str_0, str_1]
        str_9 = [str_8]
        str_10 = 'bo'
        str_11 = '42'
        str_12 = {str_0: str_10, str_1: str_11}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_7, str_9)
        var_0 = argument_spec_validator_0.validate(str_12)
        var_1 = var_0.errors
        var_2 = len(var_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        validation_result_0 = module_0.ValidationResult(dict_0)
        dict_1 = {}
        list_0 = [dict_1, dict_1, str_0, str_0, validation_result_0, dict_1]
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*list_0, **dict_1)
        bool_0 = False
        dict_2 = {str_0: bool_0}
        var_0 = module_argument_spec_validator_0.validate(dict_2)
        bytes_0 = b'\x19\xae\xd0T"\x8ei\x11aE\x01'
        str_1 = ' \x0bz'
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_2, bytes_0, module_argument_spec_validator_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        str_1 = 'wuU;e8~'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
        validation_result_0 = module_0.ValidationResult(dict_0)
        dict_1 = {}
        list_0 = [dict_1, str_0, str_0, str_1, dict_0, validation_result_0]
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*list_0, **dict_1)
        bool_0 = True
        dict_2 = {str_0: bool_0}
        var_0 = module_argument_spec_validator_0.validate(dict_2)
    except BaseException:
        pass