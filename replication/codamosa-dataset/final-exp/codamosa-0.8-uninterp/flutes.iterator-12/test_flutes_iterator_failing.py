# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        int_0 = 1024
        lazy_list_0 = module_0.LazyList(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -1714.105
        sequence_0 = None
        map_list_0 = module_0.MapList(float_0, sequence_0)
        list_0 = [map_list_0, float_0, map_list_0, float_0]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'J\xd4$%\xa2&S\xe8\x1a|(>\x8e\xca\xcd\xe3y\x99n'
        list_0 = []
        map_list_0 = module_0.MapList(bytes_0, list_0)
        float_0 = 3392.12
        var_0 = map_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '.'
        bool_0 = False
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        list_0 = [str_0]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = lazy_list_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '.'
        bool_0 = True
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        bytes_0 = b'\xaez\\\x9d9\xd5U\x9b}\x1e\xd1\x85\xe3\xb3>'
        list_0 = [bytes_0, iterator_0, var_0, bool_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        str_0 = 'KU"$wk%^mM<'
        bool_1 = False
        map_list_0 = module_0.MapList(bool_1, str_0)
        list_0 = [bool_0, bool_0]
        range_0 = module_0.Range(*list_0)
        iterator_0 = range_0.__iter__()
        int_0 = range_0.__next__()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '#B5bI\n5!("'
        lazy_list_0 = module_0.LazyList(str_0)
        int_0 = -2457
        iterator_0 = module_0.chunk(int_0, lazy_list_0)
        int_1 = -3361
        var_0 = lazy_list_0.__getitem__(int_1)
    except BaseException:
        pass

def test_case_8():
    try:
        callable_0 = None
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        dict_1 = {}
        lazy_list_1 = module_0.LazyList(dict_1)
        map_list_0 = module_0.MapList(callable_0, lazy_list_1)
        int_0 = map_list_0.__len__()
    except BaseException:
        pass

def test_case_9():
    try:
        iterator_0 = None
        str_0 = 'HGMrWg--Ya'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        dict_0 = {}
        var_0 = module_0.scanr(list_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 3
        bool_0 = False
        str_0 = 'KU$wk%^mM<'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(bool_0)
        set_0 = {int_0, int_0, int_0, int_0}
        dict_0 = {lazy_list_0: set_0}
        map_list_0 = module_0.MapList(bool_0, dict_0)
        var_1 = map_list_0.__getitem__(lazy_list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        list_0 = [bool_0]
        range_0 = module_0.Range(*list_0)
        int_0 = range_0.__len__()
        iterator_0 = range_0.__iter__()
        str_0 = 'i  GkzcEvCcBL{3)'
        var_0 = module_0.scanr(iterator_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        str_0 = 'KU$wk%^mM<'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(bool_0)
        set_0 = set()
        dict_0 = {lazy_list_0: set_0}
        map_list_0 = module_0.MapList(bool_0, dict_0)
        var_1 = map_list_0.__getitem__(lazy_list_0)
        iterator_0 = map_list_0.__iter__()
        lazy_list_1 = module_0.LazyList(iterator_0)
        var_2 = lazy_list_1.__getitem__(lazy_list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -1808
        iterable_0 = None
        iterator_0 = module_0.take(int_0, iterable_0)
        callable_0 = None
        sequence_0 = None
        map_list_0 = module_0.MapList(callable_0, sequence_0)
        map_list_1 = module_0.MapList(callable_0, map_list_0)
        map_list_2 = module_0.MapList(map_list_1, sequence_0)
        dict_0 = {iterable_0: map_list_2, map_list_1: iterator_0, iterable_0: map_list_0, sequence_0: sequence_0}
        var_0 = module_0.scanr(iterator_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 3
        bool_0 = True
        str_0 = 'KU$wk%^mM<'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(bool_0)
        var_1 = lazy_list_0.__iter__()
        dict_0 = {bool_0: str_0, lazy_list_0: str_0, bool_0: str_0, bool_0: lazy_list_0}
        iterator_0 = module_0.take(int_0, dict_0)
        set_0 = {int_0}
        var_2 = lazy_list_0.__iter__()
        dict_1 = {lazy_list_0: dict_0, lazy_list_0: set_0}
        list_0 = [bool_0]
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__len__()
        map_list_0 = module_0.MapList(bool_0, dict_1)
        var_3 = map_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 0
        var_0 = range(int_0)
        iterator_0 = module_0.chunk(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 5
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = list(iterator_0)
        int_2 = -1
        var_2 = range(int_1)
        iterator_1 = module_0.drop(int_2, var_2)
        var_3 = list(iterator_1)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 5
        var_0 = lambda x: x > int_0
        var_1 = range(int_0)
        iterator_0 = module_0.drop_until(var_0, var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = ' Split by: '
        bool_0 = True
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        iterator_1 = module_0.split_by(str_0, bool_0)
        var_1 = list(iterator_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 10
        var_0 = range(int_0)
        int_1 = 3
        int_2 = 0
        var_1 = lambda x: x % int_1 == int_2
        iterator_0 = module_0.split_by(var_0, criterion=var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 1463
        bytes_0 = b'\x950\xb3\x11@\xe6O\xeb\xf4\x05i'
        dict_0 = {int_0: int_0, int_0: bytes_0, int_0: int_0, bytes_0: int_0}
        iterator_0 = module_0.chunk(int_0, dict_0)
        list_0 = [iterator_0, int_0]
        str_0 = 'a^1o'
        map_list_0 = None
        dict_1 = {str_0: dict_0, str_0: map_list_0}
        int_1 = 1477
        list_1 = [dict_0, bytes_0, int_1]
        var_0 = module_0.scanr(list_0, dict_1, *list_1)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b''
        str_0 = 't=y{f-7k9'
        str_1 = ']%"'
        map_list_0 = module_0.MapList(str_0, str_1)
        int_0 = map_list_0.__len__()
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__iter__()
        str_2 = '.'
        bool_0 = True
        iterator_0 = module_0.split_by(str_2, bool_0, separator=str_2)
        int_1 = 2
        int_2 = 580
        iterator_1 = map_list_0.__iter__()
        iterator_2 = module_0.drop(int_2, iterator_1)
        iterator_3 = module_0.drop(int_1, iterator_2)
        var_1 = list(lazy_list_0)
        var_2 = list(iterator_2)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 0
        iterator_0 = module_0.take(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 0
        int_1 = 1
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        var_2 = range(int_0)
        iterator_1 = module_0.take(int_0, var_2)
        var_3 = list(iterator_1)
        var_4 = range(int_0)
        iterator_2 = module_0.take(int_1, var_4)
        var_5 = list(iterator_2)
        var_6 = range(int_1)
        iterator_3 = module_0.take(int_1, var_6)
        var_7 = list(iterator_3)
        int_2 = 2
        var_8 = range(int_1)
        iterator_4 = module_0.take(int_2, var_8)
        var_9 = list(iterator_4)
        var_10 = range(int_2)
        iterator_5 = module_0.take(int_2, var_10)
        var_11 = list(iterator_5)
        int_3 = -9
        var_12 = range(int_2)
        iterator_6 = module_0.take(int_3, var_12)
        var_13 = list(iterator_6)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 11
        var_0 = []
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
        int_1 = [int_0]
        iterator_1 = module_0.drop_until(iterator_0, int_1)
        var_2 = list(iterator_1)
    except BaseException:
        pass