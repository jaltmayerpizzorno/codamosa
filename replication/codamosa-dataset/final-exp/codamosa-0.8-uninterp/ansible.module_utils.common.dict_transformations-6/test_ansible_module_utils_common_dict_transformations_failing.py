# Automatically generated by Pynguin.
import ansible.module_utils.common.dict_transformations as module_0

def test_case_0():
    try:
        str_0 = '3m9w`_;`}8fsl'
        var_0 = module_0.camel_dict_to_snake_dict(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 0.0001
        dict_0 = {float_0: float_0}
        bytes_0 = b'&g\x18'
        bytes_1 = b'\x85\xb5B\xa6[\x1a\xeea.\xff\xf9\x0e\x87\xd9\xbb\xe2k|\xfb\r'
        var_0 = module_0.snake_dict_to_camel_dict(bytes_0, bytes_1)
        str_0 = 'Irg2]fq$'
        tuple_0 = ()
        var_1 = module_0.dict_merge(str_0, tuple_0)
        str_1 = 'G"\x0bACPdTL/0'
        bool_0 = False
        set_0 = set()
        var_2 = module_0.dict_merge(bool_0, set_0)
        tuple_1 = (str_1,)
        var_3 = module_0.snake_dict_to_camel_dict(tuple_1)
        var_4 = module_0.dict_merge(float_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xf7\x14!5\x14\x0e\r\x1d\x8a\x96+\xbe'
        dict_0 = {}
        var_0 = module_0.recursive_diff(bytes_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'CamelCase'
        int_0 = None
        dict_0 = {}
        var_0 = module_0.dict_merge(int_0, dict_0)
        str_1 = '#ameq'
        str_2 = {str_0: str_1}
        var_1 = module_0.camel_dict_to_snake_dict(str_2)
        str_3 = {str_0: str_1}
        str_4 = {str_0: str_3}
        var_2 = module_0.camel_dict_to_snake_dict(str_4)
        str_5 = [str_1]
        str_6 = {str_0: str_5}
        var_3 = module_0.camel_dict_to_snake_dict(str_6)
        var_4 = module_0.camel_dict_to_snake_dict(str_3)
        str_7 = '|{S5\t*n'
        float_0 = -4375.3
        tuple_0 = (float_0,)
        var_5 = module_0.camel_dict_to_snake_dict(str_7, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'removed_from_collection'
        int_0 = None
        dict_0 = {str_0: int_0}
        int_1 = -1623
        str_1 = 'F@qn'
        var_0 = module_0.snake_dict_to_camel_dict(int_1, str_1)
        var_1 = module_0.camel_dict_to_snake_dict(dict_0)
        str_2 = 'v\n`,HLqLnl3sUClia'
        var_2 = module_0.dict_merge(str_1, str_2)
        var_3 = module_0.recursive_diff(dict_0, dict_0)
        str_3 = 'category'
        var_4 = module_0.dict_merge(str_3, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'G`LxHcl2e~yxb*9We#J'
        var_0 = module_0.snake_dict_to_camel_dict(str_0, str_0)
        str_1 = '\'R{vZxj34D-3Ow`"'
        str_2 = 'X[/X?TvcjGb|Ju'
        str_3 = 'removed__rom^collection'
        int_0 = None
        dict_0 = {str_3: int_0}
        var_1 = module_0.snake_dict_to_camel_dict(dict_0)
        int_1 = -1627
        var_2 = module_0.snake_dict_to_camel_dict(int_1, str_2)
        var_3 = module_0.camel_dict_to_snake_dict(dict_0)
        str_4 = 'v\n`,HLqLnl3sUClia'
        float_0 = None
        bool_0 = False
        var_4 = module_0.dict_merge(float_0, bool_0)
        var_5 = module_0.dict_merge(str_4, str_4)
        dict_1 = {var_2: int_1, str_0: str_1}
        int_2 = None
        var_6 = module_0.recursive_diff(dict_1, int_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'CamelCase'
        str_1 = 'camel'
        str_2 = {str_0: str_1}
        var_0 = module_0.camel_dict_to_snake_dict(str_2)
        str_3 = {str_0: str_1}
        str_4 = {str_0: str_3}
        var_1 = module_0.camel_dict_to_snake_dict(str_4)
        str_5 = [str_4]
        str_6 = {str_0: str_5}
        var_2 = module_0.camel_dict_to_snake_dict(str_6)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'state'
        str_1 = 'present'
        str_2 = {str_0: str_1}
        str_3 = {str_0: str_1}
        var_0 = module_0.recursive_diff(str_2, str_3)
        str_4 = {str_0: str_0}
        str_5 = {str_0: str_0}
        var_1 = module_0.recursive_diff(str_4, str_5)
        str_6 = {str_0: str_1}
        str_7 = 'name'
        str_8 = 'cdk'
        str_9 = {str_0: str_1, str_7: str_8}
        var_2 = module_0.recursive_diff(str_6, str_9)
        str_10 = {str_0: str_1}
        var_3 = module_0.recursive_diff(str_7, str_10)
    except BaseException:
        pass