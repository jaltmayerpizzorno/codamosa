# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        tuple_0 = ()
        host_0 = module_0.Host()
        host_1 = module_0.Host()
        var_0 = host_1.__str__()
        var_1 = host_1.__hash__()
        bool_0 = False
        dict_0 = {host_1: var_0, var_0: bool_0}
        dict_1 = {var_0: var_1, var_0: var_1, host_0: dict_0, host_1: var_1}
        dict_2 = {var_0: host_0, var_0: var_1, tuple_0: dict_1}
        var_2 = host_0.__setstate__(dict_2)
        float_0 = -729.0
        var_3 = host_0.remove_group(float_0)
        var_4 = host_0.__setstate__(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__getstate__()
        set_0 = {host_0, host_0}
        var_1 = host_0.__ne__(set_0)
        float_0 = 2219.0
        var_2 = host_0.add_group(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 0.001
        str_0 = 'C52>]:MH,?WV`b$'
        int_0 = 1032
        bool_0 = True
        host_0 = module_0.Host(int_0, bool_0)
        var_0 = host_0.remove_group(str_0)
        host_1 = module_0.Host(float_0)
        var_1 = host_1.populate_ancestors()
        var_2 = host_1.get_magic_vars()
    except BaseException:
        pass

def test_case_3():
    try:
        host_0 = module_0.Host()
        list_0 = None
        var_0 = host_0.set_variable(list_0, list_0)
        var_1 = host_0.get_vars()
    except BaseException:
        pass

def test_case_4():
    try:
        host_0 = module_0.Host()
        int_0 = None
        var_0 = host_0.populate_ancestors()
        var_1 = host_0.__repr__()
        var_2 = host_0.__ne__(int_0)
        var_3 = host_0.__getstate__()
        var_4 = host_0.__str__()
        str_0 = 'DkTqx>_=9h{nOw'
        var_5 = host_0.remove_group(str_0)
        list_0 = [var_4, var_5, var_4]
        str_1 = 'u'
        int_1 = -1633
        var_6 = host_0.set_variable(str_1, int_1)
        var_7 = host_0.__eq__(host_0)
        var_8 = host_0.__hash__()
        set_0 = set()
        var_9 = host_0.populate_ancestors(list_0)
        str_2 = '\n            Helper method which creates attributes from all parent objects\n            recursively on through grandparent objects\n            '
        host_1 = module_0.Host(set_0, str_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'host'
        host_0 = module_0.Host(str_0)
        group_0 = module_1.Group()
        var_0 = group_0.add_host(host_0)
        var_1 = group_0.__str__()
        var_2 = host_0.__hash__()
        var_3 = host_0.remove_group(host_0)
        float_0 = 1126.5
        int_0 = 594
        host_1 = module_0.Host()
        var_4 = host_0.__getstate__()
        float_1 = 2135.953082
        set_0 = {float_0, var_1, host_0, float_1}
        list_0 = [float_0, int_0]
        var_5 = host_0.set_variable(set_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'a'
        host_0 = module_0.Host(str_0)
        str_1 = 'gr1'
        group_0 = module_1.Group(str_0)
        group_1 = module_1.Group(str_1)
        var_0 = group_0.add_child_group(group_1)
        var_1 = host_0.add_group(group_1)
        var_2 = host_0.remove_group(group_1)
        var_3 = len(group_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'a'
        host_0 = module_0.Host(str_0)
        var_0 = host_0.get_vars()
        group_0 = module_1.Group(str_0)
        str_1 = 'grL2'
        group_1 = module_1.Group(str_1)
        var_1 = host_0.remove_group(host_0)
        group_2 = module_1.Group(str_0)
        var_2 = group_1.add_child_group(group_0)
        var_3 = group_1.add_child_group(group_2)
        var_4 = group_0.add_child_group(group_2)
        var_5 = host_0.add_group(group_2)
        var_6 = host_0.add_group(group_0)
        var_7 = host_0.groups
        var_8 = host_0.remove_group(group_2)
        var_9 = host_0.get_magic_vars()
        var_10 = host_0.get_vars()
        var_11 = host_0.groups
        var_12 = len(group_1)
    except BaseException:
        pass

def test_case_8():
    try:
        host_0 = None
        list_0 = [host_0, host_0, host_0, host_0]
        var_0 = host_0.__eq__(list_0)
        float_0 = 0.1
        host_1 = module_0.Host(float_0)
        str_0 = 'host'
        host_2 = module_0.Host(str_0)
        str_1 = 'rou'
        group_0 = module_1.Group(str_1)
        str_2 = '0242ac11-0012-215c-f03c-00000000061f'
        dict_0 = {str_2: list_0}
        var_1 = host_1.__setstate__(dict_0)
        var_2 = group_0.add_host(host_2)
        bool_0 = False
        int_0 = 663
        var_3 = host_2.set_variable(bool_0, int_0)
        var_4 = host_2.__hash__()
        bool_1 = True
        host_3 = module_0.Host(bool_1)
        var_5 = host_2.get_magic_vars()
        var_6 = host_2.__str__()
        list_1 = None
        var_7 = host_3.__ne__(list_1)
        var_8 = host_1.__getstate__()
        host_4 = module_0.Host()
        var_9 = host_2.populate_ancestors()
        var_10 = host_3.remove_group(str_2)
        var_11 = host_1.populate_ancestors()
        int_1 = 1721
        var_12 = host_4.__getstate__()
        host_5 = module_0.Host(int_1)
        var_13 = host_4.deserialize(group_0)
    except BaseException:
        pass