# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    try:
        int_0 = -3308
        bytes_0 = b'\xc9\x8d\xb3\xa4\xe0\xb9\xe1t\xaf\xf3\x01\xb7\x0b\xe9\xc9C'
        tuple_0 = (bytes_0,)
        set_0 = {tuple_0, tuple_0, bytes_0}
        inventory_manager_0 = module_0.InventoryManager(int_0)
        var_0 = inventory_manager_0.add_host(tuple_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 388.2884
        bytes_0 = b'4\xc8\x0f\x83\xbb\x99'
        inventory_manager_0 = module_0.InventoryManager(bytes_0)
        var_0 = inventory_manager_0.add_group(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -62
        inventory_manager_0 = module_0.InventoryManager(int_0)
        set_0 = {inventory_manager_0}
        var_0 = inventory_manager_0.get_host(inventory_manager_0)
        var_1 = module_0.order_patterns(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'hURPH3o(o#&|q7'
        bytes_0 = b'~BW\x7f)\x17\x81\xee\xb7\xc2\x12d\\\x8b\xec'
        dict_0 = {}
        inventory_manager_0 = module_0.InventoryManager(bytes_0, dict_0)
        var_0 = inventory_manager_0.restrict_to_hosts(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0}
        bytes_0 = b'Xc.\xd6V\x0e\x93\x89\xfc\x1a\xc3\x03\xe6\xfb'
        inventory_manager_0 = module_0.InventoryManager(bool_0, set_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b''
        inventory_manager_0 = module_0.InventoryManager(bytes_0)
        float_0 = 1643.5215358012038
        str_0 = '{'
        inventory_manager_1 = module_0.InventoryManager(str_0)
        var_0 = inventory_manager_1.get_hosts(inventory_manager_0, float_0)
        int_0 = None
        list_0 = [int_0]
        inventory_manager_2 = module_0.InventoryManager(list_0, inventory_manager_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        inventory_manager_0 = module_0.InventoryManager(str_0)
        str_1 = '1,2,3'
        var_0 = inventory_manager_0.subset(str_1)
        inventory_manager_1 = module_0.InventoryManager(str_0)
        str_2 = '@/path/to/file'
        var_1 = inventory_manager_1.subset(str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -4292
        list_0 = [int_0, int_0, int_0]
        inventory_manager_0 = module_0.InventoryManager(list_0)
        var_0 = inventory_manager_0.list_groups()
        str_0 = 'D-J\t|73s\x0cQC'
        str_1 = '~'
        var_1 = inventory_manager_0.list_hosts(str_1)
        var_2 = inventory_manager_0.add_host(str_0)
        str_2 = '.config'
        inventory_manager_1 = module_0.InventoryManager(str_2)
        var_3 = inventory_manager_1.parse_sources()
        inventory_manager_2 = module_0.InventoryManager(inventory_manager_0)
        var_4 = inventory_manager_2.remove_restriction()
        var_5 = module_0.split_host_pattern(list_0)
        var_6 = inventory_manager_1.remove_restriction()
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'i|X\xcbf$\xe5Kx\xaf\x1a'
        int_0 = -4529
        bool_0 = False
        dict_0 = {int_0: bytes_0, bool_0: bool_0}
        inventory_manager_0 = module_0.InventoryManager(dict_0)
        var_0 = inventory_manager_0.get_hosts()
        inventory_manager_1 = None
        set_0 = {inventory_manager_1, int_0, bool_0, inventory_manager_1}
        var_1 = module_0.order_patterns(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = None
        set_0 = None
        str_0 = 'IE$@8p\x0b`#<_RRVW*['
        str_1 = 'machdep.hypervisor'
        inventory_manager_0 = module_0.InventoryManager(str_0, str_1)
        var_0 = inventory_manager_0.clear_pattern_cache()
        str_2 = 'e2'
        var_1 = inventory_manager_0.parse_sources()
        inventory_manager_1 = module_0.InventoryManager(str_2, tuple_0)
        str_3 = 'i[o`u@V\\m&'
        int_0 = 3134
        inventory_manager_2 = module_0.InventoryManager(str_3, int_0, tuple_0)
        var_2 = inventory_manager_2.parse_source(inventory_manager_1)
        list_0 = [str_0, int_0, set_0, var_2]
        var_3 = inventory_manager_0.add_host(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xf6\xfb\xd7\x1b\x02\xfa\xed\x82s\xf2\xac'
        str_0 = 'R\x0c'
        float_0 = -1638.1
        set_0 = {str_0}
        inventory_manager_0 = module_0.InventoryManager(float_0, set_0, bytes_0)
        var_0 = inventory_manager_0.list_hosts()
        var_1 = inventory_manager_0.refresh_inventory()
        int_0 = 1818
        var_2 = inventory_manager_0.subset(int_0)
        list_0 = []
        var_3 = inventory_manager_0.list_hosts(list_0)
        var_4 = inventory_manager_0.parse_source(set_0)
        list_1 = [var_4, list_0]
        var_5 = inventory_manager_0.add_group(list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'R\x0c'
        inventory_manager_0 = module_0.InventoryManager(str_0, str_0)
        var_0 = inventory_manager_0.list_hosts()
        var_1 = inventory_manager_0.refresh_inventory()
        list_0 = [str_0, inventory_manager_0]
        var_2 = inventory_manager_0.subset(list_0)
        str_1 = 'UPS.'
        var_3 = inventory_manager_0.subset(str_1)
        str_2 = '&'
        var_4 = inventory_manager_0.subset(str_2)
        var_5 = inventory_manager_0.list_hosts()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'L2AT9'
        var_0 = module_0.order_patterns(str_0)
        list_0 = [str_0, str_0, str_0, str_0]
        dict_0 = {}
        var_1 = module_0.split_host_pattern(dict_0)
        str_1 = 'u*@A'
        int_0 = 200000
        set_0 = {str_0, str_0}
        tuple_0 = (int_0, dict_0, list_0, set_0)
        inventory_manager_0 = module_0.InventoryManager(tuple_0)
        float_0 = -2212.8
        var_2 = inventory_manager_0.get_hosts(dict_0, str_1, float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xf6\xfb\xd7\x1b\x02\xfa\xed\x82s\xf2\xac'
        str_0 = 'R\x0c'
        bytes_1 = b'*\x9d\x82l\r\xecx\xb9\xb9\x96]\xba\xb9\xa8\xa4\xd5\x02>'
        inventory_manager_0 = module_0.InventoryManager(bytes_1)
        bool_0 = False
        str_1 = '\n    Return the version of the current OS distribution, as a human-readable\n    string.\n\n    If *pretty* is false, the version is returned without codename (e.g.\n    "7.0").\n\n    If *pretty* is true, the codename in parenthesis is appended, if the\n    codename is non-empty (e.g. "7.0 (Maipo)").\n\n    Some distributions provide version numbers with different precisions in\n    the different sources of distribution information. Examining the different\n    sources in a fixed priority order does not always yield the most precise\n    version (e.g. for Debian 8.2, or CentOS 7.1).\n\n    The *best* parameter can be used to control the approach for the returned\n    version:\n\n    If *best* is false, the first non-empty version number in priority order of\n    the examined sources is returned.\n\n    If *best* is true, the most precise version number out of all examined\n    sources is returned.\n\n    **Lookup hierarchy:**\n\n    In all cases, the version number is obtained from the following sources.\n    If *best* is false, this order represents the priority order:\n\n    * the value of the "VERSION_ID" attribute of the os-release file,\n    * the value of the "Release" attribute returned by the lsb_release\n      command,\n    * the version number parsed from the "<version_id>" field of the first line\n      of the distro release file,\n    * the version number parsed from the "PRETTY_NAME" attribute of the\n      os-release file, if it follows the format of the distro release files.\n    * the version number parsed from the "Description" attribute returned by\n      the lsb_release command, if it follows the format of the distro release\n      files.\n    '
        inventory_manager_1 = module_0.InventoryManager(bool_0, str_1)
        float_0 = None
        var_0 = inventory_manager_0.restrict_to_hosts(float_0)
        var_1 = inventory_manager_0.refresh_inventory()
        int_0 = -1025
        set_0 = {int_0, inventory_manager_1, int_0, bytes_0}
        dict_0 = {str_0: bool_0, int_0: set_0, var_1: inventory_manager_1}
        var_2 = inventory_manager_1.subset(dict_0)
        str_2 = '2'
        bytes_2 = b'\xb2\x9f\x9d\x84^\x11e\xe5\xd4hU7\\\x19'
        inventory_manager_2 = module_0.InventoryManager(str_2, bytes_2, set_0)
    except BaseException:
        pass