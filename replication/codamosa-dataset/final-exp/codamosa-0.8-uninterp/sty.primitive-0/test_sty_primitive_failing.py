# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        str_0 = None
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        dict_0 = None
        register_0.mute()
        str_0 = ']*()N'
        list_0 = [register_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
        str_1 = register_0.__call__(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        dict_0 = {register_1: register_1, register_1: register_0}
        register_0.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        register_0 = module_0.Register()
        register_0.set_rgb_call(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        register_1 = register_0.copy()
        register_0.mute()
        register_2 = module_0.Register()
        str_0 = 'e9?f~\rD>'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = register_0.__call__(**dict_0)
        register_2.set_renderfunc(register_1, register_1)
        register_3 = module_0.Register()
        register_4 = register_1.copy()
        register_5 = register_4.copy()
        register_1.mute()
        var_0 = register_3.as_namedtuple()
        register_6 = register_5.copy()
        register_7 = register_3.copy()
        register_8 = module_0.Register()
        type_0 = None
        register_0.set_eightbit_call(type_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        int_0 = -3313
        list_0 = [int_0]
        style_0 = module_0.Style()
        register_0.mute()
        str_0 = register_1.__call__(*list_0)
        register_2 = module_0.Register()
        dict_0 = register_1.as_dict()
        str_1 = "dB3<VK^'J-h$6PQvxb"
        dict_1 = {str_0: str_0, str_1: list_0}
        register_0.mute()
        style_1 = module_0.Style(**dict_1)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_0.mute()
        register_2 = module_0.Register()
        str_0 = 'e9?f~\rD>'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = register_2.__call__(**dict_0)
        register_2.set_renderfunc(register_1, register_1)
        register_3 = module_0.Register()
        register_4 = register_2.copy()
        register_5 = register_4.copy()
        register_6 = module_0.Register()
        register_1.mute()
        dict_1 = register_3.as_dict()
        register_7 = register_0.copy()
        list_0 = [str_1]
        str_2 = register_6.__call__(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Fku@#'
        style_0 = module_0.Style()
        style_1 = module_0.Style()
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        var_0 = register_1.as_namedtuple()
        var_1 = register_1.__setattr__(str_0, style_1)
        register_1.unmute()
        register_2 = module_0.Register()
        list_0 = [register_1, style_1]
        register_0.set_eightbit_call(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '?>TuT;gFkyiBu'
        dict_0 = {}
        style_0 = module_0.Style(**dict_0)
        style_1 = module_0.Style()
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
        str_1 = '{'
        str_2 = '\n    Define Eightbit Background.\n\n    More info about 8-bit terminal colors: https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n\n    :param num: Eightbit number.\n    '
        dict_1 = register_0.as_dict()
        style_2 = module_0.Style()
        style_3 = style_2.__new__(str_1, value=str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        str_0 = 'uT2<],[2a(S\rxHV'
        str_1 = 'VduZHe]/ >t!@\x0c8@S&~'
        list_0 = []
        dict_0 = {}
        style_0 = module_0.Style(*list_0, **dict_0)
        var_0 = register_0.__setattr__(str_1, style_0)
        style_1 = module_0.Style()
        var_1 = register_0.__setattr__(str_0, style_1)
        type_0 = None
        bytes_0 = b'A\xf9e*)\x84*\x9fjuT\xb4\xdf\xdf\xb6'
        register_0.set_renderfunc(type_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        style_0 = None
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.mute()
        type_0 = None
        bool_0 = True
        register_1.set_renderfunc(type_0, bool_0)
        dict_0 = register_2.as_dict()
        register_3 = register_1.copy()
        register_3.set_rgb_call(type_0)
        register_0.unmute()
        register_4 = register_1.copy()
        str_0 = register_4.__call__()
        register_4.mute()
        register_5 = module_0.Register()
        list_0 = [style_0, style_0]
        register_0.set_rgb_call(list_0)
    except BaseException:
        pass