# Automatically generated by Pynguin.
import ansible.plugins.shell.powershell as module_0

def test_case_0():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.env_prefix()
        var_1 = shell_module_0.mkdtemp()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '4VOhN'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.path_has_trailing_slash(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'4j^\xb0K`\r@\xc9\xae\x89\x05z\x91\xf5\xa7E'
        float_0 = None
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.chmod(bytes_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'X {^b`y;Iz3\tvTvCTx^'
        bool_0 = True
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.chown(str_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 0.5
        str_0 = 'no closing quotation'
        dict_0 = {str_0: str_0}
        str_1 = "GTb@[z>HHeidj's]"
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.set_user_facl(float_0, dict_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        shell_module_0 = module_0.ShellModule()
        str_0 = '.1gyiR{WMy{gw#kxo*~'
        var_0 = shell_module_0.get_remote_filename(str_0)
        list_0 = None
        var_1 = shell_module_0.expand_user(list_0)
        str_1 = '50{2ZEr}9L:'
        str_2 = 's'
        var_2 = shell_module_0.build_module_command(str_2, str_1, str_2, shell_module_0)
        bytes_0 = b'=\xea\x0c\xce\xce\x9d'
        var_3 = shell_module_0.remove(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.mkdtemp()
    except BaseException:
        pass

def test_case_7():
    try:
        shell_module_0 = module_0.ShellModule()
        dict_0 = None
        set_0 = {dict_0, shell_module_0, dict_0}
        tuple_0 = (shell_module_0, set_0)
        str_0 = 'e$+@T'
        dict_1 = {str_0: set_0}
        dict_2 = {shell_module_0: dict_1}
        var_0 = shell_module_0.remove(dict_2)
        shell_module_1 = module_0.ShellModule()
        var_1 = shell_module_1.wrap_for_exec(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.mkdtemp(shell_module_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -298
        set_0 = {int_0, int_0, int_0, int_0}
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.expand_user(set_0, shell_module_0)
        tuple_0 = ()
        set_1 = None
        var_1 = shell_module_0.build_module_command(set_0, tuple_0, set_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -298
        set_0 = {int_0, int_0, int_0, int_0}
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.expand_user(set_0, shell_module_0)
        shell_module_1 = module_0.ShellModule()
        bytes_0 = None
        bool_0 = False
        str_0 = '5)K,Dgar\\L('
        var_1 = shell_module_1.build_module_command(bytes_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -298
        set_0 = {int_0, int_0, int_0, int_0}
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.expand_user(set_0, shell_module_0)
        list_0 = [set_0]
        list_1 = [var_0, list_0]
        str_0 = 'U(^s?\x0c'
        str_1 = 'rQ%5rZ7Jbh<PPC:"uK{'
        str_2 = '50{2ZEr}9L:'
        str_3 = ''
        var_1 = shell_module_1.build_module_command(str_1, str_2, str_3, shell_module_1)
        dict_0 = {str_3: str_0}
        var_2 = shell_module_0.checksum(list_1, **dict_0)
        var_3 = shell_module_1.mkdtemp()
    except BaseException:
        pass

def test_case_12():
    try:
        shell_module_0 = module_0.ShellModule()
        str_0 = '"C:\\foo\\bar\\"'
        var_0 = shell_module_0.path_has_trailing_slash(str_0)
    except BaseException:
        pass