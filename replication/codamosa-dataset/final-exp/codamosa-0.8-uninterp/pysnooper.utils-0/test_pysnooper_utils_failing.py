# Automatically generated by Pynguin.
import pysnooper.utils as module_0

def test_case_0():
    try:
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'abc'
        var_0 = module_0.shitcode(str_0)
        str_1 = 'abc\n\r'
        var_1 = module_0.shitcode(str_1)
        str_2 = 'abc\u135cdef'
        var_2 = module_0.shitcode(str_2)
        str_3 = '}%?:1+8!HJawP?\x0b@}f'
        dict_0 = {str_1: str_2, str_3: var_1}
        var_3 = module_0.normalize_repr(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        list_1 = [list_0, list_0, dict_0]
        list_2 = [list_1, list_1, dict_0]
        bool_0 = None
        var_0 = module_0.truncate(list_2, bool_0)
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'HxCR3\\3UW'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.truncate(str_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        var_0 = module_0.get_shortish_repr(tuple_0)
        dict_0 = {tuple_0: var_0}
        var_1 = module_0.get_repr_function(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '~oqGS#1Qn^'
        var_0 = module_0.normalize_repr(str_0)
        str_1 = 'mN&PdteV[T'
        float_0 = 1393.7
        var_1 = module_0.truncate(str_1, float_0)
        dict_0 = {var_1: float_0}
        str_2 = '<=U%X@Si\x0b`N5-E<Sae6\x0b'
        var_2 = module_0.get_repr_function(dict_0, str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'z'
        str_1 = 'k?>\x0c{O'
        var_0 = module_0.shitcode(str_1)
        var_1 = module_0.ensure_tuple(str_0)
        int_0 = 1498
        bool_0 = True
        str_2 = "'NF+9\ri#\\+"
        set_0 = {str_1, var_0, bool_0, int_0}
        var_2 = module_0.get_shortish_repr(str_2, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        var_0 = module_0.get_shortish_repr(tuple_0)
        dict_0 = {var_0: var_0, tuple_0: tuple_0}
        var_1 = module_0.get_repr_function(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        bool_0 = True
        tuple_0 = ()
        var_0 = module_0.get_shortish_repr(dict_0, tuple_0, bool_0, bool_0)
        list_0 = [var_0, dict_0, dict_0]
        writable_stream_0 = module_0.WritableStream(*list_0, **dict_0)
    except BaseException:
        pass