# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        var_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_1 = immutable_list_0.__add__(var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        object_0 = module_1.object()
        bool_1 = immutable_list_0.__eq__(object_0)
        var_0 = immutable_list_0.__len__()
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '~\n'
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(str_0, bool_0)
        var_0 = immutable_list_0.__len__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'l$VYG$s@'
        str_1 = 'DC*%<b'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(dict_0, bool_0)
        var_0 = immutable_list_0.to_list()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList()
        var_0 = None
        immutable_list_1 = module_0.ImmutableList(bool_0)
        var_1 = immutable_list_1.append(var_0)
        var_2 = immutable_list_0.__add__(var_1)
        var_3 = immutable_list_0.__add__(var_2)
        var_4 = immutable_list_0.__len__()
        object_0 = None
        str_0 = '\n        Take 2 functions call only one of then with either value and return her result.\n\n        :params error: function to call when Either is Left\n        :type error: Function(A) -> B\n        :params success: function to call when Either is Right\n        :type success: Function(A) -> B\n        :returns: result of success handler when Eihter is Right, result of error handler when Eihter is Left\n        :rtpye: B\n        '
        dict_0 = {object_0: bool_0, bool_0: bool_0, str_0: object_0, object_0: str_0}
        immutable_list_2 = module_0.ImmutableList()
        var_5 = immutable_list_2.append(dict_0)
        immutable_list_3 = module_0.ImmutableList()
        bool_1 = immutable_list_3.__eq__(object_0)
        int_0 = -3192
        immutable_list_4 = module_0.ImmutableList(int_0, bool_0)
        var_6 = immutable_list_4.map(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        immutable_list_0 = module_0.ImmutableList()
        dict_0 = None
        var_0 = immutable_list_0.map(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 643
        str_0 = 'w<`cT8!aU-#:I'
        list_0 = [str_0]
        immutable_list_0 = module_0.ImmutableList(str_0, list_0)
        var_0 = immutable_list_0.filter(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_1 = immutable_list_0.filter(var_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 640.6
        immutable_list_0 = module_0.ImmutableList(float_0)
        optional_0 = immutable_list_0.find(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        callable_0 = None
        object_0 = None
        immutable_list_1 = module_0.ImmutableList()
        bool_1 = immutable_list_1.__eq__(object_0)
        var_0 = None
        var_1 = immutable_list_0.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = "\n        Take function and call constructor function passing returned value to fn function.\n\n        It's only way to call function store in Lazy\n        :param fn: Function(constructor_fn) -> B\n        :returns: result od folder function\n        :rtype: B\n        "
        list_0 = [str_0]
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_0 = immutable_list_0.append(list_0)
        bool_1 = False
        immutable_list_1 = module_0.ImmutableList(str_0, bool_1)
        callable_0 = None
        object_0 = None
        bool_2 = immutable_list_1.__eq__(object_0)
        var_1 = None
        var_2 = immutable_list_1.reduce(callable_0, var_1)
    except BaseException:
        pass

def test_case_11():
    try:
        callable_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        object_0 = module_1.object()
        bool_1 = immutable_list_0.__eq__(object_0)
        var_0 = None
        immutable_list_1 = module_0.ImmutableList()
        var_1 = immutable_list_1.__len__()
        list_0 = [bool_1]
        var_2 = immutable_list_1.reduce(list_0, var_0)
        list_1 = [var_0, var_0, var_0, var_0]
        optional_0 = immutable_list_1.find(callable_0)
        immutable_list_2 = module_0.ImmutableList(list_1)
        var_3 = immutable_list_2.filter(callable_0)
    except BaseException:
        pass

def test_case_12():
    try:
        callable_0 = None
        var_0 = None
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(var_0, bool_0)
        var_1 = immutable_list_0.append(var_0)
        object_0 = module_1.object()
        bool_1 = immutable_list_0.__eq__(object_0)
        var_2 = immutable_list_0.__len__()
        optional_0 = immutable_list_0.find(callable_0)
        immutable_list_1 = module_0.ImmutableList()
        var_3 = immutable_list_1.filter(callable_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        int_0 = 2812
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(int_0, bool_0)
        optional_0 = immutable_list_0.find(dict_0)
    except BaseException:
        pass