# Automatically generated by Pynguin.
import flutils.pathutils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = '9'
        module_0.chmod(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '='
        module_0.chown(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'C9D_)V"np'
        dict_0 = {str_0: str_0, str_0: str_0}
        struct_group_0 = module_0.get_os_group(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'nwcWhm\ryL-w~c'
        struct_group_0 = module_0.get_os_group(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '~'
        module_0.chown(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x02\xb8~\x82\x04\\'
        struct_passwd_0 = module_0.get_os_user()
        path_0 = module_0.directory_present(bytes_0, struct_passwd_0)
    except BaseException:
        pass

def test_case_6():
    try:
        struct_passwd_0 = module_0.get_os_user()
        struct_passwd_1 = module_0.get_os_user(struct_passwd_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xdf\xb4\x11&'
        path_0 = module_0.normalize_path(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        struct_group_0 = module_0.get_os_group()
        int_0 = 1838
        struct_group_1 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 2094
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        struct_group_0 = module_0.get_os_group()
        struct_passwd_0 = module_0.get_os_user()
        int_0 = -3188
        struct_group_1 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '~'
        path_0 = module_0.normalize_path(str_0)
        path_1 = module_0.directory_present(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '/'
        bool_0 = False
        module_0.chown(str_0, bool_0)
        path_0 = module_0.directory_present(str_0)
        module_0.path_absent(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '~'
        path_0 = module_0.normalize_path(str_0)
        str_1 = module_0.exists_as(str_0)
        path_1 = module_0.directory_present(str_0)
        module_0.chmod(str_0)
        module_0.path_absent(str_0)
        generator_0 = module_0.find_paths(str_0)
        var_0 = path_1.with_suffix(generator_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'm/tmp/flutils.tests.osutils.txt'
        str_1 = '~/tmp/**'
        path_0 = module_0.directory_present(str_1, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '/etc/hosts'
        module_0.path_absent(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '~'
        path_0 = module_0.normalize_path(str_0)
        module_0.chmod(str_0)
        module_0.path_absent(str_0)
        path_1 = module_0.directory_present(str_0)
        path_2 = module_0.normalize_path(str_0)
        int_0 = 2094
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '~'
        path_0 = module_0.normalize_path(str_0)
        str_1 = module_0.exists_as(str_0)
        path_1 = module_0.directory_present(str_0)
        module_0.chmod(str_0)
        module_0.path_absent(str_0)
        path_2 = module_0.normalize_path(str_0)
        var_0 = path_2.touch()
        list_0 = [str_0, str_0, str_0, str_0]
        dict_0 = {str_0: str_0}
        posix_path_0 = module_1.PosixPath(*list_0, **dict_0)
        int_0 = 2094
        path_3 = module_0.directory_present(posix_path_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '~'
        path_0 = module_0.normalize_path(str_0)
        str_1 = module_0.exists_as(str_0)
        path_1 = module_0.directory_present(str_0)
    except BaseException:
        pass