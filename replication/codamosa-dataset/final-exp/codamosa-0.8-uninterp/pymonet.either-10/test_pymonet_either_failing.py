# Automatically generated by Pynguin.
import builtins as module_0
import pymonet.either as module_1

def test_case_0():
    try:
        object_0 = module_0.object()
        either_0 = module_1.Either(object_0)
        bool_0 = either_0.__eq__(object_0)
        var_0 = either_0.to_box()
        var_1 = either_0.is_right()
        var_2 = None
        var_3 = either_0.ap(var_2)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1962
        callable_0 = None
        set_0 = set()
        either_0 = module_1.Either(set_0)
        var_0 = either_0.case(int_0, callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'Y&\x85\xf2\x86\xb7Mn\x14\xc3)'
        var_0 = None
        set_0 = {var_0, bytes_0}
        either_0 = module_1.Either(var_0)
        var_1 = either_0.to_try()
        var_2 = either_0.ap(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        either_0 = module_1.Either(tuple_0)
        var_0 = either_0.is_right()
        left_0 = module_1.Left(tuple_0)
        set_0 = None
        var_1 = left_0.bind(set_0)
        list_0 = [var_0, var_0, left_0, left_0]
        var_2 = left_0.bind(list_0)
        var_3 = left_0.to_validation()
        bytes_0 = b'a\xa2)\x00\xa5\xd6\x95\xdc'
        list_1 = [bytes_0]
        right_0 = module_1.Right(list_1)
        var_4 = either_0.to_lazy()
        bool_0 = right_0.is_left()
        bytes_1 = b'c\xe0\xf8Q'
        var_5 = right_0.map(bytes_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\t\xb6\x9c\xbdY\xf2\x93'
        bytes_1 = b'\xb5'
        left_0 = module_1.Left(bytes_1)
        var_0 = left_0.to_validation()
        callable_0 = None
        var_1 = left_0.map(callable_0)
        bool_0 = True
        right_0 = module_1.Right(bytes_0)
        left_1 = module_1.Left(bool_0)
        either_0 = module_1.Either(left_1)
        var_2 = either_0.case(bytes_0, left_1)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = None
        dict_0 = {}
        right_0 = module_1.Right(dict_0)
        left_0 = module_1.Left(tuple_0)
        var_0 = left_0.bind(right_0)
        left_1 = module_1.Left(var_0)
        var_1 = left_1.to_maybe()
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        object_0 = module_0.object(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = None
        bytes_1 = b'\xb4\xa2\xeeg\r\x0e'
        list_0 = [bytes_1]
        left_0 = module_1.Left(list_0)
        var_0 = left_0.ap(bytes_0)
        right_0 = None
        list_1 = [right_0]
        var_1 = right_0.map(list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        left_0 = module_1.Left(var_0)
        bool_0 = left_0.is_left()
        var_1 = left_0.to_validation()
        int_0 = -2474
        right_0 = module_1.Right(var_0)
        var_2 = right_0.to_maybe()
        var_3 = left_0.map(int_0)
        callable_0 = None
        list_0 = []
        object_0 = module_0.object(*list_0)
        either_0 = module_1.Either(var_0)
        bool_1 = either_0.__eq__(object_0)
        right_1 = module_1.Right(var_0)
        either_1 = module_1.Either(var_0)
        var_4 = either_1.to_box()
        var_5 = right_1.bind(callable_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = None
        left_0 = module_1.Left(var_0)
        var_1 = left_0.to_maybe()
        either_0 = module_1.Either(var_0)
        either_1 = module_1.Either(var_0)
        var_2 = either_1.is_right()
        bytes_0 = b'u\xaf\x04A\xe9\xf8\x8a\x85\xd1_Cy\xab\xa1\xc3'
        var_3 = either_0.ap(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = False
        str_0 = 'FP{Qp;+\ns=hbxL?D\x0b=/+'
        right_0 = module_1.Right(str_0)
        right_1 = module_1.Right(right_0)
        var_0 = right_1.map(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b''
        either_0 = module_1.Either(bytes_0)
        object_0 = module_0.object()
        var_0 = either_0.is_right()
        var_1 = None
        bool_0 = either_0.__eq__(object_0)
        callable_0 = None
        right_0 = module_1.Right(var_1)
        var_2 = right_0.bind(callable_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b''
        either_0 = module_1.Either(bytes_0)
        float_0 = -2321.0
        right_0 = module_1.Right(float_0)
        var_0 = right_0.to_maybe()
        object_0 = module_0.object()
        var_1 = either_0.to_box()
        bool_0 = either_0.__eq__(object_0)
        var_2 = either_0.is_right()
        bool_1 = either_0.__eq__(object_0)
        var_3 = None
        either_1 = module_1.Either(var_3)
        callable_0 = None
        either_2 = module_1.Either(var_3)
        var_4 = either_2.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = None
        left_0 = None
        str_0 = 'OKQ6*D!s-9dc?_J'
        left_1 = module_1.Left(str_0)
        var_0 = left_1.map(left_0)
        str_1 = 'ws;/ga\t_f.q_"'
        var_1 = left_1.map(str_1)
        list_0 = [var_0, str_0]
        tuple_0 = (bytes_0, var_0, list_0)
        right_0 = module_1.Right(tuple_0)
        right_1 = module_1.Right(right_0)
        var_2 = right_1.to_validation()
        str_2 = 'jq'
        str_3 = 'u|><daEQ%8'
        dict_0 = {str_2: left_1, str_3: bytes_0}
        object_0 = module_0.object(**dict_0)
    except BaseException:
        pass