# Automatically generated by Pynguin.
import ansible.vars.hostvars as module_0
import ansible.template as module_1

def test_case_0():
    try:
        str_0 = 'LXH?^B[*"T\'u\'O'
        bytes_0 = b'\xedgj\x91\xc9\x80\xb0\xf1\x19\x18\x1a$\xec'
        host_vars_0 = module_0.HostVars(str_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'i&bFE)TQL=[H{sc\\i_'
        int_0 = 506
        float_0 = 976.6
        str_1 = 'qj\x0ce`jnpG('
        float_1 = None
        host_vars_vars_0 = module_0.HostVarsVars(int_0, float_1)
        list_0 = [host_vars_vars_0, host_vars_vars_0, float_1, float_1]
        host_vars_0 = module_0.HostVars(list_0, host_vars_vars_0, str_0)
        var_0 = host_vars_0.set_host_facts(float_0, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        bytes_0 = b'k%'
        host_vars_vars_0 = module_0.HostVarsVars(bool_0, bytes_0)
        var_0 = host_vars_vars_0.__len__()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        bool_1 = False
        str_0 = 'edX7hY2s7*$v3M6OY['
        host_vars_vars_0 = module_0.HostVarsVars(bool_1, str_0)
        var_0 = host_vars_vars_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ',zlJ%hE&A7p'
        bool_0 = True
        int_0 = -1034
        host_vars_vars_0 = module_0.HostVarsVars(bool_0, int_0)
        var_0 = host_vars_vars_0.__contains__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\x0c'
        list_0 = [str_0, str_0]
        host_vars_vars_0 = module_0.HostVarsVars(str_0, list_0)
        str_1 = 'c,}O\n5|bc\x0c'
        host_vars_vars_1 = module_0.HostVarsVars(host_vars_vars_0, str_1)
        var_0 = host_vars_vars_1.__repr__()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1414.874145
        host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
        dict_0 = {float_0: int_0, int_0: int_0}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        str_1 = ':3Z.L&\\(F'
        bool_1 = False
        bytes_0 = b'G\xd5'
        dict_1 = {float_0: dict_0, bool_0: str_1, bool_1: dict_0, str_0: bytes_0}
        host_vars_vars_1 = module_0.HostVarsVars(str_1, dict_1)
        var_0 = host_vars_0.raw_get(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = None
        float_1 = 2476.0
        set_0 = {float_0, float_0, float_0, float_1}
        list_0 = [set_0]
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0}
        int_0 = 448
        tuple_1 = (tuple_0, dict_0, int_0)
        str_0 = 'saS:RD!Q<O'
        host_vars_vars_0 = module_0.HostVarsVars(tuple_1, str_0)
        str_1 = '&S_=pw^,[Ry'
        host_vars_0 = module_0.HostVars(host_vars_vars_0, host_vars_vars_0, str_1)
        var_0 = host_vars_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    auhor:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1379.2174601041268
        host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
        dict_0 = {}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        var_0 = host_vars_0.__setstate__(dict_0)
        var_1 = host_vars_0.__len__()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'reboot_command'
        bytes_0 = b'#\x8e6\x97'
        list_0 = [str_0, str_0, bytes_0]
        bytes_1 = b'\xcb\x8f\x1e\x81\\\x01Y\xa9j\xe1\xcdV\t\xbd\x19\x9e\xfe'
        host_vars_vars_0 = module_0.HostVarsVars(list_0, bytes_1)
        str_1 = 'use_tty'
        host_vars_0 = module_0.HostVars(host_vars_vars_0, host_vars_vars_0, str_1)
        var_0 = host_vars_0.__repr__()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1414.874145
        host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
        dict_0 = {float_0: int_0, int_0: int_0}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        int_1 = -1193
        var_0 = host_vars_0.__contains__(int_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = {str_0: int_0, str_1: int_1, str_2: int_2}
        var_0 = None
        host_vars_vars_0 = module_0.HostVarsVars(int_3, var_0)
        var_1 = iter(host_vars_vars_0)
        var_2 = list(var_1)
        var_3 = sorted(var_2)
        float_0 = -1236.92
        var_4 = host_vars_vars_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1414.874145
        host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
        dict_0 = {float_0: int_0, int_0: int_0}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        var_0 = host_vars_0.__setstate__(host_vars_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1414.874145
        host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
        dict_0 = {float_0: int_0, int_0: int_0}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        float_1 = -2143.667
        var_0 = host_vars_0.__deepcopy__(float_1)
        int_1 = -1193
        var_1 = host_vars_0.__contains__(int_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1414.874145
        host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
        dict_0 = {float_0: int_0, int_0: int_0}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        list_0 = []
        var_0 = host_vars_0.set_variable_manager(list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1414.874145
        host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
        dict_0 = {float_0: int_0, int_0: int_0}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        var_0 = host_vars_0.set_nonpersistent_facts(dict_0, float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = None
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1414.874145
        host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
        dict_0 = {float_0: int_0, int_0: int_0}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        set_0 = None
        var_0 = host_vars_0.set_host_variable(bool_0, set_0, host_vars_vars_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = None
        int_0 = -1386
        str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
        float_0 = -1330.1777855444407
        str_1 = None
        host_vars_vars_0 = module_0.HostVarsVars(str_1, str_1)
        dict_0 = {float_0: int_0, int_0: int_0}
        host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
        str_2 = ':3Z.L&\\(F'
        bool_1 = False
        bytes_0 = b'\x12\xc5'
        var_0 = host_vars_0.__setstate__(dict_0)
        dict_1 = {float_0: dict_0, bool_0: str_2, bool_1: dict_0, str_0: bytes_0}
        host_vars_vars_1 = module_0.HostVarsVars(str_2, dict_1)
        complex_0 = None
        var_1 = host_vars_0.__contains__(complex_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ' Checks if a plugin named name exists '
        bool_0 = False
        str_1 = 'cH\rB2~RZp{f|0g\noEO/'
        list_0 = []
        host_vars_vars_0 = module_0.HostVarsVars(str_1, list_0)
        var_0 = host_vars_vars_0.__getitem__(bool_0)
        list_1 = [str_0]
        ansible_undefined_0 = module_1.AnsibleUndefined(str_0, str_0)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        host_vars_0 = module_0.HostVars(list_1, async_iterator_0, async_iterator_0)
    except BaseException:
        pass