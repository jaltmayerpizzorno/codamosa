# Automatically generated by Pynguin.
import ansible.vars.hostvars as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = None
    int_0 = -1386
    str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
    float_0 = -1414.874145
    host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
    dict_0 = {float_0: int_0, int_0: int_0}
    host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
    var_0 = host_vars_0.set_inventory(bool_0)

def test_case_2():
    int_0 = -1386
    str_0 = '\n    name: inventory_hostnames\n    author:\n      - Michael DeHaan\n      - Steven Dossett (!UNKNOWN) <sdossett@panath.com>\n    version_added: "1.3"\n    short_description: list of inventory hosts matching a host pattern\n    description:\n      - "This lookup understands \'host patterns\' as used by the `hosts:` keyword in plays\n        and can return a list of matching hosts from inventory"\n    notes:\n      - this is only worth for \'hostname patterns\' it is easier to loop over the group/group_names variables otherwise.\n'
    float_0 = -1379.2174601041268
    host_vars_vars_0 = module_0.HostVarsVars(str_0, float_0)
    dict_0 = {float_0: int_0, int_0: int_0}
    host_vars_0 = module_0.HostVars(int_0, host_vars_vars_0, dict_0)
    var_0 = host_vars_0.__setstate__(dict_0)
    var_1 = host_vars_0.set_inventory(float_0)

def test_case_3():
    str_0 = 'a'
    str_1 = 'b'
    str_2 = 'c'
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = {str_0: int_0, str_1: int_1, str_2: int_2}
    var_0 = None
    host_vars_vars_0 = module_0.HostVarsVars(int_3, var_0)
    var_1 = iter(host_vars_vars_0)
    var_2 = list(var_1)
    var_3 = sorted(var_2)
    str_3 = [str_0, str_1, str_2]
    var_4 = sorted(str_3)
    var_5 = host_vars_vars_0.__repr__()

def test_case_4():
    str_0 = 'a'
    str_1 = 'b'
    str_2 = 'c'
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = {str_0: int_0, str_1: int_1, str_2: int_2}
    var_0 = None
    host_vars_vars_0 = module_0.HostVarsVars(int_3, var_0)
    var_1 = iter(host_vars_vars_0)
    var_2 = list(var_1)
    var_3 = sorted(var_2)
    str_3 = [str_0, str_1, str_2]
    var_4 = sorted(str_3)