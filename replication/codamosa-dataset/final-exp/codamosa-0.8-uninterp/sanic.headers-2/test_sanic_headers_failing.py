# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        str_0 = None
        tuple_0 = module_0.parse_content_header(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '2<=2m8^6[[\n_;4Fws'
        tuple_0 = module_0.parse_content_header(str_0)
        str_1 = '}d#d]vT\ts\\tBo tzT|Lm'
        int_0 = 1740
        set_0 = {int_0, str_1}
        optional_0 = module_0.parse_forwarded(set_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'o\x0bLVrE2X>lL:C\x0c'
        str_1 = module_0.fwd_normalize_address(str_0)
        dict_0 = {str_1: str_1}
        optional_0 = module_0.parse_xforwarded(str_1, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        iterable_0 = None
        dict_0 = module_0.fwd_normalize(iterable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 266
        str_0 = 'eQ ~j\x0c;"Hv.[\x0c#S.Fh'
        dict_0 = {str_0: int_0}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2859
        bytes_0 = module_0.format_http1_response(int_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'AnR'
        int_0 = 502
        tuple_0 = module_0.parse_content_header(str_0)
        dict_0 = {}
        list_0 = []
        dict_1 = module_0.fwd_normalize(list_0)
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
        dict_2 = module_0.fwd_normalize(dict_0)
        str_1 = 'djFy\n>N'
        tuple_1 = module_0.parse_host(str_1)
        tuple_2 = module_0.parse_host(str_0)
        tuple_3 = module_0.parse_host(str_0)
        tuple_4 = module_0.parse_host(str_1)
        tuple_5 = module_0.parse_host(str_1)
        str_2 = 'unknown'
        str_3 = module_0.fwd_normalize_address(str_2)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'K$'
        list_0 = [str_0, str_0, str_0, str_0]
        tuple_0 = (str_0, list_0)
        dict_0 = module_0.fwd_normalize(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '26w`h)'
        str_1 = "Tf&e'zd\t'"
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
        tuple_0 = (str_0, dict_0)
        int_0 = -995
        tuple_1 = (tuple_0, int_0)
        list_0 = [tuple_1, str_0, dict_0]
        tuple_2 = module_0.parse_content_header(str_1)
        dict_1 = module_0.fwd_normalize(list_0)
    except BaseException:
        pass