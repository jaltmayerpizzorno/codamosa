# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.fields as module_1
import typesystem.schemas as module_2

def test_case_0():
    pass

def test_case_1():
    dict_0 = {}
    field_0 = module_0.from_json_schema(dict_0)

def test_case_2():
    bool_0 = True
    field_0 = module_0.from_json_schema(bool_0)

def test_case_3():
    str_0 = 'type'
    str_1 = 'string'
    str_2 = {str_0: str_1, str_1: str_0}
    field_0 = module_0.from_json_schema(str_2)
    string_0 = module_1.String()

def test_case_4():
    any_0 = module_1.Any()
    var_0 = module_0.to_json_schema(any_0)
    str_0 = 'a'
    string_0 = module_1.String()
    string_1 = {str_0: string_0}
    object_0 = module_1.Object(properties=string_1)
    var_1 = module_0.to_json_schema(object_0)

def test_case_5():
    str_0 = 'A name'
    integer_0 = module_1.Integer()
    var_0 = module_0.to_json_schema(integer_0)
    str_1 = 'A boolean field'
    boolean_0 = module_1.Boolean(description=str_1)

def test_case_6():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'integer'
    str_3 = {str_0: str_2}
    str_4 = {str_1: str_1}
    str_5 = {str_0: str_3, str_1: str_4}
    var_0 = None
    field_0 = module_0.if_then_else_from_json_schema(str_5, var_0)

def test_case_7():
    str_0 = 'An anything-goes field'
    any_0 = module_1.Any(description=str_0)
    var_0 = module_0.to_json_schema(any_0)
    str_1 = 'A name'
    integer_0 = module_1.Integer()
    var_1 = module_0.to_json_schema(integer_0)
    str_2 = 'A boolean field'
    boolean_0 = module_1.Boolean(description=str_2)
    var_2 = module_0.to_json_schema(boolean_0)

def test_case_8():
    any_0 = module_1.Any()
    var_0 = module_0.to_json_schema(any_0)
    string_0 = module_1.String()
    string_1 = {}
    object_0 = module_1.Object(properties=string_1)
    var_1 = module_0.to_json_schema(object_0)

def test_case_9():
    str_0 = 'default'
    str_1 = 'type'
    str_2 = 'not'
    bool_0 = True
    str_3 = 'boolean'
    str_4 = 'const'
    var_0 = {str_1: str_3, str_0: bool_0, str_4: bool_0}
    var_1 = {str_1: str_3, str_2: var_0}
    var_2 = {str_1: str_3, str_2: var_1}
    var_3 = {str_0: bool_0, str_1: str_3, str_2: var_2}
    var_4 = None
    field_0 = module_0.not_from_json_schema(var_3, var_4)

def test_case_10():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'minLength'
    str_3 = 'maxLength'
    str_4 = 'string'
    int_0 = 1
    int_1 = 10
    var_0 = {str_1: str_4, str_2: int_0, str_3: int_1}
    str_5 = 'minimum'
    str_6 = 'maximum'
    str_7 = 'integer'
    int_2 = 100
    var_1 = {str_1: str_7, str_5: int_0, str_6: int_2}
    var_2 = [var_0, var_1]
    var_3 = {str_0: var_2}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.any_of_from_json_schema(var_3, schema_definitions_0)

def test_case_11():
    schema_definitions_0 = module_2.SchemaDefinitions()
    str_0 = '$ref'
    str_1 = '#/definitions/foo'
    str_2 = {str_0: str_1}
    field_0 = module_0.ref_from_json_schema(str_2, schema_definitions_0)

def test_case_12():
    str_0 = 'anyOf'
    str_1 = '$ref'
    str_2 = '#/definitions/Percent'
    str_3 = {str_1: str_2}
    str_4 = '#/definitions/Amount'
    str_5 = {str_1: str_4}
    str_6 = [str_3, str_5]
    str_7 = {str_0: str_6}
    str_8 = 'Percent'
    str_9 = 'Amount'
    int_0 = 0
    int_1 = 100
    integer_0 = module_1.Integer(minimum=int_0, maximum=int_1)
    integer_1 = module_1.Integer(minimum=int_0)
    field_0 = module_0.any_of_from_json_schema(str_7, integer_0)
    integer_2 = module_1.Integer(minimum=int_0, maximum=int_1)
    integer_3 = module_1.Integer(minimum=int_0)
    integer_4 = {str_8: integer_2, str_9: integer_3}
    reference_0 = module_2.Reference(str_2, integer_4)
    integer_5 = module_1.Integer(minimum=int_0, maximum=int_1)
    integer_6 = module_1.Integer(minimum=int_0)
    integer_7 = {str_8: integer_5, str_9: integer_6}
    reference_1 = module_2.Reference(str_4, integer_7)
    union_0 = field_0.__or__(field_0)

def test_case_13():
    str_0 = 'oneOf'
    str_1 = 'default'
    str_2 = 'minimum'
    str_3 = '1'
    int_0 = 1
    int_1 = 10
    var_0 = {str_2: str_0, str_1: str_3, str_2: int_0, str_2: int_1}
    str_4 = 'format'
    var_1 = [var_0, str_4]
    var_2 = {str_0: var_1}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.one_of_from_json_schema(var_2, schema_definitions_0)

def test_case_14():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'default'
    str_3 = 'type'
    str_4 = 'string'
    str_5 = {str_3: str_4}
    str_6 = 'minLength'
    int_0 = 3
    int_1 = {str_6: int_0}
    var_0 = {str_0: str_5, str_1: int_1, str_2: str_6}
    var_1 = None
    field_0 = module_0.if_then_else_from_json_schema(var_0, var_1)

def test_case_15():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'type'
    str_4 = 'properties'
    str_5 = 'object'
    str_6 = 'id'
    str_7 = 'integer'
    str_8 = {str_3: str_7}
    str_9 = {str_6: str_8}
    str_10 = {str_3: str_5, str_4: str_9}
    str_11 = 'string'
    str_12 = {str_3: str_11}
    str_13 = 'number'
    str_14 = {str_3: str_13}
    str_15 = {str_0: str_10, str_1: str_12, str_2: str_14}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.if_then_else_from_json_schema(str_15, schema_definitions_0)

def test_case_16():
    var_0 = {}
    var_1 = {}
    field_0 = module_0.type_from_json_schema(var_0, var_1)
    any_0 = module_1.Any()
    str_0 = 'type'
    str_1 = 'integer'
    str_2 = {str_0: str_1}
    var_2 = {}
    field_1 = module_0.type_from_json_schema(str_2, var_2)
    bool_0 = False
    integer_0 = module_1.Integer()
    str_3 = 'boolean'
    str_4 = {str_0: str_3}
    var_3 = {}
    field_2 = module_0.type_from_json_schema(str_4, var_3)
    boolean_0 = module_1.Boolean()
    str_5 = 'null'
    str_6 = {str_0: str_5}
    var_4 = {}
    field_3 = module_0.type_from_json_schema(str_6, var_4)
    var_5 = None
    const_0 = module_1.Const(var_5)
    str_7 = [str_5]
    str_8 = {str_0: str_7}
    var_6 = {}
    field_4 = module_0.type_from_json_schema(str_8, var_6)
    const_1 = module_1.Const(var_5)
    str_9 = [str_1]
    str_10 = {str_0: str_9}
    var_7 = {}
    field_5 = module_0.type_from_json_schema(str_10, var_7)
    integer_1 = module_1.Integer()

def test_case_17():
    str_0 = '$ref'
    str_1 = '#/definitions/name'
    str_2 = {str_0: str_1}
    field_0 = module_0.from_json_schema(str_2)
    schema_0 = module_2.Schema()
    var_0 = {}
    field_1 = module_0.from_json_schema(var_0)
    any_0 = module_1.Any()
    str_3 = 'type'
    str_4 = 'number'
    str_5 = {str_3: str_4}
    field_2 = module_0.from_json_schema(str_5)
    number_0 = module_1.Number()
    str_6 = 'minimum'
    float_0 = 1.5
    var_1 = {str_3: str_4, str_6: float_0}
    field_3 = module_0.from_json_schema(var_1)
    number_1 = module_1.Number(minimum=float_0)
    str_7 = 'enum'
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = [int_0, int_1, int_2]
    int_4 = {str_7: int_3}
    field_4 = module_0.from_json_schema(int_4)
    str_8 = 'const'
    int_5 = {str_8: int_0}
    field_5 = module_0.from_json_schema(int_5)
    const_0 = module_1.Const(int_0)
    str_9 = 'allOf'
    str_10 = 'string'
    str_11 = {str_3: str_10}
    str_12 = [str_11]
    str_13 = {str_9: str_12}
    field_6 = module_0.from_json_schema(str_13)
    string_0 = module_1.String()

def test_case_18():
    str_0 = 'type'
    str_1 = 'properties'
    str_2 = 'object'
    str_3 = 'a'
    str_4 = 'b'
    str_5 = 'boolean'
    str_6 = {str_0: str_5}
    str_7 = 'string'
    str_8 = {str_0: str_7}
    str_9 = {str_3: str_6, str_4: str_8}
    str_10 = {str_0: str_2, str_1: str_9}
    field_0 = module_0.from_json_schema(str_10)
    var_0 = module_0.to_json_schema(field_0)
    str_11 = 'pattern'
    str_12 = 'minLength'
    str_13 = 'maxLength'
    str_14 = '^[a-z]{2}$'
    int_0 = 2
    var_1 = {str_0: str_7, str_11: str_14, str_12: int_0, str_13: int_0}
    field_1 = module_0.from_json_schema(var_1)
    var_2 = module_0.to_json_schema(field_1)
    str_15 = 'minimum'
    str_16 = 'maximum'
    str_17 = 'multipleOf'
    str_18 = 'integer'
    int_1 = 5
    int_2 = 10
    var_3 = {str_0: str_18, str_15: int_1, str_16: int_2, str_17: int_0}
    field_2 = module_0.from_json_schema(var_3)
    var_4 = module_0.to_json_schema(field_2)