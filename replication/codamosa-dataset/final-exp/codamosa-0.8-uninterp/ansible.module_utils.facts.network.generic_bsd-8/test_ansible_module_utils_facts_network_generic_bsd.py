# Automatically generated by Pynguin.
import ansible.module_utils.facts.network.generic_bsd as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = "KoXht<HL]?\x0b W'4\\Z:"
    str_1 = 'f{\t25H?vuE.^9(EF%f'
    str_2 = '\n- assert: { that: "ansible_os_family != \'RedHat\'" }\n\n- assert:\n    that:\n      - "\'foo\' in some_command_result.stdout"\n      - number_of_the_counting == 3\n\n- name: After version 2.7 both \'msg\' and \'fail_msg\' can customize failing assertion message\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    fail_msg: "\'my_param\' must be between 0 and 100"\n    success_msg: "\'my_param\' is between 0 and 100"\n\n- name: Please use \'msg\' when ansible version is smaller than 2.7\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    msg: "\'my_param\' must be between 0 and 100"\n\n- name: Use quiet to avoid verbose output\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n 0  quiet: true\n'
    set_0 = {str_2, str_2, str_2, str_2}
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(set_0)
    dict_0 = {}
    var_0 = generic_bsd_ifconfig_network_0.get_options(str_2)
    dict_1 = {str_1: dict_0, generic_bsd_ifconfig_network_0: str_0}
    var_1 = generic_bsd_ifconfig_network_0.detect_type_media(dict_1)

def test_case_2():
    str_0 = 'cm:z-\n,:uHbVqMx\tzb'
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_0)
    var_0 = generic_bsd_ifconfig_network_0.parse_interface_line(str_0)

def test_case_3():
    bool_0 = True
    tuple_0 = (bool_0,)
    str_0 = 'r|8wN1xt07\r|`Nv`qXE-'
    list_0 = [str_0, bool_0]
    dict_0 = {tuple_0: tuple_0, bool_0: str_0, str_0: bool_0, bool_0: list_0}
    float_0 = None
    bool_1 = False
    set_0 = {bool_1}
    list_1 = [set_0, set_0, bool_1]
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(list_1)
    var_0 = generic_bsd_ifconfig_network_0.parse_unknown_line(dict_0, bool_0, float_0)

def test_case_4():
    set_0 = set()
    str_0 = 'ZMsu\x0b0E7lFlbO/B.\x0c|4"'
    bool_0 = False
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(bool_0)
    var_0 = generic_bsd_ifconfig_network_0.merge_default_interface(set_0, str_0, set_0)

def test_case_5():
    str_0 = '\n- assert: { that: "ansible_os_family != \'RedHat\'" }\n\n- assert:\n    that:\n      - "\'foo\' in some_command_result.stdout"\n      - number_of_the_counting == 3\n\n- name: After version 2.7 both \'msg\' and \'fail_msg\' can customize failing assertion message\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    fail_msg: "\'my_param\' must be between 0 and 100"\n    success_msg: "\'my_param\' is between 0 and 100"\n\n- name: Please use \'msg\' when ansible version is smaller t\'an 2.7\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    msg: "\'my_param\' must be between 0 and 100"\n\n- name: Use quiet to avoid verbose output\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    quiet: true\n'
    set_0 = {str_0, str_0, str_0}
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(set_0)
    var_0 = generic_bsd_ifconfig_network_0.get_options(str_0)

def test_case_6():
    bool_0 = None
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = '8qN'
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_0)
    generic_bsd_ifconfig_network_1 = module_0.GenericBsdIfconfigNetwork(dict_0)
    var_0 = generic_bsd_ifconfig_network_0.parse_media_line(str_0, dict_0, dict_0)
    generic_bsd_ifconfig_network_2 = module_0.GenericBsdIfconfigNetwork(dict_0)

def test_case_7():
    bool_0 = None
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = '/proc/1/comm'
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_0)
    str_1 = '8s)otL'
    var_0 = generic_bsd_ifconfig_network_0.parse_media_line(str_1, dict_0, dict_0)

def test_case_8():
    bool_0 = None
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    str_0 = '8qN'
    bytes_0 = b'\x1a\x07\x9dv'
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(dict_0)
    var_0 = generic_bsd_ifconfig_network_0.merge_default_interface(dict_0, str_0, bytes_0)
    var_1 = generic_bsd_ifconfig_network_0.merge_default_interface(dict_0, bytes_0, bytes_0)
    tuple_0 = (bytes_0, dict_0)
    str_1 = 'q'
    var_2 = generic_bsd_ifconfig_network_0.parse_ether_line(tuple_0, dict_0, str_1)

def test_case_9():
    str_0 = 'fake_module'
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_0)
    var_0 = {}
    var_1 = generic_bsd_ifconfig_network_0.detect_type_media(var_0)
    str_1 = 'en0'
    str_2 = 'media'
    str_3 = 'Ethernet'
    str_4 = {str_2: str_3}
    str_5 = {str_1: str_4}
    var_2 = generic_bsd_ifconfig_network_0.detect_type_media(str_5)
    str_6 = 'Ethernet autoselect'
    str_7 = {str_2: str_6}
    str_8 = {str_1: str_7}
    var_3 = generic_bsd_ifconfig_network_0.detect_type_media(str_8)

def test_case_10():
    str_0 = None
    generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_0)
    var_0 = {}
    var_1 = generic_bsd_ifconfig_network_0.detect_type_media(var_0)
    str_1 = 'en0'
    str_2 = 'media'
    str_3 = 'Ethe&ne9|Xt'
    str_4 = {str_2: str_3}
    str_5 = {str_1: str_4}
    var_2 = generic_bsd_ifconfig_network_0.detect_type_media(str_5)
    str_6 = 'Ethernet autoselect'
    str_7 = {str_2: str_6}
    str_8 = {str_1: str_7}
    var_3 = generic_bsd_ifconfig_network_0.detect_type_media(str_8)