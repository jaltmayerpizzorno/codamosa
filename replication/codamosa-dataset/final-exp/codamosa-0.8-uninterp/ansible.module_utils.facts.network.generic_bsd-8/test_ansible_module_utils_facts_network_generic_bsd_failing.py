# Automatically generated by Pynguin.
import ansible.module_utils.facts.network.generic_bsd as module_0

def test_case_0():
    try:
        str_0 = "KNoXWnt<HL]?\x0b W'4\\Z:"
        bool_0 = True
        set_0 = {bool_0}
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(set_0)
        var_0 = generic_bsd_ifconfig_network_0.parse_interface_line(str_0)
        var_1 = generic_bsd_ifconfig_network_0.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "KoXht<HL]?\x0b W'4\\Z:"
        str_1 = 'f{\t25H?vuE.^9(EF%f'
        set_0 = {str_1, str_1, str_1, str_1}
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(set_0)
        dict_0 = {}
        var_0 = generic_bsd_ifconfig_network_0.get_options(str_0)
        var_1 = generic_bsd_ifconfig_network_0.detect_type_media(dict_0)
        var_2 = generic_bsd_ifconfig_network_0.get_default_interfaces(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 795
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(int_0)
        var_0 = generic_bsd_ifconfig_network_0.get_default_interfaces(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'NA'
        bytes_0 = b'V\xe2\xbbi\xf3\xa7\xaa\n\xc3\xe0\xe8N\xb8\xb5\x9e\xc9\xaf'
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(bytes_0)
        float_0 = 382.9823
        list_0 = [str_0, str_0, str_0, str_0]
        generic_bsd_ifconfig_network_1 = module_0.GenericBsdIfconfigNetwork(list_0)
        var_0 = generic_bsd_ifconfig_network_1.parse_unknown_line(str_0, generic_bsd_ifconfig_network_0, float_0)
        bool_0 = True
        bool_1 = True
        generic_bsd_ifconfig_network_2 = module_0.GenericBsdIfconfigNetwork(bool_1)
        generic_bsd_ifconfig_network_3 = module_0.GenericBsdIfconfigNetwork(generic_bsd_ifconfig_network_2)
        var_1 = generic_bsd_ifconfig_network_3.get_interfaces_info(str_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 142
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(int_0)
        bytes_0 = b'n-\x1c\x120\x9b>\rH\xca\xbc\xa1\xc0\xcb\xe1\x880}'
        float_0 = 2155.21
        dict_0 = {generic_bsd_ifconfig_network_0: bytes_0, int_0: float_0}
        float_1 = 2653.887033
        generic_bsd_ifconfig_network_1 = module_0.GenericBsdIfconfigNetwork(float_1)
        str_0 = 'MR\\kp`eGo'
        float_2 = 2.0
        var_0 = generic_bsd_ifconfig_network_1.parse_tunnel_line(str_0, dict_0, float_2)
        var_1 = generic_bsd_ifconfig_network_1.parse_options_line(generic_bsd_ifconfig_network_0, bytes_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "KNoXWht<HL]?\x0b W'4\\Z:"
        str_1 = 'OtherLinux'
        int_0 = 3221
        str_2 = '\n- assert: { that: "ansible_os_family != \'RedHat\'" }\n\n- assert:\n    that:\n      - "\'foo\' in some_command_result.stdout"\n      - number_of_the_counting == 3\n\n- name: After version 2.7 both \'msg\' and \'fail_msg\' can customize failing assertion message\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    fail_msg: "\'my_param\' must be between 0 and 100"\n    success_msg: "\'my_param\' is between 0 and 100"\n\n- name: Please use \'msg\' when ansible version is smaller than 2.7\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    msg: "\'my_param\' must be between 0 and 100"\n\n- name: Use quiet to avoid verbose output\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    quiet: true\n'
        set_0 = {str_2, str_2, str_2, str_2}
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(set_0)
        var_0 = generic_bsd_ifconfig_network_0.parse_nd6_line(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        str_0 = ''
        bytes_0 = b'"\\\x1dk\x7ff}hw"E\xd9tj\xcf\xed\xef'
        str_1 = '/proc/1/comm'
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_1)
        var_0 = generic_bsd_ifconfig_network_0.merge_default_interface(dict_0, str_0, bytes_0)
        str_2 = 'scopeid'
        var_1 = generic_bsd_ifconfig_network_0.parse_media_line(str_2, dict_0, dict_0)
        str_3 = '\n- assert: { that: "ansible_os_family != \'RedHat\'" }\n\n- assert:\n    that:\n      - "\'foo\' in some_command_result.stdout"\n      - numberof_th_counting == 3\n\n- name: Afer version 2.7 both \'msg\' and \'fail_msg\' can customize failing assertion message\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    fail_msg: "\'my_param\' must be between 0 and 100"\n    success_msg: "\'my_param\' is between 0 and 100"\n\n- name: Please use \'msg\' when ansible version is smaller than 2.7\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    msg: "\'my_param\' must be between 0 and 100"\n\n- name: Use quiet to avoid verbose output\n  assert:\n    that:\n      - my_param <= 100\n      - my_param >= 0\n    quiet: true\n'
        set_0 = {str_3, str_3, str_3, str_3}
        generic_bsd_ifconfig_network_1 = module_0.GenericBsdIfconfigNetwork(set_0)
        tuple_0 = ()
        str_4 = 'OmniOS'
        var_2 = generic_bsd_ifconfig_network_1.parse_ether_line(tuple_0, str_4, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '~X#\x0bl15eQaIz'
        int_0 = -1021
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(int_0)
        bool_0 = False
        set_0 = set()
        generic_bsd_ifconfig_network_1 = module_0.GenericBsdIfconfigNetwork(set_0)
        var_0 = generic_bsd_ifconfig_network_1.parse_media_line(str_0, generic_bsd_ifconfig_network_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -2589
        bool_0 = True
        float_0 = -3552.1
        str_0 = 'tlG"\x0c'
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_0)
        var_0 = generic_bsd_ifconfig_network_0.parse_status_line(int_0, bool_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'BrO6X[|t\x0bx.[a^ 0Y2'
        set_0 = set()
        list_0 = None
        int_0 = -537
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(int_0)
        var_0 = generic_bsd_ifconfig_network_0.parse_lladdr_line(str_0, set_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'h\xf3\x01]wlIN'
        str_0 = 'v4'
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_0)
        var_0 = generic_bsd_ifconfig_network_0.parse_inet_line(str_0, bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'explicit_requirement_{name!s}'
        list_0 = [str_0, str_0, str_0]
        bytes_0 = b'hn\xb7\x066\x19\xf39'
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(bytes_0)
        var_0 = generic_bsd_ifconfig_network_0.parse_inet6_line(str_0, list_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'n_yT$B;p)9wgG4M$cv\x0cb'
        float_0 = -132.5262
        str_1 = 'R[I{:7dn8}l+QA37!\tv0'
        float_1 = -1637.1608
        set_0 = set()
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(float_1, set_0)
        generic_bsd_ifconfig_network_1 = module_0.GenericBsdIfconfigNetwork(generic_bsd_ifconfig_network_0)
        var_0 = generic_bsd_ifconfig_network_1.parse_inet_line(str_0, float_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'new'
        int_0 = 6
        str_1 = 'a'
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(int_0, str_1)
        var_0 = generic_bsd_ifconfig_network_0.parse_interface_line(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'uBpe\x0bYpH"0fKKw W'
        float_0 = 1957.3946496115586
        str_1 = 'H'
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(str_1)
        generic_bsd_ifconfig_network_1 = module_0.GenericBsdIfconfigNetwork(float_0)
        var_0 = generic_bsd_ifconfig_network_1.parse_interface_line(str_0)
        str_2 = 'nBG <$,u'
        str_3 = 'OterLinx'
        set_0 = {str_3, str_2, str_2}
        generic_bsd_ifconfig_network_2 = module_0.GenericBsdIfconfigNetwork(str_0)
        str_4 = '\\2L0AWK\t\\Qwd#20?-'
        var_1 = generic_bsd_ifconfig_network_1.parse_inet_line(str_4, float_0, set_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 2323.57055
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(float_0)
        str_0 = '>kb-'
        str_1 = ')'
        dict_0 = {str_1: float_0, generic_bsd_ifconfig_network_0: generic_bsd_ifconfig_network_0}
        var_0 = generic_bsd_ifconfig_network_0.parse_inet6_line(str_0, str_1, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'uBpe\x0bYpH"0fKKw W'
        list_0 = []
        bool_0 = True
        float_0 = 1958.469513
        tuple_0 = (list_0, bool_0, float_0)
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(tuple_0)
        var_0 = generic_bsd_ifconfig_network_0.parse_interface_line(str_0)
        bool_1 = None
        dict_0 = {bool_1: bool_1, bool_1: bool_1, bool_1: bool_1, bool_1: bool_1}
        str_1 = 'qN'
        bytes_0 = b'\x1a\x07\x9dv'
        generic_bsd_ifconfig_network_1 = module_0.GenericBsdIfconfigNetwork(dict_0)
        var_1 = generic_bsd_ifconfig_network_1.merge_default_interface(dict_0, str_1, bytes_0)
        int_0 = -370
        tuple_1 = (int_0,)
        var_2 = generic_bsd_ifconfig_network_0.parse_media_line(str_1, dict_0, dict_0)
        var_3 = generic_bsd_ifconfig_network_1.parse_inet6_line(str_0, tuple_1, dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 0
        str_0 = ''
        var_0 = (int_0, str_0, str_0)
        str_1 = 'type'
        list_0 = [str_1, var_0, str_1]
        bytes_0 = b'\xf9^d\xe2h\xdeJ\xd0\x9c\xd6'
        tuple_0 = ()
        float_0 = 409.639
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(float_0)
        var_1 = generic_bsd_ifconfig_network_0.parse_inet6_line(list_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ';/(#ilwr@P\n'
        str_1 = ':m'
        bool_0 = False
        tuple_0 = (bool_0,)
        list_0 = []
        generic_bsd_ifconfig_network_0 = module_0.GenericBsdIfconfigNetwork(list_0)
        var_0 = generic_bsd_ifconfig_network_0.parse_inet6_line(str_0, str_1, tuple_0)
    except BaseException:
        pass