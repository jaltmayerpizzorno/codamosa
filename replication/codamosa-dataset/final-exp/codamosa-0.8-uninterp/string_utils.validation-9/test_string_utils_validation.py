# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'll2C2])Yr='
    bool_0 = module_0.is_isbn_10(str_0)

def test_case_2():
    str_0 = '97831\x0b2498580'
    bool_0 = module_0.is_isbn(str_0)
    bool_1 = module_0.is_credit_card(str_0)

def test_case_3():
    str_0 = 'Bs4KJ\n$]BpBL#8Hxf0f\x0b'
    bool_0 = module_0.is_isbn(str_0)

def test_case_4():
    bool_0 = False
    bool_1 = module_0.is_full_string(bool_0)

def test_case_5():
    bool_0 = True
    bool_1 = module_0.is_string(bool_0)
    str_0 = '2wi1PK6 m]k^eOjy|9g6'
    bool_2 = module_0.is_integer(str_0)

def test_case_6():
    str_0 = 's[fBP9{5DJU='
    bool_0 = module_0.is_decimal(str_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    str_1 = 'S&R\\/N=`'
    bool_1 = module_0.is_snake_case(str_0, str_1)
    bool_2 = i_s_b_n_checker_0.is_isbn_10()
    bool_3 = i_s_b_n_checker_0.is_isbn_13()
    bool_4 = module_0.is_json(i_s_b_n_checker_0)
    bool_5 = i_s_b_n_checker_0.is_isbn_13()
    bool_6 = i_s_b_n_checker_0.is_isbn_10()
    bool_7 = i_s_b_n_checker_0.is_isbn_13()

def test_case_7():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_url(str_0)
    bool_1 = module_0.is_email(str_0)
    bool_2 = module_0.is_email(bool_1)

def test_case_8():
    str_0 = 'my.email@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_url(bool_0)
    str_1 = 'http://âœªdf.ws/123'
    bool_2 = module_0.is_url(bool_1)
    str_2 = 'http://userid:password@example.com:8080'
    str_3 = 'k'
    str_4 = '4g%@<?(ya6'
    list_0 = [str_1, str_3, str_4, str_4]
    bool_3 = module_0.is_url(str_2, list_0)
    bool_4 = module_0.is_url(bool_0)

def test_case_9():
    bool_0 = False
    bool_1 = module_0.is_pangram(bool_0)
    str_0 = 'm,jSG'
    bool_2 = module_0.is_isbn(str_0)
    bool_3 = module_0.is_ip(bool_0)
    bool_4 = module_0.is_full_string(bool_0)
    bool_5 = module_0.is_slug(bool_1)
    bool_6 = module_0.is_email(bool_0)
    bool_7 = module_0.is_isogram(bool_4)
    bool_8 = module_0.is_palindrome(bool_0, bool_7, bool_4)
    bool_9 = module_0.is_url(bool_7)

def test_case_10():
    str_0 = '4444444444444448'
    bool_0 = module_0.is_email(str_0)

def test_case_11():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip_v4(str_0)
    bool_1 = module_0.is_email(str_0)
    bool_2 = module_0.is_email(bool_1)

def test_case_12():
    str_0 = '4444444444444448'
    bool_0 = module_0.is_credit_card(str_0)

def test_case_13():
    str_0 = '0.0.0.0'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = ''
    bool_1 = module_0.is_ip_v4(str_1)
    str_2 = '256.0.0.0'
    bool_2 = module_0.is_ip_v4(str_2)
    bool_3 = module_0.is_credit_card(bool_2)
    bool_4 = module_0.is_credit_card(bool_1)

def test_case_14():
    str_0 = '4111111111111111'
    str_1 = 'VISA'
    bool_0 = module_0.is_credit_card(str_0, str_1)
    str_2 = '4222222222222'
    bool_1 = module_0.is_credit_card(str_2, str_1)
    str_3 = '5555555555554444'
    str_4 = 'MASTERCARD'
    bool_2 = module_0.is_credit_card(str_3, str_4)
    str_5 = '01g85>{7[6!uU9'
    bool_3 = module_0.is_ip_v4(str_5)
    bool_4 = module_0.is_ip_v4(str_2)
    bool_5 = module_0.is_ip_v4(str_3)

def test_case_15():
    str_0 = 'H'
    bool_0 = module_0.is_camel_case(str_0)

def test_case_16():
    str_0 = '+_@|?2rOe\\ xzx#!~'
    bool_0 = True
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_0)
    bool_1 = module_0.is_snake_case(i_s_b_n_checker_0)

def test_case_17():
    int_0 = 321
    bool_0 = module_0.is_json(int_0)
    bool_1 = module_0.is_slug(int_0)

def test_case_18():
    str_0 = 'start'
    bool_0 = module_0.is_uuid(str_0)

def test_case_19():
    str_0 = 'a"b(c)d,e:f;g<h>i[j\\k]l@example.com'
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_ip_v4(str_0)

def test_case_20():
    str_0 = '2001:db8:85a3:0000:0000:8a2e:370:7334'
    bool_0 = module_0.is_ip(str_0)
    bool_1 = module_0.is_ip(str_0)
    str_1 = '2001:db8:85a3:0000:0000:8a2e:370:?'
    bool_2 = module_0.is_ip(str_1)

def test_case_21():
    str_0 = '0.0.0.0'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = 'M_%@y<EQe".X-NCq'
    bool_1 = module_0.is_ip_v4(str_1)
    bool_2 = module_0.is_email(bool_1)
    bool_3 = module_0.is_palindrome(str_1, bool_2)

def test_case_22():
    str_0 = '0.0.0.0'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = ''
    bool_1 = module_0.is_ip_v4(str_1)
    bool_2 = module_0.is_email(bool_1)
    bool_3 = module_0.is_email(bool_2)
    bool_4 = module_0.is_palindrome(str_1, bool_2)

def test_case_23():
    str_0 = '[1,2,3]'
    bool_0 = module_0.is_json(str_0)
    str_1 = '{"key":"value"}'
    bool_1 = module_0.is_json(str_1)
    str_2 = '{ "key" : "value" }'
    bool_2 = module_0.is_json(str_2)
    float_0 = 4904.011
    bool_3 = module_0.is_url(float_0)
    str_3 = '{nope}'
    bool_4 = module_0.is_pangram(str_3)
    bool_5 = module_0.is_json(str_3)

def test_case_24():
    dict_0 = None
    bool_0 = module_0.is_isogram(dict_0)

def test_case_25():
    str_0 = '2rqj`|({ 9'
    bool_0 = module_0.contains_html(str_0)

def test_case_26():
    str_0 = 'h{aX<^G'
    int_0 = module_0.words_count(str_0)

def test_case_27():
    str_0 = 't!bi"eM2KS?;,=%d'
    bool_0 = module_0.is_isbn_13(str_0)

def test_case_28():
    str_0 = 'I'
    bool_0 = False
    bool_1 = module_0.is_isbn_13(str_0, bool_0)

def test_case_29():
    str_0 = "\n    Check if a string is not empty (it must contains at least one non space character).\n\n    *Examples:*\n\n    >>> is_full_string(None) # returns false\n    >>> is_full_string('') # returns false\n    >>> is_full_string(' ') # returns false\n    >>> is_full_string('hello') # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if not empty, false otherwise.\n    "
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = module_0.is_palindrome(i_s_b_n_checker_0)
    dict_0 = {i_s_b_n_checker_0: str_0}
    bool_1 = module_0.is_camel_case(dict_0)
    str_1 = '\\}EC0\x0c[2[r'
    bool_2 = module_0.is_isogram(str_1)
    str_2 = '(E+50 r&JNzkFnjKwIx'
    bool_3 = False
    bool_4 = module_0.is_isbn_13(str_2, bool_3)
    int_0 = module_0.words_count(str_1)
    str_3 = 'uuid'
    str_4 = 'ed9p\\'
    bool_5 = i_s_b_n_checker_0.is_isbn_13()
    list_0 = [str_3, str_4, str_3, str_2]
    bool_6 = module_0.is_url(int_0, list_0)
    bool_7 = module_0.is_url(str_1, list_0)

def test_case_30():
    tuple_0 = ()
    bool_0 = module_0.is_full_string(tuple_0)
    bool_1 = module_0.is_camel_case(tuple_0)
    dict_0 = {}
    bool_2 = module_0.is_uuid(dict_0)
    str_0 = "\n    Removes tab indentation from multi line strings (inspired by analogous Scala function).\n\n    *Example:*\n\n    >>> strip_margin('''\n    >>>                 line 1\n    >>>                 line 2\n    >>>                 line 3\n    >>> ''')\n    >>> # returns:\n    >>> '''\n    >>> line 1\n    >>> line 2\n    >>> line 3\n    >>> '''\n\n    :param input_string: String to format\n    :type input_string: str\n    :return: A string without left margins\n    "
    bool_3 = module_0.is_isbn(str_0)
    str_1 = 'is_isbn'
    bool_4 = module_0.is_ip_v6(str_1)
    str_2 = 'EH9IEj$|'
    bool_5 = module_0.contains_html(str_2)
    bool_6 = module_0.is_isbn(str_1)
    str_3 = '\n    Convert the given number/string into a roman number.\n\n    The passed input must represents a positive integer in the range 1-3999 (inclusive).\n\n    Why this limit? You may be wondering:\n\n    1. zero is forbidden since there is no related representation in roman numbers\n    2. the upper bound 3999 is due to the limitation in the ascii charset    (the higher quantity sign displayable in ascii is "M" which is equal to 1000, therefore based on    roman numbers rules we can use 3 times M to reach 3000 but we can\'t go any further in thousands without    special "boxed chars").\n\n    *Examples:*\n\n    >>> roman_encode(37) # returns \'XXXVIII\'\n    >>> roman_encode(\'2020\') # returns \'MMXX\'\n\n    :param input_number: An integer or a string to be converted.\n    :type input_number: Union[str, int]\n    :return: Roman number string.\n    '
    bool_7 = module_0.is_email(str_3)
    bool_8 = module_0.is_string(bool_0)
    bool_9 = module_0.is_decimal(str_1)
    str_4 = "W)YaQ'$(?-3v"
    bool_10 = module_0.is_isogram(str_4)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_4)
    bool_11 = i_s_b_n_checker_0.is_isbn_10()
    bool_12 = module_0.is_snake_case(str_1, str_3)
    bool_13 = module_0.is_url(str_1)
    bool_14 = module_0.is_ip_v4(bool_13)
    bool_15 = module_0.is_slug(i_s_b_n_checker_0)
    bool_16 = module_0.is_string(bool_6)
    bool_17 = i_s_b_n_checker_0.is_isbn_10()
    bool_18 = i_s_b_n_checker_0.is_isbn_10()
    str_5 = 'words_count'
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_5)
    str_6 = '_\x0ctM).<L3xrn'
    bool_19 = module_0.is_decimal(str_6)
    bool_20 = i_s_b_n_checker_1.is_isbn_10()
    bool_21 = i_s_b_n_checker_1.is_isbn_10()

def test_case_31():
    i_s_b_n_checker_0 = None
    bool_0 = module_0.is_camel_case(i_s_b_n_checker_0)

def test_case_32():
    str_0 = 'Wo[Z`R]3iD+vZ'
    bool_0 = module_0.is_json(str_0)
    bool_1 = True
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_1)
    bool_2 = i_s_b_n_checker_0.is_isbn_10()

def test_case_33():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip_v4(str_0)
    bool_1 = module_0.is_email(str_0)
    bool_2 = module_0.is_number(str_0)
    bool_3 = module_0.is_ip_v6(bool_2)
    str_1 = '\tUMn)7@Ki'
    bool_4 = module_0.is_isbn(str_1, bool_3)
    str_2 = '\n    Converts a string into a "slug" using provided separator.\n    The returned string has the following properties:\n\n    - it has no spaces\n    - all letters are in lower case\n    - all punctuation signs and non alphanumeric chars are removed\n    - words are divided using provided separator\n    - all chars are encoded as ascii (by using `asciify()`)\n    - is safe for URL\n\n    *Examples:*\n\n    >>> slugify(\'Top 10 Reasons To Love Dogs!!!\') # returns: \'top-10-reasons-to-love-dogs\'\n    >>> slugify(\'MÃ¶nstÃ©r MÃ¤gnÃ«t\') # returns \'monster-magnet\'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign used to join string tokens (default to "-").\n    :type separator: str\n    :return: Slug string\n    '
    bool_5 = False
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2, bool_5)
    bool_6 = True
    bool_7 = True
    bool_8 = module_0.is_palindrome(str_2, bool_7)
    bool_9 = module_0.is_ip(bool_6)

def test_case_34():
    str_0 = 'a"b(c)d,e:f;g<h>i[j\\k]l@example.com'
    bool_0 = module_0.is_email(str_0)

def test_case_35():
    str_0 = '0.0.0.0'
    bool_0 = module_0.is_ip_v4(str_0)
    bool_1 = module_0.is_ip_v4(str_0)
    str_1 = '256.0.0.0'
    bool_2 = module_0.is_email(bool_1)
    bool_3 = module_0.is_isbn(str_1)
    str_2 = 'slugify'
    bool_4 = None
    bool_5 = module_0.is_slug(str_2, str_0)
    bool_6 = module_0.is_palindrome(bool_4)
    bool_7 = module_0.is_ip(bool_0)

def test_case_36():
    str_0 = '0.0.0.0'
    bool_0 = module_0.is_ip_v4(str_0)
    bool_1 = module_0.is_email(str_0)
    str_1 = "uO^<'3"
    bool_2 = module_0.is_number(str_1)
    bool_3 = module_0.is_ip_v6(bool_2)
    str_2 = '\tUMn)7@Ki'
    bool_4 = module_0.is_isbn(str_2)
    str_3 = "T8rJvb(W\x0b:GyFfQ%'b"
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_3)
    bool_5 = module_0.is_palindrome(str_0)

def test_case_37():
    str_0 = 'SGa+8.Y)_Ak27'
    str_1 = 'O=\n@ONt'
    dict_0 = {str_0: str_1, str_0: str_0}
    bool_0 = module_0.is_url(dict_0)
    int_0 = module_0.words_count(str_1)
    bytes_0 = b'\xde>\x08\xe2Q\xb0\xbc\xbb\x1fv~\xf4'
    bool_1 = module_0.is_ip_v6(bytes_0)
    bool_2 = module_0.is_email(str_0)
    bool_3 = module_0.is_integer(str_0)
    complex_0 = None
    str_2 = '+*\ts/\\?u-n^Gq\nf=i'
    list_0 = [str_0, str_2]
    bool_4 = module_0.is_url(int_0, list_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1, bool_0)
    str_3 = ';>NTX!6/+~'
    list_1 = [str_3, str_3, str_3, str_3]
    bool_5 = module_0.is_slug(dict_0, str_1)
    bool_6 = module_0.is_url(complex_0, list_1)
    bool_7 = True
    bool_8 = module_0.is_email(str_1)
    bool_9 = i_s_b_n_checker_0.is_isbn_13()
    bool_10 = module_0.is_email(bool_6)
    bool_11 = module_0.is_ip_v4(bool_4)
    bool_12 = module_0.contains_html(str_0)
    str_4 = '1o)\n]a)`$NrFrq}kB!'
    bool_13 = module_0.is_number(str_3)
    bool_14 = module_0.is_ip_v6(list_0)
    bool_15 = module_0.is_isbn(str_0, bool_5)
    bool_16 = module_0.is_camel_case(str_4)
    float_0 = -1378.8
    bool_17 = False
    bool_18 = True
    bool_19 = module_0.is_palindrome(float_0, bool_17, bool_18)
    bool_20 = module_0.is_palindrome(str_2, bool_12, bool_7)

def test_case_38():
    str_0 = '@gmail.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = '.@gmail.com'
    bool_1 = module_0.is_email(str_1)
    str_2 = 'a..b@gmail.com'
    bool_2 = module_0.is_email(str_2)
    str_3 = 'john.smith@gmail.'
    bool_3 = module_0.is_email(str_3)
    str_4 = 'john.smith.@gmail.com'
    bool_4 = module_0.is_json(str_0)
    bool_5 = module_0.is_json(bool_2)
    bool_6 = module_0.is_json(str_4)

def test_case_39():
    str_0 = "!#$%&'*+-/=?^_`{}|~@example.org"
    bool_0 = module_0.is_email(str_0)
    str_1 = '"()<>[]:,;@\\"!#$%&\'-/=?^_`{}| ~.a"@example.org'
    bool_1 = module_0.is_email(str_1)
    str_2 = '[1, 2, 3]'
    bool_2 = module_0.is_json(str_2)

def test_case_40():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = 'nope'
    bool_1 = module_0.is_ip_v4(str_1)
    str_2 = '255.200.100.999'
    bool_2 = module_0.is_ip_v4(str_2)

def test_case_41():
    str_0 = '{"name": "Peter"}'
    bool_0 = module_0.is_json(str_0)
    str_1 = 'info@example. com '
    bool_1 = module_0.is_email(str_0)
    bool_2 = module_0.is_email(str_1)
    str_2 = '"info@example.com"@example.com'
    bool_3 = module_0.is_email(str_0)
    bool_4 = module_0.is_email(str_2)
    str_3 = '"info@example.com" @example.com'
    bool_5 = module_0.is_email(bool_1)
    bool_6 = module_0.is_email(str_3)
    bool_7 = module_0.is_email(bool_1)

def test_case_42():
    str_0 = '9780312498580'
    bool_0 = module_0.is_isbn(str_0)
    str_1 = '1506715214'
    bool_1 = module_0.is_isbn(str_1)

def test_case_43():
    str_0 = '{"name": "hello"}'
    bool_0 = module_0.is_json(str_0)
    bool_1 = module_0.is_ip(str_0)

def test_case_44():
    str_0 = '{"name": "Peter"}'
    bool_0 = module_0.is_json(str_0)
    str_1 = '{nope}'
    bool_1 = module_0.is_json(str_1)
    bool_2 = module_0.is_json(str_0)

def test_case_45():
    str_0 = '123'
    bool_0 = module_0.is_integer(str_0)
    str_1 = '-123'
    bool_1 = module_0.is_integer(str_1)
    str_2 = '0'
    bool_2 = module_0.is_integer(str_2)
    str_3 = '-0'
    bool_3 = module_0.is_integer(str_3)
    str_4 = '+0'
    bool_4 = module_0.is_integer(str_4)
    str_5 = '+123'
    bool_5 = module_0.is_integer(str_5)
    str_6 = '{'
    bool_6 = module_0.is_json(str_0)
    bool_7 = module_0.is_json(str_6)

def test_case_46():
    str_0 = '@gmail.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = '.@gmail.com'
    bool_1 = module_0.is_email(str_1)
    str_2 = 'a..b@gmail.com'
    bool_2 = module_0.is_email(str_2)
    str_3 = 'john.smith@gmail.'
    bool_3 = module_0.is_email(str_3)
    str_4 = 'john.smith.@gmail.com'
    bool_4 = module_0.is_email(str_4)
    bool_5 = module_0.is_json(str_0)
    bool_6 = module_0.is_json(str_4)

def test_case_47():
    str_0 = '9780312498580'
    bool_0 = module_0.is_isbn(str_0)
    str_1 = '1506715214'
    bool_1 = module_0.is_email(str_1)