# Automatically generated by Pynguin.
import typesystem.fields as module_0
import decimal as module_1

def test_case_0():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        any_0 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = '"M'
        field_0 = module_0.Field(allow_null=bool_0)
        any_0 = field_0.serialize(bool_0)
        field_1 = module_0.Field()
        dict_0 = {str_0: field_1, str_0: field_1, str_0: field_1}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=bool_0)
        any_1 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(boolean_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        string_0 = module_0.String(min_length=int_0)
        any_0 = string_0.validate(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        string_0 = module_0.String(allow_blank=bool_0)
        date_time_0 = module_0.DateTime()
        any_0 = string_0.validate(date_time_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 364.3805116305068
        number_0 = module_0.Number(exclusive_maximum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 375.49612652460485
        number_0 = module_0.Number(exclusive_minimum=float_0, exclusive_maximum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = None
        string_0 = module_0.String(pattern=bytes_0)
        any_0 = string_0.serialize(string_0)
        choice_0 = module_0.Choice()
        float_0 = -2176.28
        decimal_0 = module_0.Decimal(exclusive_maximum=float_0)
        any_1 = decimal_0.serialize(choice_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(str_0)
        str_1 = [str_0, str_0, str_0]
        choice_0 = module_0.Choice(choices=str_1)
        float_0 = -2989.0
        number_0 = module_0.Number(exclusive_maximum=float_0, precision=str_1)
        any_1 = choice_0.validate(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(choice_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        string_0 = module_0.String(allow_blank=bool_0)
        none_type_0 = None
        int_0 = 1664
        object_0 = module_0.Object(pattern_properties=none_type_0, max_properties=int_0)
        any_0 = object_0.validate(object_0, strict=bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        array_0 = module_0.Array(bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        array_0 = module_0.Array()
        any_0 = array_0.validate(array_0)
    except BaseException:
        pass

def test_case_13():
    try:
        choice_0 = None
        array_0 = module_0.Array()
        any_0 = array_0.validate(choice_0)
    except BaseException:
        pass

def test_case_14():
    try:
        date_time_0 = module_0.DateTime()
        bytes_0 = b'+\x10\xafnt\xe5v\xb1\x9f\xa3\xa1<J6\x05\x12'
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -1155.0
        str_0 = '* RB^1`@5(MLnT~|(5ey'
        any_0 = module_0.Any(description=str_0, default=str_0)
        any_1 = any_0.validate(float_0)
        dict_0 = {}
        number_0 = module_0.Number(maximum=float_0, precision=str_0, **dict_0)
        any_2 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        number_0 = None
        text_0 = module_0.Text()
        const_0 = module_0.Const(text_0)
        any_0 = const_0.validate(number_0)
    except BaseException:
        pass

def test_case_17():
    try:
        choice_0 = None
        array_0 = module_0.Array()
        str_0 = '&\nk<U]vf>'
        field_0 = module_0.Field(description=str_0, default=array_0)
        bool_0 = True
        field_1 = module_0.Field(default=choice_0, allow_null=bool_0)
        union_0 = field_1.__or__(field_0)
        any_0 = union_0.validate(array_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 364.6641353890635
        number_0 = module_0.Number(minimum=float_0, maximum=float_0)
        any_0 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_19():
    try:
        set_0 = None
        array_0 = module_0.Array()
        any_0 = array_0.serialize(array_0)
        time_0 = module_0.Time()
        str_0 = None
        string_0 = module_0.String(format=str_0)
        date_time_0 = module_0.DateTime()
        dict_0 = {}
        choice_0 = module_0.Choice(**dict_0)
        validation_result_0 = choice_0.validate_or_error(set_0)
        list_0 = [time_0, date_time_0, validation_result_0]
        decimal_0 = module_1.Decimal()
        number_0 = module_0.Number(exclusive_maximum=list_0, multiple_of=decimal_0, **dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        field_0 = module_0.Field(allow_null=bool_0)
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        float_0 = 475.7
        decimal_0 = module_0.Decimal(exclusive_minimum=union_0, exclusive_maximum=float_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = -2971.897
        bool_0 = False
        str_0 = 'number'
        bool_1 = True
        boolean_0 = module_0.Boolean(description=str_0, allow_null=bool_1)
        any_0 = boolean_0.validate(float_0, strict=bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        field_0 = module_0.Field()
        int_0 = 1664
        bytes_0 = b'\x1c\xf7\xda\x1c\xfbR7'
        object_0 = module_0.Object(max_properties=int_0, required=bytes_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = True
        str_0 = '?Y'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=bool_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        array_0 = module_0.Array()
        str_0 = 'Cannot convert regular expression with non-standard flags to JSON schema: '
        field_0 = module_0.Field(title=str_0)
        union_0 = field_0.__or__(field_0)
        int_0 = 3430
        array_1 = module_0.Array(field_0, int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = {}
        int_0 = -447
        number_0 = module_0.Number(multiple_of=int_0)
        bool_0 = True
        any_0 = number_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_26():
    try:
        string_0 = module_0.String()
        bool_0 = True
        object_0 = module_0.Object(properties=string_0, additional_properties=bool_0)
        str_0 = ''
        boolean_0 = module_0.Boolean(description=str_0, allow_null=bool_0)
        any_0 = boolean_0.validate(bool_0)
        str_1 = {string_0: string_0, str_0: str_0, bool_0: str_0, string_0: string_0}
        any_1 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = False
        bool_1 = True
        int_0 = 828
        string_0 = module_0.String(allow_blank=bool_1, max_length=int_0, min_length=int_0)
        int_1 = 1664
        object_0 = module_0.Object(additional_properties=bool_1, min_properties=int_1, max_properties=int_1)
        str_0 = None
        field_0 = module_0.Field(description=str_0, default=bool_1, allow_null=bool_0)
    except BaseException:
        pass

def test_case_28():
    try:
        string_0 = module_0.String()
        number_0 = module_0.Number()
        var_0 = [string_0, number_0]
        union_0 = module_0.Union(var_0)
        bool_0 = True
        any_0 = union_0.validate(bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        any_0 = None
        int_0 = 1111
        object_0 = module_0.Object(max_properties=int_0)
        any_1 = object_0.validate(any_0)
    except BaseException:
        pass

def test_case_30():
    try:
        decimal_0 = module_1.Decimal()
        int_0 = 524
        float_0 = module_0.Float(maximum=decimal_0, exclusive_minimum=int_0)
        bool_0 = False
        object_0 = module_0.Object(additional_properties=bool_0, min_properties=int_0)
        str_0 = None
        any_0 = module_0.Any(title=str_0, default=bool_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '6t!-+|Q)w1n'
        string_0 = module_0.String(pattern=str_0, format=str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        boolean_0 = module_0.Boolean()
        str_0 = 'QT_b=1r6w'
        str_1 = [str_0, str_0, str_0]
        choice_0 = module_0.Choice(choices=str_1)
        validation_result_0 = choice_0.validate_or_error(str_0)
        bool_0 = True
        string_0 = module_0.String(trim_whitespace=bool_0, pattern=str_1)
    except BaseException:
        pass

def test_case_33():
    try:
        float_0 = -185.0
        number_0 = module_0.Number(exclusive_maximum=float_0)
        number_1 = module_0.Number(maximum=number_0, exclusive_minimum=float_0, exclusive_maximum=float_0, multiple_of=float_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 1642
        float_0 = -2800.84
        number_0 = module_0.Number(multiple_of=int_0)
        number_1 = module_0.Number(maximum=float_0, exclusive_minimum=float_0)
        any_0 = number_1.validate(int_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bool_0 = True
        bool_1 = True
        int_0 = -478
        var_0 = None
        dict_0 = {}
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_1, max_length=int_0, pattern=var_0, format=dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = -8
        str_0 = 'E}'
        field_0 = module_0.Field(description=str_0, default=str_0)
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        string_0 = module_0.String(max_length=int_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = ''
        choice_0 = module_0.Choice(choices=str_0)
        bool_0 = False
        string_0 = module_0.String(trim_whitespace=bool_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_38():
    try:
        complex_0 = None
        str_0 = 'wB3d!'
        boolean_0 = module_0.Boolean(title=str_0)
        any_0 = boolean_0.validate(complex_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = None
        date_0 = module_0.Date()
        float_0 = -116.0
        decimal_0 = module_0.Decimal(minimum=float_0, maximum=float_0, exclusive_maximum=float_0, precision=str_0)
        any_0 = decimal_0.serialize(str_0)
        bool_0 = True
        boolean_0 = module_0.Boolean()
        any_1 = boolean_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_40():
    try:
        bool_0 = False
        str_0 = ' is an invJlid keyword{arg$menR for '
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=bool_0)
        any_0 = object_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bool_0 = False
        str_0 = '\tz'
        string_0 = module_0.String(pattern=str_0)
        any_0 = string_0.serialize(str_0)
        any_1 = string_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'ltVOiv1bm'
        date_time_0 = module_0.DateTime()
        bool_0 = None
        string_0 = module_0.String(allow_blank=bool_0, format=str_0)
        const_0 = module_0.Const(bool_0)
        any_0 = const_0.validate(bool_0)
        any_1 = string_0.validate(bool_0)
    except BaseException:
        pass

def test_case_43():
    try:
        date_0 = module_0.Date()
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        date_1 = module_0.Date()
        bool_0 = field_0.has_default()
        int_0 = 5
        bool_1 = True
        array_0 = module_0.Array()
        str_0 = 'xeIPY,FNy\x0b+iJ'
        str_1 = ''
        str_2 = 'ZriG8N(+~oLDV#8'
        bool_2 = True
        field_1 = module_0.Field(default=bool_1, allow_null=bool_2)
        dict_0 = {str_0: field_0, str_1: field_0, str_2: field_0, str_2: field_1}
        list_0 = []
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_1, property_names=field_1, min_properties=int_0, max_properties=int_0, required=list_0)
        any_0 = object_0.validate(int_0)
    except BaseException:
        pass

def test_case_44():
    try:
        dict_0 = {}
        text_0 = module_0.Text(**dict_0)
        integer_0 = module_0.Integer(minimum=text_0)
    except BaseException:
        pass

def test_case_45():
    try:
        int_0 = None
        number_0 = module_0.Number(exclusive_maximum=int_0, multiple_of=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_46():
    try:
        string_0 = module_0.String()
        str_0 = '?Y'
        int_0 = 1664
        field_0 = None
        str_1 = 'VG}v'
        dict_0 = {str_0: field_0, str_1: field_0, str_1: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, property_names=field_0, min_properties=int_0, max_properties=int_0)
    except BaseException:
        pass

def test_case_47():
    try:
        int_0 = -4
        dict_0 = {}
        date_0 = module_0.Date(**dict_0)
        str_0 = 'V:&5ionX'
        field_0 = module_0.Field(description=str_0, default=int_0)
        bool_0 = True
        array_0 = module_0.Array(field_0, field_0, int_0, bool_0)
        any_0 = array_0.serialize(date_0)
    except BaseException:
        pass

def test_case_48():
    try:
        set_0 = None
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        any_0 = union_0.validate(set_0)
    except BaseException:
        pass

def test_case_49():
    try:
        bytes_0 = b'\xca\x82n%U/a0'
        str_0 = '`:;'
        field_0 = module_0.Field(title=str_0)
        int_0 = 3
        array_0 = module_0.Array(field_0, field_0, int_0, int_0)
        any_0 = array_0.serialize(bytes_0)
        str_1 = 'k*\rWX\x0cA'
        field_1 = module_0.Field(title=str_1)
        str_2 = 'max_length'
        dict_0 = {str_2: bytes_0, str_2: str_1, str_2: str_2}
        array_1 = module_0.Array(bytes_0, field_1, **dict_0)
    except BaseException:
        pass

def test_case_50():
    try:
        list_0 = []
        str_0 = '=\rgIG'
        string_0 = module_0.String(min_length=list_0, format=str_0)
    except BaseException:
        pass

def test_case_51():
    try:
        choice_0 = module_0.Choice()
        list_0 = []
        union_0 = module_0.Union(list_0)
        any_0 = union_0.validate(choice_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'QT_b=1r6w'
        str_1 = [str_0, str_0, str_0]
        bool_0 = True
        list_0 = []
        decimal_0 = module_1.Decimal(*list_0)
        boolean_0 = module_0.Boolean(title=str_0, default=decimal_0)
        any_0 = boolean_0.validate(str_1, strict=bool_0)
    except BaseException:
        pass

def test_case_53():
    try:
        choice_0 = module_0.Choice()
        bool_0 = True
        decimal_0 = module_0.Decimal()
        const_0 = module_0.Const(choice_0)
        object_0 = module_0.Object(additional_properties=bool_0, property_names=decimal_0, min_properties=const_0)
    except BaseException:
        pass

def test_case_54():
    try:
        field_0 = module_0.Field()
        str_0 = None
        str_1 = '$SCA`*Diu^|~4O| W'
        str_2 = '7V_?d{%\x0c/P|'
        dict_0 = {str_0: field_0, str_1: field_0, str_2: field_0}
        float_0 = module_0.Float()
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, required=float_0)
    except BaseException:
        pass

def test_case_55():
    try:
        bool_0 = True
        field_0 = module_0.Field(default=bool_0)
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        int_0 = -2024
        time_0 = module_0.Time()
        string_0 = module_0.String(trim_whitespace=bool_0, max_length=union_0, min_length=int_0, format=time_0)
    except BaseException:
        pass

def test_case_56():
    try:
        bool_0 = False
        const_0 = module_0.Const(bool_0)
        any_0 = const_0.validate(bool_0)
        number_0 = module_0.Number()
        int_0 = 2779
        str_0 = '?Y'
        str_1 = '53[E6%eAq]rX8L_$>8'
        str_2 = '+{G/=Q'
        field_0 = module_0.Field(description=str_2)
        str_3 = None
        field_1 = module_0.Field(title=str_0)
        dict_0 = {str_1: field_0, str_3: field_1}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=bool_0, property_names=field_1, max_properties=int_0)
    except BaseException:
        pass

def test_case_57():
    try:
        string_0 = module_0.String()
        bool_0 = False
        object_0 = module_0.Object(properties=string_0, additional_properties=bool_0)
        str_0 = '>}&'
        str_1 = {str_0: str_0, bool_0: bool_0}
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_58():
    try:
        bool_0 = False
        const_0 = module_0.Const(bool_0)
        date_0 = module_0.Date()
        boolean_0 = module_0.Boolean()
        array_0 = module_0.Array(const_0, date_0, boolean_0)
    except BaseException:
        pass

def test_case_59():
    try:
        set_0 = None
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(set_0)
    except BaseException:
        pass

def test_case_60():
    try:
        time_0 = module_0.Time()
        bool_0 = True
        list_0 = []
        array_0 = module_0.Array(list_0, bool_0, bool_0)
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_61():
    try:
        bool_0 = True
        str_0 = 'vUG]*A]N8^|'
        field_0 = None
        str_1 = 'Must be an array.'
        dict_0 = {str_0: field_0, str_0: field_0, str_1: field_0, str_0: field_0}
        optional_0 = None
        object_0 = module_0.Object(properties=dict_0, additional_properties=bool_0, property_names=field_0, required=optional_0)
    except BaseException:
        pass

def test_case_62():
    try:
        float_0 = -1155.0
        str_0 = '* RB^1`@5(MLnT~|(5ey'
        dict_0 = {}
        number_0 = module_0.Number(maximum=float_0, precision=str_0, **dict_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_63():
    try:
        str_0 = 'Y6IUC'
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        field_1 = module_0.Field(title=str_0, default=str_0)
        union_0 = field_1.__or__(field_0)
        number_0 = module_0.Number(precision=str_0, multiple_of=union_0)
    except BaseException:
        pass

def test_case_64():
    try:
        bool_0 = False
        str_0 = '"M'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=bool_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_65():
    try:
        int_0 = 1664
        dict_0 = {}
        object_0 = module_0.Object(min_properties=int_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_66():
    try:
        str_0 = 'oqxk=i.'
        field_0 = module_0.Field(title=str_0)
        float_0 = -5597.0942
        decimal_0 = module_0.Decimal(exclusive_minimum=float_0)
        object_0 = module_0.Object(max_properties=decimal_0)
    except BaseException:
        pass

def test_case_67():
    try:
        date_0 = module_0.Date()
        int_0 = -501
        dict_0 = {}
        object_0 = module_0.Object(min_properties=int_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_68():
    try:
        float_0 = 364.810342014237
        int_0 = 1497
        str_0 = ''
        number_0 = module_0.Number(minimum=int_0, exclusive_minimum=float_0, exclusive_maximum=int_0, precision=str_0, multiple_of=float_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_69():
    try:
        int_0 = 1665
        str_0 = ' is an Xnvalid keyword argument,for '
        number_0 = module_0.Number(exclusive_minimum=int_0, precision=str_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_70():
    try:
        str_0 = 'QVM'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(property_names=field_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_71():
    try:
        str_0 = 'QT_b=1r6w'
        choice_0 = module_0.Choice(choices=str_0)
        validation_result_0 = choice_0.validate_or_error(str_0)
    except BaseException:
        pass

def test_case_72():
    try:
        int_0 = -2221
        number_0 = module_0.Number(minimum=int_0, exclusive_maximum=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_73():
    try:
        str_0 = ''
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        int_0 = 637
        object_0 = module_0.Object(properties=dict_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_74():
    try:
        float_0 = 364.6641353890635
        number_0 = module_0.Number(minimum=float_0, maximum=float_0)
        object_0 = module_0.Object(additional_properties=float_0)
    except BaseException:
        pass

def test_case_75():
    try:
        int_0 = 1664
        dict_0 = {}
        bool_0 = None
        integer_0 = module_0.Integer(precision=bool_0)
        object_0 = module_0.Object(additional_properties=bool_0)
        float_0 = 357.2
        int_1 = None
        number_0 = module_0.Number(minimum=int_0, maximum=int_1, exclusive_maximum=int_0, multiple_of=float_0, **dict_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_76():
    try:
        float_0 = 688.4773
        int_0 = -1140
        number_0 = module_0.Number(minimum=float_0, multiple_of=int_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_77():
    try:
        str_0 = 'max_items'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        list_0 = [field_0, field_0]
        list_1 = [field_0, field_0, field_0, field_0]
        union_0 = module_0.Union(list_1)
        array_0 = module_0.Array(list_0, union_0)
        any_0 = array_0.validate(dict_0)
    except BaseException:
        pass

def test_case_78():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        array_0 = module_0.Array(list_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_79():
    try:
        dict_0 = {}
        bool_0 = True
        bool_1 = True
        object_0 = module_0.Object(additional_properties=bool_0, min_properties=bool_1)
        any_0 = object_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_80():
    try:
        dict_0 = {}
        bool_0 = None
        const_0 = module_0.Const(bool_0)
        any_0 = const_0.validate(dict_0)
    except BaseException:
        pass

def test_case_81():
    try:
        int_0 = 1642
        float_0 = -2800.84
        bool_0 = False
        float_1 = 3967.9008
        number_0 = module_0.Number(exclusive_maximum=int_0, precision=float_1)
        any_0 = number_0.validate(float_0, strict=bool_0)
    except BaseException:
        pass

def test_case_82():
    try:
        time_0 = module_0.Time()
        bool_0 = True
        list_0 = []
        array_0 = module_0.Array(list_0, bool_0, bool_0)
        any_0 = array_0.serialize(bool_0)
    except BaseException:
        pass

def test_case_83():
    try:
        int_0 = 10
        var_0 = lambda : int_0
        field_0 = module_0.Field(default=var_0)
        field_1 = module_0.Field(default=int_0)
        any_0 = field_0.get_default_value()
    except BaseException:
        pass

def test_case_84():
    try:
        str_0 = ' s an invJlid keyworda$mnR for '
        field_0 = module_0.Field()
        int_0 = 458
        string_0 = module_0.String(max_length=int_0, min_length=int_0, pattern=str_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_85():
    try:
        str_0 = '-}Q$'
        bool_0 = True
        int_0 = -4302
        string_0 = module_0.String(trim_whitespace=bool_0, max_length=int_0, min_length=int_0, pattern=str_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_86():
    try:
        int_0 = 10
        str_0 = '.1'
        number_0 = module_0.Number(minimum=int_0, maximum=int_0, precision=str_0)
        int_1 = 11
        any_0 = number_0.validate(int_1)
    except BaseException:
        pass

def test_case_87():
    try:
        string_0 = module_0.String()
        number_0 = module_0.Number()
        var_0 = [string_0, string_0, number_0, number_0]
        union_0 = module_0.Union(var_0)
        str_0 = "m+]-y\x0c>tw\\?B>T'"
        str_1 = 'z2P{"\\TVr4~Z&sEaC'
        field_0 = module_0.Field(title=str_0, description=str_1, default=var_0)
        int_0 = 1
        bool_0 = True
        array_0 = module_0.Array(field_0, field_0, int_0, int_0, bool_0)
        any_0 = array_0.validate(var_0)
    except BaseException:
        pass

def test_case_88():
    try:
        string_0 = module_0.String()
        number_0 = module_0.Number()
        var_0 = [string_0, number_0]
        union_0 = module_0.Union(var_0)
        any_0 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_89():
    try:
        int_0 = 42
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        integer_1 = [integer_0]
        union_0 = module_0.Union(integer_1)
        float_0 = -3060.93
        any_0 = union_0.validate(float_0)
    except BaseException:
        pass

def test_case_90():
    try:
        string_0 = module_0.String()
        number_0 = module_0.Number()
        float_0 = -3999.6412
        number_1 = module_0.Number(maximum=float_0, multiple_of=float_0)
        any_0 = number_1.validate(float_0)
    except BaseException:
        pass

def test_case_91():
    try:
        string_0 = module_0.String()
        number_0 = module_0.Number()
        var_0 = [string_0, string_0, number_0, number_0]
        array_0 = module_0.Array()
        list_0 = [var_0]
        choice_0 = module_0.Choice(choices=list_0)
    except BaseException:
        pass

def test_case_92():
    try:
        string_0 = module_0.String()
        number_0 = module_0.Number()
        var_0 = [string_0, string_0, number_0, number_0]
        str_0 = 'KMM}\n<FkY|@Bs+JBE'
        bool_0 = True
        field_0 = module_0.Field(description=str_0, default=str_0, allow_null=bool_0)
        int_0 = -1685
        array_0 = module_0.Array(field_0, number_0, int_0, bool_0)
        any_0 = array_0.validate(var_0)
    except BaseException:
        pass

def test_case_93():
    try:
        int_0 = 553
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        integer_1 = [integer_0, integer_0]
        union_0 = module_0.Union(integer_1)
        field_0 = module_0.Field()
        bool_0 = True
        array_0 = module_0.Array(field_0, bool_0)
        any_0 = array_0.validate(integer_1)
    except BaseException:
        pass

def test_case_94():
    try:
        string_0 = module_0.String()
        number_0 = module_0.Number()
        var_0 = [string_0, string_0, number_0, number_0]
        any_0 = string_0.serialize(var_0)
        bool_0 = False
        any_1 = module_0.Any(default=number_0, allow_null=bool_0)
        array_0 = module_0.Array(string_0)
        any_2 = array_0.validate(any_0)
    except BaseException:
        pass

def test_case_95():
    try:
        choice_0 = None
        date_0 = module_0.Date()
        str_0 = '*\t'
        bool_0 = True
        boolean_0 = module_0.Boolean(description=str_0, allow_null=bool_0)
        any_0 = boolean_0.validate(choice_0)
        array_0 = module_0.Array()
        any_1 = array_0.validate(choice_0)
    except BaseException:
        pass

def test_case_96():
    try:
        str_0 = 'time'
        string_0 = module_0.String(format=str_0)
        str_1 = '12:34:56'
        any_0 = string_0.serialize(str_1)
    except BaseException:
        pass

def test_case_97():
    try:
        str_0 = ''
        string_0 = module_0.String()
        field_0 = module_0.Field(title=str_0)
        any_0 = field_0.serialize(str_0)
        bool_0 = field_0.has_default()
        string_1 = {str_0: string_0}
        bool_1 = False
        object_0 = module_0.Object(properties=string_1, additional_properties=bool_1)
        any_1 = object_0.validate(string_1)
    except BaseException:
        pass

def test_case_98():
    try:
        choice_0 = None
        bool_0 = True
        str_0 = '6t!-+|Q)w1n'
        string_0 = module_0.String(allow_blank=bool_0, format=str_0)
        any_0 = string_0.validate(choice_0, strict=bool_0)
    except BaseException:
        pass

def test_case_99():
    try:
        string_0 = module_0.String()
        bool_0 = True
        object_0 = module_0.Object(properties=string_0, additional_properties=bool_0)
        str_0 = ''
        str_1 = {string_0: string_0, str_0: str_0, bool_0: str_0}
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_100():
    try:
        int_0 = 55
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        integer_1 = [integer_0]
        union_0 = module_0.Union(integer_1)
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        array_0 = module_0.Array(field_0, bool_0, int_0)
        any_0 = array_0.validate(integer_1, strict=bool_0)
    except BaseException:
        pass