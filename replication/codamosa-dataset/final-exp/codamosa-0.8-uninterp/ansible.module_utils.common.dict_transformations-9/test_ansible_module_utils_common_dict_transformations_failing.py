# Automatically generated by Pynguin.
import ansible.module_utils.common.dict_transformations as module_0

def test_case_0():
    try:
        bytes_0 = b'*\x98xJ\x8e\xbe\xbb\xa3l1b\xc9l9'
        var_0 = module_0.camel_dict_to_snake_dict(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 3431.0
        str_0 = 'EXEC: %s'
        dict_0 = {}
        bool_0 = False
        var_0 = module_0.snake_dict_to_camel_dict(dict_0, bool_0)
        var_1 = module_0.recursive_diff(float_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "W'Bn#o<g"
        dict_0 = {str_0: str_0}
        var_0 = module_0.dict_merge(str_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        str_0 = '\x0cT|96eq.QWPc\t>ZK'
        list_0 = [dict_0, str_0, str_0, str_0]
        str_1 = 'Load the role argument spec data from the source file.\n\n        :param str role_name: The name of the role for which we want the argspec data.\n        :param str collection_path: Path to the collection containing the role. This\n            will be None for standard roles.\n        :param str role_path: Path to the standard role. This will be None for\n            collection roles.\n\n        We support two files containing the role arg spec data: either meta/main.yml\n        or meta/argument_spec.yml. The argument_spec.yml file will take precedence\n        over the meta/main.yml file, if it exists. Data is NOT combined between the\n        two files.\n\n        :returns: A dict of all data underneath the ``argument_specs`` top-level YAML\n            key in the argspec data file. Empty dict is returned if there is no data.\n        '
        var_0 = module_0.camel_dict_to_snake_dict(dict_0, list_0, str_1)
        float_0 = 5126.0
        var_1 = module_0.dict_merge(float_0, dict_0)
        var_2 = module_0.dict_merge(str_1, str_1)
        dict_1 = {var_2: str_0, str_0: str_0, var_2: var_2}
        list_1 = [dict_1]
        var_3 = module_0.snake_dict_to_camel_dict(list_1)
        var_4 = module_0.recursive_diff(dict_1, list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 3430.772393
        str_0 = 'EXEC: %s'
        var_0 = module_0.recursive_diff(float_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '(8I#+I.'
        bytes_0 = b'\xd7&\xf5\x8a'
        dict_0 = {bytes_0: bytes_0, str_0: str_0, bytes_0: str_0}
        var_0 = module_0.recursive_diff(dict_0, dict_0)
        str_1 = '}/2D@\x0b[h(as(V9|'
        bytes_1 = b'\xdd\x80'
        var_1 = module_0.snake_dict_to_camel_dict(bytes_1)
        var_2 = module_0.camel_dict_to_snake_dict(str_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = {}
        var_1 = {}
        var_2 = module_0.recursive_diff(var_0, var_1)
        int_0 = 1
        int_1 = 3
        str_0 = '2'
        var_3 = {int_0: int_0, str_0: str_0, int_1: int_1}
        str_1 = '0'
        var_4 = {int_0: int_0, str_0: str_1, var_2: var_1, int_1: int_1}
        var_5 = module_0.recursive_diff(var_3, var_4)
        str_2 = 'c'
        var_6 = module_0.recursive_diff(str_2, var_3)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = {}
        var_1 = {}
        dict_0 = None
        var_2 = module_0.snake_dict_to_camel_dict(dict_0)
        int_0 = 4
        str_0 = '[>`Os=3N4x\x0c(q4'
        dict_1 = {str_0: str_0, str_0: var_0, int_0: str_0}
        str_1 = '0'
        var_3 = {int_0: int_0, str_1: str_1, str_0: var_1, int_0: int_0}
        var_4 = module_0.recursive_diff(dict_1, var_3)
        var_5 = module_0.snake_dict_to_camel_dict(dict_1)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = {}
        dict_0 = {}
        var_1 = module_0.camel_dict_to_snake_dict(dict_0)
        int_0 = 1
        var_2 = module_0.snake_dict_to_camel_dict(dict_0)
        int_1 = 656000
        str_0 = '[>`Os=3N4x\x0c(q4'
        dict_1 = {str_0: str_0, str_0: var_0, int_1: str_0}
        str_1 = '9'
        var_3 = {int_0: int_0, str_0: str_1, str_0: int_1, int_1: int_1}
        var_4 = module_0.recursive_diff(dict_1, var_3)
        var_5 = module_0.snake_dict_to_camel_dict(dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = {}
        dict_0 = {}
        var_1 = module_0.camel_dict_to_snake_dict(dict_0)
        int_0 = 1
        var_2 = module_0.snake_dict_to_camel_dict(dict_0)
        int_1 = 656000
        str_0 = '[>`Os=3N4x\x0c(q4'
        dict_1 = {str_0: str_0, str_0: var_0, int_1: str_0}
        str_1 = '9'
        var_3 = {int_0: int_0, str_0: str_1, str_0: dict_1, int_1: int_1}
        var_4 = module_0.recursive_diff(dict_1, var_3)
        var_5 = module_0.snake_dict_to_camel_dict(dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '_;Hz\ndDb*AXg'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = '\tLkjv#)'
        var_0 = module_0.camel_dict_to_snake_dict(dict_0, str_1)
        str_2 = 'xP(<\rJ0t-L'
        bool_0 = False
        list_0 = [str_2, bool_0]
        bytes_0 = b'<W'
        var_1 = module_0.recursive_diff(list_0, bytes_0)
    except BaseException:
        pass