# Automatically generated by Pynguin.
import ansible.executor.task_result as module_0

def test_case_0():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        float_0 = -3971.28
        task_result_0 = module_0.TaskResult(bool_0, list_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'l_A1hd9QBo"h+t '
        set_0 = set()
        dict_0 = {str_0: set_0, str_0: set_0}
        task_result_0 = module_0.TaskResult(str_0, set_0, dict_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = None
        str_0 = 'kD\nH\nQ '
        dict_0 = {str_0: str_0, bool_0: bool_0}
        task_result_0 = module_0.TaskResult(dict_0, str_0, dict_0)
        var_0 = task_result_0.is_changed()
        var_1 = task_result_0.needs_debugger(str_0)
        var_2 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 0.001
        str_0 = '3++>C0(pkODy'
        str_1 = 'skip_if_unavailable'
        set_0 = {str_1}
        task_result_0 = module_0.TaskResult(float_0, str_0, str_1, set_0)
        var_0 = task_result_0.is_failed()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'l_A1hd9QBo"h+t '
        set_0 = {str_0}
        dict_0 = {str_0: set_0, str_0: set_0}
        task_result_0 = module_0.TaskResult(str_0, set_0, dict_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'd'
        bool_0 = True
        str_1 = 'prepared'
        task_result_0 = module_0.TaskResult(str_0, bool_0, str_1)
        var_0 = task_result_0.is_skipped()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        str_0 = 'kD\nH\nQ '
        dict_0 = {str_0: str_0, bool_0: bool_0}
        task_result_0 = module_0.TaskResult(dict_0, str_0, dict_0)
        var_0 = task_result_0.needs_debugger(str_0)
        var_1 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        str_1 = 'fuiled'
        str_2 = 'failed_when_result'
        bool_0 = True
        bool_1 = {str_1: bool_0, str_2: bool_0}
        bool_2 = {str_1: bool_0, str_2: bool_1}
        task_result_0 = module_0.TaskResult(str_0, str_0, bool_2)
        var_0 = task_result_0.is_failed()
        var_1 = task_result_0.needs_debugger()
        var_2 = task_result_0.clean_copy()
    except BaseException:
        pass