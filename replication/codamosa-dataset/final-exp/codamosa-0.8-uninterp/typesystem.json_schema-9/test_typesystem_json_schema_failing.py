# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2

def test_case_0():
    try:
        bytes_0 = b'T\xcd\xa4\x8f\xdc?\x13'
        dict_0 = {bytes_0: bytes_0}
        str_0 = None
        bool_0 = False
        schema_definitions_0 = None
        field_0 = module_0.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ')'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.ref_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.all_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        bool_0 = True
        field_0 = module_0.from_json_schema(bool_0)
        dict_0 = {tuple_0: tuple_0}
        tuple_1 = module_0.get_valid_types(dict_0)
        schema_definitions_0 = None
        field_1 = module_0.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -1855.46664
        dict_0 = {float_0: float_0, float_0: float_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -654.492129
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        field_1 = module_0.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'f!]7]>)\\sW.v'
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'f\x1dA\xbe1\xa4\x95\xedm\xf5]\xb3\xb7'
        var_0 = module_0.to_json_schema(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        field_0 = module_2.Field(default=dict_0)
        dict_1 = module_0.get_standard_properties(field_0)
        var_0 = module_0.to_json_schema(field_0, dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        field_0 = module_0.from_json_schema(bool_0)
        dict_0 = module_0.get_standard_properties(field_0)
        var_0 = module_0.to_json_schema(field_0)
        dict_1 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_1 = module_0.enum_from_json_schema(dict_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = ()
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: tuple_0}
        list_0 = []
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0)
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        dict_1 = module_0.get_standard_properties(field_0)
        field_1 = module_0.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tuple_0 = ()
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: tuple_0}
        str_0 = '\t_Ufc$n\\I'
        str_1 = "K'^o]CGX'"
        dict_1 = {str_0: dict_0, str_1: bool_0, str_0: str_1}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        var_0 = module_0.to_json_schema(schema_definitions_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'type'
        str_1 = 'const'
        str_2 = 'boolean'
        bool_0 = True
        bool_1 = [bool_0, bool_0]
        var_0 = {str_0: str_2, str_1: bool_1, str_1: bool_0}
        field_0 = module_0.from_json_schema(var_0)
        var_1 = type(field_0)
        var_2 = len(bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'allOf'
        str_1 = 'type'
        str_2 = {str_1: str_1}
        str_3 = 'minLength'
        int_0 = 1
        int_1 = {str_3: int_0}
        var_0 = [str_2, int_1]
        var_1 = {str_0: var_0}
        field_0 = module_0.from_json_schema(var_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'oneOf'
        str_1 = 'maximum'
        str_2 = 'const'
        str_3 = 'integer'
        int_0 = 5
        int_1 = 10
        var_0 = {str_3: str_3, str_3: int_0, str_1: int_1, str_2: int_0}
        int_2 = 8
        var_1 = {str_3: str_3, str_0: int_2, str_1: int_1, str_2: int_2}
        var_2 = [var_0, var_1, str_3]
        var_3 = {str_0: var_2}
        var_4 = None
        field_0 = module_0.one_of_from_json_schema(var_3, var_4)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'if'
        str_1 = {str_0: str_0}
        str_2 = {str_0: str_1}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.if_then_else_from_json_schema(str_2, schema_definitions_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'type'
        str_1 = 'enum'
        str_2 = 'const'
        str_3 = 'boolean'
        bool_0 = True
        bool_1 = [bool_0, bool_0]
        var_0 = {str_0: str_3, str_1: bool_1, str_2: bool_0}
        field_0 = module_0.from_json_schema(var_0)
        var_1 = type(field_0)
        var_2 = field_0.constraints
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '$ref'
        str_1 = {str_0: str_0, str_0: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        boolean_0 = module_2.Boolean()
        field_0 = module_0.ref_from_json_schema(str_1, schema_definitions_0)
    except BaseException:
        pass