# Automatically generated by Pynguin.
import tornado.netutil as module_0
import ssl as module_1
import socket as module_2

def test_case_0():
    try:
        int_0 = -3986
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Return a `.Future` that resolves after the given number of seconds.\n\n    When used with ``yield`` in a coroutine, this is a non-blocking\n    analogue to `time.sleep` (which should not be used in coroutines\n    because it is blocking)::\n\n        yield gen.sleep(0.5)\n\n    Note that calling this function on its own does nothing; you must\n    wait on the `.Future` it returns (usually by yielding it).\n\n    .. versionadded:: 4.1\n    '
        socket_0 = module_0.bind_unix_socket(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "r|B'"
        socket_0 = module_0.bind_unix_socket(str_0)
        s_s_l_context_0 = None
        callable_0 = module_0.add_accept_handler(socket_0, s_s_l_context_0)
    except BaseException:
        pass

def test_case_3():
    try:
        executor_resolver_0 = module_0.ExecutorResolver()
    except BaseException:
        pass

def test_case_4():
    try:
        resolver_0 = module_0.Resolver()
        str_0 = ''
        socket_0 = module_0.bind_unix_socket(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        resolver_0 = module_0.Resolver()
        resolver_0.close()
        int_0 = 163
        dict_0 = {}
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        blocking_resolver_0 = module_0.BlockingResolver()
    except BaseException:
        pass

def test_case_7():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_8():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        int_0 = 1508
        str_0 = 'Handles the login for the Google user, returning an access token.\n\n        The result is a dictionary containing an ``access_token`` field\n        ([among others](https://developers.google.com/identity/protocols/OAuth2WebServer#handlingtheresponse)).\n        Unlike other ``get_authenticated_user`` methods in this package,\n        this method does not return any additional information about the user.\n        The returned access token can be used with `OAuth2Mixin.oauth2_request`\n        to request additional information (perhaps from\n        ``https://www.googleapis.com/oauth2/v2/userinfo``)\n\n        Example usage:\n\n        .. testcode::\n\n            class GoogleOAuth2LoginHandler(tornado.web.RequestHandler,\n                                           tornado.auth.GoogleOAuth2Mixin):\n                async def get(self):\n                    if self.get_argument(\'code\', False):\n                        access = await self.get_authenticated_user(\n                            redirect_uri=\'http://your.site.com/auth/google\',\n                            code=self.get_argument(\'code\'))\n                        user = await self.oauth2_request(\n                            "https://www.googleapis.com/oauth2/v1/userinfo",\n                            access_token=access["access_token"])\n                        # Save the user and access token with\n                        # e.g. set_secure_cookie.\n                    else:\n                        self.authorize_redirect(\n                            redirect_uri=\'http://your.site.com/auth/google\',\n                            client_id=self.settings[\'google_oauth\'][\'key\'],\n                            scope=[\'profile\', \'email\'],\n                            response_type=\'code\',\n                            extra_params={\'approval_prompt\': \'auto\'})\n\n        .. testoutput::\n           :hide:\n\n        .. versionchanged:: 6.0\n\n           The ``callback`` argument was removed. Use the returned awaitable object instead.\n        '
        list_0 = module_0.bind_sockets(int_0, str_0, int_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        bool_0 = module_0.is_valid_ip(str_0)
        dict_0 = None
        threaded_resolver_0 = module_0.ThreadedResolver(**dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\ruT\tM\x0boHg5yqw+'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 292
        str_0 = ''
        bool_0 = module_0.is_valid_ip(str_0)
        int_1 = -1590
        list_0 = module_0.bind_sockets(int_1, str_0, int_0, int_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Handles the login for the Google user, returning an access token.\n\n        The result is a dictionary containing an ``access_token`` field\n        ([among others](https://developers.google.com/identity/protocols/OAuth2WebServer#handlingtheresponse)).\n        Unlike other ``get_authenticated_user`` methods in this package,\n        this method does not return any additional information about the user.\n        The returned access token can be used with `OAuth2Mixin.oauth2_request`\n        to request additional information (perhaps from\n        ``https://www.googleapis.com/oauth2/v2/userinfo``)\n\n        Example usage:\n\n        .. testcode::\n\n            class GoogleOAuth2LoginHandler(tornado.web.RequestHandler,\n                                           tornado.auth.GoogleOAuth2Mixin):\n                async def get(self):\n                    if self.get_argument(\'code\', False):\n                        access = await self.get_authenticated_user(\n                            redirect_uri=\'http://your.site.com/auth/google\',\n                            code=self.get_argument(\'code\'))\n                        user = await self.oauth2_request(\n                            "https://www.googleapis.com/oauth2/v1/userinfo",\n                            access_token=access["access_token"])\n                        # Save the user and access token with\n                        # e.g. set_secure_cookie.\n                    else:\n                        self.authorize_redirect(\n                            redirect_uri=\'http://your.site.com/auth/google\',\n                            client_id=self.settings[\'google_oauth\'][\'key\'],\n                            scope=[\'profile\', \'email\'],\n                            response_type=\'code\',\n                            extra_params={\'approval_prompt\': \'auto\'})\n\n        .. testoutput::\n           :hide:\n\n        .. versionchanged:: 6.0\n\n           The ``callback`` argument was removed. Use the returned awaitable object instead.\n        '
        bool_0 = module_0.is_valid_ip(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1811
        list_0 = module_0.bind_sockets(int_0)
        list_1 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        s_s_l_context_0 = None
        s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
    except BaseException:
        pass

def test_case_16():
    try:
        socket_0 = None
        s_s_l_context_0 = module_1.SSLContext()
        str_0 = '\t-}A`\x0cL-@AufW/Hs\nP5F'
        dict_0 = {}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0, str_0, **dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 2874
        list_0 = [int_0, int_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '_IV v@f'
        int_0 = 1144
        address_family_0 = module_2.AddressFamily.AF_ASH
        str_1 = 'V\\[fDhR&Pza"!d:x'
        list_0 = [str_1, str_1]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        awaitable_0 = override_resolver_0.resolve(str_0, int_0, address_family_0)
    except BaseException:
        pass

def test_case_19():
    try:
        resolver_0 = module_0.Resolver()
        resolver_0.close()
        int_0 = 163
        resolver_0.close()
        dict_0 = {}
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
        s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
        int_1 = -1439
        str_0 = 'Tv\x0c\rsGT'
        socket_0 = module_0.bind_unix_socket(str_0)
        str_1 = 'ntOEJpn~j.2u.r0w1'
        address_family_0 = module_2.AddressFamily.AF_NETBEUI
        bool_0 = True
        list_0 = module_0.bind_sockets(int_0, str_1, address_family_0, int_1, int_1, bool_0)
    except BaseException:
        pass