# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.json_schema as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3

def test_case_0():
    pass

def test_case_1():
    dict_0 = {}
    schema_definitions_0 = module_0.SchemaDefinitions()
    field_0 = module_1.from_json_schema(dict_0)

def test_case_2():
    bool_0 = False
    field_0 = module_1.from_json_schema(bool_0)

def test_case_3():
    dict_0 = {}
    schema_definitions_0 = module_0.SchemaDefinitions()
    field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)

def test_case_4():
    str_0 = 'enum'
    int_0 = 1
    int_1 = 2
    int_2 = [int_0, int_1]
    int_3 = {str_0: int_2}
    schema_definitions_0 = module_0.SchemaDefinitions()
    field_0 = module_1.enum_from_json_schema(int_3, schema_definitions_0)
    field_1 = module_1.enum_from_json_schema(int_3, schema_definitions_0)
    var_0 = field_1.choices

def test_case_5():
    string_0 = module_2.String()
    str_0 = 'not'
    str_1 = 'type'
    str_2 = 'string'
    str_3 = {str_1: str_2}
    str_4 = {str_0: str_3}
    field_0 = module_1.from_json_schema(str_4)

def test_case_6():
    any_0 = module_2.Any()
    if_then_else_0 = module_3.IfThenElse(any_0, any_0)
    var_0 = module_1.to_json_schema(if_then_else_0)

def test_case_7():
    str_0 = 'oneOf'
    str_1 = {str_0: str_0}
    field_0 = module_1.from_json_schema(str_1)
    int_0 = 1
    var_0 = field_0.one_of[int_0]

def test_case_8():
    bool_0 = False
    schema_definitions_0 = module_0.SchemaDefinitions()
    field_0 = module_1.from_json_schema(bool_0, schema_definitions_0)
    var_0 = module_1.to_json_schema(field_0)
    dict_0 = module_1.get_standard_properties(field_0)

def test_case_9():
    dict_0 = {}
    schema_definitions_0 = module_0.SchemaDefinitions()
    field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
    var_0 = module_1.to_json_schema(field_0)

def test_case_10():
    str_0 = 'allOf'
    str_1 = 'type'
    str_2 = ',('
    str_3 = []
    int_0 = 4
    var_0 = {str_1: str_3, str_2: int_0}
    var_1 = [var_0]
    var_2 = {str_0: var_1}
    field_0 = module_1.all_of_from_json_schema(var_2, var_0)
    var_3 = print(field_0)

def test_case_11():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'type'
    str_4 = 'string'
    str_5 = {str_3: str_4}
    str_6 = 'array'
    str_7 = {str_3: str_6}
    str_8 = {str_0: str_5, str_1: str_7, str_2: str_5}
    var_0 = None
    field_0 = module_1.if_then_else_from_json_schema(str_8, var_0)

def test_case_12():
    str_0 = 'Foo'
    str_1 = 'string'
    field_0 = module_2.Field(description=str_0)
    str_2 = 'Bar'
    field_1 = module_2.Field(description=str_2)
    str_3 = '$id'
    str_4 = 'definitions'
    str_5 = 'https://example.com/root.json'
    str_6 = 'http://json-schema.org/draft-07/schema#'
    str_7 = 'foo'
    str_8 = 'bar'
    str_9 = 'description'
    str_10 = 'type'
    str_11 = {str_9: str_0, str_10: str_1}
    str_12 = {str_9: str_2, str_10: str_1}
    str_13 = {str_7: str_11, str_8: str_12}
    str_14 = {str_3: str_5, str_5: str_6, str_4: str_13}
    field_2 = module_1.from_json_schema(str_14)
    string_0 = module_2.String()

def test_case_13():
    str_0 = 'type'
    str_1 = 'properties'
    str_2 = 'object'
    str_3 = 'name'
    str_4 = 'age'
    str_5 = 'phone'
    str_6 = 'string'
    str_7 = {str_0: str_6}
    str_8 = 'integer'
    str_9 = {str_0: str_8}
    str_10 = 'minLength'
    int_0 = 10
    var_0 = {str_0: str_6, str_10: int_0}
    var_1 = {str_3: str_7, str_4: str_9, str_5: var_0}
    var_2 = {str_0: str_2, str_1: var_1}
    field_0 = module_1.from_json_schema(var_2)

def test_case_14():
    str_0 = 'there'
    string_0 = module_2.String()
    string_1 = {str_0: string_0, str_0: string_0}
    object_0 = module_2.Object(properties=string_1)
    var_0 = module_1.to_json_schema(object_0)

def test_case_15():
    str_0 = 'there'
    string_0 = module_2.String()
    string_1 = module_2.String()
    object_0 = module_2.Object(properties=string_0)
    var_0 = module_1.to_json_schema(object_0)
    string_2 = module_2.String()
    string_3 = module_2.String()
    string_4 = {str_0: string_2, str_0: string_3}
    schema_0 = module_0.Schema()
    var_1 = module_1.to_json_schema(schema_0)

def test_case_16():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'properties'
    str_4 = 'additionalProperties'
    str_5 = 'a'
    str_6 = 'const'
    str_7 = {str_6: str_5}
    str_8 = {str_5: str_7}
    bool_0 = False
    var_0 = {str_3: str_8, str_4: bool_0}
    str_9 = 'b'
    str_10 = {str_6: str_9}
    str_11 = {str_9: str_10}
    var_1 = {str_3: str_11, str_4: bool_0}
    str_12 = 'c'
    str_13 = {str_6: str_12}
    str_14 = {str_12: str_13}
    var_2 = {str_3: str_14, str_4: bool_0}
    var_3 = {str_0: var_0, str_1: var_1, str_2: var_2}
    field_0 = module_1.from_json_schema(var_3)

def test_case_17():
    str_0 = 'type'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    var_0 = None
    field_0 = module_1.type_from_json_schema(str_2, var_0)
    str_3 = 'integer'
    str_4 = {str_0: str_3}
    field_1 = module_1.type_from_json_schema(str_4, var_0)
    str_5 = 'number'
    str_6 = {str_0: str_5}
    field_2 = module_1.type_from_json_schema(str_6, var_0)
    str_7 = 'boolean'
    str_8 = {str_0: str_7}
    field_3 = module_1.type_from_json_schema(str_8, var_0)
    str_9 = 'object'
    str_10 = {str_0: str_9}
    field_4 = module_1.type_from_json_schema(str_10, var_0)
    str_11 = {var_0: str_8, field_4: field_3}
    field_5 = module_1.type_from_json_schema(str_11, var_0)
    str_12 = 'null'
    str_13 = {str_0: str_12}
    field_6 = module_1.type_from_json_schema(str_13, var_0)

def test_case_18():
    str_0 = 'type'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    var_0 = None
    field_0 = module_1.type_from_json_schema(str_2, var_0)
    str_3 = 'integer'
    str_4 = {str_0: str_3}
    field_1 = module_1.type_from_json_schema(str_4, var_0)
    str_5 = 'number'
    str_6 = {str_0: str_5}
    field_2 = module_1.type_from_json_schema(str_6, var_0)
    str_7 = 'boolean'
    str_8 = {str_0: str_7}
    field_3 = module_1.type_from_json_schema(str_8, var_0)
    str_9 = 'object'
    str_10 = {str_0: str_9}
    field_4 = module_1.type_from_json_schema(str_10, var_0)
    str_11 = 'array'
    str_12 = {str_0: str_11}
    field_5 = module_1.type_from_json_schema(str_12, var_0)
    var_1 = module_1.to_json_schema(field_1)

def test_case_19():
    boolean_0 = module_2.Boolean()
    var_0 = module_1.to_json_schema(boolean_0)
    bool_0 = True
    boolean_1 = module_2.Boolean(allow_null=bool_0)
    var_1 = module_1.to_json_schema(boolean_1)
    integer_0 = module_2.Integer()
    schema_definitions_0 = module_0.SchemaDefinitions()

def test_case_20():
    str_0 = 'type'
    str_1 = 'minimum'
    str_2 = 'maximum'
    str_3 = 'number'
    int_0 = 1
    int_1 = 2
    var_0 = {str_0: str_3, str_1: int_0, str_2: int_1}
    bool_0 = False
    float_0 = module_2.Float(minimum=int_0, maximum=int_1)
    field_0 = module_1.from_json_schema(var_0)
    str_4 = 'gUN%\tQVUk.L9'
    any_0 = module_2.Any(title=str_4)
    if_then_else_0 = module_3.IfThenElse(field_0, field_0, field_0)
    var_1 = module_1.to_json_schema(field_0)

def test_case_21():
    str_0 = '\n    Test OneOf creation\n    '
    str_1 = 'oneOf'
    str_2 = 'string'
    dict_0 = {str_0: str_1, str_1: str_2, str_1: str_2}
    tuple_0 = module_1.get_valid_types(dict_0)
    str_3 = {str_1: str_1}
    field_0 = module_1.from_json_schema(str_3)
    var_0 = module_1.to_json_schema(field_0)

def test_case_22():
    bool_0 = True
    field_0 = module_1.from_json_schema(bool_0)
    bool_1 = False
    field_1 = module_1.from_json_schema(bool_1)
    str_0 = '$ref'
    str_1 = '#/definitions/string'
    str_2 = {str_0: str_1}
    field_2 = module_1.from_json_schema(str_2)
    str_3 = 'enum'
    str_4 = 'a'
    str_5 = 'b'
    str_6 = 'c'
    str_7 = [str_4, str_5, str_6]
    str_8 = {str_3: str_7}
    field_3 = module_1.from_json_schema(str_8)
    str_9 = 'pattern'
    str_10 = '(a|b)'
    str_11 = {str_9: str_10}
    field_4 = module_1.from_json_schema(str_11)
    str_12 = 'exclusiveMaximum'
    int_0 = 10
    int_1 = {str_12: int_0}
    field_5 = module_1.from_json_schema(int_1)

def test_case_23():
    var_0 = []
    all_of_0 = module_3.AllOf(var_0)
    var_1 = module_1.to_json_schema(all_of_0)
    any_0 = module_2.Any()
    not_0 = module_3.Not(any_0)
    var_2 = module_1.to_json_schema(not_0)
    any_1 = module_2.Any()
    any_2 = module_2.Any()