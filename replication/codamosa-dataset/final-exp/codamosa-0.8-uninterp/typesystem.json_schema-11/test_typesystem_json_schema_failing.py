# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2

def test_case_0():
    try:
        bool_0 = True
        field_0 = module_0.from_json_schema(bool_0)
        any_0 = field_0.get_default_value()
        str_0 = '(0=Gp~|OBw'
        dict_0 = {str_0: bool_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_1 = module_0.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '$ref'
        str_1 = 'YB'
        str_2 = {str_0: str_1}
        var_0 = {}
        field_0 = module_0.ref_from_json_schema(str_2, var_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 0
        dict_0 = {int_0: int_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.all_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        schema_definitions_0 = None
        field_0 = module_0.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'mb7)/}+NC<5nBpGko'
        var_0 = module_0.to_json_schema(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        schema_definitions_0 = None
        dict_0 = {schema_definitions_0: schema_definitions_0}
        field_0 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'llo'
        field_0 = module_2.Field(title=str_0)
        schema_definitions_0 = module_1.SchemaDefinitions()
        dict_0 = module_0.get_standard_properties(field_0)
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'if'
        str_1 = 'then'
        str_2 = 'else'
        str_3 = 'type'
        str_4 = 'string'
        str_5 = {str_3: str_4}
        str_6 = {str_0: str_5, str_1: str_1, str_2: str_5}
        var_0 = None
        field_0 = module_0.if_then_else_from_json_schema(str_6, var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'anyOf'
        str_1 = 'default'
        str_2 = 'type'
        str_3 = 'pattern'
        str_4 = 'string'
        str_5 = '^[A-Za-z]+$'
        str_6 = {str_2: str_4, str_3: str_5}
        str_7 = 'minimum'
        str_8 = 'maximum'
        str_9 = 'number'
        int_0 = 0
        int_1 = 100
        var_0 = {str_2: str_9, str_7: int_0, str_8: int_1}
        var_1 = [str_6, var_0]
        str_10 = 'test'
        var_2 = {str_0: var_1, str_1: str_10}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.any_of_from_json_schema(var_2, schema_definitions_0)
        any_0 = field_0.validate(str_10)
        int_2 = 10
        any_1 = field_0.validate(int_2)
        str_11 = 'abc'
        any_2 = field_0.validate(str_11)
        str_12 = '10'
        any_3 = field_0.validate(str_12)
        int_3 = -1
        any_4 = field_0.validate(int_3)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '$ref'
        str_1 = '#/definitions/Number'
        str_2 = {str_0: str_1}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.ref_from_json_schema(str_2, schema_definitions_0)
        int_0 = 2
        any_0 = field_0.validate(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'if'
        str_1 = 'then'
        dict_0 = {str_0: str_1, str_0: str_0, str_0: str_0, str_0: str_1}
        str_2 = 'bH3A'
        dict_1 = {str_2: str_0, str_1: dict_0, str_2: str_2}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        field_0 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass