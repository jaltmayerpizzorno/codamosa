# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        str_0 = '/\t\x0b'
        list_0 = [str_0, str_0]
        register_0 = module_0.Register()
        register_0.set_eightbit_call(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        dict_0 = register_2.as_dict()
        register_3 = module_0.Register()
        str_0 = register_3.__call__()
        type_0 = None
        register_3.set_renderfunc(type_0, register_3)
        register_4 = module_0.Register()
        register_5 = register_2.copy()
        type_1 = None
        register_5.set_rgb_call(type_1)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0}
        dict_1 = register_0.as_dict()
        register_0.mute()
        type_0 = None
        bytes_0 = b'5\x80\x11\x03P\xec(gC\xf0'
        register_0.set_renderfunc(type_0, bytes_0)
        register_0.mute()
        str_1 = register_0.__call__(**dict_0)
        int_0 = -610
        list_0 = [int_0, str_0, int_0, int_0]
        bool_0 = False
        register_1 = register_0.copy()
        register_0.set_rgb_call(type_0)
        register_0.set_renderfunc(type_0, bool_0)
        str_2 = register_0.__call__(*list_0)
        type_1 = None
        register_0.set_eightbit_call(type_1)
        register_2 = module_0.Register()
        register_0.mute()
        bool_1 = True
        register_3 = module_0.Register()
        register_3.set_renderfunc(type_1, bool_1)
        var_0 = register_2.as_namedtuple()
        list_1 = [list_0]
        style_0 = module_0.Style()
        style_1 = style_0.__new__(list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        str_0 = 'y_P<UX/T%,V 79tB\rlSc'
        list_0 = [str_0, register_0, str_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_0.mute()
        register_0.mute()
        register_1 = module_0.Register()
        str_0 = 'bkiT+B4U0\n\\~c,u$'
        dict_0 = {str_0: register_0}
        str_1 = register_0.__call__(**dict_0)
        register_2 = register_1.copy()
        register_0.mute()
        var_0 = register_0.as_namedtuple()
        list_0 = [dict_0, register_1]
        style_0 = module_0.Style(*list_0)
        register_3 = module_0.Register()
        callable_0 = None
        register_2.set_renderfunc(register_3, callable_0)
        str_2 = register_2.__call__(**dict_0)
        list_1 = [str_2]
        str_3 = register_3.__call__(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "\nThe Register class: Sty's heart.\n"
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        list_1 = [style_0]
        style_1 = module_0.Style(*list_1)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_1)
    except BaseException:
        pass