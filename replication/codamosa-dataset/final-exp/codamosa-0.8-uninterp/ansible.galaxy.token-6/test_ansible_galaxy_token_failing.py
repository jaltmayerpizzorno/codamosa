# Automatically generated by Pynguin.
import ansible.galaxy.token as module_0

def test_case_0():
    try:
        keycloak_token_0 = module_0.KeycloakToken()
        var_0 = keycloak_token_0.headers()
    except BaseException:
        pass

def test_case_1():
    try:
        galaxy_token_0 = module_0.GalaxyToken()
        basic_auth_token_0 = module_0.BasicAuthToken(galaxy_token_0)
        var_0 = galaxy_token_0.set(basic_auth_token_0)
    except BaseException:
        pass

def test_case_2():
    try:
        galaxy_token_0 = module_0.GalaxyToken()
        var_0 = galaxy_token_0.headers()
        galaxy_token_1 = module_0.GalaxyToken()
        list_0 = [galaxy_token_1, var_0, var_0]
        no_token_sentinel_0 = module_0.NoTokenSentinel(*list_0)
        basic_auth_token_0 = module_0.BasicAuthToken(no_token_sentinel_0)
        var_1 = basic_auth_token_0.headers()
        var_2 = basic_auth_token_0.headers()
        str_0 = 'G<j`)X!ZnQ7a._&\\'
        str_1 = '\n# Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).\n# ansible all -m ansible.builtin.setup --tree /tmp/facts\n\n# Display only facts regarding memory found by ansible on all hosts and output them.\n# ansible all -m ansible.builtin.setup -a \'filter=ansible_*_mb\'\n\n# Display only facts returned by facter.\n# ansible all -m ansible.builtin.setup -a \'filter=facter_*\'\n\n# Collect only facts returned by facter.\n# ansible all -m ansible.builtin.setup -a \'gather_subset=!all,!any,facter\'\n\n- name: Collect only facts returned by facter\n  ansible.builtin.setup:\n    gather_subset:\n      - \'!all\'\n      - \'!any\'\n      - facter\n\n- name: Collect only selected facts\n  ansible.builtin.setup:\n    filter:\n      - \'ansible_distribution\'\n      - \'ansible_machine_id\'\n      - \'ansible_*_mb\'\n\n# Display only facts about certain interfaces.\n# ansible all -m ansible.builtin.setup -a \'filter=ansible_eth[0-2]\'\n\n# Restrict additional gathered facts to network and virtual (includes default minimum facts)\n# ansible all -m ansible.builtin.setup -a \'gather_subset=network,virtual\'\n\n# Collect only network and virtual (excludes default minimum facts)\n# ansible all -m ansible.builtin.setup -a \'gather_subset=!all,!any,network,virtual\'\n\n# Do not call puppet facter or ohai even if present.\n# ansible all -m ansible.builtin.setup -a \'gather_subset=!facter,!ohai\'\n\n# Only collect the default minimum amount of facts:\n# ansible all -m ansible.builtin.setup -a \'gather_subset=!all\'\n\n# Collect no facts, even the default minimum subset of facts:\n# ansible all -m ansible.builtin.setup -a \'gather_subset=!all,!min\'\n\n# Display facts from Windows hosts with custom facts stored in C(C:\\custom_facts).\n# ansible windows -m ansible.builtin.setup -a "fact_path=\'c:\\custom_facts\'"\n\n# Gathers facts for the machines in the dbservers group (a.k.a Delegating facts)\n- hosts: app_servers\n  tasks:\n    - name: Gather facts from db servers\n      ansible.builtin.setup:\n      delegate_to: "{{ item }}"\n      delegate_facts: true\n      loop: "{{ groups[\'dbservers\'] }}"\n'
        dict_0 = {str_0: basic_auth_token_0, str_1: galaxy_token_0}
        var_3 = galaxy_token_0.set(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'hjkfgi4ew4.253423dsfds.23sdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdfsdf'
        str_1 = 'http://example.com'
        bool_0 = True
        str_2 = 'test_client'
        var_0 = str_0 + str_0
        keycloak_token_0 = module_0.KeycloakToken(str_0, str_1, bool_0, str_2)
        var_1 = keycloak_token_0.headers()
    except BaseException:
        pass

def test_case_4():
    try:
        no_token_sentinel_0 = module_0.NoTokenSentinel()
        galaxy_token_0 = module_0.GalaxyToken()
        var_0 = galaxy_token_0.set(no_token_sentinel_0)
        galaxy_token_1 = module_0.GalaxyToken()
        var_1 = galaxy_token_1.get()
        set_0 = {no_token_sentinel_0, galaxy_token_0}
        var_2 = galaxy_token_0.set(set_0)
    except BaseException:
        pass