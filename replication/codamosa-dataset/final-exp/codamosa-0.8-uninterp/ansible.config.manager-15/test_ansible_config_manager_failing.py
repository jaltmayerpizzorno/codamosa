# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        config_manager_0 = None
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.get_config_value(config_manager_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'string'
        config_manager_0 = module_0.ConfigManager(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        set_0 = set()
        var_0 = module_0.get_ini_config_value(bool_0, set_0)
        config_manager_0 = module_0.ConfigManager()
        tuple_0 = ()
        set_1 = {tuple_0, tuple_0, tuple_0, config_manager_0}
        var_1 = module_0.ensure_type(tuple_0, set_1)
    except BaseException:
        pass

def test_case_4():
    try:
        config_manager_0 = module_0.ConfigManager()
        int_0 = None
        float_0 = 3948.94416
        config_manager_1 = module_0.ConfigManager(int_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = None
        bool_1 = True
        set_0 = {bool_0, bool_0}
        list_0 = [bool_1, bool_0]
        dict_0 = {}
        list_1 = [bool_1]
        bytes_0 = b" \xfe\xee'\x857,\xe8m\xa9\xee\xc4A\xa8E"
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(set_0, list_0, dict_0, list_1, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'\x93\x95\xb4\xf0Cq3\xdf\xaf\x01\x00\xbf\x0em\xceb\n\x7f'
        tuple_0 = ()
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.get_config_value(config_manager_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        config_manager_0 = module_0.ConfigManager()
        list_0 = [config_manager_0, config_manager_0, config_manager_0]
        dict_0 = {}
        var_0 = config_manager_0.get_config_value(list_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        config_manager_0 = module_0.ConfigManager(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        config_manager_0 = module_0.ConfigManager()
        list_0 = [config_manager_0, config_manager_0, config_manager_0]
        float_0 = -2509.1
        var_0 = config_manager_0.get_configuration_definition(float_0)
        dict_0 = {}
        var_1 = config_manager_0.get_config_value(list_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'TF'
        int_0 = -2004
        var_0 = config_manager_0.get_configuration_definition(int_0)
        str_1 = None
        str_2 = '5_4M]>a1\nS m0]$'
        str_3 = 'tmppath'
        dict_0 = {str_1: str_0, str_2: str_1, str_3: str_1, str_3: str_1}
        var_1 = config_manager_0.update_config_data(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        complex_0 = None
        var_0 = module_0.get_ini_config_value(complex_0, complex_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        bytes_0 = b'\xb2\xe4\x14\xf8\xdc%r\xb4\xf1\xddYrD&\xe5\x8a'
        var_0 = module_0.get_ini_config_value(bytes_0, bytes_0)
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_config_value(config_manager_0, bytes_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        complex_0 = None
        bool_0 = True
        bool_1 = True
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definitions(complex_0, bool_0, bool_1)
        dict_0 = None
        bytes_0 = b'\xab\x0b\x93.\xa7~\xc4\x84\x7f7'
        set_0 = set()
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(dict_0, bytes_0, set_0)
        list_0 = [set_0, set_0]
        str_0 = '--keep-scm-meta'
        bool_2 = False
        var_2 = config_manager_0.get_configuration_definition(str_0, bool_2)
        var_3 = config_manager_0.get_configuration_definition(list_0, config_manager_0, config_manager_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager(bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 1417.1
        list_0 = [float_0, float_0, float_0, float_0]
        bool_0 = True
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.get_config_value_and_origin(float_0, list_0, bool_0, config_manager_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = None
        set_0 = {bytes_0, bytes_0, bytes_0}
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data(bytes_0, set_0)
    except BaseException:
        pass