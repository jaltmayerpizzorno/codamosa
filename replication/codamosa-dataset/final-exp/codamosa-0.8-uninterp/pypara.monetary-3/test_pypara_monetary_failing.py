# Automatically generated by Pynguin.
import pypara.currencies as module_0
import decimal as module_1
import pypara.monetary as module_2
import datetime as module_3

def test_case_0():
    try:
        str_0 = 'Denar'
        str_1 = '/#&RN"FYAb'
        int_0 = None
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_2.IncompatibleCurrencyError(currency_0, currency_0)
        list_0 = [incompatible_currency_error_0]
        none_money_0 = module_2.NoneMoney(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        none_money_0 = module_2.NoneMoney(**dict_0)
        int_0 = none_money_0.as_integer()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "zh\x0bH;o{'iB|"
        price_0 = None
        float_0 = 5994.71
        none_price_0 = module_2.NonePrice()
        money_0 = none_price_0.times(float_0)
        list_0 = [str_0, price_0, price_0, price_0]
        money_1 = money_0.__mul__(list_0)
        money_2 = money_0.scalar_subtract(price_0)
        dict_0 = {str_0: str_0, str_0: money_2}
        none_price_1 = module_2.NonePrice(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        date_0 = None
        dict_0 = {}
        price_0 = module_2.Price(**dict_0)
        price_1 = price_0.scalar_subtract(date_0)
    except BaseException:
        pass

def test_case_4():
    try:
        decimal_0 = module_1.Decimal()
        date_0 = None
        list_0 = [date_0, date_0, date_0]
        some_price_0 = module_2.SomePrice(*list_0)
        money_0 = some_price_0.times(decimal_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 5994.71
        none_price_0 = module_2.NonePrice()
        money_0 = none_price_0.times(float_0)
        int_0 = none_price_0.as_integer()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        none_price_0 = module_2.NonePrice()
        bool_1 = none_price_0.gt(price_0)
        bool_2 = price_0.__bool__()
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_3 = some_money_0.gt(money_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_0.__le__(price_0)
        money_1 = some_money_0.abs()
        money_2 = money_0.add(money_1)
        str_0 = None
        bool_6 = money_2.__eq__(some_price_0)
        price_1 = none_price_0.negative()
        currency_type_0 = module_0.CurrencyType.METAL
        int_0 = -2147
        decimal_0 = None
        money_3 = some_money_0.positive()
        price_2 = some_price_0.subtract(price_1)
        currency_type_1 = module_0.CurrencyType.CRYPTO
        str_1 = 'dR~A^h*eUPF5/;Ov<'
        int_1 = 4248
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        money_4 = money_2.__sub__(money_2)
        money_5 = some_money_0.divide(currency_type_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        list_1 = [bool_0, bool_0, list_0]
        some_price_0 = module_2.SomePrice(*list_1)
        price_0 = some_price_0.round()
        none_price_0 = module_2.NonePrice()
        var_0 = None
        price_1 = none_price_0.subtract(price_0)
        money_0 = none_price_0.times(var_0)
        bool_1 = none_price_0.gt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        float_0 = price_0.__float__()
        money_1 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_1)
        money_2 = money_1.add(money_1)
        money_3 = money_1.add(money_2)
        var_1 = None
        money_4 = money_1.floor_divide(var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        none_price_0 = module_2.NonePrice()
        price_0 = none_price_0.scalar_subtract(bool_0)
        float_0 = price_0.as_float()
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = None
        none_price_0 = module_2.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        float_0 = price_0.__float__()
    except BaseException:
        pass

def test_case_10():
    try:
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_money_0 = module_2.NoneMoney()
        money_0 = none_money_0.divide(var_0)
        price_0 = module_2.Price()
        none_price_0 = module_2.NonePrice()
        bool_0 = none_price_0.lt(price_0)
    except BaseException:
        pass

def test_case_11():
    try:
        decimal_0 = module_1.Decimal()
        none_price_0 = module_2.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.with_qty(decimal_0)
        float_0 = price_1.__float__()
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        price_0 = module_2.Price(**dict_0)
        none_price_0 = module_2.NonePrice()
        price_1 = none_price_0.positive()
        bool_0 = price_0.__bool__()
        var_0 = None
        list_0 = [var_0, none_price_0, none_price_0]
        none_money_0 = module_2.NoneMoney(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "zh\x0bH;o{'iB|"
        price_0 = None
        float_0 = 5994.71
        none_price_0 = module_2.NonePrice()
        money_0 = none_price_0.times(float_0)
        money_1 = money_0.__sub__(money_0)
        list_0 = [str_0, price_0, price_0, price_0]
        money_2 = money_0.__mul__(list_0)
        dict_0 = {str_0: str_0, str_0: money_0}
        none_price_1 = module_2.NonePrice(**dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ','
        str_1 = "`l7's!^IgK"
        int_0 = -4386
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = module_1.Decimal()
        int_1 = -2399
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_money_0 = module_2.NoneMoney()
        money_0 = none_money_0.with_ccy(currency_0)
        none_money_1 = module_2.NoneMoney()
        money_1 = none_money_1.add(money_0)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        list_0 = [monetary_operation_exception_0, monetary_operation_exception_0]
        none_money_2 = module_2.NoneMoney(*list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        decimal_0 = module_1.Decimal()
        str_0 = 'Ro#Bt"ah.!VG,SOxA\x0c_'
        str_1 = ''
        int_0 = -448
        currency_type_0 = module_0.CurrencyType.MONEY
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        decimal_1 = currency_0.quantize(decimal_0)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        str_2 = 'V:~z9W;.>rn+T_EZ[nRN'
        str_3 = '.9OF'
        str_4 = 'Db"MOkV)b{e\'C`8/'
        dict_0 = {str_2: str_2, str_3: str_4, str_4: str_3}
        bytes_0 = b'\x05\x0bH}&\x13\xc5^e '
        tuple_0 = (monetary_operation_exception_0, dict_0, bytes_0)
        none_money_0 = module_2.NoneMoney()
        money_0 = none_money_0.scalar_subtract(tuple_0)
        money_1 = money_0.with_qty(decimal_1)
        dict_1 = {}
        some_money_0 = module_2.SomeMoney(**dict_1)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        money_1 = money_0.add(money_0)
        bool_1 = money_0.__lt__(money_0)
        str_0 = '\x0c/{*scR"fA"'
        decimal_0 = module_1.Decimal()
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_1 = module_1.Decimal()
        int_0 = -2901
        none_money_0 = module_2.NoneMoney()
        bool_2 = none_money_0.is_equal(bool_0)
        int_1 = -202
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_1)
        money_2 = money_0.__sub__(money_1)
        bool_3 = none_money_0.as_boolean()
        bool_4 = False
        money_3 = money_1.convert(currency_0, bool_4)
    except BaseException:
        pass

def test_case_17():
    try:
        dict_0 = {}
        price_0 = module_2.Price(**dict_0)
        price_1 = price_0.add(price_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 3326
        str_0 = 'ZS5pecZ\x0b;'
        int_1 = None
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = module_1.Decimal()
        int_2 = 8332
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_2)
        none_money_0 = module_2.NoneMoney()
        money_0 = none_money_0.convert(currency_0)
        none_money_1 = module_2.NoneMoney()
        money_1 = none_money_1.add(money_0)
        none_price_0 = module_2.NonePrice()
        money_2 = none_price_0.times(int_0)
        decimal_1 = module_1.Decimal()
        none_price_1 = module_2.NonePrice()
        price_0 = none_price_1.abs()
        price_1 = price_0.with_qty(decimal_1)
        float_0 = price_1.__float__()
    except BaseException:
        pass

def test_case_19():
    try:
        date_0 = None
        dict_0 = {}
        price_0 = module_2.Price(**dict_0)
        none_price_0 = module_2.NonePrice()
        bool_0 = price_0.__bool__()
        currency_0 = None
        price_1 = price_0.convert(currency_0, date_0)
    except BaseException:
        pass

def test_case_20():
    try:
        none_price_0 = module_2.NonePrice()
        bool_0 = none_price_0.is_equal(none_price_0)
        price_0 = none_price_0.positive()
        bool_1 = none_price_0.gte(price_0)
        int_0 = none_price_0.as_integer()
    except BaseException:
        pass

def test_case_21():
    try:
        list_0 = []
        none_money_0 = module_2.NoneMoney()
        money_0 = none_money_0.positive()
        int_0 = -2411
        var_0 = money_0.__round__(int_0)
        none_money_1 = module_2.NoneMoney()
        bool_0 = none_money_1.lt(money_0)
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        dict_0 = {}
        price_0 = module_2.Price(**dict_0)
        price_1 = price_0.abs()
    except BaseException:
        pass

def test_case_23():
    try:
        date_0 = None
        dict_0 = None
        str_0 = 'GOXn+x"V,yf'
        none_money_0 = module_2.NoneMoney()
        money_0 = none_money_0.floor_divide(str_0)
        money_1 = money_0.__neg__()
        none_money_1 = module_2.NoneMoney()
        money_2 = none_money_1.with_dov(date_0)
        money_3 = money_2.negative()
        none_money_2 = module_2.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = None
        none_price_0 = module_2.NonePrice()
        price_0 = none_price_0.divide(bool_0)
        str_0 = 'LINK'
        str_1 = '1B\x0b4t'
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
        some_price_0 = module_2.SomePrice(**dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        date_0 = None
        dict_0 = {}
        price_0 = module_2.Price(**dict_0)
        price_1 = price_0.__abs__()
        str_0 = 'vk$(\r\n2H'
        str_1 = 'f\x0bK1/SA3u;'
        dict_1 = {str_0: date_0, str_1: price_0, str_0: str_0, str_1: date_0}
        none_money_0 = module_2.NoneMoney(**dict_1)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.scalar_subtract(bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        money_1 = money_0.add(money_0)
        bool_1 = some_money_0.gte(money_1)
        var_0 = money_1.__round__()
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        money_1 = money_0.abs()
        var_0 = None
        money_2 = money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        money_1 = money_0.__abs__()
        dict_0 = {}
        decimal_0 = module_1.Decimal(**dict_0)
        str_0 = 'g{k\n1-PYgvNZ'
        int_0 = 3613
        currency_type_0 = module_0.CurrencyType.ALTERNATIVE
        decimal_1 = module_1.Decimal()
        int_1 = -104
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_1)
        decimal_2 = currency_0.quantize(decimal_0)
        money_2 = money_0.with_qty(decimal_2)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        money_1 = money_0.add(money_0)
        str_0 = '\x0c/{*scR"fA"'
        int_0 = 0
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_31():
    try:
        date_0 = None
        dict_0 = {}
        price_0 = module_2.Price(**dict_0)
        price_1 = price_0.__sub__(price_0)
        str_0 = 'vk$(\r\n2H'
        str_1 = 'f\x0bK1/SA3u;'
        dict_1 = {str_0: date_0, str_1: price_0, str_0: str_0, str_1: date_0}
        none_money_0 = module_2.NoneMoney(**dict_1)
    except BaseException:
        pass

def test_case_32():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        money_1 = money_0.__abs__()
        dict_0 = {}
        none_money_0 = module_2.NoneMoney(**dict_0)
        money_2 = some_money_0.multiply(none_money_0)
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        money_1 = money_0.__add__(money_0)
        float_0 = some_money_0.as_float()
        var_0 = None
        money_2 = money_1.floor_divide(var_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        list_1 = [bool_0, bool_0, list_0]
        str_0 = 'p<s\\n'
        int_0 = 1104
        currency_type_0 = module_0.CurrencyType.ALTERNATIVE
        decimal_0 = module_1.Decimal()
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        list_2 = []
        none_price_0 = module_2.NonePrice()
        price_0 = none_price_0.divide(list_2)
        price_1 = price_0.convert(currency_0)
        some_price_0 = module_2.SomePrice(*list_1)
        price_2 = some_price_0.round()
        none_price_1 = module_2.NonePrice()
        bool_1 = none_price_1.gt(price_2)
        some_money_0 = module_2.SomeMoney(*list_0)
        bool_2 = none_price_1.lte(price_2)
        money_0 = some_money_0.abs()
        bool_3 = some_money_0.gt(money_0)
        money_1 = money_0.__abs__()
        money_2 = money_0.add(money_1)
        bool_4 = none_price_1.as_boolean()
        str_1 = ';`<\x0b/]ZWLC\ti'
        int_1 = None
        bool_5 = price_2.__bool__()
        currency_type_1 = module_0.CurrencyType.MONEY
        decimal_1 = module_1.Decimal()
        int_2 = None
        currency_1 = module_0.Currency(str_1, str_1, int_1, currency_type_1, decimal_1, int_2)
        money_3 = money_2.__sub__(money_2)
        money_4 = money_0.convert(currency_1, int_2, bool_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        money_1 = money_0.add(money_0)
        str_0 = '\x0c/{*scR"fA"'
        none_money_0 = module_2.NoneMoney()
        bool_2 = none_money_0.gt(money_1)
        str_1 = "'DQ,+\\yo;K{X"
        str_2 = 'NZ%T>b*-'
        dict_0 = {str_0: bool_0, str_1: str_1, str_2: some_money_0}
        decimal_0 = module_1.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        price_0 = module_2.Price()
        price_1 = price_0.positive()
    except BaseException:
        pass

def test_case_37():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        int_0 = 2
        price_1 = none_price_0.round(int_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = price_0.gt(price_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        bool_6 = money_1.__eq__(some_price_0)
        price_2 = price_0.abs()
        price_3 = some_price_0.add(price_2)
        price_4 = some_price_0.add(price_2)
        var_0 = None
        price_5 = price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_38():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        list_1 = [bool_0, bool_0, list_0]
        some_price_0 = module_2.SomePrice(*list_1)
        price_0 = some_price_0.round()
        none_price_0 = module_2.NonePrice()
        var_0 = None
        money_0 = none_price_0.times(var_0)
        bool_1 = none_price_0.gt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        float_0 = price_0.__float__()
        money_1 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_1)
        money_2 = money_1.add(money_1)
        money_3 = money_1.add(money_2)
        var_1 = None
        money_4 = money_1.floor_divide(var_1)
    except BaseException:
        pass

def test_case_39():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        bool_2 = some_money_0.is_equal(list_0)
        money_1 = money_0.add(money_0)
        str_0 = '\x0c/{*scR"fA"'
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        str_1 = None
        int_0 = -2996
        int_1 = 1
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        bool_3 = True
        money_2 = money_0.convert(currency_0, bool_3)
    except BaseException:
        pass

def test_case_40():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        money_1 = money_0.add(money_0)
        bool_1 = money_0.__lt__(money_0)
        str_0 = '\x0c/{*scR"fA"'
        decimal_0 = module_1.Decimal()
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_1 = module_1.Decimal()
        int_0 = -2901
        none_money_0 = module_2.NoneMoney()
        bool_2 = none_money_0.is_equal(bool_0)
        int_1 = -202
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_1)
        money_2 = money_0.__sub__(money_1)
        bool_3 = True
        money_3 = money_1.convert(currency_0, bool_3)
    except BaseException:
        pass

def test_case_41():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        var_0 = None
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_42():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        date_0 = None
        money_1 = some_money_0.with_dov(date_0)
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        money_2 = money_0.add(money_0)
        var_0 = None
        price_1 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_43():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        list_1 = [bool_0, bool_0, list_0]
        some_price_0 = module_2.SomePrice(*list_1)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.negative()
        price_0 = some_price_0.round()
        none_price_0 = module_2.NonePrice()
        bool_1 = none_price_0.gt(price_0)
        some_money_1 = module_2.SomeMoney(*list_0)
        bool_2 = none_price_0.lte(price_0)
        money_1 = some_money_1.abs()
        bool_3 = some_money_1.gt(money_1)
        money_2 = money_1.__abs__()
        money_3 = money_1.add(money_2)
        bool_4 = none_price_0.as_boolean()
        str_0 = ';`<\x0b/]ZWLC\ti'
        int_0 = some_money_1.as_integer()
        int_1 = None
        bool_5 = price_0.__bool__()
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_1)
        money_4 = money_3.__sub__(money_3)
        money_5 = money_4.convert(currency_0)
    except BaseException:
        pass

def test_case_44():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        money_1 = money_0.add(money_0)
        str_0 = '\x0c/{*scR"fA"'
        decimal_0 = module_1.Decimal()
        decimal_1 = module_1.Decimal()
        currency_0 = None
        dict_0 = {decimal_1: bool_0, str_0: list_0, currency_0: bool_1}
        money_2 = money_0.scalar_add(dict_0)
    except BaseException:
        pass

def test_case_45():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        bool_2 = money_0.__eq__(bool_1)
        money_1 = money_0.add(money_0)
        money_2 = money_0.__truediv__(some_money_0)
    except BaseException:
        pass

def test_case_46():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        money_1 = money_0.add(money_0)
        bool_2 = money_0.__lt__(money_0)
        bool_3 = money_1.__bool__()
        str_0 = '\x0c/{*scR"fA"'
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        currency_type_1 = module_0.CurrencyType.MONEY
        decimal_1 = module_1.Decimal()
        int_0 = -2901
        int_1 = -202
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_1, decimal_1, int_1)
        money_2 = money_0.__sub__(money_1)
        str_1 = 'x6~9d-OJ>Dm@Z.;'
        str_2 = 'wp"/O*!'
        int_2 = 463
        decimal_2 = currency_0.quantize(decimal_0)
        currency_1 = module_0.Currency(str_1, str_2, int_2, currency_type_0, decimal_2, int_2)
        money_3 = money_2.__sub__(money_1)
        money_4 = money_2.convert(currency_0)
    except BaseException:
        pass

def test_case_47():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        int_0 = 2
        price_1 = none_price_0.round(int_0)
        bool_2 = price_0.gt(price_0)
        bool_3 = price_0.__le__(price_0)
        str_0 = 'dR~A^h*eUPF5/;Ov<'
        str_1 = '\nGkF]iH[i_nI'
        int_1 = 1668
        currency_type_0 = module_0.CurrencyType.CRYPTO
        decimal_0 = None
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        var_0 = price_1.__round__(int_0)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        price_2 = price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_48():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        money_1 = money_0.add(money_0)
        bool_1 = money_0.__lt__(money_0)
        str_0 = '\x0c/{*scR"fA"'
        int_0 = 37
        currency_type_0 = module_0.CurrencyType.METAL
        dict_0 = {}
        decimal_0 = module_1.Decimal(**dict_0)
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.with_ccy(currency_0)
        decimal_1 = module_1.Decimal()
        currency_type_1 = module_0.CurrencyType.MONEY
        decimal_2 = module_1.Decimal()
        int_1 = -2901
        int_2 = -202
        currency_1 = module_0.Currency(str_0, str_0, int_1, currency_type_1, decimal_2, int_2)
        money_3 = money_1.__sub__(money_1)
        none_type_0 = None
        bool_2 = some_money_0.lte(money_0)
        money_4 = money_1.convert(currency_1, none_type_0)
    except BaseException:
        pass

def test_case_49():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.negative()
        bool_1 = some_money_0.gt(money_0)
        money_1 = money_0.add(money_0)
        bool_2 = money_0.__lt__(money_0)
        str_0 = '\x0c/{*scR"fA"'
        int_0 = 37
        currency_type_0 = module_0.CurrencyType.METAL
        dict_0 = {}
        decimal_0 = module_1.Decimal(**dict_0)
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.with_ccy(currency_0)
        decimal_1 = module_1.Decimal()
        str_1 = '(&-u$\n8G|hF)2)%A0'
        decimal_2 = module_1.Decimal()
        int_1 = 1069
        str_2 = '!-WZ#[2bY_\\q'
        int_2 = 2149
        currency_1 = module_0.Currency(str_1, str_2, int_1, currency_type_0, decimal_1, int_2)
        money_3 = money_0.__sub__(money_2)
    except BaseException:
        pass

def test_case_50():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        int_0 = price_0.__int__()
        str_0 = None
        bool_5 = money_1.__eq__(some_price_0)
        money_2 = money_0.add(money_1)
        str_1 = '\x0c/{*scR"fA"'
        str_2 = 'BNNDV4x4h/\x0b'
        dict_0 = {str_0: bool_2, str_2: str_1, str_2: money_2}
        decimal_0 = module_1.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_51():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        currency_0 = None
        price_1 = some_price_0.with_ccy(currency_0)
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.negative()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        bool_4 = money_1.__eq__(some_price_0)
        price_2 = price_0.abs()
        bool_5 = price_2.gte(price_2)
        money_2 = money_1.__sub__(money_0)
        var_0 = price_2.__round__()
        bool_6 = some_money_0.lte(money_1)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        date_0 = module_3.date()
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = "!9QW,A:h2\x0b3j'M+NeQ!U"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {}
        none_money_0 = module_2.NoneMoney(**dict_1)
        money_0 = none_money_0.scalar_add(dict_0)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        list_0 = [monetary_operation_exception_0, monetary_operation_exception_0, monetary_operation_exception_0, monetary_operation_exception_0]
        some_money_0 = module_2.SomeMoney(*list_0)
    except BaseException:
        pass

def test_case_53():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        date_0 = None
        money_1 = some_money_0.with_dov(date_0)
        bool_2 = money_0.lte(money_1)
        bool_3 = some_money_0.gt(money_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_0.__le__(price_0)
        bool_6 = money_0.__eq__(some_money_0)
        money_2 = money_0.add(money_0)
        bool_7 = money_2.__eq__(some_price_0)
        price_1 = price_0.abs()
        price_2 = some_price_0.add(price_1)
        bool_8 = price_1.gte(price_2)
        price_3 = price_2.with_dov(date_0)
        currency_0 = None
        money_3 = money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_54():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.abs()
        bool_1 = some_price_0.lt(price_0)
        bool_2 = price_0.__le__(price_0)
        int_0 = -2987
        price_1 = price_0.abs()
        price_2 = price_0.__pos__()
        bool_3 = price_1.gte(price_2)
        currency_type_0 = module_0.CurrencyType.METAL
        str_0 = 'XT'
        price_3 = some_price_0.subtract(price_2)
        bool_4 = price_1.gt(price_2)
        decimal_0 = None
        int_1 = 2
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_0)
        var_0 = price_3.__round__()
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        var_1 = None
        price_4 = price_2.__truediv__(var_1)
    except BaseException:
        pass

def test_case_55():
    try:
        money_0 = module_2.Money()
        none_money_0 = module_2.NoneMoney()
        money_1 = none_money_0.negative()
        money_2 = money_1.__add__(money_0)
        money_3 = money_2.negative()
    except BaseException:
        pass

def test_case_56():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        int_0 = 2
        price_1 = none_price_0.round(int_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        float_0 = some_price_0.as_float()
        bool_3 = price_0.gt(price_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_0.__le__(price_0)
        decimal_0 = None
        money_1 = money_0.negative()
        bool_6 = money_0.__lt__(money_0)
        price_2 = some_price_0.subtract(price_1)
        bool_7 = money_1.__ge__(money_0)
        bool_8 = price_1.is_equal(int_0)
        str_0 = '\n    Computes the day count fraction for the "30E/360" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal(\'0.16666666666667\')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal(\'0.16944444444444\')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal(\'1.08333333333333\')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal(\'1.33055555555556\')\n    '
        str_1 = '\n        Prints the chart of accounts in a tree-like form.\n\n        :param coa: Chart of accounts to print.\n        '
        int_1 = -2389
        currency_type_0 = module_0.CurrencyType.CRYPTO
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_1)
        money_2 = money_0.subtract(money_1)
        money_3 = money_0.__sub__(money_2)
        dict_0 = {decimal_0: price_1}
        money_4 = some_money_0.floor_divide(dict_0)
    except BaseException:
        pass

def test_case_57():
    try:
        none_price_0 = module_2.NonePrice()
        str_0 = ')eE>Rf)(u9cznib#O3'
        str_1 = 'TvI~{v\\_FO-},\\'
        price_0 = none_price_0.negative()
        price_1 = price_0.abs()
        price_2 = price_1.scalar_add(str_1)
        price_3 = module_2.Price()
        price_4 = price_3.__add__(price_2)
        price_5 = price_4.multiply(str_0)
    except BaseException:
        pass

def test_case_58():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        int_0 = 2
        price_1 = none_price_0.round(int_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = price_0.gt(price_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        str_0 = None
        bool_6 = money_1.__ge__(money_0)
        str_1 = '\nGkF]iH[i_nI'
        int_1 = 1668
        currency_type_0 = module_0.CurrencyType.CRYPTO
        decimal_0 = None
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        money_2 = money_0.__sub__(money_1)
        var_0 = price_1.__round__(int_0)
        bool_7 = some_money_0.lte(money_0)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        bool_8 = True
        price_2 = some_price_0.convert(currency_0, bool_8)
    except BaseException:
        pass

def test_case_59():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        int_0 = 2
        price_1 = none_price_0.round(int_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        bool_2 = price_0.gt(price_0)
        var_0 = None
        price_2 = some_price_0.multiply(var_0)
    except BaseException:
        pass

def test_case_60():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        str_0 = None
        bool_5 = money_1.__eq__(some_price_0)
        price_1 = price_0.scalar_subtract(str_0)
    except BaseException:
        pass

def test_case_61():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        none_price_0 = module_2.NonePrice()
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        bool_2 = money_0.__lt__(money_0)
        money_1 = some_money_0.abs()
        money_2 = money_0.add(money_1)
        str_0 = None
        bool_3 = money_2.is_equal(money_2)
        str_1 = 'Z*i[rEig:~-uG|8'
        int_0 = -4344
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = None
        int_1 = 3305
        currency_0 = module_0.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_1)
        bool_4 = True
        dict_0 = {}
        none_money_0 = module_2.NoneMoney(**dict_0)
        money_3 = none_money_0.convert(currency_0, bool_4)
        bool_5 = money_1.lte(money_3)
        currency_type_1 = module_0.CurrencyType.METAL
        int_2 = -2121
        decimal_1 = None
        money_4 = some_money_0.positive()
        bool_6 = money_1.__ge__(money_2)
        str_2 = 'dR~A^h*eUPF5/;Ov<'
        int_3 = 4248
        currency_1 = module_0.Currency(str_0, str_2, int_3, currency_type_1, decimal_1, int_2)
        money_5 = money_2.__sub__(money_2)
        bool_7 = some_money_0.lte(money_0)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        money_6 = money_1.convert(currency_1, list_0)
    except BaseException:
        pass

def test_case_62():
    try:
        dict_0 = {}
        price_0 = module_2.Price()
        decimal_0 = module_1.Decimal()
        str_0 = 'ONE'
        str_1 = '3\x0c'
        int_0 = 2449
        currency_type_0 = module_0.CurrencyType.METAL
        list_0 = [int_0]
        decimal_1 = module_1.Decimal(*list_0, **dict_0)
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        decimal_2 = currency_0.quantize(decimal_0)
        price_1 = price_0.with_qty(decimal_2)
    except BaseException:
        pass

def test_case_63():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        bool_5 = price_0.__eq__(bool_1)
        int_0 = 1
        price_1 = some_price_0.add(price_0)
        bool_6 = price_1.gte(price_1)
        money_2 = money_1.abs()
        currency_type_0 = module_0.CurrencyType.METAL
        str_0 = 'XlY'
        int_1 = -2147
        decimal_0 = None
        bool_7 = money_1.__lt__(money_0)
        price_2 = some_price_0.subtract(price_1)
        bool_8 = money_1.__ge__(money_1)
        bool_9 = price_0.is_equal(price_0)
        str_1 = '\n    Computes the day count fraction for the "30E/360" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal(\'0.16666666666667\')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal(\'0.16944444444444\')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal(\'1.08333333333333\')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal(\'1.33055555555556\')\n    '
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_3 = money_0.__sub__(money_0)
        money_4 = some_money_0.floor_divide(some_money_0)
    except BaseException:
        pass

def test_case_64():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        int_0 = -2996
        bool_5 = money_1.__eq__(int_0)
        price_1 = price_0.abs()
        price_2 = some_price_0.add(price_0)
        bool_6 = price_1.gte(price_1)
        currency_type_0 = module_0.CurrencyType.METAL
        int_1 = -2832
        str_0 = 'XR'
        money_2 = module_2.Money()
        money_3 = money_2.__add__(money_1)
        price_3 = some_price_0.subtract(price_2)
        bool_7 = money_1.__ge__(money_0)
        decimal_0 = None
        str_1 = 'El Salvador Colon'
        int_2 = -3691
        currency_0 = module_0.Currency(str_1, str_0, int_1, currency_type_0, decimal_0, int_2)
        price_4 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_65():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = money_0.__lt__(money_0)
        bool_3 = price_0.__le__(price_0)
        money_1 = money_0.__sub__(money_0)
        float_0 = some_price_0.as_float()
        bool_4 = price_0.gt(price_0)
        money_2 = money_1.__truediv__(float_0)
        bool_5 = money_2.__lt__(money_1)
        bool_6 = price_0.__le__(price_0)
        money_3 = money_1.add(money_0)
        bool_7 = money_2.__ge__(money_2)
        str_0 = 'dR~A^h*eUPF5/;Ov<'
        int_0 = 2952
        str_1 = '\nGkF]iH[i_nI'
        currency_type_0 = module_0.CurrencyType.CRYPTO
        decimal_0 = None
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_4 = money_0.__sub__(money_2)
        var_0 = price_0.__round__()
        bool_8 = some_money_0.lte(money_3)
        str_2 = 'Nn+CoD@[l4)-j'
        str_3 = None
        dict_0 = {str_2: str_0, str_0: bool_0, str_0: money_1, str_3: bool_7}
        monetary_operation_exception_0 = module_2.MonetaryOperationException(**dict_0)
    except BaseException:
        pass

def test_case_66():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        none_price_0 = module_2.NonePrice()
        int_0 = 2
        price_1 = none_price_0.round(int_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = price_0.gt(price_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_0.gt(price_1)
        bool_6 = money_0.__lt__(money_0)
        bool_7 = price_0.__le__(price_1)
        money_1 = money_0.add(money_0)
        bool_8 = money_0.__ge__(money_0)
        str_0 = 'dR~A^h*eUPF5/;Ov<'
        str_1 = '\nGkF]iH[i_nI'
        money_2 = money_0.__sub__(money_0)
        var_0 = price_1.__round__()
        str_2 = ' >1aS2z\x0b^U9M$ OMp'
        dict_0 = {str_1: bool_8, str_0: int_0, str_2: some_money_0}
        none_money_0 = module_2.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_67():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        bool_5 = money_1.__eq__(some_price_0)
        int_0 = 1
        price_1 = price_0.abs()
        price_2 = some_price_0.add(price_1)
        bool_6 = price_1.gte(price_2)
        currency_type_0 = module_0.CurrencyType.METAL
        price_3 = some_price_0.subtract(price_2)
        bool_7 = money_1.__ge__(money_1)
        bool_8 = False
        price_4 = price_3.__floordiv__(bool_8)
        str_0 = 'dR~A[h*eUPF5/;Ov<'
        bool_9 = price_1.gt(price_2)
        decimal_0 = None
        int_1 = 915
        str_1 = '@'
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        price_5 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_68():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        bool_5 = money_1.__eq__(some_price_0)
        price_1 = some_price_0.round()
        price_2 = price_0.abs()
        price_3 = some_price_0.add(price_2)
        bool_6 = price_2.gte(price_3)
        money_2 = money_1.__add__(money_0)
        price_4 = some_price_0.subtract(price_3)
        bool_7 = money_2.__ge__(money_2)
        bool_8 = price_2.gt(price_3)
        none_money_0 = module_2.NoneMoney()
        float_0 = none_money_0.as_float()
    except BaseException:
        pass

def test_case_69():
    try:
        money_0 = module_2.Money()
        none_money_0 = module_2.NoneMoney()
        money_1 = money_0.subtract(money_0)
    except BaseException:
        pass

def test_case_70():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        str_0 = None
        bool_5 = money_1.__eq__(some_price_0)
        price_1 = price_0.abs()
        price_2 = some_price_0.add(price_1)
        bool_6 = price_1.gte(price_2)
        bool_7 = price_1.gt(price_2)
        currency_type_0 = module_0.CurrencyType.METAL
        int_0 = -2832
        bool_8 = money_1.__ge__(money_1)
        str_1 = 'dR~A^h*eUPF5/;Ov<'
        price_3 = price_1.__sub__(price_1)
        decimal_0 = None
        int_1 = -190
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_2 = some_money_0.with_ccy(currency_0)
        money_3 = some_money_0.negative()
        var_0 = price_2.__round__()
        bool_9 = some_money_0.lte(money_2)
    except BaseException:
        pass

def test_case_71():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        list_1 = [bool_0, bool_0, list_0]
        some_price_0 = module_2.SomePrice(*list_1)
        price_0 = some_price_0.round()
        none_price_0 = module_2.NonePrice()
        var_0 = None
        money_0 = none_price_0.times(var_0)
        bool_1 = none_price_0.gt(price_0)
        dict_0 = {}
        some_money_0 = module_2.SomeMoney(*list_0, **dict_0)
        bool_2 = some_money_0.gte(money_0)
        some_money_1 = module_2.SomeMoney(*list_0)
        float_0 = price_0.__float__()
        money_1 = some_money_1.abs()
        bool_3 = some_money_1.gt(money_1)
        money_2 = money_1.add(money_1)
        var_1 = None
        money_3 = money_1.floor_divide(var_1)
    except BaseException:
        pass

def test_case_72():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        bool_1 = True
        price_0 = module_2.Price()
        price_1 = price_0.__mul__(bool_1)
        price_2 = some_price_0.round()
        bool_2 = some_price_0.lt(price_2)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_3 = some_money_0.gt(money_0)
        bool_4 = price_2.__le__(price_2)
        money_1 = money_0.add(money_0)
        bool_5 = money_1.__eq__(some_price_0)
        price_3 = price_2.abs()
        price_4 = some_price_0.add(price_3)
        bool_6 = price_3.gte(price_4)
        bool_7 = price_3.gt(price_4)
        bool_8 = money_1.__ge__(money_1)
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        str_0 = '$"CO(7RWq5]b'
        int_0 = 473
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        bool_9 = True
        money_2 = money_0.convert(currency_0, bool_9)
    except BaseException:
        pass

def test_case_73():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_1 = some_money_0.gt(money_0)
        bool_2 = money_0.__lt__(money_0)
        int_0 = -2996
        currency_type_0 = module_0.CurrencyType.METAL
        none_money_0 = module_2.NoneMoney()
        bool_3 = none_money_0.lte(money_0)
        str_0 = 'XT'
        decimal_0 = None
        money_1 = money_0.__add__(money_0)
        bool_4 = money_1.__ge__(money_1)
        int_1 = 2
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_0)
        money_2 = money_0.__sub__(money_0)
        bool_5 = some_money_0.lte(money_1)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        money_3 = money_2.convert(currency_0)
    except BaseException:
        pass

def test_case_74():
    try:
        none_price_0 = module_2.NonePrice()
        price_0 = none_price_0.abs()
        date_0 = None
        price_1 = none_price_0.with_dov(date_0)
        some_price_0 = module_2.SomePrice()
    except BaseException:
        pass

def test_case_75():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = some_price_0.round()
        bool_1 = some_price_0.lt(price_0)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        date_0 = None
        money_1 = some_money_0.with_dov(date_0)
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        money_2 = money_0.add(money_0)
        bool_4 = money_2.__eq__(some_price_0)
        price_1 = price_0.abs()
        price_2 = some_price_0.add(price_1)
        bool_5 = price_1.gte(price_2)
        currency_0 = None
        money_3 = money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_76():
    try:
        money_0 = module_2.Money()
        int_0 = money_0.as_integer()
    except BaseException:
        pass

def test_case_77():
    try:
        none_price_0 = module_2.NonePrice()
        list_0 = [none_price_0, none_price_0, none_price_0]
        monetary_operation_exception_0 = module_2.MonetaryOperationException(*list_0)
        money_0 = module_2.Money()
        money_1 = money_0.multiply(monetary_operation_exception_0)
    except BaseException:
        pass

def test_case_78():
    try:
        none_price_0 = module_2.NonePrice()
        price_0 = module_2.Price()
        price_1 = price_0.scalar_add(none_price_0)
    except BaseException:
        pass

def test_case_79():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        bool_1 = True
        price_0 = module_2.Price()
        price_1 = price_0.__mul__(bool_1)
        price_2 = some_price_0.round()
        bool_2 = some_price_0.lt(price_2)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_3 = some_money_0.gt(money_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_0.__le__(price_0)
        money_1 = money_0.add(money_0)
        str_0 = None
        bool_6 = money_1.__eq__(some_price_0)
        price_3 = price_2.abs()
        price_4 = some_price_0.add(price_3)
        bool_7 = price_3.gte(price_4)
        bool_8 = price_3.gt(price_4)
        currency_type_0 = module_0.CurrencyType.METAL
        int_0 = -2832
        bool_9 = money_1.__ge__(money_1)
        price_5 = price_3.__sub__(price_3)
        decimal_0 = None
        str_1 = 'Lilangeni'
        int_1 = -190
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_2 = some_money_0.add(money_1)
        money_3 = some_money_0.positive()
        var_0 = price_4.__round__()
        bool_10 = some_money_0.lte(money_2)
        bool_11 = some_money_0.lt(money_1)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        price_6 = price_3.convert(currency_0)
    except BaseException:
        pass

def test_case_80():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = module_2.Price()
        price_1 = price_0.__pos__()
        price_2 = some_price_0.round()
        bool_1 = some_price_0.lt(price_2)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_2.__le__(price_2)
        money_1 = money_0.add(money_0)
        str_0 = None
        bool_5 = money_1.__eq__(some_price_0)
        price_3 = price_2.abs()
        price_4 = some_price_0.add(price_3)
        bool_6 = price_3.gte(price_4)
        bool_7 = price_3.gt(price_4)
        currency_type_0 = module_0.CurrencyType.METAL
        int_0 = -2832
        bool_8 = money_1.__ge__(money_1)
        price_5 = price_3.__sub__(price_3)
        decimal_0 = None
        str_1 = 'Lilangeni'
        int_1 = -190
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_2 = money_1.__sub__(money_1)
        money_3 = some_money_0.positive()
        var_0 = price_4.__round__()
        bool_9 = some_money_0.lte(money_2)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        price_6 = price_3.convert(currency_0)
    except BaseException:
        pass

def test_case_81():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = module_2.Price()
        price_1 = some_price_0.round()
        bool_1 = some_price_0.lt(price_1)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_1.__le__(price_1)
        money_1 = money_0.add(money_0)
        str_0 = None
        bool_5 = money_1.__eq__(some_price_0)
        price_2 = price_1.abs()
        price_3 = some_price_0.add(price_2)
        bool_6 = price_2.gte(price_3)
        bool_7 = price_0.gt(price_3)
        currency_type_0 = module_0.CurrencyType.METAL
        int_0 = -2832
        bool_8 = money_1.__ge__(money_1)
        price_4 = price_2.__sub__(price_2)
        decimal_0 = None
        str_1 = 'Lilangeni'
        int_1 = -190
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_2 = money_1.__sub__(money_1)
        money_3 = some_money_0.positive()
        var_0 = price_3.__round__()
        bool_9 = some_money_0.lte(money_2)
        bool_10 = some_money_0.lt(money_1)
        price_5 = price_2.convert(currency_0)
    except BaseException:
        pass

def test_case_82():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = module_2.Price()
        price_1 = price_0.negative()
    except BaseException:
        pass

def test_case_83():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        bool_1 = True
        price_0 = module_2.Price()
        price_1 = price_0.__mul__(bool_1)
        price_2 = some_price_0.round()
        bool_2 = some_price_0.lt(price_2)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_3 = some_money_0.gt(money_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_2.__le__(price_2)
        money_1 = money_0.add(money_0)
        bool_6 = money_1.__eq__(some_price_0)
        price_3 = price_0.round()
    except BaseException:
        pass

def test_case_84():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = module_2.Price()
        price_1 = some_price_0.round()
        bool_1 = some_price_0.lt(price_1)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = money_0.__lt__(money_0)
        bool_4 = price_1.__le__(price_1)
        money_1 = money_0.add(money_0)
        bool_5 = money_1.__eq__(some_price_0)
        price_2 = price_1.abs()
        price_3 = some_price_0.add(price_2)
        bool_6 = price_2.gte(price_3)
        bool_7 = price_2.gt(price_3)
        bool_8 = money_1.__ge__(money_1)
        price_4 = price_0.subtract(price_1)
    except BaseException:
        pass

def test_case_85():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        bool_1 = True
        price_0 = module_2.Price()
        price_1 = price_0.__mul__(bool_1)
        price_2 = some_price_0.round()
        bool_2 = some_price_0.lt(price_2)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_3 = some_money_0.gt(money_0)
        bool_4 = money_0.__lt__(money_0)
        bool_5 = price_2.__le__(price_2)
        money_1 = money_0.add(money_0)
        bool_6 = money_1.__eq__(some_price_0)
        price_3 = price_2.abs()
        price_4 = some_price_0.add(price_3)
        bool_7 = price_3.gte(price_4)
        bool_8 = price_3.gt(price_4)
        bool_9 = money_1.__eq__(money_1)
        money_2 = money_1.negative()
        price_5 = price_3.abs()
        price_6 = some_price_0.add(price_2)
        bool_10 = price_0.gte(price_2)
        dict_0 = {}
        decimal_0 = module_1.Decimal(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_86():
    try:
        price_0 = module_2.Price()
        decimal_0 = module_1.Decimal()
        str_0 = "c'qy/["
        int_0 = 2398
        currency_type_0 = module_0.CurrencyType.ALTERNATIVE
        list_0 = []
        price_1 = price_0.__truediv__(int_0)
        decimal_1 = module_1.Decimal(*list_0)
        int_1 = 3151
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_1)
        none_money_0 = module_2.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = price_1.__round__(int_1)
    except BaseException:
        pass

def test_case_87():
    try:
        money_0 = module_2.Money()
        money_1 = money_0.__sub__(money_0)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        str_0 = 'X_oms'
        bool_0 = money_0.gt(money_0)
        int_0 = None
        currency_type_0 = module_0.CurrencyType.METAL
        list_0 = []
        decimal_0 = module_1.Decimal(*list_0)
        str_1 = '[7t3=m&\tv'
        decimal_1 = module_1.Decimal()
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        decimal_2 = currency_0.quantize(decimal_0)
        int_1 = 0
        currency_1 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_2, int_1)
        money_2 = money_0.with_ccy(currency_1)
        money_3 = money_0.positive()
    except BaseException:
        pass

def test_case_88():
    try:
        money_0 = module_2.Money()
        money_1 = money_0.abs()
    except BaseException:
        pass

def test_case_89():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        price_0 = module_2.Price()
        price_1 = price_0.__pos__()
        price_2 = price_0.__neg__()
        bool_1 = some_price_0.lt(price_2)
    except BaseException:
        pass

def test_case_90():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        bool_1 = True
        price_0 = module_2.Price()
        price_1 = price_0.__mul__(bool_1)
        price_2 = some_price_0.round()
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.positive()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = price_2.__le__(price_2)
        money_1 = money_0.add(money_0)
        bool_4 = money_1.__eq__(some_price_0)
        price_3 = price_2.subtract(price_2)
        price_4 = some_price_0.add(price_3)
        bool_5 = price_3.gte(price_4)
        bool_6 = price_3.gt(price_4)
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = None
        bool_7 = False
        money_2 = some_money_0.positive()
        bool_8 = money_2.__ge__(money_2)
        int_0 = 2949
        int_1 = 4248
        str_0 = None
        bool_9 = some_money_0.lt(money_0)
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_3 = money_2.__sub__(money_0)
        bool_10 = some_money_0.lte(money_0)
        bool_11 = price_0.lt(price_0)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        money_4 = money_1.convert(currency_0, bool_7)
    except BaseException:
        pass

def test_case_91():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        bool_1 = True
        price_0 = module_2.Price()
        price_1 = price_0.__mul__(bool_1)
        price_2 = some_price_0.round()
        bool_2 = some_price_0.lt(price_2)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_3 = price_0.__lt__(price_0)
        bool_4 = some_money_0.gt(money_0)
        bool_5 = money_0.__lt__(money_0)
        bool_6 = price_2.__le__(price_2)
        money_1 = money_0.add(money_0)
        str_0 = None
        bool_7 = money_1.__eq__(some_price_0)
        price_3 = price_2.abs()
        price_4 = some_price_0.add(price_3)
        bool_8 = price_3.gte(price_4)
        bool_9 = price_3.gt(price_4)
        currency_type_0 = module_0.CurrencyType.METAL
        int_0 = -2832
        bool_10 = money_1.__ge__(money_1)
        price_5 = price_3.__sub__(price_3)
        decimal_0 = None
        str_1 = 'Lilangeni'
        int_1 = -190
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_2 = some_money_0.positive()
        var_0 = price_4.__round__()
        bool_11 = some_money_0.lte(money_1)
        monetary_operation_exception_0 = module_2.MonetaryOperationException()
        price_6 = price_3.convert(currency_0)
    except BaseException:
        pass

def test_case_92():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        some_price_0 = module_2.SomePrice(*list_0)
        bool_1 = True
        price_0 = module_2.Price()
        price_1 = price_0.__mul__(bool_1)
        price_2 = some_price_0.round()
        bool_2 = some_price_0.lt(price_2)
        some_money_0 = module_2.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
        bool_3 = some_money_0.gt(money_0)
        bool_4 = price_2.__le__(price_2)
        money_1 = money_0.add(money_0)
        bool_5 = money_1.__eq__(some_price_0)
        price_3 = price_2.abs()
        price_4 = some_price_0.add(price_3)
        bool_6 = price_3.gte(price_4)
        bool_7 = price_0.as_boolean()
    except BaseException:
        pass

def test_case_93():
    try:
        money_0 = module_2.Money()
        money_1 = money_0.__neg__()
        currency_0 = None
        str_0 = None
        dict_0 = {str_0: currency_0}
        date_0 = module_3.date(**dict_0)
    except BaseException:
        pass