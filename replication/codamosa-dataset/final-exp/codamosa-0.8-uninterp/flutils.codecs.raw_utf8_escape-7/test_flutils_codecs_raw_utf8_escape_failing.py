# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        bytes_0 = b'h\xb4\xbc\x8f\x14!'
        tuple_0 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.register()
        int_0 = 469
        tuple_0 = module_0.decode(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'6\xbf=\xae\xeb\xaa\xf1'
        int_0 = -7
        tuple_0 = (bytes_0, int_0)
        tuple_1 = module_0.decode(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        module_0.register()
        module_0.register()
        user_string_0 = module_1.UserString(tuple_0)
        var_0 = user_string_0.lower()
        user_string_1 = module_1.UserString(user_string_0)
        byte_string_0 = None
        tuple_1 = module_0.decode(byte_string_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'unknown'
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'T\xafg\\5\x86\xfb\xf3=@o;\xddD\x1f8'
        int_0 = -469
        tuple_0 = (bytes_0, int_0)
        tuple_1 = None
        list_0 = [tuple_1, tuple_1, tuple_1, tuple_0]
        user_string_0 = module_1.UserString(list_0)
        tuple_2 = module_0.encode(user_string_0)
    except BaseException:
        pass

def test_case_6():
    try:
        module_0.register()
        str_0 = 'of]TF^^yG_\\5Se\x0cz7'
        tuple_0 = module_0.encode(str_0)
        tuple_1 = module_0.encode(str_0)
        module_0.register()
        tuple_2 = module_0.encode(str_0)
        tuple_3 = module_0.encode(str_0)
        tuple_4 = module_0.encode(str_0, str_0)
        module_0.register()
        module_0.register()
        module_0.register()
        module_0.register()
        list_0 = []
        tuple_5 = module_0.decode(list_0)
        tuple_6 = module_0.encode(str_0)
        tuple_7 = module_0.encode(str_0)
        user_string_0 = None
        tuple_8 = module_0.encode(str_0)
        user_string_1 = module_1.UserString(user_string_0)
        tuple_9 = module_0.encode(user_string_1)
        module_0.register()
        bytes_0 = b'\xb4\x8a<\xc7h'
        tuple_10 = module_0.decode(bytes_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'c0_'
        tuple_0 = module_0.encode(str_0)
        bytes_0 = b'\xc3\x85\xe3'
        module_0.register()
        user_string_0 = module_1.UserString(bytes_0)
        tuple_1 = module_0.encode(user_string_0, user_string_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '2UQ}Tb'
        int_0 = 0
        tuple_0 = (str_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        str_1 = '~&{5\x0c'
        bytes_0 = b'\xc4\x92\x1blM'
        user_string_1 = module_1.UserString(bytes_0)
        tuple_1 = module_0.encode(user_string_1, str_0)
        tuple_2 = module_0.encode(user_string_1, str_1)
        str_2 = None
        list_0 = [tuple_1, str_2, tuple_1, tuple_0]
        tuple_3 = module_0.decode(list_0)
    except BaseException:
        pass