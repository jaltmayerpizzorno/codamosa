# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        dict_0 = {}
        bool_0 = True
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, bool_0)
        var_0 = string_translate_pseudo_mapping_0.__iter__()
        str_0 = ''
        rough_parser_0 = module_0.RoughParser(string_translate_pseudo_mapping_0, str_0)
        var_1 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        int_0 = -153
        rough_parser_0 = module_0.RoughParser(list_0, int_0)
        var_0 = rough_parser_0.find_good_parse_start()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '>'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        var_0 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        float_0 = -199.328232
        list_0 = [float_0, float_0, float_0]
        rough_parser_0 = module_0.RoughParser(float_0, list_0)
        var_0 = rough_parser_0.set_str(tuple_0)
        var_1 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = set()
        str_0 = '0d2K'
        rough_parser_0 = module_0.RoughParser(str_0, set_0)
        var_0 = rough_parser_0.set_str(set_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1126.32
        list_0 = [float_0, float_0, float_0]
        rough_parser_0 = module_0.RoughParser(list_0, list_0)
        var_0 = rough_parser_0.get_base_indent_string()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x95]9\xc4'
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bytes_0, bool_0)
        bool_1 = True
        rough_parser_1 = module_0.RoughParser(rough_parser_0, bool_1)
        var_0 = rough_parser_1.is_block_opener()
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        bool_0 = True
        str_0 = '0d9X'
        rough_parser_0 = module_0.RoughParser(bool_0, str_0)
        var_0 = rough_parser_0.set_str(set_0)
        var_1 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        float_0 = -4592.0
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        var_0 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\\s*\\\\'
        bytes_0 = b''
        hyper_parser_0 = module_0.HyperParser(str_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 23.78
        list_0 = [float_0]
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(list_0, bool_0)
        str_0 = 'F'
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tuple_0 = ()
        int_0 = 1110
        rough_parser_0 = module_0.RoughParser(tuple_0, int_0)
        str_0 = '\\@:Aj&Cy}Wu$V'
        var_0 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'n'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        int_0 = -21
        var_0 = rough_parser_0.set_lo(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        str_0 = 'n'
        str_1 = '>'
        rough_parser_0 = module_0.RoughParser(str_0, str_1)
        bool_0 = True
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, bool_0)
        int_0 = -2102
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(string_translate_pseudo_mapping_0, int_0)
        var_0 = string_translate_pseudo_mapping_1.get(dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = {}
        bool_0 = True
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, bool_0)
        var_0 = string_translate_pseudo_mapping_0.__iter__()
        str_0 = ''
        rough_parser_0 = module_0.RoughParser(str_0, string_translate_pseudo_mapping_0)
        int_0 = -2378
        var_1 = string_translate_pseudo_mapping_0.__getitem__(int_0)
        float_0 = -424.0
        str_1 = 'p;)z6\t<;WZq('
        hyper_parser_0 = module_0.HyperParser(float_0, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'j4'
        float_0 = -2368.70206
        rough_parser_0 = module_0.RoughParser(str_0, float_0)
        var_0 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_16():
    try:
        set_0 = set()
        str_0 = 'A?/Ax;h'
        rough_parser_0 = module_0.RoughParser(str_0, set_0)
        var_0 = rough_parser_0.set_str(set_0)
        var_1 = rough_parser_0.get_continuation_type()
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'Qx9*@\xd3\xf1'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        str_0 = 'iZe6z{!TFdMKp{lCY vu'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_0 = string_translate_pseudo_mapping_0.__len__()
        var_1 = string_translate_pseudo_mapping_0.__len__()
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(dict_0, bool_0)
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        set_0 = set()
        str_0 = '0d2K'
        rough_parser_0 = module_0.RoughParser(str_0, set_0)
        var_0 = rough_parser_0.set_str(set_0)
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_19():
    try:
        set_0 = set()
        str_0 = '0d2K'
        rough_parser_0 = module_0.RoughParser(str_0, set_0)
        var_0 = rough_parser_0.set_str(set_0)
        var_1 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_20():
    try:
        tuple_0 = ()
        float_0 = -2357.6994042848182
        list_0 = [float_0, float_0, float_0]
        rough_parser_0 = module_0.RoughParser(float_0, list_0)
        var_0 = rough_parser_0.set_str(tuple_0)
        var_1 = rough_parser_0.set_str(tuple_0)
        bytes_0 = b'X\xe2\xb1p'
        var_2 = rough_parser_0.find_good_parse_start(bytes_0)
    except BaseException:
        pass