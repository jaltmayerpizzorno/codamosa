# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        bytes_0 = b'H\xdc\x0c\x96\xae\x824\x8dNB\x8a'
        semigroup_0 = module_0.Semigroup(bytes_0)
        one_0 = module_0.One(semigroup_0)
        bool_0 = semigroup_0.__eq__(one_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -2630.05858
        sum_0 = module_0.Sum(float_0)
        sum_1 = sum_0.concat(sum_0)
        first_0 = module_0.First(sum_0)
        float_1 = 2424.0
        semigroup_0 = module_0.Semigroup(float_1)
        var_0 = semigroup_0.fold(first_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        '
        int_0 = 1274
        map_0 = module_0.Map(int_0)
        last_0 = module_0.Last(map_0)
        first_0 = module_0.First(last_0)
        map_1 = module_0.Map(first_0)
        map_2 = module_0.Map(str_0)
        last_1 = module_0.Last(map_2)
        str_1 = map_2.__str__()
        bytes_0 = b'\xb0Z\x16\xcd\xd2\x04\x80P\xf8\xbd\xcb[\xc7\x1b'
        one_0 = module_0.One(bytes_0)
        first_1 = module_0.First(one_0)
        sum_0 = module_0.Sum(first_1)
        all_0 = module_0.All(sum_0)
        str_2 = all_0.__str__()
        set_0 = set()
        var_0 = last_1.concat(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 1086.2
        sum_0 = module_0.Sum(float_0)
        float_1 = 2265.0
        set_0 = {float_1}
        sum_1 = module_0.Sum(set_0)
        str_0 = '\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        '
        all_0 = module_0.All(str_0)
        one_0 = module_0.One(all_0)
        var_0 = one_0.concat(set_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b''
        first_0 = module_0.First(bytes_0)
        str_0 = first_0.__str__()
        str_1 = first_0.__str__()
        str_2 = 'bgY4f`uSp :'
        var_0 = first_0.concat(str_2)
        str_3 = '}k]CBr;b6hkU"'
        tuple_0 = ()
        var_1 = first_0.concat(tuple_0)
        first_1 = module_0.First(str_3)
        float_0 = -587.307
        min_0 = module_0.Min(float_0)
        str_4 = min_0.__str__()
        float_1 = 718.4964275380594
        max_0 = module_0.Max(float_1)
        var_2 = max_0.concat(min_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b''
        str_0 = '}k]CBr;b6hkU"'
        first_0 = module_0.First(str_0)
        str_1 = first_0.__str__()
        float_0 = -573.2160660215968
        semigroup_0 = None
        all_0 = module_0.All(semigroup_0)
        min_0 = module_0.Min(float_0)
        str_2 = min_0.__str__()
        float_1 = 724.502
        last_0 = module_0.Last(bytes_0)
        str_3 = last_0.__str__()
        max_0 = module_0.Max(float_1)
        var_0 = max_0.concat(min_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -497
        map_0 = module_0.Map(int_0)
        str_0 = map_0.__str__()
        int_1 = -1252
        first_0 = module_0.First(int_1)
        float_0 = 2117.4609
        list_0 = []
        max_0 = module_0.Max(list_0)
        var_0 = max_0.concat(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 377
        semigroup_0 = module_0.Semigroup(int_0)
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0}
        map_0 = module_0.Map(set_0)
        var_0 = map_0.concat(semigroup_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -481.690595
        min_0 = module_0.Min(float_0)
        all_0 = None
        var_0 = min_0.concat(all_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '}k]CBr;b6hkU"'
        first_0 = module_0.First(str_0)
        str_1 = first_0.__str__()
        float_0 = -587.307
        min_0 = module_0.Min(float_0)
        str_2 = min_0.__str__()
        float_1 = 724.502
        max_0 = module_0.Max(float_1)
        var_0 = max_0.concat(min_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b''
        list_0 = [bytes_0, bytes_0, bytes_0]
        last_0 = module_0.Last(list_0)
        str_0 = 'Validation.fail[{}, {}]'
        map_0 = module_0.Map(str_0)
        min_0 = module_0.Min(map_0)
        first_0 = module_0.First(min_0)
        var_0 = first_0.concat(last_0)
        first_1 = module_0.First(bytes_0)
        str_1 = first_1.__str__()
        str_2 = first_1.__str__()
        str_3 = 'bgY4f`uSp :'
        var_1 = first_1.concat(str_3)
        str_4 = first_1.__str__()
        str_5 = '}k]CBr;b6hkU"'
        str_6 = first_1.__str__()
        first_2 = module_0.First(str_5)
        str_7 = first_2.__str__()
        float_0 = 2025.8
        int_0 = 3645
        one_0 = module_0.One(str_2)
        var_2 = one_0.concat(int_0)
        str_8 = '!b{F!ZfpMGQ'
        semigroup_0 = module_0.Semigroup(str_8)
        min_1 = module_0.Min(float_0)
        str_9 = min_1.__str__()
        float_1 = 726.4195445724739
        last_1 = module_0.Last(bytes_0)
        str_10 = last_1.__str__()
        max_0 = module_0.Max(float_1)
        var_3 = max_0.concat(min_1)
    except BaseException:
        pass