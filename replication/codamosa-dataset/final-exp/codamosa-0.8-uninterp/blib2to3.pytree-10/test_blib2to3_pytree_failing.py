# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = -1169
        list_0 = None
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1431
        leaf_0 = None
        list_0 = [leaf_0]
        str_0 = 'bESgD|=58DI'
        leaf_1 = None
        list_1 = [int_0, leaf_1]
        node_0 = module_0.Node(int_0, list_0, str_0, list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_4():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_5():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 1317
        none_type_0 = None
        var_0 = grammar_0.copy()
        list_0 = None
        tuple_0 = (int_0, none_type_0, var_0, list_0)
        var_1 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '02345V89'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = -1687
        str_1 = 'Dz1'
        tuple_0 = None
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '[>"|\\'
        int_0 = 204
        leaf_0 = module_0.Leaf(int_0, str_0)
        optional_0 = leaf_0.get_lineno()
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2758
        leaf_pattern_0 = module_0.LeafPattern(int_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 3284
        list_0 = []
        leaf_pattern_0 = module_0.LeafPattern()
        list_1 = [list_0]
        node_0 = module_0.Node(int_0, list_0, leaf_pattern_0, list_1)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_2.update_sibling_maps()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -722
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 38
        int_1 = -1829
        str_0 = '\n        Return the string immediately following the invocant node. This is\n        effectively equivalent to node.next_sibling.prefix\n        '
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "mA{334~vq*'z+a"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bytes_0 = b'\xcb\x91\xa5\xeapY\xd1\xe7b'
        bool_0 = wildcard_pattern_0.match_seq(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '02345V9'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        negated_pattern_0 = module_0.NegatedPattern(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '02345V89'
        int_0 = -3916
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ')'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 696
        list_0 = []
        grammar_0 = module_1.Grammar()
        node_0 = module_0.Node(int_0, list_0, any_0, grammar_0)
        str_1 = node_0.__str__()
        negated_pattern_0 = module_0.NegatedPattern()
        float_0 = None
        bool_0 = wildcard_pattern_0.match(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 1205
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_2.clone()
        node_4 = node_3.clone()
        int_1 = None
        node_3.set_child(int_1, node_4)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 355
        optional_0 = None
        node_pattern_0 = module_0.NodePattern(int_0, optional_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 226
        str_0 = '7)1F%'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        negated_pattern_0 = module_0.NegatedPattern()
        list_0 = [leaf_pattern_0, int_0, negated_pattern_0]
        bool_0 = False
        bool_1 = negated_pattern_0.match(bool_0)
        leaf_0 = module_0.Leaf(int_0, str_0, list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '02345V9'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 740
        list_0 = [wildcard_pattern_0, str_0, int_0, int_0]
        wildcard_pattern_1 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_1.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        bool_0 = negated_pattern_0.match_seq(int_0, list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 721
        list_0 = []
        grammar_0 = module_1.Grammar()
        node_0 = module_0.Node(int_0, list_0, list_0)
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(node_0)
        node_1 = node_0.clone()
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 19
        str_0 = 'R*Ss`#vc\rnKh&wWTyj'
        str_1 = 'iM\nG2W/W'
        int_1 = 355
        int_2 = -6
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_1, tuple_0)
        list_0 = [str_1, int_0]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0, list_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        leaf_3 = leaf_2.clone()
        leaf_4 = leaf_3.clone()
        leaf_5 = leaf_4.clone()
        str_2 = 'Q7\r;n8FB_;\nT]X[UM'
        leaf_pattern_0 = module_0.LeafPattern(str_2, str_2)
    except BaseException:
        pass

def test_case_24():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = -3103
        node_pattern_0 = module_0.NodePattern(int_0, int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 878
        list_0 = []
        list_1 = [int_0, int_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        list_2 = [node_0, node_0]
        node_1 = module_0.Node(int_0, list_2)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '239'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        str_1 = 'Cq^":_GPw\tomJ1:|'
        bool_0 = wildcard_pattern_0.match(str_1)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 5385
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 14
        str_0 = 'qa'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bytes_0 = b'\xd9h\xbbK\xa4\xc7\xf3b\xd7 kk'
        grammar_0 = module_1.Grammar()
        bool_0 = wildcard_pattern_0.match_seq(bytes_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 5389
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_0.insert_child(int_0, node_0)
    except BaseException:
        pass

def test_case_30():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -2839
        str_0 = 'Z?1@y*Nz@&=c'
        optional_0 = None
        set_0 = {int_0}
        tuple_0 = (int_0, str_0, optional_0, set_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = "Xn!\n@QvHT'Z\r0"
        grammar_0 = module_1.Grammar()
        int_0 = -411
        int_1 = 3009
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        list_0 = [int_0, grammar_0]
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '023V9'
        int_0 = 37
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 2796
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        str_1 = 'Vr$3aI'
        str_2 = None
        dict_0 = {str_2: int_1, str_1: leaf_pattern_0, str_2: str_2, str_2: str_2}
        negated_pattern_0 = module_0.NegatedPattern(dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 136
        str_0 = 'a'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        iterator_0 = leaf_0.leaves()
        iterator_1 = leaf_0.post_order()
        iterator_2 = leaf_1.leaves()
        iterator_3 = leaf_0.post_order()
        iterator_4 = leaf_1.leaves()
        iterator_5 = leaf_1.leaves()
        str_1 = leaf_1.__str__()
        optional_0 = leaf_1.get_lineno()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_1)
        str_2 = leaf_0.__repr__()
        optional_1 = leaf_1.get_lineno()
        int_1 = 696
        list_1 = []
        grammar_0 = module_1.Grammar()
        any_0 = wildcard_pattern_0.optimize()
        list_2 = [leaf_1]
        node_0 = module_0.Node(int_1, list_2, list_1, str_2)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        str_3 = 'Dy}UiQt$\td&!ncmWc\x0bm>'
        tuple_0 = (wildcard_pattern_0, str_3)
        bool_1 = wildcard_pattern_0.match_seq(tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'n'
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 239
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_0.clone()
        leaf_3 = leaf_2.clone()
        leaf_4 = leaf_3.clone()
        leaf_5 = leaf_4.clone()
        var_0 = leaf_pattern_0.match(leaf_4)
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0)
        var_1 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '023V9'
        optional_0 = None
        node_pattern_0 = module_0.NodePattern(optional_0, str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '023V9'
        int_0 = 37
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 2796
        list_0 = [leaf_0]
        node_0 = module_0.Node(int_1, list_0, str_0)
        node_0.append_child(leaf_0)
        int_2 = -1295
        list_1 = [leaf_0, leaf_0, leaf_0]
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        var_0 = leaf_pattern_0.match(leaf_0)
        var_1 = leaf_pattern_0.match(leaf_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_1 = leaf_0.clone()
        node_0.invalidate_sibling_maps()
        grammar_0 = module_1.Grammar()
        int_3 = 1450
        tuple_0 = (int_3, int_2)
        tuple_1 = (str_0, tuple_0)
        node_0.update_sibling_maps()
        tuple_2 = (int_3, str_0, tuple_1, list_1)
        var_2 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = ')'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        str_1 = 'Y2345VB9'
        int_0 = 14
        set_0 = {any_0, int_0, str_0, str_1}
        iterator_0 = wildcard_pattern_0.generate_matches(set_0)
        str_2 = 'qa'
        leaf_0 = module_0.Leaf(int_0, str_2)
        leaf_1 = leaf_0.clone()
        iterator_1 = leaf_1.post_order()
        str_3 = leaf_1.__str__()
        wildcard_pattern_1 = module_0.WildcardPattern(str_1, int_0, int_0, str_2)
        str_4 = leaf_0.__repr__()
        iterator_2 = leaf_0.post_order()
        bytes_0 = b'\x01\xa8\r\xfe06\\c\x13{Z\xa5\x16'
        int_1 = 696
        list_0 = []
        int_2 = -1045
        int_3 = 2140
        list_1 = [bytes_0, int_1, leaf_1]
        node_0 = module_0.Node(int_3, list_0, list_1)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_2.insert_child(int_2, leaf_0)
        grammar_0 = module_1.Grammar()
        node_3 = module_0.Node(int_1, list_0, any_0, grammar_0)
        str_5 = node_3.__str__()
        bool_0 = wildcard_pattern_1.match_seq(bytes_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 1
        str_0 = 'qa'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        negated_pattern_1 = module_0.NegatedPattern()
        any_1 = wildcard_pattern_0.optimize()
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 1
        str_0 = 'a'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
    except BaseException:
        pass

def test_case_40():
    try:
        var_0 = []
        int_0 = 1000
        node_0 = module_0.Node(int_0, var_0)
        iterator_0 = node_0.post_order()
        var_1 = [x.value for x in iterator_0]
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'ecUqhu0~C9\r'
        int_0 = 1
        str_1 = 'N#e'
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_0, int_0, str_1)
        bytes_0 = b'=\xc0\x99\xfbG{'
        leaf_0 = module_0.Leaf(int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        leaf_pattern_0 = module_0.LeafPattern()
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = leaf_pattern_0.match(leaf_0, negated_pattern_0)
        grammar_0 = module_1.Grammar()
        leaf_1 = leaf_0.clone()
        bool_0 = wildcard_pattern_0.match_seq(bytes_0)
    except BaseException:
        pass

def test_case_42():
    try:
        var_0 = []
        int_0 = 1000
        node_0 = module_0.Node(int_0, var_0)
        iterator_0 = node_0.pre_order()
        var_1 = [x.value for x in iterator_0]
    except BaseException:
        pass