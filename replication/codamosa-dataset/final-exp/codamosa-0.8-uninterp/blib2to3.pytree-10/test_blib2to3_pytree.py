# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 5387
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    int_0 = 5380
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_3():
    str_0 = '[>"|\\'
    int_0 = 204
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_4():
    int_0 = 1
    str_0 = '?a_)%'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_5():
    int_0 = 226
    str_0 = '7)1F%'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_6():
    str_0 = '02345V89'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_7():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_8():
    str_0 = '02345V89'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_9():
    str_0 = 'H'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_10():
    str_0 = '239'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    negated_pattern_1 = module_0.NegatedPattern()

def test_case_11():
    str_0 = '02345V9'
    int_0 = 23
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    str_1 = leaf_1.__str__()

def test_case_12():
    str_0 = '023V9'
    int_0 = 37
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_1)

def test_case_13():
    str_0 = '02345V9'
    int_0 = 37
    str_1 = 'pqa'
    leaf_0 = module_0.Leaf(int_0, str_1)
    str_2 = leaf_0.__str__()
    leaf_1 = leaf_0.clone()
    str_3 = leaf_1.__str__()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    int_1 = 1380
    list_0 = [leaf_1]
    node_0 = module_0.Node(int_1, list_0)
    node_1 = node_0.clone()
    node_1.invalidate_sibling_maps()
    any_0 = wildcard_pattern_0.optimize()
    wildcard_pattern_1 = module_0.WildcardPattern(str_0)
    any_1 = wildcard_pattern_1.optimize()

def test_case_14():
    str_0 = 'bEp'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    tuple_0 = ()
    bool_0 = wildcard_pattern_0.match_seq(tuple_0)

def test_case_15():
    str_0 = ''
    str_1 = 'H'
    wildcard_pattern_0 = module_0.WildcardPattern(str_1)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    negated_pattern_1 = module_0.NegatedPattern(negated_pattern_0)
    iterator_0 = negated_pattern_1.generate_matches(str_0)
    negated_pattern_2 = module_0.NegatedPattern()
    int_0 = 504
    wildcard_pattern_1 = module_0.WildcardPattern(str_1, int_0)
    any_1 = wildcard_pattern_1.optimize()
    negated_pattern_3 = module_0.NegatedPattern(any_1)
    str_2 = '0)'
    bool_0 = negated_pattern_2.match_seq(str_2)

def test_case_16():
    str_0 = '023V9'
    int_0 = 37
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2796
    list_0 = [leaf_0]
    node_0 = module_0.Node(int_1, list_0, str_0)
    node_0.append_child(leaf_0)

def test_case_17():
    str_0 = '023VH9'
    int_0 = 37
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    str_1 = 'EE+VCJS&,zcJ|'
    str_2 = 'MK&OnkY9EU7'
    int_1 = 669
    int_2 = 27
    tuple_0 = (int_1, int_2)
    tuple_1 = (str_2, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_1, tuple_1)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()
    grammar_0 = module_1.Grammar()
    var_0 = grammar_0.copy()
    var_1 = leaf_pattern_0.match(leaf_2, var_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    wildcard_pattern_1 = module_0.WildcardPattern(str_0)

def test_case_18():
    str_0 = '[>"|\\'
    int_0 = 204
    leaf_0 = module_0.Leaf(int_0, str_0)
    optional_0 = leaf_0.get_lineno()

def test_case_19():
    grammar_0 = module_1.Grammar()
    int_0 = 59
    str_0 = 'V\r=|P_iH'
    leaf_0 = None
    int_1 = None
    tuple_0 = None
    list_0 = [leaf_0]
    tuple_1 = (int_1, str_0, tuple_0, list_0)
    var_0 = module_0.convert(grammar_0, tuple_1)
    list_1 = []
    tuple_2 = (int_0, str_0, leaf_0, list_1)
    var_1 = module_0.convert(grammar_0, tuple_2)
    str_1 = 'H'
    wildcard_pattern_0 = module_0.WildcardPattern(str_1)
    any_0 = wildcard_pattern_0.optimize()

def test_case_20():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.post_order()
    var_0 = list(iterator_0)
    leaf_1 = leaf_0.clone()

def test_case_21():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.pre_order()
    var_0 = list(iterator_0)
    leaf_1 = leaf_0.clone()

def test_case_22():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.leaves()
    var_0 = list(iterator_0)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_0.clone()

def test_case_23():
    int_0 = 1
    str_0 = 'hello'
    leaf_0 = module_0.Leaf(int_0, str_0)
    bool_0 = leaf_0.__eq__(leaf_0)

def test_case_24():
    int_0 = 1
    str_0 = 'hello'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    bool_0 = leaf_1.__eq__(int_0)