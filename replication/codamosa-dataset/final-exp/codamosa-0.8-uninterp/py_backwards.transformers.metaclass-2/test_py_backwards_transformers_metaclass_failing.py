# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.metaclass as module_1

def test_case_0():
    try:
        str_0 = "2 ['w,Cv^T'\\\ng~,;A&&"
        list_0 = [str_0, str_0]
        module_x_var_0 = module_0.Module(*list_0)
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        module_x_var_1 = metaclass_transformer_0.visit_Module(module_x_var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        class_def_0 = module_0.ClassDef()
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0, list_0]
        class_def_0 = module_0.ClassDef(*list_1)
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
        a_s_t_1 = module_0.AST()
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_1)
        class_def_2 = metaclass_transformer_1.visit_ClassDef(class_def_1)
        class_def_3 = None
        a_s_t_2 = module_0.AST()
        metaclass_transformer_2 = module_1.MetaclassTransformer(a_s_t_2)
        class_def_4 = metaclass_transformer_2.visit_ClassDef(class_def_3)
    except BaseException:
        pass