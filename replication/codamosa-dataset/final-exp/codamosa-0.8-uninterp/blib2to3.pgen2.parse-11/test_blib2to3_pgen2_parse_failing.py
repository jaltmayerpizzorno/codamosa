# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 4257
        str_0 = '\']Uf3D"c9+'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        set_0 = None
        list_0 = [set_0, str_0]
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -2806
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        dict_0 = {grammar_0: grammar_0, grammar_0: grammar_0}
        parser_0 = module_1.Parser(grammar_0, dict_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -2247
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 2322
        str_0 = '\t'
        int_1 = -1424
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        parse_error_0 = module_1.ParseError(str_0, int_0, str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        grammar_1 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0, grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 3845
        str_0 = 'iCdsX6"3Pa'
        int_1 = -2060
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.shift(int_0, str_0, int_0, tuple_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 8
        list_0 = None
        dict_0 = {}
        tuple_0 = (list_0, dict_0)
        int_1 = 568
        str_0 = 'Qp>\r693:R(Wg'
        int_2 = None
        tuple_1 = (int_2, int_1)
        tuple_2 = (str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_0, int_1, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        grammar_1 = module_0.Grammar()
        grammar_2 = None
        int_0 = 1733
        optional_0 = None
        parser_1 = module_1.Parser(grammar_1)
        optional_1 = None
        tuple_0 = (int_0, optional_0, parser_0, optional_1)
        var_0 = module_1.lam_sub(grammar_2, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        str_0 = 'bwQ:jI-S(JM'
        tuple_0 = None
        int_1 = parser_0.classify(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'ab'
        int_0 = 1
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        str_1 = None
        bool_0 = parser_0.addtoken(int_0, str_1, tuple_1)
    except BaseException:
        pass