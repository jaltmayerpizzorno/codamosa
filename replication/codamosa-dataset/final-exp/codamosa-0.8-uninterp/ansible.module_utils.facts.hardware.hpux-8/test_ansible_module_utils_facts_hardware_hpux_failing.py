# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.hpux as module_0

def test_case_0():
    try:
        float_0 = 1000.0
        h_p_u_x_hardware_0 = module_0.HPUXHardware(float_0)
        var_0 = h_p_u_x_hardware_0.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'b\xe2\xb6\xa2\x15\xfb'
        h_p_u_x_hardware_0 = module_0.HPUXHardware(bytes_0)
        var_0 = h_p_u_x_hardware_0.get_hw_facts()
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = {}
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0)
        str_0 = 'ansible_architecture'
        str_1 = 'ansible_distribution_version'
        str_2 = 'ia64'
        str_3 = {str_0: str_2, str_1: str_0}
        var_1 = h_p_u_x_hardware_0.get_cpu_facts(str_3)
        h_p_u_x_hardware_collector_0 = module_0.HPUXHardwareCollector(h_p_u_x_hardware_0)
        var_2 = h_p_u_x_hardware_0.get_memory_facts(h_p_u_x_hardware_collector_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = {}
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0)
        str_0 = 'ansible_architecture'
        str_1 = 'ansible_distribution_version'
        str_2 = 'ia64'
        str_3 = {str_0: str_2, str_1: str_2}
        var_1 = h_p_u_x_hardware_0.get_cpu_facts(str_3)
        str_4 = ',;Z\x0cd2XeBkqA*?V2&^:'
        var_2 = h_p_u_x_hardware_0.get_hw_facts(str_4)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = {}
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0)
        str_0 = 'ansible_architecture'
        str_1 = 'ansible_distribution_version'
        str_2 = '9000/800'
        var_1 = {}
        var_2 = {str_0: str_2, str_1: str_2, str_2: var_1}
        var_3 = h_p_u_x_hardware_0.get_cpu_facts(var_2)
    except BaseException:
        pass