# Automatically generated by Pynguin.
import cookiecutter.prompt as module_0
import collections as module_1

def test_case_0():
    try:
        str_0 = 'hg'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.read_user_variable(str_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        float_0 = 1829.0
        var_0 = module_0.read_user_yes_no(float_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'CCE >&1Flpi*h}m)_'
        var_0 = module_0.read_repo_password(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = None
        bool_0 = True
        var_0 = module_0.read_user_choice(float_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ordered_dict_0 = module_1.OrderedDict()
        var_0 = module_0.process_json(ordered_dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Yj-5h%0w\r'
        var_0 = module_0.read_user_dict(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 378.8672
        dict_0 = {float_0: float_0, float_0: float_0}
        list_0 = [float_0]
        bytes_0 = b'~h\xea\xda\xe8\xb6\x9c\xcan\xa4N)\x1dr\x16\xec'
        var_0 = module_0.render_variable(dict_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        set_0 = None
        str_0 = "ON+z7sGH#G.PM}@'Lp\rJ"
        var_0 = module_0.render_variable(list_0, set_0, str_0)
        bytes_0 = b'C\x88\xe8QR\xde\x8enV*~\xef'
        tuple_0 = ()
        var_1 = module_0.read_user_dict(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        tuple_0 = (dict_0,)
        list_0 = [tuple_0]
        complex_0 = None
        float_0 = 2277.8707
        var_0 = module_0.prompt_choice_for_config(tuple_0, list_0, complex_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 1320.447235
        var_0 = module_0.prompt_for_config(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        int_0 = None
        tuple_0 = (bool_0, int_0)
        dict_0 = {bool_0: int_0}
        str_0 = 'Cookiecutter %(version)s from {} (Python {})'
        str_1 = 'dLrg8`\\O5{\x0cu#~B'
        set_0 = set()
        var_0 = module_0.prompt_choice_for_config(tuple_0, dict_0, str_0, str_1, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        var_0 = module_0.read_user_dict(dict_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 378.8672
        dict_0 = {float_0: float_0, float_0: float_0}
        list_0 = [float_0]
        var_0 = module_0.render_variable(list_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 873
        str_0 = '\n    Exception for out-of-scope variables.\n\n    Raised when a template uses a variable which is not defined in the\n    context.\n    '
        dict_0 = {}
        list_0 = [dict_0, int_0, str_0]
        var_0 = module_0.prompt_choice_for_config(int_0, str_0, dict_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        str_0 = '93mdBxA4rGR+#:fA#n!'
        list_0 = []
        bool_1 = True
        var_0 = module_0.prompt_choice_for_config(bool_0, str_0, list_0, list_0, bool_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'J26;y"egJecg-Odnu'
        set_0 = None
        str_1 = '|4E9'
        str_2 = None
        dict_0 = {str_1: str_1, str_0: set_0, str_2: str_0}
        ordered_dict_0 = module_1.OrderedDict()
        var_0 = module_0.prompt_choice_for_config(str_0, set_0, dict_0, ordered_dict_0, ordered_dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -3014
        bytes_0 = b'\x1a('
        list_0 = [int_0]
        var_0 = module_0.read_user_choice(bytes_0, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '{}'
        var_0 = module_0.process_json(str_0)
        list_0 = [str_0, str_0, var_0]
        var_1 = module_0.read_user_dict(list_0, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '["foo", "bar"]'
        var_0 = module_0.process_json(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        ordered_dict_0 = module_1.OrderedDict()
        str_0 = None
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, str_0, dict_0, ordered_dict_0]
        int_0 = None
        var_0 = module_0.prompt_choice_for_config(ordered_dict_0, dict_0, str_0, list_0, int_0)
    except BaseException:
        pass