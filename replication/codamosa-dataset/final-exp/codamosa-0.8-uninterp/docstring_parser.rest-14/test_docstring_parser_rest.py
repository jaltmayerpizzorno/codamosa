# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n    Summary line.\n\n    Extended description.\n    Extended description continued.\n\n    :param a: parameter a.\n    :param b: parameter b.\n    :type b: str\n    :param c: parameter c.\n    :type c: int, optional\n    :param d: parameter d.\n    :type d: bool, optional\n    :param e: parameter e.\n        defaults to 1.\n    :return: something\n    :rtype: str\n    :raises: exception\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = 'Parse the Google-style docstring into its components.\n\n        :returns: parsed docstring\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = '\n        The quick brown fox jumps over the lazy dog.\n\n        :param int x: The x coordinate.\n\n        :param int y: The y coordinate.\n        :param int width: The width of the window.\n        :param int height: The height of the window.\n        :param int color?: The color of the window. Optional.\n\n        :returns int: The area of the window.\n        :raises ValueError: if color is out of range.\n        :raises ValueError: if height or width are negative.\n\n        :yields: The build string.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = ';1U'
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        return_name : type\n            A description of this returned value\n        another_type\n            Return names are optional, types are required\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'Parse the Google-style docstring io its components.\n\n        :rturns: parsed docstring\n        '
    docstring_0 = module_0.parse(str_0)