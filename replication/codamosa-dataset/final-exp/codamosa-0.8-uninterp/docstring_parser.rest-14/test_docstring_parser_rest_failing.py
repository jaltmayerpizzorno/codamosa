# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    try:
        str_0 = ':m`vRz9jH`['
        docstring_0 = module_0.parse(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\n        The quick brown fox jumps over the lazy dog.\n\n        :param int x: The x coordinate.\n\n        :param int y: The y coordinate.\n        :param int width: The width of the window.\n        :param int height: The height of the window.\n        :param int color?: The color of the window. Optional.\n\n        :returns int: The area of the window.\n        :raises ValueError: if color is out of range.\n        :raises ValueError: if height or width are negative.\n\n        :yields: The build string.\n    '
        docstring_0 = module_0.parse(str_0)
        str_1 = 'FvyVS[0;WgyQ5(P*(t'
        docstring_1 = module_0.parse(str_1)
        docstring_2 = module_0.parse(str_1)
        str_2 = '-RSV|.o'
        str_3 = 'Ad +\t8'
        docstring_3 = module_0.parse(str_3)
        docstring_4 = module_0.parse(str_2)
        str_4 = '.`])k`B'
        docstring_5 = module_0.parse(str_4)
        docstring_6 = module_0.parse(str_2)
        str_5 = '9GBtl*\n:h&Wr}E0/'
        docstring_7 = module_0.parse(str_5)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Parse the ReST-style docstring into its components.\n\n    :arg:\n    :param foo:\n    :type foo:\n    :param bar:\n    :type bar:\n    :returns: parsed docstring\n    :rtype: dict\n    :raises TypeError: if an invalid type is given\n    '
        docstring_0 = module_0.parse(str_0)
    except BaseException:
        pass