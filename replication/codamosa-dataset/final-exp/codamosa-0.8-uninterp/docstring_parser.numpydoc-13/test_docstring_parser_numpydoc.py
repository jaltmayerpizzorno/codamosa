# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n    A function that does one thing.\n\n    And then another.\n\n    Parameters\n    ----------\n    param1 : something\n        A parameter.\n    param2 (optional)\n        Another parameter.\n    other_param : something else\n        Next parameter.\n    attribute : read-only\n        An attribute.\n    yields : another type\n        A yielded value.\n    receives : third type\n        A received value.\n    References\n    ----------\n    * read-only\n    * optional, defaults to foo\n    * parameter\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_3():
    str_0 = '\n        Short summary.\n\n        Longer description.\n\n        Parameters\n        ----------\n        param_name : type, optional\n            Description of the parameter.\n\n        Other Parameters\n        ----------------\n        other_param_name : type\n            Description of another parameter.\n\n        Returns\n        -------\n        return_name : type\n            Description of the returns.\n\n        Examples\n        --------\n        Example usage of function.\n\n        See Also\n        --------\n        * Other function to see.\n\n        Warnings\n        --------\n        Warnings.\n\n        References\n        ----------\n        * References.\n\n        .. deprecated:: 1.0.0\n            Use new_function instead.\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = 'Parse the Google-style docstring into its components.\n\n        :returns: parsed docstring\n        '
    section_0 = module_0.Section(str_0, str_0)
    var_0 = numpydoc_parser_0.add_section(section_0)
    str_1 = '\n    Short Description\n\n    Long Description\n\n    Parameters\n    ----------\n    param : type, optional\n        Description of the parameter.\n    other_param : type\n        Description\n\n    Returns\n    -------\n    type\n        Description\n\n    Raises\n    ------\n    ValueError\n        Description\n\n    Warns\n    -----\n    Warning\n        Description\n\n    Returns\n    -------\n    type\n        Description\n\n    Yields\n    ------\n    type\n        Description\n\n    Examples\n    --------\n    >>> a\n    1\n    '
    docstring_0 = module_0.parse(str_1)
    var_1 = len(str_1)

def test_case_5():
    str_0 = '\n'
    str_1 = 'wVPF3},Op#`wxWdq'
    str_2 = '`g4^$'
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_2)
    iterable_0 = deprecation_section_0.parse(str_1)
    str_3 = None
    yields_section_0 = module_0.YieldsSection(str_0, str_3)
    docstring_0 = module_0.parse(str_3)

def test_case_6():
    str_0 = '3^'
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_7():
    str_0 = 'Parameters\n    ----------\n    param_1 : type\n        param_1 description\n\n    param_2 : type, optional\n        param_2 description\n\n    param_3 : type\n        default: 20\n        param_3 description\n\n    param_4 : type, optional\n        default: 30\n        param_4 description\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '\n        This function computes the sum of two numbers.\n\n        Parameters\n        ----------\n        a : int, float or complex4            First element to sum\n        b : int, float or complex\n            Second element to sum\n\n        Returns\n        -------\n        res : int, float or coplex\n            Sum of `a` and `b`\n        '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_9():
    str_0 = '\n        This function computes the sum of two numbers.\n\n        Parameters\n        ----------\n        a : int, float or complex\n            First element to sum\n        b : int, float or complex\n            Second element to sum\n\n        Returns\n        -------\n        res : int, float or coplex\n            Sum of `a` and `b`\n        '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_10():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '\n    Short Description\n\n    Long Description\n\n    Parameters\n    ----------\n    param : type, optional\n        Description of the parameter.\n    other_param : type\n        Description\n\n    Returns\n    -------\n    type\n        Description\n\n    Raises\n    ------\n    ValueError\n        Description\n\n    Warns\n    -----\n    Warning\n        Description\n\n    Returns\n    -------\n    type\n        Description\n\n    Yields\n    ------\n    type\n        Description\n\n    Examples\n    --------\n    >>> a\n    1\n    '
    docstring_0 = numpydoc_parser_0.parse(str_0)