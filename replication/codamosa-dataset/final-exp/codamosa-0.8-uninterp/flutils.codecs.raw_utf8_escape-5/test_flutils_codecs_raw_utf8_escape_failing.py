# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        module_0.register()
        str_0 = ''
        tuple_0 = module_0.encode(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '1E'
        tuple_0 = module_0.encode(str_0, str_0)
        list_0 = []
        tuple_1 = module_0.decode(list_0, str_0)
        str_1 = '\\+-\nGL'
        tuple_2 = module_0.decode(str_1, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x14\xc7'
        int_0 = 70
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        tuple_1 = module_0.encode(user_string_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xea\xc3LP'
        tuple_0 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\\+-GL'
        tuple_0 = module_0.decode(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        user_string_0 = module_1.UserString(dict_0)
        module_0.register()
        bytes_0 = b'$\x13\x96'
        int_0 = 5
        tuple_0 = (bytes_0, int_0)
        user_string_1 = module_1.UserString(tuple_0)
        module_0.register()
        tuple_1 = module_0.encode(user_string_0)
        tuple_2 = module_0.encode(user_string_1)
    except BaseException:
        pass

def test_case_6():
    try:
        module_0.register()
        str_0 = 'eutf8h'
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Hsnvh5_~\noSy>a:G'
        tuple_0 = module_0.encode(str_0)
        module_0.register()
        module_0.register()
        user_string_0 = None
        tuple_1 = module_0.encode(user_string_0, user_string_0)
    except BaseException:
        pass

def test_case_8():
    try:
        module_0.register()
        str_0 = '\x0cdIsv)n{2iFgj@I8O'
        bytes_0 = b'\x10\xa2\xdd'
        tuple_0 = module_0.decode(bytes_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        module_0.register()
        bytes_0 = b'\xe3$\x15\xa1A\xc9+\x13\xbf\xc8\x17'
        user_string_0 = module_1.UserString(bytes_0)
        tuple_0 = module_0.encode(user_string_0, user_string_0)
    except BaseException:
        pass