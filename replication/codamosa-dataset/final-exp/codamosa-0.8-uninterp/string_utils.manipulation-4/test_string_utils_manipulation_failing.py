# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        int_0 = 1092
        str_0 = module_0.roman_encode(int_0)
        str_1 = None
        str_2 = 'p5or'
        str_3 = module_0.compress(str_1, str_2)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 442
        str_0 = module_0.roman_encode(int_0)
        str_1 = '|'
        str_2 = module_0.snake_case_to_camel(str_1)
        str_3 = 'u'
        list_0 = [str_3, str_3]
        dict_0 = {}
        var_0 = module_0.camel_case_to_snake(list_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 5
        str_0 = module_0.roman_encode(int_0)
        str_1 = '#LZu\x0c('
        bool_0 = module_0.booleanize(str_1)
        str_2 = '`d\nZ--^@{41\nyO.XF'
        str_3 = 'is_decimal'
        str_4 = '?f}vzg4[5?]\tl^'
        str_5 = module_0.prettify(str_4)
        var_0 = module_0.camel_case_to_snake(str_2, str_3)
        list_0 = [str_2]
        string_formatter_0 = module_0.__StringFormatter(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 4125
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '-]V<3P'
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\r{4\r*TF\tQWe*n>Y'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '-]V<3P'
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        str_1 = module_0.compress(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ')<?'
        str_1 = module_0.slugify(str_0)
        str_2 = module_0.decompress(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'S\x9bp\xf2t\xa6\x1a'
        dict_0 = {bytes_0: bytes_0}
        string_formatter_0 = module_0.__StringFormatter(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'b9V!XU]\n'
        str_1 = module_0.shuffle(str_0)
        str_2 = module_0.reverse(str_0)
        str_3 = 'camel_case_to_snake'
        str_4 = module_0.shuffle(str_3)
        str_5 = module_0.strip_margin(str_3)
        str_6 = "^4'nWe:uFN<Z\x0cb/ZM*"
        str_7 = module_0.reverse(str_6)
        str_8 = module_0.slugify(str_3)
        str_9 = None
        str_10 = module_0.reverse(str_9)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '{Fo7'
        var_0 = module_0.camel_case_to_snake(str_0)
        string_compressor_0 = module_0.__StringCompressor()
        roman_numbers_0 = module_0.__RomanNumbers()
        str_1 = module_0.snake_case_to_camel(str_0, str_0)
        int_0 = None
        str_2 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        int_0 = 802
        var_0 = module_0.camel_case_to_snake(bool_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        str_0 = "pv_`-LeZ'A9Tsk$%57"
        str_1 = module_0.strip_html(str_0)
        int_0 = 802
        var_0 = module_0.camel_case_to_snake(bool_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        str_1 = module_0.slugify(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ' JFQBc]q*'
        str_1 = module_0.reverse(str_0)
        str_2 = None
        str_3 = '\\ '
        str_4 = module_0.prettify(str_3)
        str_5 = module_0.strip_margin(str_2)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = "_)'4r=] =D1xBR"
        str_1 = module_0.strip_html(str_0)
        str_2 = ',Y]rYK4HYQuD8j'
        bool_0 = True
        str_3 = module_0.strip_html(str_1, bool_0)
        str_4 = "mDTv#DhKJTLbz'Mx\\"
        string_formatter_0 = module_0.__StringFormatter(str_4)
        str_5 = '7o,=9si"+#'
        str_6 = module_0.strip_html(str_5)
        dict_0 = {str_2: str_0}
        string_compressor_0 = module_0.__StringCompressor(**dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = None
        bool_0 = module_0.booleanize(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'L'
        int_0 = None
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'wguRV}l9bP&]n!Si'
        str_1 = '^([a-z]+\\d*_[a-z\\d_]*|_+[a-z\\d]+[a-z\\d_]*)$'
        int_0 = -4262
        str_2 = module_0.snake_case_to_camel(str_0)
        str_3 = module_0.compress(str_1, str_0, int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'ZrOF\tK|taCH[1l'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'u'
        str_1 = module_0.shuffle(str_0)
        str_2 = 'M'
        str_3 = module_0.compress(str_1)
        int_0 = module_0.roman_decode(str_2)
        str_4 = module_0.decompress(str_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '}zajZQ(8,l}NA'
        bool_0 = module_0.booleanize(str_0)
        str_1 = 'pe];"QY^uY06S.G.I'
        var_0 = module_0.camel_case_to_snake(str_1)
        string_compressor_0 = module_0.__StringCompressor()
        str_2 = 'V'
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = '_n'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = string_formatter_0.format()
        str_6 = module_0.prettify(str_1)
        str_7 = module_0.snake_case_to_camel(str_2)
        str_8 = string_formatter_0.format()
        str_9 = string_formatter_0.format()
        str_10 = module_0.shuffle(str_7)
        str_11 = "E5';Z\n-Ml"
        str_12 = module_0.compress(str_11)
        int_0 = 15
        str_13 = module_0.compress(str_7, int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '}zajcQ(8,l}UA'
        bool_0 = module_0.booleanize(str_0)
        str_1 = 'pe];"QY^uY06S.G.I'
        var_0 = module_0.camel_case_to_snake(str_1)
        string_compressor_0 = module_0.__StringCompressor()
        str_2 = 'V'
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = '_n'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = string_formatter_0.format()
        str_6 = "9U.wIU[n}W_D%Nigb'>."
        str_7 = module_0.snake_case_to_camel(str_6)
        str_8 = string_formatter_0.format()
        str_9 = string_formatter_0.format()
        str_10 = string_formatter_0.format()
        bool_1 = module_0.booleanize(str_0)
        str_11 = None
        str_12 = module_0.shuffle(str_11)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = -1709
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '}zajZQ(8,l}NA'
        bool_0 = module_0.booleanize(str_0)
        str_1 = 'pe];"QY^uY06S.G.I'
        var_0 = module_0.camel_case_to_snake(str_1)
        string_compressor_0 = module_0.__StringCompressor()
        str_2 = 'V'
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = '_n'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = module_0.prettify(str_1)
        str_6 = module_0.snake_case_to_camel(str_2)
        str_7 = string_formatter_0.format()
        str_8 = string_formatter_0.format()
        str_9 = module_0.shuffle(str_6)
        str_10 = "E5';Z\n-Ml"
        str_11 = module_0.compress(str_3)
        int_0 = 15
        str_12 = '%-S:So?G+j|l!'
        str_13 = module_0.compress(str_10, str_12, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = None
        str_1 = module_0.strip_html(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 3357
        str_0 = module_0.roman_encode(int_0)
        str_1 = 'u'
        str_2 = module_0.strip_html(str_1)
        str_3 = module_0.shuffle(str_1)
        str_4 = 'M'
        int_1 = module_0.roman_decode(str_4)
        str_5 = module_0.roman_encode(int_1)
        str_6 = None
        str_7 = "\n    Check if a string is a valid UUID.\n\n    *Example:*\n\n    >>> is_uuid('6f8aa2f9-686c-4ac3-8766-5712354a04cf') # returns true\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf') # returns false\n    >>> is_uuid('6f8aa2f9686c4ac387665712354a04cf', allow_hex=True) # returns true\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allow_hex: True to allow UUID hex representation as valid, false otherwise (default)\n    :type allow_hex: bool\n    :return: True if UUID, false otherwise\n    "
        str_8 = module_0.snake_case_to_camel(str_6, str_7)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'J+%MoM(RRl=]@im'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'lX'
        int_0 = module_0.roman_decode(str_0)
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = '\x0c(7\x0b7DPt>y="bh(~'
        bool_0 = module_0.booleanize(str_2)
        str_3 = 'u'
        str_4 = module_0.shuffle(str_3)
        str_5 = 'r8w\rVuE1F}gr{UZ\rds'
        str_6 = module_0.compress(str_5)
        str_7 = module_0.compress(str_5)
        int_1 = module_0.roman_decode(str_5)
    except BaseException:
        pass