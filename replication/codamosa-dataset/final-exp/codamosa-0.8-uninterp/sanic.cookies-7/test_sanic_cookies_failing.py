# Automatically generated by Pynguin.
import sanic.cookies as module_0

def test_case_0():
    try:
        str_0 = 'test'
        set_0 = {str_0, str_0, str_0}
        cookie_jar_0 = module_0.CookieJar(set_0)
        var_0 = cookie_jar_0.__delitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\n        Looks for prefixed environment variables and applies\n        them to the configuration if present. This is called automatically when\n        Sanic starts up to load environment variables into config.\n\n        It will automatically hyrdate the following types:\n\n        - ``int``\n        - ``float``\n        - ``bool``\n\n        Anything else will be imported as a ``str``.\n        '
        int_0 = -1536
        list_0 = [str_0, int_0, int_0]
        cookie_0 = module_0.Cookie(str_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'expires'
        str_1 = '@^$\t'
        cookie_0 = module_0.Cookie(str_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '$Y'
        cookie_0 = module_0.Cookie(str_0, str_0)
        bool_0 = False
        str_1 = 'max-age'
        var_0 = cookie_0.__setitem__(bool_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Y'
        cookie_0 = module_0.Cookie(str_0, str_0)
        bool_0 = False
        var_0 = cookie_0.encode(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '$Y'
        str_1 = None
        cookie_0 = module_0.Cookie(str_0, str_1)
        var_0 = cookie_0.__str__()
        bytes_0 = b''
        float_0 = -33.082
        cookie_1 = module_0.Cookie(bytes_0, float_0)
    except BaseException:
        pass