# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = module_0.unfrack_path()

def test_case_2():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_runtask_options(argument_parser_0)

def test_case_3():
    var_0 = module_0.version()

def test_case_4():
    str_0 = 'unit test'
    var_0 = module_0.create_base_parser(str_0)
    var_1 = module_0.add_runas_options(var_0)
    var_2 = module_0.add_runas_prompt_options(var_0)

def test_case_5():
    bool_0 = False
    var_0 = module_0.unfrack_path(bool_0)
    str_0 = '~/test'
    dict_0 = {var_0: var_0, bool_0: str_0}
    argument_parser_0 = module_1.ArgumentParser(dict_0, dict_0)
    var_1 = module_0.add_meta_options(argument_parser_0)

def test_case_6():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_vault_options(argument_parser_0)

def test_case_7():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_async_options(argument_parser_0)

def test_case_8():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_connect_options(argument_parser_0)

def test_case_9():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_output_options(argument_parser_0)
    var_1 = []
    var_2 = argument_parser_0.parse_args(var_1)
    str_0 = 'one_line'
    var_3 = None
    var_4 = getattr(var_2, str_0, var_3)

def test_case_10():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_inventory_options(argument_parser_0)
    var_1 = module_0.add_verbosity_options(argument_parser_0)
    var_2 = []
    var_3 = argument_parser_0.parse_args(var_2)

def test_case_11():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_tasknoplay_options(argument_parser_0)
    str_0 = '--task-tiLmeout'
    str_1 = '1000'
    str_2 = [str_0, str_1]
    var_1 = argument_parser_0.parse_args(str_2)

def test_case_12():
    str_0 = 'test'
    var_0 = module_0.create_base_parser(str_0)
    var_1 = module_0.add_subset_options(var_0)
    int_0 = 3
    var_2 = var_0._actions[int_0]
    var_3 = var_2.default
    var_4 = list(var_3)
    var_5 = var_0._actions[int_0]
    str_1 = 'unexpected default value for action.default; got %s'
    var_6 = str_1 % var_4
    var_7 = Exception(var_6)

def test_case_13():
    var_0 = module_0.version()
    str_0 = 'URy/JY'
    int_0 = -462
    var_1 = module_0.maybe_unfrack_path(int_0)
    bool_0 = True
    sorting_help_formatter_0 = None
    set_0 = {int_0, str_0, bool_0}
    dict_0 = {int_0: set_0, str_0: var_0, int_0: int_0}
    ansible_version_0 = module_0.AnsibleVersion(sorting_help_formatter_0, int_0, set_0, dict_0)
    dict_1 = {}
    list_0 = [int_0, var_0]
    argument_parser_0 = module_1.ArgumentParser(bool_0, ansible_version_0, dict_1, list_0)
    bool_1 = False
    str_1 = '\n    name: host_list\n    version_added: "2.4"\n    short_description: Parses a \'host list\' string\n    description:\n        - Parses a host list string as a comma separated values of hosts\n        - This plugin only applies to inventory strings that are not paths and contain a comma.\n'
    str_2 = 'xc'
    ansible_version_1 = module_0.AnsibleVersion(str_1, str_2, sorting_help_formatter_0, list_0, dict_0)
    var_2 = ansible_version_1.__call__(argument_parser_0, bool_1, sorting_help_formatter_0)
    var_3 = module_0.add_module_options(argument_parser_0)
    tuple_0 = ()
    bytes_0 = b'\xd9\xaa\x0b'
    bool_2 = True
    sorting_help_formatter_1 = None
    str_3 = '-dJ.km[UeS1I'
    prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_1, str_3)
    float_0 = 60.0
    int_1 = 0
    dict_2 = {sorting_help_formatter_1: int_1}
    str_4 = 'Pj3V"Jkjw5&_y-nP+?'
    unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, bytes_0, sorting_help_formatter_1, tuple_0, bytes_0, str_4)
    bytes_1 = None
    ansible_version_2 = module_0.AnsibleVersion(unrecognized_argument_0, dict_2, bytes_1)
    str_5 = 'c$Ih)}QXjp%S'
    var_4 = prepend_list_action_0.__call__(list_0, str_5, list_0)
    ansible_version_3 = module_0.AnsibleVersion(prepend_list_action_0, float_0, tuple_0, ansible_version_2)
    str_6 = '?'
    prepend_list_action_1 = module_0.PrependListAction(float_0, tuple_0, str_6, dict_2)
    bytes_2 = b'\x948\xd6\x97d\xc8\xf0a`\x90\xfa\xfc"\xe6H)vB\\]'
    var_5 = prepend_list_action_0.__call__(ansible_version_2, unrecognized_argument_0, bytes_2)
    var_6 = module_0.add_connect_options(bool_2)