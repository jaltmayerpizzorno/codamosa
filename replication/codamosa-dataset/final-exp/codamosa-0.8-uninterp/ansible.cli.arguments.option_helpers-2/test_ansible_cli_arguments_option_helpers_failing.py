# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x11\xe0 \xbf\xc2\x8f\xad_\x89'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bytes_0)
        tuple_0 = ()
        var_1 = sorting_help_formatter_0.add_arguments(tuple_0)
        list_0 = [bytes_0]
        var_2 = module_0.add_module_options(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x06\x939\xe1\xaf\x99\x80B\xa4'
        list_0 = [bytes_0, bytes_0, bytes_0]
        bytes_1 = b'31\xd63\x85\xb1\x85\xa5\x07\xb3\xb7\x8a'
        float_0 = 2951.823357
        bytes_2 = b'\xd3\xb4\xd8Sn=\xf4\x19\x8eP\xe1'
        float_1 = 0.001
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, float_0, bytes_2, float_1, float_1)
        str_0 = 'W;/zzW#LR:?l[Q3Y\x0c'
        prepend_list_action_0 = module_0.PrependListAction(bytes_1, list_0, unrecognized_argument_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        complex_0 = None
        var_0 = module_0.maybe_unfrack_path(complex_0)
        bytes_0 = b'\xbc\xed\x9c\xa7\xf0?\x02a/\x06\xf6~\x89\xbcSs\x04'
        float_0 = 0.5
        int_0 = 86400
        float_1 = -298.913
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, float_0, int_0, float_1)
        float_2 = 897.1388
        str_0 = '7>),k|^+.'
        int_1 = 1752
        var_1 = unrecognized_argument_0.__call__(float_2, str_0, int_1, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        dict_0 = {}
        tuple_0 = ()
        str_0 = 'A>>'
        prepend_list_action_0 = module_0.PrependListAction(tuple_0, str_0, dict_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(int_0, dict_0, prepend_list_action_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = None
        bool_0 = True
        str_0 = 'powershell_modules'
        float_1 = -3138.082
        list_0 = [str_0]
        prepend_list_action_0 = None
        tuple_0 = (float_1, list_0, prepend_list_action_0)
        int_0 = 3830
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(tuple_0, int_0)
        unrecognized_argument_0 = module_0.UnrecognizedArgument(str_0, sorting_help_formatter_0)
        var_0 = module_0.ensure_value(float_0, bool_0, unrecognized_argument_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 395.92
        var_0 = module_0.add_verbosity_options(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        var_0 = module_0.add_async_options(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = module_0.version()
        int_0 = -462
        var_1 = module_0.maybe_unfrack_path(int_0)
        sorting_help_formatter_0 = None
        str_0 = '-dJ.km[UeS1I'
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_0, str_0)
        int_1 = 0
        dict_0 = {sorting_help_formatter_0: int_1}
        unrecognized_argument_0 = module_0.UnrecognizedArgument(dict_0, dict_0)
        set_0 = None
        var_2 = module_0.add_check_options(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b"\xb6\xce'a\xc6\x9d\xb8<\t"
        var_0 = module_0.add_connect_options(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = module_0.version()
        float_0 = 47.841
        var_1 = module_0.add_inventory_options(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'K"k FRZR2hq;'
        var_0 = module_0.add_module_options(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 133
        set_0 = {int_0, int_0, int_0}
        bytes_0 = b'\xc8\x94\x94\x15\x97\r/\xb2Y\x10\xbe'
        dict_0 = None
        ansible_version_0 = module_0.AnsibleVersion(int_0, set_0, bytes_0, dict_0, bytes_0)
        var_0 = module_0.add_output_options(ansible_version_0)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_version_0 = None
        str_0 = "|Zg'I_-UX9a8P6L$wY"
        prepend_list_action_0 = module_0.PrependListAction(str_0, str_0)
        var_0 = module_0.add_runas_prompt_options(ansible_version_0, prepend_list_action_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '_PgyEXEazO;'
        var_0 = module_0.add_subset_options(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'test'
        var_0 = module_0.create_base_parser(str_0)
        var_1 = module_0.add_subset_options(var_0)
        int_0 = 3
        var_2 = var_0._actions[int_0]
        var_3 = module_0.add_basedir_options(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = module_0.version()
        float_0 = 1.5
        int_0 = -462
        var_1 = module_0.maybe_unfrack_path(int_0)
        bytes_0 = b'\xd9\xaa\x0b'
        bool_0 = False
        sorting_help_formatter_0 = None
        str_0 = '-dJ.km[UeS1I'
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_0, str_0)
        int_1 = 0
        str_1 = 'L|LuS^3'
        dict_0 = {sorting_help_formatter_0: int_1}
        unrecognized_argument_0 = module_0.UnrecognizedArgument(dict_0, dict_0)
        ansible_version_0 = module_0.AnsibleVersion(int_1, str_1, unrecognized_argument_0, float_0, bytes_0)
        var_2 = module_0.add_fork_options(bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = module_0.version()
        list_0 = []
        str_0 = 'URy JY'
        float_0 = 1.5
        int_0 = -462
        str_1 = 'T$I!\n}gyL6ke\x0b3m;/'
        list_1 = [str_0]
        bytes_0 = b':\x1b!'
        dict_0 = {bytes_0: int_0, float_0: var_0}
        str_2 = "r54p8iQG{\ra'"
        str_3 = '\n- name: Install apache httpd  (state=present is optional)\n  apt:\n    name: apache2\n    state: present\n\n- name: Update repositories cache and install "foo" package\n  apt:\n    name: foo\n    update_cache: yes\n\n- name: Remove "foo" package\n  apt:\n    name: foo\n    state: absent\n\n- name: Install the package "foo"\n  apt:\n    name: foo\n\n- name: Install a list of packages\n  apt:\n    pkg:\n    - foo\n    - foo-tools\n\n- name: Install the version \'1.00\' of package "foo"\n  apt:\n    name: foo=1.00\n\n- name: Update the repository cache and update package "nginx" to latest version using default release squeeze-backport\n  apt:\n    name: nginx\n    state: latest\n    default_release: squeeze-backports\n    update_cache: yes\n\n- name: Install the version \'1.18.0\' of package "nginx" and allow potential downgrades\n  apt:\n    name: nginx=1.18.0\n    state: present\n    allow_downgrade: yes\n\n- name: Install zfsutils-linux with ensuring conflicted packages (e.g. zfs-fuse) will not be removed.\n  apt:\n    name: zfsutils-linux\n    state: latest\n    fail_on_autoremove: yes\n\n- name: Install latest version of "openjdk-6-jdk" ignoring "install-recommends"\n  apt:\n    name: openjdk-6-jdk\n    state: latest\n    install_recommends: no\n\n- name: Update all packages to their latest version\n  apt:\n    name: "*"\n    state: latest\n\n- name: Upgrade the OS (apt-get dist-upgrade)\n  apt:\n    upgrade: dist\n\n- name: Run the equivalent of "apt-get update" as a separate step\n  apt:\n    update_cache: yes\n\n- name: Only run "update_cache=yes" if the last one is more than 3600 seconds ago\n  apt:\n    update_cache: yes\n    cache_valid_time: 3600\n\n- name: Pass options to dpkg on run\n  apt:\n    upgrade: dist\n    update_cache: yes\n    dpkg_options: \'force-confold,force-confdef\'\n\n- name: Install a .deb package\n  apt:\n    deb: /tmp/mypackage.deb\n\n- name: Install the build dependencies for package "foo"\n  apt:\n    pkg: foo\n    state: build-dep\n\n- name: Install a .deb package from the internet\n  apt:\n    deb: https://example.com/python-ppq_0.1-1_all.deb\n\n- name: Remove useless packages from the cache\n  apt:\n    autoclean: yes\n\n- name: Remove dependencies that are no longer required\n  apt:\n    autoremove: yes\n'
        ansible_version_0 = module_0.AnsibleVersion(list_1, bytes_0, dict_0, str_2, str_3)
        bool_0 = False
        prepend_list_action_0 = module_0.PrependListAction(str_1, ansible_version_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = module_0.version()
        int_0 = -462
        tuple_0 = ()
        sorting_help_formatter_0 = None
        str_0 = '-dJ.km[UeS1I'
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_0, str_0)
        int_1 = 0
        dict_0 = {sorting_help_formatter_0: int_1}
        unrecognized_argument_0 = module_0.UnrecognizedArgument(prepend_list_action_0, dict_0, tuple_0, sorting_help_formatter_0)
        tuple_1 = ()
        ansible_version_0 = None
        ansible_version_1 = module_0.AnsibleVersion(int_0, tuple_1, ansible_version_0)
        var_1 = prepend_list_action_0.__call__(unrecognized_argument_0, ansible_version_0, unrecognized_argument_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b''
        str_0 = 'av@z9On?|K'
        bool_0 = False
        tuple_0 = (bool_0,)
        list_0 = [bool_0, str_0, str_0]
        str_1 = '{Gv'
        prepend_list_action_0 = module_0.PrependListAction(tuple_0, list_0, str_1)
        var_0 = module_0.ensure_value(bytes_0, str_0, prepend_list_action_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = module_0.version()
        ansible_version_0 = None
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(ansible_version_0)
        var_1 = module_0.add_fork_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = module_0.version()
        list_0 = []
        int_0 = -462
        var_1 = module_0.maybe_unfrack_path(int_0)
        bool_0 = False
        tuple_0 = (list_0,)
        argument_parser_0 = module_1.ArgumentParser(bool_0, tuple_0)
        var_2 = module_0.add_check_options(argument_parser_0)
        tuple_1 = ()
        bytes_0 = b'\xd9\xaa\x0b'
        sorting_help_formatter_0 = None
        str_0 = '-dJ.km[UeS1I'
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_0, str_0)
        float_0 = 60.0
        int_1 = 0
        dict_0 = {sorting_help_formatter_0: int_1}
        str_1 = 'Pj3V"Jkjw5&_y-nP+?'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, bytes_0, sorting_help_formatter_0, tuple_1, bytes_0, str_1)
        bytes_1 = None
        ansible_version_0 = module_0.AnsibleVersion(unrecognized_argument_0, dict_0, bytes_1)
        ansible_version_1 = module_0.AnsibleVersion(prepend_list_action_0, float_0, tuple_1, ansible_version_0)
        str_2 = '?'
        prepend_list_action_1 = module_0.PrependListAction(float_0, tuple_1, str_2, dict_0)
        bytes_2 = b'\x948\xd6\x97d\xc8\xf0a`\x90\xfa\xfc"\xe6H)vB\\]'
        var_3 = prepend_list_action_0.__call__(ansible_version_0, unrecognized_argument_0, bytes_2)
        var_4 = module_0.add_connect_options(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = module_0.version()
        str_0 = 'URy/JY'
        int_0 = -462
        var_1 = module_0.maybe_unfrack_path(int_0)
        tuple_0 = ()
        sorting_help_formatter_0 = None
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_0, str_0)
        int_1 = 0
        dict_0 = {sorting_help_formatter_0: int_1}
        unrecognized_argument_0 = module_0.UnrecognizedArgument(prepend_list_action_0, dict_0, tuple_0, sorting_help_formatter_0)
        ansible_version_0 = None
        bool_0 = False
        complex_0 = None
        ansible_version_1 = module_0.AnsibleVersion(ansible_version_0, bool_0, complex_0)
        var_2 = prepend_list_action_0.__call__(unrecognized_argument_0, ansible_version_1, unrecognized_argument_0)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = module_0.version()
        int_0 = -462
        var_1 = module_0.maybe_unfrack_path(int_0)
        tuple_0 = ()
        bytes_0 = b'\xd9\xaa\x0b'
        sorting_help_formatter_0 = None
        str_0 = '-dJ.km[UeS1I'
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_0, str_0)
        float_0 = 60.0
        int_1 = 0
        dict_0 = {sorting_help_formatter_0: int_1}
        str_1 = 'Pj3V"Jkjw5&_y-nP+?'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, bytes_0, sorting_help_formatter_0, tuple_0, bytes_0, str_1)
        ansible_version_0 = module_0.AnsibleVersion(unrecognized_argument_0, dict_0, bytes_0)
        ansible_version_1 = module_0.AnsibleVersion(prepend_list_action_0, float_0, tuple_0, ansible_version_0)
        str_2 = '?'
        prepend_list_action_1 = module_0.PrependListAction(float_0, tuple_0, str_2, dict_0)
        str_3 = 'g'
        var_2 = ansible_version_0.__call__(str_3, float_0, ansible_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\xad\x18'
        var_0 = module_0.add_tasknoplay_options(bytes_0)
    except BaseException:
        pass

def test_case_24():
    try:
        var_0 = module_0.version()
        str_0 = "]%p4P\x0c4'Z^\x0b"
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_0)
        var_1 = module_0.add_basedir_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = 1.5
        str_0 = 'Ho<nTqD>!e'
        var_0 = module_0.version(str_0)
        var_1 = module_0.add_output_options(float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        var_0 = module_0.version()
        list_0 = []
        str_0 = 'URy/JY'
        int_0 = -462
        var_1 = module_0.maybe_unfrack_path(int_0)
        bool_0 = False
        tuple_0 = (list_0,)
        argument_parser_0 = module_1.ArgumentParser(bool_0, tuple_0)
        var_2 = module_0.add_check_options(argument_parser_0)
        tuple_1 = ()
        bytes_0 = b'\xd9\xaa\x0b'
        sorting_help_formatter_0 = None
        str_1 = '-dJ.km[UeS1I'
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_0, str_1)
        int_1 = 0
        dict_0 = {sorting_help_formatter_0: int_1}
        str_2 = 'Pj3V"Jkjw5&_y-nP+?'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, bytes_0, sorting_help_formatter_0, tuple_1, bytes_0, str_2)
        bytes_1 = None
        ansible_version_0 = module_0.AnsibleVersion(unrecognized_argument_0, dict_0, bytes_1)
        float_0 = 1.0
        str_3 = 'H4`0e,6UX:^'
        dict_1 = {str_1: bytes_0, str_3: unrecognized_argument_0, str_2: list_0, str_0: unrecognized_argument_0}
        namespace_0 = module_1.Namespace(**dict_1)
        str_4 = '#$s\x0cZ?@}r,X{q'
        str_5 = 'swdepot'
        bytes_2 = b'\x11ng\xf2\xb6l4#\xe0'
        ansible_version_1 = module_0.AnsibleVersion(float_0, namespace_0, str_4, float_0, str_5, bytes_2)
        int_2 = -2161
        var_3 = prepend_list_action_0.__call__(argument_parser_0, namespace_0, int_2)
    except BaseException:
        pass

def test_case_27():
    try:
        var_0 = module_0.version()
        str_0 = 'URy/JY'
        int_0 = -462
        var_1 = module_0.maybe_unfrack_path(int_0)
        bool_0 = True
        sorting_help_formatter_0 = None
        set_0 = {int_0, str_0, bool_0}
        dict_0 = {int_0: set_0, str_0: var_0, int_0: int_0}
        ansible_version_0 = module_0.AnsibleVersion(sorting_help_formatter_0, int_0, set_0, dict_0)
        dict_1 = {}
        list_0 = [int_0, var_0]
        argument_parser_0 = module_1.ArgumentParser(bool_0, ansible_version_0, dict_1, list_0)
        var_2 = module_0.add_module_options(argument_parser_0)
        tuple_0 = ()
        bytes_0 = b'\xd9\xaa\x0b'
        bool_1 = True
        sorting_help_formatter_1 = None
        str_1 = '-dJ.km[UeS1I'
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_1, str_1)
        float_0 = 60.0
        int_1 = 0
        dict_2 = {sorting_help_formatter_1: int_1}
        str_2 = 'Pj3V"Jkjw5&_y-nP+?'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, bytes_0, sorting_help_formatter_1, tuple_0, bytes_0, str_2)
        bytes_1 = None
        ansible_version_1 = module_0.AnsibleVersion(unrecognized_argument_0, dict_2, bytes_1)
        ansible_version_2 = module_0.AnsibleVersion(prepend_list_action_0, float_0, tuple_0, ansible_version_1)
        str_3 = '?'
        prepend_list_action_1 = module_0.PrependListAction(float_0, tuple_0, str_3, dict_2)
        bytes_2 = b'\x948\xd6\x97d\xc8\xf0a`\x90\xfa\xfc"\xe6H)vB\\]'
        var_3 = prepend_list_action_0.__call__(ansible_version_1, unrecognized_argument_0, bytes_2)
        var_4 = module_0.add_connect_options(bool_1)
    except BaseException:
        pass