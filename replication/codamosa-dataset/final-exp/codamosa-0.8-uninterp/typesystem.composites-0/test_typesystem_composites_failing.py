# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        never_match_0 = module_0.NeverMatch()
        str_0 = '\x0cw\t.XnSUe=eJ4BE]&DW'
        bool_0 = False
        any_0 = never_match_0.validate(str_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b''
        bool_0 = True
        list_0 = []
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -5335.894
        list_0 = [float_0, float_0, float_0]
        bool_0 = True
        field_0 = module_1.Field()
        list_1 = [field_0, field_0, field_0, field_0]
        one_of_0 = module_0.OneOf(list_1)
        any_0 = one_of_0.validate(list_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1065
        bool_0 = None
        field_0 = module_1.Field(allow_null=bool_0)
        list_0 = [field_0, field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        any_0 = all_of_0.validate(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        any_0 = module_1.Any()
        not_0 = module_0.Not(any_0)
        bool_0 = True
        any_1 = not_0.validate(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        any_0 = module_1.Any()
        if_then_else_0 = module_0.IfThenElse(any_0)
        bool_0 = any_0.has_default()
        any_1 = if_then_else_0.validate(bool_0, bool_0)
        list_0 = []
        field_0 = module_1.Field()
        all_of_0 = module_0.AllOf(list_0)
        any_2 = all_of_0.validate(field_0)
        any_3 = field_0.get_default_value()
        str_0 = 'blank'
        str_1 = 'only_null'
        str_2 = '\nHnZ=n~=tue$s'
        str_3 = 'allOf'
        dict_0 = {str_1: any_3, str_2: any_1, str_0: str_0, str_3: list_0}
        all_of_1 = module_0.AllOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        any_0 = module_1.Any()
        never_match_0 = module_0.NeverMatch()
        var_0 = [any_0, never_match_0]
        bool_0 = True
        one_of_0 = module_0.OneOf(var_0)
        var_1 = None
        any_1 = one_of_0.validate(var_1)
        any_2 = module_1.Any()
        never_match_1 = module_0.NeverMatch()
        var_2 = [any_2, never_match_1]
        one_of_1 = module_0.OneOf(var_2)
        any_3 = one_of_1.validate(var_1, bool_0)
        never_match_2 = module_0.NeverMatch()
        any_4 = module_1.Any()
        var_3 = [never_match_2, any_4]
        one_of_2 = module_0.OneOf(var_3)
        any_5 = one_of_2.validate(var_1)
        never_match_3 = module_0.NeverMatch()
        any_6 = module_1.Any()
        var_4 = [never_match_3, any_6]
        one_of_3 = module_0.OneOf(var_4)
        any_7 = one_of_3.validate(var_1, bool_0)
        any_8 = module_1.Any()
        any_9 = module_1.Any()
        any_10 = [any_8, any_9]
        one_of_4 = module_0.OneOf(any_10)
        any_11 = one_of_4.validate(var_1)
    except BaseException:
        pass

def test_case_7():
    try:
        any_0 = module_1.Any()
        if_then_else_0 = module_0.IfThenElse(any_0)
        bool_0 = any_0.has_default()
        int_0 = 1
        any_1 = any_0.serialize(bool_0)
        any_2 = if_then_else_0.validate(int_0)
        bool_1 = True
        list_0 = []
        all_of_0 = module_0.AllOf(list_0)
        any_3 = all_of_0.validate(bool_1)
        never_match_0 = module_0.NeverMatch()
        field_0 = module_1.Field(allow_null=bool_1)
        not_0 = module_0.Not(field_0)
        list_1 = [field_0, field_0, field_0]
        one_of_0 = module_0.OneOf(list_1)
        all_of_1 = module_0.AllOf(list_1)
        any_4 = field_0.get_default_value()
        any_5 = if_then_else_0.validate(bool_0)
        str_0 = 'null'
        never_match_1 = module_0.NeverMatch()
        field_1 = module_1.Field(title=str_0)
        if_then_else_1 = module_0.IfThenElse(field_1)
        str_1 = '@n,<kVnV6>0bf\x0b'
        str_2 = 'allow_null'
        dict_0 = {str_0: list_1, str_1: all_of_0, str_0: if_then_else_0, str_2: bool_1}
        not_1 = module_0.Not(field_1, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        str_0 = 'allow_null'
        str_1 = "WSA1'YXl[}xb(oI:X$|"
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        not_0 = module_0.Not(field_0)
        str_2 = 'MR7Fx;/en~<`0"'
        dict_0 = {str_0: str_0, str_1: list_0, str_2: str_1}
        one_of_0 = module_0.OneOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        str_0 = 'allow_null'
        str_1 = "WSA1'YXl[}xb(oI:X$|"
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        not_0 = module_0.Not(field_0)
        str_2 = 'MR7Fx;/en~<`0"'
        dict_0 = {str_0: str_0, str_1: list_0, str_2: str_1}
        bool_1 = True
        field_1 = module_1.Field(description=str_1, allow_null=bool_1)
        never_match_0 = module_0.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        field_0 = module_1.Field(default=bool_0)
        str_0 = 'PEK'
        field_1 = module_1.Field(description=str_0)
        str_1 = 'Gi96e}j&<^_MzGcQrsT'
        not_0 = module_0.Not(field_0)
        list_0 = [field_1, bool_0, field_0, not_0]
        str_2 = 'allow_null'
        str_3 = 'LcdSk0WR7A9@zu'
        dict_0 = {str_1: list_0, str_1: str_1, str_2: str_2, str_3: field_1}
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, field_1, **dict_0)
    except BaseException:
        pass