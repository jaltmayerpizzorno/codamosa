# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_1():
    set_0 = set()
    bytes_0 = b'(\xe0$x{\x928<\xd1\xd1\x03\xab\x14\xa3\x9c\x05vZ\x84\x80'
    bool_0 = False
    try_0 = module_0.Try(bytes_0, bool_0)
    bool_1 = try_0.__eq__(set_0)

def test_case_2():
    str_0 = 'V0 '
    bool_0 = True
    try_0 = module_0.Try(str_0, bool_0)
    str_1 = try_0.__str__()

def test_case_3():
    str_0 = 'Tgm`b x$>r'
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.get()
    float_0 = None
    dict_0 = {var_0: float_0}
    bool_1 = try_0.__eq__(dict_0)
    var_1 = try_0.map(try_0)

def test_case_4():
    str_0 = 'Tgm`b x$>r'
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.get()
    float_0 = None
    var_1 = try_0.filter(float_0)
    dict_0 = {var_0: float_0}
    bool_1 = try_0.__eq__(dict_0)
    bytes_0 = b'O\xb6\xcaM\xb8\xdd\x9f'
    var_2 = try_0.bind(bytes_0)

def test_case_5():
    tuple_0 = ()
    float_0 = 3124.48
    int_0 = False
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    str_0 = try_0.__str__()
    bool_1 = False
    try_1 = module_0.Try(float_0, bool_1)
    str_1 = try_1.__str__()
    str_2 = 'SEIJ2\rJ/b\n_JD'
    var_0 = try_1.bind(str_2)
    var_1 = try_1.on_success(tuple_0)
    var_2 = try_1.get()

def test_case_6():
    list_0 = None
    list_1 = [list_0]
    bytes_0 = b'%\x12\xaa'
    bool_0 = True
    try_0 = module_0.Try(bytes_0, bool_0)
    try_1 = module_0.Try(try_0, bool_0)
    var_0 = try_1.get()
    dict_0 = {list_0: list_0, list_0: list_0, list_0: list_1}
    var_1 = try_1.on_fail(dict_0)
    tuple_0 = (dict_0,)
    bool_1 = False
    try_2 = module_0.Try(tuple_0, bool_1)
    bytes_1 = b'\x9a\xb1\xa4<\x86\xf1\xa4\x01fG \x8a\xb1\xc9xDX|\x06'
    bool_2 = False
    try_3 = module_0.Try(bytes_1, bool_2)
    var_2 = try_3.filter(try_2)

def test_case_7():
    str_0 = 'Tgm`b x$>r'
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.get()
    float_0 = None
    var_1 = try_0.filter(float_0)
    dict_0 = {var_0: float_0}
    bool_1 = try_0.__eq__(dict_0)
    var_2 = try_0.map(try_0)

def test_case_8():
    set_0 = None
    set_1 = {set_0}
    bool_0 = True
    try_0 = module_0.Try(set_1, bool_0)
    var_0 = try_0.get()

def test_case_9():
    set_0 = None
    int_0 = -2587
    int_1 = False
    str_0 = 'G|QqO]KniG$'
    float_0 = -1573.36
    bool_0 = False
    bool_1 = False
    try_0 = module_0.Try(bool_0, bool_1)
    var_0 = try_0.get_or_else(float_0)
    tuple_0 = (int_1, str_0, str_0)
    bool_2 = False
    try_1 = module_0.Try(tuple_0, bool_2)
    var_1 = try_1.filter(int_0)
    tuple_1 = (set_0,)
    str_1 = ' d\t=R.S$kKLygpR\tf7N+'
    set_1 = {str_1, str_1}
    bool_3 = True
    try_2 = module_0.Try(set_1, bool_3)
    bool_4 = try_2.__eq__(tuple_1)

def test_case_10():
    dict_0 = None
    int_0 = -2407
    str_0 = 'Yg-/'
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.filter(int_0)
    str_1 = '\x0cgU\t'
    bool_1 = True
    try_1 = module_0.Try(str_1, bool_1)
    var_1 = try_1.get_or_else(dict_0)

def test_case_11():
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)
    var_0 = lambda x: x
    var_1 = try_0.filter(var_0)
    try_1 = module_0.Try(bool_0, bool_0)
    var_2 = lambda x: not x
    var_3 = try_0.filter(var_2)
    bool_1 = False
    try_2 = module_0.Try(bool_0, bool_1)
    try_3 = module_0.Try(bool_1, bool_0)
    var_4 = lambda x: not x
    var_5 = try_3.filter(var_4)
    try_4 = module_0.Try(bool_1, bool_1)
    try_5 = module_0.Try(bool_1, bool_0)
    var_6 = lambda x: x
    var_7 = try_5.filter(var_6)
    try_6 = module_0.Try(bool_1, bool_0)