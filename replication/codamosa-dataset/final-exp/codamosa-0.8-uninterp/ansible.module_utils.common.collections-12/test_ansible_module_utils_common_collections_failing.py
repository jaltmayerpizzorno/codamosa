# Automatically generated by Pynguin.
import ansible.module_utils.common.collections as module_0

def test_case_0():
    try:
        float_0 = -742.65
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        float_0 = 4890.01
        immutable_dict_1 = module_0.ImmutableDict()
        var_0 = immutable_dict_1.__len__()
        var_1 = module_0.count(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = module_0.count(immutable_dict_0)
        var_1 = immutable_dict_0.union(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n    Unit test for is_iterable\n    '
        list_0 = [str_0]
        str_1 = '8Evg*'
        str_2 = 'o]^X\n9pbm'
        dict_0 = {str_0: list_0, str_0: str_0, str_1: list_0, str_2: str_1}
        immutable_dict_0 = module_0.ImmutableDict(**dict_0)
        var_0 = immutable_dict_0.difference(str_0)
        var_1 = immutable_dict_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = None
        var_0 = module_0.count(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__repr__()
        str_0 = '\rrmwwPXOrg'
        var_1 = module_0.count(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n    Unit test for is_iterable\n    '
        list_0 = [str_0]
        str_1 = '8Evg*'
        str_2 = 'o]^X\n9pbm'
        dict_0 = {str_0: list_0, str_0: str_0, str_1: list_0, str_2: str_1}
        immutable_dict_0 = module_0.ImmutableDict(**dict_0)
        var_0 = immutable_dict_0.difference(str_0)
        var_1 = module_0.count(list_0)
        var_2 = immutable_dict_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x1e'
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__eq__(bytes_0)
        float_0 = 4890.01
        immutable_dict_1 = module_0.ImmutableDict()
        var_1 = module_0.count(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\n    Unit test for ii_iterable\n    '
        list_0 = [str_0]
        str_1 = '8Evg*'
        str_2 = None
        set_0 = {str_0, str_2, str_0, str_2}
        bool_0 = False
        list_1 = [bool_0, list_0, str_2]
        var_0 = module_0.is_sequence(set_0, list_1)
        dict_0 = {str_0: str_1, str_2: list_0}
        immutable_dict_0 = module_0.ImmutableDict()
        var_1 = immutable_dict_0.__eq__(dict_0)
        str_3 = 'o]^X\n9pbm'
        dict_1 = {str_0: list_0, str_0: str_0, str_1: list_0, str_3: str_1}
        immutable_dict_1 = module_0.ImmutableDict(**dict_1)
        var_2 = immutable_dict_1.difference(str_0)
        tuple_0 = ()
        var_3 = immutable_dict_0.difference(list_0)
        var_4 = immutable_dict_1.difference(tuple_0)
        immutable_dict_2 = module_0.ImmutableDict()
        int_0 = 844
        var_5 = module_0.count(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x1e'
        str_0 = 'REQUIREMENTS:%s\n'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: str_0}
        var_0 = module_0.is_iterable(str_0, dict_0)
        immutable_dict_0 = module_0.ImmutableDict()
        bool_0 = True
        var_1 = immutable_dict_0.__eq__(bool_0)
        var_2 = immutable_dict_0.__eq__(bytes_0)
        float_0 = 4890.01
        str_1 = '.94K-I'
        str_2 = '\n+kW(Brd?[~1Hy4'
        tuple_0 = ()
        var_3 = module_0.count(tuple_0)
        str_3 = '>%@Da9NZ^ns/gz\x0bGky@='
        dict_1 = {str_1: str_1, str_1: var_2, str_2: var_2, str_3: immutable_dict_0}
        var_4 = immutable_dict_0.union(dict_1)
        var_5 = immutable_dict_0.__eq__(str_2)
        str_4 = 'I0tl#"3W,5M\\W:;hr9'
        immutable_dict_1 = module_0.ImmutableDict()
        var_6 = immutable_dict_1.difference(str_4)
        var_7 = module_0.count(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\n    Unit test for is_iterable\n    '
        list_0 = [str_0]
        str_1 = '8Evg*'
        str_2 = 'o/]^X\n9pbm'
        dict_0 = {str_0: list_0, str_0: str_0, str_1: list_0, str_2: str_1}
        immutable_dict_0 = module_0.ImmutableDict(**dict_0)
        var_0 = immutable_dict_0.difference(dict_0)
        immutable_dict_1 = module_0.ImmutableDict(**dict_0)
        float_0 = None
        bool_0 = True
        tuple_0 = (float_0, list_0, bool_0, immutable_dict_1)
        var_1 = module_0.count(tuple_0)
    except BaseException:
        pass