# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        bool_0 = None
        set_0 = {bool_0, bool_0, bool_0}
        int_0 = True
        validation_0 = module_0.Validation(set_0, int_0)
        tuple_0 = ()
        tuple_1 = (validation_0, int_0, tuple_0, tuple_0)
        validation_1 = module_0.Validation(tuple_1, int_0)
        var_0 = validation_1.__eq__(bool_0)
        str_0 = '#Nkjr'
        validation_2 = module_0.Validation(str_0, set_0)
        int_1 = 0
        str_1 = 'Z\r4o=^w{A\x0bg,+gIJko'
        var_1 = validation_2.to_maybe()
        dict_0 = {int_1: str_1, str_1: str_1, str_1: str_1}
        validation_3 = module_0.Validation(dict_0, str_1)
        var_2 = validation_2.__str__()
        var_3 = validation_3.to_try()
        var_4 = validation_3.to_box()
        var_5 = validation_0.to_box()
        var_6 = validation_3.__eq__(validation_0)
        var_7 = validation_1.to_maybe()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '#Nkjr'
        set_0 = set()
        validation_0 = module_0.Validation(str_0, set_0)
        var_0 = validation_0.to_try()
        int_0 = -1831
        str_1 = 'Z\r4?=^w{A\x0bg,+gIJko'
        var_1 = validation_0.to_maybe()
        dict_0 = {int_0: str_1, str_1: str_1, str_1: str_1}
        validation_1 = module_0.Validation(dict_0, str_1)
        var_2 = validation_0.__str__()
        var_3 = validation_1.to_box()
        list_0 = None
        var_4 = validation_1.to_box()
        var_5 = validation_1.__eq__(list_0)
        var_6 = validation_1.to_maybe()
        var_7 = validation_0.to_either()
        var_8 = validation_0.to_either()
        str_2 = 'GQj":'
        int_1 = 575
        validation_2 = module_0.Validation(str_2, int_1)
        var_9 = validation_2.is_success()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'bLxR~6"+\'ptGD\n\x0b(C)'
        bytes_0 = b'\xc1`\xc1\xc4\x858\tj6\x88} \xda\xdd'
        bool_0 = False
        validation_0 = module_0.Validation(bytes_0, bool_0)
        validation_1 = module_0.Validation(str_0, validation_0)
        var_0 = validation_1.is_success()
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = None
        set_0 = {tuple_0, tuple_0, tuple_0}
        int_0 = 2780
        validation_0 = module_0.Validation(set_0, int_0)
        var_0 = validation_0.is_fail()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        set_0 = set()
        float_0 = 1435.981
        validation_0 = module_0.Validation(set_0, float_0)
        var_0 = validation_0.map(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = None
        set_0 = set()
        list_0 = []
        int_1 = False
        validation_0 = module_0.Validation(list_0, int_1)
        validation_1 = module_0.Validation(set_0, validation_0)
        var_0 = validation_1.bind(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 637
        int_1 = 986
        str_0 = '.\rk5kn{v#4o<i]+T,)'
        validation_0 = module_0.Validation(int_1, str_0)
        var_0 = validation_0.ap(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '#Nkjr'
        set_0 = set()
        validation_0 = module_0.Validation(str_0, set_0)
        var_0 = validation_0.to_try()
        int_0 = -1831
        str_1 = 'Z\r4?=^w{A\x0bg,+gIJko'
        var_1 = validation_0.to_maybe()
        dict_0 = {int_0: str_1, str_1: str_1, str_1: str_1}
        validation_1 = module_0.Validation(dict_0, str_1)
        var_2 = validation_0.__str__()
        var_3 = validation_1.to_box()
        var_4 = validation_1.to_either()
        list_0 = None
        var_5 = validation_1.to_box()
        var_6 = validation_1.__eq__(list_0)
        var_7 = validation_1.to_maybe()
        var_8 = validation_0.to_either()
        var_9 = validation_0.to_either()
        str_2 = 'GQj":'
        int_1 = 575
        validation_2 = module_0.Validation(str_2, int_1)
        var_10 = validation_2.is_success()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -448.77646
        str_0 = '\n6;a=kCHz/'
        validation_0 = module_0.Validation(float_0, str_0)
        dict_0 = {float_0: float_0}
        str_1 = 'Xn:n~2\\L%5'
        int_0 = 443
        dict_1 = {str_0: float_0, str_1: str_0, int_0: validation_0}
        bytes_0 = b'\xc7\x8dt'
        str_2 = ',b*Fg.1'
        list_0 = [str_2, float_0, float_0, str_1]
        tuple_0 = (dict_0, dict_1, bytes_0, list_0)
        validation_1 = module_0.Validation(tuple_0, validation_0)
        var_0 = validation_1.to_either()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '()x{=#a<'
        tuple_0 = (str_0,)
        float_0 = 1684.298
        validation_0 = module_0.Validation(tuple_0, float_0)
        var_0 = validation_0.to_try()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '#Nkjr'
        set_0 = set()
        validation_0 = module_0.Validation(str_0, set_0)
        var_0 = validation_0.to_try()
        int_0 = -1831
        str_1 = 'Z\r4?=^w{A\x0bg,+gIJko'
        var_1 = validation_0.is_success()
        var_2 = validation_0.to_maybe()
        var_3 = validation_0.__str__()
        var_4 = validation_0.to_box()
        list_0 = None
        var_5 = validation_0.to_box()
        var_6 = validation_0.__eq__(list_0)
        var_7 = validation_0.to_maybe()
        var_8 = validation_0.to_either()
        var_9 = validation_0.to_either()
        list_1 = None
        var_10 = validation_0.to_box()
        var_11 = validation_0.__eq__(validation_0)
        var_12 = validation_0.to_either()
        var_13 = validation_0.to_either()
        var_14 = validation_0.to_lazy()
        bool_0 = None
        validation_1 = module_0.Validation(bool_0, list_1)
        bytes_0 = b'\x052E-@\x88\xde'
        str_2 = 'Maybe[T]'
        tuple_0 = (bytes_0, str_2, str_1, int_0)
        var_15 = validation_1.ap(tuple_0)
    except BaseException:
        pass