# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\xc1`\xc1\xc4\x858\tj6\x88} \xda\xdd'
    bool_0 = True
    validation_0 = module_0.Validation(bytes_0, bool_0)

def test_case_2():
    str_0 = 'J~C[XJ}`F.]PNXD'
    bytes_0 = b'\x7fZ\x1cl\xe9'
    bool_0 = True
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bool_0}
    validation_0 = module_0.Validation(dict_0, dict_0)
    var_0 = validation_0.__eq__(str_0)

def test_case_3():
    list_0 = []
    str_0 = '\n        Transform Validation to Try.\n\n        :returns: Lazy monad with function returning Validation value\n        :rtype: Lazy[Function() -> (A | None)]\n        '
    validation_0 = module_0.Validation(list_0, str_0)
    var_0 = validation_0.to_box()

def test_case_4():
    str_0 = 'f,'
    str_1 = '\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        '
    bool_0 = True
    str_2 = ':P\ndl 5IU_l"2$c9'
    int_0 = 281
    tuple_0 = (int_0,)
    validation_0 = module_0.Validation(str_2, tuple_0)
    var_0 = validation_0.is_success()
    int_1 = -3228
    bytes_0 = b'\xb7\xfb1\xcd\xfb\x9a\x92\xdc\xfc\xd6\xdaP\xb9\xea2\xf8'
    validation_1 = module_0.Validation(int_1, bytes_0)
    var_1 = validation_1.to_lazy()
    tuple_1 = (str_0, str_1, bool_0)
    tuple_2 = (tuple_1,)
    set_0 = set()
    validation_2 = module_0.Validation(tuple_2, set_0)
    var_2 = validation_2.to_box()
    bytes_1 = b'\x9d\xec\xb3\x9c\xa9\x97tV\xd3'
    bytes_2 = b"\xcc'"
    validation_3 = module_0.Validation(bytes_1, bytes_2)
    var_3 = validation_3.to_try()
    var_4 = validation_3.to_lazy()
    var_5 = validation_2.to_try()