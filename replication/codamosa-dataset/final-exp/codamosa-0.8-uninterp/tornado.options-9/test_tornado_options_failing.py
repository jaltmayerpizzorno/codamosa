# Automatically generated by Pynguin.
import tornado.options as module_0
import datetime as module_1
import typing as module_2
import builtins as module_3

def test_case_0():
    try:
        str_0 = 'Ukraini '
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '%'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        iterator_0 = option_parser_0.__iter__()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        str_0 = ':=C-i\rwq8xTTl9_'
        option_parser_1.__setitem__(str_0, option_parser_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ']6d-Wp*uT _.2'
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        bool_0 = option_parser_0.__contains__(str_0)
        list_0 = option_parser_0.parse_command_line()
    except BaseException:
        pass

def test_case_4():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        str_0 = 'L'
        dict_0 = option_parser_0.group_dict(str_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '.9AO!J/k1[9zW'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        str_1 = '@$/TWsQ\tb[xR\n:I=s,Ja'
        option_0 = module_0._Option(str_1, str_1, str_1)
        any_0 = option_parser_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        iterable_0 = option_parser_0.items()
        iterator_0 = option_parser_0.__iter__()
        str_0 = '.d}'
        callable_0 = None
        module_0.define(str_0, str_0, str_0, callable_0)
        str_1 = 'pHpAc:9m3?sF(zb"Y'
        str_2 = None
        list_0 = [str_1, str_2, str_2]
        bool_0 = None
        list_1 = module_0.parse_command_line(list_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'kTMxWrXZT]R0'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        dict_1 = option_parser_0.group_dict(str_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        str_1 = '.]3Dxn|F:2Kg'
        option_parser_0.define(str_1)
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '--port=80'
        list_0 = module_0.parse_command_line(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '--logging=debug'
        str_1 = [str_0, str_0]
        list_0 = module_0.parse_command_line(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        option_parser_0 = module_0.OptionParser()
        list_0 = option_parser_0.parse_command_line()
    except BaseException:
        pass

def test_case_11():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = ''
        option_parser_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'KK~J\x0bYx\\'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '-{6 g5~a+,Rlmz+)$'
        bool_0 = True
        module_0.print_help()
        list_0 = []
        option_parser_0 = module_0.OptionParser()
        list_1 = option_parser_0.parse_command_line(list_0)
        option_0 = module_0._Option(str_0, bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '}s<*,KaGE:fXJb8\x0clfA'
        bool_0 = option_parser_0.__contains__(str_0)
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = ''
        list_0 = [str_0, str_1, str_1]
        option_0 = module_0._Option(str_1, list_0, str_0, bool_0, str_1)
        option_0.set(option_parser_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'heU^L-\ntCjzuoWL|uB('
        bool_0 = False
        module_0.parse_config_file(str_0, bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        option_parser_0 = module_0.OptionParser()
        module_0.print_help()
        dict_0 = option_parser_0.as_dict()
        mockable_0 = option_parser_0.mockable()
        str_0 = 'cAqI\x0b\r}KrK,c"j'
        option_parser_0.__setattr__(str_0, option_parser_0)
    except BaseException:
        pass

def test_case_17():
    try:
        option_0 = None
        list_0 = [option_0]
        module_0.add_parse_callback(list_0)
        str_0 = '-logging=dbg'
        str_1 = [str_0, str_0]
        time_0 = module_1.time()
        bytes_0 = b'\xee\xc5'
        option_1 = module_0._Option(str_1, time_0, str_1, str_0, str_0, str_1, bytes_0)
        option_1.set(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = True
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        text_i_o_0 = module_2.TextIO()
        option_parser_1.add_parse_callback(text_i_o_0)
        optional_0 = None
        module_0.print_help(optional_0)
        iterable_0 = option_parser_1.items()
        option_parser_1.print_help(bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_20():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        iterable_0 = option_parser_0.items()
        iterator_0 = option_parser_0.__iter__()
        str_0 = '.d}'
        callable_0 = None
        module_0.define(str_0, str_0, str_0, callable_0)
    except BaseException:
        pass

def test_case_21():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        option_parser_1 = module_0.OptionParser()
        option_parser_2 = module_0.OptionParser()
        text_i_o_0 = module_2.TextIO()
        option_parser_2.add_parse_callback(text_i_o_0)
        iterator_0 = option_parser_1.__iter__()
        optional_0 = None
        module_0.print_help(optional_0)
        iterable_0 = option_parser_2.items()
        str_0 = 'Kt0,$Z>Bm&Q;D#E4:N B'
        mockable_0 = option_parser_2.mockable()
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '5Yki}{t"?\x0b?5}]'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        list_0 = None
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help()
        str_0 = '--'
        float_0 = 0.3
        optional_0 = None
        bool_0 = True
        option_parser_0.define(str_0, float_0, optional_0, str_0, bool_0, option_parser_0)
        option_parser_1 = module_0.OptionParser()
        option_parser_1.run_parse_callbacks()
        option_parser_2 = module_0.OptionParser()
        option_parser_2.add_parse_callback(list_0)
        bool_1 = True
        option_parser_3 = module_0.OptionParser()
        list_1 = option_parser_3.parse_command_line(bool_1)
    except BaseException:
        pass

def test_case_24():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = ':Vk)pEe\x0c\t+'
        list_0 = [str_0, str_0]
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_1 = module_0.OptionParser()
        text_i_o_0 = module_2.TextIO()
        mockable_0 = option_parser_0.mockable()
        module_0.print_help()
        iterable_0 = option_parser_0.items()
        bool_0 = True
        str_1 = '&\nfM'
        optional_0 = None
        optional_1 = None
        option_0 = module_0._Option(str_1, optional_0, str_0, bool_0, optional_1)
        mockable_1 = module_0._Mockable(option_parser_0)
        str_2 = 'midnight'
        mockable_2 = module_0._Mockable(option_parser_1)
        mockable_1.__setattr__(str_2, list_1)
    except BaseException:
        pass

def test_case_25():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        iterable_0 = option_parser_0.items()
        str_0 = '/input/tornado/log.py'
        option_parser_1 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0)
        mockable_0 = option_parser_0.mockable()
        bool_0 = option_parser_0.__contains__(str_0)
        option_parser_2 = module_0.OptionParser()
        list_0 = option_parser_0.parse_command_line()
    except BaseException:
        pass

def test_case_26():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_27():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        iterable_0 = option_parser_0.items()
        str_0 = '/input/tornado/log.py'
        bool_0 = False
        option_parser_0.parse_config_file(str_0, bool_0)
        str_1 = '}xs&Pwg'
        list_0 = [str_1, str_1, str_1, str_1]
        bool_1 = True
        list_1 = module_0.parse_command_line(list_0, bool_1)
    except BaseException:
        pass

def test_case_28():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        iterable_0 = option_parser_0.items()
        str_0 = '/input/tornado/log.py'
        dict_0 = option_parser_0.as_dict()
        str_1 = '['
        dict_1 = option_parser_0.group_dict(str_1)
        option_parser_0.parse_config_file(str_0)
        iterable_1 = option_parser_0.items()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'host'
        str_1 = 'L'
        str_2 = '8&7C46>-lB'
        bool_0 = True
        optional_0 = None
        option_0 = module_0._Option(str_0, str_2, str_2, bool_0, str_1, str_1, optional_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'host'
        str_1 = 'L'
        str_2 = '8&7C46>-lB'
        bool_0 = True
        optional_0 = None
        option_0 = module_0._Option(str_0, str_2, str_2, bool_0, str_1, str_1, optional_0)
        option_0.set(str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        mockable_0 = option_parser_0.mockable()
        iterable_0 = option_parser_0.items()
        str_0 = 'midnight'
        bool_0 = True
        optional_0 = None
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, str_0, optional_0)
        option_0.set(iterable_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'Q0k+$hjVoGS'
        var_0 = None
        str_1 = 'cmd'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        str_2 = 'midnight'
        optional_0 = None
        list_0 = [var_0]
        option_0 = module_0._Option(str_0, optional_0, str_2, str_2, str_1, list_0)
        type_0 = module_3.type()
    except BaseException:
        pass