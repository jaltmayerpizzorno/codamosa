# Automatically generated by Pynguin.
import pysnooper.utils as module_0

def test_case_0():
    try:
        str_0 = '7lpD'
        var_0 = []
        var_1 = module_0.get_repr_function(str_0, var_0)
        var_2 = module_0.get_repr_function(var_1, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'QL'
        var_0 = module_0.ensure_tuple(str_0)
        tuple_0 = None
        var_1 = module_0.get_shortish_repr(tuple_0)
        str_1 = '\x0c'
        list_0 = [str_1, tuple_0]
        var_2 = module_0.normalize_repr(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'T[},B[?/x\r\twY;EX'
        tuple_0 = None
        var_0 = module_0.get_shortish_repr(tuple_0)
        bytes_0 = b'\xc54\x87d\x87\xc4\xe2{\xee\x91\x1eM\xe1\xffx'
        var_1 = module_0.get_shortish_repr(str_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1
        list_0 = [int_0]
        var_0 = module_0.ensure_tuple(list_0)
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        var_0 = module_0.ensure_tuple(bool_0)
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '?xEz(~!\n2gJm'
        var_0 = module_0.ensure_tuple(str_0)
        tuple_0 = None
        var_1 = module_0.get_shortish_repr(tuple_0)
        str_1 = '\x0c'
        bytes_0 = b'\xc54\x87d\x87\xc4\xe2{\xee\x91\x1eM\xe1\xffx'
        var_2 = module_0.get_shortish_repr(str_1, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'hello'
        list_0 = [str_0, str_0]
        list_1 = [list_0]
        var_0 = module_0.get_repr_function(list_0, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'g}\x15N\xcd\xa6<\x8d9\\\xc2@\xffl\x15v\xf5(\xc6'
        float_0 = 487.142735
        var_0 = module_0.truncate(bytes_0, float_0)
        str_0 = '[{}]'
        str_1 = 'wM\\>nO+LF?J;g!\x0cVx|,'
        set_0 = {float_0, bytes_0, str_0, str_1}
        var_1 = module_0.ensure_tuple(set_0)
        str_2 = 'T\t\t*W-iZ/k7G5`\t|*?x<'
        float_1 = -1452.0053
        str_3 = 'microseconds'
        dict_0 = {str_2: float_1, str_3: var_0}
        var_2 = module_0.shitcode(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ":'+ uG\t \t8v"
        var_0 = module_0.shitcode(str_0)
        str_1 = 'T[},B[?/x\r\twY;EX'
        set_0 = {str_1, str_1, str_0}
        tuple_0 = (set_0,)
        bool_0 = True
        list_0 = [str_0, bool_0]
        float_0 = None
        var_1 = module_0.truncate(list_0, float_0)
        var_2 = module_0.ensure_tuple(str_0)
        tuple_1 = None
        var_3 = module_0.get_shortish_repr(tuple_1)
        list_1 = []
        var_4 = module_0.get_shortish_repr(list_1)
        bool_1 = True
        var_5 = module_0.ensure_tuple(bool_1)
        int_0 = -816
        var_6 = module_0.get_shortish_repr(int_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '`overwrite=True` can only be used when writing content to file.'
        bool_0 = True
        tuple_0 = ()
        str_1 = '{Q&Cc2P'
        dict_0 = {str_1: str_1, str_0: str_0, str_0: bool_0}
        int_0 = -3346
        var_0 = module_0.get_shortish_repr(bool_0, tuple_0, dict_0, int_0)
    except BaseException:
        pass