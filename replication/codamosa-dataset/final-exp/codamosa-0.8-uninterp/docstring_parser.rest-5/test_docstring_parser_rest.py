# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'Short description.\n\n    Extended description.\n\n    :param str arg_name: Extended description of arg_name\n    :param str? arg_name_with_optional_type: Extended description of arg_name\n    :param arg_name_without_type: Extended description of arg_name\n    :param arg_name_without_type_or_description:\n    :param arg_name_with_default: Extended description of arg_name. Defaults to 0.\n    :raises ValueError: Extended description of error\n    :raises: Extended description of error\n    :returns: Extended description of return\n    :returns str: Extended description of return\n    :returns str?: Extended description of return\n    :yields: Extended description of return\n    :yields str: Extended description of return\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '&b'
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = 'Parses command line arguments\n\n    This function parses command line arguments passed in an array and sets the\n    relevant attributes in the class accordingly.\n\n    :param args:\n        the arguments to parse, defaults to ``sys.argv`` if not specified\n        :type args: array of strings\n    :param kwargs:\n        any keyword parameters will be added as attributes to the class\n\n    :raises argumentError:\n        if an argument could not be successfully parsed\n\n    :returns:\n        ``None``\n\n    :Example:\n\n    >>> parser = ArgumentParser()\n    >>> parser.addArgument("-n", "--number", help="number")\n    >>> args = parser.parseArgs(["-n", "5"])\n    >>> print(args.number)\n    5\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = 'Bla bla bla bla.\n\n    :param a: This is first param\n    :type a: int\n    :param b: Second param\n    :type b: str\n    :param c: Third, with default.\n        And second line for fun.\n    :type c: bool\n    :returns: Nothing, expected to return nothing\n    :raises Nostradamus: If a great prophet appears, then this error is raised\n\n    And a paragraph ...\n    '
    docstring_0 = module_0.parse(str_0)