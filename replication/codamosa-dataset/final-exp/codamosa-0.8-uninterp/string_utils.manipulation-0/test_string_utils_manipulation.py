# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'NFKD'
    str_1 = module_0.compress(str_0)

def test_case_2():
    str_0 = "3o2k\\}M}LV?8!#4'"
    str_1 = module_0.prettify(str_0)

def test_case_3():
    str_0 = 'ZPA9![.XY_]GAc'
    str_1 = module_0.strip_html(str_0)
    str_2 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
    string_formatter_0 = module_0.__StringFormatter(str_2)
    string_formatter_1 = module_0.__StringFormatter(str_2)
    str_3 = string_formatter_1.format()
    string_formatter_2 = module_0.__StringFormatter(str_2)
    str_4 = string_formatter_2.format()

def test_case_4():
    str_0 = 'FK],42-\\e"~'
    str_1 = '3k'
    str_2 = module_0.slugify(str_1)
    var_0 = module_0.camel_case_to_snake(str_0)
    str_3 = module_0.prettify(str_0)

def test_case_5():
    str_0 = '<a href="https://www.google.com"> click here </a> to visit google'
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()
    string_formatter_1 = module_0.__StringFormatter(str_0)
    str_2 = string_formatter_1.format()

def test_case_6():
    str_0 = 'FK],42-\\e"~'
    str_1 = '3k'
    str_2 = module_0.slugify(str_1)
    var_0 = module_0.camel_case_to_snake(str_0)

def test_case_7():
    str_0 = "':+Hw3k5"
    str_1 = module_0.snake_case_to_camel(str_0)

def test_case_8():
    str_0 = 'DUPLICATES'
    str_1 = module_0.shuffle(str_0)

def test_case_9():
    str_0 = ';\x0b3 akLn}-*>-*JW'
    str_1 = module_0.strip_html(str_0)
    str_2 = module_0.shuffle(str_0)
    str_3 = "\n    Return a new string containing same chars of the given one but in a randomized order.\n\n    *Example:*\n\n    >>> shuffle('hello world') # possible output: 'l wodheorll'\n\n    :param input_string: String to shuffle\n    :type input_string: str\n    :return: Shuffled string\n    "
    str_4 = module_0.reverse(str_0)
    str_5 = module_0.slugify(str_3)
    str_6 = module_0.reverse(str_1)
    roman_numbers_0 = module_0.__RomanNumbers()

def test_case_10():
    str_0 = 'X&a/_=A>Z[U{3x'
    str_1 = module_0.slugify(str_0)

def test_case_11():
    str_0 = ']iR-dX\tN'
    bool_0 = module_0.booleanize(str_0)

def test_case_12():
    str_0 = '_qXK<'
    str_1 = module_0.strip_margin(str_0)

def test_case_13():
    str_0 = 'G)/h<SQ44'
    str_1 = module_0.shuffle(str_0)
    str_2 = module_0.reverse(str_0)
    str_3 = '}\n{z*i2NEpIxzp!eD1'
    str_4 = module_0.strip_margin(str_3)
    str_5 = module_0.prettify(str_4)
    str_6 = "0'?%"
    str_7 = 'i@og=\tO"o%&"1d'
    str_8 = module_0.compress(str_5)
    int_0 = 2215
    str_9 = module_0.roman_encode(int_0)
    str_10 = module_0.snake_case_to_camel(str_7, str_5)
    str_11 = module_0.asciify(str_4)
    str_12 = module_0.asciify(str_7)
    var_0 = module_0.camel_case_to_snake(str_8, str_6)

def test_case_14():
    str_0 = '}\n{z*i2NEpIxzp!eD1'
    str_1 = module_0.strip_margin(str_0)
    str_2 = module_0.prettify(str_1)
    str_3 = "0'?%"
    str_4 = module_0.reverse(str_3)
    str_5 = '=|'
    str_6 = 'i@og=\tO"o%&"1d'
    str_7 = module_0.compress(str_2)
    int_0 = 2215
    str_8 = module_0.roman_encode(int_0)
    str_9 = module_0.snake_case_to_camel(str_6, str_2)
    roman_numbers_0 = module_0.__RomanNumbers()
    str_10 = module_0.asciify(str_5)
    var_0 = module_0.camel_case_to_snake(str_7, str_3)
    str_11 = module_0.decompress(str_7)

def test_case_15():
    str_0 = 'hello'
    str_1 = module_0.snake_case_to_camel(str_0)
    bool_0 = False
    str_2 = module_0.snake_case_to_camel(str_0, bool_0)
    str_3 = 'hello_this_is_a_test'
    str_4 = module_0.snake_case_to_camel(str_3, bool_0)

def test_case_16():
    roman_numbers_0 = module_0.__RomanNumbers()
    str_0 = 'is_integer'
    str_1 = module_0.snake_case_to_camel(str_0, str_0)
    str_2 = 'is_json'
    bool_0 = module_0.booleanize(str_2)
    str_3 = module_0.asciify(str_2)
    str_4 = module_0.slugify(str_2, str_2)

def test_case_17():
    str_0 = 'G)/h<SZ#4'
    str_1 = module_0.shuffle(str_0)
    str_2 = module_0.reverse(str_0)
    str_3 = '}\n{z*i2NEpIxzp!eD1'
    str_4 = module_0.strip_margin(str_3)
    str_5 = '~Pd|'
    str_6 = module_0.reverse(str_5)
    str_7 = 'secure_random_hex'
    str_8 = module_0.shuffle(str_7)
    str_9 = '=|'
    str_10 = module_0.compress(str_6)
    str_11 = module_0.prettify(str_2)
    int_0 = 3999
    str_12 = module_0.roman_encode(int_0)
    str_13 = module_0.snake_case_to_camel(str_8, str_6)
    str_14 = module_0.asciify(str_9)
    str_15 = module_0.asciify(str_0)
    str_16 = 'j]R #k2&G3>PgN1\t('
    bool_0 = module_0.booleanize(str_16)
    var_0 = module_0.camel_case_to_snake(str_10, str_5)
    str_17 = 'Zjnh~Cb)Dh4;Y$[a.YGU'
    str_18 = module_0.snake_case_to_camel(str_17, bool_0, str_17)
    str_19 = module_0.snake_case_to_camel(str_10)

def test_case_18():
    str_0 = 'camelCase with spaces and duplicates'
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()
    str_2 = 'the quick   brown fox jumps over the lazy dog'
    string_formatter_1 = module_0.__StringFormatter(str_2)
    str_3 = string_formatter_1.format()
    str_4 = 'foo@bar.it'
    string_formatter_2 = module_0.__StringFormatter(str_4)
    str_5 = string_formatter_2.format()
    str_6 = 'http://www.foo.bar/baz'
    string_formatter_3 = module_0.__StringFormatter(str_6)
    str_7 = string_formatter_3.format()
    str_8 = 'http://www.foo.bar/baz/'
    string_formatter_4 = module_0.__StringFormatter(str_8)
    str_9 = string_formatter_4.format()