# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        str_0 = '?}Ua!b /voQ\x0c$y+aN'
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'y;\txPVX@K\x0cX'
        str_1 = module_0.strip_margin(str_0)
        int_0 = 984
        str_2 = module_0.roman_encode(int_0)
        str_3 = module_0.decompress(str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ':T2k,.gg:A(#G1'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n&mE^L_6\\X'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "-&H<5<U'~"
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'G)/h<SQ44'
        str_1 = module_0.shuffle(str_0)
        str_2 = module_0.reverse(str_0)
        str_3 = '}\n{z*i2NEpIxzp!eD1'
        str_4 = module_0.strip_margin(str_3)
        str_5 = module_0.prettify(str_4)
        str_6 = 'ot$*Z.):'
        str_7 = module_0.reverse(str_6)
        str_8 = '=|'
        str_9 = 'i@og=\tO"o%&"1d'
        int_0 = 2236
        str_10 = module_0.roman_encode(int_0)
        str_11 = module_0.snake_case_to_camel(str_9, str_5)
        str_12 = module_0.asciify(str_8)
        str_13 = module_0.asciify(str_9)
        var_0 = module_0.camel_case_to_snake(str_12, str_6)
        str_14 = None
        str_15 = module_0.decompress(str_14)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = '@x;HlpeZ:6gq'
        str_3 = module_0.shuffle(str_2)
        str_4 = ''
        str_5 = module_0.decompress(str_4)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'E@G_ljWHUl)*-LK>'
        int_0 = None
        str_1 = module_0.compress(str_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        set_0 = set()
        string_formatter_0 = module_0.__StringFormatter(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 1462.5167
        bytes_0 = b'Q'
        set_0 = {bytes_0, float_0}
        var_0 = module_0.camel_case_to_snake(float_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        str_1 = module_0.strip_margin(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        str_1 = module_0.slugify(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '*\x0bF'
        var_0 = module_0.camel_case_to_snake(str_0)
        str_1 = 'XyIdaZ?CqW<\\ETA8.'
        str_2 = module_0.strip_margin(str_1)
        str_3 = None
        str_4 = module_0.shuffle(str_3)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '(?!"[^"]*)@+(?=[^"]*")|\\\\@'
        str_1 = module_0.reverse(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_2 = module_0.prettify(str_0)
        str_3 = module_0.shuffle(str_2)
        str_4 = None
        str_5 = module_0.asciify(str_4)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ''
        str_1 = '\n    Converts a string into a "slug" using provided separator.\n    The returned string has the following properties:\n\n    - it has no spaces\n    - all letters are in lower case\n    - all punctuation signs and non alphanumeric chars are removed\n    - words are divided using provided separator\n    - all chars are encoded as ascii (by using `asciify()`)\n    - is safe for URL\n\n    *Examples:*\n\n    >>> slugify(\'Top 10 Reasons To Love Dogs!!!\') # returns: \'top-10-reasons-to-love-dogs\'\n    >>> slugify(\'Mönstér Mägnët\') # returns \'monster-magnet\'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param separator: Sign used to join string tokens (default to "-").\n    :type separator: str\n    :return: Slug string\n    '
        str_2 = '*\x0bF'
        str_3 = module_0.strip_html(str_0)
        str_4 = module_0.prettify(str_1)
        var_0 = module_0.camel_case_to_snake(str_2)
        str_5 = 'XyIdaZ?CqW<\\ETA8.'
        str_6 = module_0.strip_margin(str_2)
        str_7 = module_0.reverse(str_2)
        bool_0 = True
        str_8 = module_0.strip_html(str_2, bool_0)
        str_9 = module_0.slugify(str_4)
        str_10 = module_0.roman_encode(str_5)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'F#T?iql2&53;$gmUY)d'
        bool_0 = module_0.booleanize(str_0)
        str_1 = '}\n{z*i2NEpIxzp!eD1'
        str_2 = module_0.strip_margin(str_1)
        str_3 = module_0.prettify(str_0)
        str_4 = 'i@Pog=\tO"o%&"\n1d'
        str_5 = module_0.compress(str_3)
        str_6 = module_0.snake_case_to_camel(str_4, bool_0)
        int_0 = -63
        str_7 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '@h1Yc|U'
        str_1 = module_0.strip_margin(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        int_0 = 3999
        str_2 = '^[a-zA-Z]*([a-z]+[A-Z]+|[A-Z]+[a-z]+)[a-zA-Z\\d]*$'
        str_3 = module_0.slugify(str_2)
        str_4 = module_0.roman_encode(int_0)
        int_1 = module_0.roman_decode(str_4)
        str_5 = module_0.roman_encode(int_0)
        str_6 = "((?<=\\w)\\'\\ss\\s|(?<=\\w)\\s\\'s(?=\\w)|(?<=\\w)\\s\\'s\\s(?=\\w))"
        str_7 = module_0.decompress(str_3, str_6)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        bool_0 = module_0.booleanize(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        str_1 = '\x0bF@8\x0c8op2!0yudJ>z\r'
        str_2 = module_0.reverse(str_1)
        str_3 = module_0.strip_html(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '%2y}^*S>v0l.3'
        str_1 = module_0.asciify(str_0)
        str_2 = module_0.prettify(str_1)
        str_3 = '\r.\x0bPq>\trM#~Ah~@k'
        str_4 = 'y'
        int_0 = 14
        str_5 = module_0.compress(str_3, str_4, int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 't02>Wze`,;|lDCGpl'
        var_0 = module_0.camel_case_to_snake(str_0)
        str_1 = None
        int_0 = module_0.roman_decode(str_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'F#T?iql2&53;$gmUY)d'
        bool_0 = module_0.booleanize(str_0)
        str_1 = module_0.strip_margin(str_0)
        str_2 = '}\n{z*i2NEpIxzp!eD1'
        str_3 = module_0.strip_margin(str_2)
        str_4 = '?Q\n\\}Y\n(+<t\nit8'
        str_5 = module_0.prettify(str_4)
        str_6 = 'VISA'
        bool_1 = module_0.booleanize(str_6)
        str_7 = module_0.reverse(str_0)
        int_0 = -606
        str_8 = module_0.compress(str_6, str_6, int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '}\n{z*i2NEpIxzp!eD1'
        str_1 = module_0.strip_margin(str_0)
        str_2 = module_0.prettify(str_1)
        str_3 = module_0.reverse(str_1)
        str_4 = None
        bool_0 = False
        str_5 = module_0.snake_case_to_camel(str_4, bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '}\n{z*i2NEpIxzp!eD1'
        str_1 = module_0.strip_margin(str_0)
        str_2 = module_0.prettify(str_1)
        string_formatter_0 = module_0.__StringFormatter(str_0)
        str_3 = string_formatter_0.format()
        str_4 = None
        str_5 = module_0.reverse(str_4)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '}\n{z*i2NEpIxzp!eD1'
        str_1 = module_0.strip_margin(str_0)
        str_2 = module_0.prettify(str_1)
        str_3 = module_0.reverse(str_1)
        str_4 = "0'?%"
        str_5 = module_0.reverse(str_4)
        str_6 = '=|'
        str_7 = 'i@og=\tO"o%&"1d'
        str_8 = module_0.compress(str_2)
        int_0 = 2220
        str_9 = module_0.roman_encode(int_0)
        str_10 = module_0.snake_case_to_camel(str_7, str_2)
        str_11 = module_0.asciify(str_6)
        str_12 = module_0.asciify(str_7)
        list_0 = [str_10]
        var_0 = module_0.camel_case_to_snake(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'G)/h<SQ44'
        str_1 = module_0.shuffle(str_0)
        str_2 = module_0.reverse(str_0)
        str_3 = "0'?%"
        str_4 = module_0.reverse(str_3)
        str_5 = '}D [),=(nc/'
        bool_0 = module_0.booleanize(str_5)
        str_6 = module_0.compress(str_3)
        bool_1 = False
        str_7 = module_0.strip_html(str_5, bool_1)
        int_0 = 2236
        str_8 = module_0.roman_encode(int_0)
        str_9 = module_0.snake_case_to_camel(str_4, str_4)
        str_10 = module_0.asciify(str_1)
        var_0 = module_0.camel_case_to_snake(str_6, str_3)
        str_11 = './Kz\x0c?sRq$W17d5'
        str_12 = module_0.decompress(str_11)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'G)/h<SZ#4'
        str_1 = module_0.shuffle(str_0)
        str_2 = module_0.reverse(str_0)
        str_3 = '}\n{z*i2NEpIxzp!eD1'
        str_4 = module_0.strip_margin(str_3)
        str_5 = module_0.prettify(str_4)
        str_6 = "0'?%"
        str_7 = module_0.reverse(str_6)
        str_8 = 'secure_random_hex'
        str_9 = module_0.shuffle(str_8)
        str_10 = module_0.compress(str_5)
        str_11 = module_0.prettify(str_2)
        int_0 = 4002
        str_12 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = ".'QU^,JT*4\x0c+!UZiFR^"
        str_1 = module_0.prettify(str_0)
        str_2 = 'G)/h<SZ#4'
        str_3 = module_0.shuffle(str_2)
        str_4 = module_0.reverse(str_2)
        str_5 = '}\n{z*i2NEpIxzp!eD1'
        str_6 = module_0.strip_margin(str_5)
        str_7 = module_0.prettify(str_6)
        str_8 = "0'?%"
        str_9 = module_0.reverse(str_8)
        str_10 = 'secure_random_hex'
        str_11 = module_0.shuffle(str_10)
        str_12 = module_0.compress(str_7)
        str_13 = module_0.prettify(str_4)
        int_0 = 3999
        str_14 = module_0.roman_encode(int_0)
        str_15 = module_0.snake_case_to_camel(str_11, str_7)
        str_16 = module_0.asciify(str_11)
        str_17 = '}]R #k2=G3>PgN1\t('
        bool_0 = module_0.booleanize(str_17)
        var_0 = module_0.camel_case_to_snake(str_12, str_8)
        str_18 = 'is_ip_v6'
        str_19 = ':dD6\'_/fT_e jq"'
        int_1 = None
        str_20 = module_0.compress(str_18, str_19, int_1)
    except BaseException:
        pass