# Automatically generated by Pynguin.
import ansible.plugins.lookup.sequence as module_0

def test_case_0():
    try:
        tuple_0 = None
        set_0 = {tuple_0, tuple_0}
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -3098.101
        list_0 = None
        dict_0 = None
        int_0 = False
        dict_1 = {float_0: list_0, list_0: dict_0, float_0: dict_0, float_0: int_0}
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'sY\n;0wlv|u\x0b/\\9Q8wEQ='
        lookup_module_0 = module_0.LookupModule(str_0)
        var_0 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_3():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'aHf\thht\n\r'
        dict_0 = {str_0: str_0, str_0: str_0}
        tuple_0 = (dict_0,)
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.run(str_0, tuple_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'c\xe4\xe1Jh>I-\x1b'
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        float_0 = 632.83
        lookup_module_0 = module_0.LookupModule(float_0)
        var_0 = lookup_module_0.run(bytes_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '6\x0c6E+hkzE|#w.gmGlS^\x0c'
        list_0 = [str_0, str_0, str_0, str_0]
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.run(str_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'count=5'
        str_1 = [str_0]
        var_0 = dict()
        var_1 = lookup_module_0.run(str_1, lookup_module_0, **var_0)
        str_2 = 'start=0f00 count=4 format=%04x'
        str_3 = [str_2]
        var_2 = lookup_module_0.run(str_3, var_0, **var_0)
    except BaseException:
        pass

def test_case_8():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '0'
        set_0 = {str_0}
        bytes_0 = b"\x82`\xb8\x1e\x82'%*\xc1\xd4\x1e\xe2\xf2"
        var_0 = lookup_module_0.generate_sequence()
        lookup_module_1 = module_0.LookupModule(bytes_0)
        var_1 = lookup_module_1.run(str_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '2-10/2'
        var_0 = lookup_module_0.reset()
        str_1 = '4:host%^02d'
        str_2 = [str_1]
        var_1 = lookup_module_0.run(str_2, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '5-A8'
        str_1 = '2-10/2'
        var_0 = lookup_module_0.reset()
        str_2 = [str_1]
        var_1 = lookup_module_0.run(str_2, str_0)
        str_3 = '4:host4^02d'
        str_4 = [str_3]
        var_2 = lookup_module_0.run(str_4, str_2)
    except BaseException:
        pass