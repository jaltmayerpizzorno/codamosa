# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.metaclass as module_1

def test_case_0():
    try:
        a_s_t_0 = None
        list_0 = [a_s_t_0, a_s_t_0, a_s_t_0, a_s_t_0]
        class_def_0 = module_0.ClassDef(*list_0)
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_0)
        metaclass_transformer_2 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_2 = None
        class_def_3 = metaclass_transformer_2.visit_ClassDef(class_def_2)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = '^{r_iwSf'
        tuple_0 = (bool_0, str_0)
        dict_0 = {tuple_0: tuple_0, tuple_0: bool_0}
        list_0 = [dict_0, dict_0, tuple_0, str_0]
        class_def_0 = module_0.ClassDef(*list_0)
        a_s_t_0 = None
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        a_s_t_1 = module_0.AST()
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_1)
        class_def_1 = metaclass_transformer_1.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_2():
    try:
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_0 = module_0.ClassDef()
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass