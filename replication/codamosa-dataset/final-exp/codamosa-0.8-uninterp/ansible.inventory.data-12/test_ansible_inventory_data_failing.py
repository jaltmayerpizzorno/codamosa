# Automatically generated by Pynguin.
import ansible.inventory.data as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = ';)6)A$'
        var_0 = inventory_data_0.remove_group(str_0)
        bytes_0 = b'%\x94)\x13\x1b\xd0\x1f\xe6\xc0\xda'
        var_1 = inventory_data_0.deserialize(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'lI%'
        str_1 = 'fcwv\r7O3CfkEa'
        dict_0 = {str_0: str_1, str_0: str_0, str_0: str_1}
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_group(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = None
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_group(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'group1'
        var_0 = inventory_data_0.add_host(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1546.96
        list_0 = [float_0, float_0, float_0, float_0]
        tuple_0 = None
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(list_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'localhost'
        var_0 = inventory_data_0.add_host(str_0)
        str_1 = 'localhost'
        var_1 = inventory_data_0.add_host(str_1)
        str_2 = 'Expected same result %s %s'
        var_2 = (var_0, var_1)
        var_3 = str_2 % var_2
        var_4 = print(var_3)
        set_0 = set()
        var_5 = inventory_data_0.add_host(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        var_1 = inventory_data_0.reconcile_inventory()
        str_0 = 'z``R\nSsec&Ws~%s6J@N'
        var_2 = inventory_data_0.set_variable(tuple_1, str_0, inventory_data_0)
    except BaseException:
        pass

def test_case_7():
    try:
        inventory_data_0 = module_0.InventoryData()
        tuple_0 = ()
        str_0 = '}:'
        var_0 = inventory_data_0.add_child(tuple_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xbc\x17\xeb\x8b\xe7,\xb9!\xc0\xf3'
        tuple_0 = ()
        str_0 = '>'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_0.get_groups_dict()
        var_2 = inventory_data_1.set_variable(bytes_0, tuple_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'localhost'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.add_group(str_0)
        var_2 = inventory_data_0.reconcile_inventory()
        str_1 = 'all'
        var_3 = inventory_data_0.add_group(str_1)
        var_4 = inventory_data_0.add_group(str_0)
        str_2 = 'www'
        var_5 = inventory_data_0.add_group(str_2)
        str_3 = 'db'
        var_6 = inventory_data_0.add_group(str_3)
        str_4 = ''
        var_7 = inventory_data_0.add_group(str_4)
    except BaseException:
        pass

def test_case_10():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'localhost'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.add_group(str_0)
        var_2 = inventory_data_0.reconcile_inventory()
        str_1 = 'IG'
        var_3 = inventory_data_0.add_group(str_1)
        var_4 = inventory_data_0.add_group(str_0)
        str_2 = 'www'
        var_5 = inventory_data_0.add_group(str_2)
        str_3 = 'db'
        var_6 = inventory_data_0.add_group(str_3)
        var_7 = inventory_data_0.add_child(str_2, inventory_data_0)
    except BaseException:
        pass

def test_case_11():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'localhost'
        var_0 = inventory_data_0.get_host(str_0)
        group_0 = module_1.Group()
        group_1 = module_1.Group(group_0)
    except BaseException:
        pass

def test_case_12():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'other_group'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'oTt1'
        var_1 = inventory_data_0.add_host(str_1, str_0)
        var_2 = inventory_data_0.add_host(str_0)
        str_2 = 'host3'
        var_3 = inventory_data_0.add_host(str_2, str_0)
        var_4 = inventory_data_0.reconcile_inventory()
        var_5 = inventory_data_0.get_host(str_1)
        int_0 = 0
        var_6 = inventory_data_0.get_host(str_1)
        var_7 = var_14.get_groups()[int_0]
    except BaseException:
        pass