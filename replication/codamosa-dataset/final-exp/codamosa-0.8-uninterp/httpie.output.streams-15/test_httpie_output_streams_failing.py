# Automatically generated by Pynguin.
import httpie.output.streams as module_0
import httpie.models as module_1
import httpie.output.processing as module_2

def test_case_0():
    try:
        h_t_t_p_message_0 = None
        base_stream_0 = module_0.BaseStream(h_t_t_p_message_0, h_t_t_p_message_0)
        var_0 = list(base_stream_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xeb\x91\xaf\x1a\n\xd6Y\x10\xef\xdf\xf8\x818\xdc\xdc'
        h_t_t_p_message_0 = module_1.HTTPMessage(bytes_0)
        base_stream_0 = module_0.BaseStream(h_t_t_p_message_0)
        var_0 = list(base_stream_0)
    except BaseException:
        pass

def test_case_2():
    try:
        raw_stream_0 = module_0.RawStream()
    except BaseException:
        pass

def test_case_3():
    try:
        encoded_stream_0 = module_0.EncodedStream()
    except BaseException:
        pass

def test_case_4():
    try:
        conversion_0 = None
        list_0 = []
        formatting_0 = module_2.Formatting(list_0)
        dict_0 = {}
        buffered_pretty_stream_0 = module_0.BufferedPrettyStream(conversion_0, formatting_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '^[a-z][a-z0-9.+]*://'
        h_t_t_p_message_0 = module_1.HTTPMessage(str_0)
        base_stream_0 = module_0.BaseStream(h_t_t_p_message_0)
        h_t_t_p_message_1 = module_1.HTTPMessage(base_stream_0)
        binary_suppressed_error_0 = None
        base_stream_1 = module_0.BaseStream(h_t_t_p_message_1, binary_suppressed_error_0)
        bool_0 = False
        callable_0 = None
        base_stream_2 = module_0.BaseStream(h_t_t_p_message_1, bool_0, callable_0)
    except BaseException:
        pass