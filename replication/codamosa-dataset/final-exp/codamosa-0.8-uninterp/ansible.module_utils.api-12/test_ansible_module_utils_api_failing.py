# Automatically generated by Pynguin.
import ansible.module_utils.api as module_0

def test_case_0():
    try:
        str_0 = 'CWCu>xc13*/AP)7AWR'
        var_0 = module_0.rate_limit_argument_spec(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '%s (%s)'
        var_0 = module_0.retry_argument_spec(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1518
        var_0 = module_0.retry()
        dict_0 = {}
        float_0 = -403.0
        list_0 = [dict_0, dict_0]
        var_1 = module_0.basic_auth_argument_spec()
        tuple_0 = (int_0, dict_0, float_0, list_0)
        list_1 = [tuple_0, dict_0]
        list_2 = [list_1, list_0, list_0, float_0]
        int_1 = -701
        set_0 = None
        var_2 = module_0.retry_with_delays_and_condition(int_1, set_0)
        var_3 = module_0.retry_never(list_2)
        var_4 = module_0.basic_auth_argument_spec(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\nf:]ZS2_-t%++S9z'
        float_0 = 4177.0793
        var_0 = module_0.rate_limit()
        var_1 = module_0.retry_never(float_0)
        var_2 = module_0.rate_limit(str_0)
        str_1 = None
        bool_0 = False
        var_3 = module_0.retry(bool_0)
        dict_0 = None
        var_4 = module_0.retry_with_delays_and_condition(dict_0, str_1)
        var_5 = module_0.retry_never(float_0)
        bool_1 = True
        var_6 = module_0.rate_limit_argument_spec()
        var_7 = module_0.retry()
        bytes_0 = b'p$16|\x1f'
        int_0 = None
        var_8 = module_0.rate_limit_argument_spec()
        complex_0 = None
        var_9 = module_0.retry_with_delays_and_condition(complex_0)
        tuple_0 = (bytes_0, int_0)
        tuple_1 = (dict_0, bool_1, tuple_0, int_0)
        set_0 = {bytes_0, var_2}
        var_10 = module_0.rate_limit(set_0, tuple_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        tuple_0 = (bool_0,)
        var_0 = module_0.generate_jittered_backoff(tuple_0)
        dict_0 = {var_0: var_0, tuple_0: bool_0, var_0: bool_0}
        var_1 = module_0.retry_with_delays_and_condition(dict_0)
        var_2 = module_0.retry()
        list_0 = [var_0, var_0]
        var_3 = module_0.generate_jittered_backoff()
        var_4 = module_0.basic_auth_argument_spec(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ']]/d4 .VUSv144y3AXB'
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.rate_limit(list_0)
        var_1 = module_0.retry()
        var_2 = module_0.generate_jittered_backoff()
        float_0 = -3337.9033
        var_3 = module_0.retry_argument_spec()
        var_4 = module_0.retry_never(float_0)
        var_5 = module_0.rate_limit_argument_spec()
        var_6 = module_0.basic_auth_argument_spec()
        var_7 = module_0.rate_limit()
        var_8 = module_0.basic_auth_argument_spec()
        bytes_0 = b'oL\x10\xd5\x7fC\xbb\xb3\x80\x1c]\x93\xda'
        var_9 = module_0.retry_with_delays_and_condition(bytes_0)
        var_10 = module_0.retry_argument_spec()
        dict_0 = None
        var_11 = module_0.retry(bytes_0, dict_0)
        var_12 = module_0.rate_limit_argument_spec(dict_0)
        var_13 = module_0.rate_limit_argument_spec()
        var_14 = module_0.rate_limit(bytes_0)
        var_15 = module_0.rate_limit_argument_spec()
        set_0 = {var_2, str_0, var_0}
        var_16 = module_0.rate_limit_argument_spec(set_0)
    except BaseException:
        pass