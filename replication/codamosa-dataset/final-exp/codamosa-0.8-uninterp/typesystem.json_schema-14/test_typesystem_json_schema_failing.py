# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3
import decimal as module_4

def test_case_0():
    try:
        bool_0 = False
        field_0 = module_0.from_json_schema(bool_0)
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        str_0 = 'M*W\r\x0b6~x}9_Q98vC`R'
        bool_1 = None
        field_1 = module_0.from_json_schema_type(dict_0, str_0, bool_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        str_0 = None
        bool_0 = True
        list_0 = []
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0)
        field_0 = module_0.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.ref_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = None
        schema_definitions_0 = None
        dict_1 = {dict_0: schema_definitions_0, dict_0: schema_definitions_0, dict_0: schema_definitions_0, dict_0: dict_0}
        field_0 = module_0.const_from_json_schema(dict_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.all_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -334.4385179430374
        dict_0 = {float_0: float_0}
        str_0 = 'kd_vH'
        field_0 = module_0.from_json_schema(dict_0)
        dict_1 = {str_0: dict_0, str_0: dict_0, str_0: dict_0, str_0: dict_0}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        field_1 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_1)
        dict_2 = None
        schema_definitions_1 = module_1.SchemaDefinitions()
        schema_definitions_2 = None
        field_2 = module_0.any_of_from_json_schema(dict_2, schema_definitions_2)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -336.0
        dict_0 = {float_0: float_0}
        str_0 = '/kd\r_vH'
        dict_1 = {str_0: dict_0, str_0: dict_0, str_0: dict_0, str_0: dict_0}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        schema_definitions_1 = module_1.SchemaDefinitions()
        field_1 = module_0.one_of_from_json_schema(dict_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Schema'
        dict_0 = {str_0: str_0, str_0: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -330.9935898178128
        dict_0 = {float_0: float_0}
        str_0 = 'kd_vH'
        dict_1 = {str_0: dict_0, str_0: dict_0, str_0: dict_0, str_0: dict_0}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        schema_definitions_1 = module_1.SchemaDefinitions()
        field_1 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '+n/R /-39KZ.]*@aOE'
        field_0 = module_2.Field(default=str_0)
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'KSnA+itRXe7[\\'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0]
        dict_1 = {str_0: list_0, str_0: dict_0}
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0, **dict_1)
        var_0 = module_0.to_json_schema(schema_definitions_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'properties'
        str_1 = 'string'
        int_0 = 18
        var_0 = {str_1: str_1, str_0: int_0}
        var_1 = {str_0: str_1, str_0: var_0}
        field_0 = module_0.from_json_schema(var_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'oneOf'
        str_1 = 'type'
        str_2 = 'string'
        str_3 = {str_1: str_2}
        str_4 = 'integer'
        str_5 = {str_1: str_4}
        str_6 = [str_3, str_5]
        str_7 = {str_0: str_6}
        var_0 = None
        field_0 = module_0.one_of_from_json_schema(str_7, var_0)
        str_8 = 'test'
        any_0 = field_0.validate(str_8)
        int_0 = 42
        any_1 = field_0.validate(int_0)
        any_2 = field_0.validate(var_0)
        bool_0 = True
        any_3 = field_0.validate(bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'if'
        str_1 = 'then'
        str_2 = 'else'
        str_3 = 'type'
        str_4 = 'integer'
        str_5 = {str_3: str_4}
        str_6 = {str_3: str_1}
        str_7 = {str_3: str_4}
        str_8 = {str_0: str_5, str_1: str_6, str_2: str_7}
        var_0 = None
        field_0 = module_0.if_then_else_from_json_schema(str_8, var_0)
    except BaseException:
        pass

def test_case_14():
    try:
        schema_definitions_0 = module_1.SchemaDefinitions()
        str_0 = '$ref'
        str_1 = {str_0: str_0}
        field_0 = module_0.from_json_schema(str_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'allOf'
        int_0 = 4
        dict_0 = {int_0: str_0, str_0: str_0}
        field_0 = module_0.from_json_schema(dict_0)
        number_0 = module_2.Number()
        dict_1 = None
        var_0 = module_0.to_json_schema(number_0, dict_1)
    except BaseException:
        pass

def test_case_16():
    try:
        any_0 = module_2.Any()
        var_0 = module_0.to_json_schema(any_0)
        never_match_0 = module_3.NeverMatch()
        var_1 = module_0.to_json_schema(never_match_0)
        bool_0 = True
        string_0 = module_2.String()
        var_2 = module_0.to_json_schema(string_0)
        int_0 = 0
        string_1 = module_2.String(min_length=int_0)
        var_3 = module_0.to_json_schema(string_1)
        string_2 = module_2.String(max_length=int_0)
        var_4 = module_0.to_json_schema(string_2)
        integer_0 = module_2.Integer()
        var_5 = module_0.to_json_schema(integer_0)
        float_0 = module_2.Float()
        var_6 = module_0.to_json_schema(float_0)
        decimal_0 = module_4.Decimal()
        var_7 = module_0.to_json_schema(decimal_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'KSnA+itRXe7p\\'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = []
        dict_1 = {}
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0, **dict_1)
        str_1 = 'Must be less than {exclusive_maximum}.'
        bool_0 = True
        var_0 = module_0.to_json_schema(schema_definitions_0, dict_0)
        schema_definitions_1 = module_1.SchemaDefinitions()
        field_0 = module_0.from_json_schema_type(dict_0, str_1, bool_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 1295.88
        integer_0 = module_2.Integer(maximum=float_0, exclusive_maximum=float_0)
        var_0 = module_0.to_json_schema(integer_0)
        str_0 = 'M$%0$\n",3ub6J4DYix'
        dict_0 = None
        list_0 = [dict_0, str_0]
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0)
    except BaseException:
        pass