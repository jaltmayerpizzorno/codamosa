# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        str_0 = 'Sj0<zX9\n3cH?'
        int_0 = -456
        parser_generator_0 = module_0.ParserGenerator(str_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'R'
        pgen_grammar_0 = module_0.generate_grammar(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "\n        The node immediately preceding the invocant in their paren's children\n        list. If the invocant does not have a previous sibling, it is None.\n        "
        int_0 = -295
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: int_0, n_f_a_state_0: str_0, n_f_a_state_0: int_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "\n        The node immediately preceding the invocant in their parent's children\n        list. If the invocant does not have a previous sibling, it is None.\n        "
        int_0 = -285
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: int_0, n_f_a_state_0: str_0, n_f_a_state_0: int_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        str_0 = '/Rl~e'
        str_1 = None
        dict_0 = {str_0: n_f_a_state_0, str_1: str_1}
        n_f_a_state_0.addarc(n_f_a_state_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = None
        n_f_a_state_0.addarc(n_f_a_state_1)
    except BaseException:
        pass

def test_case_6():
    try:
        n_f_a_state_0 = None
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        dict_0 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        str_1 = '\x0cnBWPURe wPgn&Td'
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_0: str_0, n_f_a_state_1: str_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_1)
        n_f_a_state_0.addarc(n_f_a_state_0, str_1)
        pgen_grammar_0 = module_0.PgenGrammar()
        tuple_0 = (n_f_a_state_1, n_f_a_state_0)
        parser_generator_0 = module_0.ParserGenerator(str_1, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = None
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_1)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_0: str_0, n_f_a_state_1: str_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_2 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_2.addarc(d_f_a_state_1, str_0)
        str_1 = None
        d_f_a_state_1.addarc(d_f_a_state_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ']O}~Pn\r,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_2 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: str_0, n_f_a_state_2: str_0, n_f_a_state_2: n_f_a_state_2}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_2 = None
        d_f_a_state_1.addarc(d_f_a_state_2, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        n_f_a_state_2 = module_0.NFAState()
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        str_1 = '\x0cnBWPURe wPgn&Td'
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_1)
        n_f_a_state_2 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: str_0, n_f_a_state_2: str_0, n_f_a_state_2: n_f_a_state_2}
        d_f_a_state_2 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_2.addarc(d_f_a_state_1, str_0)
        bool_0 = d_f_a_state_2.__eq__(d_f_a_state_0)
        n_f_a_state_1.addarc(n_f_a_state_1, str_1)
        pgen_grammar_0 = module_0.PgenGrammar()
        n_f_a_state_3 = module_0.NFAState()
        n_f_a_state_3.addarc(n_f_a_state_0)
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        str_1 = '\x0cnBWPURe wPgn&Td'
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_1)
        n_f_a_state_2 = module_0.NFAState()
        d_f_a_state_1.addarc(d_f_a_state_1, str_0)
        n_f_a_state_1.addarc(n_f_a_state_1, str_1)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_1)
        pgen_grammar_0 = module_0.PgenGrammar()
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        n_f_a_state_1.addarc(n_f_a_state_0, str_0)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        pgen_grammar_0 = module_0.PgenGrammar()
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        str_1 = '\x0cnBWPURe wPgn&Td'
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_1)
        n_f_a_state_2 = module_0.NFAState()
        d_f_a_state_1.addarc(d_f_a_state_1, str_0)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_0)
        n_f_a_state_1.addarc(n_f_a_state_1, str_1)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_1)
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ']O}~Pnh,q^(o%Wz5VMb'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_1)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_0: str_0, n_f_a_state_1: str_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_2 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_2.addarc(d_f_a_state_1, str_0)
        str_1 = '`'
        d_f_a_state_1.addarc(d_f_a_state_0, str_1)
        bool_1 = d_f_a_state_2.__eq__(d_f_a_state_1)
        n_f_a_state_2 = None
        n_f_a_state_2.addarc(n_f_a_state_1)
    except BaseException:
        pass