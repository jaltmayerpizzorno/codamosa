# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        str_0 = "['Lf"
        float_0 = 1097.417
        bytes_0 = b'\xce\x19\x9f'
        rough_parser_0 = module_0.RoughParser(float_0, bytes_0)
        var_0 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{r%kC'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        var_0 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -1029.27
        float_1 = -3371.5
        str_0 = 'P(N}{'
        rough_parser_0 = module_0.RoughParser(float_1, str_0)
        str_1 = ''
        str_2 = '$mRI0-7/gAd}u!S,?4{6'
        list_0 = [float_0, str_2]
        rough_parser_1 = module_0.RoughParser(str_2, list_0)
        var_0 = rough_parser_1.set_str(str_1)
        var_1 = rough_parser_1.get_continuation_type()
        var_2 = rough_parser_1.compute_backslash_indent()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        rough_parser_0 = module_0.RoughParser(bool_0, dict_0)
        var_0 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\rkfT'
        list_0 = [str_0, str_0, str_0, str_0]
        rough_parser_0 = module_0.RoughParser(str_0, list_0)
        var_0 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -993.3873344458576
        str_0 = ''
        list_0 = [float_0, str_0]
        rough_parser_0 = module_0.RoughParser(str_0, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'O)'
        list_0 = [str_0, str_0]
        hyper_parser_0 = module_0.HyperParser(str_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -1043.1808422170275
        str_0 = ''
        str_1 = '$mRI-7gAd}u!S,?4{6'
        list_0 = [float_0, str_1]
        rough_parser_0 = module_0.RoughParser(str_1, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        dict_0 = {}
        var_1 = rough_parser_0.find_good_parse_start()
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, dict_0)
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = string_translate_pseudo_mapping_0.__iter__()
        var_4 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -706.3345
        dict_0 = {float_0: float_0}
        rough_parser_0 = module_0.RoughParser(float_0, dict_0)
        var_0 = rough_parser_0.find_good_parse_start()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        list_0 = [str_0]
        rough_parser_0 = module_0.RoughParser(str_0, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -1043.181
        str_0 = ''
        list_0 = [float_0, str_0]
        rough_parser_0 = module_0.RoughParser(str_0, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.is_block_closer()
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Htg\n&OuEdT'
        str_1 = 'yT~d!:N\t(_p'
        rough_parser_0 = module_0.RoughParser(str_0, str_1)
        float_0 = 4.0
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -2037.0
        str_0 = ''
        list_0 = [float_0, float_0, str_0]
        rough_parser_0 = module_0.RoughParser(str_0, list_0)
        bool_0 = False
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -1029.27
        str_0 = ' ij`\x0c."H!Q3qU$yU4'
        list_0 = [float_0, str_0]
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(list_0, bool_0)
        var_0 = rough_parser_0.set_lo(bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -2037.0
        str_0 = ''
        str_1 = '$ImRI-7gAd}u!S,?4{6'
        list_0 = [float_0, str_1]
        rough_parser_0 = module_0.RoughParser(str_1, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        dict_0 = {}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, dict_0)
        int_0 = None
        var_1 = string_translate_pseudo_mapping_0.__getitem__(int_0)
        var_2 = rough_parser_0.find_good_parse_start(str_1)
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -1029.27
        str_0 = '8'
        str_1 = ' ij`\x0c."H!Q3qU$yU4'
        bytes_0 = b'q\xea\xc8'
        dict_0 = {float_0: float_0}
        list_0 = [str_0]
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, list_0)
        var_0 = string_translate_pseudo_mapping_0.get(bytes_0, float_0)
        float_1 = -2683.0
        list_1 = [str_1, str_0, float_0, str_1]
        rough_parser_0 = module_0.RoughParser(float_1, list_1)
        var_1 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = -1029.27
        str_0 = ''
        str_1 = '$mRI0-7/gAd}u!S,?4{6'
        list_0 = [float_0, str_1]
        rough_parser_0 = module_0.RoughParser(str_1, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ''
        list_0 = [str_0]
        rough_parser_0 = module_0.RoughParser(str_0, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = -2037.0
        str_0 = ''
        str_1 = '$ImRI-7gAd}u!S,?4{6'
        list_0 = [float_0, str_1]
        rough_parser_0 = module_0.RoughParser(list_0, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        dict_0 = {}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, dict_0)
        var_1 = rough_parser_0.find_good_parse_start(str_1)
        var_2 = rough_parser_0.get_base_indent_string()
        var_3 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_19():
    try:
        float_0 = -1029.27
        str_0 = ''
        str_1 = '$mRI-7gAd}u!S,?4{6'
        list_0 = [float_0, str_1]
        rough_parser_0 = module_0.RoughParser(str_1, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        dict_0 = {}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, dict_0)
        var_1 = string_translate_pseudo_mapping_0.__len__()
        int_0 = 675
        rough_parser_1 = module_0.RoughParser(float_0, int_0)
        var_2 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = -1030.5138135250666
        str_0 = ''
        str_1 = '$mRI-7gAd}u!S,?4{6'
        list_0 = [float_0, str_1]
        rough_parser_0 = module_0.RoughParser(str_1, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        dict_0 = {}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, dict_0)
        var_1 = string_translate_pseudo_mapping_0.__len__()
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = -993.3873344458576
        str_0 = ''
        str_1 = '$mRI-7gAd}u!S,?4{6'
        list_0 = [float_0, str_1]
        rough_parser_0 = module_0.RoughParser(str_1, list_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.get_base_indent_string()
    except BaseException:
        pass