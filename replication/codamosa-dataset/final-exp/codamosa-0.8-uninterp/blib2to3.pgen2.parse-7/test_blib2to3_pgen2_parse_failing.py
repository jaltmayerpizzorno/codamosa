# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -734
        str_0 = '&e0+~:TL'
        bytes_0 = b'!\xac\xf9>~'
        tuple_0 = (int_0, str_0, bytes_0, grammar_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        str_0 = 'pBy"p%qO`>Y'
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -322.2265
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        grammar_0 = module_0.Grammar()
        float_0 = 1986.300878
        tuple_0 = (float_0,)
        set_0 = {grammar_0, tuple_0}
        str_0 = ':F$}{\r;,g\n\t\n~pHwI'
        parser_0 = module_1.Parser(grammar_0)
        str_1 = 'PXlcQ}DlW)'
        int_0 = 11
        tuple_1 = (int_0, int_0)
        tuple_2 = (str_1, tuple_1)
        parse_error_0 = module_1.ParseError(str_0, parser_0, str_0, tuple_2)
        parser_1 = module_1.Parser(grammar_0, set_0)
        parser_1.setup()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 42
        grammar_0 = module_0.Grammar()
        var_0 = grammar_0.copy()
        int_1 = 2109
        str_0 = '#S[-vYq] \nE-'
        int_2 = 38
        tuple_0 = (int_2, int_0)
        tuple_1 = (str_0, tuple_0)
        grammar_1 = module_0.Grammar()
        bool_0 = False
        parser_0 = module_1.Parser(grammar_1, bool_0)
        parser_0.shift(int_0, var_0, int_1, tuple_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1958
        int_1 = None
        tuple_0 = (int_0, int_1)
        list_0 = [tuple_0, tuple_0]
        list_1 = [list_0]
        int_2 = 532
        dict_0 = {int_0: int_1, int_1: int_2}
        tuple_1 = (list_1, dict_0)
        str_0 = 'rg%}x\x0c&RRg'
        tuple_2 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_1, int_2, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -1086
        var_0 = grammar_0.copy()
        str_0 = 'H|'
        tuple_0 = None
        optional_0 = None
        tuple_1 = (int_0, str_0, tuple_0, optional_0)
        parse_error_0 = module_1.ParseError(str_0, int_0, str_0, tuple_0)
        var_1 = module_1.lam_sub(grammar_0, tuple_1)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 1
        str_0 = '.'
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        set_0 = {str_0}
        parser_0 = module_1.Parser(grammar_0, set_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 1
        str_0 = '.'
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'QY8W'
        int_0 = 1
        int_1 = -2266
        int_2 = -2452
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        str_1 = None
        bool_0 = parser_0.addtoken(int_0, str_1, tuple_1)
    except BaseException:
        pass