# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_1.__gt__(semantic_version_0)
        semantic_version_2 = module_0.SemanticVersion()
        float_0 = 416.652
        alpha_0 = module_0._Alpha(float_0)
        var_1 = semantic_version_1.from_loose_version(alpha_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        alpha_0 = module_0._Alpha(bool_0)
        set_0 = set()
        var_0 = alpha_0.__eq__(alpha_0)
        numeric_0 = module_0._Numeric(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = 'yS'
        bool_0 = False
        alpha_0 = module_0._Alpha(bool_0)
        var_0 = alpha_0.__ne__(str_0)
        float_0 = -84.0
        var_1 = semantic_version_0.__eq__(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        int_0 = -581
        alpha_0 = module_0._Alpha(int_0)
        dict_0 = None
        list_0 = [alpha_0, int_0, bool_0, dict_0]
        var_0 = alpha_0.__ne__(list_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_1 = alpha_1.__le__(numeric_0)
        list_1 = []
        numeric_1 = module_0._Numeric(list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        alpha_0 = None
        int_0 = -3255
        float_0 = 1299.683
        tuple_0 = (int_0, float_0)
        alpha_1 = module_0._Alpha(tuple_0)
        var_0 = alpha_1.__lt__(alpha_0)
    except BaseException:
        pass

def test_case_5():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '4!WlWH'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__lt__(str_0)
        var_1 = semantic_version_0.__repr__()
        str_1 = '\n        Given a dictionary of values, load up the field attributes for\n        this object. As with serialize(), if there are any non-field\n        attribute data members, this method will need to be overridden\n        and extended.\n        '
        loose_version_0 = module_1.LooseVersion(str_1)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_6():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(semantic_version_0)
        bool_0 = False
        str_0 = 'L~9eQ]s_b\nXVvZ'
        alpha_0 = module_0._Alpha(str_0)
        var_1 = alpha_0.__lt__(str_0)
        numeric_0 = module_0._Numeric(bool_0)
        var_2 = numeric_0.__gt__(alpha_0)
        tuple_0 = ()
        str_1 = 'L~9eQ]s_XvZ'
        var_3 = alpha_0.__ge__(str_1)
        var_4 = numeric_0.__eq__(tuple_0)
        var_5 = semantic_version_0.__repr__()
        var_6 = alpha_0.__le__(numeric_0)
        var_7 = semantic_version_0.__repr__()
        loose_version_0 = module_1.LooseVersion()
        var_8 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '"'
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__le__(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_1.__gt__(semantic_version_0)
        bool_0 = False
        str_0 = 'X@@$"T*K1qPRJe_*}!/'
        alpha_0 = module_0._Alpha(str_0)
        numeric_0 = module_0._Numeric(bool_0)
        var_1 = numeric_0.__gt__(alpha_0)
        var_2 = semantic_version_0.__repr__()
        alpha_1 = module_0._Alpha(str_0)
        var_3 = semantic_version_1.from_loose_version(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(semantic_version_0)
        bool_0 = False
        str_0 = 'L~9eQ]s_b\nXVvZ'
        alpha_0 = module_0._Alpha(str_0)
        numeric_0 = module_0._Numeric(bool_0)
        var_1 = numeric_0.__gt__(alpha_0)
        int_0 = 1659
        var_2 = numeric_0.__ge__(int_0)
        tuple_0 = ()
        var_3 = numeric_0.__eq__(tuple_0)
        var_4 = semantic_version_0.__repr__()
        var_5 = numeric_0.__repr__()
        var_6 = alpha_0.__le__(numeric_0)
        var_7 = semantic_version_0.__repr__()
        loose_version_0 = None
        alpha_1 = module_0._Alpha(loose_version_0)
        str_1 = '"z\'}Vl~5$FdTRKC|Enkm'
        var_8 = numeric_0.__repr__()
        str_2 = '1'
        int_1 = -1007
        var_9 = numeric_0.__eq__(int_1)
        loose_version_1 = module_1.LooseVersion(str_2)
        int_2 = 24
        var_10 = numeric_0.__le__(int_2)
        var_11 = semantic_version_0.from_loose_version(loose_version_1)
        loose_version_2 = module_1.LooseVersion()
        list_0 = [var_11, str_1, tuple_0]
        var_12 = semantic_version_0.from_loose_version(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'u"P%\\l~)sYU`w'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        str_0 = '1.2.3'
        semantic_version_1 = module_0.SemanticVersion(str_0)
        str_1 = "+r&.'P/gdC_}/8\x0cdL"
        var_1 = semantic_version_1.__le__(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ')?o\r%>vNl%@(ID'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -2160.08624
        numeric_0 = module_0._Numeric(float_0)
        int_0 = 236
        numeric_1 = module_0._Numeric(int_0)
        var_0 = numeric_1.__lt__(numeric_0)
        numeric_2 = None
        alpha_0 = module_0._Alpha(numeric_2)
        str_0 = 'Y&Yk'
        numeric_3 = module_0._Numeric(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_1.__gt__(semantic_version_0)
        var_1 = semantic_version_0.__repr__()
        str_0 = '{{\x0c6\nYAHDX_#^'
        var_2 = semantic_version_1.from_loose_version(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        int_0 = -581
        alpha_0 = module_0._Alpha(int_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_0 = alpha_1.__le__(numeric_0)
        list_0 = []
        numeric_1 = module_0._Numeric(list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(semantic_version_0)
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        tuple_0 = ()
        var_1 = numeric_0.__eq__(tuple_0)
        var_2 = semantic_version_0.__repr__()
        str_0 = '"z\'}Vl~5$FdTRKC|Enkm'
        var_3 = semantic_version_0.from_loose_version(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = True
        bool_1 = True
        numeric_0 = module_0._Numeric(bool_1)
        var_0 = numeric_0.__le__(bool_0)
        set_0 = {var_0}
        var_1 = numeric_0.__ne__(set_0)
        str_0 = '+'
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_1.__gt__(semantic_version_0)
        bool_0 = False
        str_0 = 'L~9eQ]s_b\nXVvZ'
        alpha_0 = module_0._Alpha(str_0)
        var_1 = alpha_0.__lt__(str_0)
        numeric_0 = module_0._Numeric(bool_0)
        var_2 = numeric_0.__le__(numeric_0)
        var_3 = numeric_0.__gt__(alpha_0)
        tuple_0 = ()
        var_4 = numeric_0.__eq__(tuple_0)
        str_1 = None
        bytes_0 = b'\xe9\x0cBP\x9e\xf4@\xab\x14\xc1\x96\xe5\xa7:\xb3'
        list_0 = [alpha_0, str_1, bytes_0]
        var_5 = semantic_version_0.__eq__(list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(semantic_version_0)
        var_1 = semantic_version_0.__repr__()
        var_2 = semantic_version_0.__repr__()
        loose_version_0 = module_1.LooseVersion()
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '1.0'
        loose_version_0 = module_1.LooseVersion(str_0)
        str_1 = '1.0.0'
        semantic_version_0 = module_0.SemanticVersion(str_1)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
        loose_version_1 = module_1.LooseVersion()
        str_2 = 'DCTe\x0c6'
        semantic_version_1 = module_0.SemanticVersion()
        var_1 = semantic_version_1.from_loose_version(str_2)
    except BaseException:
        pass