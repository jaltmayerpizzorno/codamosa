# Automatically generated by Pynguin.
import ansible.playbook.block as module_0
import ansible.playbook.role as module_1

def test_case_0():
    try:
        str_0 = 't62D%ag\x0bRSx\x0cd:S'
        block_0 = module_0.Block(str_0, str_0)
        var_0 = block_0.get_include_params()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 490.4
        bytes_0 = b"'T\xfc"
        int_0 = -2598
        block_0 = module_0.Block(int_0)
        var_0 = block_0.serialize()
        block_1 = module_0.Block(float_0, bytes_0)
        var_1 = block_1.__repr__()
        var_2 = block_1.get_dep_chain()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '> /dev/null 2>&1'
        block_0 = module_0.Block()
        var_0 = block_0.__repr__()
        float_0 = -520.654725
        var_1 = block_0.get_first_parent_include()
        list_0 = [str_0, str_0, str_0]
        set_0 = set()
        str_1 = 'h~M#Rx "%m(e9`Jm\\'
        block_1 = module_0.Block(str_1)
        tuple_0 = (float_0, list_0, set_0, block_1)
        block_2 = module_0.Block(tuple_0)
        var_2 = block_0.serialize()
        str_2 = '~kTNR8g6blr7A\x0bM{'
        var_3 = block_2.filter_tagged_tasks(str_2)
        var_4 = block_2.deserialize(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n    This is a OpenBSD family Hostname manipulation strategy class - it edits\n    the /etc/myname file.\n    '
        set_0 = {str_0, str_0}
        float_0 = 1966.46
        block_0 = module_0.Block(float_0)
        var_0 = block_0.__ne__(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'wQ'
        block_0 = module_0.Block(str_0)
        var_0 = block_0.has_tasks()
        var_1 = block_0.get_first_parent_include()
        bool_0 = None
        var_2 = block_0.get_vars()
        var_3 = block_0.deserialize(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1846
        str_0 = ''
        bytes_0 = b'\x99N\xf1\xde`\xc4.\x82\x926-\x1a\x14\xea\xbdv'
        str_1 = 'c'
        float_0 = 1000.0
        block_0 = module_0.Block(bytes_0, str_1, float_0)
        var_0 = block_0.has_tasks()
        str_2 = 'P'
        block_1 = module_0.Block(str_2)
        block_2 = module_0.Block(int_0, str_0, block_1)
        float_1 = 2157.56
        var_1 = block_1.is_block(float_1)
        var_2 = block_2.copy()
        var_3 = block_0.get_vars()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        set_0 = set()
        block_0 = module_0.Block()
        tuple_0 = ()
        var_0 = block_0.copy(tuple_0)
        var_1 = block_0.load(bool_0, bool_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = 'FLL6\rZ7'
        block_0 = module_0.Block()
        var_0 = block_0.load(dict_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Kd?H}(9'
        float_0 = -3276.94047
        block_0 = module_0.Block(str_0, float_0)
        var_0 = block_0.get_dep_chain()
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x95\xf1J\xf6\x8d\xa8\x94\x18\xf15\x90\xf3\x12'
        block_0 = module_0.Block(bytes_0)
        block_1 = module_0.Block(block_0)
        int_0 = 1881
        block_2 = module_0.Block()
        var_0 = block_2.get_vars()
        str_0 = "OIlT 5$Z&Zi9\\+f'"
        var_1 = block_2.has_tasks()
        block_3 = module_0.Block(block_2, str_0)
        block_4 = module_0.Block(block_2)
        var_2 = block_4.get_vars()
        var_3 = block_3.set_loader(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        int_0 = 3750
        tuple_0 = (bool_0, int_0)
        bytes_0 = b'\xf7\xde6%9v\xed\x16\xff\x88\xd2\r'
        block_0 = module_0.Block(tuple_0, bytes_0, bool_0)
        var_0 = block_0.serialize()
    except BaseException:
        pass

def test_case_11():
    try:
        block_0 = module_0.Block()
        bool_0 = False
        tuple_0 = ()
        block_1 = module_0.Block(block_0, bool_0, tuple_0)
        var_0 = block_1.get_dep_chain()
        var_1 = block_1.serialize()
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0}
        str_0 = 'x T2JqB-`l@'
        block_0 = module_0.Block(str_0)
        var_0 = block_0.get_include_params()
        block_1 = module_0.Block(bool_0, set_0)
        var_1 = block_1.serialize()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'G~^.{g13'
        bytes_0 = b'\x1e\x1d4\x99Q\x91"\xdb\xa4\xa5\xd2\x05\xeck\xb27J'
        block_0 = module_0.Block(str_0, bytes_0)
        var_0 = block_0.all_parents_static()
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -3046
        set_0 = {int_0, int_0}
        dict_0 = {}
        block_0 = module_0.Block(set_0, int_0, dict_0)
        var_0 = block_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b''
        list_0 = []
        str_0 = 'Hk$.yxV-2}<D;22hi@'
        block_0 = module_0.Block(bytes_0, list_0, str_0)
        set_0 = set()
        var_0 = block_0.set_loader(set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 2301.014
        str_0 = '.FZX.,_:9X4/D<=-XL'
        tuple_0 = (str_0,)
        block_0 = module_0.Block()
        dict_0 = {tuple_0: tuple_0, tuple_0: str_0}
        block_1 = module_0.Block(dict_0, dict_0, float_0, dict_0)
        float_1 = -3115.1743162104854
        block_2 = module_0.Block(block_1, float_1, dict_0)
        block_3 = module_0.Block()
        var_0 = block_3.set_loader(block_3)
        var_1 = block_3.all_parents_static()
        set_0 = set()
        var_2 = block_3.preprocess_data(block_3)
        var_3 = block_3.copy()
        var_4 = block_3.filter_tagged_tasks(set_0)
        var_5 = block_3.has_tasks()
        str_1 = "\n    Used to insert chunks of code into modules before transfer rather than\n    doing regular python imports.  This allows for more efficient transfer in\n    a non-bootstrapping scenario by not moving extra files over the wire and\n    also takes care of embedding arguments in the transferred modules.\n\n    This version is done in such a way that local imports can still be\n    used in the module code, so IDEs don't have to be aware of what is going on.\n\n    Example:\n\n    from ansible.module_utils.basic import *\n\n       ... will result in the insertion of basic.py into the module\n       from the module_utils/ directory in the source tree.\n\n    For powershell, this code effectively no-ops, as the exec wrapper requires access to a number of\n    properties not available here.\n\n    "
        var_6 = block_2.deserialize(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = "P%eUgPoD'_\nH\x0crm49M"
        bytes_0 = b''
        set_0 = set()
        list_0 = [set_0, bytes_0, str_0, str_0]
        dict_0 = {}
        str_1 = 'C-#Hw1\rwc"'
        role_0 = module_1.Role(dict_0, str_1)
        block_0 = module_0.Block(str_0, str_0, role_0)
        var_0 = block_0.has_tasks()
        block_1 = module_0.Block(list_0, role_0)
        str_2 = '0242ac11-0003-6e1d-4fc3-00000000003a'
        block_2 = module_0.Block(set_0, block_1, str_2)
        var_1 = block_0.serialize()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'foo'
        int_0 = 1
        str_1 = 'bar'
        bool_0 = True
        bool_1 = True
        var_0 = dict(module=str_0, when=int_0, register=str_1, fail_when_missing=bool_0, always_run=bool_1)
        bool_2 = True
        var_1 = [var_0, bool_2]
        var_2 = dict(block=var_1)
        block_0 = module_0.Block()
        var_3 = block_0.load(var_2)
    except BaseException:
        pass