# Automatically generated by Pynguin.
import tornado.locks as module_0
import builtins as module_1

def test_case_0():
    try:
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_1():
    try:
        event_0 = module_0.Event()
        optional_0 = None
        base_exception_0 = module_1.BaseException()
        list_0 = None
        bytes_0 = b'\x16\xbe\x97A\xffn\xc3\xec\x1f\x07m'
        tuple_0 = (list_0, bytes_0)
        lock_0 = module_0.Lock()
        lock_0.__aexit__(optional_0, base_exception_0, tuple_0)
        event_0.clear()
        str_0 = event_0.__repr__()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_2():
    try:
        event_0 = module_0.Event()
        str_0 = event_0.__repr__()
        awaitable_0 = None
        list_0 = [awaitable_0, awaitable_0]
        releasing_context_manager_0 = module_0._ReleasingContextManager(list_0)
        releasing_context_manager_0.__enter__()
        lock_0 = module_0.Lock()
        str_1 = lock_0.__repr__()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        event_1 = module_0.Event()
        event_1.set()
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_3():
    try:
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        event_0 = module_0.Event()
        event_0.set()
        str_0 = 'GT0i INW'
        str_1 = None
        dict_0 = {str_0: event_0, str_1: str_0, str_0: str_1, str_1: semaphore_0}
        base_exception_0 = module_1.BaseException()
        none_type_0 = None
        releasing_context_manager_0 = module_0._ReleasingContextManager(event_0)
        releasing_context_manager_0.__exit__(dict_0, base_exception_0, none_type_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -1814
        semaphore_0 = module_0.Semaphore(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        semaphore_0 = module_0.Semaphore()
        awaitable_0 = semaphore_0.acquire()
    except BaseException:
        pass

def test_case_6():
    try:
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_7():
    try:
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__aenter__()
        none_type_0 = None
        optional_0 = None
        str_0 = '_writers'
        semaphore_0.__exit__(none_type_0, optional_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        bounded_semaphore_0.release()
    except BaseException:
        pass

def test_case_9():
    try:
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_10():
    try:
        event_0 = module_0.Event()
        event_0.set()
        str_0 = event_0.__repr__()
        semaphore_0 = module_0.Semaphore()
        lock_0 = module_0.Lock()
        awaitable_0 = lock_0.acquire()
    except BaseException:
        pass

def test_case_11():
    try:
        semaphore_0 = module_0.Semaphore()
        str_0 = semaphore_0.__repr__()
        lock_0 = module_0.Lock()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_12():
    try:
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        event_0 = module_0.Event()
        event_0.set()
        event_0.set()
        str_0 = 'GT0i INW'
        str_1 = None
        dict_0 = {str_0: event_0, str_1: str_0, str_0: str_1, str_1: semaphore_0}
        base_exception_0 = module_1.BaseException()
        none_type_0 = None
        releasing_context_manager_0 = module_0._ReleasingContextManager(event_0)
        releasing_context_manager_0.__exit__(dict_0, base_exception_0, none_type_0)
    except BaseException:
        pass

def test_case_13():
    try:
        event_0 = module_0.Event()
        str_0 = event_0.__repr__()
        awaitable_0 = None
        list_0 = [awaitable_0, awaitable_0]
        releasing_context_manager_0 = module_0._ReleasingContextManager(list_0)
        releasing_context_manager_0.__enter__()
        lock_0 = module_0.Lock()
        str_1 = lock_0.__repr__()
        semaphore_0 = module_0.Semaphore()
        lock_1 = module_0.Lock()
        list_1 = [lock_1, releasing_context_manager_0]
        base_exception_0 = module_1.BaseException(*list_1)
        lock_0.__exit__(releasing_context_manager_0, base_exception_0, semaphore_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 0
        semaphore_0 = module_0.Semaphore(int_0)
        str_0 = semaphore_0.__repr__()
        event_0 = module_0.Event()
        str_1 = event_0.__repr__()
        awaitable_0 = None
        list_0 = [awaitable_0, awaitable_0]
        releasing_context_manager_0 = module_0._ReleasingContextManager(list_0)
        releasing_context_manager_0.__enter__()
        lock_0 = module_0.Lock()
        str_2 = lock_0.__repr__()
        semaphore_1 = module_0.Semaphore()
        semaphore_1.release()
        event_1 = module_0.Event()
        event_1.set()
        lock_0.release()
    except BaseException:
        pass