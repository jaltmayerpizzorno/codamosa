# Automatically generated by Pynguin.
import tornado.log as module_0
import logging as module_1

def test_case_0():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = log_formatter_0.format(log_formatter_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        module_0.enable_pretty_logging()
        str_0 = "jyqpU4o'$H"
        int_0 = -2344
        int_1 = -2496
        int_2 = 1472
        dict_0 = {int_0: int_1, int_0: int_1, int_2: int_0}
        log_formatter_0 = module_0.LogFormatter(str_0, dict_0)
        str_1 = log_formatter_0.format(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1020
        set_0 = None
        dict_0 = {int_0: set_0, set_0: int_0}
        tuple_0 = (int_0, dict_0)
        str_0 = '-0C'
        logger_0 = module_1.Logger(str_0)
        module_0.enable_pretty_logging(tuple_0, logger_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xd93\x11\xf9n\x1cQ\x8eq\xc3v^JL'
        module_0.define_logging_options(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'D|WPQ'
        str_1 = 'Returns the closest match for the given locale codes.\n\n    We iterate over all given locale codes in order. If we have a tight\n    or a loose match for the code (e.g., "en" for "en_US"), we return\n    the locale. Otherwise we move to the next code in the list.\n\n    By default we return ``en_US`` if no translations are found for any of\n    the specified locales. You can change the default locale with\n    `set_default_locale()`.\n    '
        bool_0 = False
        log_formatter_0 = module_0.LogFormatter(str_0, str_1, str_1, bool_0)
        module_0.enable_pretty_logging()
        str_2 = 's-0gd6<Z^4yp}-Fv>j!'
        log_formatter_1 = module_0.LogFormatter(str_2)
        str_3 = log_formatter_0.format(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = 'msg'
        str_1 = 'INF*'
        str_2 = {str_0: str_0, str_1: str_1}
        var_0 = module_1.makeLogRecord(str_2)
        str_3 = log_formatter_0.format(var_0)
        str_4 = log_formatter_0.format(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = 'asdsd'
        int_0 = 1
        var_0 = {}
        log_record_0 = module_1.LogRecord(str_0, str_0, str_0, int_0, int_0, var_0, int_0, int_0)
        str_1 = log_formatter_0.format(log_record_0)
    except BaseException:
        pass