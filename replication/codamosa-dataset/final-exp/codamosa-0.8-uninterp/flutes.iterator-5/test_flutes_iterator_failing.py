# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        bytes_0 = b'"\x15\x13lx\xeb|P\x9b\xbc\xae\xbb{\xaf\xa2M'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_1():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 2645
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__next__()
        iterator_0 = module_0.take(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        str_0 = 'c'
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        tuple_0 = ()
        str_1 = '.|'
        map_list_0 = module_0.MapList(tuple_0, str_1)
        lazy_list_0 = module_0.LazyList(map_list_0)
        var_1 = map_list_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -3078
        dict_0 = {}
        iterator_0 = module_0.take(int_0, dict_0)
        int_1 = None
        str_0 = 'O'
        str_1 = 'v(t<f{Yw/s;i\n'
        dict_1 = {str_0: str_1, str_1: iterator_0}
        list_0 = None
        tuple_0 = (dict_1, list_0)
        iterator_1 = module_0.chunk(int_1, tuple_0)
        iterator_2 = module_0.split_by(iterator_1, separator=iterator_1)
        bytes_0 = b'D\xea\n\x96'
        map_list_0 = module_0.MapList(iterator_0, bytes_0)
        iterator_3 = map_list_0.__iter__()
        str_2 = ';h]hW8\x0bBC3^VX'
        list_1 = [str_2, dict_0]
        iterator_4 = module_0.split_by(list_1, criterion=bytes_0)
        iterator_5 = module_0.chunk(int_0, iterator_4)
        iterator_6 = module_0.split_by(iterator_3, criterion=str_2, separator=iterator_5)
        list_2 = [iterator_6, map_list_0, iterator_0, int_0]
        range_0 = module_0.Range(*list_2)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        dict_1 = {}
        lazy_list_0 = module_0.LazyList(dict_1)
        var_0 = lazy_list_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        iterator_0 = module_0.split_by(bool_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '{v6xTw'
        str_1 = '<c|*FwXy+l6|.r'
        var_0 = module_0.scanr(str_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = None
        float_0 = -1989.8933
        str_0 = '>t;)Pu3^='
        map_list_0 = module_0.MapList(float_0, str_0)
        int_0 = map_list_0.__len__()
        dict_0 = None
        var_0 = module_0.scanr(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 193
        iterable_0 = None
        iterator_0 = module_0.chunk(int_0, iterable_0)
        int_1 = 303
        bytes_0 = b'\x9a\xcd\x06\xaa\x035\x01\x93J\x8ef\x00J'
        iterator_1 = module_0.chunk(int_1, bytes_0)
        list_0 = [bytes_0]
        var_0 = module_0.scanr(list_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2
        iterable_0 = None
        iterator_0 = module_0.drop(int_0, iterable_0)
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        set_0 = {int_0, iterable_0, lazy_list_0}
        map_list_0 = module_0.MapList(set_0, lazy_list_0)
        iterator_1 = map_list_0.__iter__()
        map_list_1 = module_0.MapList(iterator_1, set_0)
        var_0 = lazy_list_0.__iter__()
        bool_0 = False
        var_1 = map_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 183
        list_0 = None
        str_0 = 'N'
        dict_0 = {str_0: int_0, str_0: int_0}
        iterator_0 = module_0.chunk(int_0, dict_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        str_0 = ''
        iterator_0 = module_0.split_by(str_0, bool_0, criterion=str_0, separator=str_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 193
        float_0 = -1547.255
        int_1 = 4
        dict_0 = {int_0: int_1}
        list_0 = [int_1]
        list_1 = [float_0, float_0]
        var_0 = module_0.scanr(dict_0, list_0, *list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 183
        int_1 = 567
        set_0 = {int_1, int_0, int_0}
        iterator_0 = module_0.chunk(int_1, set_0)
        bool_0 = True
        str_0 = '(1h.=zJ0f[z^!]_-x'
        tuple_0 = (str_0, iterator_0)
        lazy_list_0 = module_0.LazyList(tuple_0)
        var_0 = lazy_list_0.__getitem__(bool_0)
        var_1 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 290
        bytes_0 = b'\x9a\xcd\xe0<\x035\x01\xca\xb4\x00J'
        iterator_0 = module_0.chunk(int_0, bytes_0)
        bool_0 = True
        iterator_1 = module_0.split_by(bool_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        float_0 = -2639.0
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 1000000
        iterator_0 = module_0.take(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 0
        iterator_0 = module_0.drop(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -706
        iterator_0 = module_0.take(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -29
        int_1 = 30
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 10
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 10
        var_0 = range(int_0)
        lazy_list_0 = module_0.LazyList(var_0)
        var_1 = lazy_list_0.list
        var_2 = len(var_1)
        int_1 = 1
        var_3 = var_2 == int_1
        int_2 = 5
        var_4 = lazy_list_0[:int_2]
        var_5 = list(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 1
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.chunk(int_0, var_0)
        var_1 = list(iterator_0)
        int_2 = -31
        var_2 = range(int_1)
        iterator_1 = module_0.chunk(int_2, var_2)
        var_3 = list(iterator_1)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 0
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        var_2 = range(int_1)
        iterator_1 = module_0.take(int_1, var_2)
        var_3 = list(iterator_1)
        var_4 = range(int_1)
        var_5 = list(var_4)
        int_2 = 5
        var_6 = range(int_2)
        iterator_2 = module_0.take(int_1, var_6)
        var_7 = list(iterator_2)
        var_8 = range(int_2)
        var_9 = list(var_8)
        int_3 = -1
        var_10 = range(int_1)
        iterator_3 = module_0.take(int_3, var_10)
        var_11 = list(iterator_3)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 290
        bytes_0 = b'\x9a\xcd\xe0<\x035\x01\xca\xb4\x00J'
        iterator_0 = module_0.chunk(int_0, bytes_0)
        bool_0 = None
        iterator_1 = module_0.split_by(bool_0, criterion=int_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        float_0 = 1296.688132
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = -20
        int_1 = 2
        int_2 = 3
        int_3 = 4
        int_4 = 5
        int_5 = [int_0, int_1, int_2, int_3, int_4]
        map_list_0 = module_0.MapList(int_3, int_5)
        var_0 = map_list_0[int_0:int_2]
    except BaseException:
        pass