# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        pgen_grammar_0 = module_0.PgenGrammar()
        n_f_a_state_0 = module_0.NFAState()
        str_0 = '<<=?'
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: pgen_grammar_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: pgen_grammar_0, n_f_a_state_1: pgen_grammar_0}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
        parser_generator_0 = module_0.ParserGenerator(str_0, pgen_grammar_0)
    except BaseException:
        pass

def test_case_1():
    try:
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 3680
        dict_0 = {int_0: int_0}
        n_f_a_state_0 = module_0.NFAState()
        dict_1 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_1, n_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        n_f_a_state_0 = None
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_1: n_f_a_state_1, n_f_a_state_0: n_f_a_state_1, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '%+)dhcR.y\n6\x0b:&+~2ByJ'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: str_0}
        n_f_a_state_2 = module_0.NFAState()
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_2)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_3 = None
        n_f_a_state_4 = module_0.NFAState()
        n_f_a_state_4.addarc(n_f_a_state_3, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '%+)dhcR.y\n6\x0b:&+~2ByJ'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        str_1 = '\\" '
        d_f_a_state_1 = None
        d_f_a_state_0.addarc(d_f_a_state_1, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_7():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_0.addarc(n_f_a_state_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        str_0 = "w7ac]|}'q}X=A$S2SJ"
        int_0 = 1076
        n_f_a_state_2.addarc(n_f_a_state_1, str_0)
        dict_0 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_0: n_f_a_state_2, n_f_a_state_2: int_0, n_f_a_state_2: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        n_f_a_state_1.addarc(n_f_a_state_2)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        dict_1 = {n_f_a_state_1: n_f_a_state_2}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_2)
        str_1 = '3Mo*'
        n_f_a_state_1.addarc(n_f_a_state_0, str_1)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        str_0 = "w7ac]|}'q}X=A$S2SJ"
        int_0 = 1076
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: int_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        dict_1 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_0)
        str_1 = '!x#m)>}uZY:!S'
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_2 = None
        d_f_a_state_0.unifystate(d_f_a_state_1, d_f_a_state_2)
        tuple_0 = (n_f_a_state_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
        bool_0 = d_f_a_state_0.__eq__(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        str_0 = "\n        Initializer.  Takes optional type, content, and name.\n\n        The type, if given, must be a symbol type (>= 256).  If the\n        type is None this matches *any* single node (leaf or not),\n        except if content is not None, in which it only matches\n        non-leaf nodes that also match the content pattern.\n\n        The content, if not None, must be a sequence of Patterns that\n        must match the node's children exactly.  If the content is\n        given, the type must not be None.\n\n        If a name is given, the matching node is stored in the results\n        dict under that key.\n        "
        int_0 = 1076
        n_f_a_state_2.addarc(n_f_a_state_1, str_0)
        dict_0 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_0: n_f_a_state_2, n_f_a_state_2: int_0, n_f_a_state_2: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        str_1 = None
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        str_0 = "w7ac]|}'q}X=A$S2SJ"
        int_0 = 1076
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: int_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_1 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass