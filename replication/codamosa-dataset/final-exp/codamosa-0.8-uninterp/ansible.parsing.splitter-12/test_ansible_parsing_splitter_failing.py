# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    try:
        tuple_0 = ()
        var_0 = module_0.parse_kv(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "?]&[J\r*D'/|X["
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ' \n\\}k'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0cC"/u"`0V8k>l'
        var_0 = module_0.parse_kv(str_0)
        str_1 = '):(m$\']Xe`3,"tnHK`'
        var_1 = module_0.parse_kv(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'b '
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'a=b c=d'
        str_2 = "a='b c'"
        var_1 = module_0.parse_kv(str_2)
        bool_0 = None
        str_3 = 'NNFO:nL'
        str_4 = '?Z\n:Wap#\\BHqs#Ga'
        var_2 = module_0.parse_kv(str_4)
        var_3 = module_0.parse_kv(bool_0, str_3)
        str_5 = "a='b c' d="
        complex_0 = None
        var_4 = module_0.parse_kv(complex_0)
        set_0 = {str_3, str_1, str_5, complex_0}
        var_5 = module_0.parse_kv(set_0, complex_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Pcho {{ foo }} ^{{6bar }}"'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'echo "{5f{ foo }}"'
        var_0 = module_0.split_args(str_0)
        bytes_0 = b"\xc7\xfb\xc2+\x911S\x82\x01'\x14\x0f\xcf\x04\xf1"
        var_1 = module_0.parse_kv(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'echo "hello world" {# comment #} {% macro test(name="val") %}{% endmacro %} {{ variable }}'
        var_0 = module_0.split_args(str_0)
        bool_0 = True
        var_1 = module_0.parse_kv(bool_0)
    except BaseException:
        pass