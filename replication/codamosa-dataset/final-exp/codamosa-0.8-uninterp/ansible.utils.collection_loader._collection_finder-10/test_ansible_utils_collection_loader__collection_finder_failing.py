# Automatically generated by Pynguin.
import ansible.utils.collection_loader._collection_finder as module_0

def test_case_0():
    try:
        ansible_collection_ref_0 = None
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(ansible_collection_ref_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ansible_collections'
        ansible_collection_root_pkg_loader_0 = module_0._AnsibleCollectionRootPkgLoader(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '9!3-?,rOe_FBL1'
        ansible_collection_root_pkg_loader_0 = module_0._AnsibleCollectionRootPkgLoader(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 4078
        str_0 = 'Z.\t@bD0pR)Gwu'
        dict_0 = {int_0: str_0}
        ansible_collection_n_s_pkg_loader_0 = module_0._AnsibleCollectionNSPkgLoader(str_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        tuple_0 = (bool_0,)
        list_0 = [tuple_0, tuple_0, tuple_0]
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        var_0 = ansible_collection_finder_0.set_playbook_paths(list_0)
        str_0 = 'BZMO'
        ansible_collection_pkg_loader_0 = module_0._AnsibleCollectionPkgLoader(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        tuple_0 = (bool_0,)
        list_0 = [tuple_0, tuple_0, tuple_0]
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        var_0 = ansible_collection_finder_0.set_playbook_paths(list_0)
        tuple_1 = ()
        str_0 = '\n- name: Install bottle python package\n  pip:\n    name: bottle\n\n- name: Install bottle python package on version 0.11\n  pip:\n    name: bottle==0.11\n\n- name: Install bottle python package with version specifiers\n  pip:\n    name: bottle>0.10,<0.20,!=0.11\n\n- name: Install multi python packages with version specifiers\n  pip:\n    name:\n      - django>1.11.0,<1.12.0\n      - bottle>0.10,<0.20,!=0.11\n\n- name: Install python package using a proxy\n  # Pip doesn\'t use the standard environment variables, please use the CAPITALIZED ones below\n  pip:\n    name: six\n  environment:\n    HTTP_PROXY: \'127.0.0.1:8080\'\n    HTTPS_PROXY: \'127.0.0.1:8080\'\n\n# You do not have to supply \'-e\' option in extra_args\n- name: Install MyApp using one of the remote protocols (bzr+,hg+,git+,svn+)\n  pip:\n    name: svn+http://myrepo/svn/MyApp#egg=MyApp\n\n- name: Install MyApp using one of the remote protocols (bzr+,hg+,git+)\n  pip:\n    name: git+http://myrepo/app/MyApp\n\n- name: Install MyApp from local tarball\n  pip:\n    name: file:///path/to/MyApp.tar.gz\n\n- name: Install bottle into the specified (virtualenv), inheriting none of the globally installed modules\n  pip:\n    name: bottle\n    virtualenv: /my_app/venv\n\n- name: Install bottle into the specified (virtualenv), inheriting globally installed modules\n  pip:\n    name: bottle\n    virtualenv: /my_app/venv\n    virtualenv_site_packages: yes\n\n- name: Install bottle into the specified (virtualenv), using Python 2.7\n  pip:\n    name: bottle\n    virtualenv: /my_app/venv\n    virtualenv_command: virtualenv-2.7\n\n- name: Install bottle within a user home directory\n  pip:\n    name: bottle\n    extra_args: --user\n\n- name: Install specified python requirements\n  pip:\n    requirements: /my_app/requirements.txt\n\n- name: Install specified python requirements in indicated (virtualenv)\n  pip:\n    requirements: /my_app/requirements.txt\n    virtualenv: /my_app/venv\n\n- name: Install specified python requirements and custom Index URL\n  pip:\n    requirements: /my_app/requirements.txt\n    extra_args: -i https://example.com/pypi/simple\n\n- name: Install specified python requirements offline from a local directory with downloaded packages\n  pip:\n    requirements: /my_app/requirements.txt\n    extra_args: "--no-index --find-links=file:///my_downloaded_packages_dir"\n\n- name: Install bottle for Python 3.3 specifically, using the \'pip3.3\' executable\n  pip:\n    name: bottle\n    executable: pip3.3\n\n- name: Install bottle, forcing reinstallation if it\'s already installed\n  pip:\n    name: bottle\n    state: forcereinstall\n\n- name: Install bottle while ensuring the umask is 0022 (to ensure other users can use it)\n  pip:\n    name: bottle\n    umask: "0022"\n  become: True\n'
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(tuple_1, str_0)
        str_1 = '$\tBcIW56'
        ansible_collection_loader_0 = module_0._AnsibleCollectionLoader(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'ansible.builtin.something.else'
        str_1 = 'ansible.builtin.something_else'
        str_2 = [str_1, str_0]
        ansible_internal_redirect_loader_0 = module_0._AnsibleInternalRedirectLoader(str_1, str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'namespace.collection_name'
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'dYqxYlF2C\\*w`h|K'
        ansible_collection_n_s_pkg_loader_0 = None
        int_0 = 3318
        list_0 = [int_0, ansible_collection_n_s_pkg_loader_0]
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, ansible_collection_n_s_pkg_loader_0, int_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'ansible.builtin.something'
        str_1 = 'P\x0c#6<A%unX@6-j'
        str_2 = [str_0, str_0]
        ansible_internal_redirect_loader_0 = module_0._AnsibleInternalRedirectLoader(str_1, str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '@}%lBTY[('
        set_0 = {str_0, str_0, str_0, str_0}
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        tuple_0 = (ansible_collection_finder_0,)
        ansible_collection_root_pkg_loader_0 = None
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(tuple_0, ansible_collection_root_pkg_loader_0)
        list_0 = None
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(ansible_collection_finder_0, list_0, ansible_path_hook_finder_0, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '&lqMe\x0b0Ngy.JXF6gU0]'
        float_0 = 585.0
        list_0 = []
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(float_0, list_0)
        var_0 = ansible_path_hook_finder_0.find_module(str_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(ansible_path_hook_finder_0)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        tuple_0 = (ansible_collection_finder_0,)
        ansible_collection_root_pkg_loader_0 = None
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(tuple_0, ansible_collection_root_pkg_loader_0)
        str_0 = "6\x0c'UF"
        str_1 = 'S3@-p(#=ehTP~'
        int_0 = 2548
        float_0 = 860.807309
        str_2 = '/X|]\x0b7#(p'
        var_0 = ansible_path_hook_finder_0.iter_modules(str_2)
        dict_0 = {ansible_collection_finder_0: int_0, ansible_collection_finder_0: str_0, str_1: int_0}
        float_1 = 303.6301
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(float_0, tuple_0, dict_0, float_1)
    except BaseException:
        pass

def test_case_13():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        list_0 = []
        ansible_collection_pkg_loader_0 = None
        ansible_collection_finder_1 = module_0._AnsibleCollectionFinder(ansible_collection_pkg_loader_0, list_0)
        bytes_0 = b'q\x92\xabD>'
        ansible_internal_redirect_loader_0 = module_0._AnsibleInternalRedirectLoader(bytes_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'namepfce_collection_name'
        dict_0 = {str_0: str_0, str_0: str_0}
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder(dict_0)
        str_1 = '^)64Qzn3.{%\r^Sgr|'
        var_0 = ansible_collection_finder_0.set_playbook_paths(str_1)
        set_0 = {str_0, str_0, str_0}
        var_1 = ansible_collection_finder_0.set_playbook_paths(set_0)
        var_2 = ansible_collection_finder_0.find_module(str_0)
        str_2 = 'QJ"Y#~'
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, str_0, str_2, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'ansible_collections.jdauphant.nginx'
        ansible_collection_n_s_pkg_loader_0 = module_0._AnsibleCollectionNSPkgLoader(str_0)
    except BaseException:
        pass