# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        bool_0 = False
        str_0 = "H)'.I&I\t;j,^wjdF"
        int_0 = True
        bool_1 = False
        int_1 = False
        bool_2 = True
        try_0 = module_0.Try(int_1, bool_2)
        str_1 = '\x0b?*vli:'
        try_1 = module_0.Try(str_1, bool_0)
        bool_3 = try_1.__eq__(try_0)
        try_2 = module_0.Try(int_0, bool_1)
        var_0 = try_2.on_fail(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        int_1 = 826
        str_0 = 'All'
        dict_0 = None
        tuple_0 = (int_1, str_0, dict_0, int_1)
        bool_0 = True
        try_0 = module_0.Try(tuple_0, bool_0)
        var_0 = try_0.map(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = False
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        bytes_0 = b'\x84{\x8c\xe9\x1c&4\xbb\xa8\xf4\x05\xa6'
        var_0 = try_0.bind(bytes_0)
        var_1 = try_0.filter(try_0)
        bool_1 = True
        try_1 = module_0.Try(int_0, bool_1)
        try_2 = module_0.Try(int_0, bool_1)
        try_3 = module_0.Try(try_0, bool_1)
        var_2 = try_3.filter(bool_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        bool_1 = False
        bool_2 = True
        try_0 = module_0.Try(bool_1, bool_2)
        bool_3 = True
        try_1 = module_0.Try(try_0, bool_3)
        var_0 = try_1.get_or_else(bool_0)
        complex_0 = None
        var_1 = try_1.bind(complex_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        dict_0 = None
        str_0 = ',"3]?8nb'
        tuple_0 = (dict_0, dict_0, list_0)
        bool_0 = False
        try_0 = module_0.Try(list_0, bool_0)
        var_0 = try_0.on_success(tuple_0)
        try_1 = module_0.Try(str_0, bool_0)
        bool_1 = try_1.__eq__(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        try_0 = None
        bytes_0 = b'\xf9\xadf\xd9H\xe8\xd7G@'
        bool_0 = True
        try_1 = module_0.Try(bytes_0, bool_0)
        var_0 = try_1.on_success(try_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x8d,/\xc4 WL\xecU\xf4'
        set_0 = {bytes_0, bytes_0, bytes_0}
        bool_0 = True
        try_0 = module_0.Try(bool_0, bool_0)
        var_0 = try_0.on_fail(set_0)
        tuple_0 = None
        int_0 = -916
        try_1 = module_0.Try(int_0, bool_0)
        var_1 = try_1.map(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x9f\xbbyd\xc9F\xe7\xcd:\xf6\x9a'
        str_0 = '\x0c,P0cjcX\t>{pm^h'
        bool_0 = False
        try_0 = module_0.Try(str_0, bool_0)
        var_0 = try_0.on_fail(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -2612
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        var_0 = try_0.get()
        str_0 = 'v'
        bool_1 = True
        try_1 = module_0.Try(str_0, bool_1)
        var_1 = try_1.filter(try_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "/'v|g&O!cFP5yJ"
        bool_0 = False
        try_0 = module_0.Try(str_0, bool_0)
        str_1 = try_0.__str__()
        float_0 = -1438.31898
        bytes_0 = b'V\x01\x86\x98a'
        try_1 = module_0.Try(bytes_0, bool_0)
        dict_0 = None
        var_0 = try_1.bind(dict_0)
        str_2 = None
        bool_1 = True
        try_2 = module_0.Try(str_2, bool_1)
        dict_1 = {float_0: try_0, bool_0: try_0, float_0: try_1}
        var_1 = try_0.get_or_else(dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        int_0 = 116
        bool_1 = True
        try_0 = module_0.Try(int_0, bool_1)
        var_0 = try_0.filter(bool_0)
    except BaseException:
        pass