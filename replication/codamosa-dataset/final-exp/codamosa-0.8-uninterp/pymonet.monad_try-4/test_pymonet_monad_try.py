# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_2():
    float_0 = 1920.77
    str_0 = 'Jx\x0bjY1B x/'
    bytes_0 = b'\x0c1\x16\x1b\xfb'
    bool_0 = True
    try_0 = module_0.Try(bytes_0, bool_0)
    bool_1 = try_0.__eq__(str_0)
    dict_0 = {float_0: float_0}
    bool_2 = False
    try_1 = module_0.Try(dict_0, bool_2)
    bool_3 = True
    list_0 = []
    var_0 = try_1.filter(list_0)
    try_2 = module_0.Try(float_0, bool_3)

def test_case_3():
    int_0 = 268
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    str_0 = try_0.__str__()

def test_case_4():
    float_0 = 813.931
    set_0 = {float_0}
    str_0 = 'XqQVa!$\nmFKW/VMw'
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.map(set_0)
    bool_1 = True
    list_0 = [float_0, float_0, bool_1]
    bool_2 = True
    tuple_0 = (bool_2,)
    bool_3 = True
    try_1 = module_0.Try(tuple_0, bool_3)
    var_1 = try_1.get()
    bytes_0 = b'\xdaa\x9b/\x03\xdb\xf1<\xf9$\xd2$\xeb\x8d\xce\xe0'
    try_2 = module_0.Try(list_0, bool_1)
    var_2 = try_2.get()
    try_3 = module_0.Try(float_0, bool_1)
    bool_4 = False
    try_4 = module_0.Try(try_3, bool_4)
    var_3 = try_4.filter(bytes_0)
    try_5 = module_0.Try(list_0, bool_1)
    set_1 = set()
    var_4 = try_4.map(set_1)
    var_5 = try_5.get()

def test_case_5():
    bytes_0 = b'\x9b\x84'
    bool_0 = True
    bool_1 = False
    try_0 = module_0.Try(bool_0, bool_1)
    var_0 = try_0.filter(bytes_0)

def test_case_6():
    bool_0 = True
    str_0 = "H)'.I&I\t;j,^wjdF"
    int_0 = True
    set_0 = {str_0}
    float_0 = 2913.4
    bool_1 = None
    try_0 = module_0.Try(float_0, bool_1)
    bool_2 = False
    try_1 = module_0.Try(set_0, bool_2)
    bool_3 = False
    int_1 = False
    list_0 = [int_1, int_0, set_0]
    var_0 = try_1.bind(list_0)
    str_1 = '\x0b?*vli:'
    try_2 = module_0.Try(str_1, bool_0)
    bool_4 = try_2.__eq__(try_2)
    float_1 = 1507.7673
    list_1 = [try_2, float_1]
    var_1 = try_2.on_fail(list_1)
    str_2 = try_0.__str__()
    set_1 = None
    var_2 = try_1.get()
    bytes_0 = b'\xdf\xefA\xab\x91\x87\xfct)"r\x9a\x06P\x8c\xf4'
    bool_5 = True
    var_3 = try_1.get_or_else(bool_5)
    try_3 = module_0.Try(set_0, bool_3)
    bool_6 = False
    try_4 = module_0.Try(set_1, bool_6)
    bool_7 = try_4.__eq__(bytes_0)
    try_5 = module_0.Try(list_0, bool_3)
    str_3 = ''
    var_4 = try_1.map(str_3)
    tuple_0 = None
    var_5 = try_5.filter(tuple_0)

def test_case_7():
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)
    var_0 = lambda x: x
    var_1 = try_0.filter(var_0)
    try_1 = module_0.Try(bool_0, bool_0)
    try_2 = module_0.Try(bool_0, bool_0)
    var_2 = lambda x: not x
    bool_1 = False
    try_3 = module_0.Try(bool_0, bool_1)
    try_4 = module_0.Try(bool_1, bool_0)
    var_3 = lambda x: x
    var_4 = try_4.filter(var_3)
    try_5 = module_0.Try(bool_1, bool_1)
    try_6 = module_0.Try(bool_1, bool_0)
    var_5 = lambda x: not x
    var_6 = try_6.filter(var_5)
    try_7 = module_0.Try(bool_1, bool_1)
    str_0 = 'exception'
    var_7 = Exception(str_0)
    try_8 = module_0.Try(var_7, bool_1)
    var_8 = lambda x: not x
    var_9 = try_8.filter(var_8)
    var_10 = Exception(str_0)
    try_9 = module_0.Try(var_10, bool_1)