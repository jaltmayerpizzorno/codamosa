# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.tokenize as module_1

def test_case_0():
    try:
        float_0 = 1770.9784
        bool_0 = False
        grammar_0 = module_0.Grammar()
        str_0 = ']mrh'
        list_0 = [grammar_0]
        stop_tokenizing_0 = module_1.StopTokenizing(*list_0)
        list_1 = [float_0, float_0, stop_tokenizing_0, str_0]
        var_0 = module_1.printtoken(float_0, bool_0, grammar_0, str_0, list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'xFX!'
        module_1.tokenize(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        iterable_0 = None
        untokenizer_0 = module_1.Untokenizer()
        str_0 = untokenizer_0.untokenize(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "\\5.'Z/"
        untokenizer_0 = module_1.Untokenizer()
        str_1 = untokenizer_0.untokenize(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\ne'
        list_0 = []
        tuple_0 = (str_0, list_0)
        str_1 = module_1.untokenize(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        tuple_0 = module_1.detect_encoding(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_1.group()
        int_0 = 867
        tuple_0 = (int_0, int_0)
        untokenizer_0 = module_1.Untokenizer()
        untokenizer_0.add_whitespace(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = True
        str_0 = ']V[D+fA?>O)hxz'
        tuple_0 = (int_0, str_0)
        callable_0 = None
        untokenizer_0 = module_1.Untokenizer()
        iterator_0 = module_1.generate_tokens(callable_0)
        untokenizer_0.compat(tuple_0, iterator_0)
    except BaseException:
        pass

def test_case_8():
    try:
        token_error_0 = module_1.TokenError()
        iterable_0 = None
        untokenizer_0 = module_1.Untokenizer()
        list_0 = [iterable_0, untokenizer_0]
        str_0 = '!bqoZ;9%8_p&m\n<\r'
        bool_0 = True
        str_1 = 'Z{svy\ruu-c\nq.w\rg'
        list_1 = []
        tuple_0 = (str_1, list_1)
        var_0 = module_1.printtoken(list_0, str_0, list_0, bool_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        str_0 = 'o$E_K'
        iterator_0 = module_1.generate_tokens(dict_0, str_0)
        untokenizer_0 = module_1.Untokenizer()
        str_1 = untokenizer_0.untokenize(iterator_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        str_0 = '_P'
        bytes_0 = b'\x1ak\xc5'
        bytes_1 = b'\xc1x\xa5\x17\xe6\x17]\x1d\xfe\x0e'
        list_1 = [bytes_0, bytes_0, bytes_1]
        tuple_0 = (str_0, list_1)
        int_0 = 363
        dict_0 = {}
        tuple_1 = (int_0, dict_0)
        complex_0 = None
        var_0 = module_1.printtoken(list_0, tuple_0, tuple_1, tuple_1, complex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ']'
        var_0 = iter(str_0)
        var_1 = module_1.maybe()
        var_2 = var_0.__next__
        iterator_0 = module_1.generate_tokens(var_2)
        var_3 = list(iterator_0)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = module_1.maybe()
        str_0 = '#'
        var_1 = module_1.maybe()
        var_2 = iter(str_0)
        var_3 = var_2.__next__
        iterator_0 = module_1.generate_tokens(var_3)
        untokenizer_0 = module_1.Untokenizer()
        str_1 = untokenizer_0.untokenize(iterator_0)
        int_0 = None
        int_1 = -421
        tuple_0 = (int_0, int_1)
        untokenizer_0.add_whitespace(tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ']0'
        var_0 = iter(str_0)
        var_1 = var_0.__next__
        iterator_0 = module_1.generate_tokens(var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '-Oc>4R_y;[\nq14#'
        var_0 = iter(str_0)
        var_1 = var_0.__next__
        untokenizer_0 = module_1.Untokenizer()
        iterator_0 = module_1.generate_tokens(var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass