# Automatically generated by Pynguin.
import ansible.vars.hostvars as module_0

def test_case_0():
    try:
        bool_0 = False
        set_0 = set()
        host_vars_0 = module_0.HostVars(bool_0, set_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 3648
        host_vars_vars_0 = module_0.HostVarsVars(int_0, int_0)
        float_0 = -951.9
        var_0 = host_vars_vars_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xc2'
        list_0 = [bytes_0, bytes_0, bytes_0]
        int_0 = 234
        tuple_0 = (list_0, int_0)
        set_0 = set()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, set_0)
        var_0 = host_vars_vars_0.__repr__()
        int_1 = 1578
        dict_0 = {int_1: int_0}
        bool_0 = False
        host_vars_0 = module_0.HostVars(int_1, dict_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        bytes_0 = b'\xe9\x99@E\x7f^\xb1\xd7F\xda\x8e\x8b\xa4B\x87'
        float_0 = 1226.0668690025593
        tuple_0 = ()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, float_0)
        list_0 = []
        int_0 = -572
        host_vars_vars_1 = module_0.HostVarsVars(list_0, int_0)
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_1, bytes_0)
        var_0 = host_vars_0.__deepcopy__(host_vars_vars_0)
        set_0 = set()
        host_vars_vars_2 = module_0.HostVarsVars(set_0, bool_0)
        var_1 = host_vars_vars_0.__contains__(host_vars_0)
        tuple_1 = ()
        var_2 = host_vars_0.__setstate__(set_0)
        host_vars_vars_3 = module_0.HostVarsVars(tuple_1, set_0)
        host_vars_vars_4 = module_0.HostVarsVars(float_0, host_vars_0)
        var_3 = host_vars_vars_4.__getitem__(host_vars_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2002
        host_vars_vars_0 = None
        tuple_0 = (host_vars_vars_0,)
        float_0 = 2126.0
        set_0 = {int_0, int_0}
        host_vars_vars_1 = module_0.HostVarsVars(float_0, set_0)
        str_0 = 'IBM,'
        float_1 = -2616.7849
        host_vars_vars_2 = module_0.HostVarsVars(str_0, float_1)
        int_1 = -575
        host_vars_0 = module_0.HostVars(host_vars_vars_1, host_vars_vars_2, int_1)
        var_0 = host_vars_0.set_host_facts(tuple_0, host_vars_vars_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'iF\'Uc"yG%9-hx6DY3\tf'
        set_0 = {str_0}
        set_1 = set()
        list_0 = [set_0, set_1]
        float_0 = -304.85
        host_vars_vars_0 = module_0.HostVarsVars(float_0, list_0)
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_0, list_0)
        var_0 = host_vars_0.raw_get(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        dict_0 = None
        set_0 = set()
        str_0 = 'v+f@q~rH+QLp-hE'
        host_vars_vars_0 = module_0.HostVarsVars(set_0, bool_0)
        str_1 = '\n    sequence lookup module\n\n    Used to generate some sequence of items. Takes arguments in two forms.\n\n    The simple / shortcut form is:\n\n      [start-]end[/stride][:format]\n\n    As indicated by the brackets: start, stride, and format string are all\n    optional.  The format string is in the style of printf.  This can be used\n    to pad with zeros, format in hexadecimal, etc.  All of the numerical values\n    can be specified in octal (i.e. 0664) or hexadecimal (i.e. 0x3f8).\n    Negative numbers are not supported.\n\n    Some examples:\n\n      5 -> ["1","2","3","4","5"]\n      5-8 -> ["5", "6", "7", "8"]\n      2-10/2 -> ["2", "4", "6", "8", "10"]\n      4:host%02d -> ["host01","host02","host03","host04"]\n\n    The standard Ansible key-value form is accepted as well.  For example:\n\n      start=5 end=11 stride=2 format=0x%02x -> ["0x05","0x07","0x09","0x0a"]\n\n    This format takes an alternate form of "end" called "count", which counts\n    some number from the starting value.  For example:\n\n      count=5 -> ["1", "2", "3", "4", "5"]\n      start=0x0f00 count=4 format=%04x -> ["0f00", "0f01", "0f02", "0f03"]\n      start=0 count=5 stride=2 -> ["0", "2", "4", "6", "8"]\n      start=1 count=5 stride=2 -> ["1", "3", "5", "7", "9"]\n\n    The count option is mostly useful for avoiding off-by-one errors and errors\n    calculating the number of entries in a sequence when a stride is specified.\n    '
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_0, str_1)
        var_0 = host_vars_0.__contains__(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xc2'
        list_0 = [bytes_0, bytes_0, bytes_0]
        int_0 = 234
        tuple_0 = (list_0, int_0)
        set_0 = set()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, set_0)
        var_0 = host_vars_vars_0.__repr__()
        int_1 = 1578
        dict_0 = {int_1: int_0}
        bool_0 = False
        var_1 = host_vars_vars_0.__getitem__(bool_0)
        host_vars_0 = module_0.HostVars(int_1, dict_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        float_0 = 1224.817
        tuple_0 = ()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, float_0)
        list_0 = []
        int_0 = -572
        host_vars_vars_1 = module_0.HostVarsVars(list_0, int_0)
        bytes_0 = b'\xb4s}\x00N\xd4\xd9C&'
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_1, bytes_0)
        var_0 = host_vars_0.__deepcopy__(host_vars_vars_0)
        set_0 = set()
        host_vars_vars_2 = module_0.HostVarsVars(set_0, bool_0)
        bytes_1 = b'd\xdf\xc4\r|\x94\t\xf2Z'
        var_1 = host_vars_0.set_variable_manager(bytes_1)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        float_0 = 1224.817
        tuple_0 = ()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, float_0)
        list_0 = []
        int_0 = -572
        host_vars_vars_1 = module_0.HostVarsVars(list_0, int_0)
        bytes_0 = b'\xb4s}\x00N\xd4\xd9C&'
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_1, bytes_0)
        var_0 = host_vars_0.__deepcopy__(host_vars_vars_0)
        set_0 = set()
        host_vars_vars_2 = module_0.HostVarsVars(set_0, bool_0)
        var_1 = host_vars_0.__getitem__(host_vars_vars_2)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        bytes_0 = b'\xe9\x99@E\x7f^\xb1\xd7F\xda\x8e\x8b\xa4B\x87'
        float_0 = 1224.817
        tuple_0 = ()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, float_0)
        list_0 = []
        int_0 = -572
        host_vars_vars_1 = module_0.HostVarsVars(list_0, int_0)
        bytes_1 = b'\xb4s}\x00N\xd4\xd9C&'
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_1, bytes_1)
        var_0 = host_vars_0.__deepcopy__(host_vars_vars_0)
        set_0 = set()
        str_0 = 'v+f@q~rH+QLp-hE'
        host_vars_vars_2 = module_0.HostVarsVars(set_0, bool_0)
        float_1 = 60.0
        dict_0 = {float_1: bytes_0}
        var_1 = host_vars_0.set_nonpersistent_facts(str_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        float_0 = 1224.817
        dict_0 = None
        tuple_0 = ()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, float_0)
        list_0 = []
        int_0 = -572
        host_vars_vars_1 = module_0.HostVarsVars(list_0, int_0)
        bytes_0 = b'\xb4s}\x00N\xd4\xd9C&'
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_1, bytes_0)
        var_0 = host_vars_0.__deepcopy__(host_vars_vars_0)
        set_0 = set()
        host_vars_vars_2 = module_0.HostVarsVars(set_0, bool_0)
        float_1 = -3602.03954
        var_1 = host_vars_0.set_host_variable(float_0, dict_0, float_1)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        bytes_0 = None
        float_0 = 1224.817
        tuple_0 = ()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, float_0)
        list_0 = []
        int_0 = -572
        host_vars_vars_1 = module_0.HostVarsVars(list_0, int_0)
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_1, bytes_0)
        var_0 = host_vars_0.__deepcopy__(host_vars_vars_0)
        set_0 = set()
        host_vars_vars_2 = module_0.HostVarsVars(set_0, bool_0)
        var_1 = host_vars_vars_2.__iter__()
        var_2 = host_vars_0.__repr__()
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        bytes_0 = b'\xe9\x99@E\x7f^\xb1\xd7F\xda\x8e\x8b\xa4B\x87'
        float_0 = 1226.0668690025593
        tuple_0 = ()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, float_0)
        list_0 = []
        int_0 = -572
        host_vars_vars_1 = module_0.HostVarsVars(list_0, int_0)
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_1, bytes_0)
        var_0 = host_vars_0.__deepcopy__(host_vars_vars_0)
        set_0 = set()
        host_vars_vars_2 = module_0.HostVarsVars(set_0, bool_0)
        var_1 = host_vars_vars_0.__contains__(host_vars_0)
        var_2 = host_vars_0.__setstate__(host_vars_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        bytes_0 = None
        bytes_1 = b'\xe9\x99@E\x7f^\xb1\xd7F\xda\x8e\x8b\xa4B\x87'
        float_0 = 1226.0668690025593
        tuple_0 = ()
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, float_0)
        host_vars_vars_1 = module_0.HostVarsVars(bytes_1, bytes_0)
        host_vars_0 = module_0.HostVars(float_0, host_vars_vars_1, bytes_1)
        var_0 = host_vars_0.__deepcopy__(host_vars_vars_0)
        set_0 = set()
        host_vars_vars_2 = module_0.HostVarsVars(set_0, bool_0)
        var_1 = host_vars_vars_0.__contains__(host_vars_0)
        tuple_1 = ()
        var_2 = host_vars_0.__setstate__(set_0)
        host_vars_vars_3 = module_0.HostVarsVars(tuple_1, set_0)
        host_vars_vars_4 = module_0.HostVarsVars(float_0, host_vars_0)
        var_3 = host_vars_vars_4.__getitem__(host_vars_0)
    except BaseException:
        pass