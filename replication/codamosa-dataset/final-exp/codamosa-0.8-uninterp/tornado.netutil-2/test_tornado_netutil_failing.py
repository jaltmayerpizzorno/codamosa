# Automatically generated by Pynguin.
import tornado.netutil as module_0
import ssl as module_1
import socket as module_2
import tornado.ioloop as module_3

def test_case_0():
    try:
        str_0 = '@;6f.N\no#4\rp8{*o-'
        socket_0 = module_0.bind_unix_socket(str_0)
        callable_0 = None
        callable_1 = module_0.add_accept_handler(socket_0, callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        executor_resolver_0 = module_0.ExecutorResolver()
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        resolver_0 = module_0.Resolver(*list_0)
        override_resolver_0 = module_0.OverrideResolver()
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        blocking_resolver_0 = module_0.BlockingResolver(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'o<Fpr'
        socket_0 = module_0.bind_unix_socket(str_0)
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_5():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\x0b4oPEnOs'
        bool_0 = module_0.is_valid_ip(str_0)
        socket_0 = None
        s_s_l_context_0 = module_1.SSLContext()
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        int_0 = 1076
        socket_0 = module_0.bind_unix_socket(str_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Implementation of the WebSocket protocol.\n\n`WebSockets <http://dev.w3.org/html5/websockets/>`_ allow for bidirectional\ncommunication between the browser and server.\n\nWebSockets are supported in the current versions of all major browsers,\nalthough older versions that do not support WebSockets are still in use\n(refer to http://caniuse.com/websockets for details).\n\nThis module implements the final version of the WebSocket protocol as\ndefined in `RFC 6455 <http://tools.ietf.org/html/rfc6455>`_.  Certain\nbrowser versions (notably Safari 5.x) implemented an earlier draft of\nthe protocol (known as "draft 76") and are not compatible with this module.\n\n.. versionchanged:: 4.0\n   Removed support for the draft 76 protocol version.\n'
        bool_0 = module_0.is_valid_ip(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'o<Fpr'
        socket_0 = module_0.bind_unix_socket(str_0)
        int_0 = 127
        socket_1 = module_0.bind_unix_socket(str_0, int_0)
        str_1 = ' 11j|j|s\rFUSsm`H'
        dict_0 = None
        str_2 = '_oauth_request_token'
        dict_1 = {str_0: socket_0, str_1: dict_0, str_2: str_1}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_1, dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'certfile'
        str_1 = '/dev/null'
        str_2 = {str_0: str_1}
        s_s_l_context_0 = module_0.ssl_options_to_context(str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        bool_0 = module_0.is_valid_ip(str_0)
        executor_resolver_0 = module_0.ExecutorResolver()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'o<Fpr'
        socket_0 = module_0.bind_unix_socket(str_0)
        dict_0 = None
        str_1 = None
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -1594
        list_0 = module_0.bind_sockets(int_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ''
        str_1 = 'Beg'
        bool_0 = module_0.is_valid_ip(str_1)
        int_0 = 377
        int_1 = 21
        list_0 = module_0.bind_sockets(int_1, str_0, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 338
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 377
        str_0 = 'h0ZP-nO%'
        address_family_0 = module_2.AddressFamily.AF_VSOCK
        resolver_0 = module_0.Resolver()
        bool_0 = True
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0, int_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 377
        str_0 = '6'
        bool_0 = module_0.is_valid_ip(str_0)
        list_0 = module_0.bind_sockets(int_0, str_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 2049
        list_0 = [int_0, int_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        str_0 = 'o\\]n{AyQ?S'
        dict_0 = {str_0: int_0}
        executor_resolver_0 = module_0.ExecutorResolver(**dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'Beg'
        str_1 = ' \x0b4oPEnOs'
        int_0 = 671
        address_family_0 = module_2.AddressFamily.AF_SNA
        list_0 = [str_0, str_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        awaitable_0 = override_resolver_0.resolve(str_1, int_0, address_family_0)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = []
        list_1 = [list_0, list_0]
        dict_0 = {}
        override_resolver_0 = module_0.OverrideResolver(*list_1, **dict_0)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'b\x0bEGa!:\nN9'
        socket_0 = module_0.bind_unix_socket(str_0)
        bool_0 = module_0.is_valid_ip(str_0)
        resolver_0 = module_0.Resolver()
        int_0 = 0
        int_1 = 0
        address_family_0 = None
        bool_1 = False
        list_0 = module_0.bind_sockets(int_0, address_family_0, int_1, int_0, bool_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'Veg?'
        socket_0 = module_0.bind_unix_socket(str_0)
        dict_0 = {}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
        bool_0 = module_0.is_valid_ip(str_0)
        resolver_0 = module_0.Resolver()
        int_0 = -778
        list_0 = [socket_0, dict_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        awaitable_0 = override_resolver_0.resolve(str_0, int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        i_o_loop_0 = module_3.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        threaded_resolver_0 = module_0.ThreadedResolver()
        socket_0 = module_2.socket(i_o_loop_2, threaded_resolver_0)
    except BaseException:
        pass

def test_case_24():
    try:
        i_o_loop_0 = module_3.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        i_o_loop_3 = i_o_loop_2.instance()
        optional_0 = i_o_loop_3.current()
        dict_0 = {optional_0: i_o_loop_3}
        list_0 = [dict_0]
        threaded_resolver_0 = module_0.ThreadedResolver(*list_0)
        threaded_resolver_0.initialize()
        dict_1 = {}
        bool_0 = True
        executor_resolver_0 = module_0.ExecutorResolver(**dict_1)
        executor_resolver_0.initialize(bool_0)
        override_resolver_0 = module_0.OverrideResolver(**dict_1)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'Veg?'
        socket_0 = module_0.bind_unix_socket(str_0)
        bool_0 = module_0.is_valid_ip(str_0)
        bool_1 = module_0.is_valid_ip(str_0)
        resolver_0 = module_0.Resolver()
        i_o_loop_0 = module_3.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        callable_0 = module_0.add_accept_handler(socket_0, i_o_loop_2)
        int_0 = 188
        int_1 = 0
        address_family_0 = None
        list_0 = module_0.bind_sockets(int_1, address_family_0, int_1)
        str_1 = 'yvR)'
        socket_1 = module_0.bind_unix_socket(str_1, int_1)
        list_1 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'Veg?'
        str_1 = 'b\x0bEGa!:\nN9'
        socket_0 = module_0.bind_unix_socket(str_1)
        dict_0 = {}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
        bool_0 = module_0.is_valid_ip(str_0)
        str_2 = '.'
        socket_1 = module_0.bind_unix_socket(str_2)
    except BaseException:
        pass