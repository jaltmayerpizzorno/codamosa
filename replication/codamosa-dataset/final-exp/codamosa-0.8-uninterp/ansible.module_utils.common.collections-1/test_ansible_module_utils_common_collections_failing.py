# Automatically generated by Pynguin.
import ansible.module_utils.common.collections as module_0

def test_case_0():
    try:
        int_0 = 16
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ' <-x)bu4V\x0b^'
        var_0 = module_0.count(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1314
        var_0 = module_0.count(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ',`lz3K#\n?2'
        float_0 = -476.997
        list_0 = []
        immutable_dict_0 = module_0.ImmutableDict(*list_0)
        var_0 = immutable_dict_0.__eq__(float_0)
        list_1 = [str_0, str_0, str_0, str_0]
        immutable_dict_1 = module_0.ImmutableDict(*list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        str_0 = '1Iw94X\x0c!Wx!ImT89ll^'
        dict_0 = {str_0: str_0}
        immutable_dict_0 = module_0.ImmutableDict(**dict_0)
        var_0 = immutable_dict_0.__repr__()
        dict_1 = {}
        var_1 = module_0.is_sequence(dict_1)
        list_0 = [tuple_0]
        immutable_dict_1 = module_0.ImmutableDict(*list_0)
        var_2 = immutable_dict_1.difference(immutable_dict_1)
        str_1 = None
        dict_2 = {str_0: dict_0, str_1: dict_0}
        str_2 = '""c!H.'
        var_3 = module_0.is_sequence(dict_2, str_2)
        var_4 = immutable_dict_1.union(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        complex_0 = None
        var_0 = immutable_dict_0.__repr__()
        var_1 = module_0.is_string(immutable_dict_0)
        immutable_dict_1 = module_0.ImmutableDict()
        dict_0 = {complex_0: immutable_dict_1}
        set_0 = {immutable_dict_0, complex_0, complex_0, immutable_dict_1}
        var_2 = module_0.is_string(set_0)
        var_3 = module_0.count(dict_0)
        var_4 = immutable_dict_0.__repr__()
        var_5 = immutable_dict_0.__hash__()
        var_6 = immutable_dict_1.__eq__(complex_0)
        int_0 = 656000
        var_7 = immutable_dict_1.__eq__(int_0)
        str_0 = 'Use YAML format instead of default JSON, ignored for --graph'
        var_8 = module_0.count(str_0)
    except BaseException:
        pass