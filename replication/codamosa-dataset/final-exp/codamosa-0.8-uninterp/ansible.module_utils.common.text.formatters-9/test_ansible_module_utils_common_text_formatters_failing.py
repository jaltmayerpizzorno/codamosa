# Automatically generated by Pynguin.
import ansible.module_utils.common.text.formatters as module_0

def test_case_0():
    try:
        tuple_0 = ()
        var_0 = module_0.human_to_bytes(tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '8\rJ0*$IS'
        var_0 = module_0.human_to_bytes(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = None
        var_0 = module_0.bytes_to_human(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '`)]Z}n;Md\r@\\mI'
        var_0 = module_0.lenient_lowercase(str_0)
        str_1 = ',k3DPHn6hFaxIOT4'
        bytes_0 = b'\x99\xb3F\xcd3\xfe\x8c\xaa\xac\xb3>{\x8f*\xac%\xc8j'
        tuple_0 = (bytes_0,)
        set_0 = {tuple_0, str_1}
        var_1 = module_0.bytes_to_human(tuple_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 2340.547
        var_0 = module_0.bytes_to_human(float_0)
        str_0 = '>a5!<7sC2ny#!pL#'
        var_1 = module_0.human_to_bytes(float_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'k-`3rP'
        bool_0 = True
        str_1 = '\n        many modules deal with files, this encapsulates common\n        options that the file module accepts such that it is directly\n        available to all modules and they can share code.\n\n        Allows to overwrite the path/dest module argument by providing path.\n        '
        tuple_0 = (bool_0, str_1)
        str_2 = '&u\r[h1.*D-jDNZas'
        var_0 = module_0.bytes_to_human(str_0, tuple_0, str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 2352.859489033608
        str_0 = 'Y,4wcs'
        var_0 = module_0.human_to_bytes(float_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        set_0 = set()
        tuple_0 = (set_0, bool_0)
        var_0 = module_0.lenient_lowercase(tuple_0)
        str_0 = 'bi+Os jkQ`qYs\n/O%'
        float_0 = 1714.5435140455986
        var_1 = module_0.human_to_bytes(float_0)
        var_2 = module_0.human_to_bytes(float_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '1Z'
        str_1 = 'B'
        var_0 = module_0.human_to_bytes(str_0, str_1)
        int_0 = 1
        var_1 = module_0.human_to_bytes(int_0, str_1)
        str_2 = '1.5 ZB'
        var_2 = module_0.human_to_bytes(str_2)
        str_3 = '.5Z'
        var_3 = module_0.human_to_bytes(str_3, str_1)
        int_1 = 2
        str_4 = 'Z'
        var_4 = module_0.human_to_bytes(int_1, str_4)
        str_5 = '200'
        var_5 = module_0.human_to_bytes(str_5, str_3)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        str_0 = 'b'
        int_0 = 10
        var_0 = module_0.bytes_to_human(int_0, bool_0)
        var_1 = module_0.bytes_to_human(int_0, bool_0, str_0)
        int_1 = 1024
        var_2 = module_0.bytes_to_human(int_1, bool_0)
        var_3 = module_0.bytes_to_human(int_1, bool_0, str_0)
        int_2 = 1048576
        var_4 = module_0.bytes_to_human(int_2, bool_0)
        float_0 = None
        var_5 = module_0.human_to_bytes(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '1.5 ZB'
        var_0 = module_0.human_to_bytes(str_0, str_0, str_0)
    except BaseException:
        pass