# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.ioloop as module_1
import tornado.httpclient as module_2
import socket as module_3
import tornado.httputil as module_4
import concurrent.futures._base as module_5
import tornado.tcpclient as module_6

def test_case_0():
    pass

def test_case_1():
    str_0 = 'X\r_B2@"vO\t>'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)

def test_case_2():
    str_0 = 'X\r_B2@"vO\t>'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = h_t_t_p_timeout_error_0.__str__()

def test_case_3():
    str_0 = "\tD'N#I*Aao]F:;"
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)

def test_case_4():
    str_0 = 'X\r_B2@"vO\t>'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_5():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    var_0 = lambda response: print(response)

def test_case_6():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.close()
    str_0 = '\x0cM<W3'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)

def test_case_7():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.close()
    var_0 = lambda response: print(response)
    str_0 = 'g1V[@|Qi5=ZEM'
    str_1 = '3WJ;'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_1)
    str_2 = h_t_t_p_stream_closed_error_0.__str__()
    str_3 = 'tornado.simple_httpclient'
    h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_3)
    h_t_t_p_stream_closed_error_2 = module_0.HTTPStreamClosedError(str_3)
    str_4 = "Adds `state` (IOLoop.{READ,WRITE} flags) to our event handler.\n\n        Implementation notes: Reads and writes have a fast path and a\n        slow path.  The fast path reads synchronously from socket\n        buffers, while the slow path uses `_add_io_state` to schedule\n        an IOLoop callback.\n\n        To detect closed connections, we must have called\n        `_add_io_state` at some point, but we want to delay this as\n        much as possible so we don't have to set an `IOLoop.ERROR`\n        listener that will be overwritten by the next slow-path\n        operation. If a sequence of fast-path ops do not end in a\n        slow-path op, (e.g. for an @asynchronous long-poll request),\n        we must add the error handler.\n\n        TODO: reevaluate this now that callbacks are gone.\n\n        "
    str_5 = 'dDh|0U7Zxd\npp]#{'
    bool_0 = False
    simple_async_h_t_t_p_client_0.close()
    h_t_t_p_request_0 = module_2.HTTPRequest(str_4, str_5, str_2, str_0, str_3, str_0, str_1, bool_0, bool_0)
    dict_0 = {}
    simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, dict_0)
    str_6 = h_t_t_p_stream_closed_error_1.__str__()

def test_case_8():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.close()
    var_0 = lambda response: print(response)
    str_0 = '3WJ;'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    int_0 = 849
    socket_0 = module_3.socket()
    simple_async_h_t_t_p_client_0.initialize(int_0, socket_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_1)
    str_2 = h_t_t_p_stream_closed_error_0.__str__()
    str_3 = h_t_t_p_stream_closed_error_0.__str__()
    h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_3)
    str_4 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_9():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.close()
    var_0 = lambda response: print(response)
    str_0 = 'g1V[@|Qi5=ZEM'
    str_1 = '3WJ;'
    float_0 = i_o_loop_0.time()
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_1)
    str_2 = h_t_t_p_stream_closed_error_0.__str__()
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_1)
    str_3 = 'tornado.simple_httpclient'
    h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_3)
    h_t_t_p_stream_closed_error_2 = module_0.HTTPStreamClosedError(str_3)
    str_4 = "Adds `state` (IOLoop.{READ,WRITE} flags) to our event handler.\n\n        Implementation notes: Reads and writes have a fast path and a\n        slow path.  The fast path reads synchronously from socket\n        buffers, while the slow path uses `_add_io_state` to schedule\n        an IOLoop callback.\n\n        To detect closed connections, we must have called\n        `_add_io_state` at some point, but we want to delay this as\n        much as possible so we don't have to set an `IOLoop.ERROR`\n        listener that will be overwritten by the next slow-path\n        operation. If a sequence of fast-path ops do not end in a\n        slow-path op, (e.g. for an @asynchronous long-poll request),\n        we must add the error handler.\n\n        TODO: reevaluate this now that callbacks are gone.\n\n        "
    int_0 = -2471
    simple_async_h_t_t_p_client_0.initialize(int_0)
    str_5 = 'dDh|0U7Zxd\npp]#{'
    bool_0 = False
    h_t_t_p_request_0 = module_2.HTTPRequest(str_4, str_5, str_2, str_0, str_3, str_0, str_1, bool_0, bool_0)
    dict_0 = {}
    simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, dict_0)

def test_case_10():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.close()
    var_0 = lambda response: print(response)
    str_0 = ';\rt=!f25'
    str_1 = 'kfeW{G!xJ\\Id\\-g=N#D'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_1)
    str_2 = h_t_t_p_timeout_error_0.__str__()
    str_3 = '3WJ;'
    h_t_t_p_timeout_error_1 = module_0.HTTPTimeoutError(str_3)
    bytes_0 = b'\xba\xe4"\xe3\x81\x9d'
    str_4 = 'M]T@{x1%_FF?'
    str_5 = '\n'
    str_6 = 'Applies the gzip content encoding to the response.\n\n    See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\n\n    .. versionchanged:: 4.0\n        Now compresses all mime types beginning with ``text/``, instead\n        of just a whitelist. (the whitelist is still used for certain\n        non-text mime types).\n    '
    str_7 = '6\tJ h'
    dict_0 = {str_0: str_6, str_7: str_1}
    h_t_t_p_headers_0 = module_4.HTTPHeaders(**dict_0)
    iterator_0 = h_t_t_p_headers_0.__iter__()
    bool_0 = False
    h_t_t_p_request_0 = module_2.HTTPRequest(str_4, str_5, h_t_t_p_headers_0, str_6, str_6, str_7, str_4, iterator_0, str_4, bool_0, bool_0)
    future_0 = module_5.Future()
    bool_1 = False
    int_0 = 2331
    t_c_p_client_0 = module_6.TCPClient()
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, future_0, bool_1, int_0, t_c_p_client_0, int_0, int_0)
    h_t_t_p_connection_0.data_received(bytes_0)
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_5)
    simple_async_h_t_t_p_client_0.close()
    str_8 = h_t_t_p_stream_closed_error_0.__str__()
    str_9 = h_t_t_p_timeout_error_1.__str__()

def test_case_11():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    simple_async_h_t_t_p_client_0.close()
    var_0 = lambda response: print(response)
    str_0 = 'g1V[@|Qi5=ZEM'
    str_1 = '3WJ;'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_1)
    str_2 = h_t_t_p_stream_closed_error_0.__str__()
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_2)
    str_3 = h_t_t_p_stream_closed_error_0.__str__()
    str_4 = 'Ef\t@7h#g:Fpi\n'
    h_t_t_p_timeout_error_1 = module_0.HTTPTimeoutError(str_4)
    str_5 = 'tornado.simple_httpclient'
    h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_5)
    h_t_t_p_stream_closed_error_2 = module_0.HTTPStreamClosedError(str_5)
    str_6 = "Adds `state` (IOLoop.{READ,WRITE} flags) to our event handler.\n\n        Implementation notes: Reads and writes have a fast path and a\n        slow path.  The fast path reads synchronously from socket\n        buffers, while the slow path uses `_add_io_state` to schedule\n        an IOLoop callback.\n\n        To detect closed connections, we must have called\n        `_add_io_state` at some point, but we want to delay this as\n        much as possible so we don't have to set an `IOLoop.ERROR`\n        listener that will be overwritten by the next slow-path\n        operation. If a sequence of fast-path ops do not end in a\n        slow-path op, (e.g. for an @asynchronous long-poll request),\n        we must add the error handler.\n\n        TODO: reevaluate this now that callbacks are gone.\n\n        "
    str_7 = 'dDh|0U7Zxd\npp]#{'
    bool_0 = True
    simple_async_h_t_t_p_client_0.close()
    h_t_t_p_request_0 = module_2.HTTPRequest(str_6, str_7, str_3, str_0, str_5, str_0, str_2, bool_0, bool_0)
    t_c_p_client_0 = module_6.TCPClient()
    int_0 = 963
    callable_0 = None
    int_1 = -413
    t_c_p_client_1 = None
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, int_0, callable_0, int_1, t_c_p_client_1, int_0, int_1)
    h_t_t_p_connection_0.on_connection_close()