# Automatically generated by Pynguin.
import typing as module_0
import httpie.uploads as module_1
import requests_toolbelt.multipart.encoder as module_2
import requests.models as module_3
import httpie.cli.dicts as module_4

def test_case_0():
    pass

def test_case_1():
    iterable_0 = None
    i_o_0 = module_0.IO()
    var_0 = i_o_0.read()
    chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, var_0)

def test_case_2():
    str_0 = ''
    bytes_0 = b'Z\xf3\x12\xb5g\x99i\x18(\xd0j\n'
    chunked_upload_stream_0 = module_1.ChunkedUploadStream(str_0, bytes_0)
    iterable_0 = chunked_upload_stream_0.__iter__()
    bytes_1 = b'\xd9\xa0Uw\x9e'
    multipart_encoder_0 = module_2.MultipartEncoder(iterable_0, bytes_1)
    chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
    multipart_encoder_1 = None
    chunked_multipart_upload_stream_1 = module_1.ChunkedMultipartUploadStream(multipart_encoder_1)

def test_case_3():
    bool_0 = True
    bool_1 = True
    str_0 = ''
    var_0 = None
    var_1 = module_1.prepare_request_body(str_0, var_0, bool_1, bool_0)
    var_2 = lambda x: x
    bool_2 = True
    var_3 = module_1.prepare_request_body(str_0, var_2, bool_2, bool_0)
    var_4 = [chunk for chunk in var_3]

def test_case_4():
    multipart_encoder_0 = None
    chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)

def test_case_5():
    str_0 = 'qxja =9Ooda>X*G'
    dict_0 = None
    var_0 = module_1.prepare_request_body(str_0, dict_0)
    prepared_request_0 = module_3.PreparedRequest()
    dict_1 = {str_0: var_0}
    multipart_request_data_dict_0 = module_4.MultipartRequestDataDict(**dict_1)
    tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)

def test_case_6():
    request_data_dict_0 = module_4.RequestDataDict()
    multipart_encoder_0 = module_2.MultipartEncoder(request_data_dict_0)
    callable_0 = None
    var_0 = module_1.prepare_request_body(multipart_encoder_0, callable_0)

def test_case_7():
    multipart_request_data_dict_0 = module_4.MultipartRequestDataDict()
    tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)

def test_case_8():
    str_0 = 'field1'
    str_1 = 'field2'
    str_2 = 'value1'
    str_3 = {str_0: str_2, str_1: str_2}
    multipart_encoder_0 = module_2.MultipartEncoder(str_3)
    chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
    iterable_0 = chunked_multipart_upload_stream_0.__iter__()
    var_0 = list(iterable_0)

def test_case_9():
    multipart_request_data_dict_0 = module_4.MultipartRequestDataDict()
    dict_0 = {}
    str_0 = 'method'
    tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, dict_0, str_0)

def test_case_10():
    dict_0 = {}
    float_0 = 0.1
    multipart_encoder_0 = module_2.MultipartEncoder(dict_0, float_0)
    var_0 = module_1.prepare_request_body(multipart_encoder_0, float_0)
    chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
    multipart_request_data_dict_0 = module_4.MultipartRequestDataDict(**dict_0)
    iterable_0 = chunked_multipart_upload_stream_0.__iter__()
    tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
    str_0 = '2YNJ'
    iterable_1 = None
    callable_0 = None
    chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_1, str_0)
    prepared_request_0 = module_3.PreparedRequest()
    var_1 = module_1.prepare_request_body(multipart_encoder_0, callable_0, chunked_upload_stream_0, prepared_request_0)