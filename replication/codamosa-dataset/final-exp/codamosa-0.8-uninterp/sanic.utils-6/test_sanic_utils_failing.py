# Automatically generated by Pynguin.
import sanic.utils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = "P'\tf1c_5n]r8Rsu-%]o"
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '$J!IabR8L%)yHzI'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'NkE'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'L\xd5\xe5\x9d\xdaH\xa3b\xfa\xc5\xfc\x8b\xef'
        str_0 = '[K{Y'
        var_0 = module_0.load_module_from_file_location(bytes_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'r4p\r^<h5r\n\x0b^|S)( 8'
        str_1 = 'Return a streaming response object with file data.\n\n    :param location: Location of file on system.\n    :param chunk_size: The size of each chunk in the stream (in bytes)\n    :param mime_type: Specific mime_type.\n    :param headers: Custom Headers.\n    :param filename: Override filename.\n    :param chunked: Deprecated\n    :param _range:\n    '
        str_2 = '|bI|p#eX0-2;'
        dict_0 = {str_1: str_1, str_1: str_1, str_2: str_0, str_0: str_1}
        var_0 = module_0.load_module_from_file_location(str_1, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        path_0 = module_1.Path()
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '/some/path/some_module_name.py'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '${HOME}/config/config.py'
        str_1 = 'y'
        bool_0 = module_0.str_to_bool(str_1)
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 't'
        bool_0 = module_0.str_to_bool(str_0)
        str_1 = 'Y'
        bool_1 = module_0.str_to_bool(str_1)
        str_2 = '1'
        bool_2 = module_0.str_to_bool(str_2)
        str_3 = 'n'
        bool_3 = module_0.str_to_bool(str_3)
        str_4 = 'f'
        bool_4 = module_0.str_to_bool(str_4)
        list_0 = []
        str_5 = '\n        The port the client connected to, by forwarded ``port`` or\n        ``request.host``.\n\n        Default port is returned as 80 and 443 based on ``request.scheme``.\n\n        :return: port number\n        :rtype: int\n        '
        str_6 = '\n        Trigger "after_server_stop" events\n        '
        dict_0 = {str_5: str_0, str_3: str_5, str_6: bool_1}
        var_0 = module_0.load_module_from_file_location(str_3, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '/some/path/${TEST_ENV_VAR}'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '${HOME}/config/config.py'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass