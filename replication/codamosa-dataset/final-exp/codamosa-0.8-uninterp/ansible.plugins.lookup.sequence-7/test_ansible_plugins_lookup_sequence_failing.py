# Automatically generated by Pynguin.
import ansible.plugins.lookup.sequence as module_0

def test_case_0():
    try:
        lookup_module_0 = module_0.LookupModule()
        set_0 = {lookup_module_0}
        var_0 = lookup_module_0.run(set_0, lookup_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Y}F@CHfJqB [1L~pZ!*>'
        bool_0 = False
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.run(str_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'e'
        var_0 = lookup_module_0.parse_simple_args(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_5():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.reset()
        var_2 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'a'
        bool_0 = False
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.run(str_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.generate_sequence()
        var_2 = list(var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'start'
        str_1 = 'end'
        int_0 = 1
        str_2 = '1-5'
        str_3 = [str_2]
        var_0 = {}
        var_1 = lookup_module_0.run(str_3, int_0, **var_0)
        str_4 = 'stride'
        str_5 = "7LBOA'tI/Q\t"
        dict_0 = {str_4: str_2, str_1: str_3, str_5: int_0, str_1: var_0, str_0: str_5}
        var_2 = lookup_module_0.parse_kv_args(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '5'
        str_1 = '2-1/2'
        str_2 = [str_0, str_0, str_1, str_1]
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.run(str_2, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '2-10/x2'
        str_1 = [str_0, str_0, str_0, str_0]
        var_0 = lookup_module_0.run(str_1, lookup_module_0)
    except BaseException:
        pass

def test_case_11():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'd2-10/x2'
        str_1 = [str_0, str_0, str_0, str_0]
        var_0 = lookup_module_0.run(str_1, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '5'
        str_1 = '2-10/x2'
        str_2 = [str_0, str_0, str_1, str_1]
        str_3 = 'start=0x0f00 count=4 format=\t04x'
        str_4 = [str_3]
        var_0 = lookup_module_0.run(str_4, str_2)
    except BaseException:
        pass