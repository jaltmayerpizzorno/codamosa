# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        callable_0 = None
        bool_0 = False
        either_0 = module_0.Either(bool_0)
        var_0 = either_0.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        object_0 = module_1.object(*list_0)
        float_0 = -443.243
        either_0 = module_0.Either(float_0)
        var_0 = either_0.ap(object_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '?s\x0b)(l1Silu hg='
        either_0 = module_0.Either(str_0)
        var_0 = either_0.to_box()
        int_0 = -1281
        right_0 = module_0.Right(int_0)
        var_1 = right_0.map(either_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        left_0 = module_0.Left(str_0)
        str_1 = 'V{)\ntE=6+{t\x0ccW:x{bq'
        left_1 = module_0.Left(str_1)
        var_0 = None
        either_0 = module_0.Either(var_0)
        bool_0 = left_0.is_right()
        bool_1 = left_1.is_left()
        str_2 = None
        right_0 = module_0.Right(var_0)
        var_1 = right_0.map(str_2)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1918.504
        either_0 = module_0.Either(float_0)
        var_0 = either_0.to_box()
        callable_0 = None
        list_0 = [callable_0, callable_0, callable_0, callable_0]
        right_0 = module_0.Right(list_0)
        bool_0 = right_0.is_right()
        list_1 = []
        object_0 = module_1.object(*list_1)
        right_1 = module_0.Right(object_0)
        bool_1 = either_0.__eq__(object_0)
        var_1 = either_0.to_lazy()
        bytes_0 = b''
        left_0 = module_0.Left(bytes_0)
        var_2 = left_0.to_maybe()
        var_3 = either_0.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        object_0 = module_1.object()
        either_0 = module_0.Either(object_0)
        right_0 = module_0.Right(either_0)
        var_0 = right_0.bind(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'V-pngVJ.r^'
        right_0 = module_0.Right(str_0)
        bool_0 = right_0.is_left()
        callable_0 = None
        var_0 = right_0.bind(callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        bytes_0 = b''
        left_0 = module_0.Left(bytes_0)
        var_0 = left_0.to_validation()
        right_0 = module_0.Right(dict_0)
        var_1 = right_0.to_maybe()
        var_2 = right_0.to_maybe()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        str_1 = 'a3'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        right_0 = module_0.Right(dict_0)
        var_0 = right_0.to_validation()
        list_0 = []
        either_0 = module_0.Either(list_0)
        var_1 = either_0.to_try()
        bytes_0 = b'\x1c\xcf\xe4\xd2\xf0'
        left_0 = module_0.Left(bytes_0)
        left_1 = module_0.Left(left_0)
        left_2 = module_0.Left(left_1)
        bool_0 = left_2.is_left()
        str_2 = '5Q\x0c(H\rt~t-RS3lnF'
        str_3 = 'QaPgk@RH\x0ccOVvQ0.la'
        dict_1 = {str_2: str_2, str_3: str_2}
        object_0 = module_1.object(**dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 5
        right_0 = module_0.Right(int_0)
        int_1 = 2
        var_0 = lambda x: x * int_1
        int_2 = 3
        var_1 = lambda x: x * int_2
        var_2 = right_0.case(var_0, var_1)
    except BaseException:
        pass