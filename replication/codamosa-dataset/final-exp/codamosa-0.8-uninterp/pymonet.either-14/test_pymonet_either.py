# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    bytes_0 = b''
    left_0 = module_0.Left(bytes_0)

def test_case_1():
    object_0 = module_1.object()
    bool_0 = False
    list_0 = []
    list_1 = [list_0, list_0, list_0, bool_0]
    tuple_0 = (bool_0, list_0, bool_0, list_1)
    list_2 = [tuple_0, bool_0, tuple_0, bool_0]
    either_0 = module_0.Either(list_2)
    bool_1 = either_0.__eq__(object_0)

def test_case_2():
    str_0 = None
    dict_0 = {str_0: str_0}
    list_0 = [dict_0, str_0, dict_0]
    right_0 = module_0.Right(list_0)
    either_0 = module_0.Either(right_0)
    var_0 = either_0.to_try()

def test_case_3():
    bool_0 = False
    str_0 = "%?.0I'[/rK8ZV6 :>"
    right_0 = module_0.Right(str_0)
    bool_1 = right_0.is_right()
    either_0 = module_0.Either(bool_0)
    var_0 = either_0.to_lazy()

def test_case_4():
    set_0 = set()
    bool_0 = True
    left_0 = module_0.Left(bool_0)
    bool_1 = left_0.is_right()
    either_0 = module_0.Either(set_0)
    var_0 = either_0.to_lazy()
    str_0 = '\n        Take mapper function and return new instance of Left with the same value.\n\n        :returns: Copy of self\n        :rtype: Left[A]\n        '
    object_0 = module_1.object()
    bool_2 = either_0.__eq__(object_0)
    var_1 = either_0.is_right()
    bool_3 = True
    left_1 = module_0.Left(bool_3)
    var_2 = left_1.ap(str_0)
    var_3 = left_1.map(left_1)
    right_0 = module_0.Right(either_0)
    either_1 = module_0.Either(right_0)

def test_case_5():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    dict_1 = {object_0: object_0, object_0: dict_0}
    either_0 = module_0.Either(dict_1)
    var_0 = either_0.to_try()
    bytes_0 = b''
    left_0 = module_0.Left(bytes_0)
    var_1 = left_0.bind(dict_0)
    right_0 = module_0.Right(var_1)
    right_1 = module_0.Right(either_0)
    left_1 = module_0.Left(right_1)
    var_2 = left_1.ap(right_0)
    int_0 = 1992
    either_1 = module_0.Either(int_0)
    var_3 = either_1.to_try()

def test_case_6():
    str_0 = ''
    left_0 = module_0.Left(str_0)
    left_1 = module_0.Left(str_0)
    bool_0 = left_0.__eq__(left_1)
    var_0 = None
    left_2 = module_0.Left(var_0)
    right_0 = module_0.Right(var_0)
    left_3 = module_0.Left(var_0)

def test_case_7():
    bytes_0 = b''
    left_0 = module_0.Left(bytes_0)
    var_0 = left_0.to_validation()

def test_case_8():
    str_0 = ''
    left_0 = module_0.Left(str_0)
    left_1 = module_0.Left(str_0)
    bool_0 = left_0.__eq__(left_1)
    left_2 = module_0.Left(str_0)
    str_1 = '1'
    left_3 = module_0.Left(str_1)
    bool_1 = left_2.__eq__(left_3)
    int_0 = -881
    right_0 = module_0.Right(int_0)
    bytes_0 = b'!\x9d;N6\x90.\x90\xc8)'
    left_4 = module_0.Left(bytes_0)