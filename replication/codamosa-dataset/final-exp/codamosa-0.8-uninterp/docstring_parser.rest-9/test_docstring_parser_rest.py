# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '    The first line.\n\n    The second line.\n\n    :param foo: param desc\n\n    Long desc\n\n    :type foo: int\n\n    :raises Exception: raises desc\n\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '    This is a description.\n    This is a description.\n\n    :param arg1: Description of arg1. Defaults to None.\n    :param type arg2: Description of arg2.\n    :param arg3: Description of arg3.\n    :param arg4: Description of arg4.\n    :type arg5: str\n    :type arg6: str\n    :type arg7: str\n\n    :returns: Description.\n    :rtype: str\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = 'deprecation'
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = ''
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = 'k Ry\n(++N^'
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = 'Parse the docstring into its components.\n\n    :param text: docstring text to parse\n    :param style: docstring style\n    :returns: parsed docstring representation\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'Docstring of a class.\n        :param int anumber: An integer.\n        :type anumber: int\n        :param bool logical: True if it is the logical choice. (default: False)\n        :raises ValueError: If it is not the logical choice.\n        :return: The same boolean.\n        :rtype: bool\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '    :param a: this is a\n    :param b: this is b\n    :yields c: this is c\n    :returns d: this is d\n    :raises e: this is e\n    :raises f: this is f\n\n    '
    docstring_0 = module_0.parse(str_0)
    var_0 = print(docstring_0)