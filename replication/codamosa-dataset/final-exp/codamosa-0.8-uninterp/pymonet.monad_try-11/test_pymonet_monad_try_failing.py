# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        float_0 = 1884.0
        bool_0 = False
        bool_1 = True
        try_0 = module_0.Try(bool_0, bool_1)
        var_0 = try_0.map(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        int_0 = False
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        str_0 = try_0.__str__()
        float_0 = 613.68
        var_0 = try_0.on_success(str_0)
        bool_1 = True
        var_1 = try_0.bind(int_0)
        try_1 = module_0.Try(float_0, bool_1)
        var_2 = try_1.filter(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 640
        bool_0 = False
        tuple_0 = None
        dict_0 = None
        set_0 = None
        list_0 = [dict_0, int_0, bool_0, int_0]
        tuple_1 = (dict_0, set_0, list_0)
        bool_1 = False
        try_0 = module_0.Try(tuple_1, bool_1)
        bool_2 = True
        try_1 = module_0.Try(try_0, bool_2)
        var_0 = try_1.bind(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Validation.success[{}]'
        bool_0 = False
        try_0 = module_0.Try(str_0, bool_0)
        set_0 = set()
        str_1 = try_0.__str__()
        var_0 = try_0.on_success(set_0)
        list_0 = [set_0, str_0, str_1, var_0]
        var_1 = try_0.filter(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ">?lpd=_y_Q'\x0cu8"
        tuple_0 = ()
        bool_0 = False
        bool_1 = False
        try_0 = module_0.Try(bool_0, bool_1)
        bool_2 = False
        try_1 = module_0.Try(tuple_0, bool_2)
        bool_3 = try_1.__eq__(try_0)
        bool_4 = True
        try_2 = module_0.Try(tuple_0, bool_4)
        var_0 = try_2.on_success(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 2896.598
        int_0 = 1979
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        var_0 = try_0.on_success(float_0)
        str_0 = 'D_lPY_d'
        str_1 = 'Sfcru""F'
        bool_1 = False
        try_1 = module_0.Try(str_1, bool_1)
        int_1 = False
        var_1 = try_1.get_or_else(int_1)
        var_2 = try_1.on_fail(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Validation.success[{}]'
        bool_0 = False
        try_0 = module_0.Try(str_0, bool_0)
        set_0 = set()
        var_0 = try_0.on_success(set_0)
        list_0 = [set_0, str_0, str_0, var_0]
        try_1 = module_0.Try(set_0, bool_0)
        var_1 = try_0.filter(list_0)
        var_2 = try_0.get()
        var_3 = try_0.bind(str_0)
        var_4 = try_0.on_success(str_0)
        bool_1 = True
        try_2 = module_0.Try(bool_1, bool_1)
        var_5 = try_2.filter(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = None
        float_0 = -285.916286
        bool_1 = True
        try_0 = module_0.Try(float_0, bool_1)
        var_0 = try_0.filter(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        bool_0 = False
        try_0 = module_0.Try(tuple_0, bool_0)
        int_0 = False
        bool_1 = True
        try_1 = module_0.Try(int_0, bool_1)
        bool_2 = try_1.__eq__(bool_0)
        complex_0 = None
        bool_3 = try_0.__eq__(complex_0)
        bool_4 = try_1.__eq__(try_1)
        bool_5 = False
        var_0 = try_0.on_success(bool_5)
        str_0 = 'RH)^-pmL@,'
        var_1 = try_1.bind(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        int_0 = -2589
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        var_0 = try_0.map(set_0)
    except BaseException:
        pass