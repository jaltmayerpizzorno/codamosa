# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.tokenize as module_1

def test_case_0():
    try:
        int_0 = None
        grammar_0 = module_0.Grammar()
        bytes_0 = b'h\xbf\xbcc\xf7#U:\x0c?\xda\xb4\xbf\x05\xea\xea'
        grammar_0.report()
        grammar_0.report()
        bool_0 = False
        var_0 = module_1.printtoken(int_0, grammar_0, grammar_0, bytes_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_0.Grammar()
        module_1.tokenize(grammar_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1745
        tuple_0 = (int_0, int_0)
        untokenizer_0 = module_1.Untokenizer()
        untokenizer_0.add_whitespace(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'J^L~4|VB\t+-zO}O'
        untokenizer_0 = module_1.Untokenizer()
        str_1 = module_1.untokenize(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2
        str_0 = 'iq0!f%Yb9m'
        tuple_0 = (int_0, str_0)
        bytes_0 = b'a\xaf'
        untokenizer_0 = module_1.Untokenizer()
        untokenizer_0.compat(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 594
        str_0 = 'J^L~4|VB\t+-zO}O'
        tuple_0 = (int_0, str_0)
        bytes_0 = b'#n|\x14\x8e\xc4\xec\xe6\xe2<u\xaf$\xb3Y[\x80|\xd8!'
        list_0 = [tuple_0, bytes_0, str_0, int_0]
        untokenizer_0 = module_1.Untokenizer()
        untokenizer_0.compat(tuple_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 594
        tuple_0 = module_1.detect_encoding(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        str_0 = module_1.untokenize(tuple_0)
        int_0 = -1987
        tuple_1 = (int_0, str_0)
        token_error_0 = module_1.TokenError()
        untokenizer_0 = module_1.Untokenizer()
        untokenizer_0.compat(tuple_1, token_error_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = None
        str_0 = '\r UrYmX1-W'
        tuple_0 = (int_0, str_0)
        set_0 = {tuple_0}
        untokenizer_0 = module_1.Untokenizer()
        untokenizer_0.compat(tuple_0, set_0)
        untokenizer_1 = module_1.Untokenizer()
        str_1 = 'f&'
        str_2 = module_1.untokenize(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        grammar_0 = module_0.Grammar()
        callable_0 = None
        grammar_1 = module_0.Grammar()
        iterator_0 = module_1.generate_tokens(callable_0, grammar_1)
        untokenizer_0 = module_1.Untokenizer()
        str_0 = untokenizer_0.untokenize(iterator_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        bool_1 = None
        set_0 = set()
        str_0 = module_1.untokenize(set_0)
        list_0 = [bool_0, bool_1]
        var_0 = module_1.tokenize_loop(bool_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -933
        tuple_0 = (int_0, int_0)
        str_0 = 'A5z8*aK-'
        set_0 = {int_0, tuple_0, int_0, str_0}
        untokenizer_0 = module_1.Untokenizer()
        str_1 = untokenizer_0.untokenize(set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'v!\x0b+4:Xuj'
        bytes_0 = b'\xe3\x19\x01r'
        list_0 = [bytes_0, bytes_0, bytes_0]
        tuple_0 = (str_0, list_0)
        list_1 = [tuple_0]
        untokenizer_0 = module_1.Untokenizer()
        str_1 = untokenizer_0.untokenize(list_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'value'
        int_0 = 0
        int_1 = (int_0, int_0)
        int_2 = 4
        int_3 = (int_0, int_2)
        str_1 = ''
        var_0 = module_1.printtoken(str_0, str_0, int_1, int_3, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        untokenizer_0 = module_1.Untokenizer()
        int_0 = 1
        str_0 = 'a'
        var_0 = (int_0, str_0)
        int_1 = 2666
        str_1 = 'b'
        var_1 = (int_1, str_1)
        str_2 = 'c'
        var_2 = (int_1, str_2)
        int_2 = 4
        str_3 = 'd'
        var_3 = (int_2, str_3)
        var_4 = [var_0, var_1, var_2, var_3]
        var_5 = iter(var_4)
        var_6 = (int_0, str_0)
        untokenizer_0.compat(var_6, var_5)
        var_7 = list(none_type_0)
    except BaseException:
        pass

def test_case_15():
    try:
        untokenizer_0 = module_1.Untokenizer()
        int_0 = 1
        str_0 = 'ab'
        var_0 = (int_0, str_0)
        int_1 = 3
        str_1 = '1K@'
        var_1 = (int_1, str_1)
        int_2 = 4
        str_2 = 'gh'
        var_2 = (int_2, str_2)
        int_3 = 5
        str_3 = 'ij'
        var_3 = (int_3, str_3)
        int_4 = 6
        str_4 = 'kl'
        var_4 = (int_4, str_4)
        int_5 = 7
        var_5 = (int_5, str_0)
        int_6 = 3
        str_5 = 'qr'
        var_6 = (int_6, str_5)
        int_7 = 47
        str_6 = 'st'
        var_7 = (int_7, str_6)
        var_8 = [var_0, str_6, var_1, var_2, var_3, var_4, var_5, str_6, var_7, int_6, var_6, var_7]
        str_7 = untokenizer_0.untokenize(var_8)
    except BaseException:
        pass

def test_case_16():
    try:
        untokenizer_0 = module_1.Untokenizer()
        int_0 = 1
        str_0 = 'ab'
        var_0 = (int_0, str_0)
        int_1 = 2
        var_1 = (int_1, str_0)
        int_2 = 3
        str_1 = 'ef'
        var_2 = (int_2, str_1)
        int_3 = 4
        str_2 = 'gh'
        var_3 = (int_3, str_2)
        int_4 = 6
        var_4 = (int_4, str_2)
        int_5 = 7
        str_3 = 'mn'
        var_5 = (int_5, str_3)
        str_4 = 'op'
        var_6 = (int_4, str_4)
        str_5 = 'qr'
        var_7 = (int_2, str_5)
        int_6 = 47
        var_8 = (int_6, str_2)
        var_9 = [var_0, var_1, var_2, var_3, str_2, var_4, var_5, var_6, var_7, var_8]
        str_6 = untokenizer_0.untokenize(var_9)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'k9hEu'
        bytes_0 = b''
        bytes_1 = b'\xe2`\x8d\x14#\x18\x05U6\xcb\xcc\xaa\xd9"\x07\x87E\xb8\xc0\x15'
        list_0 = [bytes_0, bytes_1, bytes_0]
        tuple_0 = (str_0, list_0)
        untokenizer_0 = module_1.Untokenizer()
        str_1 = untokenizer_0.untokenize(tuple_0)
    except BaseException:
        pass