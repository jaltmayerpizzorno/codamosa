# Automatically generated by Pynguin.
import ansible.module_utils.common.text.converters as module_0

def test_case_0():
    try:
        str_0 = '|\x0cjkt>|U\x0ch]|S\x0c'
        float_0 = None
        var_0 = module_0.container_to_bytes(str_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'abc'
        var_0 = module_0.to_bytes(str_0)
        str_1 = 'ሴ'
        str_2 = 'ascii'
        var_1 = module_0.to_bytes(str_1, str_2)
        str_3 = 'replace'
        var_2 = module_0.to_bytes(str_1, str_2, str_3)
        bytes_0 = b'Psv7\xa8\x91n\xa1\xf1\x99\x1d'
        var_3 = module_0.to_bytes(bytes_0)
        var_4 = bytearray(bytes_0)
        var_5 = module_0.to_bytes(var_4)
        int_0 = 123
        var_6 = module_0.to_bytes(int_0)
        str_4 = 'empty'
        var_7 = module_0.to_bytes(int_0, str_4)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = None
        bool_0 = False
        bytes_0 = None
        tuple_1 = (tuple_0, bool_0, bytes_0)
        list_0 = [tuple_1, tuple_0, tuple_0]
        list_1 = [bytes_0, tuple_0]
        int_0 = 4188
        str_0 = 'refspec'
        var_0 = module_0.to_text(list_0, list_1, int_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'strict'
        dict_0 = {str_0: str_0}
        int_0 = 10
        var_0 = module_0.container_to_bytes(dict_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ChK?hT#0zF(*G]h9'
        str_1 = 'oCes2}c'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_1: str_0}
        list_0 = [str_0]
        dict_1 = {str_0: str_0}
        int_0 = 613
        str_2 = '-u %s'
        int_1 = 1268
        str_3 = 'V""H77SY`FG6&\r.aQ#J+'
        bool_0 = False
        tuple_0 = (bool_0, list_0)
        str_4 = '-'
        tuple_1 = (int_1, str_3, tuple_0, str_4)
        var_0 = module_0.container_to_text(tuple_1)
        tuple_2 = (dict_1, int_0, str_2, dict_0)
        var_1 = module_0.jsonify(tuple_2)
        var_2 = module_0.container_to_bytes(dict_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Thu'
        bool_0 = False
        list_0 = [bool_0, str_0, bool_0, str_0]
        str_1 = 'jFT)\\k |[rz{jKy6n=P'
        dict_0 = {str_0: list_0, str_0: str_0, str_1: bool_0, str_0: str_0}
        var_0 = module_0.jsonify(list_0, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "zn0klB'tu6J"
        list_0 = [str_0]
        bytes_0 = b'\xcf?tx\xcb\x84\xa5#\x14$a\x94\x12/\t'
        var_0 = module_0.to_bytes(bytes_0)
        dict_0 = None
        dict_1 = {str_0: var_0, str_0: str_0, str_0: str_0}
        float_0 = 410.0
        var_1 = module_0.container_to_text(list_0, float_0)
        var_2 = module_0.to_bytes(float_0)
        bool_0 = True
        set_0 = {bool_0}
        var_3 = module_0.to_text(float_0, bool_0, set_0)
        var_4 = module_0.jsonify(dict_1)
        int_0 = -4241
        var_5 = module_0.jsonify(int_0)
        list_1 = [str_0]
        dict_2 = {str_0: list_1, str_0: str_0, str_0: list_1}
        var_6 = module_0.jsonify(str_0)
        var_7 = module_0.to_text(list_1, dict_2)
        var_8 = module_0.jsonify(set_0)
        float_1 = -2168.0
        var_9 = module_0.container_to_bytes(float_1)
        tuple_0 = (list_0,)
        var_10 = module_0.to_bytes(tuple_0, dict_1, str_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'ሴ'
        var_0 = module_0.to_bytes(str_0)
        str_1 = 'latin-1'
        var_1 = module_0.to_bytes(str_0, str_1)
        str_2 = 'ascii'
        var_2 = module_0.to_bytes(str_0, str_2)
        str_3 = 'ignore'
        var_3 = module_0.to_bytes(str_0, str_2, str_3)
        str_4 = 'replace'
        var_4 = module_0.to_bytes(str_0, str_2, str_4)
        str_5 = 'surrogateescape'
        var_5 = module_0.to_bytes(str_0, str_2, str_5)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xe2\x98\x83'
        set_0 = {bytes_0}
        var_0 = module_0.jsonify(set_0)
    except BaseException:
        pass