# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        str_0 = 'b_\x0b\x0bQp05-&_|6"'
        str_1 = '7Dm3N+S/-\n/A\x0c1l#WFg'
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
        list_0 = [dict_0, str_0]
        optional_0 = module_0.parse_forwarded(dict_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'x-forwarded-for'
        var_0 = ()
        str_1 = 'PROXIES_COUNT'
        str_2 = 'REAL_IP_HEADER'
        int_0 = 0
        var_1 = {str_1: int_0, str_2: str_0, str_2: str_0}
        var_2 = type(str_2, var_0, var_1)
        optional_0 = module_0.parse_xforwarded(str_1, var_2)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '2a fUj%'
        str_1 = "&w'>t[U"
        tuple_0 = module_0.parse_host(str_1)
        dict_0 = module_0.fwd_normalize(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 431
        int_1 = 204
        bytes_0 = module_0.format_http1_response(int_0, int_1)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -348
        str_0 = 'request_max_size'
        bytes_0 = module_0.format_http1_response(int_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\x0b\tU,SGj L"zSC7'
        str_1 = 'MU~j3PROaM-q'
        tuple_0 = module_0.parse_host(str_1)
        str_2 = 'y@OasEf8Lp%'
        set_0 = {str_0, str_0, str_2, tuple_0, str_1}
        dict_0 = module_0.fwd_normalize(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Uj3POaM-q'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = 'y@OasEf8Lp%'
        str_2 = 'D"'
        set_0 = {str_2, str_1, tuple_0, str_0}
        dict_0 = module_0.fwd_normalize(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'unknown'
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'U&nW}~Vyo rpZ]Q'
        str_1 = {str_0: str_0}
        str_2 = ''
        var_0 = ()
        str_3 = 'PROXIES_COUNT'
        str_4 = 'FORWARDED_FOR_HEADER'
        str_5 = 'REAL_IP_HEADER'
        int_0 = -17
        var_1 = {str_3: int_0, str_4: str_5, str_5: str_5}
        var_2 = type(str_2, var_0, var_1)
        optional_0 = module_0.parse_xforwarded(str_1, var_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'U&nW}~Vyo rpZ]Q'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = 'x-forwarded-for'
        str_2 = {tuple_0: str_1, str_1: tuple_0}
        str_3 = ''
        var_0 = ()
        str_4 = 'PROXIES_COUNT'
        str_5 = 'FORWARDED_FOR_HEADER'
        str_6 = 'REAL_IP_HEADER'
        int_0 = -17
        var_1 = {str_4: int_0, str_5: str_1, str_6: str_1}
        var_2 = type(str_3, var_0, var_1)
        optional_0 = module_0.parse_xforwarded(str_2, var_2)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'hGzn4h~0gMZ0PN'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = {tuple_0: str_0, str_0: tuple_0}
        var_0 = ()
        str_2 = 'PROXIES_COUNT'
        str_3 = 'z\rA{<eJ'
        str_4 = 'REAL_IP_HEADER'
        int_0 = 2809
        var_1 = {str_2: int_0, str_3: str_3, str_4: str_3}
        str_5 = module_0.fwd_normalize_address(str_4)
        tuple_1 = module_0.parse_content_header(str_2)
        tuple_2 = module_0.parse_host(str_0)
        var_2 = type(str_5, var_0, var_1)
        optional_0 = module_0.parse_xforwarded(str_1, var_2)
    except BaseException:
        pass