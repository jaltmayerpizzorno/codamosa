# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2
import py_backwards.utils.helpers as module_3

def test_case_0():
    try:
        str_0 = '^\x0bZJy)|d9]Y'
        list_0 = []
        name_0 = module_0.Name(*list_0)
        str_1 = None
        str_2 = None
        dict_0 = {str_1: str_0, str_2: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        attribute_0 = module_0.Attribute()
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        attribute_2 = variables_replacer_0.visit_Attribute(attribute_1)
        name_1 = variables_replacer_0.visit_Name(name_0)
        except_handler_0 = module_0.ExceptHandler()
        str_3 = None
        dict_1 = {str_3: str_2}
        snippet_0 = module_1.snippet(list_0)
        list_1 = snippet_0.get_body(**dict_1)
    except BaseException:
        pass

def test_case_1():
    try:
        attribute_0 = None
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '^\x0bZJy)|d9]Y'
        list_0 = []
        name_0 = module_0.Name(*list_0)
        str_1 = None
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_1, str_1: str_1}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\na = 5\nextend(vars)\nb = 3\n        '
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        str_1 = '9>8.!{6L?3LLDu~c93'
        str_2 = '{9JF\x0c.Tu%'
        class_def_0 = module_0.ClassDef()
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
        dict_1 = {str_1: str_1, str_0: str_0, str_2: str_2}
        except_handler_0 = module_0.ExceptHandler(**dict_1)
        str_3 = '-\r9.i\tC[\rNU'
        list_0 = [str_3, str_0]
        import_from_0 = module_0.ImportFrom(*list_0, **dict_1)
        except_handler_1 = module_0.ExceptHandler()
        str_4 = '\nx = 6\ny = 7\n        '
        keyword_0 = module_0.keyword(*list_0)
        var_0 = module_2.parse(str_0)
        var_1 = module_2.parse(str_4)
        module_1.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\na = 5\nextend(vars)\nb = 3\n        '
        str_1 = '\nx = 6\ny = 7\n        '
        var_0 = module_2.parse(str_0)
        arg_0 = module_0.arg()
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        var_1 = module_2.parse(str_1)
        var_2 = var_1.body
        module_1.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\na = 5\nextend(vars)\nb = 3\n        '
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        str_1 = '{9JF\x0c.Tu%'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        str_2 = '_p#?>r'
        dict_1 = {str_2: str_0, str_2: str_2, str_1: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        list_0 = [str_2, str_0]
        import_from_0 = module_0.ImportFrom(*list_0, **dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        import_from_2 = variables_replacer_0.visit_ImportFrom(import_from_1)
        import_from_3 = variables_replacer_0.visit_ImportFrom(import_from_2)
        import_from_4 = variables_replacer_0.visit_ImportFrom(import_from_3)
        str_3 = '\nx = 6\ny = 7\n        '
        var_0 = module_2.parse(str_0)
        var_1 = module_2.parse(str_3)
        var_2 = var_1.body
        module_1.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_6():
    try:
        a_s_t_0 = module_0.AST()
        import_from_0 = module_0.ImportFrom()
        str_0 = 'KD?'
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_7():
    try:
        alias_0 = module_0.alias()
        str_0 = 'lHK5'
        str_1 = '89uA5MrP(R\tk |8+Hre'
        str_2 = 'VLjW,}\r'
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_1: str_1}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\na = 5\nextend(vars)\nb = 3\n        '
        var_0 = module_2.parse(str_0)
        module_1.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        snippet_0 = module_1.snippet(dict_0)
        list_0 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'O+$`#T8'
        class_def_0 = module_0.ClassDef()
        str_1 = '$'
        str_2 = 'WCh_\\t'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        dict_1 = {str_0: class_def_0, str_0: class_def_0, str_1: str_1, str_0: str_1}
        a_s_t_0 = module_0.AST(**dict_1)
        module_1.extend(a_s_t_0)
        a_s_t_1 = None
        iterable_0 = module_1.find_variables(a_s_t_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        function_def_0 = module_0.FunctionDef()
        str_1 = "='|D=n"
        dict_1 = {str_1: str_1}
        variables_replacer_1 = module_1.VariablesReplacer(dict_1)
        callable_0 = None
        snippet_0 = module_1.snippet(callable_0)
        function_def_1 = variables_replacer_1.visit_FunctionDef(function_def_0)
        module_1.let(function_def_1)
        str_2 = 'W-@K5 X\n'
        str_3 = "'c{pv9c"
        dict_2 = {str_2: variables_replacer_1, str_2: str_1, str_1: variables_replacer_1, str_3: str_1}
        a_s_t_0 = module_0.AST(**dict_2)
        function_def_2 = None
        function_def_3 = variables_replacer_0.visit_FunctionDef(function_def_2)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\na = 5\nextend(vars)\nb = 3\n        '
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        str_1 = '9>8.!{6L?3LLDu~c93'
        dict_0 = {str_1: str_1, str_0: str_0, str_1: str_1}
        except_handler_0 = module_0.ExceptHandler(**dict_0)
        str_2 = '_p#?>r'
        str_3 = '-\r9.i\tC[\rNU'
        dict_1 = {str_2: str_0, str_2: str_2, str_3: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        list_0 = [str_3, str_0]
        import_from_0 = module_0.ImportFrom(*list_0, **dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        import_from_2 = variables_replacer_0.visit_ImportFrom(import_from_1)
        import_from_3 = variables_replacer_0.visit_ImportFrom(import_from_2)
        import_from_4 = module_0.ImportFrom()
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        var_0 = module_2.parse(str_0)
        var_1 = module_2.parse(str_0)
        var_2 = var_1.body
        module_1.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\na = 5\nextend(vars)\nb = 3\n        '
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        str_1 = 'extend'
        str_2 = '{9JF\x0c.Tu%'
        dict_0 = {str_1: str_1, str_0: str_0, str_2: str_2}
        except_handler_0 = module_0.ExceptHandler(**dict_0)
        str_3 = '_p#?>r'
        str_4 = '-\r9.i\tC[\rNU'
        dict_1 = {str_3: str_0, str_3: str_3, str_4: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        list_0 = [str_4, str_0]
        import_from_0 = module_0.ImportFrom(*list_0, **dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        import_from_2 = variables_replacer_0.visit_ImportFrom(import_from_1)
        import_from_3 = variables_replacer_0.visit_ImportFrom(import_from_2)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        str_5 = '\nx = 6\ny = 7\n        '
        var_0 = module_2.parse(str_0)
        var_1 = module_2.parse(str_5)
        var_2 = var_1.body
        alias_0 = module_0.alias(*list_0, **dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
        alias_2 = variables_replacer_0.visit_alias(alias_1)
        module_1.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\na = 5\nextekd(vars)\nb = 3\n        '
        str_1 = '\nx = 6\ny = 7\n        '
        var_0 = module_2.parse(str_0)
        var_1 = module_2.parse(str_1)
        var_2 = var_1.body
        var_3 = {str_1: var_2}
        module_1.extend_tree(var_0, var_3)
        str_2 = module_3.get_source(var_0)
    except BaseException:
        pass