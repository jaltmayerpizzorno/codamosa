# Automatically generated by Pynguin.
import httpie.uploads as module_0
import httpie.cli.dicts as module_1
import requests_toolbelt.multipart.encoder as module_2
import typing as module_3
import requests.models as module_4

def test_case_0():
    pass

def test_case_1():
    iterable_0 = None
    float_0 = 0.1
    chunked_upload_stream_0 = module_0.ChunkedUploadStream(iterable_0, float_0)

def test_case_2():
    str_0 = 'hello'
    str_1 = 'world'
    str_2 = 'this'
    str_3 = 'is'
    str_4 = 'steven'
    str_5 = (str_0, str_1, str_2, str_3, str_4)
    var_0 = lambda x: x
    chunked_upload_stream_0 = module_0.ChunkedUploadStream(str_5, var_0)
    var_1 = iter(chunked_upload_stream_0)
    var_2 = next(var_1)

def test_case_3():
    multipart_request_data_dict_0 = module_1.MultipartRequestDataDict()
    multipart_encoder_0 = module_2.MultipartEncoder(multipart_request_data_dict_0)
    chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
    iterable_0 = chunked_multipart_upload_stream_0.__iter__()

def test_case_4():
    multipart_request_data_dict_0 = module_1.MultipartRequestDataDict()
    bytes_0 = b'\xa0[\xfe4,]~v)\x0f\xe6}\xdc!4\xcc'
    multipart_encoder_0 = module_2.MultipartEncoder(multipart_request_data_dict_0, bytes_0)
    callable_0 = None
    var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_0)

def test_case_5():
    iterable_0 = None
    i_o_0 = module_3.IO()
    var_0 = i_o_0.readline()
    chunked_upload_stream_0 = module_0.ChunkedUploadStream(iterable_0, var_0)
    str_0 = '\t>17-^kJ'
    callable_0 = None
    float_0 = 0.1
    var_1 = module_0.prepare_request_body(str_0, callable_0, float_0)

def test_case_6():
    request_data_dict_0 = module_1.RequestDataDict()
    multipart_request_data_dict_0 = None
    chunked_multipart_upload_stream_0 = None
    prepared_request_0 = module_4.PreparedRequest()
    i_o_0 = module_3.IO()
    int_0 = 107
    var_0 = i_o_0.readline(int_0)
    chunked_upload_stream_0 = module_0.ChunkedUploadStream(i_o_0, var_0)
    iterable_0 = chunked_upload_stream_0.__iter__()
    tuple_0 = (chunked_multipart_upload_stream_0, prepared_request_0)
    var_1 = module_0.prepare_request_body(request_data_dict_0, multipart_request_data_dict_0, tuple_0)

def test_case_7():
    str_0 = '--verify'
    callable_0 = None
    int_0 = 270
    float_0 = 0.1
    dict_0 = {str_0: str_0, str_0: callable_0}
    request_data_dict_0 = module_1.RequestDataDict(**dict_0)
    var_0 = module_0.prepare_request_body(str_0, callable_0, int_0, float_0, request_data_dict_0)
    multipart_request_data_dict_0 = module_1.MultipartRequestDataDict(**dict_0)

def test_case_8():
    multipart_request_data_dict_0 = module_1.MultipartRequestDataDict()
    str_0 = '\n    The HTTP method to be used for the request (GET, POST, PUT, DELETE, ...).\n\n    This argument can be omitted in which case HTTPie will use POST if there\n    is some data to be sent, otherwise GET:\n\n        $ http example.org               # => GET\n        $ http example.org hello=world   # => POST\n\n    '
    tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)

def test_case_9():
    multipart_request_data_dict_0 = module_1.MultipartRequestDataDict()
    tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)
    i_o_0 = module_3.IO()

def test_case_10():
    dict_0 = {}
    multipart_encoder_0 = module_2.MultipartEncoder(dict_0)
    int_0 = -903
    var_0 = module_0.prepare_request_body(multipart_encoder_0, int_0, int_0, multipart_encoder_0)

def test_case_11():
    str_0 = 'name'
    str_1 = 'httpie'
    str_2 = {str_0: str_1}
    multipart_encoder_0 = module_2.MultipartEncoder(str_2)
    chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
    iterable_0 = chunked_multipart_upload_stream_0.__iter__()
    var_0 = list(iterable_0)
    iterable_1 = chunked_multipart_upload_stream_0.__iter__()
    var_1 = list(iterable_1)
    iterable_2 = chunked_multipart_upload_stream_0.__iter__()
    var_2 = list(iterable_2)