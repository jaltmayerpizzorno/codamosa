# Automatically generated by Pynguin.
import httpie.cli.dicts as module_0
import httpie.uploads as module_1
import typing as module_2
import requests_toolbelt.multipart.encoder as module_3
import requests.models as module_4

def test_case_0():
    try:
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        i_o_0 = module_2.IO()
        str_0 = '=rV'
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(i_o_0, str_0)
        multipart_encoder_0 = module_3.MultipartEncoder(chunked_upload_stream_0)
    except BaseException:
        pass

def test_case_1():
    try:
        prepared_request_0 = module_4.PreparedRequest()
        prepared_request_1 = module_4.PreparedRequest()
        bytes_0 = b'\x00\x9f\xc9\xab\xbf\xaaE\x92\xc5\x9fsY\x1fe\x1b\xd6\x9a\xcf\xfb'
        multipart_encoder_0 = None
        str_0 = 'download_resume'
        tuple_0 = (multipart_encoder_0, str_0)
        multipart_request_data_dict_0 = None
        var_0 = module_1.prepare_request_body(bytes_0, tuple_0, multipart_request_data_dict_0, str_0)
        dict_0 = {prepared_request_1: prepared_request_1, prepared_request_1: prepared_request_0}
        multipart_encoder_1 = module_3.MultipartEncoder(prepared_request_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        prepared_request_0 = module_4.PreparedRequest()
        bool_0 = False
        var_0 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        prepared_request_0 = None
        bool_0 = False
        var_0 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        prepared_request_0 = module_4.PreparedRequest()
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        bytes_0 = b'\xa0[\xfe4,]~v)\x0f\xe6}\xdc!4\xcc'
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        multipart_encoder_0 = module_3.MultipartEncoder(multipart_request_data_dict_0, bytes_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        callable_0 = None
        var_0 = module_1.prepare_request_body(multipart_encoder_0, callable_0)
        chunked_multipart_upload_stream_1 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_1 = multipart_encoder_0.to_string()
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        request_data_dict_0 = module_0.RequestDataDict()
        float_0 = -3518.54842
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(request_data_dict_0, float_0)
        i_o_0 = module_2.IO(**dict_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        list_0 = [iterable_0]
        prepared_request_0 = None
        multipart_encoder_0 = module_3.MultipartEncoder(list_0, prepared_request_0)
    except BaseException:
        pass

def test_case_6():
    try:
        iterable_0 = None
        set_0 = {iterable_0, iterable_0, iterable_0, iterable_0}
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, set_0)
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        list_0 = []
        i_o_0 = module_2.IO(*list_0)
        var_0 = i_o_0.readline()
        str_0 = '--ignore-stdin'
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, var_0, str_0)
        prepared_request_0 = module_4.PreparedRequest()
        iterable_1 = chunked_upload_stream_0.__iter__()
        str_1 = ''
        multipart_request_data_dict_1 = module_0.MultipartRequestDataDict()
        i_o_1 = module_2.IO()
        var_1 = i_o_1.read()
        tuple_1 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_1)
        chunked_upload_stream_1 = module_1.ChunkedUploadStream(iterable_0, var_1)
        bytes_0 = b'\xa0[\xfe4,~v)\x0f\xe6}\xdc!4\xcc'
        multipart_encoder_0 = module_3.MultipartEncoder(multipart_request_data_dict_1, bytes_0)
        int_0 = -330
        var_2 = i_o_1.read(int_0)
        list_1 = [var_1, var_2, var_2]
        var_3 = module_1.prepare_request_body(multipart_encoder_0, bytes_0, int_0, list_1)
        tuple_2 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_1, str_1)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        callable_0 = None
        var_4 = i_o_1.__enter__()
        str_2 = 'F@'
        tuple_3 = (str_2, i_o_1)
        var_5 = module_1.prepare_request_body(multipart_encoder_0, callable_0, int_0, var_4, tuple_3)
    except BaseException:
        pass

def test_case_7():
    try:
        iterable_0 = None
        set_0 = {iterable_0, iterable_0, iterable_0, iterable_0}
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, set_0)
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        list_0 = []
        i_o_0 = module_2.IO(*list_0)
        str_0 = 'SKPG'
        str_1 = 'boundary='
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_1)
        var_0 = i_o_0.readline()
        str_2 = '--ignore-stdin'
        tuple_1 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, var_0, str_2)
        prepared_request_0 = module_4.PreparedRequest()
        iterable_1 = chunked_upload_stream_0.__iter__()
        str_3 = ''
        multipart_request_data_dict_1 = module_0.MultipartRequestDataDict()
        i_o_1 = module_2.IO()
        var_1 = i_o_1.read()
        tuple_2 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_1)
        chunked_upload_stream_1 = module_1.ChunkedUploadStream(iterable_0, var_1)
        bytes_0 = b'\xa0[\xfe4,~v)\x0f\xe6}\xdc!4\xcc'
        multipart_encoder_0 = module_3.MultipartEncoder(multipart_request_data_dict_1, bytes_0)
        int_0 = -330
        var_2 = i_o_1.read(int_0)
        list_1 = [var_1, var_2, var_2]
        var_3 = module_1.prepare_request_body(multipart_encoder_0, bytes_0, int_0, list_1)
        tuple_3 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_1, str_3)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        tuple_4 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_1)
        bool_0 = True
        var_4 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass