# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        bool_0 = True
        doc_c_l_i_0 = module_0.DocCLI(bool_0)
        var_0 = module_0.jdump(doc_c_l_i_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 86
        str_0 = 'K~~cayV'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.display_plugin_list(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'D'
        role_mixin_0 = module_0.RoleMixin()
        doc_c_l_i_0 = module_0.DocCLI(role_mixin_0)
        list_0 = [str_0]
        var_0 = doc_c_l_i_0.get_all_plugins_of_type(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        bytes_0 = b'4N'
        plugin_not_found_0 = module_0.PluginNotFound()
        doc_c_l_i_0 = module_0.DocCLI(plugin_not_found_0)
        var_0 = doc_c_l_i_0.get_plugin_metadata(list_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Xjz7S80'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        bool_0 = False
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(bool_0, str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Nrw~B^P]%n'
        str_1 = 'Xjz7S80'
        doc_c_l_i_0 = module_0.DocCLI(str_1)
        var_0 = doc_c_l_i_0.init_parser()
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        var_1 = doc_c_l_i_1.run()
        set_0 = set()
        dict_0 = {var_1: var_1, doc_c_l_i_0: set_0}
        plugin_not_found_0 = module_0.PluginNotFound()
        var_2 = doc_c_l_i_1.get_role_man_text(dict_0, plugin_not_found_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'b\x83\x0c]\xe5\xb9\xdf\x87\xcc\xa8\x99\xab\xcad\xa9\xe6\x9b'
        bool_0 = False
        role_mixin_0 = module_0.RoleMixin()
        doc_c_l_i_0 = module_0.DocCLI(role_mixin_0)
        var_0 = doc_c_l_i_0.get_man_text(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'b\x83\x0c]\xe5\xb9\xdf\x87\xcc\xa8\x99\xab\xcad\xa9\xe6\x9b'
        list_0 = []
        role_mixin_0 = module_0.RoleMixin(*list_0)
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        str_0 = 'vboxsf'
        dict_0 = {str_0: list_0}
        var_0 = doc_c_l_i_0.get_man_text(dict_0, role_mixin_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Xjz7S80'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
        dict_0 = {str_0: str_0, str_0: str_0}
        bool_0 = True
        str_1 = 'r9*5o{6hAa5<t\x0bk}I1\r1'
        dict_1 = {str_1: bool_0, str_0: dict_0}
        tuple_0 = None
        list_0 = [tuple_0]
        var_1 = doc_c_l_i_0.format_snippet(doc_c_l_i_0, str_0, list_0)
        bytes_0 = None
        var_2 = doc_c_l_i_0.get_man_text(dict_1, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Xjz7S80'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        complex_0 = None
        list_0 = [complex_0]
        bool_0 = True
        bool_1 = True
        doc_c_l_i_1 = module_0.DocCLI(bool_1)
        var_0 = doc_c_l_i_1.add_fields(complex_0, list_0, bool_0, complex_0)
    except BaseException:
        pass

def test_case_10():
    try:
        role_mixin_0 = module_0.RoleMixin()
        str_0 = '{[/s\x0c89s|?toK'
        str_1 = 'Oe&P}'
        str_2 = None
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
        dict_1 = {role_mixin_0: role_mixin_0}
        doc_c_l_i_0 = module_0.DocCLI(dict_1)
        var_0 = doc_c_l_i_0.get_role_man_text(str_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Nrw5~B^P]%n'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = module_0.add_collection_plugins(doc_c_l_i_0, str_0)
        var_1 = doc_c_l_i_0.init_parser()
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        var_2 = doc_c_l_i_1.run()
        dict_0 = {var_1: var_1}
        list_0 = [dict_0, dict_0]
        str_1 = 'Z'
        int_0 = 9
        float_0 = 60.0
        bytes_0 = b'lU\x87@\x00\xe9f\xd5\xdc0\x9d\x9b\xca\xc4\xa8\xd8'
        plugin_not_found_0 = None
        var_3 = doc_c_l_i_0.format_plugin_doc(list_0, str_1, int_0, float_0, bytes_0, plugin_not_found_0)
    except BaseException:
        pass

def test_case_12():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        plugin_not_found_1 = module_0.PluginNotFound()
        str_0 = 'IRUf;9'
        bool_0 = False
        list_0 = [plugin_not_found_1, plugin_not_found_0]
        bytes_0 = b'\xa0#\xd2>jN\x97\xb3\x1ey\xe0!\x89\xd3\x97\xbd'
        str_1 = 'C-\t'
        doc_c_l_i_0 = module_0.DocCLI(str_1)
        tuple_0 = (bool_0, list_0, bytes_0, doc_c_l_i_0)
        str_2 = 'rF$>;ZBq\nTu3'
        doc_c_l_i_1 = module_0.DocCLI(str_2)
        var_0 = doc_c_l_i_1.namespace_from_plugin_filepath(str_0, tuple_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '2`GvXaZ"@ zo;u:`r;C'
        str_1 = 'Xjz7S80'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        dict_0 = {str_0: str_0}
        bool_0 = True
        set_0 = set()
        str_2 = 'r9*5o{6hAa5<t\x0bk}I1\r1'
        dict_1 = {str_2: bool_0, str_0: dict_0}
        tuple_0 = None
        tuple_1 = (dict_1, str_1)
        list_0 = [tuple_0]
        var_0 = doc_c_l_i_0.format_snippet(doc_c_l_i_0, str_1, list_0)
        var_1 = doc_c_l_i_0.add_fields(set_0, dict_1, tuple_1, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        int_0 = -2847
        doc_c_l_i_0 = module_0.DocCLI(int_0)
        bool_0 = True
        bytes_0 = b''
        float_0 = -1517.308
        dict_0 = {}
        float_1 = 1341.321
        tuple_0 = (float_0, bytes_0, dict_0, float_1)
        var_0 = doc_c_l_i_0.find_plugins(bool_0, bytes_0, tuple_0)
        var_1 = doc_c_l_i_0.display_plugin_list(plugin_not_found_0)
    except BaseException:
        pass