# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2

def test_case_0():
    try:
        str_0 = '$ref'
        str_1 = {str_0: str_0}
        field_0 = module_0.from_json_schema(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '#/definitions/test'
        field_0 = module_0.from_json_schema(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'not'
        str_1 = 'type'
        str_2 = 'sqrDng'
        str_3 = {str_1: str_2}
        str_4 = {str_0: str_3}
        var_0 = None
        field_0 = module_0.not_from_json_schema(str_4, var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 939
        dict_0 = {int_0: int_0, int_0: int_0}
        field_0 = module_0.from_json_schema(dict_0)
        schema_definitions_0 = None
        field_1 = module_0.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.all_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 5
        tuple_0 = (int_0,)
        dict_0 = {tuple_0: int_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        field_1 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '0x'
        var_0 = module_0.to_json_schema(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        dict_1 = None
        field_1 = module_0.from_json_schema(dict_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_10():
    try:
        field_0 = module_2.Field()
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'allOf'
        str_1 = 'string'
        str_2 = {str_0: str_1}
        str_3 = 'osp'
        str_4 = [str_2, str_0, str_3]
        str_5 = {str_0: str_4}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.all_of_from_json_schema(str_5, schema_definitions_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'type'
        str_1 = 'properties'
        str_2 = 'object'
        str_3 = 'additionalItems'
        str_4 = 'minItems'
        str_5 = '\r|"'
        str_6 = 'array'
        str_7 = {str_0: str_0}
        str_8 = {str_0: str_2}
        int_0 = 1
        int_1 = 100
        var_0 = {str_0: str_6, str_2: str_7, str_3: str_8, str_4: int_0, str_5: int_1}
        var_1 = {str_2: var_0}
        var_2 = {str_0: str_2, str_1: var_1}
        field_0 = module_0.from_json_schema(var_2)
        var_3 = field_0.properties[str_3]
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'type'
        str_1 = 'properties'
        str_2 = 'object'
        str_3 = 'items'
        str_4 = 'additionalItems'
        str_5 = 'minItems'
        str_6 = '\r|"'
        str_7 = 'array'
        str_8 = {str_0: str_0}
        str_9 = {str_0: str_2}
        int_0 = 1
        int_1 = 100
        var_0 = {str_0: str_7, str_3: str_8, str_4: str_9, str_5: int_0, str_6: int_1}
        var_1 = {str_2: var_0}
        var_2 = {str_0: str_2, str_1: var_1}
        field_0 = module_0.from_json_schema(var_2)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 2071.698389
        float_1 = module_2.Float(multiple_of=float_0)
        var_0 = module_0.to_json_schema(float_1)
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'if'
        str_1 = 'else'
        var_0 = {}
        var_1 = {}
        var_2 = {str_0: var_0, str_1: var_1}
        var_3 = {}
        field_0 = module_0.if_then_else_from_json_schema(var_2, var_3)
        var_4 = field_0.type_name
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '$ref'
        str_1 = 'definitions'
        str_2 = '#/definitions/foo'
        str_3 = 'foo'
        str_4 = 'type'
        str_5 = 'minLength'
        str_6 = 'maxLength'
        str_7 = 'string'
        int_0 = 1
        int_1 = 10
        var_0 = {str_4: str_7, str_5: int_0, str_6: int_1}
        var_1 = {str_3: var_0}
        var_2 = {str_0: str_2, str_1: var_1}
        field_0 = module_0.from_json_schema(var_2)
        var_3 = field_0.validators[int_0]
    except BaseException:
        pass