# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    str_0 = '?yiFK#J?!.\r`qje'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = lazy_list_0.__iter__()

def test_case_1():
    str_0 = '?yiFK#J?!.\r`@qje'
    lazy_list_0 = module_0.LazyList(str_0)

def test_case_2():
    str_0 = ';|Q.B;&2'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = list(lazy_list_0)

def test_case_3():
    str_0 = '?yiFK#J?!.\r`qje'
    int_0 = -3
    bytes_0 = b"\xc9'\x8f"
    map_list_0 = module_0.MapList(int_0, bytes_0)
    int_1 = map_list_0.__len__()
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = lazy_list_0.__iter__()

def test_case_4():
    var_0 = lambda acc, x: x + acc
    str_0 = 'c'
    str_1 = 'd'
    str_2 = [str_0, str_1, str_0, str_1]
    var_1 = module_0.scanl(var_0, str_2)
    var_2 = list(var_1)

def test_case_5():
    bool_0 = True
    list_0 = [bool_0]
    range_0 = module_0.Range(*list_0)
    int_0 = range_0.__len__()
    range_1 = module_0.Range(*list_0)
    int_1 = range_1.__len__()
    callable_0 = None
    sequence_0 = None
    map_list_0 = module_0.MapList(callable_0, sequence_0)

def test_case_6():
    var_0 = lambda x: x * x * x
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = 4
    int_4 = 5
    int_5 = [int_0, int_1, int_2, int_3, int_4]
    map_list_0 = module_0.MapList(var_0, int_5)
    var_1 = map_list_0[int_3]
    var_2 = map_list_0[int_1:int_3]

def test_case_7():
    int_0 = 5
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.take(int_0, var_0)
    var_1 = list(iterator_0)
    int_2 = 0
    var_2 = range(int_2)
    iterator_1 = module_0.take(int_0, var_2)
    var_3 = range(int_1)
    iterator_2 = module_0.take(int_2, var_3)
    var_4 = list(iterator_2)
    var_5 = range(int_2)
    iterator_3 = module_0.take(int_2, var_5)
    var_6 = list(iterator_3)

def test_case_8():
    int_0 = 5
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.take(int_0, var_0)
    var_1 = list(iterator_0)
    int_2 = 0
    var_2 = range(int_2)
    iterator_1 = module_0.take(int_0, var_2)
    var_3 = list(iterator_1)
    var_4 = range(int_1)
    iterator_2 = module_0.take(int_2, var_4)
    var_5 = list(iterator_2)
    var_6 = range(int_2)
    iterator_3 = module_0.take(int_2, var_6)

def test_case_9():
    int_0 = 0
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.drop(int_0, var_0)
    var_1 = list(iterator_0)
    var_2 = range(int_1)
    var_3 = list(var_2)
    int_2 = 3
    var_4 = range(int_1)
    iterator_1 = module_0.drop(int_2, var_4)
    var_5 = list(iterator_1)
    var_6 = range(int_2, int_1)
    var_7 = list(var_6)
    var_8 = range(int_1)
    iterator_2 = module_0.drop(int_1, var_8)
    var_9 = list(iterator_2)
    int_3 = 5
    var_10 = range(int_3)
    iterator_3 = module_0.drop(int_1, var_10)
    var_11 = list(iterator_3)
    var_12 = []
    iterator_4 = module_0.drop(int_1, var_12)
    var_13 = list(iterator_4)

def test_case_10():
    int_0 = 6
    var_0 = []
    iterator_0 = module_0.drop_until(int_0, var_0)
    var_1 = list(iterator_0)

def test_case_11():
    int_0 = 2
    int_1 = 4
    int_2 = [int_1, int_0, int_1, int_1, int_1]
    str_0 = ';|Q.B;&2'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = lazy_list_0.__iter__()
    iterator_0 = module_0.split_by(int_2, criterion=lazy_list_0)
    var_1 = list(lazy_list_0)
    var_2 = lazy_list_0.__len__()

def test_case_12():
    int_0 = 3
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.chunk(int_0, var_0)
    var_1 = list(iterator_0)
    int_2 = 9
    var_2 = range(int_2)
    iterator_1 = module_0.chunk(int_0, var_2)
    var_3 = list(iterator_1)
    int_3 = 8
    var_4 = range(int_3)
    iterator_2 = module_0.chunk(int_0, var_4)
    var_5 = list(iterator_2)
    int_4 = 7
    var_6 = range(int_4)
    iterator_3 = module_0.chunk(int_0, var_6)
    var_7 = list(iterator_3)
    int_5 = 6
    var_8 = range(int_5)
    iterator_4 = module_0.chunk(int_0, var_8)
    var_9 = list(iterator_4)
    int_6 = 5
    var_10 = range(int_6)
    iterator_5 = module_0.chunk(int_0, var_10)
    var_11 = list(iterator_5)

def test_case_13():
    int_0 = 100
    var_0 = range(int_0)
    var_1 = iter(var_0)
    lazy_list_0 = module_0.LazyList(var_1)
    var_2 = iter(lazy_list_0)
    var_3 = next(var_2)
    var_4 = next(var_2)
    var_5 = next(var_1)
    var_6 = list(var_2)
    int_1 = 3
    var_7 = range(int_1, int_0)
    var_8 = list(var_7)
    var_9 = list(lazy_list_0)
    var_10 = range(int_0)
    var_11 = list(var_10)
    var_12 = iter(lazy_list_0)
    var_13 = list(var_12)
    var_14 = list(var_0)
    var_15 = iter(var_0)

def test_case_14():
    int_0 = 100
    var_0 = range(int_0)
    var_1 = iter(var_0)
    lazy_list_0 = module_0.LazyList(var_1)
    var_2 = iter(lazy_list_0)
    var_3 = next(var_2)
    var_4 = next(var_2)
    var_5 = next(var_2)
    int_1 = 3
    var_6 = range(int_1, int_0)
    var_7 = list(var_6)
    var_8 = list(lazy_list_0)
    var_9 = range(int_0)
    var_10 = list(var_9)
    var_11 = iter(lazy_list_0)
    var_12 = list(var_11)
    var_13 = range(int_0)
    var_14 = list(var_13)
    var_15 = iter(var_11)

def test_case_15():
    int_0 = 10
    var_0 = range(int_0, int_0)
    iterator_0 = module_0.split_by(var_0, separator=int_0)
    var_1 = list(iterator_0)

def test_case_16():
    int_0 = 1
    int_1 = 10
    var_0 = range(int_0, int_1)
    int_2 = 4
    iterator_0 = module_0.split_by(var_0, separator=int_2)
    var_1 = list(iterator_0)

def test_case_17():
    int_0 = 3
    int_1 = 10
    var_0 = range(int_0, int_1)
    iterator_0 = module_0.split_by(var_0, separator=int_0)
    var_1 = list(iterator_0)