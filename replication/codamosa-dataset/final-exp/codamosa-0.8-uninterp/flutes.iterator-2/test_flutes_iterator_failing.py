# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 10
        var_0 = range(int_0)
        var_1 = iter(var_0)
        bytes_0 = b'\x0b'
        var_2 = module_0.scanr(bytes_0, bytes_0)
        var_3 = lambda x: x > var_0
        iterator_0 = module_0.drop_until(var_3, var_1)
        var_4 = list(iterator_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 929.688607530324
        lazy_list_0 = module_0.LazyList(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xc8\xc1\xb2\xc6\xa7v;\x18"\x81'
        set_0 = {bytes_0, bytes_0, bytes_0}
        float_0 = 0.0
        iterator_0 = module_0.split_by(set_0, separator=float_0)
        list_0 = [iterator_0]
        list_1 = [list_0]
        range_0 = module_0.Range(*list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        bool_0 = False
        map_list_0 = module_0.MapList(callable_0, bool_0)
        int_0 = 8192
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(map_list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'W?'
        str_0 = ']HP>'
        map_list_0 = module_0.MapList(bytes_0, str_0)
        lazy_list_0 = module_0.LazyList(map_list_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '|%;-.'
        lazy_list_0 = module_0.LazyList(str_0)
        dict_0 = {str_0: lazy_list_0, str_0: lazy_list_0, str_0: lazy_list_0, str_0: str_0}
        set_0 = {str_0, str_0}
        iterator_0 = module_0.split_by(set_0)
        map_list_0 = module_0.MapList(dict_0, iterator_0)
        iterator_1 = map_list_0.__iter__()
        lazy_list_1 = module_0.LazyList(iterator_1)
        int_0 = 1
        var_0 = lazy_list_1.__getitem__(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 10
        var_0 = range(int_0, int_0)
        iterator_0 = module_0.split_by(var_0, separator=int_0)
        var_1 = list(iterator_0)
        int_1 = None
        list_0 = [int_1, int_0, var_0, int_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        callable_0 = None
        bool_0 = False
        map_list_0 = module_0.MapList(callable_0, bool_0)
        int_0 = 8194
        list_0 = [int_0, int_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(map_list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        bytes_0 = b'\xad\xe1Z4\xab\xca\nM\x00\x13\x8b\x81\x98\x9b\x1f\xbe'
        list_0 = [bytes_0, bytes_0, bool_0]
        var_0 = module_0.scanr(bool_0, bytes_0, *list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 3
        var_0 = range(int_0, int_0)
        iterator_0 = module_0.split_by(var_0, separator=int_0)
        var_1 = list(iterator_0)
        str_0 = 'y#W-jR)U'
        lazy_list_0 = module_0.LazyList(str_0)
        sequence_0 = None
        map_list_0 = module_0.MapList(iterator_0, sequence_0)
        var_2 = map_list_0.__getitem__(map_list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '?yiFK#J?!.\r`qje'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__iter__()
        float_0 = -1398.523612
        var_1 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 199
        list_0 = [int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
        iterator_0 = range_0.__iter__()
        iterator_1 = None
        var_0 = range_0.__getitem__(iterator_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '?yiFK#J?!.\r`@qje'
        lazy_list_0 = module_0.LazyList(str_0)
        float_0 = 930.0
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -259
        iterator_0 = module_0.split_by(int_0, criterion=int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 2901
        list_0 = [int_0, int_0]
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__next__()
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        str_1 = ''
        dict_0 = {str_1: str_0, str_1: str_0}
        list_0 = [dict_0]
        iterator_0 = module_0.split_by(list_0)
        tuple_0 = (str_0, str_1, dict_0, iterator_0)
        lazy_list_0 = module_0.LazyList(tuple_0)
        dict_1 = {str_0: list_0, str_0: lazy_list_0, str_0: tuple_0}
        var_0 = module_0.scanr(lazy_list_0, dict_1)
        var_1 = lazy_list_0.__iter__()
        int_0 = None
        var_2 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        str_1 = 'oI~QP.{m!$FP*Ha"ZP~h'
        dict_0 = {str_1: str_0}
        list_0 = [dict_0]
        iterator_0 = module_0.split_by(list_0)
        tuple_0 = (str_0, str_1, dict_0, iterator_0)
        lazy_list_0 = module_0.LazyList(tuple_0)
        var_0 = module_0.scanr(str_0, lazy_list_0, *list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 5
        int_1 = 10
        iterator_0 = module_0.take(int_0, int_1)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -1
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 6
        var_0 = [int_0]
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -5
        int_1 = [int_0, int_0, int_0]
        iterator_0 = module_0.split_by(int_1, criterion=int_1)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 0
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = list(iterator_0)
        var_2 = range(int_1)
        var_3 = list(var_2)
        int_2 = 3
        var_4 = range(int_1)
        iterator_1 = module_0.drop(int_2, var_4)
        var_5 = list(iterator_1)
        var_6 = range(int_2, int_1)
        var_7 = list(var_6)
        var_8 = range(int_1)
        var_9 = None
        iterator_2 = module_0.drop(int_0, var_9)
        var_10 = list(iterator_2)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 1
        str_0 = ':(C\rK<'
        iterable_0 = None
        iterator_0 = module_0.take(int_0, iterable_0)
        iterator_1 = module_0.drop(int_0, str_0)
        int_1 = 4
        int_2 = -363
        list_0 = [int_2, int_0]
        range_0 = module_0.Range(*list_0)
        int_3 = range_0.__next__()
        int_4 = -280
        int_5 = [int_0, int_1, int_2, int_0, int_4]
        str_1 = ';|Q.B;&2'
        lazy_list_0 = module_0.LazyList(str_1)
        var_0 = lazy_list_0.__iter__()
        iterator_2 = module_0.split_by(int_5, criterion=int_2)
        var_1 = list(iterator_2)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = -5929
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 0
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.chunk(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = 4
        int_4 = [int_0, int_1, int_2, int_3]
        lazy_list_0 = module_0.LazyList(int_4)
        var_0 = list(lazy_list_0)
        var_1 = lazy_list_0[int_0:int_2]
        var_2 = len(lazy_list_0)
        var_3 = [var_2, int_1, int_2, int_3]
        lazy_list_1 = module_0.LazyList(var_3)
        int_5 = 4
        var_4 = lazy_list_1[int_5]
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 100
        dict_0 = {int_0: int_0}
        iterable_0 = None
        iterator_0 = module_0.chunk(int_0, iterable_0)
        iterator_1 = module_0.drop_until(dict_0, iterator_0)
        var_0 = iter(iterator_1)
        lazy_list_0 = module_0.LazyList(var_0)
        str_0 = ''
        set_0 = {str_0, lazy_list_0}
        bool_0 = True
        tuple_0 = (set_0, bool_0)
        bool_1 = False
        iterator_2 = module_0.split_by(tuple_0, bool_1)
        map_list_0 = module_0.MapList(str_0, iterator_2)
        var_1 = iter(lazy_list_0)
        var_2 = next(var_1)
    except BaseException:
        pass