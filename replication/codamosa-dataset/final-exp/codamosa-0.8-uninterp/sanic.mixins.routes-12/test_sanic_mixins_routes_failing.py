# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0

def test_case_0():
    try:
        route_mixin_0 = module_0.RouteMixin()
        bytes_0 = b')P\x9f'
        dict_0 = None
        var_0 = route_mixin_0.static(bytes_0, bytes_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        route_mixin_0 = module_0.RouteMixin()
        bool_0 = True
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x07m\x94fC(\xf5\xe8\x10\x04\x88'
        str_0 = "tB^'XG Y0Z(t0vOH5A["
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_websocket_route(bytes_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '".'
        route_mixin_0 = module_0.RouteMixin()
        bool_0 = True
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '".'
        route_mixin_0 = module_0.RouteMixin()
        bool_0 = False
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ')\x0cR[p+0.'
        str_1 = 'd\\GZ%2}'
        str_2 = '$;(^CGD(q1!'
        dict_0 = {str_1: str_0, str_2: str_1, str_2: str_1}
        str_3 = 'YaZaMaF<uR@m'
        dict_1 = {str_1: str_1, str_2: str_1, str_3: dict_0}
        route_mixin_0 = module_0.RouteMixin(**dict_1)
        list_0 = [str_3, dict_0]
        tuple_0 = (str_0, dict_0, route_mixin_0, list_0)
        optional_0 = None
        str_4 = '&%]n='
        bool_0 = False
        bool_1 = False
        var_0 = route_mixin_0.route(str_4, bool_0, bool_1)
        list_1 = [str_4, str_4]
        route_mixin_1 = module_0.RouteMixin(*list_1)
        var_1 = route_mixin_1.add_route(tuple_0, str_1, optional_0, str_3)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '< cjgEb9#;ZD5]WVr'
        iterable_0 = None
        int_0 = -574
        bool_0 = True
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, iterable_0, str_0, int_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '\r<AG\n&pzC *b'
        str_1 = 'KQH\n[2+rc5\x0bL'
        bytes_0 = b'\n\xc6\xe6\xe9%>fM\x82\x1b'
        bool_0 = True
        var_0 = route_mixin_0.options(str_0, str_0, bool_0)
        var_1 = route_mixin_0.add_route(str_0, str_1, str_1, bytes_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '"'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.patch(str_0)
        bool_0 = False
        var_1 = route_mixin_0.add_route(str_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Method route of class RouteMixin'
        var_0 = print(str_0)
        str_1 = 'Setting variables on '
        str_2 = ''
        list_0 = None
        route_mixin_0 = module_0.RouteMixin()
        var_1 = route_mixin_0.add_websocket_route(str_1, str_2, list_0, str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '\r<AG\n&pzCr*b'
        bytes_0 = b'\n\xc6\xe6\xe9%>fM\x82\x1b'
        bool_0 = False
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0, bytes_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '"'
        list_0 = []
        dict_0 = {}
        route_mixin_0 = module_0.RouteMixin(*list_0, **dict_0)
        route_mixin_1 = module_0.RouteMixin()
        var_0 = route_mixin_1.post(str_0, str_0, route_mixin_0, str_0)
        bool_0 = False
        str_1 = '1@ '
        var_1 = route_mixin_1.options(str_1, str_1, bool_0)
        route_mixin_2 = module_0.RouteMixin(*list_0)
        str_2 = ':\tmYF3-;@]~6l>hcw4'
        bool_1 = True
        var_2 = route_mixin_0.options(str_2, bool_0, bool_1)
        route_mixin_3 = module_0.RouteMixin()
        str_3 = 'Range Header Not Found'
        var_3 = route_mixin_1.add_route(route_mixin_2, str_3)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = '+ m%`:Vm1NV"ZB5X_H'
        dict_0 = {str_0: str_0, str_1: str_1}
        list_0 = [dict_0, dict_0]
        float_0 = -5194.0
        route_mixin_0 = module_0.RouteMixin()
        str_2 = 'NP02,a'
        var_0 = route_mixin_0.static(list_0, str_0, float_0, route_mixin_0, route_mixin_0, str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.get(str_0, bool_0, str_0)
        str_1 = '@AgsqmbFazKH~_cUa'
        bool_1 = True
        list_0 = [str_0, route_mixin_0]
        dict_0 = {str_1: str_1, str_0: route_mixin_0}
        str_2 = '\n        Trigger "after_server_stop" events\n        '
        var_1 = route_mixin_0.get(str_2, str_0, bool_0)
        route_mixin_1 = module_0.RouteMixin(*list_0, **dict_0)
        str_3 = 'X;'
        route_mixin_2 = module_0.RouteMixin()
        var_2 = route_mixin_2.delete(str_3, str_3, bool_1)
        bool_2 = False
        str_4 = '< cjgEb9#;ZD5]WVr'
        str_5 = '4(I>yFHaR$xrgmPXhl%'
        int_0 = 336
        var_3 = route_mixin_1.post(str_5, bool_1, bool_2, int_0)
        dict_1 = {str_4: str_1, str_4: str_1, str_1: str_1, str_1: str_4}
        route_mixin_3 = module_0.RouteMixin(**dict_1)
        var_4 = route_mixin_3.route(str_1, str_1, bool_1, list_0, bool_2, bool_2)
        var_5 = route_mixin_3.patch(str_0)
        str_6 = ' '
        var_6 = route_mixin_0.options(str_6)
        str_7 = '1%Na3or/83'
        var_7 = route_mixin_2.post(str_7, str_4, bool_2)
        bool_3 = True
        str_8 = '.app?'
        var_8 = route_mixin_0.add_route(str_8, str_4, str_0, bool_3, str_1)
    except BaseException:
        pass