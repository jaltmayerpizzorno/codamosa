# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        int_0 = 2440
        bytes_0 = b'%\xe42\xe7\xac\xfa\xc5|\x07y\x99\xdfP'
        validation_0 = module_0.Validation(int_0, bytes_0)
        var_0 = validation_0.__str__()
        bytes_1 = b'v\x10\xc6S\xa6\xdd'
        set_0 = {bytes_1, bytes_1, bytes_1, bytes_1}
        var_1 = validation_0.is_success()
        validation_1 = module_0.Validation(bytes_1, set_0)
        dict_0 = None
        var_2 = validation_1.map(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = None
        float_0 = 1067.48
        int_0 = -1444
        validation_0 = module_0.Validation(float_0, int_0)
        var_0 = validation_0.bind(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x16\xd2L\xcf#\x86\xefJ\x11B=?\x00\xed\xed='
        str_0 = "xa7,7'"
        set_0 = {str_0, str_0, str_0, str_0}
        validation_0 = module_0.Validation(str_0, set_0)
        var_0 = validation_0.ap(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 2440
        float_0 = 668.6
        str_0 = "H'`PL"
        set_0 = {int_0, float_0, float_0}
        bytes_0 = b'2\x8b\xe4\x1cZ\x9e~W\xe4>\xf3\xf4\xa0\xfd)7@'
        validation_0 = module_0.Validation(set_0, bytes_0)
        bytes_1 = b't\x9e\x9f\xc3\xc6"\x91\xe0F~\x0b\x14\x84Q\xb7\x116s'
        validation_1 = module_0.Validation(int_0, bytes_1)
        var_0 = validation_1.__str__()
        bytes_2 = b'v\x10\xc6S\xa6\xdd'
        set_1 = {bytes_2, bytes_2, bytes_2, bytes_2}
        validation_2 = module_0.Validation(bytes_2, set_1)
        var_1 = validation_2.to_either()
        var_2 = validation_2.map(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -427
        bool_0 = False
        tuple_0 = ()
        bytes_0 = b'\xc0c\xf2\x15\x11\xb6\xb0Z\xab\x97#5\x1dZ\xfb\x1d\x97'
        bool_1 = True
        validation_0 = module_0.Validation(bytes_0, bool_1)
        validation_1 = module_0.Validation(tuple_0, tuple_0)
        var_0 = validation_1.__eq__(bool_0)
        var_1 = validation_1.to_box()
        validation_2 = module_0.Validation(int_0, bytes_0)
        var_2 = validation_2.is_success()
        var_3 = validation_1.to_either()
        var_4 = validation_0.to_box()
        str_0 = 'EcfbJcF!9)'
        var_5 = validation_1.map(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '^1p\r~Dw?Y'
        set_0 = set()
        validation_0 = module_0.Validation(str_0, set_0)
        var_0 = validation_0.to_maybe()
        str_1 = '@k6Str3u-\x0cb!'
        float_0 = -697.01
        validation_1 = module_0.Validation(str_1, float_0)
        str_2 = '$.g'
        var_1 = validation_1.map(str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1134.69
        validation_0 = module_0.Validation(float_0, float_0)
        var_0 = validation_0.to_maybe()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ']&QTv "m'
        float_0 = -3038.0
        bytes_0 = b'=\xb2%\xa9'
        set_0 = {float_0, float_0, bytes_0, float_0}
        validation_0 = module_0.Validation(str_0, float_0)
        var_0 = validation_0.__eq__(set_0)
        dict_0 = {bytes_0: str_0, float_0: bytes_0}
        str_1 = '9 ks8bM\\xCn `-PCF\ta='
        validation_1 = module_0.Validation(dict_0, str_1)
        var_1 = validation_1.to_box()
        var_2 = validation_1.is_fail()
        var_3 = validation_0.to_lazy()
        var_4 = validation_0.is_fail()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 515
        bytes_0 = b'5r\x11\xe5\xc9\xf6\xfd\xd1\x9c\x005/'
        float_0 = -2307.0
        validation_0 = module_0.Validation(bytes_0, float_0)
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        validation_1 = module_0.Validation(int_0, dict_0)
        var_0 = validation_1.to_try()
        str_0 = '-V+\r7^6'
        var_1 = validation_1.is_success()
        var_2 = validation_1.bind(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -26.39
        str_0 = 'p`,xf5ed8t.A'
        dict_0 = {str_0: str_0}
        validation_0 = module_0.Validation(str_0, dict_0)
        var_0 = validation_0.to_box()
        list_0 = [float_0, float_0]
        validation_1 = module_0.Validation(validation_0, list_0)
        var_1 = validation_0.to_maybe()
        int_0 = None
        var_2 = validation_0.bind(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -427
        bytes_0 = b'I\xb8'
        bool_0 = False
        float_0 = -3412.4598
        complex_0 = None
        str_0 = 'Z\x0b6^*R>~oT{<S5'
        tuple_0 = (bool_0, float_0, complex_0, str_0)
        dict_0 = {int_0: int_0, complex_0: bool_0, complex_0: bytes_0}
        validation_0 = module_0.Validation(tuple_0, dict_0)
        var_0 = validation_0.__eq__(int_0)
        tuple_1 = ()
        list_0 = [tuple_1, bytes_0, bytes_0]
        bytes_1 = b'\xc0c\xf2\x15\x11\xb6\xb0Z\xab\x97#5\x1dZ\xfb\x1d\x97'
        bool_1 = True
        validation_1 = module_0.Validation(bytes_1, bool_1)
        var_1 = validation_1.__eq__(list_0)
        validation_2 = module_0.Validation(tuple_1, tuple_1)
        bool_2 = True
        var_2 = validation_2.__eq__(bool_2)
        var_3 = validation_2.to_box()
        var_4 = validation_1.__eq__(validation_2)
        validation_3 = module_0.Validation(int_0, bytes_0)
        var_5 = validation_3.is_success()
        var_6 = validation_2.to_either()
        str_1 = 'EcfbJcF!9)'
        var_7 = validation_2.map(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -288.75154
        dict_0 = {}
        validation_0 = module_0.Validation(float_0, dict_0)
        var_0 = validation_0.__str__()
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -427
        bytes_0 = b'I\xb8'
        bool_0 = False
        float_0 = -3412.4598
        complex_0 = None
        str_0 = ';1@g RJ:'
        tuple_0 = (bool_0, float_0, complex_0, str_0)
        dict_0 = {int_0: int_0, complex_0: bool_0, complex_0: bytes_0}
        validation_0 = module_0.Validation(tuple_0, dict_0)
        var_0 = validation_0.__eq__(int_0)
        bytes_1 = b'\xc0c\xf2\x15\x11\xb6Y\xb0Z\xab\x97#5\x1dZ\xfb\x1d\x97'
        validation_1 = module_0.Validation(int_0, validation_0)
        var_1 = validation_1.__eq__(float_0)
        set_0 = {bytes_1}
        validation_2 = module_0.Validation(set_0, set_0)
        int_1 = None
        dict_1 = None
        bool_1 = True
        validation_3 = module_0.Validation(dict_1, bool_1)
        var_2 = validation_2.__eq__(validation_2)
        var_3 = validation_3.to_box()
        validation_4 = module_0.Validation(str_0, int_1)
        var_4 = validation_2.is_success()
        var_5 = validation_4.to_either()
    except BaseException:
        pass