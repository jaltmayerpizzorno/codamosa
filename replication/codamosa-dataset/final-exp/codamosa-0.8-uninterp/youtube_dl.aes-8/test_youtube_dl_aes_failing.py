# Automatically generated by Pynguin.
import youtube_dl.aes as module_0
import youtube_dl.utils as module_1

def test_case_0():
    try:
        bytes_0 = b'\xfd\x1c\xd0\xb20\x00\x0cG\xf5\xe3M\xc7\x92\xe3\xe1\xc0\x89\xb4e\x91'
        list_0 = [bytes_0, bytes_0, bytes_0]
        int_0 = 1416493800
        var_0 = module_0.aes_ctr_decrypt(bytes_0, list_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'0123456789ABCDEF'
        var_0 = module_1.bytes_to_intlist(bytes_0)
        var_1 = module_0.aes_cbc_encrypt(bytes_0, var_0, var_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '"& Nzv,:\r]bN'
        var_0 = module_0.key_expansion(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 7449.096
        var_0 = module_0.key_expansion(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 794.721933
        str_0 = ',2*qY'
        var_0 = module_0.aes_decrypt(float_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        var_0 = module_0.rotate(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        var_0 = module_0.rijndael_mul(dict_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ')\x0cN8r'
        var_0 = module_0.mix_columns_inv(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -852.59
        var_0 = module_0.shift_rows(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xedcM\xe3\xad\x01\xe7'
        var_0 = module_0.shift_rows_inv(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 5290.027
        tuple_0 = ()
        var_0 = module_0.inc(tuple_0)
        str_0 = '\rF<'
        var_1 = module_0.xor(float_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '_^Ax\nlaaf?{PF\x0bJmUnO{'
        var_0 = module_0.shift_rows_inv(str_0)
        bytes_0 = b'\x82\xed.\xd6\xcc\xa9\xdadm\xd9@B\xa8\t\xd4\xb4\xff`\x94'
        bool_0 = True
        var_1 = module_0.rijndael_mul(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'B9E2B70D6F5A5D5D6A5B6A5A6C5B6A5A6'
        var_0 = module_1.bytes_to_intlist(str_0)
        str_1 = '06F94C8F87A63BF237E0ECB2C8DF8C9C'
        var_1 = module_0.aes_cbc_decrypt(var_0, var_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = None
        bool_0 = False
        var_0 = module_0.rijndael_mul(set_0, bool_0)
        int_0 = 362
        list_0 = [int_0, int_0]
        list_1 = [list_0, list_0, int_0]
        bytes_0 = b'G.\xf9\x17\xdb\xdb\x00[T\xddk\xf9'
        dict_0 = None
        var_1 = module_0.aes_cbc_encrypt(bytes_0, list_1, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x00'
        int_0 = 16
        var_0 = bytes_0 * int_0
        var_1 = module_1.bytes_to_intlist(var_0)
        var_2 = module_0.key_expansion(var_1)
        int_1 = 176
        var_3 = bytes_0 * int_1
        var_4 = module_1.bytes_to_intlist(var_3)
        int_2 = 24
        var_5 = bytes_0 * int_2
        var_6 = module_1.bytes_to_intlist(var_5)
        var_7 = module_0.key_expansion(var_6)
        var_8 = bytes_0 * int_1
        var_9 = module_1.bytes_to_intlist(var_8)
        int_3 = 32
        var_10 = bytes_0 * int_3
        var_11 = module_0.key_expansion(var_5)
    except BaseException:
        pass