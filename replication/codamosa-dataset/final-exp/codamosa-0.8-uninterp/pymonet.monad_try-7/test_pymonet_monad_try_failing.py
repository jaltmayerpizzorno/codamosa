# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        float_0 = 3668.1
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        str_0 = '^te?e6HDH+u'
        bytes_0 = b'\xc3\x8b\x9av\x0b\xf3\x1d'
        bool_0 = True
        try_0 = module_0.Try(bytes_0, bool_0)
        bool_1 = try_0.__eq__(str_0)
        var_0 = try_0.on_fail(dict_0)
        int_0 = 1523
        var_1 = try_0.on_fail(int_0)
        var_2 = try_0.map(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'Ra\x08\\\xe6\x0c\xd4\x0f{\xc3\x94\x84'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        bool_0 = True
        set_0 = None
        set_1 = {set_0, set_0}
        bytes_1 = b'5\xa9\xc8\xc9wi\xdb\x11\x89P'
        dict_1 = {bytes_1: set_0}
        tuple_0 = (bool_0, set_1, dict_1)
        tuple_1 = (bytes_0, bytes_0, dict_0, tuple_0)
        bool_1 = False
        try_0 = module_0.Try(tuple_1, bool_1)
        str_0 = try_0.__str__()
        tuple_2 = None
        bytes_2 = b'\xa6\x87\xbcL\x92\xad\xa3\xf8\x02'
        bool_2 = True
        try_1 = module_0.Try(bytes_2, bool_2)
        var_0 = try_1.bind(tuple_2)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xcb\xc7\xf0\x80\x1e\x08J*<\x1f\x07\x1b\x1f\xde3\xf5\x87\xb7\x1e'
        bool_0 = False
        try_0 = module_0.Try(bytes_0, bool_0)
        str_0 = try_0.__str__()
        set_0 = set()
        int_0 = False
        bool_1 = True
        try_1 = module_0.Try(int_0, bool_1)
        var_0 = try_1.on_success(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = None
        str_0 = '!T'
        list_0 = [bool_0]
        bool_1 = True
        bytes_0 = b'\x1d\xa7\xfbP\x80Q\xdc\xb8\x04$'
        try_0 = module_0.Try(bytes_0, bool_0)
        try_1 = module_0.Try(str_0, bool_1)
        var_0 = try_1.get()
        str_1 = "cnj)+.~y2mj(q'bd5ZnV"
        bool_2 = True
        try_2 = module_0.Try(str_1, bool_2)
        float_0 = -3053.0
        bool_3 = try_2.__eq__(float_0)
        var_1 = try_1.get()
        var_2 = try_2.on_fail(try_2)
        var_3 = try_2.on_fail(list_0)
        var_4 = try_2.on_success(bool_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n        Take function and applied this function with monad value and returns new monad with mapped value.\n\n        :params mapper: function to apply on monad value\n        :type mapper: Function(A) -> B\n        :returns: for successfully new Try with mapped value, othercase copy of self\n        :rtype: Try[B]\n        '
        dict_0 = {str_0: str_0}
        bool_0 = False
        try_0 = module_0.Try(dict_0, bool_0)
        float_0 = 2270.88527
        bool_1 = False
        try_1 = module_0.Try(float_0, bool_1)
        var_0 = try_1.on_fail(try_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -697
        bytes_0 = b'+G\xab\n\xa0/\x13\xbd\xc7\xc4\xfd\xb1\xdb\xbf\xc9'
        list_0 = [bytes_0, bytes_0]
        bool_0 = True
        bool_1 = True
        tuple_0 = (bool_0,)
        str_0 = '\\'
        str_1 = '7%'
        try_0 = module_0.Try(str_1, bool_1)
        bool_2 = False
        try_1 = module_0.Try(str_0, bool_2)
        try_2 = module_0.Try(try_1, bool_2)
        var_0 = try_2.filter(tuple_0)
        str_2 = 'zS;A3lrdl_K)Q"'
        bool_3 = False
        try_3 = module_0.Try(str_2, bool_3)
        var_1 = try_3.map(list_0)
        bool_4 = True
        try_4 = module_0.Try(bytes_0, bool_4)
        var_2 = try_4.get_or_else(int_0)
        list_1 = []
        bool_5 = try_4.__eq__(list_1)
        try_5 = module_0.Try(try_3, bool_2)
        bool_6 = True
        var_3 = try_0.on_fail(bool_6)
        bytes_1 = b'\xe9\x93\xa0\\Z'
        var_4 = try_4.filter(bytes_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        var_0 = try_0.filter(bool_0)
        bool_1 = True
        try_1 = module_0.Try(bool_0, bool_1)
        var_1 = try_1.filter(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        bool_1 = False
        try_0 = module_0.Try(bool_0, bool_1)
        str_0 = try_0.__str__()
        int_0 = -697
        bytes_0 = b'+G\xab\n\xa0/\x13\xbd\xc7\xc4\xfd\xb1\xdb\xbf\xc9'
        list_0 = [bytes_0, bytes_0]
        bool_2 = True
        bytes_1 = b'+\xe7#\xa3E'
        dict_0 = {int_0: bytes_1, bool_2: bytes_0}
        bool_3 = try_0.__eq__(try_0)
        bool_4 = True
        try_1 = module_0.Try(str_0, bool_4)
        bool_5 = try_1.__eq__(dict_0)
        tuple_0 = (bool_2,)
        str_1 = '\\'
        str_2 = '7%'
        try_2 = module_0.Try(str_2, bool_4)
        bool_6 = False
        try_3 = module_0.Try(str_1, bool_6)
        try_4 = module_0.Try(try_3, bool_6)
        var_0 = try_4.filter(tuple_0)
        str_3 = 'zS;A3lrdl_K)Q"'
        bool_7 = False
        try_5 = module_0.Try(str_3, bool_7)
        var_1 = try_5.map(list_0)
        bool_8 = True
        try_6 = module_0.Try(bytes_0, bool_8)
        var_2 = try_6.get_or_else(int_0)
        list_1 = []
        bool_9 = try_6.__eq__(list_1)
        try_7 = module_0.Try(try_5, bool_6)
        bool_10 = True
        var_3 = try_2.on_fail(bool_10)
        var_4 = try_6.on_fail(tuple_0)
        str_4 = 'TE#z&%~q]'
        var_5 = try_6.on_success(str_4)
    except BaseException:
        pass