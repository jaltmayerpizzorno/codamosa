# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_2():
    float_0 = 2328.6604
    bytes_0 = b''
    bool_0 = False
    try_0 = module_0.Try(bytes_0, bool_0)
    bool_1 = try_0.__eq__(float_0)

def test_case_3():
    int_0 = -237
    bool_0 = False
    try_0 = module_0.Try(int_0, bool_0)
    str_0 = try_0.__str__()

def test_case_4():
    str_0 = 'j'
    int_0 = -1642
    bool_0 = False
    try_0 = module_0.Try(int_0, bool_0)
    var_0 = try_0.map(str_0)

def test_case_5():
    str_0 = '\n        :returns: True\n        :rtype: Boolean\n        '
    bytes_0 = b'\xb2!\x15\x11\x04\xbb\xd9)W'
    bool_0 = False
    try_0 = module_0.Try(bytes_0, bool_0)
    var_0 = try_0.bind(str_0)

def test_case_6():
    bool_0 = False
    str_0 = ''
    bool_1 = False
    try_0 = module_0.Try(str_0, bool_1)
    var_0 = try_0.on_success(bool_0)
    list_0 = []
    bool_2 = False
    try_1 = module_0.Try(list_0, bool_2)
    str_1 = try_1.__str__()

def test_case_7():
    dict_0 = {}
    bool_0 = False
    try_0 = module_0.Try(dict_0, bool_0)
    var_0 = try_0.filter(bool_0)

def test_case_8():
    bytes_0 = b'9\xfa\xc9\x03\xbfx\x07\xa2\xb9\xdf\x08*{\xe3my\xdaf'
    bool_0 = False
    try_0 = module_0.Try(bytes_0, bool_0)
    var_0 = try_0.get()

def test_case_9():
    bytes_0 = b'\x81EJ\x82\x99\xf0\x84'
    bool_0 = False
    bool_1 = False
    try_0 = module_0.Try(bool_0, bool_1)
    var_0 = try_0.get_or_else(bytes_0)

def test_case_10():
    int_0 = 2118
    bytes_0 = b'\xc5\xe7S\xfc}2A\x8as\xc6\xc8s?}s\x9d'
    bool_0 = False
    try_0 = module_0.Try(bytes_0, bool_0)
    bool_1 = True
    try_1 = module_0.Try(try_0, bool_1)
    try_2 = module_0.Try(try_1, bool_0)
    var_0 = try_2.filter(int_0)
    str_0 = 'Max[value={}]'
    str_1 = "H#*s4.sXh{KgXQmHF'Ch"
    bool_2 = True
    try_3 = module_0.Try(str_1, bool_2)
    var_1 = try_3.on_fail(str_0)
    bytes_1 = b'\xce*\x9d\x90\xb6p\x83\xc7\xc2\xb9L\xfb\xec|\xd0'
    str_2 = 'l6$I\x0bkz'
    tuple_0 = (str_2,)
    bytes_2 = b'\x97\xe3L\x98'
    int_1 = 2769
    float_0 = 3153.778494
    bool_3 = False
    try_4 = module_0.Try(float_0, bool_3)
    bool_4 = try_4.__eq__(int_1)
    bool_5 = False
    try_5 = module_0.Try(bytes_2, bool_5)
    var_2 = try_5.get_or_else(tuple_0)
    set_0 = {bytes_1, bytes_1, bytes_1}
    try_6 = module_0.Try(set_0, bool_1)
    bool_6 = try_6.__eq__(try_0)