# Automatically generated by Pynguin.
import sanic.utils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = '  '
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "T|h'xWp?$"
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\'"mJR\\(x8^[qcM'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'NJF\xa7\xa3!\xa5'
        var_0 = module_0.load_module_from_file_location(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "\n        Register the listener for a given event.\n\n        :param listener: callable i.e. setup_db(app, loop)\n        :param event: when to register listener i.e. 'before_server_start'\n        :return: listener\n        "
        str_1 = 'J\x0b#:wVG-a'
        list_0 = [str_1]
        dict_0 = {}
        var_0 = module_0.load_module_from_file_location(str_0, str_1, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        path_0 = module_1.Path()
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '/tmp/test_sanic_config.py'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'F'
        bool_0 = module_0.str_to_bool(str_0)
        bytes_0 = None
        var_0 = module_0.load_module_from_file_location(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '${test_env_var}/test.py'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'some_module/${HOME}/example.py'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass