# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        str_0 = 'z\\s\n^;hnp'
        module_args_parser_0 = module_0.ModuleArgsParser(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'OZZM*C9t-_ic\t'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        bool_0 = False
        var_0 = module_args_parser_0.parse(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'h'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        bool_0 = True
        var_0 = module_args_parser_0.parse(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'action'
        str_1 = {str_0: str_0}
        var_0 = []
        module_args_parser_0 = module_0.ModuleArgsParser(str_1, var_0)
        str_2 = 'args'
        str_3 = 'Ga=2'
        str_4 = {str_0: str_3, str_2: str_3}
        var_1 = []
        module_args_parser_1 = module_0.ModuleArgsParser(str_4, var_1)
        var_2 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'action'
        str_1 = 'ho '
        str_2 = {str_1: str_1, str_1: str_0, str_0: str_1}
        var_0 = []
        module_args_parser_0 = module_0.ModuleArgsParser(str_2, var_0)
        var_1 = module_args_parser_0.parse(module_args_parser_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'copy'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'copy'
        str_1 = 'local_action'
        str_2 = {str_0: str_0, str_1: str_0}
        var_0 = dict(action=str_2)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = dict()
        str_0 = 'local_action'
        str_1 = 'copy src=a dest=b'
        str_2 = {str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_1 = module_args_parser_0.parse()
        str_3 = 'shell'
        bool_0 = True
        var_2 = dict(_raw_params=str_3, _uses_shell=bool_0)
        var_3 = dict(action=module_args_parser_0)
        module_args_parser_1 = module_0.ModuleArgsParser(var_3)
        var_4 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'copy'
        var_0 = dict()
        str_1 = 'local_action'
        str_2 = {str_0: var_0, str_1: var_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_1 = module_args_parser_0.parse()
        var_2 = dict(action=str_2)
        module_args_parser_1 = module_0.ModuleArgsParser(var_2)
        var_3 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'args'
        str_1 = 'action'
        str_2 = 'delegate_to'
        module_args_parser_0 = module_0.ModuleArgsParser()
        str_3 = 'some test value'
        str_4 = {str_0: str_3}
        str_5 = 'test module'
        str_6 = {str_0: str_4, str_1: str_5, str_2: str_3}
        module_args_parser_1 = module_0.ModuleArgsParser(str_6)
        var_0 = module_args_parser_1.parse()
    except BaseException:
        pass