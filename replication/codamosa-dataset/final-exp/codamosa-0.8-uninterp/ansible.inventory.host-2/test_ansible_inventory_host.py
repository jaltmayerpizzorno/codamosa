# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.utils.vars as module_1
import ansible.inventory.group as module_2

def test_case_0():
    pass

def test_case_1():
    host_0 = module_0.Host()
    var_0 = host_0.__getstate__()

def test_case_2():
    int_0 = 82
    host_0 = module_0.Host()
    var_0 = host_0.__ne__(int_0)
    bytes_0 = b'\xe0\x9a7\xbd\x05\xd5|\xe8\x8c\xf6\x90F\x1d\x1e\x9c\x01}\xe1\x7f4'
    host_1 = module_0.Host(bytes_0)
    var_1 = host_1.get_groups()

def test_case_3():
    bytes_0 = b'\xa1\x89\xb5@|PR\x14}\xec\xbe\xac\xae\xb3\\PT\xfb\x80s'
    host_0 = module_0.Host(bytes_0)
    var_0 = host_0.__hash__()
    bytes_1 = b'\xab\xa6p\x8f\xd9\x87b'
    bool_0 = True
    host_1 = module_0.Host(bytes_1, bool_0)
    var_1 = host_1.populate_ancestors()

def test_case_4():
    host_0 = module_0.Host()
    var_0 = host_0.__str__()

def test_case_5():
    host_0 = module_0.Host()
    var_0 = host_0.__repr__()

def test_case_6():
    str_0 = 'inventory_hostname'
    int_0 = 1030
    str_1 = '127.0.0.1'
    var_0 = module_1.get_unique_id()
    var_1 = dict()
    var_2 = list()
    var_3 = dict(name=str_0, port=int_0, address=str_1, uuid=var_0, vars=var_1, groups=var_2)
    host_0 = module_0.Host()
    var_4 = host_0.deserialize(var_3)
    var_5 = list()
    str_2 = 'ansible_port'
    var_6 = int(int_0)
    var_7 = host_0.set_variable(str_2, var_6)

def test_case_7():
    host_0 = module_0.Host()

def test_case_8():
    str_0 = 'localhost'
    host_0 = module_0.Host(str_0)
    var_0 = host_0.get_magic_vars()
    str_1 = 'g'
    group_0 = module_2.Group(str_1)
    var_1 = host_0.add_group(group_0)
    var_2 = host_0.get_magic_vars()

def test_case_9():
    host_0 = module_0.Host()
    var_0 = host_0.get_name()
    bytes_0 = b'\x0c\xbc<DD\xa7bc\x81A\xa9:\xb4\xf2Y\x1c'
    var_1 = host_0.remove_group(bytes_0)
    var_2 = host_0.__getstate__()

def test_case_10():
    float_0 = -2526.3996
    int_0 = 75
    int_1 = 1896
    host_0 = module_0.Host(int_1)
    var_0 = host_0.set_variable(float_0, int_0)

def test_case_11():
    str_0 = "\n- name: Wait 600 seconds for target connection to become reachable/usable\n  wait_for_connection:\n\n- name: Wait 300 seconds, but only start checking after 60 seconds\n  wait_for_connection:\n    delay: 60\n    timeout: 300\n\n# Wake desktops, wait for them to become ready and continue playbook\n- hosts: all\n  gather_facts: no\n  tasks:\n  - name: Send magic Wake-On-Lan packet to turn on individual systems\n    wakeonlan:\n      mac: '{{ mac }}'\n      broadcast: 192.168.0.255\n    delegate_to: localhost\n\n  - name: Wait for system to become reachable\n    wait_for_connection:\n\n  - name: Gather facts for first time\n    setup:\n\n# Build a new VM, wait for it to become ready and continue playbook\n- hosts: all\n  gather_facts: no\n  tasks:\n  - name: Clone new VM, if missing\n    vmware_guest:\n      hostname: '{{ vcenter_ipaddress }}'\n      name: '{{ inventory_hostname_short }}'\n      template: Windows 2012R2\n      customization:\n        hostname: '{{ vm_shortname }}'\n        runonce:\n        - powershell.exe -ExecutionPolicy Unrestricted -File C:\\Windows\\Temp\\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP\n    delegate_to: localhost\n\n  - name: Wait for system to become reachable over WinRM\n    wait_for_connection:\n      timeout: 900\n\n  - name: Gather facts for first time\n    setup:\n"
    host_0 = module_0.Host(str_0)
    var_0 = host_0.__str__()
    var_1 = host_0.get_vars()
    var_2 = host_0.get_name()

def test_case_12():
    bytes_0 = b'\nn\x89\xfd\xe5\xb92\xa4\x97\x16\xba\xca\xc5'
    host_0 = module_0.Host(bytes_0)
    var_0 = host_0.populate_ancestors()
    dict_0 = {}
    var_1 = host_0.populate_ancestors(dict_0)
    var_2 = host_0.__getstate__()

def test_case_13():
    host_0 = module_0.Host()
    bytes_0 = b'\x0c\xbc<DD\xa7bc\x81A\xa9:\xb4\xf2Y\x1c'
    var_0 = host_0.remove_group(bytes_0)
    list_0 = []
    bool_0 = True
    host_1 = module_0.Host(list_0, bool_0)
    tuple_0 = ()
    str_0 = '\n _hostnames:\n    description: list of hostnames that matched the host pattern in inventory\n    type: list\n'
    var_1 = host_0.__eq__(str_0)
    var_2 = host_0.set_variable(tuple_0, host_0)
    int_0 = -1153
    var_3 = host_0.remove_group(int_0)
    var_4 = host_0.serialize()
    var_5 = host_0.__str__()
    float_0 = 1863.38
    host_2 = module_0.Host()
    var_6 = host_2.set_variable(tuple_0, float_0)
    var_7 = host_2.populate_ancestors(str_0)

def test_case_14():
    str_0 = 'D$#'
    host_0 = module_0.Host(str_0)
    group_0 = module_2.Group(str_0)
    group_1 = module_2.Group(str_0)
    var_0 = group_0.add_child_group(group_1)
    var_1 = host_0.add_group(group_1)
    var_2 = host_0.remove_group(group_1)

def test_case_15():
    str_0 = 'test'
    host_0 = module_0.Host(str_0)
    str_1 = 'foo'
    str_2 = 'bar'
    var_0 = host_0.set_variable(str_1, str_2)
    var_1 = host_0.set_variable(str_1, str_2)
    str_3 = 'dict1'
    str_4 = 'key'
    str_5 = 'value'
    str_6 = {str_4: str_5}
    var_2 = host_0.set_variable(str_3, str_6)
    str_7 = {str_4: str_6}
    var_3 = host_0.set_variable(str_3, str_7)
    str_8 = 'dict2'
    var_4 = host_0.set_variable(str_8, str_8)

def test_case_16():
    str_0 = 'D$\x0b'
    host_0 = module_0.Host(str_0)
    group_0 = module_2.Group(str_0)
    group_1 = module_2.Group(str_0)
    var_0 = group_0.add_child_group(group_1)
    var_1 = host_0.add_group(group_0)
    var_2 = host_0.add_group(group_1)
    var_3 = host_0.remove_group(group_1)

def test_case_17():
    str_0 = 'zl'
    host_0 = module_0.Host(str_0)
    group_0 = module_2.Group(str_0)
    group_1 = module_2.Group(str_0)
    var_0 = group_0.add_child_group(group_1)
    var_1 = host_0.add_group(group_1)
    var_2 = host_0.add_group(group_1)
    var_3 = host_0.remove_group(group_1)

def test_case_18():
    str_0 = 'all'
    group_0 = module_2.Group(str_0)
    str_1 = 'alice'
    host_0 = module_0.Host(str_1)
    str_2 = 'bob'
    host_1 = module_0.Host(str_2)
    str_3 = 'carol'
    host_2 = module_0.Host(str_3)
    str_4 = 'g1'
    group_1 = module_2.Group(str_4)
    str_5 = 'g2'
    group_2 = module_2.Group(str_5)
    var_0 = group_0.add_child_group(group_1)
    var_1 = group_0.add_child_group(group_2)
    var_2 = host_0.add_group(group_1)
    var_3 = host_0.populate_ancestors()
    var_4 = host_0.remove_group(group_1)

def test_case_19():
    str_0 = 'test'
    host_0 = module_0.Host(str_0)
    str_1 = 'foo'
    str_2 = '9n752ex\x0b>^'
    var_0 = host_0.set_variable(str_2, str_2)
    str_3 = 'overwritten'
    var_1 = host_0.set_variable(str_1, str_3)
    str_4 = 'dict1'
    var_2 = host_0.serialize()
    str_5 = 'key'
    str_6 = 'value'
    str_7 = {str_5: str_6}
    var_3 = host_0.set_variable(str_4, str_7)
    var_4 = host_0.set_variable(str_4, str_1)
    var_5 = host_0.set_variable(str_3, str_3)
    int_0 = 302
    host_1 = module_0.Host()
    var_6 = host_1.__eq__(int_0)

def test_case_20():
    str_0 = 'name'
    str_1 = 'vars'
    str_2 = 'groups'
    str_3 = 'implicit'
    str_4 = 'hostname'
    str_5 = 'var1'
    int_0 = 1
    int_1 = {str_5: int_0}
    str_6 = 'g1'
    str_7 = 'group1'
    int_2 = 2
    int_3 = {str_4: int_2}
    var_0 = {str_0: str_7, str_1: int_3}
    var_1 = {str_6: var_0}
    var_2 = [var_1]
    bool_0 = True
    var_3 = {str_0: str_4, str_1: int_1, str_2: var_2, str_3: bool_0}
    host_0 = module_0.Host()
    var_4 = host_0.deserialize(var_3)
    int_4 = 0
    var_5 = host_0.groups[int_4]

def test_case_21():
    str_0 = 'root'
    group_0 = module_2.Group(str_0)
    str_1 = 'root_c1'
    group_1 = module_2.Group(str_1)
    str_2 = 'root_c2'
    group_2 = module_2.Group(str_2)
    str_3 = 'root_c1_c1'
    group_3 = module_2.Group(str_3)
    var_0 = group_0.add_child_group(group_1)
    var_1 = group_0.add_child_group(group_2)
    var_2 = group_1.add_child_group(group_3)
    str_4 = 'host1'
    host_0 = module_0.Host(str_4)
    str_5 = 'host2'
    host_1 = module_0.Host(str_5)
    group_4 = [group_0, group_1, group_2, group_3]
    var_3 = host_0.populate_ancestors(group_4)
    var_4 = host_0.remove_group(group_1)
    var_5 = host_1.populate_ancestors