# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1
import ansible.utils.vars as module_2

def test_case_0():
    try:
        host_0 = module_0.Host()
        host_1 = module_0.Host()
        var_0 = host_1.__ne__(host_0)
        list_0 = []
        var_1 = host_0.__setstate__(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 990
        bytes_0 = b'\x0b\xf6d\xa6]i\x93a\x1bU\xeb\x1d'
        host_0 = module_0.Host(int_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        host_0 = module_0.Host()
        float_0 = 365.96
        var_0 = host_0.populate_ancestors(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'zl'
        host_0 = module_0.Host(str_0)
        var_0 = host_0.__str__()
        group_0 = module_1.Group(str_0)
        group_1 = module_1.Group(str_0)
        bytes_0 = b'<\xd4'
        var_1 = host_0.populate_ancestors(bytes_0)
        var_2 = group_0.add_child_group(group_1)
        var_3 = host_0.add_group(group_1)
        var_4 = host_0.remove_group(group_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'inventory_hostname'
        int_0 = 1030
        str_1 = '127.0.0.1'
        var_0 = module_2.get_unique_id()
        var_1 = dict()
        var_2 = dict(name=str_0, port=int_0, address=str_1, uuid=var_0, vars=var_1, groups=var_0)
        host_0 = module_0.Host()
        var_3 = host_0.deserialize(var_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'test_host'
        host_0 = module_0.Host(str_0)
        var_0 = host_0.get_magic_vars()
        str_1 = 'all'
        group_0 = module_1.Group(str_1)
        var_1 = group_0.add_host(host_0)
        var_2 = host_0.get_magic_vars()
        group_1 = module_1.Group(str_1)
        var_3 = group_0.add_
    except BaseException:
        pass

def test_case_6():
    try:
        group_0 = module_1.Group()
        var_0 = group_0.get_name()
        group_1 = None
        dict_0 = {group_1: group_1, group_1: group_1, group_1: group_1}
        host_0 = module_0.Host(dict_0)
        var_1 = host_0.add_group(group_0)
        var_2 = host_0.serialize()
        var_3 = host_0.__repr__()
        float_0 = 512.0
        var_4 = host_0.set_variable(float_0, host_0)
        var_5 = host_0.remove_group(group_0)
        list_0 = None
        tuple_0 = (list_0,)
        host_1 = module_0.Host(tuple_0)
        var_6 = host_1.__repr__()
        host_2 = module_0.Host()
        var_7 = host_0.populate_ancestors()
        int_0 = 1699
        var_8 = host_0.add_group(int_0)
    except BaseException:
        pass