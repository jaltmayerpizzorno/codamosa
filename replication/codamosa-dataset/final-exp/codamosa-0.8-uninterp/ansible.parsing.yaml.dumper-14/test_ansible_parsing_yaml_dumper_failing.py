# Automatically generated by Pynguin.
import ansible.parsing.yaml.dumper as module_0
import ansible.parsing.yaml.objects as module_1
import ansible.template as module_2
import ansible.vars.hostvars as module_3
import ansible.utils.unsafe_proxy as module_4

def test_case_0():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_1.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_dumper_0.represent_data(ansible_vault_encrypted_unicode_0)
        ansible_undefined_0 = module_2.AnsibleUndefined()
        var_2 = module_0.represent_undefined(ansible_undefined_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '6C/8>@gZd/hwr\n}\\rD'
        ansible_undefined_0 = module_2.AnsibleUndefined(str_0, str_0)
        str_1 = 'C/=\tLz"=)C%2R1OYh1'
        dict_0 = {str_1: str_0, str_1: str_1}
        str_2 = '42RjkS:5q'
        bool_0 = False
        ansible_dumper_0 = module_0.AnsibleDumper(dict_0, dict_0, str_2, bool_0)
        var_0 = ansible_dumper_0.represent_data(ansible_undefined_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '.*\\]'
        str_1 = 'ID_FS_UUID=(.*)\n'
        ansible_vault_encrypted_unicode_0 = module_1.AnsibleVaultEncryptedUnicode(str_1)
        set_0 = {str_0}
        float_0 = 752.873248
        ansible_undefined_0 = module_2.AnsibleUndefined()
        async_iterator_0 = ansible_undefined_0.__aiter__()
        ansible_unicode_0 = module_1.AnsibleUnicode()
        tuple_0 = (set_0, float_0, async_iterator_0, ansible_unicode_0)
        host_vars_vars_0 = module_3.HostVarsVars(tuple_0, set_0)
        set_1 = {str_1, str_0, ansible_vault_encrypted_unicode_0, str_1}
        list_0 = [str_0, ansible_vault_encrypted_unicode_0]
        ansible_unsafe_bytes_0 = module_4.AnsibleUnsafeBytes()
        ansible_dumper_0 = module_0.AnsibleDumper(set_1, list_0, ansible_unsafe_bytes_0)
        var_0 = ansible_dumper_0.represent_data(host_vars_vars_0)
    except BaseException:
        pass