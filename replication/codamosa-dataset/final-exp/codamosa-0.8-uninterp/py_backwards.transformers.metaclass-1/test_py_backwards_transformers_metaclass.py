# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.transformers.metaclass as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = 'class A(metaclass=B):\n    pass'
    var_0 = module_0.parse(str_0)
    var_1 = var_0.body
    var_2 = []
    metaclass_transformer_0 = module_1.MetaclassTransformer(var_2)
    int_0 = 0
    var_3 = var_1[int_0]
    var_4 = metaclass_transformer_0.visit(var_3)
    var_5 = var_1[int_0]
    var_6 = module_0.dump(var_5)

def test_case_2():
    str_0 = 'class A(metaclass=B):\n    pass'
    var_0 = module_0.parse(str_0)
    var_1 = var_0.body
    var_2 = [var_1]
    metaclass_transformer_0 = module_1.MetaclassTransformer(var_2)
    int_0 = 0
    var_3 = var_1[int_0]
    var_4 = metaclass_transformer_0.visit(var_3)
    var_5 = var_1[int_0]
    list_0 = [str_0, var_0, int_0, metaclass_transformer_0]
    class_def_0 = module_2.ClassDef(*list_0)
    class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    var_6 = module_0.dump(var_5)