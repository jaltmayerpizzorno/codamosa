# Automatically generated by Pynguin.
import ansible.vars.manager as module_0
import ansible.vars.fact_cache as module_1

def test_case_0():
    try:
        str_0 = 'oaR)|~(4owEZl'
        var_0 = module_0.preprocess_vars(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__len__()
        str_0 = 'B?)TA\tZg\\ 7'
        dict_0 = None
        str_1 = '*.G<)A'
        dict_1 = {str_1: str_1, str_1: str_1, str_0: dict_0, str_1: dict_0}
        var_1 = module_0.preprocess_vars(dict_1)
        vars_with_sources_1 = module_0.VarsWithSources()
        var_2 = vars_with_sources_1.copy()
        list_0 = [vars_with_sources_1, vars_with_sources_0, str_0, var_2, vars_with_sources_1]
        var_3 = vars_with_sources_1.__contains__(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_0)
        tuple_0 = None
        variable_manager_0 = module_0.VariableManager(tuple_0)
        list_0 = [vars_with_sources_0, dict_0, variable_manager_0, dict_0]
        bool_0 = True
        variable_manager_1 = module_0.VariableManager(bool_0)
        var_0 = variable_manager_1.__setstate__(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = None
        str_0 = "y>rA Wa30'XMH9G&"
        bytes_0 = b'\x98\xfd\x99'
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.get_vars(float_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        fact_cache_0 = module_1.FactCache()
        bool_0 = True
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.set_host_facts(fact_cache_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = 'Unable to parse submodule hash line: %s'
        str_1 = '[C[xUBRN9BD][,'
        dict_0 = {str_0: str_0, str_1: str_1}
        fact_cache_0 = module_1.FactCache()
        var_0 = variable_manager_0.set_nonpersistent_facts(dict_0, fact_cache_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'2\x14\x046\xad\xefj\xc7\xeb\x9e\x00\xdcl\xc3a\x08O\xc8\x16'
        str_0 = "y=jq'"
        list_0 = [str_0, str_0]
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.set_nonpersistent_facts(bytes_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1241
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.copy()
        var_1 = module_0.preprocess_vars(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        vars_with_sources_0 = module_0.VarsWithSources()
        list_0 = []
        var_0 = vars_with_sources_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '5rL:|wY\tq\x0bKn'
        str_1 = 'Module complete (%s)'
        bool_0 = True
        dict_0 = {str_0: str_0, str_1: bool_0}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_0)
        var_0 = vars_with_sources_0.copy()
        vars_with_sources_1 = module_0.VarsWithSources()
        bool_1 = None
        vars_with_sources_2 = module_0.VarsWithSources()
        var_1 = vars_with_sources_2.__setitem__(vars_with_sources_1, bool_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xba\xcb\xec\xf8\x17w\xe9{'
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__delitem__(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Z=1a{A\t-#x3C%jl{D'
        float_0 = 591.0
        list_0 = []
        vars_with_sources_0 = module_0.VarsWithSources(*list_0)
        list_1 = [str_0, str_0]
        variable_manager_0 = module_0.VariableManager(list_1)
        var_0 = variable_manager_0.set_nonpersistent_facts(float_0, vars_with_sources_0)
        list_2 = [str_0, str_0, str_0, str_0]
        vars_with_sources_1 = module_0.VarsWithSources(*list_2)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        str_0 = '\n    This is a OpenBSD User manipulation class.\n    Main differences are that OpenBSD:-\n     - has no concept of "system" account.\n     - has no force delete user\n\n    This overrides the following methods from the generic class:-\n      - create_user()\n      - remove_user()\n      - modify_user()\n    '
        tuple_0 = (str_0,)
        dict_0 = {bool_0: tuple_0, bool_0: bool_0}
        dict_1 = {}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_1)
        var_0 = vars_with_sources_0.__contains__(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        float_0 = 0.001
        float_1 = -4557.728477
        list_0 = []
        str_0 = 'w-N{pozNW`D)kV46dU'
        bytes_0 = b'\x9a\xf1N'
        str_1 = 'z/)G]\x0blUE1i-*GQ\x0c$'
        str_2 = 'EBBOdR`f.["gxid[O\x0bd'
        dict_0 = {str_0: list_0, str_0: bytes_0, str_1: bool_0, str_2: bool_0}
        vars_with_sources_0 = module_0.VarsWithSources(*list_0, **dict_0)
        var_0 = vars_with_sources_0.__setitem__(float_1, float_0)
        variable_manager_0 = module_0.VariableManager()
        float_2 = -795.95338
        dict_1 = {float_2: float_2, float_2: float_2, float_2: float_2, float_2: float_2}
        var_1 = variable_manager_0.set_host_facts(dict_1, dict_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Cv~@3Y\x0c0|QgL=HYAR,'
        variable_manager_0 = None
        vars_with_sources_0 = module_0.VarsWithSources()
        str_1 = '\t6pKSnW\x0b51t}:>_'
        list_0 = None
        variable_manager_1 = module_0.VariableManager(list_0)
        list_1 = [list_0, str_0, list_0, variable_manager_1]
        variable_manager_2 = module_0.VariableManager(str_1, list_1)
        var_0 = variable_manager_2.set_nonpersistent_facts(variable_manager_0, vars_with_sources_0)
        variable_manager_3 = module_0.VariableManager(str_0)
        var_1 = variable_manager_3.__getstate__()
        list_2 = [str_0, variable_manager_0]
        var_2 = module_0.preprocess_vars(list_2)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Unit test for method ``set_host_variable`` of class ``VariableManager``'
        variable_manager_0 = module_0.VariableManager()
        str_1 = 'testhost'
        str_2 = '$ew Zr'
        str_3 = 'newvalue'
        var_0 = variable_manager_0.set_host_variable(str_1, str_2, str_3)
        bool_0 = False
        str_4 = '\tfhzoCn*[M'
        str_5 = 'In check mode, would have run: "%s"'
        dict_0 = {str_0: str_3, str_5: str_2}
        var_1 = variable_manager_0.__setstate__(dict_0)
        str_6 = None
        str_7 = '?x:>Tw\t2{}_&2o2AE+=F'
        dict_1 = {str_4: bool_0, str_4: bool_0, str_6: var_0, str_7: str_1}
        dict_2 = {str_0: str_4}
        var_2 = variable_manager_0.set_nonpersistent_facts(dict_1, dict_2)
    except BaseException:
        pass