# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0
import re as module_1

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\x89J`\xa2\xa9'
    invalid_pattern_0 = module_0.InvalidPattern(bytes_0)

def test_case_2():
    int_0 = -57
    tuple_0 = ()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    invalid_pattern_0 = module_0.InvalidPattern(list_0)
    var_0 = invalid_pattern_0.__eq__(int_0)

def test_case_3():
    lazy_regex_0 = module_0.LazyRegex()

def test_case_4():
    lazy_regex_0 = module_0.LazyRegex()
    var_0 = lazy_regex_0.__getstate__()
    str_0 = '_regex_args'
    str_1 = '_regex_kwargs'
    var_1 = dict(var_0, args=str_0, kwargs=str_1)
    var_2 = lazy_regex_0.__setstate__(var_1)

def test_case_5():
    var_0 = module_0.lazy_compile()

def test_case_6():
    var_0 = module_0.install_lazy_compile()

def test_case_7():
    var_0 = module_0.reset_compile()

def test_case_8():
    str_0 = '(?ms)(?P<name>.*?)\\.(?P<type>[^\\.]+)$'
    str_1 = (str_0,)
    var_0 = {}
    lazy_regex_0 = module_0.LazyRegex(str_1, var_0)
    str_2 = 'groupindex'
    var_1 = lazy_regex_0.__getattr__(str_2)
    str_3 = 'pattern'
    var_2 = lazy_regex_0.__getattr__(str_3)
    var_3 = module_1.compile(str_0)
    var_4 = var_3.groupindex
    var_5 = module_1.compile(str_0)
    var_6 = var_5.pattern