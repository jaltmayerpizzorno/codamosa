# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        set_0 = set()
        invalid_pattern_0 = module_0.InvalidPattern(set_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x89J`\xa2\xa9'
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '%=V8"H2|l/2tY'
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        invalid_pattern_0 = module_0.InvalidPattern(lazy_regex_0)
        var_0 = lazy_regex_0.__getstate__()
        var_1 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '^N\x0b$cn<ki["T\'O poQn'
        str_1 = ''
        var_0 = module_0.finditer_public(str_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xd7P6%'
        lazy_regex_0 = module_0.LazyRegex(bytes_0)
        float_0 = 782.9309
        var_0 = module_0.finditer_public(lazy_regex_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        lazy_regex_0 = module_0.LazyRegex(list_0)
        var_0 = lazy_regex_0.__getstate__()
        var_1 = module_0.install_lazy_compile()
        var_2 = module_0.lazy_compile()
        int_0 = 3376
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_3 = invalid_pattern_0.__eq__(invalid_pattern_0)
        int_1 = None
        invalid_pattern_1 = module_0.InvalidPattern(int_1)
        var_4 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'method __getattr__ of class LazyRegex'
        str_1 = '(?ms)(?P<name>.*?)\\.(?P<type>[^\\.]+)$'
        str_2 = (str_1,)
        var_0 = {}
        lazy_regex_0 = module_0.LazyRegex(str_2, var_0)
        var_1 = lazy_regex_0.__getattr__(str_0)
    except BaseException:
        pass