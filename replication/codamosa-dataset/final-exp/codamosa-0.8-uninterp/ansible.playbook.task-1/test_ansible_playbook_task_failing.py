# Automatically generated by Pynguin.
import ansible.playbook.task as module_0
import ansible.playbook.block as module_1

def test_case_0():
    try:
        int_0 = -1366
        tuple_0 = ()
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, int_0: int_0, tuple_0: tuple_0}
        task_0 = module_0.Task(int_0, dict_0)
        var_0 = task_0.get_name()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1524
        task_0 = module_0.Task()
        var_0 = task_0.load(int_0, task_0)
    except BaseException:
        pass

def test_case_2():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.preprocess_data(task_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'j\xcco\x99\xa6\x9e\x19\xb0\xd5'
        task_0 = module_0.Task()
        var_0 = task_0.post_validate(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x01\xb4"\rc.\xee'
        task_0 = module_0.Task(bytes_0)
        var_0 = task_0.get_vars()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'n7\x01w\x84u\xa5 !'
        task_0 = module_0.Task()
        str_0 = 'fi(X@Jy/3.e\r@UUM4ke\x0b'
        task_1 = module_0.Task(task_0, str_0)
        var_0 = task_1.get_include_params()
        var_1 = task_1.get_vars()
        task_2 = module_0.Task()
        var_2 = task_2.post_validate(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x9ap\xc2\x04\xe9\x9bp \x10\xfa\xa8'
        task_0 = module_0.Task(bytes_0)
        var_0 = task_0.copy()
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        task_0 = module_0.Task(bool_0)
        var_0 = task_0.serialize()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'V;3R2lK\x0cdJ}Oex8'
        dict_0 = {}
        str_1 = "The group named '%s' has a recursive dependency loop."
        task_0 = module_0.Task(str_1)
        task_1 = module_0.Task(dict_0, task_0)
        var_0 = task_1.get_name()
        int_0 = -741
        bytes_0 = b'\xdf\x8b\x1a'
        task_2 = module_0.Task(int_0, bytes_0)
        var_1 = task_2.set_loader(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x01\xb4"\rc.\xee'
        task_0 = module_0.Task()
        task_1 = module_0.Task(task_0)
        var_0 = task_1.serialize()
        task_2 = module_0.Task(bytes_0)
        var_1 = task_2.get_vars()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\x9ap\xc2\x04\xe9\x9bp \x10\xfa\xa8'
        task_0 = module_0.Task(bytes_0)
        var_0 = task_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_11():
    try:
        task_0 = module_0.Task()
        str_0 = 'shell'
        dict_0 = {}
        var_0 = task_0.get_vars()
        var_1 = task_0.deserialize(dict_0)
        str_1 = ';r;'
        var_2 = task_0.get_first_parent_include()
        bool_0 = False
        task_1 = module_0.Task(task_0)
        var_3 = task_0.get_include_params()
        var_4 = task_1.get_first_parent_include()
        var_5 = task_0.serialize()
        var_6 = {str_0: str_0, str_1: bool_0}
        var_7 = task_1.serialize()
        var_8 = task_0.preprocess_data(var_6)
        bytes_0 = b'\xcewC\x0c\x93\xb5\x8aK\x00\x96'
        var_9 = task_1.set_loader(bytes_0)
        var_10 = task_1.post_validate(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = dict()
        task_0 = module_0.Task()
        var_1 = task_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = None
        dict_1 = {dict_0: dict_0, dict_0: dict_0, dict_0: dict_0}
        str_0 = 'M2'
        task_0 = module_0.Task(str_0)
        var_0 = task_0.preprocess_data(dict_1)
    except BaseException:
        pass

def test_case_14():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.serialize()
        var_1 = task_0.__repr__()
        var_2 = task_0.get_include_params()
        str_0 = 'xZ&yJB!X'
        var_3 = task_0.get_vars()
        str_1 = '+w'
        task_1 = module_0.Task(task_0, str_1)
        var_4 = task_1.get_first_parent_include()
        list_0 = []
        int_0 = 4140
        task_2 = module_0.Task(str_0, list_0, int_0)
        var_5 = task_1.serialize()
    except BaseException:
        pass

def test_case_15():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.serialize()
        var_1 = task_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_16():
    try:
        task_0 = module_0.Task()
        str_0 = 'action'
        str_1 = 'xe,@'
        dict_0 = {str_0: str_1}
        var_0 = task_0.load(dict_0)
        var_1 = task_0.serialize()
        bool_0 = True
        task_1 = module_0.Task()
        var_2 = task_0.serialize()
        var_3 = task_0.serialize()
        var_4 = task_0.get_include_params()
        var_5 = task_0.get_vars()
        var_6 = {str_0: str_0, str_1: bool_0}
        var_7 = task_0.preprocess_data(var_6)
        float_0 = -343.0
        task_2 = module_0.Task(float_0)
        var_8 = task_2.__repr__()
        var_9 = task_0.get_include_params()
        var_10 = task_0.serialize()
        var_11 = task_0.post_validate(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x01\xb4"\rc.\xee'
        task_0 = module_0.Task()
        task_1 = module_0.Task(task_0)
        dict_0 = {bytes_0: task_1}
        var_0 = task_1.deserialize(dict_0)
        var_1 = task_1.serialize()
        task_2 = module_0.Task(bytes_0)
        var_2 = task_2.get_vars()
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 431
        bytes_0 = b'ki#\x8f\xbe\x92T\x08\x14(k'
        bytes_1 = b'\xf0E\t\xaaD\xf8\xce'
        set_0 = {bytes_0, bytes_0, bytes_1}
        block_0 = module_1.Block(int_0, bytes_0, set_0)
        task_0 = module_0.Task(block_0)
        var_0 = task_0.serialize()
    except BaseException:
        pass