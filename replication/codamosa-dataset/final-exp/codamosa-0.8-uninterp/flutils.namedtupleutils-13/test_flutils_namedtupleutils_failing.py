# Automatically generated by Pynguin.
import flutils.namedtupleutils as module_0
import types as module_1
import collections.abc as module_2
import collections as module_3

def test_case_0():
    try:
        tuple_0 = None
        var_0 = module_0.to_namedtuple(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        bytes_0 = b'\x90-\xf8\xf0\n\xaa\x91+\xad\xfd'
        str_0 = '&"Inbg:\'O'
        tuple_0 = (bool_0, bytes_0, str_0)
        var_0 = module_0.to_namedtuple(tuple_0)
        list_0 = []
        var_1 = module_0.to_namedtuple(list_0)
        simple_namespace_0 = module_1.SimpleNamespace()
        var_2 = module_0.to_namedtuple(simple_namespace_0)
        var_3 = module_0.to_namedtuple(list_0)
        var_4 = module_0.to_namedtuple(list_0)
        mapping_0 = None
        var_5 = module_0.to_namedtuple(mapping_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = None
        list_1 = [list_0]
        var_0 = module_0.to_namedtuple(list_1)
        var_1 = module_0.to_namedtuple(list_1)
        mapping_0 = module_2.Mapping()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "The given 'setup_dir' of %r does NOT contain a setup.cfg file."
        list_0 = []
        var_0 = module_0.to_namedtuple(list_0)
        var_1 = module_0.to_namedtuple(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xa0j'
        list_0 = [bytes_0]
        str_0 = "The given value for 'position', %r, must be an 'int' between (%r) and (%r)."
        bytes_1 = None
        bytes_2 = b"\x0b\xc1G'\x85"
        dict_0 = {str_0: bytes_1, str_0: bytes_0, str_0: str_0}
        ordered_dict_0 = module_3.OrderedDict(**dict_0)
        tuple_0 = (bytes_1, bytes_2, ordered_dict_0)
        var_0 = module_0.to_namedtuple(tuple_0)
        str_1 = 'K\t,<a'
        str_2 = 'Used with map() to expand foreign-names into a named tuple.\n\n    See the :term:`foreign-name` documentation for the format of this string.\n\n    The tuple contains three parts:\n\n    - attr_name: If applicable, the attribute identifier that will be\n      set on the cherry-picking module.\n    - mod_name: The fullname of the module to be cherry-picked.\n    - mod_attr_name: If applicable the attribute identifier on the\n        cherry-picked module that will be bound to the ``attr_name``.\n        An empty str value indicates that the entire module will be used.\n    '
        dict_1 = {str_0: bytes_0, str_0: list_0, str_1: str_1, str_2: str_0}
        mapping_0 = module_2.Mapping(**dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'a'
        str_1 = 'b'
        int_0 = 1
        int_1 = 2
        int_2 = {str_0: int_0, str_1: int_1}
        var_0 = module_0.to_namedtuple(int_2)
        bytes_0 = b'6\xce'
        str_2 = '@Z\re9$!~LgGqR\n,'
        str_3 = 'oM)l9}k'
        set_0 = {str_1, var_0}
        str_4 = 'fY?^c,?\rh|q'
        str_5 = 'rIk3Ug$E|Is\x0b7N$)2'
        dict_0 = {str_3: str_2, str_3: int_1, str_3: set_0, str_4: str_5}
        dict_1 = {bytes_0: str_3, int_0: str_4}
        tuple_0 = (bytes_0, str_2, dict_0, dict_1)
        var_1 = module_0.to_namedtuple(tuple_0)
    except BaseException:
        pass