# Automatically generated by Pynguin.
import types as module_0
import flutils.namedtupleutils as module_1

def test_case_0():
    simple_namespace_0 = module_0.SimpleNamespace()
    var_0 = module_1.to_namedtuple(simple_namespace_0)

def test_case_1():
    float_0 = 1725.5117
    tuple_0 = ()
    str_0 = "C*gS]'6\nKUJ"
    dict_0 = {str_0: tuple_0}
    dict_1 = {tuple_0: str_0, str_0: tuple_0}
    tuple_1 = (float_0, tuple_0, dict_0, dict_1)
    var_0 = module_1.to_namedtuple(tuple_1)

def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0, bool_0]
    str_0 = 'iT'
    dict_0 = {str_0: list_0, str_0: list_0, str_0: bool_0}
    simple_namespace_0 = module_0.SimpleNamespace(**dict_0)
    var_0 = module_1.to_namedtuple(simple_namespace_0)
    list_1 = [simple_namespace_0, list_0, list_0, var_0]
    var_1 = module_1.to_namedtuple(list_1)

def test_case_3():
    bool_0 = False
    list_0 = []
    var_0 = module_1.to_namedtuple(list_0)
    list_1 = [bool_0, bool_0, bool_0]
    var_1 = module_1.to_namedtuple(list_1)
    var_2 = module_1.to_namedtuple(list_1)
    simple_namespace_0 = None
    str_0 = '\nT'
    str_1 = ';%!0sb_]Y\\yxDs'
    str_2 = ',Tpe'
    bool_1 = True
    dict_0 = {str_0: list_1, str_1: var_2, str_2: bool_1}
    var_3 = module_1.to_namedtuple(list_0)
    simple_namespace_1 = module_0.SimpleNamespace(**dict_0)
    var_4 = module_1.to_namedtuple(simple_namespace_1)
    var_5 = module_1.to_namedtuple(list_1)
    var_6 = module_1.to_namedtuple(list_1)
    var_7 = module_1.to_namedtuple(list_1)
    list_2 = [simple_namespace_0, var_6, var_6, var_4]
    var_8 = module_1.to_namedtuple(list_2)