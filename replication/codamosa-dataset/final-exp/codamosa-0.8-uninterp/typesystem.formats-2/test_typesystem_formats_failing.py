# Automatically generated by Pynguin.
import typesystem.formats as module_0
import re as module_1

def test_case_0():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-0-14T11:00:00+07:00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '>)dXLx%=Uw'
        str_1 = 't g\\b/[pR:>qo\x0bK$MiR~'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
        base_format_0 = module_0.BaseFormat()
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(dict_0)
        bool_1 = base_format_0.is_native_type(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '.gSU2"k'
        dict_0 = {str_0: str_0}
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 612.0
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        optional_0 = base_format_0.serialize(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '02D06-03'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '2020-06-03'
        bool_0 = time_format_0.is_native_type(str_0)
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'xpectig vlue'
        list_0 = []
        time_format_0 = module_0.TimeFormat(*list_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '12:05:46'
        time_0 = time_format_0.validate(str_0)
        str_1 = 'Must be a real time.'
        var_0 = module_1.match(str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-0-14T11:00:00+07:00'
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-01-01'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ' 2\\n\x0b\t#5X0*'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2004-08-01'
        bool_0 = date_format_0.is_native_type(date_format_0)
        date_0 = date_format_0.validate(str_0)
        str_1 = 'm|'
        date_1 = date_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass

def test_case_15():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        complex_0 = None
        list_0 = []
        time_format_0 = module_0.TimeFormat()
        date_time_format_1 = module_0.DateTimeFormat(*list_0)
        optional_0 = date_time_format_1.serialize(complex_0)
        u_u_i_d_format_0 = module_0.UUIDFormat(*list_0)
        str_0 = u_u_i_d_format_0.serialize(complex_0)
        time_format_1 = module_0.TimeFormat()
        base_format_0 = module_0.BaseFormat()
        optional_1 = base_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        u_u_i_d_format_0 = module_0.UUIDFormat(*list_0)
        str_0 = "\nProvides 'typesystem.from_json_schema()' and 'typesystem.to_json_schema()'.\n"
        str_1 = None
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(str_1)
        bytes_0 = b'\xe6a \xdc%\xb2e\xd6kxR<m\xe7bzWn'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: bytes_0}
        base_format_1 = module_0.BaseFormat(**dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '09:30'
        time_0 = time_format_0.validate(str_0)
        optional_0 = time_format_0.serialize(time_0)
        str_1 = '09:3:1'
        time_1 = time_format_0.validate(str_1)
        date_time_format_0 = module_0.DateTimeFormat()
        optional_1 = date_time_format_0.serialize(time_1)
    except BaseException:
        pass

def test_case_18():
    try:
        list_0 = None
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(list_0)
        list_1 = []
        base_format_0 = module_0.BaseFormat(*list_1)
        date_time_format_0 = module_0.DateTimeFormat()
        optional_1 = date_time_format_0.serialize(list_1)
    except BaseException:
        pass

def test_case_19():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2019-13-1'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-01-02'
        date_0 = date_format_0.validate(str_0)
        optional_0 = date_format_0.serialize(date_0)
        str_1 = '2020-12-31'
        date_1 = date_format_0.validate(str_1)
        str_2 = '2020-01-31'
        date_2 = date_format_0.validate(str_2)
        str_3 = '2020-13-31'
        date_3 = date_format_0.validate(str_3)
    except BaseException:
        pass

def test_case_21():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '12:24:60'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = print()
        str_0 = 'Test DateTimeFormat Class: Validate'
        var_1 = print(str_0)
        date_time_format_0 = module_0.DateTimeFormat()
        str_1 = '2019-12-02T15:00:00Z'
        datetime_0 = date_time_format_0.validate(str_1)
        str_2 = '2019-12-02T15:00:00+00:00'
        datetime_1 = date_time_format_0.validate(str_2)
        str_3 = '2019-12-02T15:00:00+00'
        datetime_2 = date_time_format_0.validate(str_3)
        str_4 = '2019-12-02T15:00:00+12'
        datetime_3 = date_time_format_0.validate(str_4)
        bool_0 = False
        datetime_4 = date_time_format_0.validate(bool_0)
    except BaseException:
        pass