# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        str_0 = '[6\x0bTf0P?y!ATv?'
        distribution_0 = module_0.Distribution(str_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        str_1 = 'QKI;e@y`_!>\rV\r('
        str_2 = '`]zkgg]dWr5G'
        float_0 = 5627.4115
        bool_0 = False
        tuple_0 = (str_1, str_2, float_0, bool_0)
        var_0 = module_0.get_uname(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        tuple_0 = None
        int_0 = 232
        int_1 = -1995
        dict_0 = {int_1: bool_0, int_1: int_1}
        distribution_files_0 = module_0.DistributionFiles(tuple_0)
        var_0 = distribution_files_0.parse_distribution_file_NA(int_0, int_1, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'f.!V\x0c?Y'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -590
        distribution_files_0 = module_0.DistributionFiles(int_0)
        var_0 = distribution_files_0.process_dist_files()
        bytes_0 = b'5RC5>|@\xf0(`\x03\xa3\x87\xe5s\xf5\xe3O'
        distribution_0 = module_0.Distribution(bytes_0)
        var_1 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        distribution_fact_collector_0 = module_0.DistributionFactCollector(bool_0)
        dict_0 = {}
        bool_1 = False
        var_0 = distribution_fact_collector_0.collect(bool_1)
        distribution_0 = module_0.Distribution(dict_0)
        var_1 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'C\xaa\x85'
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\x0bc``Z`c/;`c/}'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        distribution_0 = module_0.Distribution(bool_0)
        set_0 = {distribution_0, bool_0, distribution_0, distribution_0}
        list_0 = [set_0, bool_0, bool_0, bool_0]
        distribution_1 = module_0.Distribution(list_0)
        tuple_0 = ()
        bool_1 = True
        dict_0 = {tuple_0: bool_1, distribution_0: list_0}
        str_0 = 'Linux'
        str_1 = 'NA'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bytes_0 = b'\x98\xae\xa9\x82\xa9<h\xc2q\xbe,S\xff\xc8\x8d\xcb\xdcL\xa8a'
        bytes_1 = None
        distribution_files_0 = module_0.DistributionFiles(list_0)
        var_0 = distribution_files_0.parse_distribution_file_Flatcar(str_1, distribution_fact_collector_0, bytes_0, bytes_1)
        int_0 = 964
        distribution_files_1 = module_0.DistributionFiles(int_0)
        var_1 = distribution_files_1.parse_distribution_file_Mandriva(dict_0, str_0, str_0, list_0)
        var_2 = distribution_1.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        float_0 = 0.0
        distribution_files_0 = module_0.DistributionFiles(float_0)
        bytes_0 = b'\xa3\x93%\xb2\x00\xf6Vc\x16\xf7\xee\xb1\xc1uD\xc5{W'
        distribution_0 = module_0.Distribution(dict_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        var_0 = distribution_files_0.parse_distribution_file_Alpine(bytes_0, distribution_0, distribution_files_1, float_0)
        var_1 = module_0.get_uname(dict_0, distribution_files_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        str_0 = '{Nmi;piYS)b%UVUIvxu('
        set_0 = {bool_0, str_0}
        list_0 = [set_0, str_0]
        str_1 = ';3=WSTQ~ON>!\x0c'
        distribution_files_0 = module_0.DistributionFiles(str_1)
        distribution_files_1 = module_0.DistributionFiles(bool_0)
        var_0 = distribution_files_1.parse_distribution_file_Coreos(str_0, set_0, list_0, distribution_files_0)
        float_0 = -924.73
        bool_1 = None
        distribution_0 = module_0.Distribution(bool_1)
        str_2 = '>a2 3yAK05tYoNH'
        int_0 = 2165
        distribution_1 = module_0.Distribution(float_0)
        distribution_files_2 = module_0.DistributionFiles(distribution_1)
        var_1 = distribution_files_2.parse_distribution_file_Alpine(distribution_0, float_0, str_2, int_0)
        distribution_2 = module_0.Distribution(float_0)
        var_2 = distribution_2.get_distribution_facts()
        var_3 = distribution_2.get_distribution_facts()
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        list_1 = [bool_0, bool_0, bool_0]
        distribution_3 = module_0.Distribution(list_1)
        var_4 = distribution_3.get_distribution_FreeBSD()
        var_5 = distribution_3.get_distribution_Darwin()
    except BaseException:
        pass