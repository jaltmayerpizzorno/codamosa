# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = '_module_path'
        int_0 = -2581
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, int_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '_module_path'
        int_0 = -2581
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, int_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_2():
    try:
        import_processor_0 = module_0.ImportProcessor()
        list_0 = [import_processor_0, import_processor_0, import_processor_0, import_processor_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, list_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '_module_path'
        int_0 = -2581
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, int_0)
        bool_0 = None
        var_0 = illegal_use_of_scope_replacer_0.__eq__(bool_0)
        var_1 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        int_0 = -1731
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, list_0, int_0)
        var_0 = scope_replacer_0.__call__()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b''
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = []
        import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, list_0)
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, import_replacer_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x8a\x1b?f\x07)\x04\xaa'
        str_0 = 'level'
        var_0 = module_0.lazy_import(bytes_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        int_0 = -1713
        tuple_0 = ()
        bytes_0 = b'\xdb\xb5Te\xcc\\@\xa9\x84;K\x82\x84\x0b)\xd6'
        import_replacer_0 = module_0.ImportReplacer(dict_0, tuple_0, bytes_0, int_0)
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_replacer_0, bytes_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\n       from bzrlib mport subprocess\n        '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '-MT,\\+]&f{M'
        list_0 = []
        int_0 = 589
        dict_0 = {str_0: int_0, str_0: str_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, dict_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
        str_1 = "8=]z\x0b'XgAfQgz"
        str_2 = '1Q1;QlyM3xz('
        bool_0 = True
        dict_1 = {var_0: bool_0, str_0: str_1}
        import_processor_0 = module_0.ImportProcessor()
        var_1 = import_processor_0.lazy_import(dict_1, str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        str_0 = ' Merge multiple queues together\n\n    >>> q1, q2, q3 = [Queue() for _ in range(3)]\n    >>> out_q = merge(q1, q2, q3)\n    '
        int_0 = 589
        dict_0 = {str_0: int_0, str_0: str_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, dict_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
        str_1 = "8=]z\x0b'XgAfQgz"
        bool_0 = True
        dict_1 = {var_0: bool_0, str_1: str_1}
        import_processor_0 = module_0.ImportProcessor()
        var_1 = import_processor_0.lazy_import(dict_1, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = None
        set_0 = {list_0, list_0, list_0}
        str_0 = '}4AjLO^y9^*`\x0b;q?X('
        dict_0 = {}
        import_replacer_0 = module_0.ImportReplacer(str_0, dict_0, list_0, str_0, set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tuple_0 = ()
        import_processor_0 = module_0.ImportProcessor(tuple_0)
        int_0 = -1659
        float_0 = -1590.09863
        import_processor_1 = module_0.ImportProcessor()
        str_0 = 'Bl1:Mp/0mJ#nP.'
        dict_0 = {str_0: import_processor_1, str_0: float_0}
        list_0 = [str_0, str_0, tuple_0, str_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, int_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(str_0)
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(dict_0, list_0)
        set_0 = set()
        str_1 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
        str_2 = 'B'
        var_1 = module_0.lazy_import(set_0, str_1, str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\x8a\x1b?f\x07)\x04\xaa'
        import_processor_0 = module_0.ImportProcessor()
        str_0 = 'zK_si2D}?t#?S'
        var_0 = module_0.lazy_import(bytes_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n        from bzrlib import subprocess\n        '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '_module_path'
        int_0 = -2602
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, int_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        var_1 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '1:u\tOGb7a]o,3;u<CI'
        bool_0 = True
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, bool_0)
        str_1 = '[d|Q\teYnVCWPH'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        import_processor_0 = module_0.ImportProcessor()
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_1, import_processor_0)
        int_0 = 31
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, int_0)
        var_0 = scope_replacer_0.__getattribute__(illegal_use_of_scope_replacer_0)
    except BaseException:
        pass