# Automatically generated by Pynguin.
import typesystem.tokenize.tokenize_json as module_0
import typesystem.fields as module_1
import typesystem.tokenize.tokens as module_2

def test_case_0():
    try:
        str_0 = '{\x0cXh$rD-bb08*@\tj#'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x14\xd5\xf1!\xfb"\x7f\xcb\xe0e\xc3J'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tokenizing_decoder_0 = module_0._TokenizingDecoder()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b''
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x01\r\x16\x8b\x1c\xb4D\xa0k\xd1\x04\xc3N\x16'
        field_0 = module_1.Field()
        any_0 = module_0.validate_json(bytes_0, field_0)
    except BaseException:
        pass

def test_case_5():
    try:
        field_0 = module_1.Field()
        str_0 = 'fSSj&'
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Oz@\x0b`AOWl)'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'time'
        field_0 = None
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '2'
        field_0 = module_1.Field(title=str_0)
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\rn{kjG%TKy'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\n    {\n      "key" "value",\n     "key2": "value2,\n      "key3": "value3"\n    }\n    '
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '{"hello": "world"'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'{"a": '
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '{"a": "alpha", "beta": 2, "gama": [\\,2, 3]}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '{"a": "alpha", "beta": 2, gama": [\\,\r 3]}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '1'
        token_0 = module_0.tokenize_json(str_0)
        int_0 = 1
        scalar_token_0 = module_2.ScalarToken(int_0, int_0, int_0, str_0)
        str_1 = '1.1'
        token_1 = module_0.tokenize_json(str_0)
        float_0 = 1.1
        int_1 = 2
        scalar_token_1 = module_2.ScalarToken(float_0, int_1, int_1, str_1)
        str_2 = '1e1'
        token_2 = module_0.tokenize_json(str_2)
        int_2 = 10
        scalar_token_2 = module_2.ScalarToken(int_2, int_2, int_1, str_2)
        str_3 = "'a'"
        token_3 = module_0.tokenize_json(str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '{"a": "alpha", "beta":  , "gama" [\\,2D 3]}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass