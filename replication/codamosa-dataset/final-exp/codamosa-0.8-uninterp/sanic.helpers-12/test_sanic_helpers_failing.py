# Automatically generated by Pynguin.
import sanic.helpers as module_0

def test_case_0():
    try:
        str_0 = 'sL/%/0k%g1L'
        var_0 = module_0.has_message_body(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1109
        var_0 = module_0.is_entity_header(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -5194
        dict_0 = {int_0: int_0, int_0: int_0}
        list_0 = [dict_0, dict_0, dict_0]
        var_0 = module_0.is_hop_by_hop_header(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        var_0 = module_0.remove_entity_headers(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1890.80495
        var_0 = module_0.import_string(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -5194
        dict_0 = {int_0: int_0, int_0: int_0}
        bool_0 = True
        var_0 = module_0.has_message_body(bool_0)
        list_0 = [dict_0, dict_0, dict_0]
        var_1 = module_0.is_hop_by_hop_header(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'os.mkdir'
        var_0 = module_0.import_string(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 200
        var_0 = module_0.has_message_body(int_0)
        str_0 = 'NT]po?S\n{}^K!r1'
        var_1 = module_0.import_string(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 100
        var_0 = module_0.has_message_body(int_0)
        var_1 = module_0.has_message_body(int_0)
        int_1 = 204
        var_2 = module_0.has_message_body(int_1)
        int_2 = 300
        var_3 = module_0.has_message_body(int_2)
        int_3 = 281
        var_4 = module_0.has_message_body(int_3)
        float_0 = -1735.69
        var_5 = module_0.import_string(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'httptools.parser'
        var_0 = module_0.import_string(str_0)
        str_1 = 'httptools.parser.HttpRequestParser'
        var_1 = module_0.import_string(str_1)
    except BaseException:
        pass