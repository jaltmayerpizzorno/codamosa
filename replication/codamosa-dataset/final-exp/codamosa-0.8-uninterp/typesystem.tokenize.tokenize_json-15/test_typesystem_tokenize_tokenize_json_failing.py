# Automatically generated by Pynguin.
import typesystem.tokenize.tokenize_json as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = '{ "test": {~"test": { "test": [ { "test": 123 } ] } } }'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Y~v7`Yl]>I%!Nd?6\x0c'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tokenizing_decoder_0 = module_0._TokenizingDecoder()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'#\xaf\xb6\xb7\xf0\xda\xab\xd1'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'{"a": 1}'
        token_0 = module_0.tokenize_json(bytes_0)
        str_0 = ''
        token_1 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Must be valid UUID format.'
        any_0 = module_0.validate_json(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '{ "test": { "test": { "test": [ { "test": 123 } ] } } }'
        token_0 = module_0.tokenize_json(str_0)
        str_1 = '^b bK_c`1IsVVYkd'
        field_0 = module_1.Field(title=str_1)
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '{"a": "hello", "b": true, "c": false, "d": null, "e": 1}'
        token_0 = module_0.tokenize_json(str_0)
        bytes_0 = b'\xfe\xe34\xd9\xf9w\x17'
        token_1 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'tM\xc0S\xcf\xd5i\x94 \x84\x1b\xe0'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'f'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '{ "name: fo" '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '[1, 2, 3,]'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '"2019-09-17 02:35:14.639"'
        token_0 = module_0.tokenize_json(str_0)
        str_1 = 'nusll'
        token_1 = module_0.tokenize_json(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '{"a": [1,2,3], Pb": [4,5,6]}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '{ "name": "foo" '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '{ "test": { "test": } "te": [ { "test": 123 } ] } } }'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '[1, 2, 3,'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '{ "n0ame":  foo"; '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass