# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    try:
        var_0 = module_0.fn()
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        var_1 = module_0.identity(var_0)
        var_2 = module_0.identity(var_1)
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_0, callable_1]
        var_3 = module_0.pipe(list_0, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1]
        var_0 = module_0.pipe(callable_1, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        float_0 = None
        tuple_0 = (float_0,)
        list_0 = [callable_0, tuple_0]
        str_0 = '} )k!~hp(f\\]+-8F{'
        set_0 = {float_0, callable_1}
        dict_0 = {str_0: set_0}
        var_0 = module_0.curry(list_0, dict_0)
        list_1 = [callable_1, callable_0, callable_1]
        var_1 = module_0.pipe(list_1, *list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        callable_1 = None
        tuple_0 = (callable_1, callable_0)
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.cond(list_0)
        list_1 = [var_0]
        var_1 = module_0.pipe(callable_0, *list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        float_0 = None
        tuple_0 = (float_0,)
        list_0 = [callable_0, tuple_0]
        str_0 = '} )k!~hp(f\\]+-8F{'
        set_0 = {float_0, callable_1}
        dict_0 = {str_0: set_0}
        var_0 = module_0.curry(list_0, dict_0)
        list_1 = [var_0, callable_1, callable_0, callable_1]
        var_1 = module_0.pipe(list_1, *list_1)
    except BaseException:
        pass