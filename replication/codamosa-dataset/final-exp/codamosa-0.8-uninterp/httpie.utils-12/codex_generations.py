

# Generated at 2022-06-13 22:43:59.800888
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('example.txt') is None
    assert get_content_type('example.txt.gz') == 'application/x-gzip'
    assert get_content_type('example.txt.bz2') == 'application/x-bzip2'
    assert get_content_type('example.txt.xz') == 'application/xz'
    assert get_content_type('example.txt.Z') == 'application/x-compress'
    assert get_content_type('example.txt.lzma') == 'application/x-lzma'
    assert get_content_type('example.txt.lz') == 'application/x-lzip'
    assert get_content_type('example.txt.lrz') == 'application/x-lrzip'

# Generated at 2022-06-13 22:44:08.407425
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('foo.txt') == 'text/plain'
    assert get_content_type('foo.html') == 'text/html'
    assert get_content_type('foo.json') == 'application/json'
    assert get_content_type('foo.xml') == 'text/xml'
    assert get_content_type('foo.pdf') == 'application/pdf'
    assert get_content_type('foo.zip') == 'application/zip'



# Generated at 2022-06-13 22:44:11.672793
# Unit test for function get_content_type
def test_get_content_type():
    """
    Test get_content_type
    """
    assert get_content_type(filename='foo') is None
    assert get_content_type(filename='foo.txt') == 'text/plain'

# Generated at 2022-06-13 22:44:21.834991
# Unit test for function get_expired_cookies
def test_get_expired_cookies():
    # Test data:
    #  - cookies that are expired
    #  - cookies that are still valid
    #  - cookies without a path
    #
    # The test data is based on those generated by httpbin.org for requests
    # to <https://httpbin.org/cookies/set/cookie-name/cookie-value>.

    expired_cookies = get_expired_cookies(
        headers=[
            ('Set-Cookie', 'cookie-name="cookie-value"; Path=/;'),
            ('Set-Cookie', 'cookie-name="cookie-value"; Path=/; Max-Age=0'),
        ],
        now=1561302264,
    )

    assert expired_cookies == [{'name': 'cookie-name', 'path': '/'}]

    valid_cookies = get_expired_cook

# Generated at 2022-06-13 22:44:28.083329
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('foo.html') == 'text/html'
    assert get_content_type('bar.html') == 'text/html'
    assert get_content_type('baz.css') == 'text/css'
    assert get_content_type('woof.js') == 'application/javascript'
    assert get_content_type('whatever') is None
    assert get_content_type('something.foo') is None



# Generated at 2022-06-13 22:44:40.166670
# Unit test for function get_content_type

# Generated at 2022-06-13 22:44:44.562668
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('foo.txt') is None
    assert get_content_type('foo.jpg') == 'image/jpeg'
    assert get_content_type('foo.txt; charset=utf-8') == 'text/plain; charset=utf-8'



# Generated at 2022-06-13 22:44:50.317299
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('README.rst') == 'text/x-rst'
    assert get_content_type('/home/user/README.rst') == 'text/x-rst'
    assert get_content_type('README.txt') == 'text/plain'


if __name__ == '__main__':
    test_get_content_type()

# Generated at 2022-06-13 22:44:59.273043
# Unit test for function get_content_type
def test_get_content_type():
    """
    Test get_content_type function
    """

    assert get_content_type('/some/path/file.txt') == 'text/plain'
    assert get_content_type('/some/path/file.jpg.txt') == 'text/plain'
    assert get_content_type('/some/path/file.txt.jpg') == 'image/jpeg'
    assert get_content_type('/some/path/file.jpg.txt') == 'text/plain'
    assert get_content_type('/some/path/file') == None

# Generated at 2022-06-13 22:45:05.478573
# Unit test for function get_expired_cookies
def test_get_expired_cookies():
    now = time.time()
    cookie_text = 'name=value; expires=%s' % (now - 1)
    expired_cookies = get_expired_cookies(headers=[('Set-Cookie', cookie_text)], now=now)

    assert len(expired_cookies) == 1
    assert expired_cookies[0]['path'] == '/'
    assert expired_cookies[0]['name'] == 'name'



# Generated at 2022-06-13 22:45:07.648907
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    a = ExplicitNullAuth()
    assert True

# Generated at 2022-06-13 22:45:13.984392
# Unit test for function humanize_bytes
def test_humanize_bytes():
    # fmt: off
    assert humanize_bytes(1) == '1 B'
    assert humanize_bytes(1024, precision=1) == '1.0 kB'
    assert humanize_bytes(1024 * 123, precision=1) == '123.0 kB'
    assert humanize_bytes(1024 * 12342, precision=1) == '12.1 MB'
    assert humanize_bytes(1024 * 12342, precision=2) == '12.05 MB'
    assert humanize_bytes(1024 * 1234, precision=2) == '1.21 MB'
    assert humanize_bytes(1024 * 1234 * 1111, precision=2) == '1.31 GB'
    assert humanize_bytes(1024 * 1234 * 1111, precision=1) == '1.3 GB'
    # fmt: on

# Generated at 2022-06-13 22:45:15.612007
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    auth = ExplicitNullAuth()
    assert auth is not None
    assert callable(auth)

# Generated at 2022-06-13 22:45:24.215525
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    tmp={'key1': [{'key11': [{'key111': [1, 2, 3]}, {'key112': [6, 5, 4]}]}, {'key12': [7, 8, 9]}]}
    # tmp={'key1': [{'key11': [{'key111': [1, 2, 3]}, {'key112': [6, 5, 4]}]}, {'key12': [7, 8, 9]}]}
    dump = json.dumps(tmp)
    load = json.loads(dump)
    print(load)
    print(load['key1'][0])
    print(load['key1'][1])
    print(load['key1'][0]['key11'][0])
    print(load['key1'][0]['key11'][1])

# Generated at 2022-06-13 22:45:35.134921
# Unit test for function humanize_bytes
def test_humanize_bytes():
    tests = [
        (0, '0 B'),
        (1, '1 B'),
        (1024, '1.0 kB'),
        (1024 * 123, '123.0 kB'),
        (1024 * 12342, '12.1 MB'),
        (1024 * 12342, '12.05 MB', 2),
        (1024 * 1234, '1.21 MB', 2),
        (1024 * 1234 * 1111, '1.31 GB', 2),
        (1024 * 1234 * 1111, '1.3 GB', 1)
    ]


# Generated at 2022-06-13 22:45:37.345025
# Unit test for function repr_dict
def test_repr_dict():
    d = {'a': 1, 'b': 2}
    assert repr_dict(d) == pformat(d)

# Generated at 2022-06-13 22:45:49.309024
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('.bashrc') is None
    assert get_content_type('my.bin') is None
    assert get_content_type('my.bin') is None
    assert get_content_type('my.py') == 'text/x-python'
    assert get_content_type('my.py') == 'text/x-python'
    assert get_content_type('my.py') == 'text/x-python'
    assert get_content_type('my.html') == 'text/html'
    assert get_content_type('my.css') == 'text/css'
    assert get_content_type('my.js') == 'application/javascript'
    assert get_content_type('my.json') == 'application/json'

# Generated at 2022-06-13 22:45:50.609326
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    auth = ExplicitNullAuth()
    return auth

# Generated at 2022-06-13 22:45:57.486930
# Unit test for function humanize_bytes
def test_humanize_bytes():
    test_cases = (
        (1, '1 B'),
        (1024, '1.0 kB'),
        (1024 * 123, '123.0 kB'),
        (1024 * 12342, '12.1 MB'),
        (1024 * 12342, '12.05 MB'),
        (1024 * 1234, '1.21 MB'),
        (1024 * 1234 * 1111, '1.31 GB'),
        (1024 * 1234 * 1111, '1.3 GB')
    )
    for n, result in test_cases:
        assert humanize_bytes(n) == result

# Generated at 2022-06-13 22:46:03.038057
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    import io
    import sys
    import unittest

    sys.stdout = io.StringIO()

    class TestCase(unittest.TestCase):
        def test_request_header(self):
            class Request:
                headers = {'Authorization': 'Bearer foo'}

            request = Request()
            ExplicitNullAuth()(request)

            self.assertEqual(request.headers, {'Authorization': 'Bearer foo'})

    result = unittest.TextTestRunner(
        verbosity=2,
        failfast=True,
        resultclass=unittest.TextTestResult
    ).run(
        unittest.defaultTestLoader.loadTestsFromTestCase(
            TestCase
        )
    )

    sys.stdout = sys.__stdout__

    return result



# Generated at 2022-06-13 22:46:14.322776
# Unit test for function humanize_bytes
def test_humanize_bytes():
    assert humanize_bytes(1) == '1 B'
    assert humanize_bytes(1024) == '1.00 kB'
    assert humanize_bytes(1024 * 123) == '123.00 kB'
    assert humanize_bytes(1024 * 12342) == '12.05 MB'
    assert humanize_bytes(1024 * 12342, 2) == '12.05 MB'
    assert humanize_bytes(1024 * 1234, 2) == '1.21 MB'
    assert humanize_bytes(1024 * 1234 * 1111, 2) == '1.31 GB'
    assert humanize_bytes(1024 * 1234 * 1111, 1) == '1.3 GB'

# Generated at 2022-06-13 22:46:22.887825
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    class DummyRequest:
        def __init__(self, **kwargs):
            for name, value in kwargs.items():
                setattr(self, name, value)
    headers = [
        ('Host', 'example.com'),
        ('Set-Cookie', 'a=b'),
        ('Set-Cookie', 'c=d')
    ]
    request = DummyRequest(headers=headers)

    auth = ExplicitNullAuth()
    auth(request)

    assert not request.headers.get('Host'), request.headers
    assert not request.headers.get('Set-Cookie'), request.headers

# Generated at 2022-06-13 22:46:32.358520
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('foo.jpg') == 'image/jpeg'
    assert get_content_type('foo.txt') == 'text/plain'
    assert get_content_type('foo.html') == 'text/html'
    assert get_content_type('foo.png') == 'image/png'

    assert get_content_type('foo.txt; charset=utf-8') == \
        'text/plain; charset=utf-8'
    assert get_content_type('foo.txt; charset="utf-8"') == \
        'text/plain; charset="utf-8"'
    assert get_content_type('foo.txt; charset=') == \
        'text/plain; charset='

    assert get_content_type('foo.txt') is None
    assert get_content

# Generated at 2022-06-13 22:46:42.774733
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('foo.png') == 'image/png'
    assert get_content_type('foo.PNG') == 'image/png'

    assert get_content_type('foo.gif') == 'image/gif'
    assert get_content_type('foo.GIF') == 'image/gif'

    assert get_content_type('foo.jpg') == 'image/jpeg'
    assert get_content_type('foo.JPG') == 'image/jpeg'

    assert get_content_type('foo.html') == 'text/html'

    assert get_content_type('foo.js') == 'application/javascript'

    assert get_content_type('foo.pdf') == 'application/pdf'

    assert get_content_type('foo.css') == 'text/css'

    assert get_

# Generated at 2022-06-13 22:46:50.041367
# Unit test for function repr_dict
def test_repr_dict():
    assert repr_dict({}) == "{}"
    assert repr_dict({'a': 1}) == "{'a': 1}"
    assert repr_dict({'a': 1, 'b': 2}) == "{'a': 1, 'b': 2}"
    assert repr_dict({'a': 1, 'b': 2, 'c': 3}) == "{'a': 1, 'b': 2, 'c': 3}"
    assert repr_dict({'a': 1, 'b': [1, 2, 3]}) == "{'a': 1, 'b': [1, 2, 3]}"

# Generated at 2022-06-13 22:46:56.073845
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    # Define a JSON string
    json_string = """
        {"one" : "two",
         "three" : "four",
         "five" : "six"}
        """
    json_dict = load_json_preserve_order(json_string)
    # Test the order of the keys
    assert(list(json_dict.keys())[0] == "one")
    assert(list(json_dict.keys())[1] == "three")
    assert(list(json_dict.keys())[2] == "five")

# Generated at 2022-06-13 22:47:04.562408
# Unit test for function get_expired_cookies
def test_get_expired_cookies():
    headers = [
        ('Set-Cookie', 'SESSION_ID=123; Path=/'),
        ('Set-Cookie', 'SESSION_ID2=456; Path=/; expires=Tue, 23-Jun-2020 ' +
                       '09:53:53 GMT; Secure; HttpOnly'),
        ('Set-Cookie', 'SESSION_ID3=456; Path=/; max-age=360; Secure; ' +
                       'HttpOnly'),
        ('Set-Cookie', 'SESSION_ID4=456; Path=/; Secure; HttpOnly'),
    ]

    expired_cookies = get_expired_cookies(headers, now=time.time() + 200)

    # Test whether get_expired_cookies works correctly
    assert len(expired_cookies) == 2

# Generated at 2022-06-13 22:47:14.569677
# Unit test for function get_content_type
def test_get_content_type():
    import unittest

    class GetContentTypeTestCase(unittest.TestCase):
        def test_with_known_type(self):
            self.assertEqual(get_content_type('foo.txt'), 'text/plain')

        def test_with_unknown_type(self):
            self.assertIsNone(get_content_type('foo.wat'))

        def test_without_extension(self):
            self.assertIsNone(get_content_type('foo'))

    unittest.main()



# Generated at 2022-06-13 22:47:17.336604
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type("file.txt") == "text/plain"
    assert get_content_type("file.mp3") == "audio/mpeg"
    assert get_content_type("unknown.type") is None

# Generated at 2022-06-13 22:47:19.666524
# Unit test for function repr_dict
def test_repr_dict():
    assert repr_dict({1: {2: 3}}) == '{1: {2: 3}}'



# Generated at 2022-06-13 22:47:31.015310
# Unit test for function get_expired_cookies

# Generated at 2022-06-13 22:47:35.765129
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('text.txt') == 'text/plain'
    assert get_content_type('video.mp4') == 'video/mp4'
    assert get_content_type('text.txt.gz') == 'text/plain'

# Generated at 2022-06-13 22:47:36.393427
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    assert ExplicitNullAuth()

# Generated at 2022-06-13 22:47:44.266555
# Unit test for function humanize_bytes
def test_humanize_bytes():
    assert humanize_bytes(1) == "1 B"
    assert humanize_bytes(1.0) == "1 B"

    assert humanize_bytes(1024) == "1.0 kB"
    assert humanize_bytes(1024 * 123) == "123.0 kB"
    assert humanize_bytes(1024 * 12342) == "12.1 MB"
    assert humanize_bytes(1024 * 12342, 2) == "12.05 MB"
    assert humanize_bytes(1024 * 1234, 2) == "1.21 MB"
    assert humanize_bytes(1024 * 1234 * 1111, 2) == "1.31 GB"
    assert humanize_bytes(1024 * 1234 * 1111, 1) == "1.3 GB"



# Generated at 2022-06-13 22:47:47.754793
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    result = load_json_preserve_order(
        '{"f": true, "b": [1, 2, 3], "a": "alpha"}'
    )
    assert result == OrderedDict([
        ('f', True),
        ('b', [1, 2, 3]),
        ('a', 'alpha'),
    ])

# Generated at 2022-06-13 22:47:58.126049
# Unit test for function humanize_bytes
def test_humanize_bytes():

    if humanize_bytes(2) != '2 B':
        raise AssertionError

    if humanize_bytes(1024) != '1.0 kB':
        raise AssertionError

    if humanize_bytes(1024 * 123) != '123.0 kB':
        raise AssertionError

    if humanize_bytes(1024 * 12342) != '12.1 MB':
        raise AssertionError

    if humanize_bytes(1024 * 12342, 2) != '12.05 MB':
        raise AssertionError

    if humanize_bytes(1024 * 1234, 2) != '1.21 MB':
        raise AssertionError

    if humanize_bytes(1024 * 1234 * 1111, 2) != '1.31 GB':
        raise AssertionError


# Generated at 2022-06-13 22:48:01.915153
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('x.pdf') == 'application/pdf'
    assert (
        get_content_type('x.tar.gz') ==
        'application/x-gzip; charset=gzip'
    )
    assert get_content_type('x.pypi.tar.gz') is None

# Generated at 2022-06-13 22:48:07.596365
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    # Test the function using Python's unitest framework.
    import unittest

    class LoadJsonPreserveOrderTestCase(unittest.TestCase):
        def test_load_json_preserve_order(self):
            self.assertEqual(
                load_json_preserve_order('{"foo": "bar", "baz": ["qux"]}'),
                {'foo': 'bar', 'baz': ['qux']}
            )

    unittest.main()

# Generated at 2022-06-13 22:48:11.698709
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    assert ExplicitNullAuth()(None) is None
    assert ExplicitNullAuth()() is None
    assert ExplicitNullAuth()('Foo') == 'Foo'
    assert ExplicitNullAuth()(42) == 42

# Generated at 2022-06-13 22:48:14.081580
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    d1 = load_json_preserve_order('''{"a": 1, "b": 2, "c": 3}''')
    d2 = load_json_preserve_order('''{"b": 2, "c": 3, "a": 1}''')
    assert d1 == d2


# Generated at 2022-06-13 22:48:20.004470
# Unit test for function repr_dict
def test_repr_dict():
    assert repr_dict({}) == '{}'
    assert repr_dict({'a': 1}) == "{'a': 1}"
    assert repr_dict({'a': 1, 'b': 2}) == "{'a': 1, 'b': 2}"

# Generated at 2022-06-13 22:48:21.234723
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    assert ExplicitNullAuth()

# Generated at 2022-06-13 22:48:25.026580
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    x = load_json_preserve_order('{"a": 1, "b": 2, "c": 3}')
    assert x == {"a": 1, "b": 2, "c": 3}


# Generated at 2022-06-13 22:48:25.818274
# Unit test for function repr_dict
def test_repr_dict():
    assert repr_dict({'key': 'value'}) == "{'key': 'value'}"

# Generated at 2022-06-13 22:48:26.918691
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    auth = ExplicitNullAuth()



# Generated at 2022-06-13 22:48:34.661428
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('filename.html') == 'text/html'

    # Extension not recognised by mimetypes yields None
    assert get_content_type('filename.foobar') is None

    # Extensions with a leading dot are accepted...
    assert get_content_type('.htaccess') == 'text/plain'

    # but they must have at least one character
    assert get_content_type('.') is None

    # Extensions with a leading dot followed by
    # a number cause a ValueError
    try:
        assert get_content_type('.1') is None
    except ValueError:
        pass

    # Extensions with a leading dot that can be parsed as a float
    # cause a ValueError
    try:
        assert get_content_type('.0.1') is None
    except ValueError:
        pass

   

# Generated at 2022-06-13 22:48:44.488239
# Unit test for function get_expired_cookies

# Generated at 2022-06-13 22:48:57.849615
# Unit test for function humanize_bytes
def test_humanize_bytes():
    assert humanize_bytes(1) == '1 B'
    assert humanize_bytes(1024, precision=1) == '1.0 kB'
    assert humanize_bytes(1024 * 123, precision=1) == '123.0 kB'
    assert humanize_bytes(1024 * 12342, precision=1) == '12.1 MB'
    assert humanize_bytes(1024 * 12342, precision=2) == '12.05 MB'
    assert humanize_bytes(1024 * 1234, precision=2) == '1.21 MB'
    assert humanize_bytes(1024 * 1234 * 1111, precision=2) == '1.31 GB'
    assert humanize_bytes(1024 * 1234 * 1111, precision=1) == '1.3 GB'



# Generated at 2022-06-13 22:49:05.882641
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('file') is None
    assert get_content_type('file.png') == 'image/png'
    assert get_content_type('file.html') == 'text/html'
    assert get_content_type('file.css') == 'text/css'
    assert get_content_type('file.js') == 'application/javascript'
    assert get_content_type('file.zip') == 'application/zip'
    assert get_content_type('file.json') == 'application/json'
    assert get_content_type('file.pdf') == 'application/pdf'
    assert get_content_type('file.unknown') is None

# Generated at 2022-06-13 22:49:12.317260
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    import requests
    import types

    auth = ExplicitNullAuth()
    auth_is_a_callable = isinstance(auth, types.FunctionType)
    assert auth_is_a_callable
    resp = requests.get('https://httpbin.org/get', auth=auth)
    resp.raise_for_status()
    assert 'netrc' not in resp.text

# Generated at 2022-06-13 22:49:28.585609
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    import pytest


# Generated at 2022-06-13 22:49:37.862753
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    class ImplicitMockAuth(object):
        def __call__(*a):
            return 'implicit'

    headers = {
        'Authorization': 'basic',
        'Set-Cookie': 'A=B; expires=Wed, 21 Oct 2015 07:28:00 GMT',
        'Set-Cookie': 'C=D; max-age=0'
    }
    r = requests.Request(method='post', url='http://example.com', auth=ImplicitMockAuth(), headers=headers)
    http_prepare = r.prepare()
    assert http_prepare.headers['Authorization'] == 'basic'
    assert http_prepare.headers['Set-Cookie'] == 'A=B; expires=Wed, 21 Oct 2015 07:28:00 GMT'

# Generated at 2022-06-13 22:49:41.170415
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    auth = ExplicitNullAuth()

    res = auth(requests.Request('GET', 'http://example.com', auth=ExplicitNullAuth()))

    assert res is not None



# Generated at 2022-06-13 22:49:52.917931
# Unit test for function humanize_bytes
def test_humanize_bytes():
    tests = [
        (0, '0 B'),
        (1, '1 B'),
        (1023, '1023 B'),
        (1024, '1.00 kB'),
        (1025, '1.00 kB'),
        (1025 * 1024, '1.00 MB'),
        (1025 * 1024 + 1, '1.00 MB'),
        (1024 * 1024 * 1024, '1.00 GB'),
        (1024 * 1024 * 1024 + 1, '1.00 GB'),
        (1024 * 1024 * 1024 * 1024, '1.00 TB'),
        (1024 * 1024 * 1024 * 1024 + 1, '1.00 TB'),
        (1024 * 1024 * 1024 * 1024 * 1024, '1.00 PB')
    ]


# Generated at 2022-06-13 22:49:55.544999
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('filename.txt') == 'text/plain'
    assert get_content_type('filename.ext') == None

# Generated at 2022-06-13 22:49:56.553882
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    pass



# Generated at 2022-06-13 22:50:05.728901
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('foo.txt') == 'text/plain'
    assert get_content_type('foo.htm') == 'text/html'
    assert get_content_type('foo.html') == 'text/html'
    assert get_content_type('foo.css') == 'text/css'
    assert get_content_type('foo.js') == 'application/x-javascript'
    assert get_content_type('foo.json') == 'application/json'
    assert get_content_type('foo.gif') == 'image/gif'
    assert get_content_type('foo.jpg') == 'image/jpeg'
    assert get_content_type('foo.jpeg') == 'image/jpeg'
    assert get_content_type('foo.png') == 'image/png'
    assert get_

# Generated at 2022-06-13 22:50:13.469187
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('filename.pdf') == 'application/pdf'
    assert get_content_type('filename.json') == 'application/json'

    # test some image mimetypes
    assert get_content_type('filename.jpg') == 'image/jpeg'
    assert get_content_type('filename.jpeg') == 'image/jpeg'
    assert get_content_type('filename.gif') == 'image/gif'
    assert get_content_type('filename.png') == 'image/png'
    assert get_content_type('filename.tiff') == 'image/tiff'
    assert get_content_type('filename.tif') == 'image/tiff'

    # test some text mimetypes
    assert get_content_type('filename.txt') == 'text/plain'

    # test some

# Generated at 2022-06-13 22:50:16.713363
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    auth = ExplicitNullAuth()
    assert auth({}) is None

if __name__ == '__main__':
    test_ExplicitNullAuth___call__()

# Generated at 2022-06-13 22:50:18.431255
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    auth = ExplicitNullAuth()
    assert auth



# Generated at 2022-06-13 22:50:44.640723
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    """test load_json_preserve_order"""
    assert load_json_preserve_order('{"key":"val1", "key2":"val2"}') == {'key': 'val1', 'key2': 'val2'}
    assert list(load_json_preserve_order('{"key":"val1", "key2":"val2"}').items()) == [('key', 'val1'), ('key2', 'val2')]

# Generated at 2022-06-13 22:50:45.289406
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    auth = ExplicitNullAuth()
    assert auth

# Generated at 2022-06-13 22:50:54.180891
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    from requests.auth import AuthBase

    # Make sure that `ExplicitNullAuth` is a subclass of `AuthBase`.
    assert issubclass(ExplicitNullAuth, AuthBase)

    # Create a new instance of `AuthBase` class.
    auth = ExplicitNullAuth()

    # Make sure that the instance is callable and returs the same
    # request parameter that it gets.
    assert auth(None) is None
    assert auth(1) == 1
    assert auth(1.0) == 1.0
    assert auth('string') == 'string'

# Generated at 2022-06-13 22:51:00.429611
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    from requests import Session
    from unittest.mock import patch

    session = Session()
    session.auth = ExplicitNullAuth()
    with patch.object(session, 'request') as mock_request:
        session.get('https://example.org')
        mock_request.assert_called_once_with(
            'get',
            'https://example.org',
            auth=None,
        )


# Generated at 2022-06-13 22:51:07.552720
# Unit test for function repr_dict
def test_repr_dict():
    d = {"a": 1, "b": 2, "c": {"d": 1, "e": 2}}
    assert repr_dict(d) == \
           "{\n" \
           "    'a': 1,\n" \
           "    'b': 2,\n" \
           "    'c': {\n" \
           "        'd': 1,\n" \
           "        'e': 2\n" \
           "    }\n" \
           "}"

# Generated at 2022-06-13 22:51:16.760278
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    from requests.auth import HTTPBasicAuth
    from requests.auth import HTTPDigestAuth

    r = requests.Request('GET', 'http://www.wikipedia.org/', auth=ExplicitNullAuth())
    r.prepare()
    assert isinstance(r.auth, ExplicitNullAuth)

    r = requests.Request('GET', 'http://www.wikipedia.org/', auth=HTTPBasicAuth('user', 'pass'))
    r.prepare()
    assert isinstance(r.auth, HTTPBasicAuth)

    r = requests.Request('GET', 'http://www.wikipedia.org/', auth=HTTPDigestAuth('user', 'pass'))
    r.prepare()
    assert isinstance(r.auth, HTTPDigestAuth)

# Generated at 2022-06-13 22:51:23.032828
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    # Arrange
    expected = OrderedDict([
        ('1', 1),
        ('2', 2),
        ('3', 3)
    ])
    input_string = """
{
    "1": 1,
    "2": 2,
    "3": 3
}
    """

    # Act
    actual = load_json_preserve_order(input_string)

    # Assert
    assert expected == actual

# Generated at 2022-06-13 22:51:27.160490
# Unit test for function repr_dict
def test_repr_dict():
    d = dict(a=1, b=list(range(3)))
    d_repr = repr_dict(d)
    d_repr_expected = "{\n    'a': 1,\n    'b': [0, 1, 2]\n}"
    assert d_repr == d_repr_expected
    print("Test passed.")

test_repr_dict()

# Generated at 2022-06-13 22:51:28.931875
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    assert ExplicitNullAuth() is not None

# Generated at 2022-06-13 22:51:34.141353
# Unit test for function get_content_type
def test_get_content_type():
    filenames = ['index.html', 'js/myscript.js', 'img/logo.png', 'img/logo']
    correct = ['text/html', 'application/javascript', 'image/png', None]
    for f, c in zip(filenames, correct):
        assert get_content_type(f) == c

# Generated at 2022-06-13 22:51:56.473493
# Unit test for function get_content_type
def test_get_content_type():
    assert get_content_type('example.txt') == 'text/plain'

# Generated at 2022-06-13 22:52:01.495101
# Unit test for method __call__ of class ExplicitNullAuth
def test_ExplicitNullAuth___call__():
    import requests
    response = requests.get('https://httpbin.org/get', auth=ExplicitNullAuth())
    assert response.status_code == 200
    assert response.json()['url'] == 'https://httpbin.org/get'


# Generated at 2022-06-13 22:52:10.401079
# Unit test for function get_content_type
def test_get_content_type():
    assert not get_content_type(None)
    assert not get_content_type('')
    assert not get_content_type('foo.bar')
    assert get_content_type('foo.bin') == 'application/octet-stream'
    assert get_content_type('foo.txt') == 'text/plain'


if __name__ == '__main__':
    import doctest
    doctest.testmod()

# Generated at 2022-06-13 22:52:21.100678
# Unit test for function humanize_bytes
def test_humanize_bytes():
    assert humanize_bytes(1) == '1 B'
    assert humanize_bytes(1024, precision=1) == '1.0 kB'
    assert humanize_bytes(1024 * 123, precision=1) == '123.0 kB'
    assert humanize_bytes(1024 * 12342, precision=1) == '12.1 MB'
    assert humanize_bytes(1024 * 12342, precision=2) == '12.05 MB'
    assert humanize_bytes(1024 * 1234, precision=2) == '1.21 MB'
    assert humanize_bytes(1024 * 1234 * 1111, precision=2) == '1.31 GB'
    assert humanize_bytes(1024 * 1234 * 1111, precision=1) == '1.3 GB'



# Generated at 2022-06-13 22:52:22.208068
# Unit test for constructor of class ExplicitNullAuth
def test_ExplicitNullAuth():
    ExplicitNullAuth()

# Generated at 2022-06-13 22:52:30.853281
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    import os
    import time

    example_resp_file_name = os.path.abspath(
        os.path.join(os.path.dirname(__file__),
                     'example_response.json'))

    with open(example_resp_file_name) as f:
        example_resp = f.read()

    t0 = time.time()
    resp1 = load_json_preserve_order(example_resp)
    resp2 = json.loads(example_resp, object_pairs_hook=OrderedDict)
    assert resp1 == resp2
    t1 = time.time()
    print('Test load_json_preserve_order(): {}s'.format(t1-t0))

# Generated at 2022-06-13 22:52:42.038108
# Unit test for function get_expired_cookies
def test_get_expired_cookies():
    headers = [
        ('Set-Cookie', ('test0=value0; '
                        'expires=Sun, 25-Sep-2016 18:28:16 GMT; '
                        'path=/; HttpOnly')),
        ('Set-Cookie', ('test1=value1; '
                        'expires=Sun, 25-Sep-2016 18:28:16 GMT; '
                        'path=/')),
        ('Set-Cookie', ('test2=value2; expires=Sun, 25-Sep-2016 18:28:16 GMT')),
        ('Set-Cookie', ('test3=value3; Max-Age=1000'))
    ]

# Generated at 2022-06-13 22:52:51.746693
# Unit test for function humanize_bytes
def test_humanize_bytes():
    # Numbers from http://en.wikipedia.org/wiki/Kilobyte
    assert humanize_bytes(1) == '1 B'
    assert humanize_bytes(1024, precision=1) == '1.0 kB'
    assert humanize_bytes(1024 * 123, precision=1) == '123.0 kB'
    assert humanize_bytes(1024 * 12342, precision=1) == '12.1 MB'
    assert humanize_bytes(1024 * 12342, precision=2) == '12.05 MB'
    assert humanize_bytes(1024 * 1234, precision=2) == '1.21 MB'
    assert humanize_bytes(1024 * 1234 * 1111, precision=2) == '1.31 GB'

# Generated at 2022-06-13 22:53:01.130014
# Unit test for function get_expired_cookies
def test_get_expired_cookies():
    now = time.time()
    # First set-cookie header should be expired as it's max-age=0
    headers = [
        ('Set-Cookie', 'foo=bar; Secure; HttpOnly; SameSite=Strict; Path=/; Domain=localhost; Max-Age=0'),
        ('Set-Cookie', 'bar=baz; Secure; HttpOnly; SameSite=Strict; Path=/; Domain=localhost; Max-Age=3600')
    ]
    assert get_expired_cookies(headers, now=now) == [{'name': 'foo', 'path': '/'}]

# Generated at 2022-06-13 22:53:06.784099
# Unit test for function load_json_preserve_order
def test_load_json_preserve_order():
    assert load_json_preserve_order('{"a": 1, "b": 2, "c": 3}') == {
        'a': 1,
        'b': 2,
        'c': 3,
    }


if __name__ == '__main__':
    import os
    import sys
    import unittest

    # Make sure we find local modules
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

    # Unit tests
    from tests.utils_test import TestUtils  # NOQA

    unittest.main(exit=False)