# Automatically generated by Pynguin.
import ansible.module_utils.common.collections as module_0

def test_case_0():
    try:
        float_0 = 1485.1274
        var_0 = module_0.is_sequence(float_0)
        list_0 = [float_0, float_0, var_0, var_0]
        immutable_dict_0 = module_0.ImmutableDict()
        var_1 = immutable_dict_0.__eq__(list_0)
        var_2 = immutable_dict_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = None
        str_0 = '`f{'
        str_1 = ']4'
        float_0 = 3065.36
        dict_1 = {str_0: str_0, str_1: float_0}
        immutable_dict_0 = module_0.ImmutableDict(**dict_1)
        var_0 = immutable_dict_0.union(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        str_0 = '<>\rT@gLLqgz'
        var_0 = module_0.is_sequence(str_0)
        float_0 = -215.07
        var_1 = immutable_dict_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        tuple_0 = (immutable_dict_0,)
        str_0 = ' "-x&0! \nxz@l@'
        dict_0 = {str_0: tuple_0}
        var_0 = module_0.count(immutable_dict_0)
        var_1 = module_0.is_sequence(tuple_0, dict_0)
        str_1 = 'n ^\rW8HokC`I$<U,[.\t'
        var_2 = immutable_dict_0.__getitem__(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 0.0001
        var_0 = module_0.count(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        immutable_dict_1 = module_0.ImmutableDict()
        bool_0 = True
        dict_0 = {}
        var_0 = module_0.is_iterable(bool_0, dict_0)
        bytes_0 = None
        var_1 = immutable_dict_0.__eq__(bytes_0)
        str_0 = '|Dv\x0b+\nn\x0c'
        str_1 = 'o9T'
        dict_1 = {str_0: var_0, str_0: str_0, str_0: dict_0, str_1: bool_0}
        immutable_dict_2 = module_0.ImmutableDict(**dict_1)
        var_2 = immutable_dict_2.__repr__()
        list_0 = [immutable_dict_0, immutable_dict_0, immutable_dict_0]
        var_3 = immutable_dict_0.union(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        list_0 = [str_0]
        str_1 = '53W=K'
        str_2 = '\n    Returns a dictionary of url parts as parsed by urlparse,\n    but accounts for the fact that older versions of that\n    library do not support named attributes (ie. .netloc)\n    '
        tuple_0 = None
        var_0 = module_0.is_string(tuple_0)
        immutable_dict_0 = module_0.ImmutableDict()
        str_3 = '\x0bK'
        int_0 = 1540
        dict_0 = {str_1: list_0, str_2: str_1, str_1: str_0, str_3: int_0}
        immutable_dict_1 = module_0.ImmutableDict(**dict_0)
        str_4 = '\n_value:\n  description:\n    - List of the variable names requested.\n  type: list\n'
        str_5 = '--system-site-packages'
        str_6 = '$>3/sIYR1wnk'
        dict_1 = {str_4: str_0, str_5: str_5, str_6: list_0}
        immutable_dict_2 = module_0.ImmutableDict(**dict_1)
        var_1 = immutable_dict_2.difference(immutable_dict_1)
        immutable_dict_3 = module_0.ImmutableDict(*list_0)
        bytes_0 = None
        var_2 = immutable_dict_2.difference(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        list_0 = [str_0]
        str_1 = '53W=K'
        str_2 = '\n    Returns a dictionary of url parts as parsed by urlparse,\n    but accounts for the fact that older versions of that\n    library do not support named attributes (ie. .netloc)\n    '
        tuple_0 = None
        var_0 = module_0.is_string(tuple_0)
        immutable_dict_0 = module_0.ImmutableDict()
        str_3 = '\x0bK'
        int_0 = 1540
        dict_0 = {str_1: list_0, str_2: str_1, str_1: str_0, str_3: int_0}
        immutable_dict_1 = module_0.ImmutableDict(**dict_0)
        var_1 = immutable_dict_1.difference(immutable_dict_1)
        immutable_dict_2 = module_0.ImmutableDict(*list_0)
        bytes_0 = None
        var_2 = immutable_dict_0.difference(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        dict_0 = {immutable_dict_0: immutable_dict_0, immutable_dict_0: immutable_dict_0, immutable_dict_0: immutable_dict_0, immutable_dict_0: immutable_dict_0}
        int_0 = -2908
        var_0 = module_0.is_iterable(dict_0, int_0)
        var_1 = immutable_dict_0.__iter__()
        list_0 = [var_0]
        var_2 = immutable_dict_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        list_0 = [str_0, str_0]
        immutable_dict_0 = module_0.ImmutableDict()
        tuple_0 = (immutable_dict_0,)
        var_0 = module_0.count(list_0)
        str_1 = ' "-x&0! Axj3z@l@'
        set_0 = set()
        immutable_dict_1 = module_0.ImmutableDict()
        var_1 = immutable_dict_1.__eq__(set_0)
        var_2 = immutable_dict_0.__iter__()
        dict_0 = {str_1: tuple_0}
        var_3 = module_0.count(immutable_dict_0)
        var_4 = module_0.is_sequence(tuple_0, dict_0)
        str_2 = 'n ^\rW8HokC`I$<k,[.\t'
        var_5 = immutable_dict_1.__eq__(str_1)
        var_6 = immutable_dict_0.__getitem__(str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'dkt$HT&'
        immutable_dict_0 = module_0.ImmutableDict()
        immutable_dict_1 = module_0.ImmutableDict()
        var_0 = immutable_dict_1.__eq__(immutable_dict_0)
        list_0 = [str_0, str_0]
        immutable_dict_2 = module_0.ImmutableDict(*list_0)
    except BaseException:
        pass