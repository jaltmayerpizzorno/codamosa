# Automatically generated by Pynguin.
import tornado.netutil as module_0
import ssl as module_1
import socket as module_2

def test_case_0():
    try:
        int_0 = 2238
        bool_0 = None
        list_0 = module_0.bind_sockets(int_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        resolver_0 = module_0.Resolver()
        str_0 = 'eq'
        int_0 = -1212
        int_1 = -286
        socket_0 = module_0.bind_unix_socket(str_0, int_0, int_1)
        callable_0 = None
        callable_1 = module_0.add_accept_handler(socket_0, callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        override_resolver_0 = module_0.OverrideResolver()
    except BaseException:
        pass

def test_case_3():
    try:
        resolver_0 = module_0.Resolver()
        resolver_0.close()
        resolver_0.close()
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_4():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_5():
    try:
        s_s_l_context_0 = None
        s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        socket_0 = module_0.bind_unix_socket(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        blocking_resolver_0 = module_0.BlockingResolver()
    except BaseException:
        pass

def test_case_9():
    try:
        s_s_l_context_0 = module_1.SSLContext()
        str_0 = ''
        address_family_0 = module_2.AddressFamily.AF_QIPCRTR
        int_0 = 1248
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2238
        bool_0 = None
        str_0 = 'e\x0ch?J'
        int_1 = 1443
        socket_0 = module_0.bind_unix_socket(str_0, int_0)
        int_2 = 0
        address_family_0 = module_2.AddressFamily.AF_PPPOX
        list_0 = module_0.bind_sockets(int_2, str_0, address_family_0, int_1, int_2, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '+POIe~!^Ka <?'
        list_0 = [str_0, str_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Convert a yielded object into a `.Future`.\n\n    The default implementation accepts lists, dictionaries, and\n    Futures. This has the side effect of starting any coroutines that\n    did not start themselves, similar to `asyncio.ensure_future`.\n\n    If the `~functools.singledispatch` library is available, this function\n    may be extended to support additional types. For example::\n\n        @convert_yielded.register(asyncio.Future)\n        def _(asyncio_future):\n            return tornado.platform.asyncio.to_tornado_future(asyncio_future)\n\n    .. versionadded:: 4.1\n\n    '
        bool_0 = module_0.is_valid_ip(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '9'
        bool_0 = module_0.is_valid_ip(str_0)
        str_1 = 'gSm3~'
        dict_0 = {str_0: bool_0, str_1: str_0}
        override_resolver_0 = module_0.OverrideResolver(**dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 8888
        list_0 = module_0.bind_sockets(int_0)
        var_0 = len(list_0)
        int_1 = 80
        str_0 = 'localhost'
        list_1 = module_0.bind_sockets(int_1, str_0)
        var_1 = len(list_1)
        str_1 = '127.0.0.1'
        list_2 = module_0.bind_sockets(int_1, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'FF,uK=kNitJ546_bZ?'
        int_0 = -1115
        resolver_0 = module_0.Resolver()
        awaitable_0 = resolver_0.resolve(str_0, int_0)
        int_1 = 159
        address_family_0 = module_2.AddressFamily.AF_ECONET
        list_0 = [awaitable_0, resolver_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        awaitable_1 = override_resolver_0.resolve(str_0, int_1, address_family_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '/'
        int_0 = 412
        socket_0 = module_0.bind_unix_socket(str_0, int_0)
    except BaseException:
        pass