# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.hpux as module_0

def test_case_0():
    try:
        bool_0 = True
        h_p_u_x_hardware_0 = module_0.HPUXHardware(bool_0)
        var_0 = h_p_u_x_hardware_0.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '6u\x0b2}hV\nCcC#=N8U'
        tuple_0 = (str_0,)
        h_p_u_x_hardware_0 = module_0.HPUXHardware(tuple_0)
        list_0 = [h_p_u_x_hardware_0, str_0]
        set_0 = set()
        h_p_u_x_hardware_1 = module_0.HPUXHardware(set_0)
        var_0 = h_p_u_x_hardware_1.get_hw_facts(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 3267
        bool_0 = True
        h_p_u_x_hardware_0 = module_0.HPUXHardware(bool_0)
        var_0 = h_p_u_x_hardware_0.populate(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 820.773
        str_0 = 'kn|GdZ`;lL-iVy'
        h_p_u_x_hardware_0 = module_0.HPUXHardware(str_0)
        var_0 = h_p_u_x_hardware_0.get_memory_facts(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1129
        h_p_u_x_hardware_0 = module_0.HPUXHardware(int_0)
        var_0 = h_p_u_x_hardware_0.get_hw_facts()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = None
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0, var_0)
        str_0 = 'ansible_architecture'
        str_1 = 'ansible_distribution_version'
        str_2 = 'ia64'
        str_3 = 'B.11.31'
        str_4 = {str_0: str_2, str_1: str_3}
        var_1 = h_p_u_x_hardware_0.get_cpu_facts(str_4)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        str_0 = '/tmp'
        var_0 = {str_0: bool_0, str_0: str_0}
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0)
        int_0 = 0
        var_1 = h_p_u_x_hardware_0.get_cpu_facts()
        str_1 = 'processor_count'
        int_1 = {str_1: int_0}
        var_2 = var_1 == int_1
        str_2 = 'ansible_architecture'
        str_3 = 'ansible_distribution_version'
        str_4 = 'ia64'
        str_5 = 'B.11.23'
        str_6 = {str_2: str_4, str_3: str_5}
        var_3 = h_p_u_x_hardware_0.get_cpu_facts(str_6)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = dict()
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0)
        str_0 = 'ansible_architecture'
        str_1 = '9000/800'
        str_2 = {str_0: str_1}
        var_1 = h_p_u_x_hardware_0.get_cpu_facts(str_2)
    except BaseException:
        pass