# Automatically generated by Pynguin.
import ansible.module_utils.urls as module_0
import urllib.request as module_1

def test_case_0():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0, str_0, str_0]
        set_0 = set()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(str_0)
        missing_module_error_0 = module_0.MissingModuleError(custom_h_t_t_p_s_handler_0, str_0)
        var_0 = module_0.open_url(str_0, list_0, list_0, set_0, missing_module_error_0)
    except BaseException:
        pass

def test_case_1():
    try:
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection()
    except BaseException:
        pass

def test_case_2():
    try:
        proxy_error_0 = module_0.ProxyError()
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        var_0 = h_t_t_p_s_client_auth_handler_0.https_open(proxy_error_0)
    except BaseException:
        pass

def test_case_3():
    try:
        proxy_error_0 = module_0.ProxyError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(proxy_error_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -1816
        list_0 = [int_0, int_0]
        dict_0 = {}
        no_s_s_l_error_0 = module_0.NoSSLError(*list_0, **dict_0)
        missing_module_error_0 = module_0.MissingModuleError(int_0, no_s_s_l_error_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(missing_module_error_0)
        unix_h_t_t_p_s_connection_1 = module_0.UnixHTTPSConnection(unix_h_t_t_p_s_connection_0)
        var_0 = unix_h_t_t_p_s_connection_1.__call__()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'https://www.digi.com'
        bool_0 = True
        var_0 = module_0.maybe_add_ssl_handler(str_0, bool_0)
        dict_0 = {}
        proxy_error_0 = module_0.ProxyError(**dict_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(proxy_error_0)
        var_1 = unix_h_t_t_p_connection_0.connect()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = None
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(int_0)
        bool_0 = False
        float_0 = -3826.9879955496476
        list_0 = [float_0, float_0]
        request_0 = module_0.Request(bool_0, bool_0, float_0, list_0)
        str_0 = '\n    **Deprecated** Use :py:func:`platform.system` directly.\n\n    :returns: Name of the platform the module is running on in a native string\n\n    Returns a native string that labels the platform ("Linux", "Solaris", etc). Currently, this is\n    the resul& of calling :(y:func:`platform.system`.\n    '
        var_0 = request_0.delete(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'i!=Mr<yTn]I\n}\\XILKg4'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        var_0 = unix_h_t_t_p_handler_0.http_open(s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        float_0 = -3844.62071
        list_0 = [float_0, float_0]
        request_0 = module_0.Request(bool_0, float_0, float_0, list_0)
        str_0 = '\n    **Deprecated** Use :py:func:`platform.system` directly.\n\n    :returns: Name of the platform the module is running on in a native string\n\n    Returns a native string that labels the platform ("Linux", "Solaris", etc). Currently, this is\n    the result of calling :py:func:`platform.system`.\n    '
        var_0 = request_0.delete(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        parse_result_dotted_dict_0 = None
        var_0 = module_0.unix_socket_patch_httpconnection_connect()
        list_0 = [parse_result_dotted_dict_0]
        var_1 = module_0.maybe_add_ssl_handler(parse_result_dotted_dict_0, list_0)
        request_with_method_0 = None
        str_0 = '\n            Change active host/group. You can use hosts patterns as well eg.:\n            cd webservers\n            cd webservers:dbservers\n            cd webservers:!phoenix\n            cd webservers:&staging\n            cd webservers:dbservers:&staging:!phoenix\n        '
        dict_0 = {str_0: list_0}
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(dict_0)
        proxy_error_0 = module_0.ProxyError()
        tuple_0 = (proxy_error_0,)
        var_2 = module_0.build_ssl_validation_error(request_with_method_0, unix_h_t_t_p_handler_0, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        s_s_l_validation_handler_0 = None
        request_with_method_0 = None
        str_0 = 'Pm"k|)\x0bZZ+Z`i'
        var_0 = module_0.build_ssl_validation_error(s_s_l_validation_handler_0, request_with_method_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 3801.0
        str_0 = "( r5^0d\\mK<-=p'\r"
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(str_0)
        str_1 = 'q\\[yy'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(unix_h_t_t_p_s_connection_0, str_1)
        var_0 = s_s_l_validation_handler_0.validate_proxy_response(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        proxy_error_0 = module_0.ProxyError()
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(parse_result_dotted_dict_0)
        int_0 = -1097
        str_0 = "{/bb^D'"
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(unix_h_t_t_p_s_connection_0, int_0, str_0)
        var_0 = s_s_l_validation_handler_0.make_context(list_0, proxy_error_0)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = []
        proxy_error_0 = module_0.ProxyError(*list_0)
        float_0 = -5445.94729
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(proxy_error_0, float_0)
        s_s_l_validation_handler_1 = module_0.SSLValidationHandler(float_0, s_s_l_validation_handler_0)
        var_0 = s_s_l_validation_handler_1.get_ca_certs()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(custom_h_t_t_p_s_handler_0)
        set_0 = {s_s_l_validation_handler_1, custom_h_t_t_p_s_handler_0, custom_h_t_t_p_s_handler_0}
        var_1 = s_s_l_validation_handler_1.make_context(custom_h_t_t_p_s_handler_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        unix_h_t_t_p_s_connection_0 = None
        bool_0 = True
        missing_module_error_0 = module_0.MissingModuleError(unix_h_t_t_p_s_connection_0, bool_0)
        int_0 = 1423
        str_0 = 'AN>1'
        tuple_0 = (int_0, str_0)
        bytes_0 = b'|Kh'
        request_0 = module_0.Request(unix_h_t_t_p_s_connection_0, missing_module_error_0, tuple_0, bytes_0)
        bytes_1 = b'\xa2\xc6\x9b\x05'
        var_0 = module_0.rfc2822_date_string(bytes_1)
    except BaseException:
        pass

def test_case_15():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        var_0 = parse_result_dotted_dict_0.as_list()
        var_1 = module_0.prepare_multipart(parse_result_dotted_dict_0)
        float_0 = 0.0
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(float_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        request_0 = module_0.Request(custom_h_t_t_p_s_handler_0, s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_16():
    try:
        unix_h_t_t_p_connection_0 = None
        bool_0 = False
        float_0 = -3844.62071
        list_0 = [float_0, float_0]
        request_0 = module_0.Request(bool_0, float_0, float_0, list_0)
        var_0 = request_0.delete(unix_h_t_t_p_connection_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -1258.691
        list_0 = []
        proxy_error_0 = module_0.ProxyError(*list_0)
        float_1 = -5445.94729
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(proxy_error_0, float_1)
        s_s_l_validation_handler_1 = module_0.SSLValidationHandler(float_0, s_s_l_validation_handler_0)
        var_0 = s_s_l_validation_handler_1.get_ca_certs()
        int_0 = -3576
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(int_0)
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(h_t_t_p_s_client_auth_handler_0)
        var_1 = s_s_l_validation_handler_1.detect_no_proxy(unix_h_t_t_p_handler_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(custom_h_t_t_p_s_handler_0)
        int_1 = 301
        var_2 = module_0.prepare_multipart(int_1)
    except BaseException:
        pass

def test_case_18():
    try:
        proxy_error_0 = module_0.ProxyError()
        var_0 = module_0.basic_auth_header(proxy_error_0, proxy_error_0)
        str_0 = None
        list_0 = [str_0, str_0, str_0, str_0, str_0]
        set_0 = set()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(str_0)
        missing_module_error_0 = module_0.MissingModuleError(custom_h_t_t_p_s_handler_0, str_0)
        var_1 = module_0.open_url(str_0, list_0, list_0, set_0, missing_module_error_0)
    except BaseException:
        pass

def test_case_19():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        bool_0 = False
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        str_0 = "EQGf*\nY\nmK*.[ ^-'"
        str_1 = 'mr<9Dj\r-Myr?I=-j4=J'
        str_2 = 'JjU'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_2)
        list_0 = [s_s_l_validation_error_0, h_t_t_p_s_client_auth_handler_0, bool_0, unix_h_t_t_p_handler_0]
        dict_0 = {str_0: h_t_t_p_s_client_auth_handler_0, str_1: list_0}
        var_0 = module_0.fetch_file(bool_0, h_t_t_p_s_client_auth_handler_0, h_t_t_p_s_client_auth_handler_0, dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        str_0 = '\n    **Deprecated** Use :py:func:`platform.system` directly.\n\n    :returns: Name of the platform the module is running on in a native string\n\n    Returns a native string that labels the platform ("Linux", "Solaris", etc). Currently, this is\n    the result of calling :py:func:`platform.system`.\n    '
        str_1 = 'ftp'
        dict_0 = {str_1: bool_0, str_1: str_0, str_1: str_1}
        bytes_0 = b'=\xda\xa7\x07\x10\x98--\xf6\x86\x94\x98m\xb1'
        str_2 = 'Ol[\x0bK\nUO0 7d?5av&X'
        request_0 = module_0.Request(dict_0, bytes_0, str_1, str_2)
        bool_1 = False
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        dict_1 = None
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(dict_1)
        var_0 = module_0.fetch_url(bool_1, parse_result_dotted_dict_0, unix_h_t_t_p_connection_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'd\x1a+\\'
        dict_0 = {}
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(bytes_0, **dict_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(bytes_0, unix_h_t_t_p_handler_0)
        int_0 = 480
        list_0 = [unix_h_t_t_p_handler_0, unix_h_t_t_p_handler_0, bytes_0]
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_0)
        no_s_s_l_error_0 = module_0.NoSSLError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(no_s_s_l_error_0)
        missing_module_error_0 = module_0.MissingModuleError(unix_h_t_t_p_s_connection_0, no_s_s_l_error_0)
        dict_1 = None
        var_0 = module_0.open_url(s_s_l_validation_handler_0, int_0, s_s_l_validation_error_0, missing_module_error_0, dict_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'MY+K1j#%'
        list_0 = [str_0]
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        bool_0 = False
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(list_0)
        no_s_s_l_error_0 = module_0.NoSSLError(*list_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(no_s_s_l_error_0, unix_h_t_t_p_connection_0)
        s_s_l_validation_handler_1 = module_0.SSLValidationHandler(unix_h_t_t_p_connection_0, s_s_l_validation_handler_0)
        var_0 = s_s_l_validation_handler_1.http_request(bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = -1342
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        var_0 = custom_h_t_t_p_s_handler_0.https_open(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        connection_error_0 = None
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(connection_error_0)
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(unix_h_t_t_p_connection_0)
        var_0 = unix_h_t_t_p_connection_0.__call__()
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'htYs://fww.digi.gom'
        bool_0 = True
        var_0 = module_0.maybe_add_ssl_handler(str_0, bool_0)
        proxy_error_0 = module_0.ProxyError()
        no_s_s_l_error_0 = module_0.NoSSLError()
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        int_0 = -4806
        connection_error_0 = module_0.ConnectionError()
        dict_0 = {no_s_s_l_error_0: bool_0}
        list_0 = [bool_0, int_0, connection_error_0]
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        request_with_method_0 = module_0.RequestWithMethod(connection_error_0, dict_0, list_0, h_t_t_p_s_client_auth_handler_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = -9
        var_0 = module_0.getpeercert(int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        float_0 = -668.97262
        proxy_error_0 = module_0.ProxyError()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, float_0, proxy_error_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
    except BaseException:
        pass

def test_case_28():
    try:
        float_0 = 512.0
        int_0 = 535000
        bytes_0 = b'#\xa41D'
        bytes_1 = b'd\x1cJL\x99\xa6\xa5UjU?\xc4N\x15\xf6p\xc8'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(bytes_1)
        request_with_method_0 = None
        var_0 = module_0.fetch_url(float_0, int_0, bytes_0, unix_h_t_t_p_handler_0, request_with_method_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bool_0 = False
        str_0 = 'Lly+KB)r%/r@Tjr38'
        var_0 = module_0.generic_urlparse(str_0)
        bytes_0 = b'\xdb\x13}\x85\x05\xfa#\x96@\xdb65\xe4'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(bytes_0)
        str_1 = '\nC\\pU\x0cDEGuHv?TYAaVJ['
        dict_0 = {str_0: str_1}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        missing_module_error_0 = module_0.MissingModuleError(bool_0, parse_result_dotted_dict_0)
        missing_module_error_1 = module_0.MissingModuleError(dict_0, missing_module_error_0)
        str_2 = '2De7GYMQ\tl_Uz\t'
        list_0 = [bool_0, str_0, str_0]
        missing_module_error_2 = module_0.MissingModuleError(str_2, list_0)
        float_0 = -1655.8
        dict_1 = {}
        unix_h_t_t_p_handler_1 = module_0.UnixHTTPHandler(float_0, **dict_1)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(missing_module_error_2, unix_h_t_t_p_handler_1)
        var_1 = s_s_l_validation_handler_0.validate_proxy_response(unix_h_t_t_p_handler_0, missing_module_error_1)
    except BaseException:
        pass

def test_case_30():
    try:
        proxy_error_0 = module_0.ProxyError()
        list_0 = [proxy_error_0, proxy_error_0, proxy_error_0, proxy_error_0]
        missing_module_error_0 = None
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(missing_module_error_0)
        connection_error_0 = None
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(parse_result_dotted_dict_0)
        no_s_s_l_error_0 = module_0.NoSSLError()
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        var_0 = module_0.open_url(list_0, unix_h_t_t_p_s_connection_0, connection_error_0, parse_result_dotted_dict_0, custom_h_t_t_p_s_handler_0, no_s_s_l_error_0, s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_31():
    try:
        unix_h_t_t_p_connection_0 = None
        bool_0 = False
        float_0 = 0.0001
        float_1 = -2068.6
        list_0 = [float_0, float_1]
        request_0 = module_0.Request(bool_0, float_0, float_1, list_0)
        s_s_l_validation_handler_0 = None
        list_1 = [bool_0, unix_h_t_t_p_connection_0, s_s_l_validation_handler_0]
        no_s_s_l_error_0 = module_0.NoSSLError(*list_1)
        int_0 = 1355
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(no_s_s_l_error_0, int_0)
        var_0 = request_0.get(h_t_t_p_s_client_auth_handler_0)
    except BaseException:
        pass

def test_case_32():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        var_0 = module_0.prepare_multipart(parse_result_dotted_dict_0)
        bytes_0 = b''
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(bytes_0)
        var_1 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = False
        float_0 = -3844.62071
        var_0 = module_0.unix_socket_patch_httpconnection_connect()
        list_0 = [float_0, float_0]
        request_0 = module_0.Request(bool_0, float_0, float_0, list_0)
        proxy_error_0 = module_0.ProxyError()
        var_1 = request_0.head(proxy_error_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = False
        float_0 = -3844.62071
        list_0 = [float_0, float_0, float_0]
        request_0 = module_0.Request(bool_0, float_0, float_0, list_0)
        str_0 = 'Linux'
        dict_0 = {str_0: list_0, str_0: float_0, str_0: float_0}
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(dict_0)
        var_0 = request_0.options(unix_h_t_t_p_connection_0, **dict_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bool_0 = False
        float_0 = -3827.7239346073493
        list_0 = [float_0, float_0]
        request_0 = module_0.Request(bool_0, bool_0, float_0, list_0)
        str_0 = '\n    **Deprecated** Use :py:func:`platform.system` directly.\n\n    :returns: Name of the platform the module is running on in a native string\n\n    Returns a native string that labels the platform ("Linux", "Solaris", etc). Currently, this is\n    the result of calling :py:func:`platform.system`.\n    '
        var_0 = request_0.delete(str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        bool_0 = False
        float_0 = -3844.62071
        list_0 = [float_0]
        request_0 = module_0.Request(bool_0, float_0, float_0, list_0)
        str_0 = '2HS{al0r#sZ&h`<'
        str_1 = '+hm/+t4t@_XTc`c\t|'
        dict_0 = {str_0: list_0, str_0: bool_0, str_1: list_0, str_0: str_0}
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(dict_0)
        var_0 = request_0.put(unix_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '\\fM@\r 9lCIj'
        dict_0 = {str_0: str_0, str_0: str_0}
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        dict_1 = {str_0: h_t_t_p_s_client_auth_handler_0, str_0: str_0, str_0: str_0, str_0: dict_0}
        var_0 = module_0.prepare_multipart(dict_1)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'https://www.gooNle.com'
        var_0 = module_1.urlopen(str_0)
    except BaseException:
        pass

def test_case_39():
    try:
        dict_0 = None
        bool_0 = True
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        int_0 = -1329
        unix_h_t_t_p_s_connection_0 = None
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_s_connection_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        request_0 = module_0.Request(dict_0, bool_0, parse_result_dotted_dict_0, int_0, unix_h_t_t_p_handler_0, s_s_l_validation_error_0)
        str_0 = 'd=Xxik"bA'
        var_0 = request_0.delete(str_0)
    except BaseException:
        pass

def test_case_40():
    try:
        bool_0 = False
        float_0 = -3827.7239346073493
        list_0 = [float_0, float_0]
        request_0 = module_0.Request(bool_0, bool_0, float_0, list_0)
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        str_0 = 'iU2M01'
        missing_module_error_0 = module_0.MissingModuleError(parse_result_dotted_dict_0, str_0)
        no_s_s_l_error_0 = module_0.NoSSLError()
        proxy_error_0 = module_0.ProxyError()
        dict_0 = {}
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(proxy_error_0, **dict_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(no_s_s_l_error_0, unix_h_t_t_p_handler_0)
        custom_h_t_t_p_s_connection_0 = None
        var_0 = module_0.open_url(missing_module_error_0, parse_result_dotted_dict_0, s_s_l_validation_handler_0, custom_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_41():
    try:
        dict_0 = None
        bool_0 = True
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        int_0 = -1329
        unix_h_t_t_p_s_connection_0 = None
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_s_connection_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        request_0 = module_0.Request(dict_0, bool_0, parse_result_dotted_dict_0, int_0, unix_h_t_t_p_handler_0, s_s_l_validation_error_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, s_s_l_validation_error_0)
        var_0 = s_s_l_validation_handler_0.make_context(dict_0, request_0)
    except BaseException:
        pass

def test_case_42():
    try:
        bool_0 = False
        float_0 = -3827.7239346073493
        list_0 = [float_0, float_0]
        request_0 = module_0.Request(bool_0, bool_0, float_0, list_0)
        connection_error_0 = module_0.ConnectionError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(connection_error_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(unix_h_t_t_p_s_connection_0)
        unix_h_t_t_p_s_connection_1 = module_0.UnixHTTPSConnection(custom_h_t_t_p_s_handler_0)
        no_s_s_l_error_0 = module_0.NoSSLError()
        missing_module_error_0 = module_0.MissingModuleError(unix_h_t_t_p_s_connection_1, no_s_s_l_error_0)
        str_0 = 'n|#6|H+4tH^5'
        str_1 = '@[E\n,<~T4UXZ'
        str_2 = 'U</D^B!9'
        str_3 = 'n1'
        dict_0 = {str_0: no_s_s_l_error_0, str_1: request_0, str_2: float_0, str_3: no_s_s_l_error_0}
        var_0 = request_0.post(missing_module_error_0, **dict_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = '5r)\\:]XJ+&/"2N'
        str_1 = 'AcCS\nM\t9{$'
        str_2 = ',JI L\te3K'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
        list_0 = [str_0, dict_0]
        bytes_0 = b'\xfe\xdd\\\x8f\x88\x96y.'
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bytes_0)
        var_0 = unix_h_t_t_p_connection_0.__call__(*list_0)
        bool_0 = False
        float_0 = -3827.7239346073493
        list_1 = [float_0, float_0]
        request_0 = module_0.Request(bool_0, bool_0, float_0, list_1)
        str_3 = '\n    **Deprecated** Use :py:func:`platform.system` directly.\n\n    :returns: Name of the platform the module is running on in a native string\n\n    Returns a native string that labels the platform ("Linux", "Solaris", etc). Currently, this is\n    the result of calling :py:func:`platform.system`.\n    '
        var_1 = request_0.delete(str_3)
    except BaseException:
        pass

def test_case_44():
    try:
        set_0 = set()
        int_0 = 1455
        custom_h_t_t_p_s_connection_0 = None
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(int_0)
        tuple_0 = ()
        list_0 = []
        request_0 = module_0.Request(custom_h_t_t_p_s_connection_0, unix_h_t_t_p_connection_0, unix_h_t_t_p_connection_0, unix_h_t_t_p_connection_0, tuple_0, unix_h_t_t_p_connection_0, list_0, unix_h_t_t_p_connection_0)
        var_0 = request_0.delete(set_0)
    except BaseException:
        pass

def test_case_45():
    try:
        dict_0 = None
        bool_0 = False
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        int_0 = 304
        unix_h_t_t_p_s_connection_0 = None
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_s_connection_0)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        request_0 = module_0.Request(dict_0, bool_0, parse_result_dotted_dict_0, int_0, unix_h_t_t_p_handler_0, s_s_l_validation_error_0)
        str_0 = '\n26:1z(\x0cnz'
        var_0 = request_0.delete(str_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'V4c\\fM@\r 9lCIj'
        dict_0 = {str_0: str_0, str_0: str_0}
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        dict_1 = {str_0: h_t_t_p_s_client_auth_handler_0, str_0: str_0, str_0: str_0, str_0: dict_0, str_0: h_t_t_p_s_client_auth_handler_0}
        var_0 = module_0.prepare_multipart(dict_1)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'https://docs.ansible.com/ansible/latest/portal/'
        int_0 = 3
        var_0 = module_1.urlopen(str_0, int_0)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = 'https://www.digi.com'
        bool_0 = False
        var_0 = module_0.maybe_add_ssl_handler(str_0, bool_0)
        proxy_error_0 = None
        str_1 = None
        str_2 = '.Odn'
        dict_0 = {str_1: str_0, str_2: proxy_error_0, str_2: str_2}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict(**dict_0)
    except BaseException:
        pass

def test_case_49():
    try:
        bool_0 = False
        float_0 = -3826.531095883596
        list_0 = [float_0, bool_0, bool_0, bool_0]
        request_0 = module_0.Request(bool_0, bool_0, float_0, list_0)
        int_0 = 204
        h_t_t_p_s_connection_0 = None
        var_0 = request_0.patch(int_0, h_t_t_p_s_connection_0)
    except BaseException:
        pass