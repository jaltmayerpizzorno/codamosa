# Automatically generated by Pynguin.
import ansible.plugins.action.validate_argument_spec as module_0

def test_case_0():
    try:
        bytes_0 = b'v\xede\x1f\x81\x9e\x0c\xb9@B\xd8\x89]'
        set_0 = {bytes_0, bytes_0}
        tuple_0 = ()
        float_0 = 319.0
        bytes_1 = b'\x1b'
        set_1 = {float_0, float_0, float_0, bytes_1}
        int_0 = 3646
        tuple_1 = (set_1, int_0)
        bool_0 = False
        float_1 = -802.34
        action_module_0 = module_0.ActionModule(tuple_1, int_0, set_1, bool_0, float_1, set_1)
        var_0 = action_module_0.get_args_from_task_vars(set_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'File does not exist'
        str_1 = 'qFy'
        bool_0 = True
        int_0 = 131072
        action_module_0 = module_0.ActionModule(bool_0, str_0, str_1, str_1, bool_0, int_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        int_0 = -254
        tuple_0 = ()
        bytes_0 = b'r\xd8\x10\xb3\xfeTn\x01r'
        str_0 = '6zUih(J'
        str_1 = 'v\x0b$_-Df#K^3Sm&i&2[L'
        float_0 = 682.617
        list_1 = [str_1, str_1]
        str_2 = '=s"f~c'
        str_3 = 'ppc64iseries'
        action_module_0 = module_0.ActionModule(str_0, str_1, float_0, list_1, str_2, str_3)
        dict_1 = {str_0: int_0, str_0: action_module_0}
        action_module_1 = module_0.ActionModule(int_0, tuple_0, bytes_0, action_module_0, int_0, dict_1)
        var_0 = action_module_1.get_args_from_task_vars(dict_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        str_0 = ''
        str_1 = 'qFy'
        bool_1 = True
        int_0 = 131094
        set_0 = {int_0}
        float_0 = -4743.53
        str_2 = 'j/lq'
        bool_2 = False
        str_3 = 'DragonFly'
        dict_0 = {int_0: bool_0, str_1: str_3, bool_0: str_2, str_2: str_3}
        list_0 = None
        bytes_0 = b'\xc4\nf\xa6\xba\x17VW\xe6B\xb7'
        tuple_0 = (list_0,)
        int_1 = -1295
        bool_3 = False
        action_module_0 = module_0.ActionModule(tuple_0, int_1, bool_3, dict_0, float_0, bytes_0)
        float_1 = None
        action_module_1 = module_0.ActionModule(float_1, float_0, set_0, tuple_0, set_0, dict_0)
        action_module_2 = module_0.ActionModule(bytes_0, action_module_0, action_module_1, set_0, str_0, int_1)
        dict_1 = {bool_1: dict_0, int_0: dict_0, int_0: action_module_2}
        int_2 = -1001
        bytes_1 = b'\xfb\x82P\x93f\x89&\xb0t'
        tuple_1 = (action_module_0, list_0)
        str_4 = 'Y&'
        action_module_3 = module_0.ActionModule(dict_1, tuple_0, int_2, bytes_1, tuple_1, str_4)
        float_2 = -656.831714
        bytes_2 = b'\x94r\xf6\x910M\xd0Pmj\xb4\xa2\x1878'
        action_module_4 = module_0.ActionModule(dict_0, list_0, action_module_3, tuple_0, float_2, bytes_2)
        action_module_5 = module_0.ActionModule(set_0, float_0, str_2, bool_2, action_module_4, dict_1)
        var_0 = action_module_4.run(dict_1, bool_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'NDrk'
        bytes_0 = b'\x16\xf7\xe4'
        dict_0 = {str_0: bytes_0, str_0: str_0}
        bool_0 = True
        float_0 = None
        tuple_0 = (float_0, bool_0)
        bytes_1 = b'\xfar{4!+\x14&'
        set_0 = {bool_0, tuple_0, bytes_1, bytes_0}
        action_module_0 = module_0.ActionModule(bytes_1, set_0, bytes_0, str_0, bool_0, bytes_1)
        str_1 = '`?klFE'
        var_0 = action_module_0.get_args_from_task_vars(dict_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'qAg*xhnd/M5~'
        str_1 = 'NDrk'
        bytes_0 = b'\x16\xf7\xe4'
        dict_0 = {str_1: bytes_0, str_0: str_1}
        bool_0 = True
        bool_1 = True
        float_0 = None
        tuple_0 = (float_0, bool_0)
        bytes_1 = b'\xfar{4!+\x14&'
        set_0 = {bool_1, tuple_0, bytes_1, bytes_0}
        action_module_0 = module_0.ActionModule(bytes_1, set_0, bytes_0, str_0, bool_1, bytes_1)
        var_0 = action_module_0.get_args_from_task_vars(dict_0, str_1)
    except BaseException:
        pass