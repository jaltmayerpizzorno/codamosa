# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_2():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_3():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(ansible_base_y_a_m_l_object_0)
        var_1 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        ansible_unicode_1 = module_0.AnsibleUnicode()
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(ansible_unicode_1)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(ansible_sequence_0)
        str_0 = 'z}/$xKbQ,'
        str_1 = ',YH$,yTQx4Dxj'
        var_2 = ansible_vault_encrypted_unicode_0.format_map(str_1)
        ansible_unicode_2 = module_0.AnsibleUnicode(**dict_0)
        var_3 = ansible_vault_encrypted_unicode_0.__eq__(ansible_unicode_2)
        var_4 = ansible_vault_encrypted_unicode_0.__add__(str_0)
        int_0 = 1147
        var_5 = ansible_vault_encrypted_unicode_0.__add__(int_0)
        var_6 = ansible_vault_encrypted_unicode_0.swapcase()
        str_2 = 'online'
        var_7 = ansible_vault_encrypted_unicode_0.__mul__(str_2)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1194.949
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.isascii()
        var_1 = ansible_vault_encrypted_unicode_0.capitalize()
        dict_0 = {}
        var_2 = ansible_vault_encrypted_unicode_0.__mod__(dict_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        float_1 = 0.2
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_1)
        dict_1 = {}
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_1)
        set_0 = None
        var_3 = ansible_vault_encrypted_unicode_1.__contains__(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1636.8
        str_0 = "z\td&'.W%><c"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = '_!"P'
        var_0 = ansible_vault_encrypted_unicode_0.__rmod__(str_1)
        var_1 = ansible_vault_encrypted_unicode_0.replace(float_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'}$\xb6\xb0\x83\x1eJ\n'
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.center(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        set_0 = {ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.swapcase()
        tuple_0 = ()
        dict_0 = {}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_1 = ansible_vault_encrypted_unicode_1.endswith(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = '@>I|S\rfmw|:gcJ|1'
        list_0 = [str_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, str_0]
        str_1 = 'requirements.yml'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.index(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = None
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.partition(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = []
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
        tuple_0 = ()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.rjust(ansible_unicode_0, *list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        bytes_0 = b'C1K\xc7(U'
        str_0 = None
        str_1 = 'HY ^AjN'
        dict_0 = {str_0: str_0, str_0: bytes_0, str_1: ansible_unicode_0, str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.lstrip()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.rpartition(ansible_unicode_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__len__()
        var_1 = ansible_vault_encrypted_unicode_0.rstrip()
        int_0 = -1088
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        set_0 = set()
        list_0 = [set_0, set_0]
        set_1 = set()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_1)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_2)
        var_2 = ansible_vault_encrypted_unicode_3.__getslice__(list_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__len__()
        str_0 = 'tDO3=N'
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.rstrip()
        int_0 = -1088
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        set_0 = set()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_2)
        bool_1 = True
        var_3 = ansible_vault_encrypted_unicode_2.startswith(bool_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 2582
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_16():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0, set_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__repr__()
        str_0 = "{{u[-1bY'zKp(%Vx\x0b"
        var_1 = ansible_vault_encrypted_unicode_0.__le__(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ']611X=\rx"@'
        bool_0 = False
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(bool_0, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        dict_0 = {ansible_base_y_a_m_l_object_0: ansible_unicode_0, ansible_unicode_0: ansible_base_y_a_m_l_object_0, ansible_vault_encrypted_unicode_0: ansible_vault_encrypted_unicode_0}
        var_0 = ansible_vault_encrypted_unicode_0.join(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'Iw#nR&{\x0cIf\x0c2Z[lr'
        dict_0 = {str_0: str_0, str_0: str_0}
        tuple_0 = (dict_0,)
        list_0 = [tuple_0, tuple_0]
        str_1 = '\n0-1p<Y'
        float_0 = -734.6678
        complex_0 = None
        tuple_1 = (list_0, str_1, float_0, complex_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        list_1 = [ansible_vault_encrypted_unicode_0]
        var_0 = ansible_vault_encrypted_unicode_1.ljust(list_1)
    except BaseException:
        pass

def test_case_20():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.splitlines()
        bytes_0 = b'\xd49\x94!0\xb6\xf7Y;\x04\x87C\x88O;\x10'
        var_1 = ansible_vault_encrypted_unicode_0.__radd__(bytes_0)
        float_0 = 0.5
        var_2 = ansible_vault_encrypted_unicode_0.rindex(float_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'nHnm1\udcc9_\udcc6Lf'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '2911.231449'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_sequence_0 = module_0.AnsibleSequence()
        complex_0 = None
        var_1 = ansible_vault_encrypted_unicode_0.find(complex_0)
    except BaseException:
        pass

def test_case_23():
    try:
        tuple_0 = ()
        float_0 = -6366.229
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(tuple_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = -3548.9
        str_0 = "z\td&'.W%><c"
        str_1 = '2911.231449'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.replace(float_0, str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        set_0 = None
        int_0 = -792
        str_0 = ''
        dict_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        float_0 = 1901.113
        dict_1 = {}
        tuple_0 = (float_0, dict_1, int_0)
        tuple_1 = (int_0, str_0, ansible_vault_encrypted_unicode_0, tuple_0)
        list_0 = []
        tuple_2 = (set_0, tuple_1, list_0, int_0)
        str_1 = None
        str_2 = ',]H\r_R'
        dict_2 = {str_1: str_1, str_2: str_2}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_2)
        var_0 = ansible_vault_encrypted_unicode_1.__ge__(tuple_2)
    except BaseException:
        pass

def test_case_26():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        str_0 = 'gXBM[\n[=mJGbh(E)Z'
        int_0 = 438
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.count(ansible_unicode_0, str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        list_0 = []
        str_0 = 'V1#+k?TDu\x0c^_'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'IH"v"('
        set_0 = {str_0, str_0, str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.lower()
        list_0 = []
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_1 = ansible_vault_encrypted_unicode_1.isupper()
        var_2 = ansible_vault_encrypted_unicode_1.isdecimal()
        tuple_0 = ()
        var_3 = ansible_vault_encrypted_unicode_1.join(tuple_0)
        var_4 = ansible_vault_encrypted_unicode_1.__contains__(ansible_vault_encrypted_unicode_1)
        complex_0 = None
        var_5 = ansible_vault_encrypted_unicode_1.rfind(complex_0)
    except BaseException:
        pass

def test_case_29():
    try:
        dict_0 = {}
        str_0 = 'a>i>#Q*'
        list_0 = [str_0, dict_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.rstrip()
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_0)
        ansible_unicode_1 = module_0.AnsibleUnicode()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_unicode_2 = module_0.AnsibleUnicode(**dict_0)
        tuple_0 = (ansible_unicode_0,)
        var_1 = ansible_vault_encrypted_unicode_0.rfind(ansible_vault_encrypted_unicode_0, tuple_0)
    except BaseException:
        pass

def test_case_30():
    try:
        dict_0 = {}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        str_0 = '2^eFHU2VK'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [ansible_vault_encrypted_unicode_1, ansible_vault_encrypted_unicode_1]
        var_1 = ansible_vault_encrypted_unicode_1.format()
        dict_1 = {}
        var_2 = ansible_vault_encrypted_unicode_1.format(**dict_1)
        list_1 = [list_0, str_0, list_0]
        float_0 = -2824.936661
        list_2 = [float_0, float_0, float_0, float_0]
        int_0 = 2742
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_3 = ansible_vault_encrypted_unicode_2.casefold()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_4 = ansible_vault_encrypted_unicode_1.format_map(ansible_unicode_0)
        var_5 = ansible_vault_encrypted_unicode_1.isupper()
        var_6 = ansible_vault_encrypted_unicode_1.isupper()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_2)
        var_7 = ansible_vault_encrypted_unicode_3.lower()
        var_8 = ansible_vault_encrypted_unicode_3.isprintable()
        bool_0 = True
        tuple_0 = ()
        var_9 = ansible_vault_encrypted_unicode_1.join(tuple_0)
        float_1 = -108.0
        var_10 = ansible_vault_encrypted_unicode_1.__getslice__(bool_0, float_1)
        var_11 = ansible_vault_encrypted_unicode_3.format(*list_1)
        var_12 = ansible_vault_encrypted_unicode_1.isalnum()
        ansible_mapping_0 = module_0.AnsibleMapping()
        set_0 = {var_9}
        var_13 = ansible_vault_encrypted_unicode_3.__str__()
        var_14 = ansible_vault_encrypted_unicode_3.__getslice__(ansible_mapping_0, set_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '#cG\rrv\tv2\\@'
        complex_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(complex_0)
        list_0 = [str_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_1.__add__(ansible_vault_encrypted_unicode_0)
        float_0 = 454.7
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_2.rindex(str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        bytes_0 = b'\xd1!'
        bytes_1 = b'r\xfd\xeczk\x95*'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_1)
        var_0 = ansible_vault_encrypted_unicode_1.replace(ansible_vault_encrypted_unicode_0, bytes_0)
    except BaseException:
        pass