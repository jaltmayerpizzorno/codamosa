# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3

def test_case_0():
    pass

def test_case_1():
    complex_0 = None
    dict_0 = {complex_0: complex_0}
    field_0 = module_0.from_json_schema(dict_0)

def test_case_2():
    dict_0 = {}
    tuple_0 = module_0.get_valid_types(dict_0)

def test_case_3():
    complex_0 = None
    dict_0 = {complex_0: complex_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)

def test_case_4():
    schema_definitions_0 = module_1.SchemaDefinitions()
    var_0 = module_0.to_json_schema(schema_definitions_0)

def test_case_5():
    complex_0 = None
    dict_0 = {complex_0: complex_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.from_json_schema(dict_0, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_6():
    complex_0 = None
    dict_0 = {complex_0: complex_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_7():
    complex_0 = None
    dict_0 = {complex_0: complex_0, complex_0: complex_0}
    field_0 = module_0.from_json_schema(dict_0)
    tuple_0 = module_0.get_valid_types(dict_0)
    bool_0 = False
    bool_1 = field_0.has_default()
    field_1 = module_0.from_json_schema(bool_0)
    var_0 = module_0.to_json_schema(field_1)

def test_case_8():
    str_0 = 'not'
    str_1 = 'type'
    str_2 = 'enum'
    str_3 = 'string'
    str_4 = 'amber'
    str_5 = 'green'
    str_6 = [str_0, str_4, str_5]
    str_7 = {str_1: str_3, str_2: str_6}
    str_8 = {str_0: str_7}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.not_from_json_schema(str_8, schema_definitions_0)

def test_case_9():
    str_0 = 'anyOf'
    str_1 = 'integer'
    str_2 = {}
    str_3 = {str_0: str_1, str_1: str_2}
    field_0 = module_0.any_of_from_json_schema(str_3, str_3)

def test_case_10():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'number'
    str_3 = {str_1: str_2}
    str_4 = 'minLength'
    str_5 = 'string'
    int_0 = 3
    var_0 = {str_1: str_5, str_4: int_0}
    var_1 = [str_3, var_0]
    var_2 = {str_0: var_1}
    var_3 = None
    field_0 = module_0.any_of_from_json_schema(var_2, var_3)

def test_case_11():
    complex_0 = None
    dict_0 = {complex_0: complex_0}
    bool_0 = False
    str_0 = '{FeGY.eO.qq\x0c%'
    str_1 = 'j.?qU:Dmd'
    list_0 = [str_1, str_1, str_1]
    str_2 = '\n    Conditional sub-item matching.\n\n    You should use custom validation instead.\n    '
    dict_1 = {str_0: bool_0, str_1: list_0, str_1: bool_0, str_2: dict_0}
    schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
    field_0 = module_0.from_json_schema(dict_0, schema_definitions_0)
    none_type_0 = None
    string_0 = module_2.String(allow_blank=bool_0, trim_whitespace=bool_0, pattern=none_type_0, format=complex_0)
    var_0 = module_0.to_json_schema(string_0)
    tuple_0 = module_0.get_valid_types(dict_0)
    schema_definitions_1 = module_1.SchemaDefinitions()
    field_1 = module_0.type_from_json_schema(dict_0, schema_definitions_1)
    dict_2 = module_0.get_standard_properties(field_1)
    field_2 = module_0.from_json_schema(dict_0)
    var_1 = module_0.to_json_schema(field_2)
    validation_result_0 = field_2.validate_or_error(var_1)
    field_3 = module_0.from_json_schema(dict_0, schema_definitions_1)
    field_4 = module_2.Field(default=schema_definitions_1)
    var_2 = module_0.to_json_schema(field_3)

def test_case_12():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'integer'
    str_3 = {str_0: str_2, str_1: str_2}
    str_4 = 'string'
    str_5 = {}
    str_6 = [str_3, str_5, str_4]
    str_7 = {str_0: str_6, str_2: str_5}
    field_0 = module_0.any_of_from_json_schema(str_7, str_6)
    var_0 = module_0.to_json_schema(field_0)

def test_case_13():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'type'
    str_4 = 'integer'
    str_5 = {str_3: str_4}
    str_6 = 'const'
    int_0 = 1
    int_1 = {str_6: int_0}
    int_2 = 2
    int_3 = {str_6: int_2}
    var_0 = {str_0: str_5, str_1: int_1, str_2: int_3}
    var_1 = {}
    field_0 = module_0.if_then_else_from_json_schema(var_0, var_1)
    integer_0 = module_2.Integer()
    const_0 = module_2.Const(int_0)

def test_case_14():
    str_0 = 'anyOf'
    str_1 = {str_0: str_0}
    str_2 = 'string'
    str_3 = {str_2: str_2, str_2: str_2, str_2: str_2}
    str_4 = [str_1, str_3, str_2]
    str_5 = {str_0: str_4}
    field_0 = module_0.any_of_from_json_schema(str_5, str_4)
    var_0 = module_0.to_json_schema(field_0)

def test_case_15():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'integer'
    str_3 = {str_1: str_2}
    str_4 = 'string'
    str_5 = {str_1: str_4}
    str_6 = [str_3, str_5]
    str_7 = {str_0: str_6}
    field_0 = module_0.any_of_from_json_schema(str_7, str_6)
    var_0 = module_0.to_json_schema(field_0)

def test_case_16():
    str_0 = 'allOf'
    str_1 = 'const'
    str_2 = 'CbM'
    int_0 = -8
    str_3 = 'integer'
    var_0 = {str_1: int_0, str_2: str_3}
    int_1 = 2
    var_1 = {str_1: int_1, str_2: str_3}
    var_2 = [var_0, var_1]
    var_3 = {str_0: var_2}
    schema_definitions_0 = module_1.SchemaDefinitions()
    const_0 = module_2.Const(int_0)
    const_1 = module_2.Const(int_1)
    const_2 = [const_0, const_1]
    all_of_0 = module_3.AllOf(const_2)
    field_0 = module_0.from_json_schema(var_3, schema_definitions_0)

def test_case_17():
    str_0 = '$ref'
    str_1 = 'oneOf'
    str_2 = '#/definitions/person'
    str_3 = {str_0: str_2}
    str_4 = '#/definitions/company'
    str_5 = {str_0: str_4}
    str_6 = [str_3, str_5]
    var_0 = {}
    var_1 = {str_0: str_2, str_1: str_6, str_1: var_0}
    str_7 = 'type'
    str_8 = 'properties'
    str_9 = 'object'
    str_10 = 'first_name'
    str_11 = 'last_name'
    str_12 = 'string'
    field_0 = module_0.one_of_from_json_schema(var_1, str_6)
    str_13 = {str_7: str_12}
    str_14 = {str_10: str_13, str_11: str_7}
    str_15 = {str_7: str_9, str_8: str_14}
    str_16 = {str_2: str_15}
    reference_0 = module_1.Reference(str_2, str_16)

def test_case_18():
    int_0 = 3
    integer_0 = module_2.Integer(minimum=int_0)
    var_0 = module_0.to_json_schema(integer_0)
    int_1 = 19
    int_2 = 5
    int_3 = 17
    int_4 = 2
    integer_1 = module_2.Integer(minimum=int_0, maximum=int_1, multiple_of=int_4)
    var_1 = module_0.to_json_schema(integer_1)
    float_0 = 3.5
    float_1 = module_2.Float(minimum=float_0)
    var_2 = module_0.to_json_schema(float_1)