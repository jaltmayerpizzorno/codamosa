# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2
import decimal as module_3

def test_case_0():
    try:
        bool_0 = None
        field_0 = module_0.from_json_schema(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '3OSP'
        bool_0 = True
        field_0 = module_0.from_json_schema(bool_0)
        list_0 = [field_0, str_0, bool_0]
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "'8LR9U429"
        bool_0 = False
        dict_0 = {str_0: bool_0, str_0: bool_0}
        bool_1 = True
        schema_definitions_0 = None
        field_0 = module_0.from_json_schema_type(dict_0, str_0, bool_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '$ref'
        str_1 = {str_0: str_0}
        var_0 = {}
        field_0 = module_0.ref_from_json_schema(str_1, var_0)
    except BaseException:
        pass

def test_case_4():
    try:
        any_0 = None
        dict_0 = {any_0: any_0, any_0: any_0, any_0: any_0, any_0: any_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.enum_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        complex_0 = None
        dict_0 = {complex_0: complex_0}
        tuple_0 = module_0.get_valid_types(dict_0)
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        field_1 = module_0.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        complex_0 = None
        dict_0 = {complex_0: complex_0}
        tuple_0 = module_0.get_valid_types(dict_0)
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        schema_definitions_1 = module_1.SchemaDefinitions()
        field_1 = module_0.all_of_from_json_schema(dict_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = None
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = []
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0)
        field_0 = module_0.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = None
        schema_definitions_0 = None
        field_0 = module_0.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xc6\xd4~\x04'
        dict_0 = {bytes_0: bytes_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_11():
    try:
        type_0 = None
        var_0 = module_0.to_json_schema(type_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'anyOf'
        field_0 = module_2.Field(description=str_0)
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'anyOf'
        str_1 = 'type'
        str_2 = 'integer'
        str_3 = {str_1: str_2}
        str_4 = {str_1: str_1}
        str_5 = [str_3, str_4]
        str_6 = {str_0: str_5}
        field_0 = module_0.any_of_from_json_schema(str_6, str_5)
    except BaseException:
        pass

def test_case_14():
    try:
        complex_0 = None
        dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
        tuple_0 = module_0.get_valid_types(dict_0)
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        field_1 = module_0.from_json_schema(dict_0)
        str_0 = 'oneOf'
        var_0 = module_0.to_json_schema(field_1)
        dict_1 = {field_1: field_0, str_0: dict_0, complex_0: var_0, var_0: dict_0}
        field_2 = module_0.from_json_schema(dict_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 119
        string_0 = module_2.String(min_length=int_0)
        var_0 = module_0.to_json_schema(string_0)
        decimal_0 = module_3.Decimal()
        integer_0 = module_2.Integer(minimum=decimal_0, exclusive_maximum=decimal_0, multiple_of=decimal_0)
        dict_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'Ow]pW.YvuJWeChKWUV'
        str_1 = '\r+A\\bm/i\r 8R!'
        dict_0 = {str_0: str_0, str_1: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_0)
        dict_1 = None
        var_0 = module_0.to_json_schema(schema_definitions_0, dict_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '$ref'
        str_1 = 'enum'
        str_2 = 'definitions'
        str_3 = '#/definitions/foo'
        str_4 = 'two'
        int_0 = 3
        str_5 = 'four'
        var_0 = [int_0, str_4, int_0, str_5]
        str_6 = 'bar'
        str_7 = 'type'
        str_8 = 'maxLength'
        str_9 = 'pattern'
        str_10 = 'string'
        int_1 = -2704
        str_11 = 'a*'
        str_12 = [str_6]
        var_1 = {str_7: str_10, str_8: int_1, str_9: str_11, str_1: str_12}
        str_13 = 'const'
        str_14 = {str_13: str_6}
        var_2 = {str_9: var_1, str_6: str_14}
        var_3 = {str_0: str_3, str_1: var_0, str_2: var_2}
        field_0 = module_0.from_json_schema(var_3)
        any_0 = field_0.validate()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'if'
        str_1 = 'then'
        str_2 = 'else'
        str_3 = 'integer'
        str_4 = {str_0: str_3}
        int_0 = 1
        int_1 = {str_0: int_0}
        var_0 = {str_0: str_4, str_1: int_1, str_2: int_1}
        var_1 = {}
        field_0 = module_0.if_then_else_from_json_schema(var_0, var_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '$ref'
        str_1 = '#/definitions/name'
        str_2 = {str_0: str_1}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.ref_from_json_schema(str_2, schema_definitions_0)
        str_3 = 'Bob'
        any_0 = field_0.validate(str_3)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = "\nUnit test for function 'all_of_from_json_schema'"
        var_0 = print(str_0)
        str_1 = 'allOf'
        string_0 = module_2.String()
        integer_0 = module_2.Integer()
        var_1 = [string_0, integer_0]
        var_2 = {str_1: var_1}
        var_3 = None
        field_0 = module_0.all_of_from_json_schema(var_2, var_3)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'anyOf'
        str_1 = 'type'
        str_2 = 'string'
        str_3 = {str_1: str_2}
        str_4 = 'boolean'
        str_5 = {str_1: str_4}
        str_6 = 'properties'
        str_7 = 'additionalProperties'
        str_8 = 'object'
        str_9 = 'key1'
        str_10 = 'key2'
        str_11 = {str_1: str_2}
        str_12 = 'integer'
        str_13 = {str_1: str_12}
        str_14 = {str_9: str_11, str_10: str_13}
        str_15 = {str_1: str_7}
        str_16 = {str_1: str_8, str_6: str_14, str_7: str_15}
        str_17 = [str_10, str_3, str_5, str_16]
        str_18 = {str_0: str_17}
        any_0 = module_2.Any()
        field_0 = module_0.from_json_schema(str_18)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'u/ +P#q:{SP-s"d\'M\'m\x0b'
        const_0 = module_2.Const(str_0)
        var_0 = module_0.to_json_schema(const_0)
    except BaseException:
        pass

def test_case_23():
    try:
        complex_0 = None
        dict_0 = {complex_0: complex_0, complex_0: complex_0}
        tuple_0 = module_0.get_valid_types(dict_0)
        str_0 = ')'
        str_1 = 'T=f?>[TF\\_PD\t `a3t'
        dict_1 = {str_0: str_0, str_1: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        bool_0 = False
        integer_0 = module_2.Integer(exclusive_maximum=bool_0)
        var_0 = module_0.to_json_schema(integer_0)
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        dict_2 = module_0.get_standard_properties(field_0)
        dict_3 = {str_0: dict_0}
        field_1 = module_0.from_json_schema(dict_3)
        var_1 = module_0.to_json_schema(field_0)
        field_2 = module_0.from_json_schema(dict_3)
        field_3 = module_0.from_json_schema(bool_0)
        bool_1 = None
        field_4 = module_2.Field(title=str_0, default=dict_1, allow_null=bool_1)
        var_2 = module_0.to_json_schema(field_4, dict_0)
    except BaseException:
        pass