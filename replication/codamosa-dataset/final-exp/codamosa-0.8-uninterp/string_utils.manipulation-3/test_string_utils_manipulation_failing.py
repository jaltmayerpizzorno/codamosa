# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        int_0 = -1423
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ii:"M:L\nap3e'
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ii:"M:L\nap3e'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '?E}@bXdLs#Ze5M'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'IuQJbZ\n-jFx\x0c@6\\fm'
        str_1 = module_0.strip_margin(str_0)
        str_2 = None
        str_3 = module_0.compress(str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        str_1 = module_0.compress(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "]f4v{s\ttl'I*m`c "
        str_1 = 'epy|\\@k3_e|g'
        int_0 = 1484
        str_2 = module_0.compress(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '].g\x0cKG'
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'tOh#IK!Cw!=iE'
        str_1 = 'xjO\n_v)m0\t6vCl]TVM'
        str_2 = module_0.decompress(str_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        string_compressor_0 = module_0.__StringCompressor(*list_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        int_0 = 946
        str_0 = module_0.roman_encode(int_0)
        str_1 = module_0.compress(str_0)
        list_1 = []
        string_formatter_0 = module_0.__StringFormatter(list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '((?<=\\S)\\+(?=\\S)|(?<=\\S)\\+\\s|\\s\\+(?=\\S)|(?<=\\S)-(?=\\S)|(?<=\\S)-\\s|\\s-(?=\\S)|(?<=\\S)/(?=\\S)|(?<=\\S)/\\s|\\s/(?=\\S)|(?<=\\S)\\*(?=\\S)|(?<=\\S)\\*\\s|\\s\\*(?=\\S)|(?<=\\S)=(?=\\S)|(?<=\\S)=\\s|\\s=(?=\\S)|\\s"[^"]+"(?=[^\\s?.:!,;])|(?<=\\S)"[^"]+"\\s|(?<=\\S)"[^"]+"(?=[^\\s?.:!,;])|\\s\\([^)]+\\)(?=[^\\s?.:!,;])|(?<=\\S)\\([^)]+\\)\\s|(?<=\\S)(\\([^)]+\\))(?=[^\\s?.:!,;]))'
        str_1 = '\n    Returns a string of the specified size containing random characters (uppercase/lowercase ascii letters and digits).\n\n    *Example:*\n\n    >>> random_string(9) # possible output: "cx3QQbzYg"\n\n    :param size: Desired string size\n    :type size: int\n    :return: Random string\n    '
        str_2 = module_0.prettify(str_1)
        str_3 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'DINERS_CLUB'
        str_1 = module_0.prettify(str_0)
        bool_0 = module_0.booleanize(str_0)
        str_2 = module_0.strip_margin(str_0)
        str_3 = 'B~sJ'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = module_0.prettify(str_4)
        str_6 = module_0.strip_html(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_7 = module_0.reverse(str_0)
        bool_1 = module_0.booleanize(str_0)
        str_8 = module_0.snake_case_to_camel(str_2)
        int_0 = 987
        str_9 = module_0.roman_encode(int_0)
        str_10 = module_0.asciify(str_1)
        int_1 = 3834
        str_11 = module_0.roman_encode(int_1)
        str_12 = module_0.compress(str_9)
        str_13 = None
        str_14 = module_0.reverse(str_13)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        var_0 = module_0.camel_case_to_snake(bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = None
        str_1 = '#xKZ\\|'
        str_2 = 'D@"8'
        str_3 = '`2\r3+Y'
        str_4 = module_0.shuffle(str_3)
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_5 = string_formatter_0.format()
        str_6 = module_0.reverse(str_1)
        str_7 = module_0.shuffle(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        bool_0 = False
        str_1 = module_0.strip_html(str_0, bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        str_1 = module_0.strip_margin(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 2004
        str_0 = module_0.roman_encode(int_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'DINERS_CLUB'
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.strip_margin(str_0)
        str_3 = 'qX\nX\x0cgWi\nN?e^jetl'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = 'pAGcP{;1('
        str_6 = module_0.strip_margin(str_5)
        str_7 = module_0.strip_html(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_8 = module_0.reverse(str_0)
        bool_0 = module_0.booleanize(str_0)
        str_9 = module_0.snake_case_to_camel(str_2)
        int_0 = 987
        str_10 = module_0.roman_encode(int_0)
        str_11 = module_0.compress(str_6, int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '^[a-z]{2}_[A-Z]{2}$'
        str_1 = module_0.prettify(str_0)
        str_2 = None
        str_3 = module_0.asciify(str_2)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'JHL'
        str_1 = 'is_snake_case'
        str_2 = module_0.asciify(str_1)
        str_3 = 'O]Qy~Ei6M:'
        str_4 = module_0.compress(str_3)
        str_5 = '0'
        float_0 = 1069.0
        dict_0 = {str_5: float_0}
        var_0 = module_0.camel_case_to_snake(str_0, dict_0)
        str_6 = None
        str_7 = module_0.decompress(str_6, str_6)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'DINERS_CLUB'
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.strip_margin(str_0)
        str_3 = 'qX\nX\x0cgWi\nN?e^jetl'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = module_0.strip_html(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_6 = module_0.reverse(str_0)
        bool_0 = module_0.booleanize(str_0)
        str_7 = module_0.snake_case_to_camel(str_2)
        int_0 = 974
        str_8 = module_0.roman_encode(int_0)
        str_9 = module_0.compress(str_8)
        str_10 = 'y04nFT~8;]'
        str_11 = module_0.slugify(str_10)
        str_12 = None
        bool_1 = module_0.booleanize(str_12)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'MASTERCARD'
        str_1 = module_0.reverse(str_0)
        str_2 = module_0.asciify(str_0)
        str_3 = 'X'
        str_4 = module_0.snake_case_to_camel(str_3, str_2)
        str_5 = module_0.strip_html(str_0)
        str_6 = '\rke;XAVxuKXx\rA\n'
        int_0 = -2940
        str_7 = module_0.compress(str_2, str_6, int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'qX\nX\x0cgWi\nN?e^jetl'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = module_0.strip_html(str_1)
        int_0 = 987
        str_3 = module_0.roman_encode(int_0)
        int_1 = 3815
        str_4 = module_0.asciify(str_1)
        str_5 = module_0.roman_encode(int_1)
        str_6 = module_0.compress(str_3)
        str_7 = 'y04nFT~8;]'
        str_8 = module_0.slugify(str_7)
        string_formatter_0 = module_0.__StringFormatter(str_0)
        int_2 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'jh7'
        str_1 = module_0.compress(str_0)
        str_2 = ''
        str_3 = '?cAKP'
        var_0 = module_0.camel_case_to_snake(str_3)
        str_4 = '=$W98| RZY;^"DRB'
        str_5 = 'gms7*CT'
        str_6 = module_0.reverse(str_5)
        str_7 = module_0.reverse(str_4)
        str_8 = module_0.asciify(str_1)
        list_0 = []
        roman_numbers_0 = module_0.__RomanNumbers(*list_0)
        str_9 = '\r$\x0bQ-T$d&Y_'
        str_10 = module_0.shuffle(str_9)
        str_11 = 'v)R\x0b\tlL\n!/]csT$k'
        str_12 = module_0.snake_case_to_camel(str_2, str_11)
        str_13 = module_0.decompress(str_1)
        str_14 = '^([a-z\\d]+'
        str_15 = module_0.reverse(str_14)
        bool_0 = False
        str_16 = module_0.strip_html(str_1, bool_0)
        str_17 = '~!0Iv_'
        str_18 = module_0.strip_html(str_17)
        var_1 = module_0.camel_case_to_snake(roman_numbers_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'q!\\&R}l1K5\x0bkgp_'
        bool_0 = False
        str_1 = module_0.snake_case_to_camel(str_0, bool_0)
        bool_1 = True
        str_2 = module_0.snake_case_to_camel(str_0, bool_1)
        str_3 = '_this_snake_is_green'
        str_4 = module_0.snake_case_to_camel(str_3, bool_1)
        str_5 = 'Invalid compression_level: it must be an "int" between 0 and 9'
        bool_2 = True
        str_6 = module_0.snake_case_to_camel(str_5, bool_2)
        str_7 = None
        bool_3 = False
        str_8 = module_0.snake_case_to_camel(str_7, bool_3)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'DINERS_CLUB'
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.strip_margin(str_0)
        str_3 = "\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    "
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = module_0.strip_html(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_6 = module_0.reverse(str_0)
        bool_0 = module_0.booleanize(str_0)
        str_7 = module_0.snake_case_to_camel(str_2)
        int_0 = 987
        str_8 = module_0.roman_encode(int_0)
        int_1 = 3906
        str_9 = module_0.roman_encode(int_1)
        str_10 = '/fVT 35:?T=uZv'
        str_11 = module_0.reverse(str_10)
        str_12 = module_0.compress(str_8)
        str_13 = 'y04nFT~8;]'
        str_14 = module_0.slugify(str_13)
        str_15 = 'P3^r+{2'
        var_0 = module_0.camel_case_to_snake(str_15)
        str_16 = ')\x0b:0V'
        str_17 = module_0.prettify(str_16)
        str_18 = None
        str_19 = "\n    Checks if a string is formatted as camel case.\n\n    A string is considered camel case when:\n\n    - it's composed only by letters ([a-zA-Z]) and optionally numbers ([0-9])\n    - it contains both lowercase and uppercase letters\n    - it does not start with a number\n\n    *Examples:*\n\n    >>> is_camel_case('MyString') # returns true\n    >>> is_camel_case('mystring') # returns false\n\n    :param input_string: String to test.\n    :type input_string: str\n    :return: True for a camel case string, false otherwise.\n    "
        str_20 = module_0.slugify(str_18, str_19)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'M'
        bool_0 = True
        str_1 = module_0.strip_html(str_0, bool_0)
        str_2 = 'ITd'
        str_3 = module_0.slugify(str_2)
        str_4 = "kt9Y_EQvX\r\x0b\r\x0b)pL'9~b"
        str_5 = module_0.prettify(str_4)
        str_6 = module_0.slugify(str_0)
        str_7 = module_0.strip_html(str_0)
        str_8 = '(<([a-z]+:)?[a-z]+[^>]*/?>|</([a-z]+:)?[a-z]+>|<!--.*-->|<!doctype.*>)'
        int_0 = module_0.roman_decode(str_8)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'O?`)1Y+\\,['
        str_1 = '^\\s*\\w'
        roman_numbers_0 = module_0.__RomanNumbers()
        bool_0 = None
        str_2 = '[:iQ[_iZ6$W4?{i'
        str_3 = module_0.prettify(str_2)
        str_4 = module_0.snake_case_to_camel(str_1, bool_0)
        int_0 = None
        str_5 = module_0.compress(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'DINERS_CLUB'
        str_1 = module_0.strip_html(str_0)
        str_2 = module_0.strip_margin(str_0)
        str_3 = "\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    "
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = module_0.strip_html(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_6 = '@"wx'
        str_7 = module_0.compress(str_6)
        bool_0 = module_0.booleanize(str_0)
        str_8 = module_0.snake_case_to_camel(str_2)
        int_0 = 987
        str_9 = module_0.roman_encode(int_0)
        str_10 = module_0.asciify(str_3)
        int_1 = 4019
        str_11 = module_0.roman_encode(int_1)
    except BaseException:
        pass