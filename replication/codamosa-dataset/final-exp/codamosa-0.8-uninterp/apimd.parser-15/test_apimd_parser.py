# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'w%UKD$}Gg)ED.k)>'
    str_1 = module_0.parent(str_0)

def test_case_2():
    str_0 = ''
    bool_0 = module_0.is_magic(str_0)

def test_case_3():
    str_0 = 'lbb2w;";b'
    bool_0 = module_0.is_public_family(str_0)

def test_case_4():
    str_0 = 'f\rqlqu5'
    str_1 = '-0.|bl8/8;~B8K$3B3..'
    str_2 = 'collection.abc.Awaitable'
    dict_0 = {str_1: str_0, str_0: str_1, str_0: str_2}
    parser_0 = module_0.Parser(dict_0)
    parser_0.parse(str_0, str_0)

def test_case_5():
    str_0 = "#Z5F'h[P:M\ne*~7"
    str_1 = module_0.code(str_0)

def test_case_6():
    str_0 = '-bB'
    bool_0 = False
    int_0 = 1588
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    parser_0 = module_0.Parser(bool_0, int_0, dict_0)
    expr_0 = module_1.expr()
    list_0 = [expr_0]
    parser_0.parse(str_0, str_0)
    list_1 = []
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_7():
    str_0 = '(h,C"CjU@\'{?rw`6T\''
    str_1 = module_0.code(str_0)
    str_2 = '}n1tMBa;eJ{cJ^aB'
    str_3 = module_0.esc_underscore(str_2)
    str_4 = None
    dict_0 = None
    resolver_0 = module_0.Resolver(str_4, dict_0)

def test_case_8():
    str_0 = '`mLj:J#\x0cOMlv%+xu\x0c"!]'
    str_1 = module_0.doctest(str_0)

def test_case_9():
    expr_0 = None
    str_0 = module_0.const_type(expr_0)

def test_case_10():
    import_from_0 = module_1.ImportFrom()
    set_0 = {import_from_0}
    list_0 = [set_0, set_0]
    constant_0 = module_1.Constant(*list_0)
    str_0 = '3.`Q+GB}zLcEIMo'
    str_1 = 'B]'
    str_2 = 'hEg\'}2+y`R"\'\'9a'
    str_3 = 'x|}DuCHqfsD'
    str_4 = 'w~z0|kAOvJ3v\t3"=\\7e>'
    dict_0 = {str_0: str_1, str_2: str_0, str_0: str_3, str_4: str_4}
    resolver_0 = module_0.Resolver(str_0, dict_0, str_2)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)

def test_case_11():
    str_0 = 'nxUG9/w6mw'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0]
    subscript_0 = module_1.Subscript(*list_0)
    str_1 = '\t MP\rI(0Vr\\j!2(=9'
    resolver_0 = module_0.Resolver(str_1, dict_0, str_1)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)

def test_case_12():
    list_0 = None
    list_1 = [list_0]
    attribute_0 = module_1.Attribute(*list_1)
    str_0 = "Z57?|0hg\tk'"
    str_1 = 'U^Aq'
    dict_0 = {str_0: str_1}
    resolver_0 = module_0.Resolver(str_0, dict_0, str_1)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)

def test_case_13():
    str_0 = ']?6 o]> B|\x0c\x0bq+WLq6,'
    dict_0 = {str_0: str_0}
    parser_0 = module_0.Parser(dict_0, dict_0)
    str_1 = parser_0.compile()

def test_case_14():
    bool_0 = False
    int_0 = 2932
    str_0 = 'nxUG9L6mw'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    parser_0 = module_0.Parser(bool_0, int_0, dict_0)
    parser_0.parse(str_0, str_0)
    str_1 = parser_0.compile()

def test_case_15():
    str_0 = None
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0)
    import_from_0 = module_1.ImportFrom()
    parser_0.imports(str_0, import_from_0)

def test_case_16():
    str_0 = ']?6 o]> B|\x0c\x0bq+WLq6,'
    dict_0 = {str_0: str_0}
    parser_0 = module_0.Parser(dict_0, dict_0)
    list_0 = [dict_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    str_1 = '}iX _9P}2m|Md'
    parser_0.globals(str_1, ann_assign_0)

def test_case_17():
    str_0 = '&aGq{?|B83me'
    str_1 = ';%${`(\x0bt\n*,2uh>'
    list_0 = []
    list_1 = []
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0, dict_0, dict_0)
    parser_0.class_api(str_0, str_1, list_0, list_1)

def test_case_18():
    str_0 = 'VI'
    str_1 = module_0.esc_underscore(str_0)
    str_2 = ''
    str_3 = module_0.parent(str_2)
    module_x_var_0 = None
    int_0 = 3
    bool_0 = True
    str_4 = '*\x0cW6p'
    dict_0 = {str_4: int_0, str_4: int_0, str_2: int_0, str_2: int_0}
    dict_1 = {}
    parser_0 = module_0.Parser(int_0, bool_0, dict_0, dict_1)
    parser_0.load_docstring(str_0, module_x_var_0)

def test_case_19():
    str_0 = 'R`**'
    bool_0 = module_0.is_magic(str_0)

def test_case_20():
    str_0 = None
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0)
    list_0 = []
    stmt_0 = None
    list_1 = [stmt_0]
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_21():
    int_0 = 2940
    str_0 = '"q|1c\tA\\gpo>jp\tY'
    str_1 = 'nxUG9L6mw'
    dict_0 = {str_1: str_0, str_1: str_0, str_1: str_1}
    expr_0 = module_1.expr()
    list_0 = [expr_0]
    bool_0 = True
    list_1 = [list_0, int_0, str_1]
    assign_0 = module_1.Assign(*list_1)
    int_1 = 991
    str_2 = '\x0b;&}`O?'
    str_3 = module_0.code(str_2)
    dict_1 = {str_0: int_1, str_0: int_0, str_1: int_0, str_0: int_0}
    parser_0 = module_0.Parser(bool_0, dict_1, dict_0)
    parser_0.globals(str_1, assign_0)

def test_case_22():
    str_0 = '-bB'
    bool_0 = False
    int_0 = 1588
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    parser_0 = module_0.Parser(bool_0, int_0, dict_0)
    expr_0 = module_1.expr()
    list_0 = [expr_0]
    parser_0.parse(str_0, str_0)
    list_1 = []
    list_2 = [list_1, bool_0, list_0]
    assign_0 = module_1.Assign(*list_2)
    parser_0.globals(str_0, assign_0)

def test_case_23():
    str_0 = 'a%'
    bool_0 = False
    int_0 = 2932
    str_1 = '$q_eGfPO_Wp4'
    str_2 = '"q|1c\tA\\gpo>jp\tY'
    str_3 = 'nxUG9L6mw'
    dict_0 = {str_0: str_2, str_0: str_1, str_3: str_0}
    parser_0 = module_0.Parser(bool_0, int_0, dict_0)
    expr_0 = module_1.expr()
    parser_0.parse(str_3, str_3)
    str_4 = module_0.esc_underscore(str_1)
    dict_1 = {}
    expr_1 = module_1.expr(**dict_1)

def test_case_24():
    int_0 = 2940
    str_0 = '"q|1c\tA\\gpo>jp\tY'
    str_1 = 'nxUG9L6mw'
    dict_0 = {str_1: str_0, str_1: str_0, str_1: str_1}
    expr_0 = module_1.expr()
    list_0 = [expr_0]
    bool_0 = True
    list_1 = [list_0, int_0, str_1]
    assign_0 = module_1.Assign(*list_1)
    dict_1 = {str_0: int_0, str_0: int_0, str_1: int_0, str_0: int_0}
    parser_0 = module_0.Parser(bool_0, dict_1, dict_0)
    parser_0.globals(str_1, assign_0)

def test_case_25():
    str_0 = 'abc._def'
    bool_0 = module_0.is_public_family(str_0)
    str_1 = 'abc._def._ghi.jkl'
    bool_1 = module_0.is_public_family(str_1)
    str_2 = 'abc._Def._ghi.jkl'
    bool_2 = module_0.is_public_family(str_2)
    str_3 = 'mbc.def'
    bool_3 = module_0.is_public_family(str_3)
    bool_4 = module_0.is_public_family(str_2)
    str_4 = 'abc.__def.__ghi.__jkl'
    bool_5 = module_0.is_public_family(str_4)
    str_5 = 'abc.__Def.ghi.__jkl'
    bool_6 = module_0.is_public_family(str_5)
    str_6 = 'abc.__Def.ghi.__jkl.__mno'
    bool_7 = module_0.is_public_family(str_6)

def test_case_26():
    str_0 = '>>> # Hello world!'
    str_1 = module_0.doctest(str_0)
    str_2 = module_0.doctest(str_1)
    str_3 = module_0.doctest(str_1)

def test_case_27():
    str_0 = '>>> # Hello world!'
    str_1 = module_0.doctest(str_0)
    str_2 = '>>> # Hello world!\n>>> print("hello")\nhello\n'
    str_3 = module_0.doctest(str_2)
    str_4 = '# Hello world!\n>>> print("hello")\nhello'
    str_5 = module_0.doctest(str_4)
    str_6 = '# Hello world!\n>>> # Hello world!\n>>> print("hello")\nhello'
    str_7 = module_0.doctest(str_6)

def test_case_28():
    str_0 = 'nxUG9/w6mw'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0]
    subscript_0 = module_1.Subscript(*list_0)
    resolver_0 = module_0.Resolver(str_0, dict_0, str_0)
    name_0 = module_1.Name(*list_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    a_s_t_1 = resolver_0.visit_Subscript(subscript_0)

def test_case_29():
    str_0 = "hL{QW\\'%q<}Q\t*"
    expr_0 = module_1.expr()
    str_1 = module_0.const_type(expr_0)
    dict_0 = {str_1: str_1}
    parser_0 = module_0.Parser(dict_0)
    list_0 = []
    str_2 = parser_0.compile()
    stmt_0 = None
    list_1 = [stmt_0]
    str_3 = 'B/&G\'dB~KU"!z?iF'
    list_2 = [dict_0, list_0]
    list_3 = None
    dict_1 = {str_3: list_3}
    import_from_0 = module_1.ImportFrom(*list_2, **dict_1)
    parser_0.imports(str_3, import_from_0)
    str_4 = "'}2L@IK_H:PW\tub"
    parser_0.class_api(str_0, str_4, list_0, list_1)