# Automatically generated by Pynguin.
import ast as module_0
import apimd.parser as module_1

def test_case_0():
    try:
        dict_0 = {}
        name_0 = module_0.Name(**dict_0)
        str_0 = '?>[Ks1z'
        dict_1 = {str_0: str_0, str_0: str_0}
        resolver_0 = module_1.Resolver(str_0, dict_1)
        a_s_t_0 = resolver_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        str_0 = "Be5'KK_sP)Y\n\rC\x0b|~S"
        str_1 = module_1.esc_underscore(str_0)
        stmt_0 = None
        list_0 = [stmt_0, stmt_0]
        list_1 = [list_0, stmt_0, dict_0]
        str_2 = 'M,'
        import_from_0 = module_0.ImportFrom(*list_1)
        parser_0 = module_1.Parser()
        parser_0.imports(str_2, import_from_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'lR'
        str_1 = "=uyYGr4q7c^YNm'e#"
        dict_0 = {str_1: str_0}
        import_0 = module_0.Import(**dict_0)
        str_2 = '4){@0'
        str_3 = 'eq^.Q5,a0Ylt\x0b1%;h'
        str_4 = 'N+{77z'
        str_5 = 'Ep+4%qY~Mj'
        dict_1 = {str_2: str_3, str_2: str_5, str_4: str_5}
        parser_0 = module_1.Parser(dict_1)
        parser_0.imports(str_5, import_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\r"'
        str_1 = None
        list_0 = [str_1]
        arguments_0 = module_0.arguments(*list_0)
        expr_0 = module_0.expr()
        bool_0 = False
        int_0 = 891
        bool_1 = False
        str_2 = 'Q@T'
        int_1 = None
        int_2 = 0
        dict_0 = {str_2: int_1, str_2: int_2}
        str_3 = '}('
        str_4 = 'k+PX'
        dict_1 = {str_3: str_4}
        parser_0 = module_1.Parser(int_0, bool_1, dict_0, dict_1, dict_1, dict_1)
        parser_0.func_api(str_0, str_1, arguments_0, expr_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'OR%x\\eoSjLO}G'
        bool_0 = module_1.is_public_family(str_0)
        str_1 = None
        expr_0 = module_0.expr()
        str_2 = 'J#'
        dict_0 = {}
        dict_1 = {}
        parser_0 = module_1.Parser(dict_0, dict_1)
        str_3 = parser_0.resolve(str_1, expr_0, str_2)
        str_4 = module_1.doctest(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        parser_0 = module_1.Parser(dict_0, dict_0, dict_0)
        str_0 = 'typing.Set'
        bool_0 = module_1.is_public_family(str_0)
        bool_1 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        dict_0 = {}
        parser_0 = module_1.Parser(dict_0)
        list_0 = []
        stmt_0 = None
        list_1 = [stmt_0]
        parser_0.class_api(str_0, str_0, list_0, list_1)
        str_1 = 'lb'
        list_2 = [stmt_0, parser_0]
        assign_0 = module_0.Assign(*list_2)
        parser_0.globals(str_1, assign_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ")PBT`p.z\x0c'vQ"
        list_0 = [str_0, str_0, str_0]
        async_function_def_0 = module_0.AsyncFunctionDef(*list_0)
        str_1 = 'me^d[z='
        int_0 = 2075
        dict_0 = {str_1: int_0}
        parser_0 = module_1.Parser(dict_0)
        parser_0.api(str_0, async_function_def_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        int_0 = 2894
        str_0 = 'O'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        parser_0 = module_1.Parser(bool_0, int_0, dict_0)
        parser_0.parse(str_0, str_0)
        str_1 = parser_0.compile()
        function_def_0 = module_0.FunctionDef()
        str_2 = 'f+hy{y>U/n)vJhWB'
        parser_0.api(str_0, function_def_0, prefix=str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'jb'
        list_0 = [str_0, str_0]
        constant_0 = module_0.Constant(*list_0)
        str_1 = '?dSbVS\t7Mx]GXU{#\x0c\n'
        str_2 = None
        str_3 = None
        dict_0 = {str_1: str_2, str_2: str_3}
        str_4 = 'i[=+,Q>{}*N6FSF7\r6'
        resolver_0 = module_1.Resolver(str_1, dict_0, str_4)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        str_5 = module_1.doctest(str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        int_0 = -499
        str_0 = 'nxUG9/w6mw'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [str_0]
        subscript_0 = module_0.Subscript(*list_0)
        str_1 = '\t MP\rI(0Vr\\j!2(=9'
        resolver_0 = module_1.Resolver(str_1, dict_0, str_1)
        name_0 = module_0.Name(*list_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        a_s_t_1 = resolver_0.visit_Subscript(subscript_0)
        parser_0 = module_1.Parser(bool_0, int_0, dict_0)
        parser_0.parse(str_0, str_0)
        str_2 = parser_0.compile()
        bool_1 = parser_0.is_public(str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'WY6%P-N$w~Gg;'
        list_0 = [str_0]
        int_0 = 0
        int_1 = 5
        dict_0 = {str_0: int_0, str_0: int_0, str_0: int_1, str_0: int_1}
        import_0 = module_0.Import(*list_0)
        dict_1 = {}
        dict_2 = {}
        parser_0 = module_1.Parser(int_0, dict_0, dict_1, dict_2, dict_2, dict_2)
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '&aGq{?|B83me'
        str_1 = '5N#\x0b\\&(uJR'
        list_0 = [str_0]
        arguments_0 = module_0.arguments(*list_0)
        str_2 = 'gBNDXbP'
        str_3 = '})MZRV({Y'
        str_4 = ''
        dict_0 = {str_2: arguments_0, str_1: list_0, str_3: str_3, str_4: str_1}
        expr_0 = module_0.expr(**dict_0)
        bool_0 = True
        bool_1 = False
        dict_1 = {}
        str_5 = None
        dict_2 = {str_5: str_0, str_5: str_0}
        parser_0 = module_1.Parser(dict_1, dict_2)
        parser_0.func_api(str_1, str_0, arguments_0, expr_0, has_self=bool_0, cls_method=bool_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        bool_0 = False
        int_0 = 2932
        str_1 = None
        str_2 = '5I'
        list_0 = []
        stmt_0 = None
        list_1 = [str_0, stmt_0, stmt_0]
        bool_1 = False
        str_3 = 'Ou,Q}9pEv0\tt'
        int_1 = None
        dict_0 = {str_3: int_1, str_0: int_1}
        dict_1 = {str_0: str_0, str_3: str_3}
        parser_0 = module_1.Parser(bool_1, int_0, bool_1, dict_0, dict_1)
        parser_0.class_api(str_1, str_2, list_0, list_1)
        str_4 = '"q|1c\tA\\gpo>jp\tY'
        str_5 = 'vN\x0bOS=T0c-a9\ns'
        str_6 = 'bv}=y8$`T4Y[RO-'
        str_7 = module_1.parent(str_6)
        str_8 = 'nxUG9L6mw'
        dict_2 = {str_0: str_4, str_0: str_5, str_8: str_0}
        parser_1 = module_1.Parser(bool_0, int_0, dict_2)
        expr_0 = module_0.expr()
        var_0 = parser_1.__post_init__()
        parser_1.parse(str_8, str_8)
        str_9 = 'C_z'
        parser_0.parse(str_1, str_9)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ''
        bool_0 = False
        int_0 = 2932
        str_1 = 'o3\tB[4c9iq'
        str_2 = 'vN\x0bOS=0c-a9\ns'
        str_3 = 'nxUG9Lmw'
        dict_0 = {str_0: str_1, str_0: str_2, str_3: str_0}
        parser_0 = module_1.Parser(bool_0, int_0, dict_0)
        parser_0.parse(str_3, str_3)
        list_0 = [str_3, str_1, dict_0]
        var_0 = parser_0.__post_init__()
        str_4 = module_1.doctest(str_1)
        str_5 = '+{'
        str_6 = 'KF#\nmJF?<pu"H'
        str_7 = 'H/'
        str_8 = '0UKQzX:(g<#"TFz:#+H'
        dict_1 = {str_7: list_0, str_8: dict_0}
        arguments_0 = module_0.arguments(*list_0, **dict_1)
        bool_1 = False
        bool_2 = True
        parser_0.func_api(str_5, str_6, arguments_0, dict_1, has_self=bool_1, cls_method=bool_2)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ''
        list_0 = [str_0, str_0]
        constant_0 = module_0.Constant(*list_0)
        str_1 = '?dSbVS\t7Mx]GXU{#\x0c\n'
        str_2 = None
        dict_0 = {str_1: str_2, str_2: str_2}
        str_3 = 'i[=+,Q>{}*N6FSF7\r6'
        resolver_0 = module_1.Resolver(str_1, dict_0, str_3)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 0
        str_0 = 'b""'
        var_0 = module_0.parse(str_0)
        var_1 = var_0.body[int_0]
        var_2 = var_1.value
        str_1 = module_1.const_type(var_2)
        str_2 = 'u""'
        var_3 = module_0.parse(str_2)
        var_4 = var_3.body[int_0]
        var_5 = var_4.value
        str_3 = module_1.const_type(var_5)
        str_4 = 'f""'
        var_6 = module_0.parse(str_4)
        var_7 = var_6.body[int_0]
        var_8 = var_7.value
        str_5 = module_1.const_type(var_8)
        str_6 = 'r""'
        var_9 = module_0.parse(str_6)
        var_10 = var_9.body[int_0]
        var_11 = var_10.value
        str_7 = module_1.const_type(var_11)
        str_8 = 'typing.Any'
        var_12 = module_0.parse(str_8)
        var_13 = var_12.body[int_0]
        var_14 = var_13.value.func
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '>>> # Hello world!'
        str_1 = module_1.doctest(str_0)
        str_2 = module_1.doctest(str_1)
        str_3 = module_1.doctest(str_1)
        list_0 = [str_1, str_3, str_3]
        str_4 = 'Ew9UTr;pVFNB8J%`G<\ra'
        dict_0 = {str_4: str_3}
        import_from_0 = module_0.ImportFrom(*list_0, **dict_0)
        bool_0 = False
        str_5 = 'Qkdt=u:9![lT_&r'
        str_6 = '.g'
        str_7 = ''
        dict_1 = {str_5: str_6, str_7: str_1}
        parser_0 = module_1.Parser(bool_0, dict_1)
        parser_0.imports(str_1, import_from_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = False
        int_0 = -499
        str_0 = 'nxUG9/w6mw'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [str_0]
        subscript_0 = module_0.Subscript(*list_0)
        str_1 = ''
        resolver_0 = module_1.Resolver(str_1, dict_0, str_1)
        name_0 = module_0.Name(*list_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        a_s_t_1 = resolver_0.visit_Subscript(subscript_0)
        parser_0 = module_1.Parser(bool_0, int_0, dict_0)
        parser_0.parse(str_0, str_0)
        str_2 = parser_0.compile()
        bool_1 = parser_0.is_public(str_2)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -1117
        bool_0 = True
        str_0 = ';\x0cM&'
        str_1 = 'NLcT7Q7:U"B2Ni_'
        int_1 = 129
        int_2 = 797
        int_3 = -81
        dict_0 = {str_0: int_0, str_1: int_1, str_1: int_2, str_0: int_3}
        dict_1 = {str_1: str_0}
        int_4 = 1156
        set_0 = set()
        str_2 = '/yQRSD\nu`(8'
        set_1 = {str_2}
        str_3 = '~'
        dict_2 = {str_0: set_0, str_2: set_1, str_0: set_1, str_3: set_0}
        parser_0 = module_1.Parser(bool_0, int_4, dict_1, dict_2)
        parser_1 = module_1.Parser(int_0, bool_0, dict_0, dict_1, dict_1)
        str_4 = 'LPz8)*7Ik'
        str_5 = 'A{-Dy6'
        str_6 = ",zp'3c#`SY"
        str_7 = 'j^'
        str_8 = '5A@\x0bbaVP>8@av`sdy'
        dict_3 = {str_3: str_0, str_0: str_4, str_5: str_6, str_7: str_8}
        list_0 = [str_0, dict_3, bool_0]
        import_from_0 = module_0.ImportFrom(*list_0)
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass