# Automatically generated by Pynguin.
import ansible.inventory.data as module_0
import ansible.inventory.host as module_1

def test_case_0():
    try:
        float_0 = 4658.6151
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.deserialize(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'test_group1'
        str_1 = 'test_group2'
        var_0 = inventory_data_0.add_group(str_0)
        var_1 = inventory_data_0.add_group(str_0)
        var_2 = inventory_data_0.add_group(str_1)
        int_0 = 1234
        var_3 = inventory_data_0.add_group(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xf6F\xe9\xe7\xf0c\x9a#\xb2\x85\xb9\xa5\x97\x99k|wJsL'
        int_0 = 3264
        list_0 = [bytes_0, bytes_0]
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(int_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        var_1 = inventory_data_0.serialize()
        inventory_data_1 = module_0.InventoryData()
        var_2 = inventory_data_1.reconcile_inventory()
        var_3 = inventory_data_0.serialize()
        var_4 = inventory_data_0.serialize()
        set_0 = None
        inventory_data_2 = module_0.InventoryData()
        var_5 = inventory_data_0.add_host(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        inventory_data_0 = module_0.InventoryData()
        dict_0 = {inventory_data_0: inventory_data_0, inventory_data_0: inventory_data_0, inventory_data_0: inventory_data_0}
        var_0 = inventory_data_0.remove_host(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        var_1 = inventory_data_0.serialize()
        inventory_data_1 = module_0.InventoryData()
        var_2 = inventory_data_1.reconcile_inventory()
        var_3 = inventory_data_0.serialize()
        var_4 = inventory_data_0.serialize()
        inventory_data_2 = module_0.InventoryData()
        bool_0 = False
        dict_0 = {}
        var_5 = inventory_data_0.set_variable(bool_0, inventory_data_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'JtkM20CLz\r'
        str_1 = ''
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_child(str_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        var_1 = inventory_data_0.serialize()
        inventory_data_1 = module_0.InventoryData()
        str_0 = 'PjbB^WT*?mB6<'
        var_2 = inventory_data_1.add_host(str_0, inventory_data_1)
    except BaseException:
        pass

def test_case_8():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.serialize()
        tuple_0 = ()
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_1.serialize()
        var_2 = inventory_data_0.add_group(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        inventory_data_0 = module_0.InventoryData()
        bytes_0 = None
        var_0 = inventory_data_0.get_host(bytes_0)
        var_1 = inventory_data_0.get_groups_dict()
        str_0 = '-Y$(~\x0b'
        bytes_1 = None
        var_2 = inventory_data_0.add_host(str_0, bytes_1)
        var_3 = inventory_data_0.reconcile_inventory()
        var_4 = inventory_data_0.serialize()
        inventory_data_1 = module_0.InventoryData()
        var_5 = inventory_data_1.serialize()
        inventory_data_2 = module_0.InventoryData()
        var_6 = inventory_data_0.get_groups_dict()
    except BaseException:
        pass

def test_case_10():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '\n---\nmodule: set_stats\nshort_description: Define and display stats for the current ansible run\ndescription:\n     - This module allows setting/accumulating stats on the current ansible run, either per host or for all hosts in the run.\n     - This module is also supported for Windows targets.\nauthor: Brian Coca (@bcoca)\noptions:\n  data:\n    description:\n      - A dictionary of which each key represents a stat (or variable) you want to keep track of.\n    type: dict\n    required: true\n  per_host:\n    description:\n        - whether the stats are per host or for all hosts in the run.\n    type: bool\n    default: no\n  aggregate:\n    description:\n        - Whether the provided value is aggregated to the existing stat C(yes) or will replace it C(no).\n    type: bool\n    default: yes\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.conn\n    - action_common_attributes.flow\n    - action_core\nattributes:\n    action:\n        details: While the action plugin does do some of the work it relies on the core engine to actually create the variables, that part cannot be overriden\n        support: partial\n    bypass_host_loop:\n        support: none\n    bypass_task_loop:\n        support: none\n    core:\n        details: While parts of this action are implemented in core, other parts are still available as normal plugins and can be partially overridden\n        support: partial\n    check_mode:\n        support: full\n    delegation:\n        support: none\n    diff_mode:\n        support: none\nnotes:\n    - In order for custom stats to be displayed, you must set C(show_custom_stats) in section C([defaults]) in C(ansible.cfg)\n      or by defining environment variable C(ANSIBLE_SHOW_CUSTOM_STATS) to C(yes). See the C(default) callback plugin for details.\nversion_added: "2.3"\n'
        var_0 = inventory_data_0.remove_group(str_0)
        str_1 = '\n;v'
        var_1 = inventory_data_0.get_host(str_1)
        var_2 = inventory_data_0.get_groups_dict()
        str_2 = 'ungrouped'
        var_3 = inventory_data_0.remove_group(str_2)
        var_4 = inventory_data_0.get_groups_dict()
        str_3 = 'sV\ntxsN 4>eu8U1n'
        bool_0 = True
        complex_0 = None
        inventory_data_1 = module_0.InventoryData()
        var_5 = inventory_data_1.add_host(str_3, bool_0, complex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        inventory_data_0 = module_0.InventoryData()
        bytes_0 = b'\xfe\x05V1+\x08_\x80'
        host_0 = module_1.Host(bytes_0)
        var_0 = inventory_data_0.remove_host(host_0)
        str_0 = 'host1'
        int_0 = 123
        var_1 = inventory_data_0.add_host(str_0, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'localhost'
        str_1 = 'roup1'
        var_0 = inventory_data_0.add_group(str_1)
        var_1 = inventory_data_0.add_child(str_1, str_0)
    except BaseException:
        pass