# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 2321
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        base_0 = module_0.Base(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1106
        node_0 = None
        list_0 = [node_0, node_0, node_0, node_0]
        node_1 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 22
        str_0 = 'u'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 1906
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_0, leaf_0, leaf_1]
        node_0 = module_0.Node(int_1, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2098
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, list_0)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'PeD-f:'
        grammar_0 = module_1.Grammar()
        int_0 = 345
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = []
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'PeD-\tf:'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = -2547
        tuple_0 = None
        tuple_1 = (int_0, str_0, tuple_0, wildcard_pattern_0)
        var_0 = module_0.convert(grammar_0, tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 467
        grammar_0 = module_1.Grammar()
        node_pattern_0 = module_0.NodePattern(int_0, grammar_0)
    except BaseException:
        pass

def test_case_8():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_9():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = -612
        list_0 = []
        list_1 = None
        node_0 = module_0.Node(int_0, list_0, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        int_0 = 2663
        int_1 = 18
        int_2 = None
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'KGretD-\tf:'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = -100
        str_1 = '(Q'
        leaf_0 = module_0.Leaf(int_0, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -1392
        set_0 = {int_0}
        leaf_pattern_0 = module_0.LeafPattern(int_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 2
        str_0 = 'u'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterable_0 = None
        node_pattern_0 = module_0.NodePattern(int_0, iterable_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ",K2R'"
        int_0 = -1255
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 2075
        list_0 = []
        list_1 = []
        node_0 = module_0.Node(int_0, list_0, list_1)
        node_1 = node_0.clone()
        node_1.update_sibling_maps()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'KGPetD-\tf:'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match_seq(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'PetD-\tf:'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '5'
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        list_0 = []
        grammar_0 = module_1.Grammar()
        int_0 = 34
        str_1 = None
        leaf_0 = module_0.Leaf(int_0, str_1)
        var_0 = leaf_pattern_0.match(leaf_0)
        dict_0 = {}
        tuple_0 = (int_0, str_1, dict_0, list_0)
        var_1 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 486
        str_0 = 'eTFum8,rr{'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 486
        str_0 = '`1nHyJ^\rNC)T.fFqbi):'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        bool_0 = wildcard_pattern_0.match_seq(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 38
        str_0 = '.w@fz\nOJNF'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        list_0 = [int_0, str_0, str_0]
        list_1 = [wildcard_pattern_0, int_0, wildcard_pattern_0, str_0, list_0, wildcard_pattern_0]
        negated_pattern_0 = module_0.NegatedPattern(list_1)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 1880
        str_0 = 'bare_name'
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'PD-f:'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        bytes_0 = b''
        bool_0 = wildcard_pattern_0.match(bytes_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 2108
        list_0 = []
        any_0 = None
        node_0 = module_0.Node(int_0, list_0, any_0, int_0)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 501
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 486
        str_0 = ':sv#-'
        list_0 = []
        int_1 = 364
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1)
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_0, any_0)
        node_1 = node_0.clone()
        list_1 = [node_1]
        node_2 = module_0.Node(int_0, list_1)
        node_3 = node_2.clone()
        int_2 = 1261
        leaf_0 = module_0.Leaf(int_2, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 486
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        int_1 = -3186
        node_0.set_child(int_1, node_1)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 486
        str_0 = '_l.r\n<1:G\\\x0c94i<,'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = None
        int_1 = None
        leaf_0 = None
        list_0 = [leaf_0, leaf_0, leaf_0]
        tuple_0 = (int_1, str_0, int_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 793
        list_0 = []
        str_0 = '&`HFb>sc@)/IYS2Mdl'
        dict_0 = {str_0: list_0, str_0: int_0, str_0: str_0}
        node_0 = module_0.Node(int_0, list_0, dict_0)
        node_1 = node_0.clone()
        node_0.append_child(node_0)
    except BaseException:
        pass

def test_case_32():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        str_0 = 'k.aS/a$" _i>MN_P'
        int_0 = 13
        int_1 = -827
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 22
        str_0 = 'u'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        str_1 = leaf_2.__str__()
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        grammar_0 = module_1.Grammar()
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match_seq(grammar_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'G-fkN}9[5Nq'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        wildcard_pattern_1 = module_0.WildcardPattern(str_0)
        list_0 = []
        bool_0 = wildcard_pattern_1.match_seq(list_0, wildcard_pattern_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 17
        str_0 = 'y$(X,'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        str_2 = '`1nHyJ^\rNC)T.fFqbi):'
        leaf_1 = leaf_0.clone()
        str_3 = 'aO\x0bq|9lDKVn<'
        str_4 = leaf_1.__repr__()
        int_1 = 1941
        int_2 = 3091
        int_3 = 2118
        list_0 = []
        optional_0 = None
        node_0 = module_0.Node(int_3, list_0, optional_0)
        list_1 = [node_0]
        wildcard_pattern_0 = module_0.WildcardPattern(str_3)
        any_0 = wildcard_pattern_0.optimize()
        node_1 = module_0.Node(int_2, list_1, any_0, str_2)
        iterator_0 = node_1.pre_order()
        float_0 = -1268.22
        list_2 = [leaf_1, float_0, int_1]
        list_3 = [str_2, list_2, optional_0, any_0]
        str_5 = '^4'
        dict_0 = {str_0: any_0, str_5: str_0}
        base_0 = module_0.Base(*list_3, **dict_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'KGret-\tf'
        int_0 = None
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        node_0 = None
        grammar_0 = module_1.Grammar()
        var_0 = leaf_pattern_0.match(node_0, grammar_0)
        int_1 = -1614
        leaf_0 = module_0.Leaf(int_1, str_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 486
        str_0 = ':sv#-'
        list_0 = []
        int_1 = 364
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1)
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_0, any_0)
        node_1 = node_0.clone()
        int_2 = 1095
        node_2 = node_1.clone()
        node_0.insert_child(int_2, node_1)
        list_1 = [node_1]
        node_3 = module_0.Node(int_0, list_1)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 9
        str_0 = 'Pu'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = -320
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = [tuple_1, int_1, str_0]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
        leaf_1 = leaf_0.clone()
        iterator_0 = leaf_1.post_order()
        bool_0 = wildcard_pattern_0.match_seq(int_1)
    except BaseException:
        pass

def test_case_40():
    try:
        var_0 = []
        var_1 = []
        iterator_0 = module_0.generate_matches(var_0, var_1)
        var_2 = list(iterator_0)
        var_3 = []
        var_4 = []
        iterator_1 = module_0.generate_matches(var_3, var_4)
        var_5 = list(iterator_1)
        int_0 = 1
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 2075
        list_0 = []
        list_1 = [list_0, list_0, int_0]
        node_pattern_0 = module_0.NodePattern(int_0, list_1)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 9
        str_0 = 'Pu'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        str_1 = 'U*eex\x0c\\E'
        leaf_0 = module_0.Leaf(int_0, str_1)
        int_1 = 454
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_0, leaf_1]
        node_0 = module_0.Node(int_1, list_0, wildcard_pattern_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_2.clone()
        node_4 = node_3.clone()
        node_5 = node_4.clone()
        node_5.update_sibling_maps()
        wildcard_pattern_1 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = 1954
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        optional_0 = node_0.get_lineno()
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_1.clone()
        str_0 = node_2.__repr__()
    except BaseException:
        pass

def test_case_44():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_45():
    try:
        int_0 = 2
        str_0 = 'Pu'
        leaf_0 = module_0.Leaf(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
        leaf_pattern_1 = module_0.LeafPattern(int_0, str_0, str_0)
        bool_0 = True
        var_0 = leaf_pattern_1.match(leaf_0, bool_0)
    except BaseException:
        pass

def test_case_46():
    try:
        int_0 = 25
        str_0 = '\'c\\":\nX-%'
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = leaf_0.depth()
        leaf_1 = leaf_0.clone()
        str_1 = leaf_1.__repr__()
        int_2 = 1
        str_2 = '}'
        wildcard_pattern_0 = module_0.WildcardPattern(str_2, int_2, int_2, str_2)
        any_0 = wildcard_pattern_0.optimize()
    except BaseException:
        pass

def test_case_47():
    try:
        int_0 = 25
        str_0 = '\'c\\":\nX-%'
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = leaf_0.depth()
        leaf_1 = leaf_0.clone()
        str_1 = leaf_1.__repr__()
        int_2 = 1
        str_2 = 'P}'
        wildcard_pattern_0 = module_0.WildcardPattern(str_2, int_2, int_2, str_2)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        int_3 = 1952
        list_0 = []
        node_0 = module_0.Node(int_3, list_0)
        leaf_pattern_0 = module_0.LeafPattern(int_2, str_2)
        var_0 = leaf_pattern_0.match(leaf_0)
        node_1 = node_0.clone()
        node_2 = node_0.clone()
        str_3 = node_0.__repr__()
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = 25
        str_0 = '\'c\\":\nX-%'
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = leaf_0.depth()
        leaf_1 = leaf_0.clone()
        str_1 = leaf_1.__repr__()
        str_2 = leaf_1.__str__()
        str_3 = 'P}'
        wildcard_pattern_0 = module_0.WildcardPattern(str_3, int_1, int_1, str_3)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        int_2 = 1952
        list_0 = []
        node_0 = module_0.Node(int_2, list_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_3)
        var_0 = leaf_pattern_0.match(leaf_1)
        node_1 = node_0.clone()
        node_0.insert_child(int_2, node_1)
        optional_0 = node_1.get_lineno()
        node_2 = node_0.clone()
        node_3 = node_0.clone()
        var_1 = None
        grammar_0 = module_1.Grammar()
        var_2 = grammar_0.copy()
        bool_0 = wildcard_pattern_0.match_seq(var_1, var_2)
    except BaseException:
        pass