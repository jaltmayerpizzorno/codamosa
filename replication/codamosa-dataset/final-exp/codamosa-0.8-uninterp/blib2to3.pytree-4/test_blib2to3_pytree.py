# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 2098
    list_0 = []
    node_0 = module_0.Node(int_0, list_0, list_0)

def test_case_2():
    int_0 = 2098
    list_0 = []
    node_0 = module_0.Node(int_0, list_0, list_0)
    node_1 = node_0.clone()

def test_case_3():
    int_0 = 1
    leaf_0 = module_0.Leaf(int_0, int_0)
    leaf_1 = leaf_0.clone()

def test_case_4():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_5():
    int_0 = 2
    str_0 = '&Pb'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)

def test_case_6():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_7():
    str_0 = 'GPetD-\tf:'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_8():
    str_0 = 'KGPetD-\tf:'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_9():
    tuple_0 = ()
    negated_pattern_0 = module_0.NegatedPattern()
    bool_0 = negated_pattern_0.match(tuple_0)

def test_case_10():
    int_0 = 22
    str_0 = 'u'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_11():
    int_0 = 2031
    tuple_0 = ()
    node_pattern_0 = module_0.NodePattern(int_0, tuple_0)

def test_case_12():
    int_0 = 486
    str_0 = '\x0c5m'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_0.optimize()
    wildcard_pattern_1 = module_0.WildcardPattern(str_0)
    grammar_0 = module_1.Grammar()
    negated_pattern_0 = module_0.NegatedPattern(any_0)

def test_case_13():
    int_0 = 382
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    str_0 = node_0.__str__()

def test_case_14():
    int_0 = 17
    str_0 = 'y$(X,'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_15():
    str_0 = 'kGS)0_QJ'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    set_0 = set()
    bool_0 = wildcard_pattern_0.match_seq(set_0)

def test_case_16():
    str_0 = 'KGretD-\t:'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    int_0 = None
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_17():
    int_0 = 2
    str_0 = 'Pb'
    leaf_0 = module_0.Leaf(int_0, str_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_18():
    int_0 = 793
    list_0 = []
    str_0 = '&`HFb>sc@)/IYS2Mdl'
    dict_0 = {str_0: list_0, str_0: int_0, str_0: str_0}
    node_0 = module_0.Node(int_0, list_0, dict_0)
    node_1 = node_0.clone()
    iterator_0 = node_0.post_order()
    node_2 = node_0.clone()
    node_0.append_child(node_2)

def test_case_19():
    int_0 = 1779
    str_0 = 'PetD-\tf:'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    grammar_0 = None
    leaf_0 = None
    list_0 = [leaf_0]
    tuple_0 = (int_0, str_0, int_0, list_0)
    var_0 = module_0.convert(grammar_0, tuple_0)

def test_case_20():
    leaf_pattern_0 = module_0.LeafPattern()
    int_0 = 34
    str_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_21():
    int_0 = 25
    str_0 = '\'c\\":\nX-%'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = leaf_0.depth()
    leaf_1 = leaf_0.clone()
    str_1 = leaf_1.__repr__()
    int_2 = 1
    str_2 = 'P}'
    wildcard_pattern_0 = module_0.WildcardPattern(str_2, int_2, int_2, str_2)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    int_3 = 1952
    list_0 = []
    node_0 = module_0.Node(int_3, list_0)
    leaf_pattern_0 = module_0.LeafPattern(int_2, str_2)
    var_0 = leaf_pattern_0.match(leaf_0)
    node_0.insert_child(int_0, leaf_1)
    optional_0 = node_0.get_lineno()
    int_4 = -896
    node_0.insert_child(int_4, node_0)
    optional_1 = node_0.get_lineno()
    node_1 = node_0.clone()

def test_case_22():
    int_0 = 1
    var_0 = None
    leaf_0 = module_0.Leaf(int_0, var_0)
    int_1 = leaf_0.depth()

def test_case_23():
    int_0 = 1
    str_0 = 'P}'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_24():
    int_0 = 0
    str_0 = 'o'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
    any_0 = wildcard_pattern_0.optimize()
    bool_0 = wildcard_pattern_0.match_seq(str_0)
    any_1 = wildcard_pattern_0.optimize()

def test_case_25():
    int_0 = 25
    str_0 = '\'c\\":\nX-%'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = leaf_0.depth()
    leaf_1 = leaf_0.clone()
    str_1 = leaf_1.__repr__()
    int_2 = 1
    str_2 = 'P}'
    int_3 = 1952
    list_0 = []
    node_0 = module_0.Node(int_3, list_0)
    leaf_pattern_0 = module_0.LeafPattern(int_2, str_2)
    node_0.insert_child(int_0, leaf_1)
    optional_0 = node_0.get_lineno()
    node_1 = node_0.clone()

def test_case_26():
    leaf_pattern_0 = module_0.LeafPattern()
    int_0 = 34
    str_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)
    str_1 = 'C\n4q+S\rN-LjG$"\x0ba__H'
    str_2 = None
    dict_0 = {str_1: var_0, str_2: int_0}
    var_1 = leaf_pattern_0.match(leaf_0, dict_0)

def test_case_27():
    int_0 = 1
    str_0 = '%`:`M'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
    wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_1.optimize()

def test_case_28():
    int_0 = 256
    int_1 = 2
    str_0 = 'foo'
    leaf_0 = module_0.Leaf(int_1, str_0)
    int_2 = 257
    str_1 = 'bar'
    leaf_1 = module_0.Leaf(int_1, str_1)
    leaf_2 = [leaf_1]
    node_0 = module_0.Node(int_2, leaf_2)
    int_3 = 5
    str_2 = 'baz'
    leaf_3 = module_0.Leaf(int_3, str_2)
    var_0 = [leaf_0, node_0, leaf_3]
    node_1 = module_0.Node(int_0, var_0)
    iterator_0 = node_1.post_order()
    var_1 = [x.type for x in iterator_0]