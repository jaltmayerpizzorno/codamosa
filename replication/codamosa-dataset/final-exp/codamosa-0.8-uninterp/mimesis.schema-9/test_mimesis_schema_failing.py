# Automatically generated by Pynguin.
import mimesis.schema as module_0

def test_case_0():
    try:
        str_0 = None
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = 'ngme'
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Test AbstractField.__cll__ mehod.'
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'qest AbstractFieldA__call__ method.'
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        schema_0 = module_0.Schema(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        abstract_field_0 = module_0.AbstractField()
        schema_0 = module_0.Schema(abstract_field_0)
        var_0 = abstract_field_0.__str__()
        str_0 = 'Test AbstractField.__cll__ mehod.'
        abstract_field_1 = module_0.AbstractField()
        any_0 = abstract_field_1.__call__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = None
        tuple_0 = ()
        abstract_field_1 = module_0.AbstractField(str_0, str_0, tuple_0)
        list_0 = [str_0, str_0, tuple_0]
        str_1 = ''
        abstract_field_2 = module_0.AbstractField(str_1)
        abstract_field_3 = module_0.AbstractField(str_1, str_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        abstract_field_0 = module_0.AbstractField()
        schema_0 = module_0.Schema(abstract_field_0)
        list_0 = schema_0.create()
    except BaseException:
        pass

def test_case_8():
    try:
        abstract_field_0 = module_0.AbstractField()
        schema_0 = module_0.Schema(abstract_field_0)
        int_0 = -2530
        list_0 = schema_0.create(int_0)
        list_1 = schema_0.create()
    except BaseException:
        pass

def test_case_9():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = 'name'
        any_0 = abstract_field_0.__call__(str_0, abstract_field_0)
    except BaseException:
        pass