# Automatically generated by Pynguin.
import isort.exceptions as module_0
import pathlib as module_1
import builtins as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = '5*ip~g]4t)(#ix"raz!'
    file_skip_comment_0 = module_0.FileSkipComment(str_0)
    str_1 = '+Pp;pK7-i#M9AS'
    introduced_syntax_errors_0 = module_0.IntroducedSyntaxErrors(str_1)
    invalid_settings_path_0 = module_0.InvalidSettingsPath(str_0)
    introduced_syntax_errors_1 = module_0.IntroducedSyntaxErrors(str_1)

def test_case_2():
    str_0 = 'i\\k%(*udl}y'
    existing_syntax_errors_0 = module_0.ExistingSyntaxErrors(str_0)
    str_1 = ".[J'=t*\rPye-}I]JFK`"
    str_2 = None
    missing_section_0 = module_0.MissingSection(str_1, str_2)

def test_case_3():
    str_0 = ')"'
    file_skipped_0 = module_0.FileSkipped(str_0, str_0)

def test_case_4():
    str_0 = '\n}DdQ\tvnx+=P'
    file_skip_setting_0 = module_0.FileSkipSetting(str_0)

def test_case_5():
    str_0 = '(i?][+/i{S'
    str_1 = 'zmea?Mvg&x4'
    formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_1)
    invalid_settings_path_0 = module_0.InvalidSettingsPath(str_0)
    file_skip_setting_0 = module_0.FileSkipSetting(str_0)
    str_2 = "M*{u\tn)7lP['go!O*g5U"
    str_3 = '7\\'
    str_4 = None
    file_skip_setting_1 = module_0.FileSkipSetting(str_4)
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_4)
    file_skip_setting_2 = module_0.FileSkipSetting(str_3)
    type_0 = None
    literal_sort_type_mismatch_0 = module_0.LiteralSortTypeMismatch(type_0, type_0)
    file_skip_comment_0 = module_0.FileSkipComment(str_2)

def test_case_6():
    str_0 = "?n'!O^[&/;Hx\\T"
    formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_0)

def test_case_7():
    str_0 = 'a5pn'
    exception_0 = None
    literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_0, exception_0)
    str_1 = 'IO'
    file_skip_comment_0 = module_0.FileSkipComment(str_1)
    file_skip_comment_1 = module_0.FileSkipComment(str_1)
    path_0 = module_1.Path()
    str_2 = 'B>'
    missing_section_0 = module_0.MissingSection(str_1, str_2)
    list_0 = [file_skip_comment_0]
    exception_1 = module_2.Exception(*list_0)
    missing_section_1 = module_0.MissingSection(str_1, str_1)
    literal_parsing_failure_1 = module_0.LiteralParsingFailure(str_1, exception_1)
    unsupported_encoding_0 = module_0.UnsupportedEncoding(path_0)
    str_3 = '|"3$bK3"Iqn i2-*@'
    assignments_format_mismatch_0 = module_0.AssignmentsFormatMismatch(str_3)

def test_case_8():
    str_0 = 'xN1o}^N|6IN9$s<M'
    introduced_syntax_errors_0 = module_0.IntroducedSyntaxErrors(str_0)
    str_1 = "|Z:)k R2':pQa^t("
    introduced_syntax_errors_1 = module_0.IntroducedSyntaxErrors(str_1)
    str_2 = "\x0bt7pZa_S'D4:%%"
    str_3 = '{f\rw{2TOk\tjXBi\nf'
    missing_section_0 = module_0.MissingSection(str_2, str_3)
    file_skip_comment_0 = module_0.FileSkipComment(str_1)
    type_0 = None
    literal_sort_type_mismatch_0 = module_0.LiteralSortTypeMismatch(type_0, type_0)
    str_4 = 'l/K.lUF?ndpv]YHflB|'
    introduced_syntax_errors_2 = module_0.IntroducedSyntaxErrors(str_4)
    invalid_settings_path_0 = module_0.InvalidSettingsPath(str_1)
    invalid_settings_path_1 = module_0.InvalidSettingsPath(str_1)

def test_case_9():
    str_0 = 'replace'
    assignments_format_mismatch_0 = module_0.AssignmentsFormatMismatch(str_0)

def test_case_10():
    str_0 = 'bad_setting'
    str_1 = 'value'
    str_2 = 'source'
    int_0 = 1
    str_3 = 'cli'
    var_0 = {str_1: int_0, str_2: str_3}
    var_1 = {str_0: var_0}
    unsupported_settings_0 = module_0.UnsupportedSettings(var_1)