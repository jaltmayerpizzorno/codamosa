# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        str_0 = 'coreos'
        complex_0 = None
        distribution_files_0 = module_0.DistributionFiles(complex_0)
        var_0 = module_0.get_uname(str_0, distribution_files_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1000.0
        distribution_files_0 = module_0.DistributionFiles(float_0)
        int_0 = 384
        set_0 = {int_0, float_0}
        distribution_0 = module_0.Distribution(set_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        bytes_0 = b'\x00\xf0=V\xb0\xaa\x93'
        var_1 = module_0.get_uname(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1393.0001
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bytes_0 = b'\xab0w#e\x98\xdc\xc7I\x7f$p'
        dict_0 = {}
        list_0 = [distribution_fact_collector_0, distribution_fact_collector_0]
        tuple_0 = None
        str_0 = "jZcE',>@OdX5vVC@/|}<"
        int_0 = -1375
        distribution_files_0 = module_0.DistributionFiles(int_0)
        var_0 = distribution_files_0.parse_distribution_file_Slackware(dict_0, list_0, tuple_0, str_0)
        distribution_0 = module_0.Distribution(bytes_0)
        var_1 = distribution_0.get_distribution_facts()
        bytes_1 = b'4\xd1\xaeB\x01\xcd\x12\xb3\x81\xc3|P\xf7'
        distribution_files_1 = module_0.DistributionFiles(bytes_1)
        bool_0 = False
        distribution_files_2 = module_0.DistributionFiles(bool_0)
        var_2 = distribution_files_2.parse_distribution_file_Slackware(float_0, distribution_fact_collector_0, str_0, distribution_files_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 179
        distribution_0 = module_0.Distribution(int_0)
        var_0 = distribution_0.get_distribution_facts()
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        str_0 = None
        float_0 = 2802.46148
        list_0 = None
        tuple_0 = (str_0, float_0, list_0)
        distribution_files_0 = module_0.DistributionFiles(tuple_0)
        bytes_0 = None
        bool_0 = False
        float_1 = -3169.623
        distribution_files_1 = module_0.DistributionFiles(float_1)
        var_1 = distribution_files_1.parse_distribution_file_Slackware(distribution_files_0, bytes_0, tuple_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        bool_0 = None
        list_0 = [bool_0, tuple_0]
        str_0 = 'taX\n_JxY\tkhXW3q_-wT'
        int_0 = 2118
        distribution_files_0 = module_0.DistributionFiles(int_0)
        var_0 = distribution_files_0.parse_distribution_file_NA(tuple_0, bool_0, list_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        bool_0 = True
        distribution_fact_collector_0 = module_0.DistributionFactCollector(bool_0)
        var_0 = distribution_fact_collector_0.collect(list_0)
        str_0 = '\n    A simple stub class that allows us to add representers\n    for our overridden object types.\n    '
        distribution_0 = module_0.Distribution(str_0)
        distribution_1 = module_0.Distribution(distribution_0)
        set_0 = {distribution_0}
        float_0 = 1857.88
        str_1 = 'g'
        str_2 = ''
        int_0 = -622
        bytes_0 = b'-oH:S\xa2\xdd'
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        var_1 = distribution_files_1.parse_distribution_file_CentOS(distribution_fact_collector_0, str_2, int_0, int_0)
        distribution_files_2 = module_0.DistributionFiles(str_1)
        var_2 = distribution_files_2.parse_distribution_file_ClearLinux(set_0, str_0, distribution_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        distribution_0 = module_0.Distribution(bool_0)
        var_0 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'lsb'
        str_1 = "'apt-get %s' failed: %s"
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0, str_1)
        int_0 = 99
        distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_fact_collector_0, int_0)
        distribution_0 = module_0.Distribution(distribution_fact_collector_1)
        var_0 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 1.5
        dict_0 = {}
        int_0 = -2250
        str_0 = 'TbBD'
        distribution_files_0 = module_0.DistributionFiles(str_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        int_1 = -408
        distribution_files_2 = module_0.DistributionFiles(int_1)
        var_0 = distribution_files_2.parse_distribution_file_Alpine(dict_0, int_0, dict_0, distribution_files_1)
        bool_0 = True
        str_1 = 'xop'
        set_0 = {str_1, float_0, str_1}
        int_2 = 250
        tuple_0 = (float_0, bool_0, set_0, int_2)
        distribution_0 = module_0.Distribution(tuple_0)
        var_1 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_9():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bool_0 = False
        distribution_0 = module_0.Distribution(bool_0)
        var_0 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'S#\xf3'
        bool_0 = True
        float_0 = None
        distribution_fact_collector_0 = module_0.DistributionFactCollector(bool_0, float_0)
        tuple_0 = (bytes_0, distribution_fact_collector_0, bytes_0)
        distribution_0 = module_0.Distribution(tuple_0)
        distribution_files_0 = module_0.DistributionFiles(distribution_0)
        distribution_1 = module_0.Distribution(distribution_files_0)
        var_0 = distribution_1.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 246.2
        dict_0 = {float_0: float_0, float_0: float_0}
        distribution_fact_collector_0 = module_0.DistributionFactCollector(float_0, dict_0)
        distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        var_0 = distribution_0.get_distribution_SMGL()
        list_0 = None
        int_0 = -2024
        set_0 = {int_0}
        str_0 = 'T/'
        distribution_files_1 = module_0.DistributionFiles(distribution_0)
        var_1 = distribution_files_1.parse_distribution_file_Debian(list_0, int_0, set_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "S'"
        bytes_0 = b''
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        tuple_0 = ()
        var_0 = distribution_files_0.parse_distribution_file_Flatcar(str_0, distribution_files_0, bytes_0, tuple_0)
        float_0 = -4221.3
        list_0 = [float_0, float_0]
        distribution_fact_collector_0 = module_0.DistributionFactCollector(list_0)
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        float_1 = 0.2
        distribution_1 = module_0.Distribution(float_1)
        var_1 = distribution_1.get_distribution_facts()
        var_2 = distribution_1.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'dK`TUI'
        distribution_files_0 = module_0.DistributionFiles(str_0)
        float_0 = -743.3809
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        tuple_0 = (float_0, distribution_fact_collector_0)
        list_0 = [tuple_0, distribution_fact_collector_0, float_0, float_0]
        tuple_1 = (list_0,)
        distribution_0 = module_0.Distribution(tuple_1)
        distribution_files_1 = module_0.DistributionFiles(distribution_0)
        str_1 = 'oPj\r'
        bytes_0 = b'\xc2\xcd\x9eSy\xd9# \xc6\xb6{O\xe8\xe1A\x1e\xd9\x1a'
        var_0 = distribution_fact_collector_0.collect(list_0)
        var_1 = distribution_files_1.parse_distribution_file_ClearLinux(str_1, bytes_0, distribution_files_1, tuple_0)
        distribution_1 = module_0.Distribution(distribution_files_1)
        var_2 = distribution_1.get_distribution_SunOS()
    except BaseException:
        pass