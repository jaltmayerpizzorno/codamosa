# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = '\n            from bzrlib.lay_import import ScopeReplacer\n            '
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_1():
    try:
        import_processor_0 = module_0.ImportProcessor()
        float_0 = 883.9
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, float_0, import_processor_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        bytes_0 = b'1bY\r\x14\xd7'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(set_0, bytes_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '3>vs;B`a|)H}Yv^m?AWq'
        float_0 = -1222.7
        int_0 = 3147
        scope_replacer_0 = module_0.ScopeReplacer(str_0, float_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        list_0 = [bool_0]
        import_processor_0 = module_0.ImportProcessor(list_0)
        float_0 = -436.4
        import_replacer_0 = module_0.ImportReplacer(import_processor_0, float_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n            from bzrlib.lzy_import import ScpeReplacer\n  &         '
        dict_0 = {}
        import_processor_0 = module_0.ImportProcessor(dict_0)
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n            from bzrlib.lazy_import import ScopeReplacer\n            '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n            from bzrlib.lzy_import import ScpeReplacer\n  &         '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '#T!Cw\n1@7^3o&8R\x0bqA'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = {}
        str_0 = 'sco.e'
        scope_replacer_0 = module_0.ScopeReplacer(var_0, str_0, str_0)
        var_1 = scope_replacer_0.__getattribute__(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\n            from bzrlib.lazy_import import ScopeReplacer\n            '
        bytes_0 = b'\x87x\xb5\xa8\xd2CW\x9f\xc5\x17\x14^E\x85k'
        dict_0 = {str_0: bytes_0}
        illegal_use_of_scope_replacer_0 = None
        import_replacer_0 = module_0.ImportReplacer(dict_0, illegal_use_of_scope_replacer_0, dict_0)
        var_0 = module_0.lazy_import(bytes_0, import_replacer_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = None
        str_0 = ''
        bool_0 = True
        dict_0 = {str_0: bool_0, bool_0: float_0}
        list_0 = [dict_0, float_0, str_0]
        list_1 = [list_0, list_0]
        bool_1 = True
        import_replacer_0 = module_0.ImportReplacer(str_0, dict_0, list_0, list_1, bool_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "\\A'(.*)'\\Z"
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 2264.403606
        complex_0 = None
        list_0 = [complex_0, float_0]
        set_0 = set()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, set_0)
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(float_0, complex_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_1)
        var_1 = globals()
        str_0 = '\n            from bzrlib.lazy_import import ScopeReplacen\n            '
        var_2 = module_0.lazy_import(var_1, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n            from bzrlib.lazy_import import ScopeReVlacer\n            '
        str_1 = 'soNFq\r(U}0Bo\nH'
        var_0 = module_0.lazy_import(str_0, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '%s(%s)'
        dict_0 = None
        dict_1 = {}
        import_replacer_0 = module_0.ImportReplacer(dict_1, str_0, str_0)
        var_0 = module_0.lazy_import(dict_0, import_replacer_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '%s(%s)'
        dict_0 = None
        dict_1 = {}
        import_replacer_0 = module_0.ImportReplacer(dict_1, str_0, str_0, str_0)
        var_0 = module_0.lazy_import(dict_0, import_replacer_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '\n           from bzHlib.?azy_imp}t import ScopeReplcer\n )          '
        int_0 = 2496
        str_1 = 'O5%h53l!1'
        str_2 = ':p\x0cWN\r6hf0A\tb!V/8>'
        dict_0 = {str_0: int_0, str_1: int_0, str_2: int_0}
        str_3 = "Restore the original function to re.compile().\n\n    It is safe to call reset_compile() multiple times, it will always\n    restore re.compile() to the value that existed at import time.\n    Though the first call will reset back to the original (it doesn't\n    track nesting level)\n    "
        bytes_0 = b']\x02\x1d:\xefEN\\P\xed\xc5'
        var_0 = module_0.lazy_import(dict_0, str_3, bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'Ln`+z`'
        str_1 = 'UJ[lg'
        str_2 = ''
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2}
        list_0 = [dict_0, str_1]
        bytes_0 = b']'
        list_1 = [str_0, str_2, bytes_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_1, list_0)
        int_0 = -886
        dict_1 = {int_0: int_0}
        dict_2 = {}
        str_3 = 'zp\x0cM9<s'
        scope_replacer_0 = module_0.ScopeReplacer(dict_2, int_0, str_3)
        scope_replacer_1 = module_0.ScopeReplacer(dict_1, scope_replacer_0, int_0)
        var_0 = scope_replacer_1.__setattr__(list_0, illegal_use_of_scope_replacer_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = {}
        var_1 = lambda self, scope, name: scope
        str_0 = "gmf'/\\`:>Ld_p!L\x0ba>y"
        scope_replacer_0 = module_0.ScopeReplacer(var_0, var_1, str_0)
        str_1 = "2s!boITAf$l\x0b'"
        var_2 = scope_replacer_0.__getattribute__(str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '\n    from brlib import branch\n   import bzrlib.branch\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass