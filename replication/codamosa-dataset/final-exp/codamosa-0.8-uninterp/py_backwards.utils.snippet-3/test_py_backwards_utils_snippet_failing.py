# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import typed_ast._ast3 as module_1
import py_backwards.utils.snippet as module_2
import py_backwards.utils.helpers as module_3

def test_case_0():
    try:
        str_0 = '\nextend(variables)\nprint(x)\n    '
        str_1 = 'x = 1; x = 2'
        var_0 = module_0.parse(str_1)
        str_2 = 'ko JB'
        dict_0 = {str_2: str_0, str_0: str_1}
        attribute_0 = module_1.Attribute(**dict_0)
        str_3 = None
        str_4 = 'M7]yB|7Z&\x0b['
        str_5 = 'w'
        dict_1 = {str_3: str_1, str_4: str_3, str_5: str_4, str_1: str_5}
        variables_replacer_0 = module_2.VariablesReplacer(dict_1)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        var_1 = var_0.body
        var_2 = module_0.parse(str_0)
        module_2.extend_tree(var_2, var_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        dict_0 = {str_0: str_0}
        class_def_0 = module_1.ClassDef()
        name_0 = module_1.Name()
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\nextend(variables)\nprint(x)\n    '
        str_1 = 'x = 1; x = 2'
        arg_0 = module_1.arg()
        str_2 = "/{O\r\x0c'Q42D!*"
        dict_0 = {str_2: str_1}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        var_0 = module_0.parse(str_1)
        var_1 = module_0.parse(str_0)
        module_2.extend_tree(var_1, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        keyword_0 = None
        list_0 = [keyword_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        str_0 = '*zhi+yL,~2\t.AZs\nZ.Fl'
        dict_0 = {}
        str_1 = '+fJb3\x0cdE067\x0b\t'
        dict_1 = {str_0: dict_0, str_0: dict_0, str_1: dict_0}
        a_s_t_0 = module_1.AST(**dict_1)
        str_2 = ',bP-\x0b)#|7~@sHyM6'
        dict_2 = {str_0: a_s_t_0, str_2: a_s_t_0, str_2: a_s_t_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_2)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_4():
    try:
        a_s_t_0 = module_1.AST()
        dict_0 = None
        module_2.extend_tree(a_s_t_0, dict_0)
        str_0 = '@I|dgJ:/cyA)'
        iterable_0 = module_2.find_variables(a_s_t_0)
        dict_1 = {str_0: str_0}
        module_2.extend(dict_1)
        dict_2 = {}
        module_2.let(dict_2)
        variables_replacer_0 = module_2.VariablesReplacer(dict_2)
        import_from_0 = None
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_5():
    try:
        alias_0 = module_1.alias()
        list_0 = [alias_0]
        class_def_0 = module_1.ClassDef(*list_0)
        str_0 = "dRgs@'5"
        dict_0 = {str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        module_2.let(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        snippet_0 = module_2.snippet(variables_replacer_0)
        list_0 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        dict_0 = {str_0: str_0}
        class_def_0 = module_1.ClassDef()
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
        name_0 = module_1.Name()
        variables_replacer_1 = module_2.VariablesReplacer(dict_0)
        name_1 = variables_replacer_1.visit_Name(name_0)
    except BaseException:
        pass

def test_case_8():
    try:
        attribute_0 = module_1.Attribute()
        class_def_0 = module_1.ClassDef()
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
        dict_1 = {}
        variables_replacer_1 = module_2.VariablesReplacer(dict_1)
        a_s_t_0 = module_1.AST()
        iterable_0 = module_2.find_variables(a_s_t_0)
        module_2.extend(variables_replacer_1)
        arg_0 = None
        arg_1 = variables_replacer_0.visit_arg(arg_0)
    except BaseException:
        pass

def test_case_9():
    try:
        arg_0 = module_1.arg()
        a_s_t_0 = None
        class_def_0 = module_1.ClassDef()
        dict_0 = {}
        str_0 = 'UUfMXM\x0bdR'
        dict_1 = {str_0: a_s_t_0, str_0: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_1)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        str_1 = 'intern'
        list_0 = [str_1, str_1]
        import_from_0 = module_1.ImportFrom(*list_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        a_s_t_1 = module_1.AST()
        module_2.extend_tree(a_s_t_1, dict_1)
        var_0 = module_0.parse(str_1)
        iterable_0 = module_2.find_variables(var_0)
        bytes_0 = b'\xcdd'
        attribute_0 = module_1.Attribute()
        str_2 = "1#G\x0cQO\n\x0bp,\x0c\x0ch'g"
        str_3 = 'EUt;@)+7EY:usd{c`d'
        dict_2 = {str_2: str_2, str_2: str_2, str_3: str_2, str_2: str_2}
        variables_replacer_1 = module_2.VariablesReplacer(dict_2)
        attribute_1 = variables_replacer_1.visit_Attribute(attribute_0)
        variables_replacer_2 = module_2.VariablesReplacer(dict_0)
        str_4 = '!|M}&6F-]r'
        dict_3 = {str_4: bytes_0}
        arg_2 = module_1.arg(**dict_3)
        arg_3 = variables_replacer_2.visit_arg(arg_2)
        str_5 = '\x0c\x0bYrgE96=~NGV@\\nTs'
        str_6 = module_3.get_source(str_5)
    except BaseException:
        pass

def test_case_10():
    try:
        arg_0 = module_1.arg()
        str_0 = 'nB=HY*gn^'
        a_s_t_0 = None
        class_def_0 = module_1.ClassDef()
        dict_0 = {}
        str_1 = 'UUfMXM\x0bdR'
        dict_1 = {str_0: a_s_t_0, str_1: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_1)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        str_2 = 'intern'
        str_3 = 'vy&g\r1azvGmlKupf1'
        list_0 = [str_0, str_2]
        import_from_0 = module_1.ImportFrom(*list_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        a_s_t_1 = module_1.AST()
        dict_2 = {str_3: str_3, str_3: str_3, str_2: str_3, str_3: a_s_t_1}
        variables_replacer_1 = module_2.VariablesReplacer(dict_2)
        module_2.extend_tree(a_s_t_1, dict_1)
        arg_2 = variables_replacer_1.visit_arg(arg_1)
        var_0 = module_0.parse(str_2)
        iterable_0 = module_2.find_variables(var_0)
        attribute_0 = module_1.Attribute()
        variables_replacer_2 = module_2.VariablesReplacer(dict_1)
        variables_replacer_3 = module_2.VariablesReplacer(dict_0)
        arg_3 = module_1.arg(*list_0)
        arg_4 = variables_replacer_1.visit_arg(arg_2)
        str_4 = module_3.get_source(import_from_1)
    except BaseException:
        pass

def test_case_11():
    try:
        arg_0 = module_1.arg()
        str_0 = 'nB=HY*gn^'
        a_s_t_0 = None
        class_def_0 = module_1.ClassDef()
        dict_0 = {str_0: a_s_t_0, str_0: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        str_1 = 'intern'
        str_2 = 'vy&g\r1azvGmlKupf1'
        list_0 = [str_0, str_1]
        import_from_0 = module_1.ImportFrom(*list_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        a_s_t_1 = module_1.AST()
        dict_1 = {str_2: str_2, str_2: str_2, str_1: str_2, str_2: a_s_t_1}
        variables_replacer_1 = module_2.VariablesReplacer(dict_1)
        module_2.extend_tree(a_s_t_1, dict_0)
        arg_2 = variables_replacer_1.visit_arg(arg_1)
        var_0 = module_0.parse(str_1)
        iterable_0 = module_2.find_variables(var_0)
        attribute_0 = module_1.Attribute()
    except BaseException:
        pass

def test_case_12():
    try:
        arg_0 = module_1.arg()
        str_0 = 'nBHY*gn'
        a_s_t_0 = None
        class_def_0 = module_1.ClassDef()
        dict_0 = {}
        str_1 = 'UUfMXM\x0bdR'
        dict_1 = {str_0: a_s_t_0, str_1: str_0}
        variables_replacer_0 = module_2.VariablesReplacer(dict_1)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        str_2 = 'intern'
        str_3 = 'vy&g\r1azvGmlKupf1'
        list_0 = [str_0, str_2]
        import_from_0 = module_1.ImportFrom(*list_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        a_s_t_1 = module_1.AST()
        dict_2 = {str_3: str_3, str_3: str_3, str_2: str_3, str_3: a_s_t_1}
        variables_replacer_1 = module_2.VariablesReplacer(dict_2)
        alias_0 = module_1.alias(*list_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
        module_2.extend_tree(a_s_t_1, dict_1)
        arg_2 = variables_replacer_1.visit_arg(arg_1)
        var_0 = module_0.parse(str_2)
        iterable_0 = module_2.find_variables(var_0)
        attribute_0 = module_1.Attribute()
        variables_replacer_2 = module_2.VariablesReplacer(dict_1)
        attribute_1 = variables_replacer_2.visit_Attribute(attribute_0)
        variables_replacer_3 = module_2.VariablesReplacer(dict_0)
        arg_3 = module_1.arg(*list_0)
        arg_4 = variables_replacer_0.visit_arg(arg_0)
        callable_0 = None
        str_4 = module_3.get_source(callable_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\nextend(variables)\nprint(x)\n    '
        var_0 = module_0.parse(str_0)
        module_2.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\nextenx(variables)\np9int(x)\n    '
        list_0 = []
        a_s_t_0 = module_1.AST(*list_0)
        str_1 = 'x = 1; x = 2'
        var_0 = module_0.parse(str_1)
        iterable_0 = module_2.find_variables(a_s_t_0)
        var_1 = module_0.parse(str_0)
        str_2 = None
        module_2.extend_tree(var_1, str_2)
        module_2.let(str_1)
        name_0 = module_1.Name()
        dict_0 = {str_1: str_1}
        variables_replacer_0 = module_2.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
        str_3 = 'o#'
        str_4 = '\x0c)?+K9}-'
        a_s_t_1 = module_1.AST()
        dict_1 = {str_0: str_1, str_3: str_0, str_4: str_0, str_4: a_s_t_1}
        variables_replacer_1 = module_2.VariablesReplacer(dict_1)
        dict_2 = {str_0: a_s_t_1}
        var_2 = module_0.dump(dict_2)
    except BaseException:
        pass