# Automatically generated by Pynguin.
import pysnooper.tracer as module_0
import inspect as module_1

def test_case_0():
    try:
        dict_0 = None
        set_0 = {dict_0, dict_0}
        var_0 = module_0.get_write_function(set_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'call'
        list_0 = [str_0, str_0, str_0, str_0]
        tracer_0 = module_0.Tracer(str_0, str_0, list_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '6RzCq: '
        str_1 = '\n\n$x=F5'
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
        tracer_0 = module_0.Tracer(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 4399.6
        str_0 = '3"viK\rd$IprdFb;U7t'
        dict_0 = None
        list_0 = [str_0, str_0, dict_0]
        file_writer_0 = module_0.FileWriter(str_0, list_0)
        var_0 = file_writer_0.write(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        unavailable_source_0 = module_0.UnavailableSource()
        str_0 = 'p,.+6wsTh7K!.*K[<r'
        float_0 = -1860.587
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, float_0: float_0}
        list_0 = [dict_0]
        dict_1 = {str_0: str_0}
        tracer_0 = module_0.Tracer(str_0, dict_0, str_0, list_0, dict_1, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        str_0 = 'get_source'
        dict_1 = {str_0: str_0}
        var_1 = tracer_0.trace(dict_0, dict_1, tracer_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__exit__(tracer_0, tracer_0, tracer_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tracer_0 = module_0.Tracer()
        str_0 = 'BW<n>q7\x0b'
        var_0 = tracer_0.__call__(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -2050
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        list_0 = [tracer_0, tracer_0]
        var_1 = tracer_0.__exit__(int_0, list_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -2021
        tracer_0 = module_0.Tracer()
        str_0 = 'call'
        list_0 = [str_0, int_0]
        tracer_1 = module_0.Tracer(tracer_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        str_0 = '%Nh!'
        set_0 = {str_0}
        file_writer_0 = module_0.FileWriter(set_0, str_0)
        tracer_0 = module_0.Tracer(file_writer_0)
        var_0 = tracer_0.__enter__()
        str_1 = '1'
        list_0 = [bool_0, set_0]
        dict_0 = {str_1: str_0, str_0: str_1}
        unavailable_source_0 = module_0.UnavailableSource(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 1001.0
        list_0 = []
        bool_0 = False
        file_writer_0 = module_0.FileWriter(list_0, bool_0)
        var_0 = file_writer_0.write(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        list_0 = None
        var_1 = tracer_0.__enter__()
        var_2 = tracer_0.__call__(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = module_1.currentframe()
        var_1 = module_0.get_local_reprs(var_0)
        str_0 = 'a'
        str_1 = ''
        var_2 = module_1.currentframe()
        str_2 = [str_0, str_1, str_1]
        var_3 = module_0.get_local_reprs(var_2, str_2)
    except BaseException:
        pass