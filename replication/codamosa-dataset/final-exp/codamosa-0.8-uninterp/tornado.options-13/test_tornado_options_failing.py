# Automatically generated by Pynguin.
import tornado.options as module_0
import typing as module_1
import builtins as module_2

def test_case_0():
    try:
        str_0 = 't"o6\\>Hk8u\x0c;q(&/='
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'BL'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        module_0.print_help()
        str_1 = 'Runs the `.IOLoop` until stop is called or timeout has passed.\n\n        In the event of a timeout, an exception will be thrown. The\n        default timeout is 5 seconds; it may be overridden with a\n        ``timeout`` keyword argument or globall with the\n        ``ASYNC_TEST_TIMEOUT`` environment variable.\n\n        If ``condition`` is not ``None``, the `.IOLoop` will be restarted\n        after `stop()` until ``condition()`` returns ``True``.\n\n        .. versionchanged:: 3.1\n           Added the ``ASYNC_TEST_TIMEOUT`` enviroment variable.\n\n        .. deprecated:: 5.1\n\n           `stop` and `wait` are deprecated; use ``@gen_test`` instead.\n        '
        str_2 = '+&9C'
        list_0 = [str_1, str_2, str_2]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\x0c?qg'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_4():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '/input/tornado/options.py'
        none_type_0 = None
        dict_0 = option_parser_0.as_dict()
        option_parser_0.define(str_0, none_type_0)
        str_1 = '/J#yS5/\x0bY`?hTAp)'
        any_0 = option_parser_0.__getitem__(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        iterator_0 = option_parser_0.__iter__()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        bool_0 = None
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_1 = module_0.OptionParser()
        option_parser_1.run_parse_callbacks()
        option_parser_1.run_parse_callbacks()
        option_parser_1.define(str_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        str_0 = '1-1|k|\nwe'
        bool_1 = True
        iterator_0 = None
        module_0.define(str_0, str_0, bool_0, iterator_0)
        list_0 = module_0.parse_command_line(str_0, bool_1)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_9():
    try:
        text_i_o_0 = module_1.TextIO()
        str_0 = '/input/tornado/log.py'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'L'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        module_0.print_help()
        mockable_0 = module_0._Mockable(option_parser_0)
        str_1 = ''
        any_0 = mockable_0.__getattr__(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'b\x0bT~3[B vkw FPcu'
        str_1 = ':'
        dict_0 = option_parser_0.group_dict(str_1)
        option_parser_1 = module_0.OptionParser()
        int_0 = -316
        module_0.add_parse_callback(int_0)
        mockable_0 = option_parser_1.mockable()
        option_parser_2 = module_0.OptionParser()
        str_2 = '/input/tornado/log.py'
        option_parser_2.parse_config_file(str_2)
        iterable_0 = option_parser_2.items()
        str_3 = 'Vju;'
        bytes_0 = None
        bool_0 = False
        option_0 = module_0._Option(str_3, bytes_0, str_1, bool_0, str_0, mockable_0)
        option_0.set(option_parser_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        str_0 = 'Content-Disposition'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = 'f'
        list_0 = []
        list_1 = [str_1]
        type_0 = module_2.type(*list_1)
        option_0 = module_0._Option(str_1, list_0, type_0, str_0)
        any_0 = option_0.parse(str_0)
        str_2 = None
        option_1 = module_0._Option(str_0, str_2, str_2, bool_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ':F`&2SB%"m'
        option_0 = module_0._Option(str_0, str_0, str_0, str_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'BL'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        module_0.print_help()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '1-1|k|\nwe'
        bool_0 = True
        list_0 = module_0.parse_command_line(str_0, bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = []
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = ''
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = 'GklMhzlI0hnzb\x0c6'
        str_2 = None
        list_0 = [str_1, str_1, str_2]
        module_0.print_help(list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'P3f9K\x0b&\\'
        option_parser_0.define(str_0, str_0)
        str_1 = 'Converts a string argument to a byte string.\n\n    If the argument is already a byte string or None, it is returned unchanged.\n    Otherwise it must be a unicode string and is encoded as utf8.\n    '
        mockable_0 = option_parser_0.mockable()
        list_0 = [str_1, str_1, str_1, str_1]
        bool_0 = False
        list_1 = option_parser_0.parse_command_line(list_0, bool_0)
        any_0 = option_parser_0.__getattr__(str_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = ''
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        none_type_0 = None
        module_0.define(str_0, none_type_0)
    except BaseException:
        pass

def test_case_23():
    try:
        text_i_o_0 = module_1.TextIO()
        option_parser_0 = module_0.OptionParser()
        str_0 = '/input/tornado/log.py'
        dict_0 = option_parser_0.as_dict()
        option_parser_0.parse_config_file(str_0)
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'ZUb'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        bool_0 = False
        mockable_0 = module_0._Mockable(option_parser_0)
        option_0 = module_0._Option(str_0, iterable_0, str_0, bool_0, str_0, mockable_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'mbl!&A&aZ"j'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help()
        list_0 = [str_0]
        type_0 = module_2.type(*list_0)
        mockable_0 = option_parser_0.mockable()
        bool_0 = False
        none_type_0 = None
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, str_0, none_type_0)
        option_0.set(list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'da7>@,MP!2?_OO1CaNf'
        bool_0 = True
        str_1 = '\n\n##### In test_Option_val():'
        var_0 = print(str_1)
        str_2 = 'g'
        list_0 = [bool_0, str_2]
        option_parser_0 = module_0.OptionParser()
        list_1 = option_parser_0.parse_command_line(list_0)
        dict_0 = option_parser_0.group_dict(str_2)
        str_3 = 'port'
        dict_1 = option_parser_0.as_dict()
        str_4 = 'hel" <escrhp@ion'
        str_5 = '^DfLf7)ArthnKg.\x0b'
        str_6 = '--logging=warning'
        bool_1 = option_parser_0.__contains__(str_6)
        str_7 = "^'k="
        dict_2 = {str_7: str_5}
        iterable_0 = option_parser_0.items()
        option_parser_0.define(str_3, dict_2, iterable_0)
        bool_2 = True
        option_parser_1 = module_0.OptionParser()
        dict_3 = option_parser_1.group_dict(str_3)
        option_0 = module_0._Option(str_5, str_3, str_4, bool_2, str_3)
        option_0.set(var_0)
        option_parser_2 = module_0.OptionParser()
        option_parser_0.__setitem__(str_3, str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'E(JzGgF"3O*O9kH1'
        mockable_0 = option_parser_0.mockable()
        dict_0 = {str_0: mockable_0, str_0: option_parser_0}
        bool_0 = None
        str_1 = '?S2p8/JUX_2^'
        str_2 = 'pNebI32Mc^|Dr'
        list_0 = [str_1, str_2, str_2]
        option_parser_0.define(str_0, dict_0, str_0, bool_0, list_0)
        iterable_0 = option_parser_0.items()
        str_3 = '<ast>'
        str_4 = 'mbl!&A&aZ"j'
        str_5 = 'Content-Disposition'
        option_parser_1 = module_0.OptionParser()
        str_6 = ']M%'
        list_1 = [str_6, str_6]
        list_2 = option_parser_1.parse_command_line(list_1)
        dict_1 = option_parser_0.group_dict(str_3)
        list_3 = []
        list_4 = [str_5]
        type_0 = module_2.type(*list_4)
        option_0 = module_0._Option(str_5, list_3, type_0, str_3)
        any_0 = option_0.parse(str_5)
        str_7 = ' (viaU%s)'
        bool_1 = True
        none_type_0 = None
        option_1 = module_0._Option(str_7, str_4, str_6, bool_1, str_4, str_6, none_type_0)
        str_8 = 't5$\x0bdHfF'
        any_1 = option_1.parse(str_8)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'da7>@,MP!2?5_OO1CaNf'
        bool_0 = True
        str_1 = 'openid.ax.type.firstname'
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        bool_1 = False
        list_0 = module_0.parse_command_line(str_1, bool_1)
        option_0 = module_0._Option(str_0, str_0, bool_0)
        str_2 = '\n\n##### In test_Option_value():'
        any_0 = option_0.value()
        var_0 = print(str_2)
        option_parser_1 = module_0.OptionParser()
        set_0 = option_parser_1.groups()
        str_3 = 'test_String'
        option_parser_2 = module_0.OptionParser()
        dict_0 = option_parser_2.group_dict(str_3)
        str_4 = '\tE: @{D('
        list_1 = [str_4]
        list_2 = option_parser_2.parse_command_line(list_1)
        str_5 = 'hel" <escrhp@ion'
        bool_2 = True
        optional_0 = None
        bool_3 = True
        dict_1 = {bool_2: var_0}
        option_parser_2.define(str_5, any_0, optional_0, str_2, bool_3, dict_1)
        none_type_0 = None
        option_1 = module_0._Option(str_4, str_4, none_type_0)
    except BaseException:
        pass