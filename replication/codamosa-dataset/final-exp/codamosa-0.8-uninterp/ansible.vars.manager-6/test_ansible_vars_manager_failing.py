# Automatically generated by Pynguin.
import ansible.vars.manager as module_0
import ansible.inventory.host as module_1

def test_case_0():
    try:
        variable_manager_0 = module_0.VariableManager()
        var_0 = module_0.preprocess_vars(variable_manager_0)
    except BaseException:
        pass

def test_case_1():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = 'host1'
        bytes_0 = b'\xf2\x92'
        var_0 = variable_manager_0.clear_facts(bytes_0)
        str_1 = 'varname'
        str_2 = 'value'
        var_1 = variable_manager_0.set_host_variable(str_0, str_1, str_2)
        str_3 = 'newvalue'
        var_2 = variable_manager_0.set_host_variable(str_0, str_1, str_3)
        int_0 = -1053
        host_0 = None
        str_4 = 'bracketed_hostport'
        var_3 = variable_manager_0.get_vars(int_0, host_0, str_4)
    except BaseException:
        pass

def test_case_2():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = 'host1'
        str_1 = 'varname'
        var_0 = variable_manager_0.set_host_variable(str_0, str_1, str_0)
        var_1 = variable_manager_0.set_host_variable(str_0, str_1, str_0)
        float_0 = -24.462497462817556
        int_0 = -1728
        variable_manager_1 = module_0.VariableManager()
        var_2 = variable_manager_1.set_host_facts(float_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        vars_with_sources_0 = module_0.VarsWithSources()
        str_0 = 'G{\x0cUcoUz\x0b@GAt]}'
        variable_manager_0 = module_0.VariableManager(str_0)
        var_0 = variable_manager_0.set_nonpersistent_facts(list_0, vars_with_sources_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 512.0
        bool_0 = False
        vars_with_sources_0 = module_0.VarsWithSources()
        variable_manager_0 = module_0.VariableManager(vars_with_sources_0)
        var_0 = variable_manager_0.set_nonpersistent_facts(float_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x0b\xd2q*\xf3\xe9}\x8fy'
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__delitem__(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        variable_manager_0 = None
        dict_0 = {variable_manager_0: variable_manager_0}
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.get_source(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        complex_0 = None
        tuple_0 = None
        list_0 = [tuple_0, tuple_0]
        bytes_0 = b'u\x93\xeb8\xf7'
        variable_manager_0 = module_0.VariableManager()
        bytes_1 = None
        list_1 = [bytes_0, variable_manager_0, bytes_1, variable_manager_0]
        tuple_1 = (tuple_0, list_0, bytes_0, list_1)
        list_2 = [tuple_1, bytes_0, bytes_0]
        variable_manager_1 = module_0.VariableManager(list_2, variable_manager_0)
        var_0 = variable_manager_1.set_inventory(complex_0)
        list_3 = []
        vars_with_sources_0 = module_0.VarsWithSources()
        float_0 = -2066.57
        var_1 = vars_with_sources_0.__contains__(float_0)
        list_4 = []
        vars_with_sources_1 = module_0.VarsWithSources(*list_4)
        var_2 = vars_with_sources_1.__setitem__(list_3, vars_with_sources_0)
    except BaseException:
        pass

def test_case_8():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = 'host1'
        int_0 = 79
        str_1 = 'T\n9J*=jnK:a|ZP"d('
        variable_manager_1 = module_0.VariableManager()
        str_2 = '\nresults:\n    description: results from actions taken\n    returned: always\n    type: complex\n    sample: {\n            "attempts": 1,\n            "changed": true,\n            "name": "apache2",\n            "status": {\n                "enabled": {\n                    "changed": true,\n                    "rc": 0,\n                    "stderr": "",\n                    "stdout": ""\n                },\n                "stopped": {\n                    "changed": true,\n                    "rc": 0,\n                    "stderr": "",\n                    "stdout": "Stopping web server: apache2.\\n"\n                }\n            }\n        }\n'
        str_3 = '\n        Return the minor version number of the current distribution.\n\n        For details, see :func:`distro.minor_version`.\n        '
        dict_0 = {str_3: variable_manager_1}
        var_0 = variable_manager_1.set_inventory(dict_0)
        vars_with_sources_0 = module_0.VarsWithSources()
        var_1 = variable_manager_1.set_host_facts(str_2, vars_with_sources_0)
        var_2 = variable_manager_1.set_host_variable(str_0, int_0, str_1)
        str_4 = 'varname'
        var_3 = variable_manager_0.set_host_variable(str_0, str_4, str_0)
        var_4 = variable_manager_0.set_host_variable(str_0, str_4, str_0)
        var_5 = vars_with_sources_0.__iter__()
        variable_manager_2 = module_0.VariableManager()
        host_0 = module_1.Host()
        list_0 = None
        var_6 = variable_manager_0.set_host_facts(list_0, str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = 'host1'
        bytes_0 = b'\xf2\x92'
        var_0 = variable_manager_0.clear_facts(bytes_0)
        str_1 = 'varname'
        str_2 = 'value'
        var_1 = variable_manager_0.set_host_variable(str_0, str_1, str_2)
        str_3 = 'newv`lPe'
        var_2 = variable_manager_0.set_host_variable(str_0, str_1, str_3)
        str_4 = ':vC;H\rX/J2O'
        str_5 = '\x0b69\\!*FMNP'
        dict_0 = {str_4: variable_manager_0, str_5: str_0}
        var_3 = variable_manager_0.set_host_facts(dict_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 738
        int_1 = 8
        str_0 = "\tn\x0b]$YA'OLu++"
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.set_host_variable(int_0, int_1, str_0)
        vars_with_sources_0 = module_0.VarsWithSources()
        var_1 = module_0.preprocess_vars(vars_with_sources_0)
        bytes_0 = b'i\xa6\x13}f>\xbf'
        vars_with_sources_1 = module_0.VarsWithSources()
        var_2 = vars_with_sources_0.__iter__()
        var_3 = vars_with_sources_1.__len__()
        bool_0 = False
        str_1 = 'h)If?n$2_HoEj3.NaH'
        str_2 = None
        dict_0 = {str_1: str_0, str_1: str_0, str_2: str_2}
        variable_manager_1 = module_0.VariableManager(dict_0)
        var_4 = variable_manager_1.__getstate__()
        var_5 = vars_with_sources_0.copy()
        float_0 = 1084.7591724335723
        variable_manager_2 = module_0.VariableManager(float_0)
        tuple_0 = (bool_0, bytes_0, vars_with_sources_0)
        var_6 = vars_with_sources_1.__iter__()
        host_0 = None
        var_7 = module_0.preprocess_vars(host_0)
        str_3 = '\n        Ensures that there are no keys in the datastructure which do\n        not map to attributes for this object.\n        '
        variable_manager_3 = module_0.VariableManager(str_3)
        bool_1 = False
        var_8 = variable_manager_2.set_host_facts(bool_1, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0._options_vars
        var_1 = variable_manager_0.extra_vars
        var_2 = variable_manager_0.hostvars
    except BaseException:
        pass

def test_case_12():
    try:
        variable_manager_0 = module_0.VariableManager()
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = variable_manager_0.__setstate__(vars_with_sources_0)
        str_0 = 'alue'
        var_1 = variable_manager_0.set_host_variable(str_0, str_0, vars_with_sources_0)
        var_2 = variable_manager_0.set_host_variable(str_0, str_0, str_0)
        int_0 = -5165
        str_1 = '}MrsR-Ou$|'
        tuple_0 = None
        dict_0 = {var_1: variable_manager_0, str_1: variable_manager_0, int_0: var_1, tuple_0: variable_manager_0}
        var_3 = variable_manager_0.set_host_facts(tuple_0, dict_0)
        var_4 = variable_manager_0.set_inventory(vars_with_sources_0)
        dict_1 = {str_0: str_1, str_1: str_1, str_0: int_0, str_1: var_1}
        var_5 = variable_manager_0.set_host_facts(dict_1, variable_manager_0)
    except BaseException:
        pass