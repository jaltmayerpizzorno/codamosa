# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = 'A'
        reference_0 = module_0.Reference(str_0)
        array_0 = module_1.Array(reference_0)
        str_1 = '_target_string'
        var_0 = hasattr(array_0, str_1)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(array_0, schema_definitions_0)
        any_0 = schema_definitions_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'W2g%MkyFup'
        str_1 = 'oJ1?W2elDd$W.59O{4%o'
        str_2 = 'J +sE^:Nw=;]\x0bew'
        int_0 = schema_definitions_0.__len__()
        dict_0 = {str_0: schema_definitions_0, str_1: str_0, str_1: schema_definitions_0, str_2: str_1}
        schema_definitions_0.__setitem__(str_0, str_1)
        schema_definitions_0.__setitem__(schema_definitions_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        list_0 = [schema_0]
        str_1 = 'S v}'
        str_2 = '^'
        dict_0 = {str_1: schema_0, str_2: list_0, str_2: str_2, str_2: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0, **dict_0)
        schema_definitions_0.__delitem__(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ';y:=a'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        schema_0 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(str_0)
        reference_0 = module_0.Reference(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = None
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1811
        str_0 = ''
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'S v}'
        bool_0 = False
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        bool_0 = True
        str_0 = '&(2ryE'
        bool_1 = True
        field_0 = module_1.Field(title=str_0, description=str_0, allow_null=bool_1)
        field_1 = module_1.Field(title=str_0, description=str_0)
        union_0 = field_1.__or__(field_0)
        reference_0 = module_0.Reference(str_0, union_0)
        any_0 = reference_0.validate(iterator_0, strict=bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ';i^m\tX]]&&~~0Y(I'
        dict_0 = None
        str_1 = 'm5=A4Y<Vx9hEOZ+j\t"Z'
        reference_0 = module_0.Reference(str_0, str_1)
        any_0 = reference_0.validate(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0]
        schema_0 = module_0.Schema(*list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        str_0 = schema_0.__repr__()
        any_0 = schema_0.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_12():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        list_0 = [schema_0]
        str_1 = 'S v}'
        str_2 = '7B|DGVq\r/S3cS?'
        dict_0 = {str_2: str_1}
        schema_1 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '%epu;%p'
        list_0 = [str_0]
        schema_0 = module_0.Schema(*list_0)
        int_0 = schema_0.__len__()
        schema_1 = module_0.Schema()
        str_1 = schema_1.__repr__()
        iterator_0 = schema_1.__iter__()
        bool_0 = schema_1.__eq__(schema_1)
        field_0 = module_1.Field()
        str_2 = "9\t<Cl'}nzEQ}nXCa+!"
        str_3 = 'i[W(\\_sF3\nJFs +emz@4'
        bool_1 = schema_0.__eq__(str_2)
        optional_0 = None
        reference_0 = module_0.Reference(str_3, optional_0)
        any_0 = reference_0.serialize(optional_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_1 = module_0.SchemaDefinitions(*list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '%epu;%p'
        list_0 = [str_0]
        schema_0 = module_0.Schema(*list_0)
        int_0 = schema_0.__len__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        schema_1 = module_0.Schema()
        str_1 = 'wJ'
        dict_0 = {str_0: int_0, str_0: int_0, str_1: int_0}
        schema_definitions_1 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_1.__setitem__(str_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        str_0 = 'if_clause'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        reference_0 = module_0.Reference(str_0, dict_0)
        any_0 = reference_0.validate(bool_0)
    except BaseException:
        pass