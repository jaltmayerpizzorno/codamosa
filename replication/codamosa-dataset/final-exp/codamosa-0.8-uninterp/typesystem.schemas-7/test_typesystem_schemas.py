# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1
import builtins as module_2

def test_case_0():
    pass

def test_case_1():
    schema_definitions_0 = module_0.SchemaDefinitions()

def test_case_2():
    str_0 = '\x0c$TKE\x0cHZk\tpJ$N*\tcd'
    field_0 = module_1.Field(description=str_0)
    schema_definitions_0 = module_0.SchemaDefinitions()
    iterator_0 = schema_definitions_0.__iter__()
    module_0.set_definitions(field_0, schema_definitions_0)

def test_case_3():
    schema_0 = module_0.Schema()

def test_case_4():
    schema_0 = module_0.Schema()
    list_0 = [schema_0]
    schema_1 = module_0.Schema(*list_0)

def test_case_5():
    schema_0 = module_0.Schema()
    str_0 = schema_0.__repr__()

def test_case_6():
    schema_0 = module_0.Schema()
    bool_0 = schema_0.__eq__(schema_0)
    int_0 = schema_0.__len__()

def test_case_7():
    str_0 = 'value_1'
    str_1 = 'value_2'
    schema_0 = module_0.Schema()
    var_0 = list(schema_0)

def test_case_8():
    schema_0 = module_0.Schema()
    int_0 = schema_0.__len__()

def test_case_9():
    field_0 = module_1.Field()
    schema_definitions_0 = module_0.SchemaDefinitions()
    module_0.set_definitions(field_0, schema_definitions_0)

def test_case_10():
    str_0 = 'A'
    reference_0 = module_0.Reference(str_0)
    array_0 = module_1.Array(reference_0)
    str_1 = '8hould have target string'
    schema_definitions_0 = module_0.SchemaDefinitions()
    module_0.set_definitions(array_0, schema_definitions_0)
    var_0 = hasattr(array_0, str_1)

def test_case_11():
    dict_0 = module_2.dict()
    list_0 = [dict_0]
    schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
    field_0 = module_1.Field()
    schema_0 = module_0.Schema(*list_0, **dict_0)
    module_0.set_definitions(field_0, schema_definitions_0)