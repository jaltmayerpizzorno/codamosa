# Automatically generated by Pynguin.
import ansible.module_utils.common.collections as module_0

def test_case_0():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0]
        immutable_dict_0 = module_0.ImmutableDict(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'failed to copy %s to %s: %s'
        dict_0 = {str_0: str_0}
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__len__()
        immutable_dict_1 = module_0.ImmutableDict(**dict_0)
        int_0 = 420
        var_1 = immutable_dict_1.union(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Provided cwd is not a valid directory: %s'
        var_0 = module_0.count(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'YQMPaj&Tq6W;6l;'
        set_0 = {str_0, str_0}
        bytes_0 = b'\x8a\x8bw\xebK\xec\x8b8\xec\xec\x80\x88+\xabV'
        int_0 = None
        var_0 = module_0.is_sequence(bytes_0, int_0)
        immutable_dict_0 = module_0.ImmutableDict()
        var_1 = immutable_dict_0.__getitem__(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        immutable_dict_0 = None
        var_0 = module_0.count(immutable_dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '&*3D+LWey9'
        list_0 = [str_0, str_0, str_0]
        str_1 = 'Gq5[:\r'
        list_1 = [str_1, str_1, str_1, list_0]
        list_2 = [list_0, str_1, list_1, list_1]
        str_2 = 'FY1)vkmd}(I7vj'
        str_3 = '5(\nj=Q-_'
        dict_0 = {str_2: str_1, str_1: str_3, str_3: list_1}
        var_0 = module_0.is_sequence(list_2, dict_0)
        set_0 = set()
        bytes_0 = b'\x07\xd6R\xea\xa1\x92<\x99\xe74\xd9\x99\n'
        list_3 = [set_0, bytes_0, bytes_0]
        list_4 = [list_3, set_0]
        immutable_dict_0 = module_0.ImmutableDict(*list_4)
    except BaseException:
        pass

def test_case_6():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__len__()
        list_0 = []
        var_1 = immutable_dict_0.__eq__(list_0)
        var_2 = immutable_dict_0.__hash__()
        var_3 = immutable_dict_0.__repr__()
        list_1 = [immutable_dict_0]
        str_0 = 'f"Kz`'
        dict_0 = {str_0: var_3}
        bytes_0 = b'X~q\xe5v\xa9@'
        immutable_dict_1 = module_0.ImmutableDict(*list_1)
        set_0 = {var_0, var_2}
        tuple_0 = (bytes_0,)
        var_4 = module_0.is_iterable(set_0, tuple_0)
        var_5 = module_0.is_iterable(bytes_0)
        var_6 = module_0.is_sequence(dict_0)
        immutable_dict_2 = module_0.ImmutableDict()
        immutable_dict_3 = module_0.ImmutableDict()
        immutable_dict_4 = module_0.ImmutableDict(*list_1, **dict_0)
        var_7 = immutable_dict_4.difference(bytes_0)
        var_8 = immutable_dict_2.__eq__(dict_0)
        set_1 = {immutable_dict_0, var_3, str_0, immutable_dict_3}
        var_9 = immutable_dict_2.difference(set_1)
        var_10 = immutable_dict_0.union(list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 3920
        bytes_0 = b'\xf5^\xbcam\xceJ\xe0\xb1\xba\x8e4\x07\xb7\x9e\x8b'
        var_0 = module_0.is_iterable(int_0, bytes_0)
        immutable_dict_0 = module_0.ImmutableDict()
        dict_0 = {}
        var_1 = immutable_dict_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__len__()
        list_0 = []
        var_1 = immutable_dict_0.__eq__(list_0)
        var_2 = immutable_dict_0.__hash__()
        var_3 = immutable_dict_0.__repr__()
        list_1 = [immutable_dict_0]
        var_4 = module_0.count(immutable_dict_0)
        str_0 = 'f"Kz`'
        dict_0 = {str_0: var_3}
        bytes_0 = b'\xc1-G\x96\x86\x13[X,\xa5'
        immutable_dict_1 = module_0.ImmutableDict(*list_1)
        set_0 = {var_0, var_2}
        tuple_0 = (bytes_0,)
        var_5 = module_0.is_iterable(set_0, tuple_0)
        var_6 = module_0.is_iterable(bytes_0)
        var_7 = module_0.is_sequence(dict_0)
        immutable_dict_2 = module_0.ImmutableDict()
        immutable_dict_3 = module_0.ImmutableDict(*list_1, **dict_0)
        var_8 = immutable_dict_3.difference(bytes_0)
        var_9 = immutable_dict_3.__eq__(dict_0)
        set_1 = {immutable_dict_0, var_3, str_0, immutable_dict_2}
        var_10 = immutable_dict_3.difference(set_1)
        var_11 = immutable_dict_0.__iter__()
        bool_0 = True
        var_12 = immutable_dict_2.__eq__(bool_0)
        var_13 = immutable_dict_0.union(list_1)
    except BaseException:
        pass