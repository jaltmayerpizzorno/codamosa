# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'o`u\x0cf24B:OV'
    list_0 = []
    command_0 = module_0.Command(str_0, list_0)

def test_case_2():
    int_0 = 77
    int_1 = 2790
    list_0 = [int_1, int_1]
    list_1 = [int_1, list_0, int_1]
    command_0 = module_0.Command(list_0, list_1)
    var_0 = command_0.__eq__(int_0)

def test_case_3():
    str_0 = 'name'
    var_0 = None
    bool_0 = True
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    str_1 = 's'
    command_0 = module_0.Command(str_1, var_0)
    dict_0 = {}
    var_1 = command_0.update(**dict_0)
    var_2 = rule_0.is_match(command_0)
    bool_1 = False
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    var_3 = rule_1.is_match(command_0)

def test_case_4():
    str_0 = 'ls'
    bool_0 = True
    rule_0 = module_0.Rule(str_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    command_0 = module_0.Command(str_0, str_0)
    var_0 = rule_0.is_match(command_0)

def test_case_5():
    str_0 = 'name'
    var_0 = None
    bool_0 = True
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    str_1 = 'ls'
    command_0 = module_0.Command(str_1, var_0)
    bytes_0 = b'41\xeb\xe2\t\x88'
    var_1 = rule_0.__eq__(bytes_0)
    var_2 = rule_0.is_match(command_0)
    bool_1 = False
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    command_1 = module_0.Command(str_1, var_0)
    var_3 = rule_1.__repr__()
    var_4 = rule_1.is_match(command_1)

def test_case_6():
    str_0 = 'name'
    var_0 = None
    bool_0 = True
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    command_0 = module_0.Command(str_0, var_0)
    var_1 = rule_0.is_match(command_0)
    bool_1 = False
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    command_1 = module_0.Command(str_0, var_0)
    var_2 = rule_1.__repr__()
    var_3 = rule_1.is_match(command_1)

def test_case_7():
    str_0 = 'echo "foo"'
    var_0 = None
    corrected_command_0 = module_0.CorrectedCommand(str_0, var_0, var_0)
    var_1 = corrected_command_0.run(var_0)

def test_case_8():
    str_0 = '4THs[x2  Ecca[)Y"I'
    bytes_0 = b'\x7f\xb6\x1e\xba:\x8a\xdc\xd9\x9b\xc12\xc4\xe7B\xe4B'
    str_1 = 'txS'
    bool_0 = True
    tuple_0 = (str_1, bool_0)
    list_0 = [bytes_0, bool_0, tuple_0]
    set_0 = set()
    tuple_1 = (tuple_0, tuple_0, list_0, set_0)
    corrected_command_0 = module_0.CorrectedCommand(bytes_0, tuple_1, set_0)
    var_0 = corrected_command_0.__eq__(str_0)
    bytes_1 = b'iM\xa1\xf4pGn\xc2\xa7\x01\xe33mk'
    bool_1 = True
    str_2 = 'contains uncommitted changes'
    corrected_command_1 = module_0.CorrectedCommand(bytes_1, bool_1, str_2)
    var_1 = corrected_command_1.__repr__()

def test_case_9():
    tuple_0 = ()
    bool_0 = True
    str_0 = 'l'
    corrected_command_0 = module_0.CorrectedCommand(tuple_0, bool_0, str_0)
    bool_1 = False
    str_1 = None
    str_2 = ':#)kl0Yoe@Nmp|w31%lH'
    tuple_1 = (corrected_command_0,)
    dict_0 = {str_0: tuple_0, str_1: bool_0, str_2: tuple_1}
    corrected_command_1 = module_0.CorrectedCommand(corrected_command_0, bool_1, dict_0)
    var_0 = corrected_command_1.__hash__()

def test_case_10():
    str_0 = 'test'
    bool_0 = True
    var_0 = lambda x: bool_0
    str_1 = 'new'
    var_1 = lambda x: str_1
    var_2 = None
    var_3 = lambda x, y: var_2
    int_0 = 10
    rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, var_3, int_0, bool_0)
    var_4 = lambda x: bool_0
    var_5 = lambda x: str_1
    var_6 = lambda x, y: var_2
    rule_1 = module_0.Rule(str_0, var_4, var_5, bool_0, var_6, int_0, bool_0)
    str_2 = 'other'
    var_7 = lambda x: bool_0
    var_8 = lambda x: str_1
    var_9 = lambda x, y: var_2
    rule_2 = module_0.Rule(str_2, var_7, var_8, bool_0, var_9, int_0, bool_0)
    var_10 = rule_0 == rule_2
    bool_1 = False
    var_11 = lambda x: bool_1
    var_12 = lambda x: str_1
    var_13 = lambda x, y: var_2
    rule_3 = module_0.Rule(str_0, var_11, var_12, bool_0, var_13, int_0, bool_0)
    var_14 = rule_0 == rule_3
    var_15 = lambda x: bool_0
    var_16 = lambda x: str_2
    rule_4 = module_0.Rule(str_0, var_15, var_16, bool_0, rule_0, int_0, bool_0)
    var_17 = rule_0 == rule_4

def test_case_11():
    str_0 = 'name'
    var_0 = None
    bool_0 = True
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    str_1 = 'ls'
    command_0 = module_0.Command(str_1, var_0)
    var_1 = rule_0.is_match(command_0)
    bool_1 = False
    rule_1 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_1)
    var_2 = rule_1.is_match(command_0)

def test_case_12():
    var_0 = None
    str_0 = 'ls'
    bool_0 = False
    rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, bool_0)
    command_0 = module_0.Command(str_0, var_0)
    var_1 = rule_0.is_match(command_0)