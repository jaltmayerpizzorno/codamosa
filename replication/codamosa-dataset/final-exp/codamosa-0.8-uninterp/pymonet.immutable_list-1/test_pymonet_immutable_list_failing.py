# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        bool_0 = True
        str_0 = 'OoD^#Ti6xv'
        immutable_list_0 = module_0.ImmutableList(str_0, bool_0)
        tuple_0 = ()
        var_0 = immutable_list_0.append(str_0)
        optional_0 = immutable_list_0.find(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        str_0 = immutable_list_0.__str__()
        bool_1 = False
        immutable_list_1 = module_0.ImmutableList(bool_1)
        var_1 = immutable_list_1.__add__(var_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_0 = immutable_list_0.__len__()
        optional_0 = immutable_list_0.find(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ']\rbdFZ=ts"\x0c?^+eIq#^A'
        dict_0 = {str_0: str_0, str_0: str_0}
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(dict_0, bool_0)
        bool_1 = False
        immutable_list_1 = module_0.ImmutableList(bool_1)
        var_0 = immutable_list_0.__len__()
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.__len__()
        immutable_list_1 = module_0.ImmutableList(bool_0)
        optional_0 = immutable_list_1.find(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        immutable_list_0 = module_0.ImmutableList()
        dict_0 = {}
        var_0 = immutable_list_0.append(dict_0)
        immutable_list_1 = module_0.ImmutableList(immutable_list_0, var_0)
        var_1 = immutable_list_0.to_list()
        var_2 = immutable_list_1.to_list()
        var_3 = None
        var_4 = immutable_list_0.unshift(var_3)
        object_0 = module_1.object()
        callable_0 = None
        optional_0 = immutable_list_0.find(callable_0)
        var_5 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "77,'0\x0cV|\x0b,"
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.to_list()
        immutable_list_1 = module_0.ImmutableList(bool_0, bool_0)
        var_1 = None
        var_2 = immutable_list_1.unshift(var_1)
        var_3 = immutable_list_1.__add__(var_2)
        var_4 = immutable_list_1.map(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        object_0 = module_1.object()
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        str_0 = immutable_list_0.__str__()
        bool_1 = immutable_list_0.__eq__(object_0)
        immutable_list_1 = module_0.ImmutableList(immutable_list_0)
        bool_2 = immutable_list_1.__eq__(object_0)
        tuple_0 = None
        var_0 = immutable_list_1.map(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        none_type_0 = None
        immutable_list_0 = module_0.ImmutableList(none_type_0)
        var_0 = immutable_list_0.to_list()
        dict_0 = {}
        var_1 = immutable_list_0.append(dict_0)
        immutable_list_1 = module_0.ImmutableList(immutable_list_0, var_1)
        callable_0 = None
        optional_0 = immutable_list_0.find(callable_0)
        var_2 = immutable_list_1.filter(callable_0)
    except BaseException:
        pass

def test_case_9():
    try:
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.filter(immutable_list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        callable_0 = None
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_11():
    try:
        immutable_list_0 = module_0.ImmutableList()
        list_0 = [immutable_list_0, immutable_list_0]
        optional_0 = immutable_list_0.find(list_0)
        callable_0 = None
        var_0 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        callable_0 = None
        var_0 = None
        var_1 = immutable_list_0.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_13():
    try:
        object_0 = None
        bytes_0 = b'S\xa4\x97\xc7\xc6\xe2\xda\x80N#V\xfc\xb7\x18W'
        tuple_0 = (bytes_0,)
        callable_0 = None
        var_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_1 = immutable_list_0.reduce(callable_0, var_0)
        immutable_list_1 = module_0.ImmutableList()
        var_2 = immutable_list_1.reduce(tuple_0, var_1)
        str_0 = 'lUtE%5'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0]
        str_1 = immutable_list_1.__str__()
        bool_0 = False
        immutable_list_2 = module_0.ImmutableList(bool_0)
        bool_1 = immutable_list_2.__eq__(object_0)
        list_1 = [list_0, dict_0]
        bool_2 = True
        immutable_list_3 = module_0.ImmutableList(list_1, bool_2)
        var_3 = immutable_list_3.reduce(object_0, var_2)
    except BaseException:
        pass

def test_case_14():
    try:
        immutable_list_0 = module_0.ImmutableList()
        bytes_0 = b''
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        var_0 = None
        immutable_list_1 = module_0.ImmutableList()
        var_1 = immutable_list_1.reduce(set_0, var_0)
    except BaseException:
        pass

def test_case_15():
    try:
        callable_0 = None
        dict_0 = {}
        list_0 = []
        immutable_list_0 = module_0.ImmutableList(dict_0, list_0)
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass