# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        str_0 = '&8]F0Y|'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\rFh:l[Zq051[:4\n'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 385.121
        int_0 = 31
        list_0 = [int_0, float_0, int_0, int_0]
        tuple_0 = (float_0, int_0, list_0)
        invalid_pattern_0 = module_0.InvalidPattern(tuple_0)
        bytes_0 = b'f\xa6\x97\xcb\x0c\x92\xff\xb9\xb7'
        invalid_pattern_1 = module_0.InvalidPattern(bytes_0)
        var_0 = invalid_pattern_1.__eq__(invalid_pattern_0)
        str_0 = '=!r/b'
        invalid_pattern_2 = module_0.InvalidPattern(str_0)
        int_1 = -3307
        set_0 = {str_0, str_0, int_1, int_1}
        lazy_regex_0 = module_0.LazyRegex()
        var_1 = lazy_regex_0.__getattr__(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 125.00448075595767
        str_0 = 'eRsMr8EDqxj`\\i? '
        dict_0 = {str_0: float_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        lazy_regex_1 = module_0.LazyRegex(lazy_regex_0)
        str_1 = '+zjFD5T*Zq;'
        var_0 = lazy_regex_0.__getattr__(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1430
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getstate__()
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_1 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '=!r/b'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = module_0.lazy_compile()
        var_1 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_7():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        str_0 = '`?}+\x0b(PK}xy'
        set_0 = {str_0, lazy_regex_0, lazy_regex_0}
        invalid_pattern_0 = module_0.InvalidPattern(lazy_regex_0)
        var_0 = invalid_pattern_0.__eq__(set_0)
        invalid_pattern_1 = module_0.InvalidPattern(str_0)
        var_1 = invalid_pattern_1.__eq__(lazy_regex_0)
        dict_0 = {}
        var_2 = module_0.finditer_public(invalid_pattern_1, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -524.57982
        lazy_regex_0 = module_0.LazyRegex(float_0)
        bool_0 = None
        var_0 = module_0.finditer_public(lazy_regex_0, float_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "\n    Decorator to dedupe it's output iterable automatically.\n\n    :param f: Wrapped meth\n    :param instance: wrapt provided property for decorating hy{rated class instances (uused)\n    :param args: Passthrough args\n    :param kwargs: Passthrough kwargs\n    :return decorator: Decorator method that ingests iterables and dedupes them iteratively.\n    "
        float_0 = 166.279
        invalid_pattern_0 = module_0.InvalidPattern(float_0)
        set_0 = set()
        list_0 = [str_0]
        lazy_regex_0 = module_0.LazyRegex(list_0)
        var_0 = lazy_regex_0.__getattr__(set_0)
    except BaseException:
        pass