# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0
import docstring_parser.common as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = ' The short description.\n\nThe long description.\n\nParams\n------\narg_name\n    arg_description\narg2 : type, optional\n    descriptions can also span...\n    ... multiple lines\n\nRaises\n------\nValueError\n    A description of what might raise ValueError\n\nReturns\n-------\nreturn_name : type\n    A description of this returned value\nanother_type\n    Return names are optional, types are required'
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_3():
    str_0 = 'First line\nSecond line, possibly over multiple lines\n\n.. deprecated:: 1.0\n    Second line of deprecation warning,\n    possibly over multiple lines\n\nParameters\n----------\nparam1 : type, optional\n    Description of `param1`, which has type `type` and defaults to\n    `None`.\n\nExample\n-------\nExample following the "Example" section.\n\n    >>> print(\'this is an example\')\n    this is an example\n\nSee Also\n--------\nThe "See Also" section can contain arbitrary references,\ne.g. :py:class:`~python:dict`, :py:func:`~python:sorted`, or\n:py:class:`~builtins.list`.\n'
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)
    str_1 = '===short description==='
    var_0 = print(str_1)
    var_1 = docstring_0.short_description
    var_2 = print(var_1)

def test_case_4():
    str_0 = '\n    A function that takes in a number of names and returns the number of\n    unusual last names they have.\n\n    Parameters\n    ----------\n    num_names : number of names\n        The number of names to process.\n\n    Returns\n    -------\n    count : number of unusual names\n        The number of unusual last names in the given list of names.\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    section_0 = module_0.Section(str_0, str_0)
    var_0 = numpydoc_parser_0.add_section(section_0)
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_5():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = 'Fn%QN\n:E<9<8eNQ-'
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = '8d8=89L2$--U+%RwsClI'
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_8():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = ''
    docstring_0 = numpydoc_parser_0.parse(str_0)
    docstring_1 = module_1.Docstring()
    str_1 = '\n        Parameters\n        ----------\n        step_index : object\n            The index of the step to be retrieved, 0-based.\n        Returns\n        -------\n        list of steps\n        '
    numpydoc_parser_1 = module_0.NumpydocParser()
    docstring_2 = numpydoc_parser_1.parse(str_1)
    str_2 = 'param'
    str_3 = 'step_index'
    str_4 = [str_2, str_3]
    str_5 = 'The index of the step to be retrieved, 0-based.'
    str_6 = 'object'
    docstring_meta_0 = module_1.DocstringMeta(str_4, str_5)
    str_7 = 'returns'
    str_8 = [str_7]
    str_9 = 'list of steps'
    docstring_meta_1 = module_1.DocstringMeta(str_8, str_9)
    docstring_meta_2 = [docstring_meta_0, docstring_meta_1]
    docstring_3 = module_1.Docstring()

def test_case_9():
    str_0 = ' The short des5ription.\n\nThe long descri/tion.\n\nParams\n------\narg_name\n    arg_description\narg2 : type, optional\n    descriptions can also span...\n    ... multiple lines\n\nRaises\n------\nValueError\n    A description of what might raise ValueError\n\nReturns\n---a---\nreturn_name : type\n    A description of this returned value\nanother_type\n    Return names are optional, types are required'
    docstring_0 = module_0.parse(str_0)

def test_case_10():
    str_0 = '\n    A function that takes in a number of names and returns the number of\n    unusual last names they have.\n\n    Parameters\n    ----------\n    num_names : number of names\n        The number of names to process.\n\n    Returns\n    -------\n    count : number of unusual names\n        The number of unusual last names in the given list of names.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = ' The short description.\n\nThe long description.\n\nParams\n------\nayg_name\n    arg_description\narg2 : type, optional\n    descriptions can also span...\n    ... multipe lines\n@Raises\n------\nVaueErrr\n    A descriptin of what might raiseValueError\n\nReturns\n-------\nreturn_name : type\n    A description of this returned value\nanother_type\n    Return names are optional, types are required'
    docstring_0 = module_0.parse(str_0)

def test_case_12():
    str_0 = 'eO)eWB\t:+[\n\x0b'
    docstring_0 = module_0.parse(str_0)