# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    try:
        numpydoc_parser_0 = module_0.NumpydocParser()
        section_0 = None
        var_0 = numpydoc_parser_0.add_section(section_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'param'
        docstring_0 = module_0.parse(str_0)
        str_1 = 'U^S0D?d|.'
        str_2 = '|B&~'
        sphinx_section_0 = module_0._SphinxSection(str_2, str_0)
        str_3 = 'notes'
        yields_section_0 = module_0.YieldsSection(str_3, str_2)
        str_4 = ''
        str_5 = 'raises'
        numpydoc_parser_0 = module_0.NumpydocParser()
        str_6 = 'Bp'
        section_0 = module_0.Section(str_6, str_4)
        section_1 = module_0.Section(str_1, str_0)
        iterable_0 = section_1.parse(str_6)
        iterable_1 = section_0.parse(str_3)
        deprecation_section_0 = module_0.DeprecationSection(str_5, str_5)
        param_section_0 = module_0.ParamSection(str_0, str_5)
        iterable_2 = deprecation_section_0.parse(str_6)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_2)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'STdbM<?\x0c~JI&V'
        str_1 = '<_+/1+:c WL'
        section_0 = module_0.Section(str_0, str_1)
        dict_0 = {str_0: section_0, str_1: section_0, str_1: section_0, str_0: section_0}
        numpydoc_parser_0 = module_0.NumpydocParser(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ' The short description.\n\nThe long description.\n\nParams\n------\narg_name\n    arg_description\narg2 : type, optional\n    descriptions can also span...\n    ... multiple lines\n\nRaises\n------\nValueError\n    A description of what might raise ValueError\n\nReturns\n-------\nreturn_name : type\n    A description of this returned value\nanother_type\n    Return names are optional, types are required'
        str_1 = 'see_also'
        deprecation_section_0 = module_0.DeprecationSection(str_0, str_1)
        docstring_0 = module_0.parse(str_0)
        str_2 = "6;%&]'0UDn44AJs"
        k_v_section_0 = module_0._KVSection(str_2, str_0)
        iterable_0 = k_v_section_0.parse(str_0)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'r~HPP]]'
        str_1 = '\\M\x0c2?\x0bK\\6'
        numpydoc_parser_0 = module_0.NumpydocParser()
        str_2 = None
        str_3 = 'h;A_e<#k'
        sphinx_section_0 = module_0._SphinxSection(str_2, str_3)
        str_4 = 'rs'
        str_5 = ',n`,f}Y\x0c[@ji]'
        param_section_0 = module_0.ParamSection(str_0, str_5)
        str_6 = ' .p\\Hn)u_'
        k_v_section_0 = module_0._KVSection(str_2, str_4)
        k_v_section_1 = module_0._KVSection(str_4, str_0)
        iterable_0 = k_v_section_0.parse(str_6)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_0)
        str_7 = 'examles'
        numpydoc_parser_2 = module_0.NumpydocParser()
        docstring_0 = numpydoc_parser_2.parse(str_7)
        deprecation_section_0 = module_0.DeprecationSection(str_3, str_1)
        docstring_1 = numpydoc_parser_1.parse(str_4)
    except BaseException:
        pass