# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        str_0 = '%;tcM=C~"0#e'
        tuple_0 = module_0.parse_content_header(str_0)
        bytes_0 = b'\x14.\x05\x84\xf8\xe9\xb7\x0b\x17\x91\to\x1c"\x9fH'
        tuple_1 = ()
        dict_0 = module_0.fwd_normalize(tuple_1)
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = 'jaTgO )s-<}|b\x0bZ'
        str_3 = module_0.fwd_normalize_address(str_2)
        bytes_1 = b'\x8db_\x9f4D4\x1fK\xbf'
        optional_0 = module_0.parse_forwarded(bytes_1, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        int_0 = -468
        optional_0 = module_0.parse_forwarded(dict_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -2909.16405
        bytes_0 = None
        optional_0 = module_0.parse_xforwarded(float_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        dict_0 = module_0.fwd_normalize(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        tuple_0 = module_0.parse_host(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'JN@5;V'
        tuple_0 = module_0.parse_content_header(str_0)
        int_0 = 4
        set_0 = None
        bytes_0 = module_0.format_http1_response(int_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Unit test for the function fwd_normalize'
        str_1 = 'c-'
        str_2 = (str_1, str_1)
        str_3 = module_0.fwd_normalize_address(str_0)
        int_0 = 1
        int_1 = {str_2: int_0}
        dict_0 = module_0.fwd_normalize(int_1)
        int_2 = -677
        tuple_0 = (str_1, int_1)
        bytes_0 = module_0.format_http1_response(int_2, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'JN@5;V'
        dict_0 = module_0.fwd_normalize(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -202
        dict_0 = {}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
        str_0 = '\npoMQ'
        str_1 = (str_0, str_0)
        str_2 = [str_1, str_1]
        str_3 = module_0.fwd_normalize_address(str_0)
        dict_1 = {str_1: str_2, int_0: str_1}
        str_4 = '|lDp_\x0b7r6[a;Q!w3|Tw\t'
        tuple_0 = module_0.parse_content_header(str_4)
        bytes_1 = module_0.format_http1_response(int_0, dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        tuple_0 = module_0.parse_host(str_0)
        int_0 = -3117
        list_0 = [tuple_0, int_0]
        tuple_1 = module_0.parse_content_header(str_0)
        dict_0 = module_0.fwd_normalize(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'host'
        str_1 = 'localhost:8000'
        str_2 = (str_0, str_1)
        str_3 = [str_2]
        dict_0 = module_0.fwd_normalize(str_3)
        str_4 = 'proto'
        str_5 = 'https'
        str_6 = (str_4, str_5)
        str_7 = [str_3, str_6]
        dict_1 = module_0.fwd_normalize(str_7)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'localost:8000'
        str_1 = (str_0, str_0)
        tuple_0 = module_0.parse_host(str_0)
        str_2 = [str_1]
        dict_0 = module_0.fwd_normalize(str_2)
        dict_1 = None
        str_3 = '/L.]FW'
        str_4 = ''
        tuple_1 = (str_4, dict_0)
        list_0 = [str_3, tuple_1, str_2]
        optional_0 = module_0.parse_xforwarded(dict_1, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '192.168.1.1'
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = '_192.168.1.1'
        str_3 = module_0.fwd_normalize_address(str_2)
        str_4 = module_0.fwd_normalize_address(str_3)
        str_5 = '_Unknown'
        str_6 = module_0.fwd_normalize_address(str_5)
        str_7 = 'unknown'
        str_8 = module_0.fwd_normalize_address(str_7)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'proto'
        str_1 = 'http'
        str_2 = (str_0, str_1)
        str_3 = 'host'
        str_4 = (str_3, str_2)
        str_5 = 'port'
        str_6 = 'IJ`In4Mn}AGlVdjk7go'
        str_7 = (str_5, str_6)
        str_8 = [str_7, str_2, str_4, str_7, str_7]
        dict_0 = module_0.fwd_normalize(str_8)
    except BaseException:
        pass