# Automatically generated by Pynguin.
import typesystem.formats as module_0
import datetime as module_1

def test_case_0():
    try:
        str_0 = '2018-01-01T12:10:19'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        bool_0 = base_format_0.is_native_type(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        date_time_format_0 = None
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(date_time_format_0)
    except BaseException:
        pass

def test_case_3():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-10-01T13:05:00+0300'
        datetime_0 = date_time_format_0.validate(str_0)
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(datetime_0)
        str_1 = '+04:00'
        optional_0 = date_time_format_0.serialize(datetime_0)
        float_0 = -2948.0
        bool_1 = time_format_0.is_native_type(float_0)
        base_format_0 = module_0.BaseFormat()
        int_0 = 10
        time_format_1 = module_0.TimeFormat()
        dict_0 = {str_0: str_1, str_1: int_0, str_0: datetime_0}
        time_format_2 = module_0.TimeFormat()
        optional_1 = base_format_0.serialize(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -2960
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(int_0)
        float_0 = -4102.3
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2025-12-32'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        date_format_0 = module_0.DateFormat(**dict_0)
        date_format_1 = module_0.DateFormat()
        optional_0 = date_format_1.serialize(date_format_0)
    except BaseException:
        pass

def test_case_7():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2018-01-01T12:10:19'
        datetime_0 = date_time_format_0.validate(str_0)
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(datetime_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'H\t'
        date_time_format_0 = module_0.DateTimeFormat()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(str_0)
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_10():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = '8b6f8099-f150-4084-acf8-0a2dcf6a9cba'
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
        u_u_i_d_1 = u_u_i_d_format_0.validate(u_u_i_d_format_0)
    except BaseException:
        pass

def test_case_11():
    try:
        date_format_0 = None
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = u_u_i_d_format_0.serialize(date_format_0)
        str_1 = '$}eq'
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = None
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'MmF7$'
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '(error='
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '(eurrr'
        dict_0 = {}
        u_u_i_d_format_0 = module_0.UUIDFormat(**dict_0)
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        list_0 = []
        date_format_0 = module_0.DateFormat(*list_0)
        optional_0 = None
        date_format_1 = module_0.DateFormat()
        optional_1 = date_format_1.serialize(optional_0)
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(optional_0)
    except BaseException:
        pass

def test_case_18():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-02-30T02:59:59Z'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-10-01T13:05:00Z'
        datetime_0 = date_time_format_0.validate(str_0)
        date_time_format_1 = module_0.DateTimeFormat()
        str_1 = '2020-10-01T13:05:00q'
        datetime_1 = date_time_format_1.validate(str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '2020-10-01T13:05:00+03:00'
        time_format_0 = module_0.TimeFormat()
        optional_0 = None
        optional_1 = time_format_0.serialize(optional_0)
        time_0 = module_1.time()
        optional_2 = time_format_0.serialize(time_0)
        time_1 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '26:57'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass