# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import _asyncio as module_1

def test_case_0():
    try:
        str_0 = 'p~_F:p'
        bool_0 = module_0.is_future(str_0)
        future_0 = module_1.Future()
    except BaseException:
        pass

def test_case_1():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        dummy_executor_0.shutdown()
        callable_0 = module_0.run_on_executor()
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1000.0
        str_0 = 'y&'
        str_1 = 'y\rs537o$\t4(f~?F4u@X'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: float_0, str_0: str_1}
        list_0 = []
        dummy_executor_0 = module_0.DummyExecutor(*list_0)
        future_0 = dummy_executor_0.submit(float_0, **dict_0)
        dict_1 = {dummy_executor_0: list_0, str_1: dict_0, str_1: list_0}
        module_0.future_add_done_callback(future_0, dict_1)
    except BaseException:
        pass

def test_case_3():
    try:
        future_0 = None
        bool_0 = module_0.is_future(future_0)
        str_0 = '4_z_e`6QhLMuV'
        str_1 = '~>j92@X?oaOoSz<<'
        dict_0 = {str_0: future_0, str_1: future_0, str_1: str_0}
        list_0 = [dict_0, future_0, dict_0, future_0]
        callable_0 = module_0.run_on_executor(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'QQcF?{GHB\r9X&\nRRaZll'
        list_0 = [str_0, str_0, str_0]
        str_1 = '\x0c&'
        dict_0 = {}
        str_2 = ''
        dict_1 = {str_1: dict_0, str_1: str_1, str_1: str_1, str_0: str_2}
        callable_0 = module_0.run_on_executor(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        list_0 = []
        dummy_executor_0 = module_0.DummyExecutor(*list_0)
        future_0 = dummy_executor_0.submit(bool_0)
        bool_1 = True
        dummy_executor_0.shutdown(bool_1)
        dummy_executor_1 = module_0.DummyExecutor()
        bool_2 = True
        dummy_executor_0.shutdown(bool_0)
        dummy_executor_1.shutdown(bool_2)
        dummy_executor_1.shutdown(bool_2)
        dummy_executor_1.shutdown()
        str_0 = 'Z{'
        base_exception_0 = None
        optional_0 = None
        tuple_0 = (str_0, base_exception_0, optional_0)
        module_0.future_set_exc_info(future_0, tuple_0)
    except BaseException:
        pass