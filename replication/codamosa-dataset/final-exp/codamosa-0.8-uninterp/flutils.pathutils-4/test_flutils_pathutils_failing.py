# Automatically generated by Pynguin.
import flutils.pathutils as module_0
import os as module_1
import pathlib as module_2

def test_case_0():
    try:
        str_0 = '6'
        path_0 = module_0.directory_present(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '/pyngin/6'
        int_0 = -2208
        path_0 = module_0.directory_present(str_0, int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '%\x0c4F1Ti;H\\Y4%'
        struct_group_0 = module_0.get_os_group(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1825
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xf0S\x18\x01\xdbt\x82\xbf'
        str_0 = module_0.exists_as(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/pyngi?n/'
        path_0 = module_0.directory_present(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -438
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'a'
        list_0 = [bytes_0]
        module_0.chown(bytes_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '/pyngin/'
        bool_0 = True
        module_0.chown(str_0, bool_0)
        generator_0 = module_0.find_paths(str_0)
        generator_1 = module_0.find_paths(str_0)
        module_0.path_absent(str_0)
        path_like_0 = module_1.PathLike()
    except BaseException:
        pass

def test_case_9():
    try:
        struct_passwd_0 = module_0.get_os_user()
        posix_path_0 = module_2.PosixPath()
        generator_0 = module_0.find_paths(posix_path_0)
        str_0 = 'R)VZ76x#@K=[6\t8u'
        struct_group_0 = module_0.get_os_group()
        path_0 = module_0.normalize_path(posix_path_0)
        struct_passwd_1 = module_0.get_os_user()
        path_1 = module_0.normalize_path(str_0)
        struct_passwd_2 = module_0.get_os_user()
        generator_1 = module_0.find_paths(posix_path_0)
        str_1 = 'G>c'
        str_2 = "N]zl373\n\x0c=5:'%U"
        dict_0 = {str_0: path_0, str_1: struct_passwd_2, str_2: str_2}
        posix_path_1 = module_2.PosixPath(**dict_0)
        module_0.path_absent(posix_path_1)
        bool_0 = None
        module_0.chown(str_2, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '/pynguin/6'
        module_0.chmod(str_0)
        module_0.chown(str_0)
        module_0.chown(str_0)
        int_0 = 898
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '/pyngin/6'
        int_0 = -2199
        path_0 = module_0.directory_present(str_0, int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        struct_passwd_0 = module_0.get_os_user()
        posix_path_0 = module_2.PosixPath()
        list_0 = [posix_path_0, posix_path_0, posix_path_0, posix_path_0]
        struct_group_0 = module_0.get_os_group(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '/tmp/foo*'
        optional_0 = None
        path_0 = module_0.directory_present(str_0, optional_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "Test function 'chown'"
        str_1 = '/tmp/flutils.tests.tmp'
        str_2 = 'root'
        module_0.chown(str_1, str_2, str_2)
        posix_path_0 = module_2.PosixPath()
        module_0.chown(posix_path_0, str_0)
    except BaseException:
        pass