# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(semantic_version_0)
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        str_0 = '=]:kG\x0br@0H6\t.C_'
        var_0 = alpha_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(semantic_version_0)
        var_0 = alpha_0.__eq__(alpha_0)
        loose_version_0 = module_1.LooseVersion()
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -2453.3
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
        int_0 = 1882
        set_0 = {int_0}
        alpha_0 = module_0._Alpha(set_0)
        var_0 = alpha_0.__ge__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(semantic_version_0)
        var_0 = alpha_0.__eq__(alpha_0)
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_1 = alpha_0.__le__(numeric_0)
        var_2 = semantic_version_0.from_loose_version(numeric_0)
    except BaseException:
        pass

def test_case_4():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        str_0 = '6Z(e\x0box\x0c\nHf|zzews.'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_5():
    try:
        alpha_0 = None
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(alpha_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '<!--'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'Y\x8c\xa0B'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '+YD]C [1D7AD3sT'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ne__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'kD*Kv[SxBODKc'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__lt__(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(semantic_version_0)
        var_0 = alpha_0.__eq__(alpha_0)
        loose_version_0 = module_1.LooseVersion()
        var_1 = alpha_0.__repr__()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 255
        float_0 = 0.1
        dict_0 = {int_0: int_0, float_0: float_0}
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__ge__(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(semantic_version_0)
        list_0 = []
        var_0 = alpha_0.__ne__(semantic_version_0)
        var_1 = alpha_0.__eq__(alpha_0)
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        var_2 = alpha_0.__le__(numeric_0)
        var_3 = semantic_version_0.from_loose_version(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'DZ,:Oxsb=#\ty\n?m-(sn3'
        float_0 = -839.35612
        alpha_0 = module_0._Alpha(float_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_0 = alpha_1.__le__(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -3358
        float_0 = -790.014
        alpha_0 = module_0._Alpha(float_0)
        var_0 = alpha_0.__eq__(int_0)
        bool_0 = None
        var_1 = alpha_0.__gt__(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        int_0 = 2604
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__ge__(int_0)
        set_0 = set()
        alpha_0 = module_0._Alpha(set_0)
        var_1 = numeric_0.__le__(alpha_0)
        var_2 = semantic_version_0.__le__(semantic_version_0)
        set_1 = None
        var_3 = semantic_version_0.from_loose_version(set_1)
    except BaseException:
        pass

def test_case_16():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(semantic_version_0)
        var_0 = alpha_0.__eq__(alpha_0)
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_1 = numeric_0.__gt__(numeric_0)
        var_2 = alpha_0.__le__(numeric_0)
        loose_version_0 = module_1.LooseVersion(var_2)
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_17():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        alpha_0 = module_0._Alpha(semantic_version_0)
        var_0 = alpha_0.__eq__(alpha_0)
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        var_1 = alpha_0.__le__(numeric_0)
        int_0 = 2599
        var_2 = numeric_0.__ne__(int_0)
        var_3 = alpha_0.__repr__()
        loose_version_0 = module_1.LooseVersion()
        var_4 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_18():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        loose_version_0 = module_1.LooseVersion()
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '0.0.0'
        semantic_version_0 = module_0.SemanticVersion(str_0)
        str_1 = '11.0.0'
        semantic_version_1 = module_0.SemanticVersion(str_1)
        var_0 = semantic_version_1.prerelease
        var_1 = semantic_version_0.is_stable
        str_2 = '0.0.0-beta+foo'
        var_2 = semantic_version_0.__gt__(str_2)
        semantic_version_2 = module_0.SemanticVersion(str_2)
        loose_version_0 = module_1.LooseVersion()
        var_3 = semantic_version_2.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '1.0.0'
        semantic_version_0 = module_0.SemanticVersion(str_0)
        var_0 = semantic_version_0.prerelease
        var_1 = semantic_version_0.is_stable
        str_1 = '0.0.0-beta+foo'
        var_2 = semantic_version_0.__gt__(str_1)
        str_2 = 'o'
        semantic_version_1 = module_0.SemanticVersion(str_1)
        var_3 = semantic_version_1.buildmetadata
        alpha_0 = module_0._Alpha(str_2)
        semantic_version_2 = module_0.SemanticVersion()
        loose_version_0 = module_1.LooseVersion()
        var_4 = semantic_version_1.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '0.0.0'
        semantic_version_0 = module_0.SemanticVersion(str_0)
        str_1 = '1.0.0'
        var_0 = semantic_version_0.core
        semantic_version_1 = module_0.SemanticVersion(str_1)
        str_2 = '11.0.0'
        semantic_version_2 = module_0.SemanticVersion(str_2)
        var_1 = semantic_version_2.core
        var_2 = semantic_version_0.prerelease
        var_3 = semantic_version_1.is_stable
        var_4 = semantic_version_0.__gt__(str_2)
        str_3 = 'o'
        alpha_0 = module_0._Alpha(str_3)
        float_0 = 260.67
        alpha_1 = module_0._Alpha(float_0)
        alpha_2 = module_0._Alpha(alpha_0)
        var_5 = alpha_2.__eq__(semantic_version_0)
        semantic_version_3 = module_0.SemanticVersion(str_0)
        var_6 = semantic_version_3.buildmetadata
        alpha_3 = module_0._Alpha(semantic_version_1)
        semantic_version_4 = module_0.SemanticVersion()
        loose_version_0 = module_1.LooseVersion()
        var_7 = semantic_version_3.from_loose_version(loose_version_0)
    except BaseException:
        pass