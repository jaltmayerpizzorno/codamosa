# Automatically generated by Pynguin.
import py_backwards.utils.snippet as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        keyword_0 = None
        str_0 = None
        a_s_t_0 = None
        dict_0 = {str_0: str_0, str_0: a_s_t_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    except BaseException:
        pass

def test_case_1():
    try:
        class_def_0 = module_1.ClassDef()
        str_0 = 'DbfW^W\x0c8\'wP3C" '
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
        alias_0 = None
        variables_replacer_1 = module_0.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_1.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'x = let(x)'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
        dict_0 = None
        dict_1 = {}
        snippet_0 = module_0.snippet(dict_1)
        list_0 = snippet_0.get_body(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        arg_0 = module_1.arg()
        str_0 = 'SIDQ\\@uJ5Oz j|P'
        str_1 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        dict_1 = {str_1: str_1, str_1: str_1}
        variables_replacer_1 = module_0.VariablesReplacer(dict_1)
        arg_2 = variables_replacer_1.visit_arg(arg_1)
        snippet_0 = module_0.snippet(arg_2)
        list_0 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_4():
    try:
        function_def_0 = module_1.FunctionDef()
        str_0 = 'Tix'
        str_1 = 'o@vQSpF'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
        str_2 = None
        str_3 = '*F"]zcAso_>'
        dict_1 = {str_3: str_2, str_3: str_3}
        a_s_t_0 = module_1.AST(**dict_1)
        dict_2 = {str_2: str_2, str_2: a_s_t_0, str_3: str_2, str_2: a_s_t_0}
        variables_replacer_1 = module_0.VariablesReplacer(dict_2)
        function_def_2 = variables_replacer_1.visit_FunctionDef(function_def_1)
        list_0 = [function_def_2, str_3]
        snippet_0 = module_0.snippet(list_0)
        list_1 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_5():
    try:
        a_s_t_0 = module_1.AST()
        iterable_0 = module_0.find_variables(a_s_t_0)
        str_0 = None
        dict_0 = {str_0: str_0}
        str_1 = '}lZk;T5\ru0:'
        str_2 = '^Rz\x0c*v2>^9^'
        str_3 = 'UyYE;'
        dict_1 = {str_1: dict_0, str_1: str_0, str_2: str_1, str_3: str_2}
        function_def_0 = module_1.FunctionDef(**dict_1)
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
        module_0.extend_tree(a_s_t_0, dict_0)
        name_0 = None
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\nlet(x)\nlet(y)\nextend(vars)\nprint(x, y)\n'
        var_0 = module_2.parse(str_0, str_0)
        module_0.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'x = let(x)\nx = et(y)'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
        list_0 = [iterable_0, iterable_0, str_0]
        str_1 = ''
        dict_0 = {str_1: iterable_0, str_0: var_0}
        alias_0 = module_1.alias(*list_0, **dict_0)
    except BaseException:
        pass