# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_2():
    name_0 = module_0.Name()
    str_0 = 'Tww6\\6`n%|C-'
    a_s_t_0 = module_0.AST()
    list_0 = [a_s_t_0, a_s_t_0, a_s_t_0]
    str_1 = 'T\x0cT>~i~oj4z7MvSo'
    dict_0 = {str_0: list_0, str_1: list_0, str_0: list_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    name_1 = variables_replacer_0.visit_Name(name_0)

def test_case_3():
    str_0 = 'x = let(x)\nx = let(y)'
    var_0 = module_2.parse(str_0)
    name_0 = module_0.Name()
    str_1 = 'P)`\r7Ya}m'
    str_2 = None
    str_3 = None
    dict_0 = {str_1: str_0, str_2: str_0, str_3: str_0, str_1: str_3}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    name_1 = variables_replacer_0.visit_Name(name_0)
    iterable_0 = module_1.find_variables(var_0)
    var_1 = list(iterable_0)

def test_case_4():
    function_def_0 = module_0.FunctionDef()
    str_0 = 'Compiles return in generators like:\n        def fn():\n            yield 1\n            return 5\n    To:\n        def fn():\n            yield 1\n            exc = StopIteration()\n            exc.value = 5\n            raise exc\n    '
    dict_0 = {str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    list_0 = [function_def_1, function_def_0]
    attribute_0 = module_0.Attribute(*list_0)
    str_1 = 'getoutput'
    str_2 = 'FileDialog'
    dict_1 = {str_1: str_1, str_2: str_1, str_1: str_1}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    attribute_1 = variables_replacer_1.visit_Attribute(attribute_0)
    dict_2 = {}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    attribute_2 = variables_replacer_2.visit_Attribute(attribute_1)

def test_case_5():
    list_0 = []
    attribute_0 = module_0.Attribute(*list_0)
    str_0 = 'y@)^%7'
    str_1 = 'urllib.robotparser'
    dict_0 = {str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    dict_1 = {str_0: str_0, str_1: str_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    attribute_2 = variables_replacer_1.visit_Attribute(attribute_0)
    str_2 = '`6/@BAF]qfHvi$M\x0bt'
    dict_2 = {str_2: str_2}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    attribute_3 = variables_replacer_2.visit_Attribute(attribute_2)

def test_case_6():
    keyword_0 = module_0.keyword()
    str_0 = 'ZZr'
    str_1 = 'Oo9YocGMbgAs36'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    str_2 = 'f*c%EKanM7|\nY[/:J`av'
    a_s_t_0 = None
    str_3 = '6h'
    str_4 = 'e6p0M$+)'
    dict_1 = {str_2: a_s_t_0, str_2: str_2, str_3: a_s_t_0, str_4: str_2}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    keyword_2 = variables_replacer_1.visit_keyword(keyword_1)

def test_case_7():
    str_0 = '\n5x'
    dict_0 = {str_0: str_0, str_0: str_0}
    arg_0 = module_0.arg(**dict_0)
    str_1 = '|R<HKuQO'
    dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1, str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    arg_1 = variables_replacer_0.visit_arg(arg_0)
    dict_2 = {}
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)
    arg_2 = variables_replacer_1.visit_arg(arg_1)

def test_case_8():
    str_0 = '\nlet(x)\nlet(y)\nextend(vars)\nprint(x, y)\n'
    var_0 = module_2.parse(str_0, str_0)
    str_1 = 'evl'
    list_0 = [str_0]
    alias_0 = module_0.alias(*list_0)
    str_2 = 'i!:8b)~wH"'
    dict_0 = {str_2: str_0, str_0: str_1, str_2: str_2, str_0: str_2}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    alias_1 = variables_replacer_0.visit_alias(alias_0)

def test_case_9():
    name_0 = module_0.Name()
    a_s_t_0 = module_0.AST()
    list_0 = [a_s_t_0, a_s_t_0, a_s_t_0]
    str_0 = 'T\x0cT>~i~oj4z7MvSo'
    list_1 = [str_0]
    import_from_0 = module_0.ImportFrom(*list_1)
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    dict_1 = {str_0: list_0, str_0: list_0, str_0: list_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    name_1 = variables_replacer_1.visit_Name(name_0)

def test_case_10():
    str_0 = 'x = let(x)\nx = let(y)'
    var_0 = module_2.parse(str_0)
    except_handler_0 = module_0.ExceptHandler()
    str_1 = 'zndMU@,$=j=8LX\n4'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_0, str_1: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    iterable_0 = module_1.find_variables(var_0)
    var_1 = list(iterable_0)

def test_case_11():
    a_s_t_0 = module_0.AST()
    dict_0 = None
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_12():
    str_0 = 'x = let(x)\nx = let(y)'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    var_1 = list(iterable_0)
    a_s_t_0 = module_0.AST()
    iterable_1 = module_1.find_variables(a_s_t_0)
    module_1.let(iterable_1)

def test_case_13():
    str_0 = 'Pa7eon89UQF2+7 e7:'
    str_1 = ''
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_1: str_1}
    module_1.extend(dict_0)

def test_case_14():
    str_0 = 'x = let(x)\nx = let(y)'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_15():
    str_0 = '\nl6t(x)\nlet(y)\nextZnd(varn)\nprint(x, y)\n'
    var_0 = module_2.parse(str_0, str_0)
    module_1.extend_tree(var_0, str_0)