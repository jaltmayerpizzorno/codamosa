# Automatically generated by Pynguin.
import tornado.locks as module_0
import builtins as module_1
import tornado.ioloop as module_2
import datetime as module_3
import concurrent.futures._base as module_4

def test_case_0():
    try:
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_1():
    try:
        event_0 = module_0.Event()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_2():
    try:
        event_0 = module_0.Event()
        event_0.set()
        int_0 = -2731
        semaphore_0 = module_0.Semaphore(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lock_0 = module_0.Lock()
        awaitable_0 = lock_0.acquire()
    except BaseException:
        pass

def test_case_4():
    try:
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_5():
    try:
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_6():
    try:
        lock_0 = module_0.Lock()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_7():
    try:
        lock_0 = module_0.Lock()
        optional_0 = None
        bytes_0 = b'\xdf\x05\x02"\x0bH\xbcg`\xf9\x0eQ'
        lock_1 = module_0.Lock()
        lock_1.__exit__(optional_0, bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        optional_0 = None
        awaitable_0 = None
        int_0 = 548
        semaphore_0 = module_0.Semaphore(int_0)
        str_0 = 'T}U~MEMO<KBDjf;s;P~/'
        timeout_garbage_collector_0 = module_0._TimeoutGarbageCollector()
        lock_0 = module_0.Lock()
        tuple_0 = (semaphore_0, str_0, timeout_garbage_collector_0, lock_0)
        dict_0 = {}
        releasing_context_manager_0 = module_0._ReleasingContextManager(dict_0)
        releasing_context_manager_0.__exit__(optional_0, awaitable_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        event_0 = module_0.Event()
        event_0.set()
        none_type_0 = None
        tuple_0 = None
        none_type_1 = None
        list_0 = [tuple_0, event_0, event_0, tuple_0]
        base_exception_0 = module_1.BaseException(*list_0)
        set_0 = set()
        lock_0 = module_0.Lock()
        lock_0.__aexit__(list_0, base_exception_0, set_0)
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__exit__(none_type_0, tuple_0, none_type_1)
    except BaseException:
        pass

def test_case_10():
    try:
        lock_0 = module_0.Lock()
        event_0 = module_0.Event()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        i_o_loop_3 = i_o_loop_2.instance()
        i_o_loop_4 = i_o_loop_3.instance()
        i_o_loop_5 = i_o_loop_4.instance()
        str_0 = lock_0.__repr__()
        condition_0 = module_0.Condition()
        condition_0.notify_all()
        lock_2.release()
    except BaseException:
        pass

def test_case_11():
    try:
        lock_0 = module_0.Lock()
        event_0 = module_0.Event()
        event_0.set()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        i_o_loop_3 = i_o_loop_2.instance()
        i_o_loop_4 = i_o_loop_3.instance()
        i_o_loop_5 = i_o_loop_4.instance()
        awaitable_0 = semaphore_0.acquire(i_o_loop_5)
        str_0 = lock_0.__repr__()
        condition_0 = module_0.Condition()
        condition_0.notify()
        condition_1 = module_0.Condition()
        condition_1.notify_all()
        lock_0.release()
    except BaseException:
        pass

def test_case_12():
    try:
        lock_0 = module_0.Lock()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__aenter__()
        semaphore_0.release()
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        i_o_loop_2 = i_o_loop_0.instance()
        i_o_loop_3 = i_o_loop_0.instance()
        awaitable_0 = semaphore_0.acquire()
        condition_1 = module_0.Condition()
        int_0 = -2530
        condition_0.notify(int_0)
        condition_0.notify()
        condition_2 = module_0.Condition()
        condition_3 = module_0.Condition()
        condition_1.notify_all()
        lock_3 = module_0.Lock()
        lock_1.release()
    except BaseException:
        pass

def test_case_13():
    try:
        event_0 = module_0.Event()
        event_0.set()
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        list_0 = []
        i_o_loop_0 = module_2.IOLoop(*list_0)
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        i_o_loop_3 = i_o_loop_1.instance()
        str_0 = event_0.__repr__()
        i_o_loop_4 = i_o_loop_3.instance()
        i_o_loop_5 = i_o_loop_2.instance()
        i_o_loop_6 = i_o_loop_5.instance()
        i_o_loop_7 = i_o_loop_3.instance()
        str_1 = lock_0.__repr__()
        time_0 = module_3.time(*list_0)
        tuple_0 = (time_0, i_o_loop_3)
        float_0 = 3410.62
        awaitable_0 = lock_0.acquire(float_0)
        releasing_context_manager_0 = module_0._ReleasingContextManager(lock_0)
        releasing_context_manager_0.__exit__(tuple_0, event_0, awaitable_0)
        condition_0 = module_0.Condition()
        condition_0.notify()
        condition_1 = module_0.Condition()
        condition_2 = module_0.Condition()
        condition_2.notify_all()
        lock_0.release()
    except BaseException:
        pass

def test_case_14():
    try:
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        list_0 = []
        i_o_loop_0 = module_2.IOLoop(*list_0)
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        i_o_loop_3 = i_o_loop_1.instance()
        i_o_loop_4 = i_o_loop_3.instance()
        awaitable_0 = lock_0.acquire()
        i_o_loop_5 = i_o_loop_2.instance()
        i_o_loop_6 = i_o_loop_5.instance()
        i_o_loop_7 = i_o_loop_3.instance()
        str_0 = lock_0.__repr__()
        time_0 = module_3.time(*list_0)
        float_0 = 3410.62
        awaitable_1 = lock_0.acquire(float_0)
        releasing_context_manager_0 = module_0._ReleasingContextManager(lock_0)
        condition_0 = module_0.Condition()
        condition_1 = module_0.Condition()
        condition_1.notify_all()
        lock_1 = module_0.Lock()
        lock_1.release()
    except BaseException:
        pass

def test_case_15():
    try:
        lock_0 = module_0.Lock()
        event_0 = module_0.Event()
        event_0.set()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__aenter__()
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        i_o_loop_3 = i_o_loop_0.instance()
        i_o_loop_4 = i_o_loop_0.instance()
        awaitable_0 = semaphore_0.acquire()
        str_1 = lock_0.__repr__()
        condition_1 = module_0.Condition()
        int_0 = -2530
        condition_0.notify(int_0)
        float_0 = 3410.62
        awaitable_1 = lock_2.acquire(float_0)
        awaitable_2 = condition_0.wait(float_0)
        awaitable_3 = event_0.wait()
        condition_0.notify()
        condition_2 = module_0.Condition()
        condition_3 = module_0.Condition()
        condition_3.notify_all()
        lock_3 = module_0.Lock()
        lock_1.release()
    except BaseException:
        pass

def test_case_16():
    try:
        lock_0 = module_0.Lock()
        event_0 = module_0.Event()
        event_0.set()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__aenter__()
        semaphore_0.release()
        i_o_loop_0 = module_2.IOLoop()
        str_0 = event_0.__repr__()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        condition_0 = module_0.Condition()
        str_1 = condition_0.__repr__()
        i_o_loop_3 = i_o_loop_0.instance()
        awaitable_0 = semaphore_0.acquire()
        str_2 = lock_2.__repr__()
        condition_1 = module_0.Condition()
        int_0 = -2530
        condition_0.notify(int_0)
        float_0 = 3410.62
        awaitable_1 = semaphore_0.acquire()
        awaitable_2 = condition_1.wait()
        event_1 = module_0.Event()
        future_0 = module_4.Future()
        releasing_context_manager_0 = module_0._ReleasingContextManager(str_0)
        i_o_loop_0.add_future(future_0, releasing_context_manager_0)
        awaitable_3 = event_1.wait(float_0)
        condition_1.notify()
        condition_2 = module_0.Condition()
        condition_3 = module_0.Condition()
        condition_1.notify_all()
        lock_3 = module_0.Lock()
        lock_2.release()
    except BaseException:
        pass

def test_case_17():
    try:
        lock_0 = module_0.Lock()
        event_0 = module_0.Event()
        event_0.set()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        i_o_loop_0 = module_2.IOLoop()
        str_0 = event_0.__repr__()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        i_o_loop_3 = i_o_loop_2.instance()
        i_o_loop_4 = i_o_loop_0.instance()
        condition_0 = module_0.Condition()
        str_1 = condition_0.__repr__()
        i_o_loop_5 = i_o_loop_2.instance()
        i_o_loop_6 = i_o_loop_2.instance()
        awaitable_0 = semaphore_0.acquire()
        str_2 = lock_1.__repr__()
        condition_1 = module_0.Condition()
        condition_2 = module_0.Condition()
        condition_2.notify()
        awaitable_1 = semaphore_0.acquire()
        awaitable_2 = condition_2.wait()
        event_1 = module_0.Event()
        awaitable_3 = event_1.wait()
        condition_2.notify()
        condition_3 = module_0.Condition()
        condition_4 = module_0.Condition()
        condition_5 = module_0.Condition()
        condition_5.notify_all()
        lock_3 = module_0.Lock()
        lock_1.release()
    except BaseException:
        pass

def test_case_18():
    try:
        lock_0 = module_0.Lock()
        event_0 = module_0.Event()
        event_0.set()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__aenter__()
        semaphore_0.release()
        i_o_loop_0 = module_2.IOLoop()
        str_0 = event_0.__repr__()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        condition_0 = module_0.Condition()
        str_1 = condition_0.__repr__()
        i_o_loop_3 = i_o_loop_0.instance()
        i_o_loop_4 = i_o_loop_0.instance()
        awaitable_0 = semaphore_0.acquire()
        str_2 = lock_0.__repr__()
        int_0 = -2530
        condition_0.notify(int_0)
        float_0 = 3410.62
        awaitable_1 = lock_2.acquire(float_0)
        awaitable_2 = condition_0.wait(float_0)
        awaitable_3 = event_0.wait()
        awaitable_4 = condition_0.wait()
        awaitable_5 = event_0.wait(float_0)
        int_1 = -1380
        condition_0.notify(int_1)
        condition_1 = module_0.Condition()
        condition_2 = module_0.Condition()
        condition_2.notify_all()
        lock_3 = module_0.Lock()
        lock_1.release()
    except BaseException:
        pass