# Automatically generated by Pynguin.
import sanic.response as module_0
import pathlib as module_1
import sanic.compat as module_2
import sanic.models.protocol_types as module_3

def test_case_0():
    try:
        int_0 = 320
        h_t_t_p_response_0 = module_0.json(int_0)
        h_t_t_p_response_1 = module_0.HTTPResponse(int_0)
        pure_path_0 = module_1.PurePath()
        str_0 = None
        str_1 = 'aV":lb5\\kv?uHC}\'5'
        str_2 = 'Socket folder does not exist: '
        str_3 = 'w-KG\\JBnG=|O{qqc'
        str_4 = '=a\n&%'
        dict_0 = {str_0: str_1, str_0: str_0, str_0: str_2, str_3: str_4}
        h_t_t_p_response_2 = module_0.text(str_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        pure_path_0 = module_1.PurePath(**dict_0)
        int_0 = -705
        str_0 = 'lifespan.startup.complete'
        str_1 = "i&}>'-*Q#Hg"
        str_2 = 'qbAe5;<'
        dict_1 = {str_0: str_0, str_1: str_2, str_2: str_1}
        str_3 = 'oe427i)'
        h_t_t_p_response_0 = module_0.raw(int_0, dict_1, str_3)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'v,LBg'
        h_t_t_p_response_0 = module_0.HTTPResponse()
        callable_0 = None
        int_0 = -2289
        var_0 = module_0.stream(callable_0, int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        str_1 = '/>}=\x0c.5F`E'
        int_0 = 633
        h_t_t_p_response_0 = module_0.redirect(str_1, int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 200
        str_0 = 'deprecated'
        callable_0 = None
        header_0 = module_2.Header()
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(callable_0, int_0, header_0, str_0, header_0)
        h_t_m_l_protocol_0 = module_3.HTMLProtocol()
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        int_0 = -3574
        dict_0 = None
        str_0 = None
        str_1 = '\r/rMS@T`lfgNZL^Vz4'
        h_t_t_p_response_0 = module_0.text(str_1)
        str_2 = ''
        bytes_0 = None
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(int_0, str_2, bytes_0)
        h_t_t_p_response_1 = module_0.json(list_0, int_0, dict_0, str_0, streaming_h_t_t_p_response_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '1wd\\P>%^\t|18V\roR.$'
        str_1 = '$['
        dict_0 = {str_0: str_0, str_0: str_1, str_1: str_0}
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        base_h_t_t_p_response_0.send()
        streaming_h_t_t_p_response_0 = module_0.file_stream(str_0, dict_0, base_h_t_t_p_response_0)
        str_2 = '_\\sW.l\\qzr/XH'
        float_0 = -3892.8
        int_0 = 1269
        str_3 = None
        base_h_t_t_p_response_1 = module_0.BaseHTTPResponse()
        int_1 = 1387
        h_t_t_p_response_0 = module_0.html(str_3, int_1)
        int_2 = -4823
        dict_1 = {str_3: base_h_t_t_p_response_1, str_3: int_2}
        int_3 = 1470
        base_h_t_t_p_response_2 = module_0.BaseHTTPResponse()
        var_0 = module_0.stream(dict_1, int_3, dict_0, str_2, base_h_t_t_p_response_2)
        list_0 = []
        var_1 = module_0.stream(list_0)
        str_4 = ''
        int_4 = -1322
        list_1 = [int_4]
        streaming_h_t_t_p_response_1 = module_0.StreamingHTTPResponse(h_t_t_p_response_0, int_0, str_4, list_1)
        var_2 = streaming_h_t_t_p_response_1.write(base_h_t_t_p_response_1)
        h_t_t_p_response_1 = module_0.json(float_0, int_0, str_3)
        header_0 = module_2.Header()
    except BaseException:
        pass