# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        str_0 = '.C1kl2Yo8'
        bytes_0 = b'\xabk\x98#\x1fmG'
        var_0 = module_0.check_required_one_of(str_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.check_required_if(str_0, dict_0)
        list_0 = [str_0]
        float_0 = None
        var_1 = module_0.check_required_one_of(float_0, dict_0)
        var_2 = module_0.check_type_dict(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'd'
        str_3 = [str_2, str_2, str_2]
        str_4 = [str_0, str_3]
        str_5 = {str_0: str_0, str_1: str_1, str_0: str_0}
        var_0 = module_0.check_required_together(str_4, str_5)
        str_6 = [str_0, str_1]
        str_7 = [str_1, str_2, str_2]
        str_8 = [str_6, str_7]
        var_1 = module_0.check_required_together(str_8, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b"'\x8d\xc6n\xb9\x1b\\7"
        var_0 = module_0.check_required_arguments(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ehu{N,h'
        dict_0 = {}
        var_0 = module_0.check_required_if(str_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 40
        float_0 = 2159.4
        var_0 = module_0.check_required_if(int_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = None
        tuple_0 = ()
        var_0 = module_0.check_type_str(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        str_0 = '_zWO,c"US'
        var_0 = module_0.check_type_path(str_0)
        list_0 = [bool_0]
        str_1 = 'rescued'
        var_1 = module_0.check_required_by(bool_0, list_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 512.0
        set_0 = {float_0, float_0}
        var_0 = module_0.check_type_list(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        var_0 = module_0.check_type_dict(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -1071.256565
        var_0 = module_0.check_type_bool(float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'(\x00\xf2\xc0\x000\xa9\xa6\x93\x13'
        complex_0 = None
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        tuple_0 = (complex_0, dict_0)
        dict_1 = {bytes_0: tuple_0}
        var_0 = module_0.check_type_bool(dict_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '>\\u'
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        var_0 = module_0.check_type_float(tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'z\x14\xe2\xee'
        var_0 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        var_0 = module_0.check_type_bits(bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        var_0 = module_0.check_type_jsonarg(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '2V?'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.check_type_jsonarg(list_0)
        int_0 = 2146
        bool_0 = False
        var_1 = module_0.check_type_int(bool_0)
        set_0 = {int_0}
        var_2 = module_0.check_required_by(int_0, set_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -471
        var_0 = module_0.safe_eval(int_0)
        str_0 = 'si.]q`'
        var_1 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'y\x07&\x91\xa0y\xa04\xdb_\x83\x95\x14*'
        var_0 = module_0.check_type_int(bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '\x0cFKt"I_d\t'
        var_0 = module_0.check_type_bytes(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'R?|Gs'
        bytes_0 = b'\x96,\x02\x1e6k\xfaB\x84\xf5\xb4\x96=\xb9\x15U\xe9\x84}'
        var_0 = module_0.check_required_one_of(bytes_0, bytes_0)
        var_1 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 2741
        bytes_0 = b'i\xdaZ&'
        var_0 = module_0.count_terms(int_0, bytes_0)
        bytes_1 = None
        str_0 = 'h[\x0cH'
        var_1 = module_0.safe_eval(str_0, bytes_1)
        int_1 = -481
        list_0 = [bytes_1, var_1, str_0, int_1]
        str_1 = '8h*\r=f1'
        var_2 = module_0.check_missing_parameters(list_0, str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'pV6of\\fx'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bytes_0 = b'z\x14\xe2\xee'
        float_0 = 1527.5
        var_0 = module_0.check_type_float(float_0)
        var_1 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '5=&`'
        var_0 = module_0.check_type_dict(str_0)
        tuple_0 = None
        bytes_0 = b'\x837\x8b\xf8\xf7h\x08\x9bK\xdc\x14zc\x14\x08\x84\xb6\x8aZ\xc9'
        var_1 = module_0.check_required_together(tuple_0, bytes_0)
        bool_0 = False
        var_2 = module_0.check_required_arguments(tuple_0, bool_0)
        bytes_1 = None
        dict_0 = {}
        var_3 = module_0.check_mutually_exclusive(bytes_1, dict_0)
        tuple_1 = (bytes_0,)
        var_4 = module_0.check_type_bytes(tuple_1)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = ' handler for template operations '
        str_1 = 'required'
        str_2 = 'foo'
        bool_0 = True
        bool_1 = {str_1: bool_0}
        bool_2 = {str_2: bool_1}
        set_0 = {str_0, str_0, str_1}
        var_0 = module_0.safe_eval(set_0)
        var_1 = module_0.check_required_arguments(bool_2, var_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = None
        float_0 = 1893.4836
        var_0 = module_0.check_required_if(bytes_0, float_0)
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        var_1 = module_0.check_type_bytes(set_0)
    except BaseException:
        pass

def test_case_28():
    try:
        tuple_0 = None
        str_0 = "n7=*LgXN'=vzj7L+KQ"
        var_0 = module_0.check_required_arguments(tuple_0, str_0)
        float_0 = 814.0
        var_1 = module_0.check_missing_parameters(float_0)
        dict_0 = {str_0: str_0, str_0: str_0}
        var_2 = module_0.check_required_if(str_0, dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = None
        str_0 = 'h[\x0cH'
        float_0 = 282.526
        list_0 = [str_0, bytes_0]
        dict_0 = {float_0: list_0, str_0: float_0, bytes_0: list_0}
        var_0 = module_0.check_required_if(list_0, dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'arg1'
        str_1 = 'arg2'
        str_2 = 'arg3'
        str_3 = 'value1'
        str_4 = 'value2'
        str_5 = 'value3'
        str_6 = {str_0: str_3, str_1: str_4, str_2: str_5}
        str_7 = [str_0, str_1, str_2]
        var_0 = module_0.check_missing_parameters(str_6, str_7)
        var_1 = module_0.check_missing_parameters(str_6, str_2)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = ''
        str_1 = 'b'
        str_2 = 'd'
        list_0 = [str_0, str_1]
        var_0 = module_0.check_type_list(list_0)
        str_3 = [str_2, str_2, str_2]
        str_4 = [str_0, str_3]
        str_5 = {str_0: str_0, str_1: str_1, str_0: str_0}
        var_1 = module_0.check_required_together(str_4, str_5)
        str_6 = [str_0, str_1]
        str_7 = [str_1, str_2, str_2]
        str_8 = [str_6, str_7]
        var_2 = module_0.check_required_together(str_8, str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'b'
        str_1 = 'c'
        str_2 = 'd'
        int_0 = 1
        int_1 = 2
        int_2 = 4
        int_3 = {str_0: int_0, str_1: int_1, str_2: int_2}
        str_3 = 'a'
        str_4 = 'e'
        str_5 = [str_2, str_4]
        str_6 = {str_3: str_0, str_1: str_5}
        var_0 = module_0.check_required_by(str_6, int_3)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.check_required_if(str_0, dict_0)
        list_0 = [str_0]
        float_0 = 0.0
        str_1 = 'IfSA)'
        set_0 = {float_0}
        var_1 = module_0.check_required_one_of(str_1, set_0, list_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = "{'one':1,'two':2D'tree':3}"
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '=ox$QDW*\'\n\\MVqky"E'
        var_0 = module_0.check_type_dict(str_0)
        var_1 = module_0.check_type_bytes(str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 'present'
        str_1 = '29XL\tcO'
        var_0 = dict(src=str_1, owner=str_0)
        var_1 = dict(name=str_0, state=str_0, src=str_1, owner=str_1)
        var_2 = module_0.check_required_by(var_0, var_1)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'sbat"'
        str_1 = '<prsent'
        str_2 = 'path'
        bool_0 = True
        str_3 = {str_0: str_1, str_2: str_1}
        var_0 = [str_0, str_1, str_2, bool_0]
        var_1 = [var_0]
        var_2 = module_0.check_required_if(var_1, str_3)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = '%1dg[{B.rj-k[=B,r'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'present'
        var_0 = dict(name=str_0, state=str_0, src=str_0, owner=str_0, group=str_0)
        str_1 = 'owner'
        str_2 = 'group'
        str_3 = [str_2]
        var_1 = dict(src=str_3, owner=str_3)
        var_2 = dict(name=str_3, state=str_0, src=str_2, owner=str_1)
        var_3 = module_0.check_required_by(var_1, var_2)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'name'
        str_1 = 'version'
        str_2 = 'required'
        bool_0 = True
        bool_1 = {str_2: bool_0}
        bool_2 = False
        bool_3 = {str_2: bool_2}
        bool_4 = {str_0: bool_1, str_1: bool_3}
        str_3 = 'test'
        str_4 = {str_0: str_3}
        var_0 = module_0.check_required_arguments(bool_4, str_4)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'state'
        str_1 = 'present'
        str_2 = 'path'
        str_3 = (str_2,)
        bool_0 = True
        var_0 = [str_0, str_1, str_3, bool_0]
        var_1 = [var_0]
        str_4 = '/tmp/file'
        str_5 = {str_0: str_1, str_2: str_4}
        var_2 = module_0.check_required_if(var_1, str_5)
        str_6 = (str_2,)
        var_3 = [str_0, str_1, str_6, bool_0]
        var_4 = [var_3]
        str_7 = {str_0: str_1, bool_0: str_4}
        var_5 = module_0.check_required_if(var_4, str_7)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'import foo'
        var_0 = module_0.safe_eval(str_0)
        str_1 = '{1: 2}'
        var_1 = module_0.safe_eval(str_1)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'one'
        str_1 = 'two'
        str_2 = 'three'
        str_3 = 'ioub'
        str_4 = 'five'
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = 4
        int_4 = 5
        int_5 = {str_0: int_0, str_1: int_1, str_2: int_2, str_3: int_3, str_4: int_4}
        str_5 = [str_0, str_1]
        str_6 = 'six'
        str_7 = [str_2, str_3, str_4, str_6]
        str_8 = [str_5, str_7]
        var_0 = module_0.check_mutually_exclusive(str_8, int_5)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'force'
        str_1 = 'value'
        str_2 = 'test'
        str_3 = {str_0: str_1}
        tuple_0 = ()
        str_4 = '0.r~t{S'
        var_0 = module_0.check_required_one_of(tuple_0, str_4)
        str_5 = {str_0: str_2}
        str_6 = [str_2]
        var_1 = module_0.check_required_by(str_3, str_5, str_6)
    except BaseException:
        pass