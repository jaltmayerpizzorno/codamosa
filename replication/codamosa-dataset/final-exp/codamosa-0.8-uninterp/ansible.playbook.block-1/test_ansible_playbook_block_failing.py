# Automatically generated by Pynguin.
import ansible.playbook.block as module_0
import ansible.playbook.role as module_1

def test_case_0():
    try:
        str_0 = "l.i'$"
        int_0 = 6
        bool_0 = False
        list_0 = []
        str_1 = 'NIAu_&|A\t>V'
        set_0 = {str_1, str_0}
        str_2 = 'C'
        block_0 = module_0.Block(set_0, str_2)
        var_0 = block_0.is_block(list_0)
        block_1 = module_0.Block(int_0, bool_0)
        var_1 = block_1.__eq__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        complex_0 = None
        float_0 = -436.7
        dict_0 = {}
        list_0 = [float_0, dict_0, float_0]
        int_0 = 923
        str_0 = 'Wb'
        block_0 = module_0.Block(list_0, int_0, str_0)
        block_1 = module_0.Block(float_0, list_0, block_0)
        var_0 = block_1.__ne__(complex_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1108
        list_0 = [int_0, int_0]
        bytes_0 = b'\x98\xcf\xe2s>z\xbd\x86\xf9\xca\xe7\xe4\xb8\x1a\xc6[Y'
        tuple_0 = (list_0, bytes_0, list_0)
        block_0 = module_0.Block(tuple_0, tuple_0, list_0)
        var_0 = block_0.get_vars()
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        block_0 = module_0.Block(list_0)
        str_0 = 'W-Q%v%5dUM'
        block_1 = module_0.Block(str_0)
        float_0 = -1318.466985
        set_0 = {float_0, float_0}
        block_2 = module_0.Block(set_0, float_0)
        bytes_0 = b'\xd67B\x16\x9a\xf21\xfc\xa9\xf5\xbf\x0c\x07:\xab\xb77\x90E\x17'
        var_0 = block_2.is_block(bytes_0)
        var_1 = block_2.has_tasks()
        var_2 = block_2.load(float_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        block_0 = module_0.Block()
        dict_0 = None
        var_0 = block_0.preprocess_data(dict_0)
        bytes_0 = b''
        var_1 = block_0.deserialize(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        float_0 = 80.12021226421106
        block_0 = module_0.Block(bool_0, float_0)
        var_0 = block_0.serialize()
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = None
        block_0 = module_0.Block()
        var_0 = block_0.deserialize(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        float_0 = 100.0
        block_0 = module_0.Block(bool_0, float_0)
        var_0 = block_0.all_parents_static()
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        float_0 = 100.0
        block_0 = module_0.Block(bool_0, float_0)
        var_0 = block_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xf9C\xe6\x0e\xbe\xc2yZ$\x8b\xddc\xd2(\x0c\r\xfb\x07'
        str_0 = '--help'
        dict_0 = {}
        block_0 = module_0.Block()
        bool_0 = False
        block_1 = module_0.Block(block_0, bool_0, str_0)
        var_0 = block_1.load(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        tuple_0 = ()
        str_0 = 'iF=XhE{_q@iJ;B'
        block_0 = module_0.Block(bool_0, tuple_0, str_0)
        block_1 = module_0.Block(block_0)
        set_0 = {tuple_0, str_0}
        block_2 = module_0.Block(block_1, set_0)
        var_0 = block_2.get_include_params()
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'QA\x99\x90\xe1\x14,\xf0[\xe3)`\x1a\x0cx^\xf4\\Jw'
        block_0 = module_0.Block(bytes_0)
        var_0 = block_0.__repr__()
        var_1 = block_0.get_first_parent_include()
        list_0 = [block_0, bytes_0, var_0]
        str_0 = ".K^P]+8'`\x0bWvE+HLj|\x0bu"
        block_1 = module_0.Block(list_0, str_0, block_0)
        var_2 = block_1.filter_tagged_tasks(block_1)
        var_3 = block_0.get_vars()
        var_4 = block_1.get_first_parent_include()
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = {}
        block_0 = module_0.Block()
        var_1 = block_0.deserialize(var_0)
        str_0 = 'role'
        str_1 = 'block'
        str_2 = {str_0: str_0, str_1: str_1}
        block_1 = module_0.Block()
        var_2 = block_1.deserialize(str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = {}
        block_0 = module_0.Block()
        var_1 = block_0.deserialize(var_0)
        str_0 = 'block'
        block_1 = module_0.Block()
        var_2 = block_1.deserialize(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Lt7-i0Uzb+u*f bje'
        set_0 = set()
        bytes_0 = b'\r$\x06\xe2i\x83w\xed\xc56\x13\xd1'
        str_1 = '\n    Last resort to find a service by trying to match pattern to programs in memory\n    '
        tuple_0 = (str_1,)
        block_0 = module_0.Block(set_0, bytes_0, tuple_0)
        list_0 = [set_0, block_0, bytes_0]
        block_1 = module_0.Block(str_0, block_0, list_0)
        var_0 = block_1.serialize()
    except BaseException:
        pass

def test_case_15():
    try:
        block_0 = module_0.Block()
        str_0 = 'rescue'
        str_1 = 'always'
        str_2 = 'name'
        str_3 = 'when'
        str_4 = 'other_attribute'
        str_5 = 'dep_chain'
        str_6 = 'role'
        str_7 = 'parent'
        str_8 = 'parent_type'
        var_0 = []
        bool_0 = False
        str_9 = 'foo'
        str_10 = 'False'
        str_11 = 'ignore_me'
        var_1 = None
        str_12 = 'static'
        str_13 = 'test'
        var_2 = {str_2: str_13, str_12: bool_0}
        var_3 = {str_0: var_0, str_1: bool_0, str_2: bool_0, str_2: str_9, str_3: str_10, str_4: str_11, str_5: var_1, str_6: bool_0, str_7: var_2, str_8: str_0}
        var_4 = block_0.deserialize(var_3)
    except BaseException:
        pass

def test_case_16():
    try:
        block_0 = module_0.Block()
        role_0 = module_1.Role()
        var_0 = block_0.serialize()
        block_1 = module_0.Block()
        var_1 = block_1.deserialize(var_0)
        var_2 = block_1.tasklist
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x9d\xe8\xfc\x88M\xa3\x19A\xf8  P'
        int_0 = 1145
        bool_0 = False
        str_0 = 'K}\x0ba'
        set_0 = {int_0, str_0, int_0}
        block_0 = module_0.Block(int_0, bool_0, set_0)
        var_0 = block_0.set_loader(bytes_0)
    except BaseException:
        pass