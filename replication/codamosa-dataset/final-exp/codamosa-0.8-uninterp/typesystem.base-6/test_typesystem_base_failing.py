# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    try:
        str_0 = 'M!I'
        message_0 = module_0.Message(text=str_0, code=str_0)
        str_1 = message_0.__repr__()
        int_0 = -3777
        int_1 = -52
        position_0 = module_0.Position(int_1, int_1, int_0)
        validation_result_0 = module_0.ValidationResult()
        validation_error_0 = module_0.ValidationError(key=int_0, position=position_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        base_error_0 = module_0.BaseError(messages=list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '1n!\n+7`3x'
        base_error_0 = module_0.BaseError(text=str_0, code=str_0)
        iterator_0 = base_error_0.__iter__()
        bool_0 = base_error_0.__eq__(str_0)
        base_error_1 = module_0.BaseError()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'exclusive_minimum'
        base_error_0 = module_0.BaseError(text=str_0, code=str_0)
        bool_0 = base_error_0.__eq__(str_0)
        int_0 = base_error_0.__hash__()
        int_1 = 1
        int_2 = base_error_0.__len__()
        position_0 = module_0.Position(int_0, int_0, int_1)
        validation_error_0 = module_0.ValidationError(position=position_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'exclusive_minimum'
        base_error_0 = module_0.BaseError(text=str_0, code=str_0)
        bool_0 = base_error_0.__eq__(str_0)
        int_0 = base_error_0.__hash__()
        int_1 = 1
        position_0 = module_0.Position(int_0, int_0, int_1)
        validation_error_0 = module_0.ValidationError(position=position_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1
        validation_result_0 = module_0.ValidationResult(value=int_0)
        var_0 = iter(validation_result_0)
        var_1 = next(var_0)
        var_2 = iter(validation_result_0)
        var_3 = next(var_2)
        str_0 = validation_result_0.__repr__()
        base_error_0 = module_0.BaseError(position=int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'exclusive_maximum'
        bytes_0 = b'\xaa\x0e\xaf7[\xcb\xbb\xf6ei\x1e\\\xd6\xcc\xaa\xe5\xb2<)'
        validation_result_0 = module_0.ValidationResult(error=bytes_0)
        validation_result_1 = module_0.ValidationResult(value=validation_result_0)
        bool_0 = validation_result_1.__bool__()
        validation_error_0 = module_0.ValidationError(text=str_0, code=str_0)
        none_type_0 = None
        str_1 = validation_result_0.__repr__()
        parse_error_0 = module_0.ParseError(text=str_0)
        str_2 = 'Must not be empty.'
        message_0 = module_0.Message(text=str_2)
        base_error_0 = module_0.BaseError(code=none_type_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\tE'
        list_0 = []
        int_0 = -432
        int_1 = -531
        position_0 = module_0.Position(int_0, int_0, int_1)
        message_0 = module_0.Message(text=str_0, key=str_0, index=list_0, start_position=position_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Must have at least {min_length} characters.'
        validation_result_0 = module_0.ValidationResult(value=str_0)
        list_0 = None
        int_0 = -670
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_0 = module_0.Message(text=str_0, index=list_0, position=position_0, start_position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '(yXw#Hb'
        int_0 = 147
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_0 = module_0.Message(text=str_0, start_position=position_0, end_position=position_0)
        int_1 = message_0.__hash__()
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        str_1 = 'Forms do not support rendering Object fields'
        str_2 = message_0.__repr__()
        list_0 = [str_1]
        int_2 = 4
        message_1 = module_0.Message(text=str_1, index=list_0, start_position=int_2, end_position=bool_0)
        list_1 = [message_1, message_1]
        base_error_0 = module_0.BaseError(code=dict_0, position=dict_0, messages=list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'f'
        int_0 = -77
        base_error_0 = module_0.BaseError(text=str_0, code=str_0)
        int_1 = base_error_0.__len__()
        validation_result_0 = module_0.ValidationResult()
        iterator_0 = validation_result_0.__iter__()
        int_2 = -3132
        position_0 = module_0.Position(int_0, int_0, int_2)
        iterator_1 = validation_result_0.__iter__()
        bytes_0 = b'\xfd\xe7L\x83\x04[:\xe5*>\xa8'
        base_error_1 = module_0.BaseError(key=str_0, position=position_0, messages=bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 0
        base_error_0 = module_0.BaseError(key=int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        validation_result_0 = module_0.ValidationResult()
        str_0 = ',qOOl^T=5'
        optional_0 = None
        message_0 = module_0.Message(text=str_0, end_position=optional_0)
        str_1 = '}78\\%'
        optional_1 = None
        message_1 = module_0.Message(text=str_1, end_position=optional_1)
        list_0 = [message_0, message_0, message_1, message_1]
        base_error_0 = module_0.BaseError(position=validation_result_0, messages=list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '8\x0cg-Zc*8lI)\x0csG>3vJb('
        message_0 = module_0.Message(text=str_0)
        str_1 = ''
        float_0 = -900.2494
        base_error_0 = module_0.BaseError(text=str_1, key=str_1, messages=float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        validation_result_0 = module_0.ValidationResult()
        base_error_0 = None
        str_0 = '1n!\n+7`3x'
        float_0 = -732.717628
        message_0 = module_0.Message(text=str_0, key=str_0, start_position=float_0)
        bool_0 = message_0.__eq__(message_0)
        str_1 = message_0.__repr__()
        bool_1 = message_0.__eq__(base_error_0)
        bool_2 = message_0.__eq__(str_0)
        iterator_0 = base_error_0.__iter__()
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'pp}W?D#yx5'
        bytes_0 = b'<\x81\xf3\x1a\x12\xe01'
        message_0 = module_0.Message(text=str_0, index=bytes_0)
        int_0 = message_0.__hash__()
        validation_result_0 = module_0.ValidationResult(error=int_0)
        str_1 = validation_result_0.__repr__()
        list_0 = [message_0]
        base_error_0 = module_0.BaseError(messages=list_0)
        str_2 = message_0.__repr__()
        validation_result_1 = module_0.ValidationResult()
        bool_0 = validation_result_1.__bool__()
        int_1 = -324
        position_0 = module_0.Position(int_1, int_1, int_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'exclusive_maximum'
        base_error_0 = module_0.BaseError(text=str_0, position=str_0)
        str_1 = base_error_0.__str__()
        bytes_0 = b'\xaa\x0e\xaf7[\xcb\xbb\xf6ei\x1e\\\xd6\xcc\xaa\xe5\xb2<)'
        validation_result_0 = module_0.ValidationResult(error=bytes_0)
        validation_result_1 = module_0.ValidationResult(value=validation_result_0)
        bool_0 = validation_result_1.__bool__()
        validation_error_0 = module_0.ValidationError(text=str_0, code=str_0)
        none_type_0 = None
        str_2 = validation_result_0.__repr__()
        parse_error_0 = module_0.ParseError(text=str_0)
        str_3 = 'Must not be empty.'
        message_0 = module_0.Message(text=str_3)
        base_error_1 = module_0.BaseError(code=none_type_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 1
        validation_result_0 = module_0.ValidationResult(value=int_0)
        var_0 = tuple(validation_result_0)
        str_0 = 'bad error'
        validation_error_0 = module_0.ValidationError(text=str_0)
        validation_result_1 = module_0.ValidationResult(value=int_0, error=validation_error_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '(yXw#Hb'
        int_0 = 147
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_0 = module_0.Message(text=str_0, start_position=position_0, end_position=position_0)
        str_1 = position_0.__repr__()
        int_1 = message_0.__hash__()
        int_2 = message_0.__hash__()
        str_2 = '2t`:XVf\\)]gOX\\6NF9\x0b#'
        message_1 = module_0.Message(text=str_2, position=position_0, end_position=position_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '(yXw#Hb'
        int_0 = 147
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_0 = module_0.Message(text=str_0, start_position=position_0, end_position=position_0)
        int_1 = message_0.__hash__()
        int_2 = message_0.__hash__()
        bool_0 = False
        str_1 = 'Forms do not support rendering Object fields'
        str_2 = message_0.__repr__()
        list_0 = [str_1]
        int_3 = 4
        message_1 = module_0.Message(text=str_1, index=list_0, start_position=int_3, end_position=bool_0)
        validation_result_0 = module_0.ValidationResult()
        int_4 = -2373
        validation_result_1 = module_0.ValidationResult()
        bool_1 = message_1.__eq__(message_0)
        int_5 = 1997
        int_6 = 3570
        position_1 = module_0.Position(int_5, int_4, int_6)
        base_error_0 = module_0.BaseError(position=position_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '(yXw#Hb'
        int_0 = 147
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_0 = module_0.Message(text=str_0, start_position=position_0, end_position=position_0)
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, position=position_0)
        bool_0 = base_error_0.__eq__(position_0)
        int_1 = message_0.__hash__()
        str_1 = 'Forms do not support rendering Object fields'
        str_2 = message_0.__repr__()
        list_0 = base_error_0.messages(add_prefix=str_0)
        list_1 = [message_0, message_0]
        validation_result_0 = module_0.ValidationResult()
        bool_1 = message_0.__eq__(message_0)
        bool_2 = validation_result_0.__bool__()
        validation_error_0 = module_0.ValidationError(text=str_1, code=str_2)
        bool_3 = base_error_0.__eq__(validation_error_0)
        bytes_0 = b'\x99\x0b3\xd9eB\xebww\x9f'
        validation_result_1 = module_0.ValidationResult(value=bytes_0)
        int_2 = base_error_0.__len__()
        bool_4 = message_0.__eq__(str_0)
        bool_5 = message_0.__eq__(message_0)
        int_3 = None
        bool_6 = validation_result_0.__bool__()
        int_4 = -2226
        int_5 = 997
        position_1 = module_0.Position(int_3, int_4, int_5)
        base_error_1 = module_0.BaseError(text=str_0, position=position_1, messages=list_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '(yXw#Hb'
        str_1 = '|Zm\x0bMrqX} '
        str_2 = '~#w5s'
        list_0 = [str_2, str_2, str_2]
        message_0 = module_0.Message(text=str_1, code=str_1, index=list_0)
        int_0 = 147
        position_0 = module_0.Position(int_0, int_0, int_0)
        message_1 = module_0.Message(text=str_0, start_position=position_0, end_position=position_0)
        base_error_0 = module_0.BaseError(text=str_0, code=str_0, position=position_0)
        bool_0 = base_error_0.__eq__(position_0)
        int_1 = message_1.__hash__()
        str_3 = message_1.__repr__()
        list_1 = base_error_0.messages(add_prefix=str_0)
        validation_result_0 = module_0.ValidationResult()
        bool_1 = message_1.__eq__(message_1)
        validation_result_1 = module_0.ValidationResult()
        message_2 = module_0.Message(text=str_1, key=str_0, end_position=position_0)
        bool_2 = message_2.__eq__(int_0)
        bool_3 = message_0.__eq__(message_2)
        int_2 = -2226
        str_4 = base_error_0.__str__()
        int_3 = 135
        int_4 = 1270
        position_1 = module_0.Position(int_3, int_2, int_4)
        base_error_1 = module_0.BaseError()
    except BaseException:
        pass