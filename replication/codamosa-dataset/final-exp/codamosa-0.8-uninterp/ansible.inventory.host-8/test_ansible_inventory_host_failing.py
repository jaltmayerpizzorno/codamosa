# Automatically generated by Pynguin.
import ansible.inventory.host as module_0

def test_case_0():
    try:
        str_0 = 'eYN3v'
        host_0 = module_0.Host()
        float_0 = -1087.8437
        var_0 = host_0.__str__()
        dict_0 = {}
        var_1 = host_0.set_variable(float_0, dict_0)
        float_1 = 1133.16
        tuple_0 = ()
        var_2 = host_0.set_variable(float_1, tuple_0)
        var_3 = host_0.__str__()
        var_4 = host_0.__setstate__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 3606
        host_0 = module_0.Host(int_0)
        var_0 = host_0.serialize()
        int_1 = -119
        host_1 = module_0.Host(int_1)
        var_1 = host_1.__eq__(host_1)
        var_2 = host_0.get_name()
        var_3 = host_1.get_groups()
        var_4 = host_1.get_vars()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = None
        int_0 = -2252
        float_0 = 1000.0
        host_0 = module_0.Host(int_0, float_0)
        var_0 = host_0.deserialize(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = None
        host_0 = module_0.Host()
        var_0 = host_0.__eq__(float_0)
        var_1 = host_0.get_name()
        var_2 = host_0.__getstate__()
        var_3 = host_0.__repr__()
        var_4 = host_0.__hash__()
        str_0 = 'K!)'
        var_5 = host_0.populate_ancestors(str_0)
        var_6 = host_0.__getstate__()
    except BaseException:
        pass

def test_case_4():
    try:
        host_0 = module_0.Host()
        int_0 = 1714
        bool_0 = False
        var_0 = host_0.remove_group(bool_0)
        var_1 = host_0.populate_ancestors()
        var_2 = host_0.__getstate__()
        bytes_0 = b'\x89\xfd'
        list_0 = [host_0, host_0, host_0, host_0]
        tuple_0 = (bytes_0, list_0)
        var_3 = host_0.get_name()
        var_4 = host_0.serialize()
        var_5 = host_0.set_variable(int_0, tuple_0)
        var_6 = host_0.__hash__()
        host_1 = module_0.Host()
        var_7 = host_0.__eq__(host_1)
        host_2 = module_0.Host(int_0)
        var_8 = host_2.get_name()
        var_9 = host_1.__getstate__()
        host_3 = module_0.Host()
        var_10 = host_3.__repr__()
        var_11 = host_3.__repr__()
        bytes_1 = b'\x1e\xfcZ\xe2\xd2\xfa\x86\x9el\xa8X\xe3\x86\xfd\x8c\xb9\x85\x98\xcd'
        host_4 = module_0.Host(bytes_1)
        var_12 = host_4.__hash__()
        str_0 = '@{p2!I|}@~<,5?'
        var_13 = host_2.populate_ancestors(str_0)
        var_14 = host_1.__getstate__()
        bool_1 = True
        var_15 = host_2.add_group(bool_1)
    except BaseException:
        pass