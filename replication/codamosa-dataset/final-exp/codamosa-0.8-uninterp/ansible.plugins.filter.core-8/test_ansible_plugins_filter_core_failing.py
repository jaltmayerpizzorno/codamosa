# Automatically generated by Pynguin.
import ansible.template as module_0
import ansible.plugins.filter.core as module_1
import datetime as module_2

def test_case_0():
    try:
        str_0 = 'W>3l9O|t\r'
        list_0 = [str_0, str_0, str_0]
        ansible_undefined_0 = module_0.AnsibleUndefined(list_0)
        var_0 = module_1.to_yaml(ansible_undefined_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '")Xcw?3(0\x0b*h.9\tG\'Tu'
        var_0 = module_1.to_yaml(str_0)
        str_1 = 'YsG4ztyk'
        var_1 = module_1.regex_escape(str_1, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        time_0 = module_2.time()
        var_0 = module_1.to_nice_yaml(time_0, time_0)
    except BaseException:
        pass

def test_case_3():
    try:
        complex_0 = None
        var_0 = module_1.to_bool(complex_0)
        str_0 = "E'4B)_QR@(A-Zv,[]"
        bool_0 = True
        str_1 = "M'"
        str_2 = 'r0\x0bt8>y'
        dict_0 = {str_0: complex_0, str_1: str_1, str_2: bool_0}
        var_1 = module_1.comment(bool_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = module_1.combine()
        filter_module_0 = module_1.FilterModule()
        int_0 = 194
        var_1 = module_1.to_datetime(filter_module_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        var_0 = module_1.strftime(bool_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xbe\xe8m\xcbvE\xbf\xdf\xbf\x8c1\xa9\xdf'
        var_0 = module_1.strftime(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.fileglob(filter_module_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b''
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.regex_findall(bytes_0, filter_module_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 512
        float_0 = 0.5
        bytes_0 = b'y+8\x93I\xf7\xbf\xd3u'
        list_0 = [float_0, int_0, bytes_0, bytes_0]
        tuple_0 = (bytes_0, list_0, list_0)
        var_0 = module_1.to_yaml(tuple_0)
        str_0 = '<;>qb1V{iKo|Yg[p}H20'
        list_1 = []
        bool_0 = True
        var_1 = module_1.regex_findall(float_0, str_0, list_1, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        complex_0 = None
        str_0 = ''
        dict_0 = {str_0: complex_0, str_0: str_0}
        set_0 = {str_0}
        list_0 = [set_0, str_0, set_0, complex_0]
        var_0 = module_1.b64decode(list_0)
        float_0 = 0.0001
        var_1 = module_1.ternary(complex_0, dict_0, set_0, float_0)
        list_1 = None
        var_2 = module_1.b64encode(list_1, list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\x01p<uB)\x12\xec]'
        var_0 = module_1.fileglob(bytes_0)
        bool_0 = True
        var_1 = module_1.rand(bool_0, bool_0)
        bytes_1 = b'\xadm\xb5_I\n\xd3\x8d\xc7'
        filter_module_0 = module_1.FilterModule()
        var_2 = module_1.rand(bytes_1, filter_module_0, filter_module_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        dict_0 = {}
        var_0 = module_1.rand(bool_0, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -3103
        dict_0 = None
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        var_0 = module_1.randomize_list(list_0, list_0)
        list_1 = [int_0, dict_0, dict_0, int_0]
        str_0 = 'b.\r8JQJ[VqncI0)t~~p\r'
        set_0 = set()
        var_1 = module_1.subelements(list_1, str_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '^VxID:\\s+0'
        str_1 = '%3klNJ[ad\n'
        var_0 = module_1.randomize_list(str_0, str_1)
        int_0 = 1000
        var_1 = module_1.mandatory(int_0)
        list_0 = [var_1]
        filter_module_0 = module_1.FilterModule(*list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        str_0 = '{action}: setting connect_timeout to {value}'
        var_0 = module_1.get_hash(bool_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '*;7<'
        list_0 = [str_0]
        str_1 = 'E1;^"mv@jhgp'
        var_0 = module_1.get_encrypted_password(list_0, str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -987.682772
        list_0 = [float_0]
        str_0 = None
        var_0 = module_1.ternary(float_0, list_0, str_0)
        filter_module_0 = module_1.FilterModule()
        str_1 = 'e[kkw$cN};'
        var_1 = module_1.get_encrypted_password(str_1)
        var_2 = filter_module_0.filters()
        str_2 = ',]Kr4qU6A'
        bytes_0 = b'\xabow\xa4\xa5K z'
        var_3 = module_1.to_uuid(str_2, bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        filter_module_0 = module_1.FilterModule()
        dict_0 = {}
        filter_module_1 = module_1.FilterModule()
        filter_module_2 = module_1.FilterModule(**dict_0)
        var_0 = module_1.randomize_list(filter_module_0)
        var_1 = filter_module_0.filters()
        var_2 = filter_module_0.filters()
        list_0 = []
        str_0 = 'b>WyL'
        var_3 = module_1.to_uuid(list_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '/etc/passwd'
        float_0 = None
        str_1 = 'tn?s%DO Ee{TsC$'
        dict_0 = {str_0: str_0, str_1: str_1}
        var_0 = module_1.to_uuid(float_0)
        var_1 = module_1.comment(float_0, **dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = -1163
        var_0 = module_1.comment(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'python'
        list_0 = []
        var_0 = module_1.b64decode(list_0)
        var_1 = module_1.regex_escape(str_0, str_0)
        str_1 = 'posx_basLc'
        var_2 = module_1.regex_escape(str_1, str_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'object_type'
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
        var_0 = module_1.combine(*list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = -3103
        dict_0 = None
        list_0 = [int_0, dict_0, dict_0, int_0]
        str_0 = 'b.\r8JQJ[VqncI0)t~~p\r'
        set_0 = set()
        var_0 = module_1.subelements(list_0, str_0, set_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = True
        list_0 = []
        list_1 = [list_0, list_0, bool_0, list_0]
        var_0 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'EXAMPLES:'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {str_0: dict_0}
        var_0 = module_1.subelements(dict_1, str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '6R2}9^XuR !K4Qp.D?#'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {str_0: dict_0}
        var_0 = module_1.subelements(dict_1, str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        filter_module_0 = module_1.FilterModule()
        var_0 = filter_module_0.filters()
        str_0 = '{w'
        var_1 = module_1.regex_search(str_0, str_0)
        int_0 = -424
        list_0 = [str_0, var_1]
        var_2 = module_1.subelements(list_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'f;`PM_4_wW/P\n\tO~'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        var_0 = module_1.dict_to_list_of_dict_key_value_elements(list_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = -4232
        dict_0 = {}
        var_0 = module_1.list_of_dict_key_value_elements_to_dict(int_0, dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 200000
        var_0 = module_1.path_join(int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 25
        dict_0 = None
        list_0 = [int_0, dict_0]
        bool_0 = True
        var_0 = module_1.to_bool(bool_0)
        dict_1 = {int_0: int_0, int_0: list_0, int_0: dict_0, int_0: dict_0}
        var_1 = module_1.subelements(dict_1, list_0)
    except BaseException:
        pass

def test_case_32():
    try:
        dict_0 = {}
        bool_0 = True
        list_0 = []
        bytes_0 = None
        int_0 = -1730
        time_0 = module_2.time()
        var_0 = module_1.ternary(bytes_0, int_0, time_0)
        filter_module_0 = module_1.FilterModule()
        var_1 = filter_module_0.filters()
        var_2 = module_1.rand(bool_0, bool_0)
        str_0 = "9D`\ncf\t%\x0cv$a=\x0bm{d'd"
        tuple_0 = ()
        list_1 = [tuple_0, dict_0, list_0]
        var_3 = module_1.extract(str_0, tuple_0, list_1)
    except BaseException:
        pass

def test_case_33():
    try:
        float_0 = 240.38
        bool_0 = False
        str_0 = 'Failed to fetch the file: %s'
        dict_0 = None
        tuple_0 = (float_0, bool_0, str_0, dict_0)
        tuple_1 = (tuple_0,)
        var_0 = module_1.list_of_dict_key_value_elements_to_dict(tuple_1)
    except BaseException:
        pass

def test_case_34():
    try:
        bytes_0 = b'b\x10\xda\x0b\xa4\xdd'
        list_0 = []
        list_1 = [bytes_0, bytes_0, list_0, list_0]
        var_0 = module_1.extract(bytes_0, list_0, list_1)
    except BaseException:
        pass

def test_case_35():
    try:
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.to_bool(filter_module_0)
        str_0 = '{w'
        var_1 = module_1.regex_search(str_0, str_0)
        int_0 = -2657
        filter_module_1 = module_1.FilterModule()
        bytes_0 = b'\xf2\xde\xee\xb4Q\xbc\\l1\x8e\xec\x9c\xb5\\\r'
        var_2 = module_1.do_groupby(int_0, filter_module_1, bytes_0)
    except BaseException:
        pass

def test_case_36():
    try:
        float_0 = None
        dict_0 = {float_0: float_0}
        var_0 = module_1.subelements(float_0, dict_0)
    except BaseException:
        pass

def test_case_37():
    try:
        list_0 = []
        bool_0 = True
        str_0 = 'Re{iIS.KxUD'
        tuple_0 = (str_0,)
        var_0 = module_1.extract(list_0, bool_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'FNy!'
        bool_0 = False
        float_0 = -1654.970953
        list_0 = [str_0]
        var_0 = module_1.regex_search(bool_0, float_0, *list_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 25
        dict_0 = None
        list_0 = [int_0, dict_0]
        bool_0 = True
        var_0 = module_1.to_bool(bool_0)
        dict_1 = {int_0: int_0, int_0: list_0}
        var_1 = module_1.subelements(dict_1, list_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = None
        var_0 = module_1.get_encrypted_password(str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bool_0 = None
        float_0 = -796.49
        var_0 = module_1.mandatory(float_0)
        var_1 = module_1.to_uuid(bool_0)
        var_2 = module_1.combine()
        dict_0 = {}
        bytes_0 = b'\xfe_\xc0\xf2\xc2\xdf'
        var_3 = module_1.regex_findall(bool_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = -3103
        dict_0 = None
        list_0 = [int_0, dict_0, dict_0, int_0]
        str_0 = 'b.\r8JQJ[VqncI0)t~~p\r'
        list_1 = [str_0, dict_0, str_0, dict_0, str_0, list_0]
        var_0 = module_1.combine(*list_1)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = None
        var_0 = module_1.regex_replace(str_0)
        dict_0 = {}
        bool_0 = True
        list_0 = []
        str_1 = 'python'
        var_1 = module_1.path_join(str_1)
        var_2 = module_1.rand(bool_0, bool_0)
        var_3 = module_1.flatten(dict_0)
        list_1 = [var_2, dict_0, var_0]
        var_4 = module_1.subelements(list_1, list_0)
    except BaseException:
        pass

def test_case_44():
    try:
        filter_module_0 = module_1.FilterModule()
        dict_0 = {}
        float_0 = -447.94
        dict_1 = {float_0: dict_0}
        filter_module_1 = module_1.FilterModule()
        var_0 = module_1.dict_to_list_of_dict_key_value_elements(dict_1)
        filter_module_2 = module_1.FilterModule(**dict_0)
        var_1 = module_1.randomize_list(filter_module_0)
        var_2 = filter_module_0.filters()
        var_3 = filter_module_0.filters()
        list_0 = []
        str_0 = 'b>WyL'
        var_4 = module_1.to_uuid(list_0, str_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'YsG4Lztyk'
        var_0 = module_1.regex_escape(str_0, str_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'S@~p\'/#c,"uRZ9'
        set_0 = {str_0}
        var_0 = module_1.from_yaml(set_0)
        int_0 = -1980
        var_1 = module_1.rand(str_0, int_0, str_0)
    except BaseException:
        pass

def test_case_47():
    try:
        ansible_undefined_0 = None
        str_0 = "S!0,'"
        str_1 = '!\\i5'
        dict_0 = {str_0: ansible_undefined_0, str_0: ansible_undefined_0, str_1: str_1}
        list_0 = [ansible_undefined_0]
        int_0 = 961
        var_0 = module_1.rand(ansible_undefined_0, dict_0, list_0, int_0)
    except BaseException:
        pass

def test_case_48():
    try:
        complex_0 = None
        str_0 = "M'"
        str_1 = 'a@{lHBi/p7'
        str_2 = 'wb'
        dict_0 = {str_0: complex_0, str_1: str_1, str_0: str_1, str_2: complex_0}
        var_0 = module_1.combine(**dict_0)
    except BaseException:
        pass

def test_case_49():
    try:
        int_0 = -3096
        dict_0 = None
        list_0 = [int_0, int_0]
        list_1 = [int_0, dict_0, dict_0, int_0]
        bool_0 = True
        str_0 = '|u98z %&#Q}\nR$q\x0c8'
        int_1 = 499
        bytes_0 = b'h0$a.\x1f\xad\xf9\xef\xb2'
        tuple_0 = (int_1, bytes_0)
        var_0 = module_1.rand(bool_0, list_0, list_1, str_0, tuple_0)
    except BaseException:
        pass

def test_case_50():
    try:
        list_0 = []
        tuple_0 = (list_0,)
        var_0 = module_1.flatten(tuple_0, list_0)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = '\r0'
        list_0 = []
        str_1 = '\n'
        str_2 = ''
        str_3 = ')~k.\x0b,3@s\ng'
        dict_0 = {str_2: str_2, str_0: list_0, str_3: str_2, str_3: list_0}
        var_0 = module_1.subelements(list_0, str_1, dict_0)
        dict_1 = {str_0: str_0}
        var_1 = module_1.regex_search(str_0, dict_1)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = "'dzL/xT8n16!<`C"
        var_0 = module_1.from_yaml(str_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = "'dzL/xT8nj16!<`C"
        dict_0 = {str_0: str_0}
        list_0 = [str_0, dict_0, str_0, str_0]
        var_0 = module_1.path_join(list_0)
    except BaseException:
        pass

def test_case_54():
    try:
        int_0 = -2657
        tuple_0 = ()
        list_0 = [tuple_0]
        list_1 = []
        list_2 = [list_1, list_0, int_0, list_0]
        var_0 = module_1.combine(*list_2)
    except BaseException:
        pass

def test_case_55():
    try:
        int_0 = -3103
        dict_0 = None
        list_0 = [int_0, dict_0, dict_0, int_0]
        str_0 = 'b.\r8JQJ[VqncI0)t~~p\r'
        list_1 = [str_0, dict_0, str_0, list_0]
        dict_1 = {}
        var_0 = module_1.extract(list_0, list_0, dict_1, list_1)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = None
        var_0 = module_1.regex_replace(str_0)
        bool_0 = True
        list_0 = []
        var_1 = module_1.rand(bool_0, bool_0)
        filter_module_0 = module_1.FilterModule(*list_0)
        int_0 = 634
        float_0 = -781.2
        bytes_0 = b'\x00\xb4\x1c\xc1\xd6\x8a\xb8Lo|\xd4\xb9\xc3\xf6&\xe4\xb0I\x15L'
        var_2 = module_1.regex_replace(filter_module_0, int_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = 'foobar'
        var_0 = module_1.regex_replace(str_0, str_0, str_0)
        str_1 = 'foobarbaz'
        str_2 = 'bonanza'
        bool_0 = True
        var_1 = module_1.regex_replace(str_1, str_0, str_2, bool_0)
        str_3 = 'foo\nbar'
        str_4 = '.'
        str_5 = 'X'
        var_2 = module_1.regex_replace(str_3, str_4, str_5, bool_0)
        var_3 = module_1.regex_replace(str_3, str_4, str_5, bool_0, bool_0)
        var_4 = module_1.regex_replace(str_0, str_4, str_0)
        list_0 = None
        var_5 = module_1.strftime(list_0)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = '/etc/passwd'
        ansible_undefined_0 = module_0.AnsibleUndefined(str_0, str_0)
        var_0 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_59():
    try:
        str_0 = '-y\x0c8W~TZuzTR<%'
        ansible_undefined_0 = module_0.AnsibleUndefined(str_0)
        bytes_0 = b'\x12\xd1\xf4A\xed\xaak\xf8\x92\x0c6\x00\xc3\xa1\xc4\xe9\x0f\xae'
        var_0 = module_1.mandatory(ansible_undefined_0, bytes_0)
    except BaseException:
        pass

def test_case_60():
    try:
        list_0 = []
        tuple_0 = (list_0,)
        var_0 = module_1.flatten(tuple_0)
        dict_0 = {}
        filter_module_0 = module_1.FilterModule()
        var_1 = module_1.regex_search(dict_0, filter_module_0)
    except BaseException:
        pass

def test_case_61():
    try:
        filter_module_0 = module_1.FilterModule()
        complex_0 = None
        time_0 = module_2.time()
        bytes_0 = b'\xa9\xc0\x7f*\xect\x125x_'
        ansible_undefined_0 = module_0.AnsibleUndefined(complex_0, bytes_0)
        set_0 = None
        str_0 = ''
        dict_0 = {str_0: str_0}
        var_0 = module_1.rand(time_0, ansible_undefined_0, set_0, dict_0)
    except BaseException:
        pass

def test_case_62():
    try:
        str_0 = '/etc/passwd'
        bytes_0 = b'\x8c8\xed'
        list_0 = [str_0, str_0, bytes_0, bytes_0]
        tuple_0 = (bytes_0, list_0)
        ansible_undefined_0 = module_0.AnsibleUndefined(str_0, str_0, str_0, tuple_0)
        var_0 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_63():
    try:
        str_0 = 'scs'
        var_0 = module_1.to_bool(str_0)
        str_1 = 'YES'
        var_1 = module_1.to_bool(str_1)
        str_2 = 'o`'
        var_2 = module_1.to_bool(str_2)
        str_3 = '\\1'
        str_4 = ')'
        tuple_0 = None
        dict_0 = {str_4: var_2}
        list_0 = [str_1, str_3]
        var_3 = module_1.regex_search(tuple_0, dict_0, *list_0)
    except BaseException:
        pass

def test_case_64():
    try:
        bytes_0 = b'\x01p<uB)\x12\xec]'
        var_0 = module_1.fileglob(bytes_0)
        bool_0 = True
        list_0 = []
        var_1 = module_1.rand(bool_0, bool_0)
        float_0 = -510.0
        list_1 = [list_0, bytes_0, float_0, var_0]
        var_2 = module_1.quote(list_1)
        list_2 = [list_0, list_1, bool_0, list_0]
        var_3 = module_1.subelements(list_2, list_0)
    except BaseException:
        pass