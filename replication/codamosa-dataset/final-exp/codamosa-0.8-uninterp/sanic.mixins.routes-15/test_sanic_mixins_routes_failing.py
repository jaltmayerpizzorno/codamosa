# Automatically generated by Pynguin.
import pathlib as module_0
import sanic.mixins.routes as module_1

def test_case_0():
    try:
        str_0 = 'A;$%u1S/'
        pure_path_0 = module_0.PurePath()
        bool_0 = None
        route_mixin_0 = module_1.RouteMixin()
        var_0 = route_mixin_0.static(str_0, str_0, pure_path_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        route_mixin_0 = module_1.RouteMixin(**dict_0)
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '*vCpkFn% '
        bool_0 = None
        tuple_0 = ()
        str_1 = 'ebC'
        str_2 = '\n    **Status**: 503 Service Unavailable\n\n    The server is currently unavailable (because it is overloaded or\n    down for maintenance). Generally, this is a temporary state.\n    '
        list_0 = [bool_0, bool_0, str_0, bool_0]
        dict_0 = {}
        route_mixin_0 = module_1.RouteMixin(*list_0, **dict_0)
        var_0 = route_mixin_0.add_route(tuple_0, str_1, str_2)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        str_0 = 'n_fM5Ucq~?d`Y<6wIX'
        list_0 = []
        route_mixin_0 = module_1.RouteMixin()
        var_0 = route_mixin_0.patch(str_0, bool_0, list_0)
        str_1 = 'Ic\x0b|\x0b,\x0c'
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
        route_mixin_1 = module_1.RouteMixin(**dict_0)
        var_1 = route_mixin_1.add_route(str_1, str_1, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\\\r<R?IrA@RwCKwW'
        int_0 = 101
        route_mixin_0 = module_1.RouteMixin()
        var_0 = route_mixin_0.add_websocket_route(int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n        Synonymous with asyncio.get_event_loop().\n\n        .. note::\n\n            Only supported when using the `app.run` method.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        route_mixin_0 = module_1.RouteMixin(**dict_0)
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Zq$;G@_7^j=2T~";=|'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        route_mixin_0 = module_1.RouteMixin(**dict_0)
        var_0 = route_mixin_0.add_route(dict_0, str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        optional_0 = None
        route_mixin_0 = module_1.RouteMixin()
        var_0 = route_mixin_0.patch(str_0, str_0, optional_0)
        var_1 = route_mixin_0.put(str_0)
        bool_0 = True
        var_2 = route_mixin_0.head(str_0, bool_0)
        int_0 = 308
        var_3 = route_mixin_0.add_route(route_mixin_0, str_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'text'
        str_1 = '(`U}F."&$qi~WJo@n'
        set_0 = set()
        str_2 = '/Qn:3%'
        tuple_0 = (str_2,)
        int_0 = -975
        list_0 = [int_0, int_0, int_0, int_0]
        dict_0 = {}
        route_mixin_0 = module_1.RouteMixin(*list_0, **dict_0)
        var_0 = route_mixin_0.add_websocket_route(str_0, str_1, str_0, set_0, tuple_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        route_mixin_0 = module_1.RouteMixin()
        str_0 = '\\T6lGb{inK!{~{xy'
        int_0 = 344
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0, int_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        route_mixin_0 = module_1.RouteMixin()
        var_0 = route_mixin_0.put(str_0)
        str_1 = '%cx^Vo\r3'
        str_2 = '/+'
        var_1 = route_mixin_0.websocket(str_2)
        str_3 = 'F!Fo|#&yGO+?O4,0'
        int_0 = 339
        var_2 = route_mixin_0.add_route(str_2, str_3, str_1, int_0, str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'W;,@g'
        str_1 = None
        str_2 = '7f4[>[h'
        list_0 = [str_0, str_1]
        dict_0 = {str_0: str_2, str_0: str_0}
        list_1 = [str_0]
        int_0 = 1575
        route_mixin_0 = module_1.RouteMixin()
        var_0 = route_mixin_0.static(list_0, str_1, dict_0, list_1, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        route_mixin_0 = module_1.RouteMixin()
        str_0 = 'file_or_directory'
        str_1 = '/uri'
        var_0 = None
        str_2 = 'use_modified_since'
        str_3 = 'use_content_range'
        str_4 = 'stream_large_files'
        str_5 = 'name'
        str_6 = 'host'
        str_7 = 'strict_slashes'
        str_8 = 'content_type'
        str_9 = 'apply'
        var_1 = route_mixin_0.static(str_1, str_0, var_0, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        route_mixin_0 = module_1.RouteMixin()
        var_0 = route_mixin_0.put(str_0)
        bool_0 = True
        var_1 = route_mixin_0.head(str_0, bool_0)
        str_1 = '.v&yf{\rbgz~5yLNIOH8'
        str_2 = 'F!Fo|#&yGO+?O4,0'
        int_0 = 308
        var_2 = route_mixin_0.add_route(str_1, str_2, str_0, int_0, str_1)
    except BaseException:
        pass