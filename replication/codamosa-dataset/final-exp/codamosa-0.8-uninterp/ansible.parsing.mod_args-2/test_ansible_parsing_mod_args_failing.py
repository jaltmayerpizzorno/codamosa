# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        float_0 = -76.5764
        int_0 = -3407
        module_args_parser_0 = module_0.ModuleArgsParser(float_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 255
        str_0 = '*O+-N\x0c7NF'
        dict_0 = {int_0: str_0, str_0: str_0, int_0: int_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'action'
        str_1 = 'module'
        str_2 = 'args'
        str_3 = 'shell'
        str_4 = {str_1: str_3, str_2: str_2}
        str_5 = {str_0: str_0, str_0: str_4}
        module_args_parser_0 = module_0.ModuleArgsParser(str_5)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'foo'
        dict_0 = {str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'name'
        str_1 = 'action'
        str_2 = 'foo'
        str_3 = 'args'
        str_4 = {str_1: str_2, str_3: str_1}
        str_5 = {str_0: str_2, str_1: str_4}
        module_args_parser_0 = module_0.ModuleArgsParser(str_5)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1
        var_0 = dict(a=int_0, b=int_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '}V>`wB='
        str_1 = 'moe'
        str_2 = 'l'
        dict_0 = {str_1: str_1, str_0: str_2, str_2: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        int_0 = -2063
        list_0 = [int_0]
        var_0 = module_args_parser_0.parse(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'meta'
        str_1 = '5odule'
        str_2 = 'name'
        str_3 = 'args'
        str_4 = 'de*leg[*Rate_to'
        str_5 = 'E-!03 6h/tw.'
        str_6 = {str_0: str_2, str_1: str_2, str_2: str_2, str_3: str_4, str_4: str_4, str_5: str_4}
        module_args_parser_0 = module_0.ModuleArgsParser(str_6)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'A'
        str_1 = 'B'
        str_2 = 'D'
        var_0 = dict(C=str_2, E=str_1)
        var_1 = dict(action=str_0, delegate_to=str_1, args=var_0)
        var_2 = dict(action=str_0, delegate_to=str_1, args=str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_1)
        var_3 = module_args_parser_0.parse()
        var_4 = dict(local_action=str_0, delegate_to=str_1, args=str_0)
        var_5 = dict(C=str_2, E=str_2)
        var_6 = dict(action=str_0, delegate_to=str_1, args=var_5)
        var_7 = module_args_parser_0.parse()
        module_args_parser_1 = module_0.ModuleArgsParser(var_4)
        var_8 = module_args_parser_1.parse()
    except BaseException:
        pass