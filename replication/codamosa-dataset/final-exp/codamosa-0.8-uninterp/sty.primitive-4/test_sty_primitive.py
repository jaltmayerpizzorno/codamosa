# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    pass

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    register_0 = module_0.Register()

def test_case_3():
    str_0 = 'I0weIK=sF|`1Z#mE^9'
    style_0 = module_0.Style()
    register_0 = module_0.Register()
    var_0 = register_0.__setattr__(str_0, style_0)
    register_1 = module_0.Register()

def test_case_4():
    register_0 = module_0.Register()
    int_0 = 2325
    list_0 = [int_0]
    str_0 = register_0.__call__(*list_0)

def test_case_5():
    str_0 = 'V'
    list_0 = [str_0, str_0, str_0, str_0]
    register_0 = module_0.Register()
    str_1 = register_0.__call__(*list_0)
    dict_0 = {}
    style_0 = module_0.Style(**dict_0)

def test_case_6():
    str_0 = 'A\\v\\G 5{]P[k'
    list_0 = [str_0, str_0, str_0]
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    register_3 = register_2.copy()
    register_4 = register_3.copy()
    str_1 = register_4.__call__(*list_0)
    register_5 = module_0.Register()
    list_1 = []
    str_2 = register_5.__call__(*list_1)

def test_case_7():
    dict_0 = None
    set_0 = {dict_0}
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    register_3 = register_2.copy()
    register_3.set_renderfunc(dict_0, set_0)

def test_case_8():
    register_0 = module_0.Register()
    register_0.unmute()

def test_case_9():
    register_0 = module_0.Register()
    var_0 = register_0.as_namedtuple()

def test_case_10():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    var_0 = register_1.as_namedtuple()

def test_case_11():
    str_0 = "\x0cM1ca':e"
    style_0 = module_0.Style()
    list_0 = [style_0, style_0]
    style_1 = module_0.Style(*list_0)
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    var_0 = register_2.__setattr__(str_0, style_1)
    style_2 = module_0.Style()