# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        str_0 = ''
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        str_1 = "v'Y+?'mZ.mBcPQ"
        register_0 = module_0.Register()
        register_0.mute()
        var_0 = register_0.__setattr__(str_1, style_0)
        register_1 = register_0.copy()
        list_1 = []
        register_1.set_rgb_call(list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        str_0 = 'U#C_\\kFeie~Lp'
        list_0 = [register_0, register_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_3 = register_2.copy()
        str_0 = ''
        list_0 = [str_0]
        str_1 = register_2.__call__(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        type_0 = None
        callable_0 = None
        register_0.set_renderfunc(type_0, callable_0)
        register_0.unmute()
        str_0 = register_0.__call__()
        register_0.unmute()
        register_0.unmute()
        register_0.set_eightbit_call(type_0)
        dict_0 = register_0.as_dict()
        str_1 = None
        list_0 = [str_1, callable_0, callable_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_1, style_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        set_0 = None
        register_0.set_rgb_call(set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        register_0.mute()
        register_0.unmute()
        bool_0 = False
        register_0.set_renderfunc(bool_0, register_0)
        str_0 = "\n        This function is to handle calls such as `fg(42)`, `bg(102, 49, 42)`, `fg('red')`.\n        "
        list_0 = [register_0, str_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        type_0 = None
        callable_0 = None
        register_0.set_renderfunc(type_0, callable_0)
        register_0.unmute()
        str_0 = register_0.__call__()
        register_0.unmute()
        register_0.unmute()
        register_0.set_eightbit_call(type_0)
        dict_0 = register_0.as_dict()
        style_0 = module_0.Style()
        str_1 = register_0.__call__()
        list_0 = [str_0, str_1, str_1]
        str_2 = register_0.__call__(*list_0)
        register_0.set_renderfunc(type_0, callable_0)
        register_0.mute()
        dict_1 = {str_1: register_0, str_1: register_0}
        register_0.set_eightbit_call(type_0)
        str_3 = register_0.__call__(**dict_1)
        register_1 = register_0.copy()
        register_0.unmute()
        type_1 = None
        str_4 = '\\F^'
        var_0 = register_0.__setattr__(str_4, style_0)
        register_0.set_rgb_call(type_1)
        list_1 = [str_1, str_1]
        register_0.set_eightbit_call(list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        type_0 = None
        callable_0 = None
        register_0.set_renderfunc(type_0, callable_0)
        register_0.unmute()
        str_0 = register_0.__call__()
        dict_0 = register_0.as_dict()
        str_1 = None
        list_0 = [str_1, callable_0, callable_0]
        style_0 = module_0.Style(*list_0)
        register_0.set_rgb_call(type_0)
        var_0 = register_0.__setattr__(str_1, style_0)
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        type_0 = None
        callable_0 = None
        register_0.set_renderfunc(type_0, callable_0)
        register_0.unmute()
        str_0 = register_0.__call__()
        register_0.unmute()
        register_0.unmute()
        dict_0 = register_0.as_dict()
        style_0 = module_0.Style()
        str_1 = register_0.__call__()
        list_0 = [str_0, str_1, str_1]
        str_2 = register_0.__call__(*list_0)
        register_0.set_renderfunc(type_0, callable_0)
        register_0.mute()
        register_0.set_eightbit_call(type_0)
        register_1 = register_0.copy()
        register_0.unmute()
        register_2 = module_0.Register()
        type_1 = None
        str_3 = '\\F^'
        var_0 = register_0.__setattr__(str_3, style_0)
        register_0.set_rgb_call(type_1)
        register_0.unmute()
        str_4 = register_0.__call__()
        register_0.unmute()
        register_3 = module_0.Register()
        register_4 = module_0.Register()
        register_0.set_rgb_call(type_0)
        dict_1 = register_0.as_dict()
        register_3.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        type_0 = None
        callable_0 = None
        register_0.set_renderfunc(type_0, callable_0)
        register_0.unmute()
        str_0 = register_0.__call__()
        register_0.unmute()
        register_0.unmute()
        dict_0 = register_0.as_dict()
        style_0 = module_0.Style()
        str_1 = register_0.__call__()
        var_1 = register_0.__setattr__(str_1, style_0)
        list_0 = [str_0, str_1, str_1]
        str_2 = register_0.__call__(*list_0)
        register_0.set_renderfunc(type_0, callable_0)
        register_0.mute()
        dict_1 = {str_1: register_0, str_1: register_0}
        register_0.set_eightbit_call(type_0)
        str_3 = register_0.__call__(**dict_1)
        register_1 = register_0.copy()
        register_0.unmute()
        str_4 = '\\F^'
        var_2 = register_0.__setattr__(str_4, style_0)
        register_0.set_rgb_call(type_0)
        list_1 = [str_1, str_1]
        register_0.set_eightbit_call(list_1)
    except BaseException:
        pass