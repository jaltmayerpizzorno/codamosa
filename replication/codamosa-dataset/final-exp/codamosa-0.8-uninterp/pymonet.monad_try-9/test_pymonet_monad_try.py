# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_2():
    int_0 = 1
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    bool_1 = True
    try_1 = module_0.Try(bool_0, bool_1)
    bool_2 = True
    try_2 = module_0.Try(bool_1, bool_2)
    bool_3 = False
    try_3 = module_0.Try(bool_2, bool_3)
    var_0 = try_2 == try_3

def test_case_3():
    str_0 = '\n        Transform Validation to Either.\n\n        :returns: Right monad with previous value when Validation has no errors, in other case Left with errors list\n        :rtype: Right[A] | Left[E]\n        '
    str_1 = 'Fist[value={}]'
    bool_0 = True
    try_0 = module_0.Try(str_1, bool_0)
    bool_1 = True
    try_1 = module_0.Try(try_0, bool_1)
    bool_2 = try_1.__eq__(str_0)

def test_case_4():
    dict_0 = {}
    bool_0 = True
    try_0 = module_0.Try(dict_0, bool_0)
    str_0 = try_0.__str__()

def test_case_5():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    int_0 = True
    bool_1 = False
    try_0 = module_0.Try(int_0, bool_1)
    var_0 = try_0.on_success(list_0)
    bool_2 = True
    bool_3 = False
    try_1 = module_0.Try(bool_2, bool_3)
    var_1 = try_1.map(bool_0)
    dict_0 = None
    bool_4 = False
    try_2 = module_0.Try(dict_0, bool_4)

def test_case_6():
    bool_0 = False
    int_0 = 552
    set_0 = {int_0, int_0, int_0, int_0}
    str_0 = '@'
    tuple_0 = (int_0, set_0, str_0)
    bool_1 = False
    try_0 = module_0.Try(tuple_0, bool_1)
    var_0 = try_0.on_success(bool_0)

def test_case_7():
    int_0 = 1
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)
    bool_1 = True
    try_1 = module_0.Try(bool_0, bool_1)
    bool_2 = False
    float_0 = 758.3
    tuple_0 = (float_0,)
    var_0 = try_0.on_fail(tuple_0)
    try_2 = module_0.Try(bool_1, bool_2)
    bool_3 = False
    try_3 = module_0.Try(bool_2, bool_3)
    var_1 = try_2 == try_2

def test_case_8():
    bytes_0 = b'\xa0Dk\xac\xf1\x1br[y\xdd\x05'
    bool_0 = True
    str_0 = '@$[lt'
    tuple_0 = ()
    bool_1 = False
    try_0 = module_0.Try(tuple_0, bool_1)
    var_0 = try_0.get_or_else(str_0)
    try_1 = module_0.Try(bool_0, bool_1)
    var_1 = try_1.filter(bytes_0)

def test_case_9():
    str_0 = 'Wy7Yz+=IoL&%oGEY\x0bZ'
    bool_0 = None
    list_0 = [str_0, bool_0, str_0]
    bool_1 = None
    try_0 = module_0.Try(list_0, bool_1)
    bytes_0 = b'\x02\xe5\xb5I\xa2'
    try_1 = module_0.Try(bytes_0, bool_0)
    bool_2 = try_1.__eq__(try_0)
    var_0 = try_1.filter(list_0)
    float_0 = -237.0
    try_2 = module_0.Try(float_0, bool_0)
    var_1 = try_2.get()