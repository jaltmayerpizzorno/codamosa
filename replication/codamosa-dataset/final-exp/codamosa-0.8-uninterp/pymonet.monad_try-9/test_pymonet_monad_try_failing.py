# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        float_0 = -4943.67
        set_0 = {float_0, float_0}
        bool_0 = False
        try_0 = module_0.Try(set_0, bool_0)
        int_0 = 2635
        bool_1 = True
        try_1 = module_0.Try(set_0, bool_1)
        var_0 = try_1.map(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        try_0 = module_0.Try(dict_0, bool_0)
        bool_1 = False
        try_1 = module_0.Try(try_0, bool_1)
        var_0 = try_1.bind(str_0)
        bytes_0 = b'\x7fj\x15\x89\x85\xf1}\xd8\xc39-e?R\xb2v'
        bool_2 = try_0.__eq__(bytes_0)
        int_0 = -105
        str_1 = 'All[value={}]'
        int_1 = -4303
        var_1 = try_1.filter(int_1)
        bool_3 = True
        try_2 = module_0.Try(str_1, bool_3)
        var_2 = try_2.on_success(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -2074
        int_1 = -178
        dict_0 = {int_0: int_0}
        float_0 = -1095.0
        list_0 = [int_1, dict_0, float_0, dict_0]
        bool_0 = True
        try_0 = module_0.Try(int_0, bool_0)
        var_0 = try_0.bind(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '.;b\x0b'
        int_0 = 787
        bool_0 = True
        int_1 = 2941
        bool_1 = True
        try_0 = module_0.Try(int_1, bool_1)
        var_0 = try_0.get()
        try_1 = module_0.Try(int_0, bool_0)
        var_1 = try_1.on_success(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'CY\t)O*W'
        list_0 = []
        bool_0 = False
        try_0 = module_0.Try(list_0, bool_0)
        var_0 = try_0.on_fail(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -2629.1830598649126
        bool_0 = False
        try_0 = module_0.Try(float_0, bool_0)
        var_0 = try_0.filter(float_0)
        bool_1 = True
        try_1 = module_0.Try(try_0, bool_1)
        var_1 = try_1.filter(try_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xb7X\t\xb2\xd0\x9a\xb7\x88\x10\xd6w'
        float_0 = -1962.8
        str_0 = '\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        '
        set_0 = {bytes_0}
        bool_0 = True
        try_0 = module_0.Try(set_0, bool_0)
        var_0 = try_0.get_or_else(str_0)
        bool_1 = None
        try_1 = module_0.Try(float_0, bool_1)
        tuple_0 = (try_1,)
        try_2 = module_0.Try(tuple_0, bool_1)
        str_1 = 'Try[value={}, is_success={}]'
        bool_2 = True
        str_2 = try_2.__str__()
        try_3 = module_0.Try(str_1, bool_2)
    except BaseException:
        pass