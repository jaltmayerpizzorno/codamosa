# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0]
        list_1 = [list_0, dict_0]
        int_0 = -822
        list_2 = [list_1, list_0]
        bool_0 = False
        str_0 = 'elements'
        int_1 = 2388
        var_0 = module_0.logarithm(int_1)
        bytes_0 = None
        tuple_0 = (dict_0, str_0, bytes_0)
        var_1 = module_0.symmetric_difference(bool_0, str_0, tuple_0)
        var_2 = module_0.unique(int_0, list_2)
        var_3 = module_0.rekey_on_member(list_1, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        filter_module_0 = None
        list_0 = [filter_module_0, filter_module_0]
        float_0 = 299.621
        var_0 = module_0.symmetric_difference(filter_module_0, list_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '# fmt: ini\n# Example 1\n[web]\nhost1\nhost2 ansible_port=222 # defined inline, interpreted as an integer\n\n[web:vars]\nhttp_port=8080 # all members of \'web\' will inherit these\nmyvar=23 # defined in a :vars section, interpreted as a string\n\n[web:children] # child groups will automatically add their hosts to parent group\napache\nnginx\n\n[apache]\ntomcat1\ntomcat2 myvar=34 # host specific vars override group vars\ntomcat3 mysecret="\'03#pa33w0rd\'" # proper quoting to prevent value changes\n\n[nginx]\njenkins1\n\n[nginx:vars]\nhas_java = True # vars in child groups override same in parent\n\n[all:vars]\nhas_java = False # \'all\' is \'top\' parent\n\n# Example 2\nhost1 # this is \'ungrouped\'\n\n# both hosts have same IP but diff ports, also \'ungrouped\'\nhost2 ansible_host=127.0.0.1 ansible_port=44\nhost3 ansible_host=127.0.0.1 ansible_port=45\n\n[g1]\nhost4\n\n[g2]\nhost4 # same host as above, but member of 2 groups, will inherit vars from both\n      # inventory hostnames are unique\n'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.unique(str_0, list_0)
        dict_0 = {}
        float_0 = 512.0
        bytes_0 = b'\xc7\x94\xfa'
        var_1 = module_0.union(dict_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        list_0 = [bool_0]
        var_0 = module_0.min(list_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = set()
        var_0 = module_0.logarithm(set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        float_0 = -1339.77092
        var_0 = module_0.power(dict_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        var_0 = module_0.inversepower(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x0c\x89\xb0\xeaO\x17\x91\x85\xb9<Er\xa3\xa5\x12H\xe3fbs'
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        var_0 = module_0.inversepower(bytes_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = None
        var_0 = module_0.human_readable(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x7f_\xb2n\xba\xf2}\xd4\x01a\xa4Mw\xa5\xd2\xdc\x8d'
        var_0 = module_0.human_to_bytes(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '# fmt: ini\n# Example 1\n[web]\nhost1\nhost2 ansible_port=222 # defined inline, interpreted as an integer\n\n[web:vars]\nhttp_port=8080 # all members of \'web\' will inherit these\nmyvar=23 # defined in a :vars section, interpreted as a string\n\n[web:children] # child groups will automatically add their hosts to parent group\napache\nnginx\n\n[apache]\ntomcat1\ntomcat2 myvar=34 # host specific vars override group vars\ntomcat3 mysecret="\'03#pa33w0rd\'" # proper quoting to prevent value changes\n\n[nginx]\njenkins1\n\n[nginx:vars]\nhas_java = True # vars in child groups override same in parent\n\n[all:vars]\nhas_java = False # \'all\' is \'top\' parent\n\n# Example 2\nhost1 # this is \'ungrouped\'\n\n# both hosts have same IP but diff ports, also \'ungrouped\'\nhost2 ansible_host=127.0.0.1 ansible_port=44\nhost3 ansible_host=127.0.0.1 ansible_port=45\n\n[g1]\nhost4\n\n[g2]\nhost4 # same host as above, but member of 2 groups, will inherit vars from both\n      # inventory hostnames are unique\n'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.unique(str_0, list_0)
        dict_0 = {}
        float_0 = 512.0
        tuple_0 = ()
        var_1 = module_0.symmetric_difference(tuple_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\\'
        dict_0 = {str_0: str_0}
        var_0 = module_0.union(str_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0]
        int_0 = -2857
        var_0 = module_0.rekey_on_member(list_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = None
        str_0 = 'elements'
        int_0 = 2388
        var_0 = module_0.logarithm(int_0)
        bytes_0 = None
        tuple_0 = (dict_0, str_0, bytes_0)
        int_1 = None
        str_1 = "x>Rf'<m8{4:\x0bkp6Ze};f"
        str_2 = 'UZ'
        var_1 = module_0.difference(int_1, str_1, str_2)
        filter_module_0 = module_0.FilterModule()
        var_2 = filter_module_0.filters()
        var_3 = module_0.rekey_on_member(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -4315.3359
        complex_0 = None
        list_0 = [float_0, float_0, float_0]
        var_0 = module_0.rekey_on_member(float_0, complex_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -1967
        dict_0 = {}
        var_0 = module_0.rekey_on_member(int_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 299.621
        bool_0 = True
        bool_1 = True
        tuple_0 = (bool_0, bool_1)
        str_0 = '3y#a#v'
        set_0 = None
        set_1 = {bool_0, bool_1, set_0}
        dict_0 = {str_0: set_1}
        var_0 = module_0.difference(tuple_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ''
        int_0 = 42
        tuple_0 = ()
        bytes_0 = b'\xd9\xc4\xc0\xde\x14&\xaa\xcb\x12\x16\x12\x15'
        var_0 = module_0.unique(tuple_0, bytes_0)
        float_0 = 296.0
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.human_readable(float_0, filter_module_0)
        int_1 = {str_0: int_0, str_0: int_0}
        int_2 = -31
        int_3 = {str_0: int_2, str_0: int_1}
        str_1 = 'm\rJ\nW N?fajM8,%7'
        str_2 = '8\rH2mg\x0cyu}'
        dict_0 = {str_1: int_3, str_0: int_1, str_2: int_1, str_2: str_0}
        dict_1 = {str_0: dict_0, str_1: str_2}
        list_0 = []
        var_2 = module_0.min(list_0, dict_1)
        float_1 = -2175.0
        str_3 = '\x0b&f~EQF&t/S&*/.'
        var_3 = module_0.intersect(dict_0, bytes_0, str_3)
        var_4 = module_0.rekey_on_member(dict_1, float_1)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0]
        list_1 = [list_0, dict_0]
        int_0 = -822
        list_2 = [list_1, list_0]
        var_0 = module_0.unique(int_0, list_2)
        float_0 = -3497.07674
        var_1 = module_0.logarithm(float_0)
    except BaseException:
        pass

def test_case_19():
    try:
        dict_0 = None
        list_0 = [dict_0]
        list_1 = [list_0, list_0]
        tuple_0 = ()
        var_0 = module_0.human_readable(dict_0, list_1, tuple_0)
    except BaseException:
        pass

def test_case_20():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0]
        list_1 = [list_0, dict_0]
        int_0 = -822
        list_2 = [list_1, list_0]
        bool_0 = False
        str_0 = 'elements'
        int_1 = 2388
        var_0 = module_0.logarithm(int_1)
        bytes_0 = None
        tuple_0 = (dict_0, str_0, bytes_0)
        var_1 = module_0.symmetric_difference(bool_0, str_0, tuple_0)
        var_2 = module_0.unique(int_0, list_2)
        str_1 = ''
        str_2 = 'I]T!VMD'
        var_3 = module_0.rekey_on_member(str_1, str_2)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'\xfb8A;\x84E\xb82\xbck\xa1\x13.'
        dict_0 = {}
        str_0 = 'Y\toi}d,|9XGC\x0bU'
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.unique(dict_0, str_0, filter_module_0, bytes_0)
    except BaseException:
        pass

def test_case_22():
    try:
        filter_module_0 = module_0.FilterModule()
        bool_0 = False
        str_0 = '/b\tgA1GZ"l{09W)OhSW'
        var_0 = module_0.unique(filter_module_0, filter_module_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = ''
        tuple_0 = ()
        bytes_0 = b'\xd9\xc4\xc0\xde\x14&\xaa\xcb\x12\x16\x12\x15'
        var_0 = module_0.unique(tuple_0, bytes_0)
        int_0 = -694
        int_1 = -31
        int_2 = {str_0: int_1, str_0: int_1}
        str_1 = 'm\rJ\nW N?fajM8,%7'
        str_2 = '8\rH2mg\x0cyu}'
        int_3 = -2170
        dict_0 = {str_1: int_2, str_0: int_0, str_2: int_3, str_2: str_0}
        dict_1 = {str_0: dict_0, str_1: str_2}
        float_0 = -2175.0
        var_1 = module_0.rekey_on_member(dict_1, float_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = 2.718281828459045
        int_0 = 2
        var_0 = module_0.human_to_bytes(float_0, int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = None
        filter_module_0 = module_0.FilterModule()
        str_0 = '%'
        list_0 = [float_0, filter_module_0]
        var_0 = module_0.difference(str_0, list_0, list_0)
        var_1 = filter_module_0.filters()
        str_1 = '5'
        bytes_0 = b''
        str_2 = '=&J'
        str_3 = 'ansible_pos can only be set with a tuple/list of three values: source, line number, column number'
        dict_0 = {str_2: list_0, str_2: var_0, str_3: str_1, str_2: bytes_0}
        var_2 = module_0.max(bytes_0, dict_0)
        var_3 = filter_module_0.filters()
        float_1 = 1833.6088
        float_2 = -896.44
        var_4 = module_0.rekey_on_member(float_1, float_2)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = ''
        int_0 = {}
        int_1 = [int_0, int_0]
        var_0 = module_0.rekey_on_member(int_1, str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = ''
        int_0 = 35
        int_1 = -694
        int_2 = {str_0: int_0, str_0: int_1}
        int_3 = [int_2, int_2]
        var_0 = module_0.rekey_on_member(int_3, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'x'
        str_1 = '='
        int_0 = 1
        int_1 = 11
        int_2 = {str_0: int_0, str_1: int_1}
        int_3 = 2
        int_4 = 12
        int_5 = {str_0: int_3, str_1: int_4}
        int_6 = [int_2, int_5]
        var_0 = module_0.rekey_on_member(int_6, str_0)
        int_7 = {str_0: int_0, str_1: int_1}
        int_8 = {str_0: int_3, str_1: int_4}
        int_9 = [int_7, int_8]
        var_1 = module_0.rekey_on_member(int_9, str_1)
        bytes_0 = b'\x03\x84\x06Izp\x8c\xd2\xa5\xa5\xe5'
        bool_0 = False
        var_2 = module_0.inversepower(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        float_0 = -1346.695938
        var_0 = module_0.power(float_0, float_0)
    except BaseException:
        pass