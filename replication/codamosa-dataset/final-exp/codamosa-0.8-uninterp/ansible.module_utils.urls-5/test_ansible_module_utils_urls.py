# Automatically generated by Pynguin.
import ansible.module_utils.urls as module_0

def test_case_0():
    pass

def test_case_1():
    request_0 = module_0.Request()
    bool_0 = False
    unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bool_0)
    var_0 = module_0.get_channel_binding_cert_hash(unix_h_t_t_p_connection_0)

def test_case_2():
    parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()

def test_case_3():
    bool_0 = True
    var_0 = module_0.atexit_remove_file(bool_0)
    list_0 = []
    unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(list_0)

def test_case_4():
    request_0 = module_0.Request()

def test_case_5():
    var_0 = module_0.url_argument_spec()

def test_case_6():
    var_0 = module_0.RedirectHandlerFactory()
    str_0 = 'K5+5;#r'
    var_1 = module_0.generic_urlparse(str_0)

def test_case_7():
    bytes_0 = b'\x08\x8f\x19\x1e1\xe5Kk\xed\xc4\x90c\x01\xa26'
    var_0 = module_0.generic_urlparse(bytes_0)

def test_case_8():
    no_s_s_l_error_0 = module_0.NoSSLError()
    var_0 = module_0.get_channel_binding_cert_hash(no_s_s_l_error_0)

def test_case_9():
    parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
    var_0 = module_0.prepare_multipart(parse_result_dotted_dict_0)

def test_case_10():
    str_0 = ']UM12w,[#'
    dict_0 = {str_0: str_0}
    var_0 = module_0.prepare_multipart(dict_0)

def test_case_11():
    str_0 = 'example.com'
    int_0 = 82
    s_s_l_validation_handler_0 = module_0.SSLValidationHandler(str_0, int_0)
    str_1 = 'http://example.com'
    var_0 = s_s_l_validation_handler_0.detect_no_proxy(str_1)

def test_case_12():
    str_0 = ''
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.prepare_multipart(dict_0)

def test_case_13():
    str_0 = 'Lds*R3q$'
    int_0 = 3600
    list_0 = [str_0, str_0]
    custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0)
    s_s_l_validation_handler_0 = module_0.SSLValidationHandler(int_0, custom_h_t_t_p_s_connection_0)

def test_case_14():
    str_0 = 'localhost'
    str_1 = '443'
    s_s_l_validation_handler_0 = module_0.SSLValidationHandler(str_0, str_1)
    bytes_0 = b'HTTP/1.0 200 OK\r\n'
    var_0 = s_s_l_validation_handler_0.validate_proxy_response(bytes_0)
    bytes_1 = b'HTTP/1.0 200 OK\r\n'
    int_0 = 200
    int_1 = 201
    int_2 = [int_0, int_1]
    var_1 = s_s_l_validation_handler_0.validate_proxy_response(bytes_1, int_2)

def test_case_15():
    str_0 = 'https://localhost'
    bool_0 = True
    var_0 = None
    var_1 = module_0.maybe_add_ssl_handler(str_0, bool_0, var_0)