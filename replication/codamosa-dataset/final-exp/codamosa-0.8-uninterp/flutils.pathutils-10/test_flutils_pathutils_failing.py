# Automatically generated by Pynguin.
import flutils.pathutils as module_0
import pathlib as module_1

def test_case_0():
    try:
        float_0 = 2786.0
        struct_group_0 = module_0.get_os_group(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '$,2<inx'
        struct_group_0 = module_0.get_os_group(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'license'
        struct_passwd_0 = module_0.get_os_user(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b''
        module_0.path_absent(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        struct_passwd_0 = module_0.get_os_user()
        str_0 = '/tmp'
        path_0 = module_0.normalize_path(str_0)
        module_0.path_absent(str_0)
        path_1 = module_0.directory_present(str_0)
        posix_path_0 = module_1.PosixPath()
        path_2 = module_0.directory_present(posix_path_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'KBj\r'
        str_1 = 'fD%|>/Fy'
        str_2 = 'tw_(ec2;['
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_1}
        module_0.path_absent(str_2)
        windows_path_0 = module_1.WindowsPath(**dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        struct_passwd_0 = module_0.get_os_user()
        int_0 = -1489
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 912
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2618
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '/tmp/foo_user'
        str_1 = 'foo'
        module_0.chown(str_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        struct_passwd_0 = module_0.get_os_user()
        str_0 = '/tmp'
        path_0 = module_0.directory_present(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '/)tmp@Q'
        module_0.path_absent(str_0)
        path_0 = module_0.directory_present(str_0)
        str_1 = module_0.exists_as(str_0)
        struct_passwd_0 = module_0.get_os_user()
        struct_group_0 = module_0.get_os_group()
        module_0.path_absent(str_0)
        module_0.chown(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        struct_passwd_0 = module_0.get_os_user()
        str_0 = '/tmp@Q/foo_use*r'
        struct_group_0 = module_0.get_os_group()
        path_0 = module_0.normalize_path(str_0)
        module_0.path_absent(str_0)
        path_1 = module_0.directory_present(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b"'x\xd3\xb7)\xd3\x82\xc7\xa7\xdf\x1c\xca\xf2T\x04\xbb\x19\xcf`"
        str_0 = None
        str_1 = 'LPdO'
        str_2 = None
        dict_0 = {str_0: bytes_0, str_0: str_0, str_1: bytes_0, str_2: bytes_0}
        struct_passwd_0 = module_0.get_os_user(dict_0)
    except BaseException:
        pass