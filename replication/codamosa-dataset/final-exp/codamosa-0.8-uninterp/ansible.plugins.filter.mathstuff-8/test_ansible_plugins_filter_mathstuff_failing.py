# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        float_0 = -1380.9665
        bool_0 = False
        var_0 = module_0.unique(float_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x91k\x06J\xbfS^\x89*\x13'
        str_0 = "l9$'JE#B"
        str_1 = '16h\nbhK+mI'
        var_0 = module_0.difference(bytes_0, str_0, str_1)
        bytes_1 = b''
        str_2 = 'w>&Uj+ =b}E{TE`4Ms'
        dict_0 = {str_0: bytes_0, str_2: str_2, str_2: str_0}
        set_0 = None
        var_1 = module_0.human_to_bytes(bytes_1, dict_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0]
        str_1 = '$g$Zd.CZit3>;X"'
        str_2 = ',bind'
        var_0 = module_0.union(list_0, str_1, str_2)
        int_0 = 1289
        bytes_0 = b'\xf9h,\xe5}l\x8f\x06*\xf6\x1fI\x06\xda\x8d\xf2.H'
        float_0 = None
        var_1 = module_0.symmetric_difference(int_0, bytes_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '`[<LL_5o:cN)'
        list_0 = [str_0, str_0]
        var_0 = module_0.symmetric_difference(str_0, str_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        bytes_0 = b'-\xe8\t\xa6\xf9\xd9\xc3\x88\x9aT1\xc2\xcb9\x8c&C\r7'
        str_1 = 'oDu@`7OVf!UF'
        dict_0 = {str_0: str_0, str_0: bytes_0, str_1: str_0}
        list_0 = []
        list_1 = [dict_0, dict_0]
        var_0 = module_0.union(list_0, list_0, list_1)
        bytes_1 = b'\xfc\xa8@eB,\x1b'
        list_2 = [bytes_1]
        var_1 = module_0.rekey_on_member(list_1, list_2)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        var_0 = module_0.min(tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1
        var_0 = module_0.max(int_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'v2o2&zLH'
        var_0 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'zAp&([Dho:v=$\tAf8/7'
        dict_0 = {str_0: str_0, str_0: str_0}
        float_0 = -1955.40852
        var_0 = module_0.power(dict_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 2
        set_0 = {int_0, int_0}
        float_0 = -1130.54
        list_0 = [set_0, float_0]
        var_0 = module_0.inversepower(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xcd\x95\xeeR\x9c\xc0\xcd\xf9\xbf\xb0'
        list_0 = [bytes_0, bytes_0]
        float_0 = None
        var_0 = module_0.inversepower(list_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '=sV0AL/1'
        var_0 = module_0.human_readable(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        var_0 = module_0.human_to_bytes(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '#'
        var_0 = module_0.rekey_on_member(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xfc\xa8@eB,\x1b'
        list_0 = [bytes_0]
        list_1 = [bytes_0]
        var_0 = module_0.rekey_on_member(list_0, list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = "'Ndm7AVKI?\nm|"
        bytes_0 = b'\xaa\xf9\xae\xd0\xe5\x80\x81'
        list_0 = [bytes_0, str_0, str_0]
        float_0 = 3490.9
        var_0 = module_0.symmetric_difference(bytes_0, list_0, float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        list_0 = []
        list_1 = None
        var_0 = module_0.rekey_on_member(list_1, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '2eb)}X^Wk\\jx)B'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = 'v'
        list_0 = [str_0]
        var_0 = module_0.difference(dict_0, str_1, list_0)
        dict_1 = {str_0: str_1}
        bytes_0 = b'\xa7S\xfc\x88\xe8\x83-\xd2\x1d\x08\x8a\xe3\xba\x98\xc1<@'
        str_2 = 'Sa9Dv5Iq0rmND{!bc'
        tuple_0 = (bytes_0, str_2)
        var_1 = module_0.rekey_on_member(dict_1, tuple_0, dict_1)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 956
        float_0 = 259.0
        str_0 = None
        dict_0 = {str_0: int_0, str_0: float_0}
        str_1 = '\\6gb>=Qf*'
        bool_0 = False
        var_0 = module_0.intersect(dict_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\x92R\xf5'
        str_0 = 'oDu@`7OVf!UF'
        dict_0 = {str_0: str_0, str_0: bytes_0, str_0: str_0}
        list_0 = [dict_0]
        set_0 = set()
        var_0 = module_0.rekey_on_member(list_0, set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = -0.9176178237890705
        var_0 = module_0.logarithm(float_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'-\xe8\t\xa6\xf9\xd9\xc3\x88\x9aT1\xc2\xcb9\x8c&C\r7'
        bool_0 = False
        filter_module_0 = module_0.FilterModule()
        dict_0 = {bytes_0: bool_0}
        float_0 = -2871.3
        str_0 = None
        tuple_0 = (dict_0, bytes_0, float_0, str_0)
        set_0 = set()
        var_0 = module_0.unique(filter_module_0, tuple_0, bool_0, set_0)
    except BaseException:
        pass

def test_case_22():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        int_0 = 711
        list_0 = [var_0, var_0, int_0]
        complex_0 = None
        str_0 = None
        dict_0 = {str_0: int_0, str_0: var_0, str_0: complex_0, str_0: complex_0}
        tuple_0 = (complex_0, dict_0)
        list_1 = []
        var_1 = module_0.symmetric_difference(tuple_0, list_1, list_0)
        filter_module_1 = module_0.FilterModule(*list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        float_0 = -1904.338
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.human_readable(float_0, filter_module_0, float_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = None
        str_1 = 't8C^|\x0c2EMk\x0c}Y`f\\FD\x0c?'
        bytes_0 = b'-\xe8\t\xa6\xf9\xd9\xc3\x88\x9aT1\xc2\xcb9\x8c&C\r7'
        bool_0 = True
        dict_0 = {}
        var_0 = module_0.min(bool_0, bytes_0, **dict_0)
        dict_1 = {str_0: str_0, str_1: bytes_0, str_1: str_0}
        list_0 = []
        list_1 = [dict_1, dict_1]
        var_1 = module_0.union(list_0, list_0, list_1)
        var_2 = module_0.max(list_0, str_1)
        int_0 = -132
        var_3 = module_0.human_readable(int_0, bytes_0)
        var_4 = module_0.rekey_on_member(list_1, int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        int_0 = 701
        list_0 = [var_0, var_0, int_0]
        complex_0 = None
        str_0 = None
        dict_0 = {str_0: int_0, str_0: var_0, str_0: complex_0, str_0: complex_0}
        tuple_0 = (complex_0, dict_0)
        list_1 = [int_0]
        var_1 = module_0.symmetric_difference(tuple_0, list_1, list_0)
        var_2 = module_0.human_readable(filter_module_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1576
        int_1 = 2906
        var_0 = module_0.human_to_bytes(int_0, int_1)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = -2204
        int_1 = 1150
        var_0 = module_0.power(int_0, int_1)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 't8C^|\x0c2EMk\x0c}Y`f\\FD\x0c?'
        bool_0 = False
        float_0 = -1893.35966
        list_0 = [bool_0]
        str_1 = 'AXAg,Y19U^"bVMoU'
        tuple_0 = (str_1,)
        set_0 = {float_0, float_0, bool_0, tuple_0}
        var_0 = module_0.difference(list_0, list_0, set_0)
        dict_0 = {str_0: str_0}
        tuple_1 = (dict_0,)
        var_1 = module_0.intersect(float_0, dict_0, str_0)
        var_2 = module_0.rekey_on_member(tuple_1, str_0)
        bytes_0 = b'n\xfa\xc9\xc3\xc9'
        var_3 = module_0.difference(bytes_0, str_0, bytes_0)
        var_4 = module_0.rekey_on_member(tuple_1, dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bool_0 = False
        var_0 = module_0.inversepower(bool_0)
        var_1 = module_0.inversepower(bool_0)
        int_0 = 1
        dict_0 = {bool_0: int_0}
        var_2 = module_0.inversepower(dict_0, bool_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 285
        int_1 = 256
        bool_0 = False
        var_0 = module_0.unique(int_0, int_1, bool_0)
    except BaseException:
        pass

def test_case_31():
    try:
        float_0 = 4945.47491
        list_0 = None
        int_0 = -1374
        bytes_0 = b'\x7f\xd9I\xab-v\x9b\xf0\xed'
        str_0 = 'M_[\x0bl72SQcV>\td%$'
        dict_0 = {str_0: int_0, str_0: int_0}
        tuple_0 = (bytes_0, dict_0)
        var_0 = module_0.unique(list_0, int_0, float_0, tuple_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = None
        str_1 = '{kX\r:'
        bytes_0 = b'-\xe8\t\xa6\xf9\xd9\xc3\x88\x9aT1\xc2\xcb9\x8c&C\r7'
        dict_0 = {str_0: str_0, str_1: bytes_0, str_1: str_0}
        list_0 = []
        list_1 = [dict_0, dict_0]
        var_0 = module_0.union(list_0, list_0, list_1)
        var_1 = module_0.max(list_0, str_1)
        var_2 = module_0.rekey_on_member(list_1, str_0)
    except BaseException:
        pass