# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        str_0 = '-#X'
        str_1 = '~W'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_1, n_f_a_state_0: str_1}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        list_0 = [d_f_a_state_0, d_f_a_state_0]
        dict_1 = {str_1: list_0, str_1: list_0}
        tuple_0 = (dict_1, str_0)
        parser_generator_0 = module_0.ParserGenerator(str_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '7D]G5wNZ?KY2%'
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        n_f_a_state_0 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '~W'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_4():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'l'
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_1 = None
        n_f_a_state_0.addarc(n_f_a_state_1)
    except BaseException:
        pass

def test_case_5():
    try:
        pgen_grammar_0 = module_0.PgenGrammar()
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'l'
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_1, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '&+|Oo'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0}
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        str_1 = None
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        pgen_grammar_0 = module_0.PgenGrammar()
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'l'
        d_f_a_state_1 = None
        d_f_a_state_0.addarc(d_f_a_state_1, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = None
        d_f_a_state_2 = module_0.DFAState(dict_1, n_f_a_state_1)
    except BaseException:
        pass

def test_case_10():
    try:
        n_f_a_state_0 = module_0.NFAState()
        tuple_0 = None
        d_f_a_state_0 = None
        dict_0 = {n_f_a_state_0: tuple_0, n_f_a_state_0: tuple_0, n_f_a_state_0: tuple_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0, tuple_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_1)
        bytes_0 = b'j\xc9q9\xc7s\x93\xa4\xbc\xe4$+\x98\xe1i\x1a'
        bool_0 = False
        parser_generator_0 = None
        tuple_1 = (n_f_a_state_0, bytes_0, bool_0, parser_generator_0)
        n_f_a_state_1.addarc(n_f_a_state_1, tuple_1)
    except BaseException:
        pass

def test_case_11():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = None
        dict_1 = {n_f_a_state_1: n_f_a_state_0, n_f_a_state_1: dict_0, n_f_a_state_2: n_f_a_state_1}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_0)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)
        dict_2 = {n_f_a_state_1: n_f_a_state_0, n_f_a_state_1: dict_0}
        d_f_a_state_2 = module_0.DFAState(dict_2, n_f_a_state_2)
    except BaseException:
        pass

def test_case_12():
    try:
        n_f_a_state_0 = None
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass