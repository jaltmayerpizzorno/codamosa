# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        str_0 = '|\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        float_1 = 0.7
        dict_0 = {rough_parser_0: float_1}
        str_0 = 'lo\re~{K!$\x0b'
        rough_parser_1 = module_0.RoughParser(dict_0, str_0)
        var_1 = rough_parser_1.get_continuation_type()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '|\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_0.get_num_lines_in_stmt()
        var_4 = rough_parser_0.get_base_indent_string()
        var_5 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_6 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        bool_1 = True
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_1, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '|\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_0.is_block_opener()
        var_4 = rough_parser_0.get_base_indent_string()
        var_5 = rough_parser_0.find_good_parse_start(rough_parser_0)
        dict_0 = {var_4: str_0}
        var_6 = rough_parser_0.find_good_parse_start(dict_0)
        var_7 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 13
        dict_0 = {int_0: int_0, int_0: int_0}
        str_0 = 'completed_focus'
        hyper_parser_0 = module_0.HyperParser(dict_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '|\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_4 = rough_parser_0.set_lo(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        str_0 = '|\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.find_good_parse_start(float_0)
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 466
        str_0 = 'B$Pan'
        set_0 = {str_0}
        rough_parser_0 = module_0.RoughParser(int_0, set_0)
        float_0 = 3779.0
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -1198.0
        list_0 = None
        dict_0 = {list_0: float_0, float_0: float_0, list_0: float_0, float_0: list_0}
        bytes_0 = b'\xa3'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, bytes_0)
        var_0 = string_translate_pseudo_mapping_0.__iter__()
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(float_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        bool_1 = True
        float_0 = 3.9168313262257275
        rough_parser_0 = module_0.RoughParser(bool_1, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '|\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_0.get_base_indent_string()
        var_4 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_5 = rough_parser_0.get_last_open_bracket_pos()
        var_6 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        str_0 = 'afforv'
        var_0 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        bool_1 = True
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_1, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '|\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -650.044643
        int_0 = 2267
        dict_0 = {float_0: int_0}
        str_0 = '/"V'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0)
        var_0 = string_translate_pseudo_mapping_0.__len__()
        string_translate_pseudo_mapping_2 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_1 = string_translate_pseudo_mapping_2.__iter__()
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        bool_1 = False
        float_0 = 1.67
        dict_0 = {bool_1: bool_0, bool_0: bool_1, bool_1: bool_0, bool_0: bool_0}
        tuple_0 = ()
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, tuple_0)
        var_0 = string_translate_pseudo_mapping_0.get(float_0)
        float_1 = -0.45429708684383036
        rough_parser_0 = module_0.RoughParser(bool_1, float_1)
        rough_parser_1 = module_0.RoughParser(rough_parser_0, bool_0)
        var_1 = rough_parser_0.set_lo(bool_0)
        dict_1 = {rough_parser_1: float_1}
        var_2 = rough_parser_0.set_lo(dict_1)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.find_good_parse_start(rough_parser_0)
        tuple_0 = ()
        var_3 = rough_parser_0.find_good_parse_start(tuple_0)
        var_4 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        str_0 = '|\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        var_2 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '|\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = False
        bool_1 = False
        float_0 = 0.05
        rough_parser_0 = module_0.RoughParser(bool_1, float_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_0.get_continuation_type()
        var_4 = rough_parser_0.find_good_parse_start()
        var_5 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        float_0 = -0.20041812464981623
        rough_parser_0 = module_0.RoughParser(bool_0, float_0)
        str_0 = '|\n'
        var_0 = rough_parser_0.set_str(str_0)
        int_0 = -1
        var_1 = rough_parser_0.set_lo(int_0)
    except BaseException:
        pass