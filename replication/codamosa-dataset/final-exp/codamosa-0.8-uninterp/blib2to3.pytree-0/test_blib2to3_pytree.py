# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 2388
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    iterator_0 = node_0.pre_order()

def test_case_2():
    int_0 = 0
    str_0 = 'hi'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_3():
    int_0 = 58
    str_0 = ''
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__str__()
    leaf_1 = leaf_0.clone()

def test_case_4():
    int_0 = 0
    str_0 = 'hi'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_5():
    str_0 = '.q'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_6():
    str_0 = '.q'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_7():
    int_0 = 117
    str_0 = ')&i_:5<Q-|=oD;1i:3>O'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    any_0 = None
    negated_pattern_0 = module_0.NegatedPattern(any_0)

def test_case_8():
    int_0 = 0
    str_0 = '3'
    grammar_0 = module_1.Grammar()
    none_type_0 = None
    list_0 = []
    tuple_0 = (int_0, str_0, none_type_0, list_0)
    var_0 = module_0.convert(grammar_0, tuple_0)

def test_case_9():
    str_0 = None
    leaf_pattern_0 = module_0.LeafPattern(str_0)

def test_case_10():
    int_0 = 2388
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    iterator_0 = node_1.pre_order()
    node_0.insert_child(int_0, node_1)

def test_case_11():
    int_0 = 2388
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    iterator_0 = node_1.pre_order()

def test_case_12():
    int_0 = 0
    str_0 = 'h'
    str_1 = 'bare_name'
    str_2 = '(final)'
    int_1 = -2839
    tuple_0 = (int_1, int_0)
    tuple_1 = (str_2, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_1, tuple_1, str_0)
    str_3 = leaf_0.get_suffix()
    leaf_1 = leaf_0.clone()

def test_case_13():
    leaf_0 = None
    int_0 = 430
    negated_pattern_0 = module_0.NegatedPattern()
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(leaf_0)
    bool_0 = negated_pattern_0.match(int_0)

def test_case_14():
    int_0 = 430
    list_0 = []
    node_pattern_0 = module_0.NodePattern(int_0, list_0)

def test_case_15():
    list_0 = []
    int_0 = 446
    str_0 = '.'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    iterator_0 = wildcard_pattern_0.generate_matches(wildcard_pattern_0)
    node_0 = module_0.Node(int_0, list_0, any_0)
    node_1 = node_0.clone()
    str_1 = 'grammar _PyParser_Grammar = {\n'
    leaf_pattern_0 = module_0.LeafPattern()
    node_2 = node_1.clone()
    wildcard_pattern_1 = module_0.WildcardPattern(str_1, int_0, int_0)
    any_1 = wildcard_pattern_1.optimize()

def test_case_16():
    str_0 = 's'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_17():
    optional_0 = None
    str_0 = 'O]qVjm;U>^`\ni8 o]\t1'
    leaf_pattern_0 = module_0.LeafPattern(optional_0, str_0)

def test_case_18():
    str_0 = 's'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    iterator_0 = wildcard_pattern_0.generate_matches(negated_pattern_0)
    int_0 = 48
    str_1 = 'ud'
    leaf_0 = module_0.Leaf(int_0, str_1)
    leaf_1 = leaf_0.clone()
    int_1 = 6
    wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_1)

def test_case_19():
    str_0 = '.q'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)

def test_case_20():
    list_0 = []
    int_0 = 423
    negated_pattern_0 = module_0.NegatedPattern()
    bool_0 = negated_pattern_0.match(int_0)
    str_0 = '.q'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    wildcard_pattern_1 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    node_0 = module_0.Node(int_0, list_0, any_0)
    node_1 = node_0.clone()
    bool_1 = negated_pattern_0.match(node_1)
    int_1 = 2954
    int_2 = -1773
    list_1 = [int_1, node_0, negated_pattern_0, int_2]
    iterator_0 = negated_pattern_0.generate_matches(list_1)
    dict_0 = {}
    bool_2 = wildcard_pattern_0.match_seq(dict_0)
    grammar_0 = module_1.Grammar()
    list_2 = [node_1, bool_0]
    node_2 = module_0.Node(int_1, list_0, bool_0, str_0, list_2)

def test_case_21():
    optional_0 = None
    str_0 = 'O]qVjm;U>^`\ni8 o]\t1'
    leaf_pattern_0 = module_0.LeafPattern(optional_0, str_0)
    int_0 = 123
    str_1 = ':AzS'
    int_1 = -1633
    tuple_0 = (int_1, int_0)
    tuple_1 = (str_1, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()
    leaf_3 = leaf_1.clone()
    leaf_4 = leaf_1.clone()
    var_0 = leaf_pattern_0.match(leaf_4, str_0)
    str_2 = 'c8l;t@\n\x0ba"LgJ\r\\S\''
    iterator_0 = leaf_1.leaves()
    wildcard_pattern_0 = module_0.WildcardPattern(str_2)

def test_case_22():
    optional_0 = None
    str_0 = 'O]qVjm;U>^`\ni8 o]\t1'
    leaf_pattern_0 = module_0.LeafPattern(optional_0, str_0)
    int_0 = 123
    str_1 = ':AzS'
    int_1 = -1633
    tuple_0 = (int_1, int_0)
    tuple_1 = (str_1, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()
    leaf_3 = leaf_2.clone()
    leaf_4 = leaf_3.clone()
    leaf_5 = leaf_4.clone()
    leaf_6 = leaf_2.clone()
    leaf_7 = leaf_6.clone()
    var_0 = leaf_pattern_0.match(leaf_7, str_0)
    str_2 = 'c8l;t@\n\x0ba"LgJ\r\\S\''
    var_1 = leaf_pattern_0.match(leaf_6)
    wildcard_pattern_0 = module_0.WildcardPattern(str_2)

def test_case_23():
    int_0 = 0
    str_0 = 'h'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.get_suffix()