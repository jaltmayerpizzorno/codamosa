# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 2732
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ',\'a@8w4nDmc=&\x0b${"G'
        leaf_pattern_0 = module_0.LeafPattern(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '.q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_pattern_0 = module_0.NodePattern(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 's'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        iterator_0 = wildcard_pattern_0.generate_matches(negated_pattern_0)
        int_0 = 48
        str_1 = 'ud'
        leaf_0 = module_0.Leaf(int_0, str_1)
        leaf_1 = leaf_0.clone()
        int_1 = -1335
        bool_0 = True
        str_2 = '08'
        str_3 = '0'
        dict_0 = {str_1: leaf_0, str_1: bool_0, str_2: str_0, str_3: leaf_1}
        bool_1 = negated_pattern_0.match_seq(int_1, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 58
        str_0 = ''
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.leaves()
        str_1 = leaf_0.__str__()
        leaf_1 = leaf_0.clone()
        list_0 = []
        none_type_0 = None
        node_0 = module_0.Node(int_0, list_0, none_type_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        iterator_0 = None
        negated_pattern_0 = module_0.NegatedPattern()
        grammar_0 = module_1.Grammar()
        int_0 = 1023
        str_0 = '!>('
        dict_0 = {str_0: iterator_0, str_0: grammar_0}
        tuple_0 = (int_0, iterator_0, dict_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -2110
        str_0 = ']x\x0c'
        leaf_0 = module_0.Leaf(int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -918
        str_0 = 'cY*e"2~\'#rV>Co]7)f'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 5
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 927
        optional_0 = None
        list_0 = []
        tuple_0 = (int_0, optional_0, list_0, int_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)'
        int_0 = -2490
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = []
        int_0 = 455
        list_1 = [int_0, int_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        str_0 = node_2.__str__()
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'BOe'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 315
        int_1 = 22
        leaf_0 = module_0.Leaf(int_1, str_0)
        list_0 = [leaf_0, leaf_0]
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 2731
        list_0 = []
        str_0 = 'mmj,w%G3P'
        set_0 = set()
        list_1 = [int_0, str_0, set_0]
        node_0 = module_0.Node(int_0, list_0, str_0, list_1)
        node_1 = node_0.clone()
        node_1.update_sibling_maps()
    except BaseException:
        pass

def test_case_18():
    try:
        list_0 = []
        int_0 = 446
        str_0 = '.q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_0, any_0)
        node_0.invalidate_sibling_maps()
        node_1 = node_0.clone()
        list_1 = [node_1, node_0, node_0]
        int_1 = 2933
        grammar_0 = module_1.Grammar()
        node_2 = module_0.Node(int_1, list_1)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 0
        str_0 = ''
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.get_suffix()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = []
        int_0 = 446
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(int_0)
        str_0 = '.q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = -120
        iterator_0 = negated_pattern_0.generate_matches(int_1)
        node_0 = module_0.Node(int_0, list_0, any_0)
        node_1 = node_0.clone()
        leaf_pattern_0 = module_0.LeafPattern()
        node_2 = node_1.clone()
        node_3 = module_0.Node(int_0, list_0)
        node_4 = node_3.clone()
        node_3.set_child(int_0, node_3)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 0
        str_0 = ''
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(int_0)
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.get_suffix()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 2388
        list_0 = []
        int_1 = 722
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        str_0 = 'PtuKyo"UYbz3X%mYR'
        node_2 = module_0.Node(int_1, list_0, node_1, str_0)
        int_2 = 1427
        node_0.insert_child(int_2, node_0)
    except BaseException:
        pass

def test_case_23():
    try:
        leaf_0 = None
        list_0 = []
        int_0 = 436
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0)
        bool_0 = negated_pattern_0.match(int_0)
        str_0 = '.q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_0, any_0)
        node_1 = node_0.clone()
        int_1 = 2941
        node_1.append_child(node_0)
        list_1 = [str_0, var_0, node_0]
        int_2 = 95
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_2, int_1, str_0)
        bool_1 = wildcard_pattern_1.match(list_1)
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        negated_pattern_0 = module_0.NegatedPattern(dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 149
        str_0 = '%[~UU]~>M:.nQw@\x0bN'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, leaf_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 109
        str_0 = 'T7+dC{eWBDbpw5Q*Q\tV'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        float_0 = 2012.31
        none_type_0 = None
        leaf_pattern_0 = module_0.LeafPattern(float_0, none_type_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'Js\t*2=-g.j\r hDx&6RY'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_28():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 651
        str_0 = ';J[+9nXZ~04%C#sRL'
        none_type_0 = None
        dict_0 = {int_0: str_0}
        tuple_0 = (int_0, str_0, none_type_0, dict_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '.q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 1289
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bool_0 = wildcard_pattern_1.match(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        leaf_0 = None
        list_0 = []
        int_0 = 430
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(int_0)
        list_1 = []
        node_pattern_0 = module_0.NodePattern(int_0, list_1)
        str_0 = '.q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = -120
        iterator_0 = negated_pattern_0.generate_matches(int_1)
        node_0 = module_0.Node(int_0, list_0, any_0)
        node_1 = node_0.clone()
        leaf_pattern_0 = module_0.LeafPattern()
        int_2 = 3093
        node_1.insert_child(int_2, node_0)
        node_1.update_sibling_maps()
        var_0 = leaf_pattern_0.match(node_0)
        leaf_1 = leaf_0.clone()
    except BaseException:
        pass

def test_case_31():
    try:
        list_0 = []
        int_0 = 430
        list_1 = [int_0, list_0]
        node_pattern_0 = module_0.NodePattern(int_0, list_1)
    except BaseException:
        pass

def test_case_32():
    try:
        leaf_0 = None
        list_0 = []
        int_0 = 446
        str_0 = '.'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_0, any_0)
        node_1 = node_0.clone()
        leaf_pattern_0 = module_0.LeafPattern()
        node_2 = node_1.clone()
        int_1 = 3093
        node_1.insert_child(int_1, node_2)
        node_1.append_child(node_1)
        var_0 = leaf_pattern_0.match(node_2)
        leaf_1 = leaf_0.clone()
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 0
        str_0 = 'hi'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        grammar_0 = module_1.Grammar()
        str_2 = None
        iterator_0 = leaf_0.post_order()
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_2, tuple_0)
        list_0 = [leaf_0, leaf_0, leaf_0]
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_34():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        iterable_0 = None
        str_0 = 'flpJ>K&Wr'
        node_pattern_0 = module_0.NodePattern(iterable_0, str_0)
    except BaseException:
        pass

def test_case_35():
    try:
        float_0 = -3659.05835
        str_0 = '*>)AiPm=Q%, |:l'
        str_1 = 'c'
        str_2 = ''
        str_3 = 'JaSL'
        dict_0 = {str_0: float_0, str_1: float_0, str_2: str_0, str_3: float_0}
        int_0 = 4150
        int_1 = -26
        wildcard_pattern_0 = module_0.WildcardPattern(dict_0, int_0, int_1)
    except BaseException:
        pass

def test_case_36():
    try:
        leaf_0 = None
        list_0 = []
        int_0 = 423
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0)
        bool_0 = negated_pattern_0.match(int_0)
        str_0 = 'q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_0, any_0)
        int_1 = node_0.depth()
        optional_0 = node_0.remove()
        node_0.invalidate_sibling_maps()
        iterator_0 = wildcard_pattern_0.generate_matches(wildcard_pattern_0)
        dict_0 = {}
        bool_1 = wildcard_pattern_0.match_seq(dict_0)
        grammar_0 = module_1.Grammar()
        bool_2 = wildcard_pattern_0.match(bool_1)
    except BaseException:
        pass

def test_case_37():
    try:
        list_0 = []
        int_0 = 423
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        bool_0 = negated_pattern_0.match(int_0)
        str_0 = 'q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        node_0 = module_0.Node(int_0, list_0, negated_pattern_0)
        node_1 = node_0.clone()
        int_1 = node_1.depth()
        int_2 = -3408
        iterator_0 = wildcard_pattern_0.generate_matches(wildcard_pattern_0)
        dict_0 = {}
        bool_1 = wildcard_pattern_0.match_seq(dict_0)
        grammar_0 = module_1.Grammar()
        tuple_0 = None
        tuple_1 = (int_2, str_0, tuple_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_1)
    except BaseException:
        pass