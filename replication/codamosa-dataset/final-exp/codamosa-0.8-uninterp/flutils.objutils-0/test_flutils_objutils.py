# Automatically generated by Pynguin.
import flutils.objutils as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = None
    bool_0 = module_0.has_any_attrs(str_0)

def test_case_2():
    list_0 = []
    bool_0 = module_0.is_subclass_of_any(list_0)
    int_0 = 317
    str_0 = 'ms'
    list_1 = [str_0, str_0]
    bool_1 = module_0.has_any_attrs(int_0, *list_1)

def test_case_3():
    bytes_0 = b'\xd2\xc0\xe3\x12\x01\xdf\xe3\x9a\xab\xdc\x90t\xc2'
    bool_0 = module_0.has_any_callables(bytes_0)

def test_case_4():
    list_0 = None
    bool_0 = module_0.has_callables(list_0)

def test_case_5():
    complex_0 = None
    str_0 = 'r\t.R_"->'
    str_1 = "Run the given command and return the result.\n\n        Args:\n             cmd (:obj:`Sequence <typing.Sequence>`): The command\n             **kwargs: Any default_kwargs to pass to :obj:`subprocess.run`.\n                These default_kwargs will override any ``default_kwargs``\n                set in the constructor.\n\n        Raises:\n            FileNotFoundError: If the given ``cmd`` cannot be found.\n            ChildProcessError: If ``raise_error=True`` was set in this\n                class' constructor; and, the process (from running the\n                given ``cmd``) returns a non-zero value.\n            ValueError: If the given ``**kwargs`` has invalid arguments.\n\n        Example:\n\n            >>> from flutils.cmdutils import RunCmd\n            >>> from subprocess import PIPE\n            >>> import os\n            >>> run_command = RunCmd(stdout=PIPE, stderr=PIPE)\n            >>> result = run_command('ls -flap %s' % os.getcwd())\n            >>> result.return_code\n            0\n            >>> result.stdout\n            ...\n            >>> result = run_command('ls -flap %s' % os.path.expanduser('~'))\n        "
    list_0 = [str_0, str_1]
    bool_0 = module_0.has_callables(complex_0, *list_0)
    bool_1 = module_0.has_any_attrs(complex_0)

def test_case_6():
    str_0 = ' 0\tMLDv,"Gju'
    bool_0 = module_0.is_list_like(str_0)

def test_case_7():
    list_0 = []
    bool_0 = module_0.is_list_like(list_0)

def test_case_8():
    str_0 = "og0/F.|1jk'Ten3cY("
    bool_0 = module_0.is_subclass_of_any(str_0)

def test_case_9():
    int_0 = 1
    int_1 = 2
    var_0 = dict(a=int_0, b=int_1)
    str_0 = 'values'
    str_1 = 'keys'
    str_2 = (str_0, str_1)
    bool_0 = module_0.has_any_callables(var_0, *str_2)
    str_3 = 'foo'
    str_4 = 'bar'
    str_5 = 'zip'
    str_6 = (str_3, str_4, str_5)
    bool_1 = module_0.has_any_callables(var_0, *str_6)

def test_case_10():
    str_0 = 'EyX#AG?0'
    str_1 = '3v%zD\nk'
    bool_0 = module_0.has_attrs(str_1)
    dict_0 = {str_0: str_0}
    bool_1 = module_0.is_list_like(str_0)
    str_2 = '__doc__'
    list_0 = [str_2, str_2, str_2]
    bool_2 = module_0.has_any_callables(dict_0, *list_0)
    str_3 = 'j'
    bool_3 = module_0.has_attrs(str_3, *list_0)
    bool_4 = module_0.has_any_attrs(list_0)
    bool_5 = module_0.is_subclass_of_any(list_0)

def test_case_11():
    int_0 = 1
    int_1 = 2
    var_0 = dict(a=int_0, b=int_1)
    str_0 = 'get'
    str_1 = 'items'
    str_2 = 'keys'
    str_3 = 'values'
    str_4 = [str_0, str_1, str_2, str_3]
    bool_0 = module_0.has_callables(var_0, *str_4)
    str_5 = 'foo'
    str_6 = [str_0, str_1, str_2, str_5]
    bool_1 = module_0.has_callables(var_0, *str_6)

def test_case_12():
    str_0 = 'EyX#AG?0'
    str_1 = '3v%zD\nk'
    bool_0 = module_0.has_attrs(str_1)
    bool_1 = module_0.has_any_callables(str_1)
    dict_0 = {str_0: str_0}
    bool_2 = module_0.is_list_like(str_0)
    str_2 = '__doc__'
    list_0 = [str_2, str_2, str_2]
    bool_3 = module_0.has_any_callables(dict_0, *list_0)
    str_3 = 'j'
    bool_4 = module_0.has_attrs(str_3, *list_0)
    list_1 = [str_0, str_3]
    bool_5 = module_0.has_any_attrs(list_1)
    bool_6 = module_0.is_subclass_of_any(list_0)
    bool_7 = module_0.has_callables(bool_5, *list_0)