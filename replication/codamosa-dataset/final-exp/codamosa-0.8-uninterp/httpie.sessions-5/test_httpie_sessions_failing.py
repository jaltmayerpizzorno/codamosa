# Automatically generated by Pynguin.
import pathlib as module_0
import httpie.sessions as module_1
import httpie.cli.dicts as module_2

def test_case_0():
    try:
        path_0 = module_0.Path()
        str_0 = '{[Ca[/zv5Q'
        str_1 = '%s; charset=%s'
        session_0 = module_1.get_httpie_session(path_0, str_0, str_0, str_1)
        session_1 = module_1.Session(path_0)
        str_2 = ''
        list_0 = []
        str_3 = 'jYmySqU3<>'
        dict_0 = {str_3: str_2}
        path_1 = module_0.Path(*list_0, **dict_0)
        str_4 = 'XZ:r~H'
        str_5 = 'qxv&JT'
        session_2 = module_1.get_httpie_session(path_1, str_4, str_2, str_5)
        session_3 = module_1.Session(str_2)
        bytes_0 = b'e\t\xfb\xb6\xbc\xda \x1b\xefM\x9b\xee\xd054\x0c\x03\x983'
        str_6 = 'Parse credentials from `s`.\n\n        ("username" or "username:password").\n\n        '
        dict_1 = {str_2: bytes_0, str_2: session_3, str_6: str_6}
        request_headers_dict_0 = module_2.RequestHeadersDict(**dict_1)
        var_0 = session_3.update_headers(request_headers_dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'content-type'
        str_1 = 'application/json'
        str_2 = (str_0, str_1)
        str_3 = 'content-length'
        str_4 = '10'
        str_5 = (str_3, str_4)
        str_6 = 'user-agent'
        str_7 = 'httpie/0.9.9'
        str_8 = (str_6, str_7)
        str_9 = 'accept-encoding'
        str_10 = 'gzip, deflate, compress'
        str_11 = (str_9, str_10)
        str_12 = 'accept'
        str_13 = '*/*'
        str_14 = (str_12, str_13)
        str_15 = 'host'
        str_16 = 'httpbin.org'
        str_17 = (str_15, str_16)
        str_18 = 'Cookie'
        str_19 = 'foo=bar; bar=baz'
        str_20 = (str_18, str_19)
        str_21 = 'X-Auth-Token'
        str_22 = '123'
        str_23 = (str_21, str_22)
        str_24 = 'X-Auth-Username'
        str_25 = '456'
        str_26 = (str_24, str_25)
        str_27 = [str_2, str_5, str_8, str_11, str_14, str_17, str_20, str_23, str_26]
        request_headers_dict_0 = module_2.RequestHeadersDict(str_27)
        str_28 = 'dummy_path'
        session_0 = module_1.Session(str_28)
        var_0 = session_0.update_headers(request_headers_dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        session_0 = module_1.Session(str_0)
        str_1 = 'Cookie'
        str_2 = 'A=A; B=B'
        str_3 = {str_1: str_2}
        var_0 = session_0.update_headers(str_3)
    except BaseException:
        pass