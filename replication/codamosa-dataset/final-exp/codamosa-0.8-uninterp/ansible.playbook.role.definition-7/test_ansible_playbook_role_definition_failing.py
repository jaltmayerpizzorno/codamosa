# Automatically generated by Pynguin.
import ansible.playbook.role.definition as module_0
import ansible.parsing.yaml.objects as module_1

def test_case_0():
    try:
        bool_0 = True
        set_0 = set()
        list_0 = [set_0]
        role_definition_0 = module_0.RoleDefinition(set_0, list_0)
        var_0 = role_definition_0.load(bool_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        role_definition_0 = module_0.RoleDefinition()
        var_0 = role_definition_0.preprocess_data(role_definition_0)
    except BaseException:
        pass

def test_case_2():
    try:
        role_definition_0 = module_0.RoleDefinition()
        int_0 = 489
        var_0 = role_definition_0.preprocess_data(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = {}
        role_definition_0 = module_0.RoleDefinition()
        var_1 = role_definition_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_4():
    try:
        role_definition_0 = module_0.RoleDefinition()
        var_0 = role_definition_0.get_role_params()
        var_1 = role_definition_0.preprocess_data(role_definition_0)
    except BaseException:
        pass

def test_case_5():
    try:
        role_definition_0 = module_0.RoleDefinition()
        var_0 = role_definition_0.get_role_path()
        var_1 = role_definition_0.preprocess_data(role_definition_0)
    except BaseException:
        pass

def test_case_6():
    try:
        role_definition_0 = module_0.RoleDefinition()
        var_0 = role_definition_0.get_name()
        dict_0 = {}
        var_1 = role_definition_0.get_name(dict_0)
        float_0 = -2783.174
        var_2 = role_definition_0.preprocess_data(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '%-}}w:*v'
        bool_0 = False
        role_definition_0 = module_0.RoleDefinition(bool_0)
        str_1 = 'AI1lwQ$bFY"?]'
        str_2 = '\n    Optionally constructs an object (AnsibleBaseYAMLObject) to encapsulate the\n    file name/position where a YAML exception occurred, and raises an AnsibleParserError\n    to display the syntax exception information.\n    '
        str_3 = 'H?Spv7*fX$ EIQ{6'
        tuple_0 = (str_0, str_3)
        role_definition_1 = module_0.RoleDefinition(str_2, tuple_0, tuple_0)
        var_0 = role_definition_1.preprocess_data(str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'role'
        str_1 = 'with_items'
        str_2 = 'ignore_errors'
        str_3 = 'c'
        bool_0 = True
        var_0 = {str_0: str_1, str_1: str_3, str_2: bool_0}
        role_definition_0 = module_0.RoleDefinition()
        var_1 = role_definition_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        role_definition_0 = module_0.RoleDefinition()
        int_0 = 3456
        var_0 = dict(name=int_0)
        var_1 = role_definition_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'role'
        str_1 = 'fv'
        str_2 = {str_1: str_0, str_0: str_1, str_0: str_1}
        str_3 = 'name'
        int_0 = 10240
        list_0 = [str_2, str_2, str_1, str_3]
        role_definition_0 = module_0.RoleDefinition(int_0, list_0, str_2)
        var_0 = role_definition_0.get_name()
        var_1 = role_definition_0.preprocess_data(str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_base_y_a_m_l_object_0 = module_1.AnsibleBaseYAMLObject()
        role_definition_0 = module_0.RoleDefinition()
        var_0 = role_definition_0.preprocess_data(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass