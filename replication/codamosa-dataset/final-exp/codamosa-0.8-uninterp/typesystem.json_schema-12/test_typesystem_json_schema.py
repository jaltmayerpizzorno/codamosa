# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3

def test_case_0():
    pass

def test_case_1():
    str_0 = '}4=b&'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    field_0 = module_0.from_json_schema(dict_0)

def test_case_2():
    bool_0 = True
    field_0 = module_0.from_json_schema(bool_0)
    schema_definitions_0 = module_1.SchemaDefinitions()

def test_case_3():
    dict_0 = {}
    schema_definitions_0 = None
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)

def test_case_4():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'string'
    str_3 = {str_2: str_2}
    str_4 = {str_2: str_2}
    str_5 = {str_0: str_3, str_1: str_4}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.if_then_else_from_json_schema(str_5, schema_definitions_0)

def test_case_5():
    bytes_0 = b'\xf8\x12v\xc0d\xc1\xb5\x88'
    const_0 = module_2.Const(bytes_0)
    var_0 = module_0.to_json_schema(const_0)

def test_case_6():
    schema_definitions_0 = module_1.SchemaDefinitions()
    dict_0 = {}
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_7():
    int_0 = 10
    float_0 = module_2.Float()
    var_0 = module_0.to_json_schema(float_0)

def test_case_8():
    str_0 = 'VzLLjq>EBb1x'
    dict_0 = {str_0: str_0, str_0: str_0}
    field_0 = module_0.from_json_schema(dict_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_9():
    str_0 = 'allOf'
    str_1 = {str_0: str_0}
    str_2 = 'xum'
    int_0 = 1139
    int_1 = {str_2: int_0}
    var_0 = [str_1, int_1]
    var_1 = {str_0: var_0, str_2: int_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.all_of_from_json_schema(var_1, schema_definitions_0)
    dict_0 = {}
    field_1 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    var_2 = module_0.to_json_schema(field_1)

def test_case_10():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'type'
    str_3 = 'string'
    str_4 = {str_2: str_3}
    str_5 = {str_2: str_3}
    str_6 = {str_0: str_4, str_1: str_5}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.if_then_else_from_json_schema(str_6, schema_definitions_0)

def test_case_11():
    var_0 = {}
    str_0 = 'string'
    bool_0 = True
    var_1 = None
    field_0 = module_0.from_json_schema_type(var_0, str_0, bool_0, var_1)
    var_2 = {}
    str_1 = 'integer'
    field_1 = module_0.from_json_schema_type(var_2, str_1, bool_0, var_1)
    var_3 = {}
    str_2 = 'number'
    field_2 = module_0.from_json_schema_type(var_3, str_2, bool_0, var_1)
    var_4 = {}
    str_3 = 'boolean'
    field_3 = module_0.from_json_schema_type(var_4, str_3, bool_0, var_1)
    var_5 = {}
    str_4 = 'array'
    field_4 = module_0.from_json_schema_type(var_5, str_4, bool_0, var_1)
    var_6 = {}
    str_5 = 'object'
    field_5 = module_0.from_json_schema_type(var_6, str_5, bool_0, var_1)

def test_case_12():
    str_0 = 'enum'
    str_1 = 'one'
    str_2 = 'three'
    str_3 = [str_1, str_2, str_2]
    str_4 = {str_0: str_3}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.enum_from_json_schema(str_4, schema_definitions_0)

def test_case_13():
    str_0 = 'oneOf'
    str_1 = 'type'
    str_2 = 'minLength'
    str_3 = 'string'
    int_0 = 1
    var_0 = {str_1: str_3, str_2: int_0}
    str_4 = 'number'
    str_5 = {str_1: str_4}
    var_1 = [var_0, str_5]
    var_2 = {str_0: var_1}
    var_3 = None
    field_0 = module_0.one_of_from_json_schema(var_2, var_3)

def test_case_14():
    string_0 = module_2.String()
    var_0 = module_0.to_json_schema(string_0)
    integer_0 = module_2.Integer()
    var_1 = module_0.to_json_schema(integer_0)
    string_1 = module_2.String()
    integer_1 = module_2.Integer()
    var_2 = [string_1, integer_1]
    all_of_0 = module_3.AllOf(var_2)
    var_3 = module_0.to_json_schema(all_of_0)

def test_case_15():
    str_0 = 'anyOf'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    str_3 = 'integer'
    str_4 = {str_0: str_3}
    str_5 = [str_2, str_4]
    str_6 = {str_0: str_5}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.any_of_from_json_schema(str_6, schema_definitions_0)

def test_case_16():
    str_0 = 'not'
    str_1 = 'e1al'
    str_2 = 'type'
    str_3 = 'array'
    str_4 = {str_2: str_3}
    int_0 = 5
    var_0 = {str_0: str_4, str_1: int_0}
    var_1 = None
    field_0 = module_0.not_from_json_schema(var_0, var_1)
    var_2 = module_0.to_json_schema(field_0)

def test_case_17():
    int_0 = 10
    string_0 = module_2.String(max_length=int_0)
    var_0 = module_0.to_json_schema(string_0)
    integer_0 = module_2.Integer()
    var_1 = module_0.to_json_schema(integer_0)
    float_0 = module_2.Float()
    var_2 = module_0.to_json_schema(float_0)

def test_case_18():
    string_0 = module_2.String()
    var_0 = module_0.to_json_schema(string_0)
    integer_0 = module_2.Integer()
    var_1 = module_0.to_json_schema(integer_0)
    boolean_0 = module_2.Boolean()
    var_2 = module_0.to_json_schema(boolean_0)
    any_0 = module_2.Any()
    var_3 = module_0.to_json_schema(any_0)
    never_match_0 = module_3.NeverMatch()
    bool_0 = True
    string_1 = module_2.String()
    int_0 = 3
    integer_1 = module_2.Integer(multiple_of=int_0)
    var_4 = module_0.to_json_schema(integer_1)

def test_case_19():
    str_0 = 'if'
    str_1 = 'This field is required.'
    string_0 = None
    dict_0 = {str_0: string_0, str_1: str_1, str_0: str_1}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    str_2 = 'type'
    str_3 = 'string'
    str_4 = {str_2: str_3}
    str_5 = {str_2: str_3}
    str_6 = {str_0: str_4, str_1: str_5}
    schema_definitions_1 = module_1.SchemaDefinitions()
    field_1 = module_0.if_then_else_from_json_schema(str_6, schema_definitions_1)

def test_case_20():
    str_0 = 'not'
    str_1 = "]xG'{alPI\\l:\\M|A1Dn%"
    str_2 = 'array'
    str_3 = {str_0: str_2}
    int_0 = 5
    var_0 = {str_0: str_3, str_1: int_0}
    var_1 = None
    field_0 = module_0.not_from_json_schema(var_0, var_1)
    schema_definitions_0 = module_1.SchemaDefinitions()
    var_2 = module_0.to_json_schema(field_0)

def test_case_21():
    str_0 = '$ref'
    str_1 = 'type'
    str_2 = 'enum'
    str_3 = 'definitions'
    str_4 = '#/definitions/Pet'
    str_5 = 'object'
    str_6 = 'name'
    str_7 = 'Tiddles'
    str_8 = 'Cat'
    str_9 = {str_6: str_7, str_1: str_8}
    str_10 = 'Fido'
    str_11 = 'Dog'
    str_12 = {str_6: str_10, str_1: str_11}
    str_13 = [str_9, str_12]
    str_14 = 'Pet'
    str_15 = 'properties'
    str_16 = 'string'
    str_17 = {str_1: str_16}
    str_18 = [str_11, str_8]
    str_19 = {str_2: str_18}
    str_20 = {str_6: str_17, str_1: str_19}
    str_21 = {str_1: str_5, str_15: str_20}
    str_22 = {str_14: str_21}
    str_23 = {str_0: str_4, str_1: str_5, str_2: str_13, str_3: str_22}
    field_0 = module_0.from_json_schema(str_23)

def test_case_22():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'type'
    str_4 = 'properties'
    str_5 = 'required'
    str_6 = 'additionalProperties'
    str_7 = 'object'
    str_8 = 'owner'
    str_9 = 'minLength'
    str_10 = 'maxLength'
    str_11 = 'string'
    int_0 = 10
    int_1 = 20
    var_0 = {str_3: str_11, str_9: int_0, str_10: int_1}
    var_1 = {str_8: var_0}
    str_12 = [str_8]
    bool_0 = False
    var_2 = {str_3: str_7, str_4: var_1, str_5: str_12, str_6: bool_0}
    var_3 = {str_3: str_11, str_9: int_0, str_10: int_1}
    int_2 = 30
    var_4 = {str_3: str_11, str_9: int_0, str_10: int_2}
    var_5 = {str_0: var_2, str_1: var_3, str_2: var_4}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.from_json_schema(var_5, schema_definitions_0)

def test_case_23():
    str_0 = 'type'
    str_1 = 'properties'
    str_2 = 'object'
    str_3 = 'format'
    str_4 = 'string'
    str_5 = {str_0: str_4, str_3: str_0}
    str_6 = {str_4: str_5}
    str_7 = {str_0: str_2, str_1: str_6}
    field_0 = module_0.from_json_schema(str_7)
    var_0 = module_0.to_json_schema(field_0)

def test_case_24():
    any_0 = module_2.Any()
    var_0 = module_0.to_json_schema(any_0)
    never_match_0 = module_3.NeverMatch()
    var_1 = module_0.to_json_schema(never_match_0)
    integer_0 = module_2.Integer()
    var_2 = module_0.to_json_schema(integer_0)
    string_0 = module_2.String()
    var_3 = module_0.to_json_schema(string_0)
    int_0 = 1
    string_1 = module_2.String(min_length=int_0)
    var_4 = module_0.to_json_schema(string_1)
    str_0 = 'ipv4'
    string_2 = module_2.String(format=str_0)
    var_5 = module_0.to_json_schema(string_2)
    string_3 = module_2.String(format=str_0)
    string_4 = module_2.String()
    array_0 = module_2.Array(string_4)
    var_6 = module_0.to_json_schema(array_0)
    string_5 = module_2.String()

def test_case_25():
    var_0 = {}
    var_1 = {}
    field_0 = module_0.type_from_json_schema(var_0, var_1)
    str_0 = 'type'
    str_1 = 'null'
    str_2 = {str_0: str_1}
    var_2 = {}
    field_1 = module_0.type_from_json_schema(str_2, var_2)
    str_3 = 'integer'
    str_4 = {str_0: str_3}
    var_3 = {}
    field_2 = module_0.type_from_json_schema(str_4, var_3)
    str_5 = 'number'
    str_6 = {str_0: str_5}
    var_4 = {}
    field_3 = module_0.type_from_json_schema(str_6, var_4)
    str_7 = 'boolean'
    str_8 = {str_0: str_7}
    var_5 = {}
    field_4 = module_0.type_from_json_schema(str_8, var_5)
    str_9 = 'string'
    str_10 = {str_0: str_9}
    var_6 = {}
    field_5 = module_0.type_from_json_schema(str_10, var_6)