# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    try:
        str_0 = 'headers'
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.__delitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        dict_0 = {}
        blueprint_group_0 = module_0.BlueprintGroup()
        int_0 = blueprint_group_0.__len__()
        blueprint_group_1 = module_0.BlueprintGroup()
        var_0 = blueprint_group_1.middleware(**dict_0)
        blueprint_group_2 = module_0.BlueprintGroup(list_0)
        int_1 = blueprint_group_2.__len__()
        var_1 = blueprint_group_2.__getitem__(blueprint_group_2)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1934
        str_0 = 'REAL_IP_HEADER'
        blueprint_0 = module_1.Blueprint(str_0)
        str_1 = '\\aT~77#^~GBD}3/u-p'
        blueprint_group_0 = module_0.BlueprintGroup(str_1)
        blueprint_group_0.insert(int_0, blueprint_0)
        blueprint_group_1 = module_0.BlueprintGroup()
        var_0 = blueprint_group_1.middleware()
        list_0 = None
        blueprint_group_0.__setitem__(list_0, blueprint_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Z(+y\r\\Eh'
        bool_0 = False
        blueprint_0 = module_1.Blueprint(str_0, str_0, bool_0)
        bool_1 = False
        list_0 = None
        int_0 = 323
        tuple_0 = (bool_1, list_0, int_0)
        str_1 = 'B'
        int_1 = -3800
        blueprint_1 = module_1.Blueprint(str_1, str_1, int_1)
        blueprint_group_0 = module_0.BlueprintGroup(tuple_0, blueprint_1)
        blueprint_group_0.append(blueprint_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        int_0 = -2564
        str_1 = 'Open or atomically replace existing socket with zero downtime.'
        int_1 = 1702
        str_2 = '9^Y=/96uJ;q~%6#aTc'
        blueprint_0 = module_1.Blueprint(str_1, str_1, int_1, str_2)
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.insert(int_0, blueprint_0)
        int_2 = -622
        bool_0 = True
        blueprint_1 = module_1.Blueprint(str_0, str_0, int_2, bool_0)
        list_0 = [str_1, str_0, str_1]
        var_0 = blueprint_1.exception(*list_0)
        int_3 = -2841
        blueprint_group_0.insert(int_3, blueprint_1)
        blueprint_group_1 = module_0.BlueprintGroup()
        blueprint_group_1.append(blueprint_1)
        dict_0 = {}
        blueprint_group_1.__delitem__(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "(cBzO!_&e<.kp'\n\\leX"
        blueprint_0 = module_1.Blueprint(str_0, str_0)
        blueprint_group_0 = module_0.BlueprintGroup()
        int_0 = 511
        blueprint_group_0.insert(int_0, blueprint_0)
        blueprint_1 = module_1.Blueprint(str_0)
        bytes_0 = b'\xeaU\xdd2C\x05\x1e\xbd\x14s]i\xe2\xf6\x14\xfd3'
        blueprint_group_0.__delitem__(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 498
        list_0 = [int_0, int_0]
        blueprint_group_0 = module_0.BlueprintGroup()
        var_0 = blueprint_group_0.middleware(*list_0)
        str_0 = '<__file_uri__:'
        int_1 = blueprint_group_0.__len__()
        blueprint_0 = module_1.Blueprint(str_0, str_0, int_0)
        blueprint_group_0.__delitem__(blueprint_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -1915
        str_0 = 'REAL_IP_HEADER'
        blueprint_0 = module_1.Blueprint(str_0)
        blueprint_group_0 = module_0.BlueprintGroup(str_0)
        blueprint_group_0.insert(int_0, blueprint_0)
        var_0 = blueprint_group_0.middleware()
        int_1 = blueprint_group_0.__len__()
        tuple_0 = ()
        blueprint_group_1 = module_0.BlueprintGroup(tuple_0)
        int_2 = blueprint_group_1.__len__()
        float_0 = 15.0
        list_0 = [var_0, float_0, float_0, int_2]
        var_1 = blueprint_group_0.middleware(*list_0)
    except BaseException:
        pass