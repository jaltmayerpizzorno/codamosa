# Automatically generated by Pynguin.
import flutils.namedtupleutils as module_0
import collections.abc as module_1
import types as module_2

def test_case_0():
    try:
        tuple_0 = None
        var_0 = module_0.to_namedtuple(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\x0bwPouMEpv/]J[9r'
        var_0 = module_0.to_namedtuple(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "*o]+&'y`eAm"
        tuple_0 = (str_0,)
        var_0 = module_0.to_namedtuple(tuple_0)
        mapping_0 = module_1.Mapping()
    except BaseException:
        pass

def test_case_3():
    try:
        simple_namespace_0 = module_2.SimpleNamespace()
        var_0 = module_0.to_namedtuple(simple_namespace_0)
        bytes_0 = b'\xfby\x8b-*O\x84\xeb'
        var_1 = module_0.to_namedtuple(simple_namespace_0)
        simple_namespace_1 = module_2.SimpleNamespace()
        var_2 = module_0.to_namedtuple(simple_namespace_1)
        var_3 = module_0.to_namedtuple(simple_namespace_0)
        set_0 = {bytes_0, bytes_0, bytes_0}
        var_4 = module_0.to_namedtuple(simple_namespace_1)
        var_5 = module_0.to_namedtuple(simple_namespace_1)
        bytes_1 = b'\xec\xb4\x8a\xadw@ 0\x10e\xac\x85\x0ee\rR\n\xc6\xbd'
        var_6 = module_0.to_namedtuple(simple_namespace_1)
        dict_0 = {bytes_0: bytes_1, bytes_0: bytes_0}
        tuple_0 = (set_0, set_0, bytes_1, dict_0)
        var_7 = module_0.to_namedtuple(simple_namespace_1)
        var_8 = module_0.to_namedtuple(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = None
        dict_0 = {}
        simple_namespace_0 = module_2.SimpleNamespace(**dict_0)
        var_0 = module_0.to_namedtuple(simple_namespace_0)
        list_0 = [bool_0, var_0]
        var_1 = module_0.to_namedtuple(list_0)
        var_2 = module_0.to_namedtuple(simple_namespace_0)
        str_0 = 'g/7z({gxSWd5\rf'
        str_1 = '\taz'
        dict_1 = {str_1: str_1, str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_1}
        simple_namespace_1 = module_2.SimpleNamespace(**dict_1)
        int_0 = 1486
        tuple_0 = (simple_namespace_1, int_0)
        var_3 = module_0.to_namedtuple(list_0)
        var_4 = module_0.to_namedtuple(simple_namespace_1)
        var_5 = module_0.to_namedtuple(tuple_0)
        var_6 = module_0.to_namedtuple(tuple_0)
        mapping_0 = module_1.Mapping()
    except BaseException:
        pass