# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1
import builtins as module_2
import collections.abc as module_3

def test_case_0():
    try:
        str_0 = '"9Xk>I=Z:>G26d'
        str_1 = module_0.code(str_0)
        str_2 = '__'
        arguments_0 = module_1.arguments()
        optional_0 = None
        bool_0 = None
        bool_1 = True
        dict_0 = {}
        parser_0 = module_0.Parser(bool_1, dict_0, dict_0)
        parser_0.func_api(str_0, str_2, arguments_0, optional_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'float'
        bool_0 = module_0.is_public_family(str_0)
        dict_0 = None
        str_1 = module_0.esc_underscore(str_0)
        str_2 = None
        parser_0 = module_0.Parser(bool_0, dict_0)
        bool_1 = parser_0.is_public(str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = 'l'
        list_0 = [str_0]
        constant_0 = module_1.Constant(*list_0)
        str_1 = 'Rm4K).s'
        dict_0 = {str_0: list_0, str_1: constant_0, str_0: str_0, str_1: str_1, str_0: constant_0}
        constant_1 = module_1.Constant(*list_0, **dict_0)
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        expr_0 = module_1.expr()
        str_2 = module_0.const_type(expr_0)
        resolver_0 = module_0.Resolver(str_2, dict_1)
        a_s_t_0 = resolver_0.visit_Constant(constant_1)
        str_3 = 'G-@WFlkEXUQzo|\x0bdWA'
        str_4 = '?'
        dict_2 = {str_1: str_3, str_1: str_1, str_4: str_4}
        parser_0 = module_0.Parser(bool_0, dict_2)
        bool_1 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        constant_0 = module_1.Constant()
        str_0 = '^3'
        list_0 = [str_0, constant_0]
        assign_0 = module_1.Assign(*list_0)
        int_0 = 527
        int_1 = 4
        dict_0 = {str_0: int_1, str_0: int_1, str_0: int_1, str_0: int_0}
        str_1 = None
        str_2 = None
        dict_1 = {str_0: str_0, str_1: str_2}
        parser_0 = module_0.Parser(int_0, dict_0, dict_1, dict_1)
        parser_0.globals(str_0, assign_0)
        str_3 = ''
        resolver_0 = module_0.Resolver(str_3, dict_1)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_4():
    try:
        expr_0 = module_1.expr()
        str_0 = module_0.const_type(expr_0)
        bool_0 = module_0.is_public_family(str_0)
        attribute_0 = None
        str_1 = "tUN}I'=Y~cW4q!p/B"
        str_2 = '__'
        str_3 = '-kZ)3*l\x0cqf\\tUX !5{Fk'
        dict_0 = {str_2: str_3}
        resolver_0 = module_0.Resolver(str_1, dict_0)
        a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 93
        bool_0 = True
        parser_0 = module_0.Parser(int_0, bool_0)
        dict_0 = {}
        list_0 = module_2.list(**dict_0)
        str_0 = ''
        parser_0.parse(str_0, str_0)
        str_1 = parser_0.compile()
        str_2 = '1E ?a'
        bool_1 = parser_0.is_public(str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        name_0 = module_1.Name()
        str_0 = ')'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [str_0, str_0, str_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        bool_0 = False
        parser_0 = module_0.Parser(bool_0, dict_0)
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '4cH+BPO'
        function_def_0 = None
        str_1 = 'b41rP/^"X3?+[w*#hOj'
        int_0 = -1032
        str_2 = 'QuT$[<l9\\)4W'
        int_1 = -732
        str_3 = ".)MzC[*gx':I/e`-1k'h"
        dict_0 = {str_1: int_0, str_1: int_0, str_2: int_1, str_3: int_0}
        str_4 = '__'
        str_5 = 'D3s .Q}n#TIlXmP{lxfQ'
        set_0 = {str_5}
        str_6 = None
        dict_1 = {str_4: set_0, str_5: set_0, str_6: set_0}
        str_7 = None
        str_8 = 'WO4\r'
        dict_2 = {str_7: str_8, str_4: str_4, str_4: str_1, str_6: str_6}
        parser_0 = module_0.Parser(dict_0, dict_1, dict_2)
        parser_0.api(str_0, function_def_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '$PVZ-"7eDn_9`Z\\'
        str_1 = 'M%%jo\t[/kkyn;ctJq'
        str_2 = '=~5+`5/+}\r\x0bs4\ra\x0c.zO'
        list_0 = [str_1, str_1, str_2, str_0]
        str_3 = 'ov{lB\\2\x0cmXHor'
        int_0 = -657
        int_1 = 1622
        dict_0 = {str_3: int_0, str_0: int_0, str_2: int_0, str_0: int_1}
        list_1 = [list_0, str_1, dict_0]
        str_4 = '^L8\nYX-p+n3^7\t'
        dict_1 = {str_4: dict_0}
        async_function_def_0 = module_1.AsyncFunctionDef(*list_1, **dict_1)
        int_2 = -4741
        bool_0 = True
        str_5 = 'QY'
        str_6 = None
        str_7 = "='d\t#4.IVu\x0cV3"
        set_0 = {str_6, str_5, str_6, str_7}
        str_8 = 'UhKSKrY'
        dict_2 = {str_5: set_0, str_5: set_0, str_5: set_0, str_8: set_0}
        parser_0 = module_0.Parser(int_2, bool_0, dict_2)
        parser_0.api(str_0, async_function_def_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        str_1 = None
        dict_0 = {str_1: str_1}
        parser_0 = module_0.Parser(dict_0, dict_0)
        bool_0 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '-.a\\'
        bool_0 = module_0.is_magic(str_0)
        str_1 = module_0.code(str_0)
        str_2 = '#>>X`yN<f7,,'
        int_0 = 0
        async_function_def_0 = module_1.AsyncFunctionDef()
        str_3 = 'VC%\x0brl'
        str_4 = 'H]ndiD&"\'dG?M}'
        int_1 = -2411
        dict_0 = {str_4: int_1}
        str_5 = 'g'
        str_6 = ',=#b\\3KJ'
        dict_1 = {str_5: str_6, str_5: str_2}
        parser_0 = module_0.Parser(int_0, bool_0, dict_0, dict_1)
        parser_0.api(str_0, async_function_def_0, prefix=str_3)
    except BaseException:
        pass

def test_case_11():
    try:
        iterable_0 = None
        str_0 = module_0.table(items=iterable_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'ibYj|'
        str_1 = '{,Y-jsXv='
        dict_0 = {str_1: str_0}
        subscript_0 = module_1.Subscript(**dict_0)
        str_2 = 'Z@5\x0c)XLM}n'
        dict_1 = {}
        resolver_0 = module_0.Resolver(str_2, dict_1)
        list_0 = [resolver_0]
        import_0 = module_1.Import(*list_0)
        bool_0 = False
        str_3 = 'gW'
        int_0 = -2637
        dict_2 = {str_3: int_0}
        parser_0 = module_0.Parser(bool_0, dict_2, dict_1)
        parser_0.imports(str_1, import_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '^'
        list_0 = [str_0, str_0, str_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        bool_0 = True
        int_0 = 59
        str_1 = None
        str_2 = '\n\t/7md.s7+qn%jr4H'
        str_3 = '@x\x0b`+&[h**]"1_S\'A'
        int_1 = None
        dict_0 = {str_1: int_0, str_2: int_0, str_3: int_1}
        str_4 = '!^OZs'
        str_5 = 'O>H8 >R?lj['
        str_6 = '0Q'
        dict_1 = {str_4: str_5, str_6: str_6}
        parser_0 = module_0.Parser(bool_0, int_0, dict_0, dict_1)
        parser_0.api(str_0, function_def_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'N~.\t'
        str_1 = "_5#b;|*NLI),_k\n'"
        expr_0 = module_1.expr()
        list_0 = [expr_0]
        str_2 = 'Mb\r'
        str_3 = '2\\8VK90 3O+*JD.(Z-'
        str_4 = module_0.doctest(str_3)
        str_5 = 'v+PZdA?$j'
        str_6 = "V}7ocl'C$c&\\Yt"
        str_7 = '<HY7  El!ixTyB;xJ'
        str_8 = ':B?miMPs+!I.2 F\t*nbX'
        str_9 = '0QzJ|mB)'
        dict_0 = {str_0: str_5, str_2: str_6, str_7: str_8, str_9: str_2}
        str_10 = '|(B-hs>~'
        resolver_0 = module_0.Resolver(str_2, dict_0, str_10)
        list_1 = []
        list_2 = [resolver_0, list_1]
        int_0 = None
        str_11 = 'm3tiS"p<cwCVz'
        str_12 = '$ERu '
        dict_1 = {str_1: int_0, str_11: int_0, str_12: int_0}
        str_13 = "`\x0cJKa'2F=EvS/"
        str_14 = 'I6Jf'
        dict_2 = {str_13: str_14, str_0: str_1, str_11: str_12}
        parser_0 = module_0.Parser(dict_1, dict_2, dict_2, dict_2)
        parser_0.class_api(str_1, str_1, list_0, list_2)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        str_0 = 'D8oY0V~ouD*CvM9R|q'
        int_0 = 359
        str_1 = None
        str_2 = '/XPb/{8'
        str_3 = 'PeoP_W'
        dict_0 = {str_0: int_0, str_1: int_0, str_2: int_0, str_3: int_0}
        dict_1 = {}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_1)
        var_0 = parser_0.__repr__()
        str_4 = 'a`P\t\r$\n!*\x0c5r^dk'
        str_5 = 'v8f:k9'
        str_6 = "NrfDz'L*P|zVI&RS$"
        str_7 = ''
        ann_assign_0 = module_1.AnnAssign()
        str_8 = "~A\\eS(6W'Bu_McrFD+"
        str_9 = ''
        str_10 = module_0.code(str_9)
        int_1 = 1282
        dict_2 = {str_6: int_1, str_8: int_1}
        set_0 = set()
        dict_3 = {str_5: set_0, str_4: set_0}
        parser_1 = module_0.Parser(dict_2, dict_3)
        parser_1.globals(str_7, ann_assign_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'dZ'
        str_1 = 'Load root: '
        bool_0 = False
        int_0 = 35
        dict_0 = {}
        parser_0 = module_0.Parser(bool_0, int_0, dict_0, dict_0)
        parser_0.parse(str_0, str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        str_0 = 'gW'
        str_1 = '>bGZEgi2"n7~ML(fNWc`'
        str_2 = module_0.doctest(str_1)
        list_0 = [str_2]
        constant_0 = module_1.Constant(*list_0)
        list_1 = [constant_0, bool_0]
        str_3 = 'the module name in the current path, use the syntax `Module-Name=module_name` to specify a name for it'
        str_4 = 'Rmk4qK).s'
        dict_0 = {str_3: list_1, str_4: constant_0, str_3: str_2, str_2: constant_0}
        constant_1 = module_1.Constant(*list_1, **dict_0)
        str_5 = 'x'
        dict_1 = {str_5: str_5, str_1: str_0, str_5: str_2, str_1: str_0}
        resolver_0 = module_0.Resolver(str_2, dict_1)
        a_s_t_0 = resolver_0.visit_Constant(constant_1)
        bool_1 = module_0.is_public_family(str_0)
        sequence_0 = module_3.Sequence()
    except BaseException:
        pass

def test_case_18():
    try:
        parser_0 = module_0.Parser()
        var_0 = parser_0.__repr__()
        str_0 = parser_0.compile()
        list_0 = [str_0]
        arguments_0 = module_1.arguments(*list_0)
        expr_0 = module_1.expr()
        bool_0 = False
        bool_1 = True
        parser_0.func_api(str_0, str_0, arguments_0, expr_0, has_self=bool_0, cls_method=bool_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '17i'
        list_0 = [str_0, str_0, str_0]
        str_1 = 'T7a,'
        str_2 = 'B8\x0c\n@3\t@B|HWIz_<v23'
        dict_0 = {str_1: list_0, str_0: list_0, str_2: str_0}
        arguments_0 = module_1.arguments(*list_0, **dict_0)
        expr_0 = module_1.expr()
        bool_0 = None
        bool_1 = False
        dict_1 = {}
        dict_2 = {}
        parser_0 = module_0.Parser(dict_1, dict_2, dict_2)
        parser_0.func_api(str_0, str_0, arguments_0, expr_0, has_self=bool_0, cls_method=bool_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '\x0b'
        str_1 = '93"^k)T$A\t\\'
        list_0 = [str_0, str_0]
        str_2 = 'VV'
        import_0 = module_1.Import()
        dict_0 = {str_2: str_0, str_0: import_0, str_1: str_1, str_0: str_1}
        assign_0 = module_1.Assign(*list_0, **dict_0)
        dict_1 = {str_1: str_2}
        parser_0 = module_0.Parser(dict_1, dict_1)
        parser_0.globals(str_1, assign_0)
        str_3 = 'f'
        bool_0 = parser_0.is_public(str_3)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'k._E!1]!X~HO'
        str_1 = None
        ann_assign_0 = module_1.AnnAssign()
        bool_0 = False
        str_2 = module_0.esc_underscore(str_0)
        bool_1 = module_0.is_public_family(str_0)
        parser_0 = module_0.Parser(bool_0)
        parser_0.globals(str_1, ann_assign_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'float'
        bool_0 = module_0.is_public_family(str_0)
        int_0 = -1824
        dict_0 = None
        str_1 = module_0.esc_underscore(str_0)
        str_2 = 'g'
        list_0 = [int_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        int_1 = -968
        str_3 = '-QoS\x0bhRy6ChJ,|O'
        int_2 = 2346
        dict_1 = {str_3: int_2}
        str_4 = 'k'
        set_0 = set()
        dict_2 = {str_4: set_0}
        parser_0 = module_0.Parser(bool_0, int_1, dict_1, dict_0, dict_2, dict_0, dict_0)
        parser_0.imports(str_2, import_from_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = ':\x0c<tBN*'
        str_1 = None
        str_2 = "%e.th9q\nnd h|'QC"
        str_3 = '/f'
        str_4 = '&7'
        str_5 = "y_lP=h,ehfu@'HEuC*\rJ"
        str_6 = '^2e?k\tv1-#{61tLZz'
        dict_0 = {str_3: str_2, str_2: str_6, str_6: str_1, str_4: str_5}
        list_0 = [str_4, str_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        parser_0 = module_0.Parser(dict_0)
        str_7 = parser_0.compile()
        parser_0.imports(str_4, import_from_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = False
        str_0 = 'l'
        str_1 = module_0.doctest(str_0)
        list_0 = [str_1]
        constant_0 = module_1.Constant(*list_0)
        str_2 = 'Rm4K).s'
        dict_0 = {str_1: list_0, str_2: constant_0, str_1: str_1, str_2: str_2, str_1: constant_0}
        constant_1 = module_1.Constant(*list_0, **dict_0)
        dict_1 = {str_0: str_0, str_1: str_0, str_0: str_1, str_1: str_0}
        resolver_0 = module_0.Resolver(str_1, dict_1)
        a_s_t_0 = resolver_0.visit_Constant(constant_1)
        str_3 = '!Zr}X#^i?G'
        module_x_var_0 = None
        int_0 = None
        dict_2 = {str_0: int_0}
        parser_0 = module_0.Parser(bool_0, dict_2, dict_1, dict_1, dict_1)
        parser_0.load_docstring(str_3, module_x_var_0)
        assign_0 = module_1.Assign(**dict_0)
        ann_assign_0 = None
        parser_0.globals(str_0, ann_assign_0)
        str_4 = '\r.Eb\tfzMc|:&3*t'
        bool_1 = parser_0.is_public(str_4)
    except BaseException:
        pass