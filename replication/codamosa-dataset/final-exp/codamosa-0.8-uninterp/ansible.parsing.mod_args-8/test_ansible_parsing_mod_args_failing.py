# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        bytes_0 = b'\x816X\xd6^\xfeQy\xabn'
        module_args_parser_0 = module_0.ModuleArgsParser(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'copy'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n    Test case 1: If the type of task_ds is not dict, it should raise\n        AnsibleAssertionError.\n    Test case 2: If the type of thing is dict, it should return the action\n        and args.\n    Test case 3: If the type of thing is string, it should return the action\n        and args.\n    Test case 4: If args and action are not in FREEFORM_ACTIONS, it should\n        raise AnsibleError.\n    '
        dict_0 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_5():
    try:
        complex_0 = None
        dict_0 = {complex_0: complex_0, complex_0: complex_0, complex_0: complex_0}
        list_0 = [complex_0, dict_0, complex_0, complex_0]
        tuple_0 = (complex_0, dict_0, list_0, complex_0)
        str_0 = '91tcV'
        dict_1 = {str_0: str_0, str_0: list_0}
        module_args_parser_0 = module_0.ModuleArgsParser()
        module_args_parser_1 = module_0.ModuleArgsParser(dict_1)
        module_args_parser_2 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_1.parse(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'action'
        str_1 = 'src'
        str_2 = 'dest'
        str_3 = 'copy'
        str_4 = 'a'
        str_5 = 'b'
        str_6 = {str_5: str_3, str_1: str_4, str_2: str_5}
        str_7 = {str_0: str_6}
        var_0 = None
        module_args_parser_0 = module_0.ModuleArgsParser(str_7, var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'action'
        str_1 = 'name'
        str_2 = 'local_action'
        str_3 = 'copy src=a dest=b'
        str_4 = 'copy file to the node'
        str_5 = 'shell sleep 10'
        str_6 = {str_0: str_3, str_1: str_4, str_2: str_5}
        var_0 = []
        module_args_parser_0 = module_0.ModuleArgsParser(str_6, var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'copy'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'action'
        str_1 = 'name'
        str_2 = 'r!{St$iT?"\t\r/'
        str_3 = 'copy file to the node'
        module_args_parser_0 = module_0.ModuleArgsParser()
        bool_0 = None
        module_args_parser_1 = module_0.ModuleArgsParser()
        module_args_parser_2 = module_0.ModuleArgsParser()
        dict_0 = {module_args_parser_1: str_3, bool_0: str_2, str_0: module_args_parser_0, str_1: module_args_parser_2}
        module_args_parser_3 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_3.parse()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'action'
        str_1 = 'nae'
        str_2 = 'copy src=a dest=b'
        str_3 = 'copy filq to the node'
        str_4 = {str_0: str_2, str_1: str_3, str_2: str_1}
        var_0 = []
        module_args_parser_0 = module_0.ModuleArgsParser(str_4, var_0)
        int_0 = 404
        var_1 = module_args_parser_0.parse(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'args'
        str_1 = 'echo hi'
        str_2 = {str_1: str_1}
        str_3 = {str_1: str_0, str_0: str_2}
        module_args_parser_0 = module_0.ModuleArgsParser(str_3, str_2)
        list_0 = [str_1, str_0, str_3]
        list_1 = [str_3, list_0]
        var_0 = module_args_parser_0.parse(list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'acto'
        str_1 = 'args'
        str_2 = 'echo hi'
        str_3 = '{{vars }'
        str_4 = {str_0: str_0, str_1: str_3, str_2: str_1, str_0: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        str_5 = 'C\x0c\r'
        var_0 = module_args_parser_0.parse(str_5)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'action'
        str_1 = 'args'
        str_2 = 'echo hi'
        str_3 = '{{ vars }}'
        str_4 = {str_0: str_0, str_1: str_3, str_2: str_1, str_0: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        str_5 = 'C\x0c\r'
        var_0 = module_args_parser_0.parse(str_5)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'name'
        str_1 = 'with_items'
        str_2 = 'with_nested'
        str_3 = 'when'
        str_4 = ''
        str_5 = [str_4]
        str_6 = [str_4]
        str_7 = {str_0: str_4, str_1: str_6}
        str_8 = [str_7]
        str_9 = 'test'
        str_10 = {str_0: str_4, str_1: str_5, str_2: str_8, str_9: str_5, str_3: str_4}
        module_args_parser_0 = module_0.ModuleArgsParser(str_10, str_4)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass