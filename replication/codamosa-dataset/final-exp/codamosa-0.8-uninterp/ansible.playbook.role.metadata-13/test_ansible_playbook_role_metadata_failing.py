# Automatically generated by Pynguin.
import ansible.playbook.role.metadata as module_0

def test_case_0():
    try:
        role_metadata_0 = module_0.RoleMetadata()
        var_0 = role_metadata_0.serialize()
        var_1 = role_metadata_0.load(var_0, role_metadata_0, role_metadata_0)
    except BaseException:
        pass

def test_case_1():
    try:
        role_metadata_0 = module_0.RoleMetadata()
        str_0 = '~S\t@]'
        str_1 = "Invalid 'order' specified for inventory hosts: %s"
        list_0 = [role_metadata_0, str_1, role_metadata_0, role_metadata_0]
        var_0 = role_metadata_0.load(str_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        role_metadata_0 = module_0.RoleMetadata()
        var_0 = role_metadata_0.deserialize(role_metadata_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '9&9U. Bx$y]zKJ'
        var_0 = dict(src=str_0, scm=str_0, version=str_0, name=str_0)
        role_metadata_0 = module_0.RoleMetadata()
        var_1 = role_metadata_0.serialize()
        dict_0 = {role_metadata_0: str_0}
        role_metadata_1 = module_0.RoleMetadata()
        var_2 = role_metadata_1.deserialize(dict_0)
        var_3 = [var_0, str_0, var_0]
        var_4 = dict(allow_duplicates=str_0, dependencies=var_3)
        role_metadata_2 = module_0.RoleMetadata()
        var_5 = role_metadata_2.serialize()
        role_metadata_3 = module_0.RoleMetadata()
        var_6 = role_metadata_3.load_data(var_4)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -1716.1802
        role_metadata_0 = module_0.RoleMetadata(float_0)
        role_metadata_1 = module_0.RoleMetadata()
        dict_0 = {}
        float_1 = 22.0
        var_0 = role_metadata_1.load(dict_0, float_1)
        int_0 = -2510
        var_1 = role_metadata_1.deserialize(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '=>=y Kp-Za)_2[6tS'
        var_0 = [str_0, str_0]
        var_1 = dict(allow_duplicates=str_0, dependencies=var_0)
        role_metadata_0 = module_0.RoleMetadata()
        var_2 = role_metadata_0.load_data(var_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '=>=yk Kp-Zar_2[6tS'
        var_0 = dict(src=str_0, scm=str_0, version=str_0, name=str_0)
        var_1 = [var_0, str_0]
        var_2 = dict(allow_duplicates=var_0, dependencies=var_1)
        role_metadata_0 = module_0.RoleMetadata()
        var_3 = role_metadata_0.load_data(var_2)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        var_0 = dict(allow_duplicates=bool_0, dependencies=bool_0)
        role_metadata_0 = module_0.RoleMetadata()
        var_1 = role_metadata_0.load_data(var_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'owner'
        role_metadata_0 = module_0.RoleMetadata(str_0)
        str_1 = 'allow_duplicates'
        str_2 = 'dependencies'
        bool_0 = False
        var_0 = []
        var_1 = {str_1: bool_0, str_2: var_0}
        var_2 = role_metadata_0.load(var_1, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'dependencies'
        str_1 = 'role'
        str_2 = 'common'
        str_3 = {str_1: str_2}
        str_4 = 'geerlingguy.java'
        str_5 = 'geerlingguy.pip'
        str_6 = 'geerlingguy.composer'
        str_7 = 'geerlingguy.drush'
        str_8 = 'geerlingguy.apache'
        str_9 = {str_1: str_8}
        str_10 = [str_3, str_4, str_5, str_6, str_7, str_9]
        str_11 = {str_0: str_10}
        role_metadata_0 = module_0.RoleMetadata()
        var_0 = role_metadata_0.load_data(str_11)
    except BaseException:
        pass

def test_case_10():
    try:
        role_metadata_0 = module_0.RoleMetadata()
        str_0 = 'dependencies'
        str_1 = {str_0: str_0}
        str_2 = [str_1, str_1, str_1, str_1, str_0, str_1]
        str_3 = {str_0: str_2}
        var_0 = role_metadata_0.load_data(str_3)
    except BaseException:
        pass