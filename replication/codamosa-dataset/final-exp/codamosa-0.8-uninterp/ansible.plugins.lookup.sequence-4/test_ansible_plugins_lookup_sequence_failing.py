# Automatically generated by Pynguin.
import ansible.plugins.lookup.sequence as module_0
import ansible.parsing.splitter as module_1

def test_case_0():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(lookup_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "j_xI'Qbur\t>9z*"
        list_0 = [str_0]
        lookup_module_0 = module_0.LookupModule(str_0)
        var_0 = lookup_module_0.run(str_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '5A1\\]%Ld'
        list_0 = None
        var_0 = lookup_module_0.run(str_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'the specified roles path exists and is not a directory.'
        lookup_module_0 = module_0.LookupModule()
        list_0 = [lookup_module_0, str_0, lookup_module_0, lookup_module_0]
        var_0 = lookup_module_0.run(list_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = None
        list_0 = []
        bool_0 = True
        lookup_module_0 = module_0.LookupModule(float_0)
        var_0 = lookup_module_0.run(list_0, bool_0)
        float_1 = -1085.0
        lookup_module_1 = module_0.LookupModule()
        lookup_module_2 = module_0.LookupModule(float_1)
        var_1 = lookup_module_2.parse_kv_args(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        lookup_module_0 = module_0.LookupModule()
        dict_0 = {}
        var_0 = lookup_module_0.parse_kv_args(dict_0)
        bytes_0 = b'\xae8WNJ\x11A\x15\xe55-'
        var_1 = lookup_module_0.parse_kv_args(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        str_0 = 'start=0 end=3stride=1 format=tesuser%02x'
        var_1 = module_1.parse_kv(str_0)
        var_2 = lookup_module_0.parse_kv_args(var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '1-10'
        var_0 = lookup_module_0.parse_simple_args(str_0)
        str_1 = '05-010'
        var_1 = lookup_module_0.parse_simple_args(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '10'
        dict_0 = {str_0: lookup_module_0, str_0: lookup_module_0, str_0: str_0}
        int_0 = 317
        str_1 = 'CE(OEuGH5=O.5RDEA'
        lookup_module_1 = module_0.LookupModule(int_0, str_1, **dict_0)
        var_0 = lookup_module_1.generate_sequence()
        str_2 = 'a3A\x0b& p6.X'
        set_0 = {str_0}
        dict_1 = {str_2: set_0}
        var_1 = lookup_module_0.reset()
        var_2 = lookup_module_0.run(str_0, dict_1)
    except BaseException:
        pass