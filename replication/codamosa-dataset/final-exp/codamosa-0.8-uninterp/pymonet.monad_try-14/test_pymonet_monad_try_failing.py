# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0]
        set_0 = {str_0, str_0}
        bool_0 = True
        try_0 = module_0.Try(set_0, bool_0)
        bool_1 = try_0.__eq__(list_0)
        bool_2 = try_0.__eq__(try_0)
        dict_0 = {}
        bool_3 = False
        try_1 = module_0.Try(dict_0, bool_3)
        int_0 = 271
        str_1 = 'PH]C/X'
        try_2 = module_0.Try(str_1, bool_3)
        bool_4 = False
        try_3 = module_0.Try(int_0, bool_4)
        var_0 = try_3.filter(str_0)
        str_2 = try_3.__str__()
        try_4 = None
        bytes_0 = b'\xb6l6\xdc\x81'
        var_1 = try_4.get_or_else(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        int_0 = -1159
        bool_0 = True
        try_0 = module_0.Try(int_0, bool_0)
        list_0 = [tuple_0, tuple_0, tuple_0]
        bytes_0 = b'\xa2\x0f'
        float_0 = -358.0
        bool_1 = False
        try_1 = module_0.Try(float_0, bool_1)
        var_0 = try_1.map(bytes_0)
        str_0 = '+prg@`;'
        bool_2 = True
        try_2 = module_0.Try(str_0, bool_2)
        int_1 = -2792
        var_1 = try_2.get_or_else(int_1)
        var_2 = try_2.filter(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xd5\xd44WB\xef'
        bool_0 = True
        list_0 = [bytes_0]
        int_0 = 959
        try_0 = module_0.Try(int_0, bool_0)
        str_0 = 'Z=t|m2-2\x0bzdS.'
        try_1 = module_0.Try(str_0, bool_0)
        var_0 = try_0.map(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 8
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        int_1 = None
        var_0 = try_0.bind(int_1)
        var_1 = try_0.filter(int_0)
        str_0 = '='
        try_1 = module_0.Try(str_0, bool_0)
        var_2 = try_1.get()
        bool_1 = True
        try_2 = module_0.Try(bool_0, bool_1)
        var_3 = try_2.filter(try_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\tv{^sb'
        bool_0 = True
        list_0 = [bool_0, bool_0, str_0]
        bytes_0 = b'\xb0\x16\xdc\xe6\x8b\x1e\xf0\x18\x823\xfb>\xdfY~'
        try_0 = module_0.Try(bytes_0, bool_0)
        var_0 = try_0.bind(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 2003
        set_0 = {int_0}
        bool_0 = True
        float_0 = -3676.169
        bool_1 = False
        str_0 = 'qromYO\x0b!'
        try_0 = module_0.Try(str_0, bool_0)
        var_0 = try_0.get_or_else(bool_1)
        bool_2 = True
        try_1 = module_0.Try(set_0, bool_2)
        var_1 = try_1.on_success(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        complex_0 = None
        list_0 = [complex_0]
        bool_0 = False
        try_0 = module_0.Try(list_0, bool_0)
        var_0 = try_0.on_fail(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 30
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        var_0 = try_0.filter(int_0)
        bool_1 = True
        try_1 = module_0.Try(bool_0, bool_1)
        var_1 = try_1.filter(try_1)
    except BaseException:
        pass