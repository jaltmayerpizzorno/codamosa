# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        str_0 = 'GcyV-`'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        set_0 = {doc_c_l_i_0, doc_c_l_i_0}
        var_0 = module_0.jdump(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '.ayV-z'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.display_plugin_list(doc_c_l_i_0)
    except BaseException:
        pass

def test_case_2():
    try:
        role_mixin_0 = module_0.RoleMixin()
        dict_0 = {role_mixin_0: role_mixin_0, role_mixin_0: role_mixin_0}
        doc_c_l_i_0 = module_0.DocCLI(role_mixin_0)
        str_0 = 'c(q$|80g'
        str_1 = 'Ur"'
        dict_1 = {str_0: doc_c_l_i_0, str_1: str_1}
        var_0 = doc_c_l_i_0.format_snippet(dict_0, str_0, dict_1)
        var_1 = doc_c_l_i_0.get_all_plugins_of_type(doc_c_l_i_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'W'
        list_0 = [str_0, str_0, str_0]
        str_1 = '\\Xq#Q_'
        role_mixin_0 = module_0.RoleMixin()
        doc_c_l_i_0 = module_0.DocCLI(role_mixin_0)
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(str_0, list_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        int_0 = 70
        set_0 = {int_0}
        list_0 = [int_0, int_0]
        str_0 = 'Dump configuration'
        float_0 = 633.52
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.format_plugin_doc(plugin_not_found_0, int_0, set_0, list_0, str_0, plugin_not_found_0)
    except BaseException:
        pass

def test_case_5():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        bytes_0 = b'tb\x862R\xb0ZR\xb7v\r\x1dG\xbe\x0e9\x91\xc3\xa0'
        int_0 = -491
        list_0 = []
        dict_0 = None
        str_0 = '|]z'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.add_fields(plugin_not_found_0, bytes_0, int_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = set()
        int_0 = -1897
        list_0 = [int_0]
        dict_0 = None
        tuple_0 = (list_0, dict_0)
        list_1 = [tuple_0, list_0, dict_0, tuple_0]
        bool_0 = False
        list_2 = [set_0, dict_0, bool_0, dict_0, bool_0]
        tuple_1 = (list_2,)
        doc_c_l_i_0 = module_0.DocCLI(tuple_1)
        dict_1 = None
        float_0 = 561.7173
        var_0 = doc_c_l_i_0.find_plugins(bool_0, int_0, dict_1, float_0)
        var_1 = doc_c_l_i_0.find_plugins(int_0, tuple_0, list_0, list_1)
        str_0 = 'gps~7[<PZVP:"\\Sho,\x0b'
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        list_3 = []
        plugin_not_found_0 = module_0.PluginNotFound(*list_3)
        var_2 = doc_c_l_i_0.format_snippet(tuple_1, plugin_not_found_0, list_2)
        var_3 = doc_c_l_i_1.run()
        var_4 = doc_c_l_i_1.init_parser()
        var_5 = doc_c_l_i_1.run()
        role_mixin_0 = module_0.RoleMixin()
        str_1 = '4IPBRt~6)"'
        var_6 = doc_c_l_i_0.get_role_man_text(str_1, plugin_not_found_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'GcyV-`'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        dict_0 = {}
        tuple_0 = ()
        var_0 = doc_c_l_i_0.get_man_text(dict_0, tuple_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'GcyV-`'
        bool_0 = False
        plugin_not_found_0 = module_0.PluginNotFound()
        float_0 = 0.5
        list_0 = [str_0, str_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.format_snippet(bool_0, plugin_not_found_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        doc_c_l_i_0 = module_0.DocCLI(plugin_not_found_0)
        str_0 = '%s Ry install yum-utils --releasever %s'
        str_1 = 'N/O36+GJ'
        bool_0 = False
        dict_0 = {bool_0: plugin_not_found_0, str_1: str_0}
        var_0 = doc_c_l_i_0.format_snippet(str_1, bool_0, dict_0)
        var_1 = doc_c_l_i_0.run()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'gps~7[<PZVP:"\\Sho,\x0b'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
        var_1 = doc_c_l_i_0.init_parser()
        var_2 = doc_c_l_i_0.run()
        bool_0 = False
        dict_0 = None
        var_3 = doc_c_l_i_0.get_plugin_metadata(bool_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 0
        list_0 = [int_0]
        dict_0 = None
        tuple_0 = (list_0, dict_0)
        bool_0 = False
        list_1 = [bool_0, bool_0]
        tuple_1 = (list_1,)
        doc_c_l_i_0 = module_0.DocCLI(tuple_1)
        var_0 = doc_c_l_i_0.find_plugins(int_0, tuple_0, list_0, list_1)
        str_0 = 'gps~7[<PZVP:"\\Sho,\x0b'
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        list_2 = []
        plugin_not_found_0 = module_0.PluginNotFound(*list_2)
        var_1 = doc_c_l_i_0.format_snippet(tuple_1, plugin_not_found_0, list_1)
        var_2 = doc_c_l_i_1.run()
        var_3 = doc_c_l_i_1.init_parser()
        var_4 = doc_c_l_i_1.run()
        role_mixin_0 = module_0.RoleMixin()
        var_5 = module_0.add_collection_plugins(plugin_not_found_0, dict_0)
        var_6 = doc_c_l_i_0.get_man_text(list_2, doc_c_l_i_0)
    except BaseException:
        pass

def test_case_12():
    try:
        set_0 = set()
        int_0 = 0
        list_0 = [int_0]
        dict_0 = None
        tuple_0 = (list_0, dict_0)
        bool_0 = False
        list_1 = [set_0, bool_0, bool_0]
        tuple_1 = (list_1,)
        doc_c_l_i_0 = module_0.DocCLI(tuple_1)
        str_0 = "Invalid configuration definition '%s': type is %s"
        str_1 = '\\wh":rYN$c%qK\nx5f\''
        dict_1 = {str_0: int_0, str_1: str_0}
        var_0 = doc_c_l_i_0.add_fields(dict_1, set_0, tuple_1, dict_0)
        var_1 = doc_c_l_i_0.find_plugins(int_0, tuple_0, list_0, list_1)
        str_2 = 'lookup'
        str_3 = '6N2 js'
        var_2 = doc_c_l_i_0.get_plugin_metadata(str_2, str_3)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        int_0 = 34
        list_0 = [int_0]
        bool_0 = False
        list_1 = [set_0, bool_0, bool_0]
        tuple_0 = (list_1,)
        doc_c_l_i_0 = module_0.DocCLI(tuple_0)
        str_0 = 'gps~7[<PZVP:"\\Sho,\x0b'
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        var_0 = doc_c_l_i_0.format_snippet(tuple_0, plugin_not_found_0, list_1)
        var_1 = doc_c_l_i_1.init_parser()
        var_2 = doc_c_l_i_1.run()
        str_1 = 'inventory'
        float_0 = -2216.4
        var_3 = doc_c_l_i_0.format_snippet(float_0, str_1, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        set_0 = set()
        int_0 = 0
        list_0 = [int_0]
        dict_0 = None
        tuple_0 = (list_0, dict_0)
        bool_0 = False
        list_1 = [set_0, bool_0, bool_0]
        tuple_1 = (list_1,)
        doc_c_l_i_0 = module_0.DocCLI(tuple_1)
        var_0 = doc_c_l_i_0.find_plugins(int_0, tuple_0, list_0, list_1)
        str_0 = 'uLx'
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        var_1 = doc_c_l_i_1.init_parser()
        var_2 = doc_c_l_i_1.run()
        str_1 = "Invalid configuration definitioh '%s': t$pe is %s"
        var_3 = doc_c_l_i_1.init_parser()
        str_2 = 'UtY"m+1.\\Zh@5'
        dict_1 = {str_1: list_1, str_0: list_1, str_2: tuple_0, str_0: dict_0}
        str_3 = '%prog -U <repository> [options] [<playbook.yml>]'
        var_4 = doc_c_l_i_1.format_snippet(dict_0, dict_1, str_3)
    except BaseException:
        pass