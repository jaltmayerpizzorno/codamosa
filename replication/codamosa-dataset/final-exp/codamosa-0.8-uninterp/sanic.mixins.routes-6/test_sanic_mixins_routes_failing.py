# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = ')\x0c<^\n |G|\ryAiT`.Q2'
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'V4w=TH(V\x0b>gw7'
        iterable_0 = None
        int_0 = -89
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, iterable_0, int_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ')\x0c<^\n |G|\ryA7T`.Q2'
        bool_0 = True
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.put(str_0, str_0)
        int_0 = 4
        var_1 = route_mixin_0.get(str_0, bool_0, int_0, str_0)
        var_2 = route_mixin_0.add_route(var_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '^kJ'
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.put(str_0, str_0)
        var_1 = route_mixin_0.post(str_0, bool_0)
        var_2 = route_mixin_0.head(str_0, str_0)
        route_mixin_1 = module_0.RouteMixin()
        var_3 = route_mixin_0.add_route(var_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x9fuX\x8bD'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        str_0 = '^P s[?$OaM\x0c'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_websocket_route(dict_0, str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xfb\x91\x95?O\xd5\x1e\x88\xa9D\x05\xf8\xadX\x16\xa2\xda\x13'
        set_0 = {bytes_0, bytes_0, bytes_0}
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.static(bytes_0, bytes_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        str_1 = 'text/'
        str_2 = 'Decorate a function to be registered as a handler for exceptions\n\n        :param exceptions: exceptions\n        :return: decorated function\n        '
        list_0 = [str_0, str_0, str_0]
        dict_0 = {}
        route_mixin_0 = module_0.RouteMixin(*list_0, **dict_0)
        var_0 = route_mixin_0.static(str_1, str_0, str_2)
    except BaseException:
        pass

def test_case_8():
    try:
        pure_path_0 = module_1.PurePath()
        str_0 = ''
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(pure_path_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ' has nvt yet been registered to an app'
        bool_0 = True
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(bool_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '/test_uri'
        str_1 = 'localhost'
        dict_0 = {str_0: str_0, str_0: route_mixin_0, str_1: str_0, str_1: str_0}
        str_2 = 's9VM V[QzK{l)fA#ifj/'
        var_0 = route_mixin_0.websocket(str_0, dict_0, str_2)
        var_1 = route_mixin_0.route(str_0, str_1)
        str_3 = "\n        Current error handling code needs a request object that won't exist\n        if an error occurred during before a request was received. Create a\n        bogus response for error handling use.\n        "
        int_0 = -2471
        var_2 = route_mixin_0.add_websocket_route(str_3, str_0, str_1, int_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '^P s[?$OaM\x0c'
        route_mixin_0 = module_0.RouteMixin()
        list_0 = None
        var_0 = route_mixin_0.add_route(list_0, str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        str_0 = 'H|w*VJ!B\x0bVw\ruO'
        dict_0 = {str_0: str_0}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        var_0 = route_mixin_0.static(str_0, str_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '^kj'
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        str_1 = ''
        var_0 = route_mixin_0.put(str_1, str_1)
        list_0 = [str_0, str_0, str_0, str_0]
        var_1 = route_mixin_0.post(str_1, bool_0)
        str_2 = '?YRk%'
        var_2 = route_mixin_0.head(str_2, str_2)
        dict_0 = {str_0: route_mixin_0, str_2: var_1}
        tuple_0 = (dict_0, list_0)
        var_3 = route_mixin_0.add_route(tuple_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '^kJ'
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.put(str_0, str_0)
        var_1 = route_mixin_0.add_route(var_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '.6gs`}'
        bool_0 = True
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, bool_0)
    except BaseException:
        pass