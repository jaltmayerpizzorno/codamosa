# Automatically generated by Pynguin.
import ansible.plugins.action.wait_for_connection as module_0

def test_case_0():
    try:
        str_0 = 'wgiB_jUD'
        dict_0 = {str_0: str_0}
        dict_1 = {}
        bytes_0 = None
        bool_0 = True
        int_0 = 1544
        list_0 = [dict_0, bytes_0, str_0]
        float_0 = 151.14238492837254
        tuple_0 = (list_0,)
        action_module_0 = module_0.ActionModule(dict_0, list_0, list_0, int_0, float_0, tuple_0)
        var_0 = action_module_0.do_until_success_or_timeout(dict_1, bool_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'prepend'
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        str_1 = ' Q^9U`v>UWCLuk|I`BK'
        int_0 = -894
        dict_1 = {int_0: bool_0}
        bytes_0 = b'5\x99'
        action_module_0 = module_0.ActionModule(bool_0, dict_0, str_1, int_0, dict_1, bytes_0)
        var_0 = action_module_0.run(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        dict_1 = {}
        bytes_0 = None
        bool_0 = True
        tuple_0 = None
        str_0 = 'csvfile: %s'
        list_0 = [dict_0, bytes_0, str_0]
        int_0 = 62
        float_0 = 128.11745
        tuple_1 = (list_0,)
        action_module_0 = module_0.ActionModule(dict_0, list_0, list_0, int_0, float_0, tuple_1)
        var_0 = action_module_0.do_until_success_or_timeout(dict_1, bool_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        timed_out_exception_0 = None
        str_0 = '\ts{n'
        int_0 = -1353
        float_0 = 1563.665
        set_0 = {int_0, float_0, float_0, float_0}
        str_1 = 'connect as this user (default=%s)'
        int_1 = -158
        bytes_0 = b'R\xf5\xed2Lk\x96\xb1a\xc7g\xe7\xc0\xe3'
        action_module_0 = module_0.ActionModule(int_0, set_0, str_1, int_1, int_0, bytes_0)
        var_0 = action_module_0.run(timed_out_exception_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'wgiB_jUD'
        dict_0 = {str_0: str_0}
        dict_1 = {}
        bytes_0 = None
        bool_0 = False
        int_0 = 1544
        list_0 = [dict_0, bytes_0, str_0]
        int_1 = 62
        float_0 = 128.11745
        tuple_0 = (list_0,)
        action_module_0 = module_0.ActionModule(dict_0, list_0, list_0, int_1, float_0, tuple_0)
        var_0 = action_module_0.do_until_success_or_timeout(dict_1, bool_0, int_0, tuple_0)
    except BaseException:
        pass