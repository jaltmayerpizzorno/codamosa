# Automatically generated by Pynguin.
import pymonet.box as module_0
import builtins as module_1

def test_case_0():
    try:
        list_0 = []
        str_0 = None
        str_1 = 'y018U(5\tm#>B'
        str_2 = '^X=\x0c]UoNz`2g2{\rdPwJ2'
        dict_0 = {str_0: list_0, str_1: str_0, str_1: str_1, str_2: str_0}
        dict_1 = {str_2: dict_0, str_2: str_2}
        list_1 = [list_0, str_1, str_2, str_2]
        box_0 = module_0.Box(list_1)
        var_0 = box_0.map(dict_1)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'r\x93\x0f\x8a\xc9\x88\xfb\xa8\xce\x80'
        str_0 = '\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        '
        list_0 = [bytes_0]
        box_0 = module_0.Box(list_0)
        var_0 = box_0.bind(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        callable_0 = None
        list_0 = []
        set_0 = {callable_0, bool_0}
        box_0 = module_0.Box(set_0)
        var_0 = box_0.ap(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x92_lN\xb8\x9f2=\x81\x02\x08\xe4\x15\xbe'
        box_0 = module_0.Box(bytes_0)
        object_0 = module_1.object()
        box_1 = module_0.Box(object_0)
        bool_0 = box_0.__eq__(object_0)
        var_0 = box_1.to_maybe()
        var_1 = box_0.to_maybe()
        str_0 = '\n        Take function, store it and call with Task value during calling fork function.\n        Return result of called.\n\n        :param fn: mapper function\n        :type fn: Function(value) -> Task[reject, mapped_value]\n        :returns:  new Task with mapper resolve attribute\n        :rtype: Task[reject, mapped_value]\n        '
        dict_0 = {}
        box_2 = module_0.Box(dict_0)
        bool_1 = True
        list_0 = []
        tuple_0 = (str_0, box_2, bool_1, list_0)
        var_2 = box_1.bind(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        box_0 = module_0.Box(dict_0)
        var_0 = box_0.to_either()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -280
        object_0 = module_1.object()
        set_0 = {int_0, int_0, int_0, int_0}
        box_0 = module_0.Box(set_0)
        bool_0 = box_0.__eq__(object_0)
        var_0 = box_0.to_lazy()
        box_1 = module_0.Box(int_0)
        var_1 = box_1.to_validation()
        list_0 = []
        box_2 = module_0.Box(box_0)
        var_2 = box_2.map(list_0)
    except BaseException:
        pass