# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        str_0 = '-2nX<[oP\x0c,[EjL:Rx'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        validation_0 = module_0.Validation(str_0, dict_0)
        tuple_0 = ()
        var_0 = validation_0.__eq__(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = '\n        Transform Maybe to Either.\n\n        :returns: Right monad with previous value when Maybe is not empty, in other case Left with None\n        :rtype: Either[A | None]\n        '
        str_1 = 'Bu"'
        tuple_0 = (str_1,)
        list_0 = []
        validation_0 = module_0.Validation(list_0, tuple_0)
        var_0 = validation_0.to_either()
        validation_1 = module_0.Validation(str_0, tuple_0)
        var_1 = validation_1.__str__()
        validation_2 = module_0.Validation(bool_0, bool_0)
        var_2 = validation_2.is_success()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ')mXo.m$E\x0b7o*3q&o1'
        set_0 = set()
        validation_0 = module_0.Validation(str_0, set_0)
        str_1 = "\x0bng`,R^Pl&]L?]1)q'"
        var_0 = validation_0.__eq__(str_1)
        str_2 = "p&C-NuN\\2m-\t}1xO'"
        var_1 = validation_0.__eq__(str_2)
        var_2 = validation_0.to_try()
        str_3 = 'R #}5*/4fM*1'
        bool_0 = False
        float_0 = -165.6369
        list_0 = [float_0, bool_0, str_3]
        float_1 = 21.65
        set_1 = set()
        validation_1 = module_0.Validation(float_1, set_1)
        tuple_0 = (float_0, list_0, validation_1)
        validation_2 = module_0.Validation(bool_0, tuple_0)
        var_3 = validation_1.__str__()
        var_4 = validation_2.to_try()
        var_5 = validation_1.__str__()
        var_6 = validation_0.bind(set_1)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2855.847
        list_0 = [float_0, float_0]
        bool_0 = False
        validation_0 = module_0.Validation(list_0, bool_0)
        var_0 = validation_0.is_fail()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2378
        list_0 = None
        bool_0 = True
        tuple_0 = (list_0, bool_0)
        str_0 = '!V9z\rbE3"X>I.mq)h!v'
        validation_0 = module_0.Validation(bool_0, str_0)
        var_0 = validation_0.to_lazy()
        validation_1 = module_0.Validation(int_0, tuple_0)
        str_1 = '\x0b2N'
        var_1 = validation_1.map(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1695
        bool_0 = False
        str_0 = '/Md~m4ZN;_Sr{`<'
        validation_0 = module_0.Validation(str_0, int_0)
        var_0 = validation_0.bind(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1434
        bool_0 = False
        bool_1 = False
        validation_0 = module_0.Validation(bool_0, bool_1)
        var_0 = validation_0.ap(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'b\x10hb\xcb\x19z\xde\x98\x864E\x8a'
        bool_0 = False
        str_0 = 'B1bNUXN1*('
        dict_0 = {bytes_0: bool_0, str_0: bool_0}
        str_1 = ''
        validation_0 = module_0.Validation(dict_0, str_1)
        var_0 = validation_0.to_maybe()
        tuple_0 = (bool_0,)
        validation_1 = None
        validation_2 = module_0.Validation(tuple_0, validation_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = False
        float_0 = 2624.0
        tuple_0 = (float_0,)
        validation_0 = module_0.Validation(int_0, tuple_0)
        float_1 = 3571.5087
        validation_1 = module_0.Validation(validation_0, float_1)
        var_0 = validation_1.to_try()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ')mXo.m$E\x0b7o*3q&o1'
        set_0 = set()
        validation_0 = module_0.Validation(str_0, set_0)
        str_1 = "\x0bng`,R^Pl:]L?]1)q'"
        var_0 = validation_0.__eq__(str_1)
        str_2 = "p&C-NuN\\2m-\t}1xO'"
        var_1 = validation_0.__eq__(str_2)
        var_2 = validation_0.to_try()
        var_3 = validation_0.to_either()
        str_3 = 'R #}5*/4fM*1'
        bool_0 = False
        float_0 = -165.6369
        list_0 = [float_0, bool_0, str_3]
        float_1 = 21.65
        set_1 = set()
        validation_1 = module_0.Validation(float_1, set_1)
        tuple_0 = (float_0, list_0, validation_1)
        validation_2 = module_0.Validation(bool_0, tuple_0)
        var_4 = validation_1.__str__()
        var_5 = validation_2.to_try()
        var_6 = validation_1.__str__()
        var_7 = validation_2.bind(float_0)
    except BaseException:
        pass