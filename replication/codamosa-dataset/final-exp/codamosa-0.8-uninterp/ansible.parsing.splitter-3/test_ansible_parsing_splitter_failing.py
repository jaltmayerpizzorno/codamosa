# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    try:
        tuple_0 = ()
        var_0 = module_0.parse_kv(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '"S\'QHPS4V'
        var_0 = module_0.parse_kv(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'GusjwSpje"@^l{\\;W16\n'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '80~GZ'
        str_1 = '*bpav(` s6=s]'
        var_0 = module_0.parse_kv(str_1)
        list_0 = [str_0]
        int_0 = 1041
        str_2 = '?C\x0c!$eO '
        var_1 = module_0.split_args(str_2)
        var_2 = module_0.parse_kv(list_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'a=b c="d e"'
        bool_0 = True
        var_0 = module_0.parse_kv(str_0, bool_0)
        bytes_0 = b'\xeb\xf6\xe1ufZ(\xa4o\x99\x90Wt\xd0\xed'
        var_1 = module_0.parse_kv(bytes_0)
        str_1 = '\n    This callback writes playbook output to a JUnit formatted XML file.\n\n    Tasks show up in the report as follows:\n        \'ok\': pass\n        \'failed\' with \'EXPECTED FAILURE\' in the task name: pass\n        \'failed\' with \'TOGGLE RESULT\' in the task name: pass\n        \'ok\' with \'TOGGLE RESULT\' in the task name: failure\n        \'failed\' due to an exception: error\n        \'failed\' for other reasons: failure\n        \'skipped\': skipped\n\n    This plugin makes use of the following environment variables:\n        JUNIT_OUTPUT_DIR (optional): Directory to write XML files to.\n                                     Default: ~/.ansible.log\n        JUNIT_TASK_CLASS (optional): Configure the output to be one class per yaml file\n                                     Default: False\n        JUNIT_TASK_RELATIVE_PATH (optional): Configure the output to use relativ paths to given directory\n                                     Default: none\n        JUNIT_FAIL_ON_CHANGE (optional): Consider any tasks reporting "changed" as a junit test failure\n                                     Default: False\n        JUNIT_FAIL_ON_IGNORE (optional): Consider failed tasks as a junit test failure even if ignore_on_error is set\n                                     Default: False\n        JUNIT_INCLUDE_SETUP_TASKS_IN_REPORT (optional): Should the setup tasks be included in the final report\n                                     Default: True\n        JUNIT_HIDE_TASK_ARGUMENTS (optional): Hide the arguments for a task\n                                     Default: False\n        JUNIT_TEST_CASE_PREFIX (optional): Consider a task only as test case if it has this value as prefix. Additionaly failing tasks are recorded as failed\n                                     test cases.\n                                     Default: <empty>\n    '
        var_2 = module_0.parse_kv(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'uQ2#*h;~+.{{'
        str_1 = 'FwNwQnc\'"Tf+;'
        var_0 = module_0.parse_kv(str_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'a=bc="d e"'
        bool_0 = True
        var_0 = module_0.parse_kv(str_0, bool_0)
        str_1 = '=) d e'
        var_1 = module_0.parse_kv(str_1)
        str_2 = 'Qc DLofS#}8W+{ULM#'
        str_3 = 'oB<B,y&@uQ;hug'
        var_2 = module_0.parse_kv(str_2, str_3)
        float_0 = 3714.454
        var_3 = module_0.split_args(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '{% abc t} = "cdf"'
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '{% abc t\'^} = "cdf"'
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass