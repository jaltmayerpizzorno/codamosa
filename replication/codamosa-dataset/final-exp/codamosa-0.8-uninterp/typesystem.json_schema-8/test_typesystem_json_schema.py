# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.fields as module_1
import typesystem.schemas as module_2
import decimal as module_3

def test_case_0():
    pass

def test_case_1():
    dict_0 = {}
    field_0 = module_0.from_json_schema(dict_0)

def test_case_2():
    string_0 = module_1.String()
    var_0 = module_0.to_json_schema(string_0)
    any_0 = string_0.get_default_value()
    integer_0 = module_1.Integer()
    bool_0 = False
    field_0 = module_0.from_json_schema(bool_0)

def test_case_3():
    schema_definitions_0 = None
    dict_0 = {schema_definitions_0: schema_definitions_0, schema_definitions_0: schema_definitions_0, schema_definitions_0: schema_definitions_0}
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)

def test_case_4():
    dict_0 = {}
    tuple_0 = module_0.get_valid_types(dict_0)

def test_case_5():
    string_0 = module_1.String()
    var_0 = module_0.to_json_schema(string_0)

def test_case_6():
    schema_definitions_0 = None
    dict_0 = {}
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_7():
    str_0 = 'const'
    str_1 = 'it works'
    str_2 = {str_0: str_1}
    field_0 = module_0.from_json_schema(str_2)

def test_case_8():
    str_0 = '$ref'
    str_1 = '#/the_schema'
    str_2 = {str_0: str_1}
    var_0 = {}
    field_0 = module_0.ref_from_json_schema(str_2, var_0)

def test_case_9():
    bool_0 = True
    bool_1 = False
    field_0 = module_0.from_json_schema(bool_1)
    var_0 = module_0.to_json_schema(field_0)
    str_0 = 'minLength'
    bool_2 = {str_0: bool_0}
    field_1 = module_0.from_json_schema(bool_2)
    var_1 = module_0.to_json_schema(field_1)
    var_2 = module_0.to_json_schema(field_1)

def test_case_10():
    int_0 = -2224
    dict_0 = {int_0: int_0}
    schema_definitions_0 = None
    field_0 = module_0.from_json_schema(dict_0, schema_definitions_0)
    dict_1 = {int_0: int_0}
    schema_definitions_1 = None
    dict_2 = {int_0: dict_0, schema_definitions_1: field_0}
    field_1 = module_0.type_from_json_schema(dict_2, schema_definitions_0)
    dict_3 = module_0.get_standard_properties(field_0)
    var_0 = module_0.to_json_schema(field_1)
    str_0 = 'integer'
    bool_0 = None
    field_2 = module_0.from_json_schema_type(dict_1, str_0, bool_0, schema_definitions_0)

def test_case_11():
    int_0 = -2224
    dict_0 = {int_0: int_0}
    str_0 = 'array'
    bool_0 = True
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    schema_definitions_1 = None
    field_1 = module_0.from_json_schema(dict_0, schema_definitions_1)
    dict_1 = module_0.get_standard_properties(field_0)
    field_2 = module_1.Field()
    var_0 = module_0.to_json_schema(field_0)

def test_case_12():
    schema_definitions_0 = module_2.SchemaDefinitions()
    var_0 = module_0.to_json_schema(schema_definitions_0)
    dict_0 = {}
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    var_1 = module_0.to_json_schema(field_0)

def test_case_13():
    str_0 = '$id'
    str_1 = 'description'
    str_2 = 'type'
    str_3 = 'properties'
    str_4 = 'http://json-schema.org/draft-07/schema#'
    str_5 = 'http://example.com/product.schema.json'
    str_6 = 'Product'
    str_7 = 'object'
    str_8 = 'product_id'
    str_9 = 'enum'
    str_10 = 'string'
    str_11 = 'fa_so_la_ti'
    str_12 = 'fur_elise'
    str_13 = [str_9, str_11, str_12]
    str_14 = {str_2: str_10, str_1: str_9, str_9: str_13}
    str_15 = {str_8: str_14}
    str_16 = {str_5: str_4, str_0: str_5, str_11: str_6, str_1: str_1, str_2: str_7, str_3: str_15}
    field_0 = module_0.from_json_schema(str_16)

def test_case_14():
    integer_0 = module_1.Integer()
    array_0 = module_1.Array(integer_0)
    var_0 = module_0.to_json_schema(array_0)

def test_case_15():
    str_0 = 'not'
    var_0 = {}
    var_1 = {str_0: var_0}
    var_2 = {}
    field_0 = module_0.not_from_json_schema(var_1, var_2)

def test_case_16():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'default'
    str_4 = 'type'
    str_5 = 'integer'
    str_6 = {str_4: str_5}
    str_7 = {str_4: str_5}
    str_8 = 'number'
    str_9 = {str_4: str_8}
    str_10 = {str_0: str_6, str_1: str_7, str_2: str_9, str_3: str_0}
    var_0 = None
    field_0 = module_0.if_then_else_from_json_schema(str_10, var_0)
    var_1 = field_0.if_clause
    var_2 = field_0.then_clause
    var_3 = field_0.else_clause

def test_case_17():
    string_0 = module_1.String()
    choice_0 = module_1.Choice()
    var_0 = module_0.to_json_schema(choice_0)

def test_case_18():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'maxLength'
    str_3 = 'string'
    int_0 = 1
    var_0 = {str_1: str_3, str_2: int_0}
    str_4 = 'minimum'
    str_5 = 'maximum'
    str_6 = 'integer'
    str_7 = 'number'
    str_8 = [str_6, str_7]
    int_1 = 0
    int_2 = 20
    var_1 = {str_1: str_8, str_4: int_1, str_5: int_2}
    var_2 = [var_0, var_1]
    var_3 = {str_0: var_2}
    field_0 = module_0.from_json_schema(var_3)

def test_case_19():
    str_0 = 'allOf'
    str_1 = 'type'
    str_2 = 'number'
    str_3 = {str_1: str_2}
    str_4 = 'minimum'
    int_0 = 0
    int_1 = {str_4: int_0}
    str_5 = 'maximum'
    int_2 = {str_5: int_0}
    var_0 = [str_3, int_1, int_2]
    var_1 = {str_0: var_0}
    schema_definitions_0 = module_2.SchemaDefinitions()
    field_0 = module_0.all_of_from_json_schema(var_1, schema_definitions_0)

def test_case_20():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'number'
    str_3 = {str_1: str_2}
    str_4 = [str_3]
    str_5 = {str_0: str_4}
    var_0 = None
    field_0 = module_0.any_of_from_json_schema(str_5, var_0)
    number_0 = module_1.Number()
    number_1 = [number_0]
    union_0 = module_1.Union(number_1)

def test_case_21():
    str_0 = 'type'
    str_1 = 'null'
    str_2 = {str_0: str_1}
    var_0 = None
    field_0 = module_0.type_from_json_schema(str_2, var_0)
    const_0 = module_1.Const(var_0)
    str_3 = 'boolean'
    str_4 = [str_3, str_1]
    str_5 = {str_0: str_4}
    field_1 = module_0.type_from_json_schema(str_5, var_0)
    boolean_0 = module_1.Boolean()
    const_1 = module_1.Const(var_0)
    union_0 = field_1.__or__(field_0)
    str_6 = 'string'
    str_7 = [str_6, str_1]
    str_8 = {str_0: str_7}
    field_2 = module_0.type_from_json_schema(str_8, var_0)
    string_0 = module_1.String()
    const_2 = module_1.Const(var_0)
    var_1 = [string_0, const_2]
    union_1 = module_1.Union(var_1)

def test_case_22():
    integer_0 = module_1.Integer()
    var_0 = module_0.to_json_schema(integer_0)
    int_0 = 10
    integer_1 = module_1.Integer(minimum=int_0)
    var_1 = module_0.to_json_schema(integer_1)
    float_0 = module_1.Float()
    var_2 = module_0.to_json_schema(float_0)
    str_0 = '0.1'
    decimal_0 = module_3.Decimal()
    boolean_0 = module_1.Boolean()
    var_3 = module_0.to_json_schema(boolean_0)
    bool_0 = True
    boolean_1 = module_1.Boolean(allow_null=bool_0)
    var_4 = module_0.to_json_schema(boolean_1)

def test_case_23():
    bool_0 = True
    field_0 = module_0.from_json_schema(bool_0)
    var_0 = module_0.to_json_schema(field_0)
    bool_1 = False
    field_1 = module_0.from_json_schema(bool_1)
    var_1 = module_0.to_json_schema(field_1)
    str_0 = 'type'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    field_2 = module_0.from_json_schema(str_2)
    var_2 = module_0.to_json_schema(field_2)
    str_3 = 'minLength'
    bool_2 = {str_3: bool_0}
    field_3 = module_0.from_json_schema(bool_2)
    var_3 = module_0.to_json_schema(field_3)
    str_4 = 'maxLength'
    int_0 = 2
    int_1 = {str_4: int_0}
    field_4 = module_0.from_json_schema(int_1)
    var_4 = module_0.to_json_schema(field_4)

def test_case_24():
    str_0 = 'type'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    field_0 = module_0.from_json_schema(str_2)
    var_0 = module_0.to_json_schema(field_0)
    str_3 = 'minLength'
    any_0 = field_0.get_default_value()
    int_0 = 2
    int_1 = {str_3: int_0}
    field_1 = module_0.from_json_schema(int_1)