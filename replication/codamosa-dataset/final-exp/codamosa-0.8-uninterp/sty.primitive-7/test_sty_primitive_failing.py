# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        register_0 = module_0.Register()
        str_0 = 'Hko'
        list_0 = [register_0, register_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        str_0 = register_0.__call__()
        list_0 = [str_0, str_0, str_0]
        dict_0 = {register_0: list_0}
        register_0.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_0.unmute()
        str_0 = register_1.__call__()
        list_0 = []
        register_0.set_rgb_call(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        str_0 = 'Register'
        var_0 = register_0.__setattr__(str_0, style_0)
        register_3 = register_2.copy()
        register_4 = register_2.copy()
        register_5 = module_0.Register()
        register_0.unmute()
        type_0 = None
        callable_0 = None
        register_0.set_renderfunc(type_0, callable_0)
        register_6 = register_5.copy()
        dict_0 = register_0.as_dict()
        register_1.set_rgb_call(register_5)
    except BaseException:
        pass

def test_case_4():
    try:
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        str_0 = 'Register'
        var_0 = register_0.__setattr__(str_0, style_0)
        register_3 = register_2.copy()
        register_4 = register_2.copy()
        register_5 = module_0.Register()
        register_0.unmute()
        register_6 = register_5.copy()
        register_1.mute()
        dict_0 = register_0.as_dict()
        register_1.set_rgb_call(register_5)
    except BaseException:
        pass

def test_case_5():
    try:
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = module_0.Register()
        str_0 = register_0.__call__()
        str_1 = 'Register'
        var_0 = register_0.__setattr__(str_1, style_0)
        register_3 = register_2.copy()
        register_1.mute()
        dict_0 = register_0.as_dict()
        register_2.set_eightbit_call(style_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        dict_0 = register_1.as_dict()
        str_0 = '=Wc\\tC'
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        style_1 = module_0.Style()
        style_2 = module_0.Style()
        register_2 = module_0.Register()
        str_1 = register_2.__call__()
        register_1.mute()
        register_0.mute()
        dict_1 = register_0.as_dict()
        list_0 = [var_0, str_1, dict_1]
        register_2.set_rgb_call(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_0 = 'Hko'
        register_2 = register_0.copy()
        register_3 = module_0.Register()
        list_0 = [str_0]
        str_1 = register_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        list_0 = [register_0, register_0]
        style_0 = module_0.Style(*list_0)
        int_0 = -3546
        list_1 = [int_0]
        str_0 = register_1.__call__(*list_1)
        str_1 = '\n        Export color register as namedtuple.\n        '
        var_0 = register_1.__setattr__(str_1, style_0)
    except BaseException:
        pass