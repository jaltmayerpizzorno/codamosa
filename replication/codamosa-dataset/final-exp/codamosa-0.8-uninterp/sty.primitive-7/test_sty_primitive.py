# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    register_0 = module_0.Register()

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    list_0 = [register_1, register_0]
    style_0 = module_0.Style(*list_0)
    str_0 = register_0.__call__()
    style_1 = module_0.Style()
    var_0 = register_1.__setattr__(str_0, style_1)
    register_3 = register_2.copy()

def test_case_3():
    register_0 = module_0.Register()
    str_0 = register_0.__call__()
    register_0.mute()

def test_case_4():
    register_0 = module_0.Register()
    var_0 = register_0.as_namedtuple()
    dict_0 = {}
    register_0.mute()
    style_0 = module_0.Style(**dict_0)
    register_0.mute()
    register_0.unmute()
    dict_1 = register_0.as_dict()
    register_1 = module_0.Register()
    type_0 = None
    int_0 = -52
    register_1.set_renderfunc(type_0, int_0)

def test_case_5():
    register_0 = module_0.Register()
    register_0.mute()

def test_case_6():
    register_0 = module_0.Register()
    var_0 = register_0.as_namedtuple()

def test_case_7():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    register_3 = register_2.copy()

def test_case_8():
    type_0 = None
    register_0 = module_0.Register()
    str_0 = '\neYt1^)0"Iwg,-\\lJ'
    register_0.set_renderfunc(type_0, str_0)
    dict_0 = register_0.as_dict()
    register_0.mute()
    register_0.set_renderfunc(type_0, register_0)
    register_1 = register_0.copy()
    str_1 = '\n    This is the base Register class. All default registers (fg, bg, ef, rs) are\n    created from this class. You can use it to create your own custom registers.\n    '
    list_0 = [str_1]
    register_1.unmute()
    register_0.set_renderfunc(type_0, list_0)
    register_1.set_eightbit_call(type_0)
    register_1.set_rgb_call(type_0)
    list_1 = [register_1, register_0, type_0, register_1]
    register_0.set_renderfunc(type_0, list_1)

def test_case_9():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    str_0 = register_0.__call__()
    str_1 = 'Register'
    register_2 = register_0.copy()
    register_3 = module_0.Register()
    register_0.unmute()
    register_4 = register_3.copy()
    register_1.mute()
    dict_0 = register_0.as_dict()
    register_5 = register_4.copy()
    register_6 = register_0.copy()
    register_7 = register_5.copy()
    register_8 = register_5.copy()
    register_9 = register_3.copy()
    register_10 = register_8.copy()
    register_11 = register_4.copy()
    register_12 = register_11.copy()
    str_2 = '4ZrO=|qOQ\r#1O?+$'
    list_0 = [str_0, str_1, str_2]
    str_3 = register_5.__call__(*list_0)
    register_12.mute()
    style_0 = module_0.Style()

def test_case_10():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_0.copy()
    register_0.mute()
    str_0 = register_0.__call__()
    var_0 = register_2.as_namedtuple()
    register_0.mute()
    dict_0 = register_0.as_dict()
    register_3 = module_0.Register()
    register_4 = module_0.Register()
    register_4.mute()
    type_0 = None
    var_1 = register_3.as_namedtuple()
    callable_0 = None
    register_5 = register_0.copy()
    register_5.set_renderfunc(type_0, callable_0)
    style_0 = None
    var_2 = register_2.__setattr__(str_0, style_0)
    var_3 = register_2.__setattr__(str_0, style_0)
    register_0.mute()
    register_4.unmute()