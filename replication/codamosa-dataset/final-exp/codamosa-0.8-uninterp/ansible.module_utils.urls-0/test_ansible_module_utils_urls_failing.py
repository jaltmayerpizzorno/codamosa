# Automatically generated by Pynguin.
import ansible.module_utils.urls as module_0

def test_case_0():
    try:
        str_0 = 'b*JoQ'
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0)
        set_0 = set()
        str_1 = '2h~.+HWXkvp=HTEqg?'
        missing_module_error_0 = module_0.MissingModuleError(set_0, str_1)
        var_0 = request_0.patch(missing_module_error_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        var_0 = module_0.url_argument_spec()
        bytes_0 = b'{'
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(dict_0, bytes_0)
        str_0 = '5QVrJ3*Klv1eFd6y'
        dict_1 = {str_0: bytes_0, str_0: str_0, str_0: bytes_0, str_0: dict_0}
        var_1 = h_t_t_p_s_client_auth_handler_0.https_open(dict_1)
    except BaseException:
        pass

def test_case_3():
    try:
        no_s_s_l_error_0 = module_0.NoSSLError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(no_s_s_l_error_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        list_1 = [list_0]
        dict_0 = {}
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(dict_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(custom_h_t_t_p_s_handler_0)
        var_0 = unix_h_t_t_p_s_connection_0.__call__(*list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n        Initializes this object with a valid Templar() object, as\n        well as several dictionaries of variables representing\n        different scopes (in jinja2 terminology).\n        '
        var_0 = module_0.generic_urlparse(str_0)
        float_0 = -3956.6666
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(float_0)
        var_1 = unix_h_t_t_p_connection_0.__call__()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Rv\n&?%;oeK'
        dict_0 = {str_0: str_0}
        request_0 = module_0.Request(dict_0, str_0)
        var_0 = request_0.put(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(s_s_l_validation_error_0)
        float_0 = 200.02653
        str_0 = '3rDz'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(float_0, str_0)
        var_0 = s_s_l_validation_handler_0.validate_proxy_response(unix_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -776
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(int_0)
        var_0 = module_0.prepare_multipart(unix_h_t_t_p_connection_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        connection_error_0 = module_0.ConnectionError(**dict_0)
        bytes_0 = b'o\x1e\x18'
        var_0 = module_0.basic_auth_header(connection_error_0, bytes_0)
        str_0 = 'b*JoQ'
        list_0 = []
        var_1 = module_0.atexit_remove_file(str_0)
        dict_1 = {}
        request_0 = module_0.Request(dict_1, str_0)
        var_2 = request_0.put(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'x{&n%T`cqYXGKI?u+\t'
        list_0 = [str_0]
        list_1 = [list_0, str_0, str_0, str_0]
        parse_result_dotted_dict_0 = None
        float_0 = -3007.178347
        no_s_s_l_error_0 = module_0.NoSSLError()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(parse_result_dotted_dict_0, float_0, no_s_s_l_error_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        float_1 = -2798.280953
        var_0 = module_0.fetch_url(list_0, list_1, unix_h_t_t_p_connection_0, str_0, float_1)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        var_0 = module_0.get_channel_binding_cert_hash(dict_0)
        request_with_method_0 = None
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(request_with_method_0)
        list_0 = [request_with_method_0, custom_h_t_t_p_s_handler_0]
        proxy_error_0 = module_0.ProxyError(*list_0)
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(proxy_error_0)
        s_s_l_validation_error_0 = None
        no_s_s_l_error_0 = module_0.NoSSLError()
        request_with_method_1 = module_0.RequestWithMethod(h_t_t_p_s_client_auth_handler_0, s_s_l_validation_error_0, custom_h_t_t_p_s_handler_0, no_s_s_l_error_0)
    except BaseException:
        pass

def test_case_12():
    try:
        connection_error_0 = module_0.ConnectionError()
        str_0 = 'ftp'
        connection_error_1 = module_0.ConnectionError()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, str_0)
        dict_0 = {}
        str_1 = "^Lfkw'>{"
        var_0 = s_s_l_validation_handler_0.validate_proxy_response(dict_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = None
        str_0 = 'http://www.google.com'
        var_1 = module_0.fetch_file(var_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'split'
        list_0 = [str_0, str_0]
        proxy_error_0 = module_0.ProxyError(*list_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(proxy_error_0, proxy_error_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
        bytes_0 = b'Q'
        request_0 = module_0.Request(bytes_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -1321.024
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(parse_result_dotted_dict_0)
        var_0 = custom_h_t_t_p_s_handler_0.https_open(float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '/tmp/foo'
        str_1 = '{l/uA=[@7n'
        var_0 = module_0.generic_urlparse(str_1)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(str_0)
        var_1 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_17():
    try:
        tuple_0 = None
        var_0 = module_0.getpeercert(tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'aaB9LF&@?mVgRd'
        bool_0 = False
        int_0 = 146
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(str_0, bool_0, int_0)
        var_0 = module_0.get_channel_binding_cert_hash(s_s_l_validation_handler_0)
        bytes_0 = b'\xa4\tE\xc8\x19\xc5C'
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bytes_0)
        dict_0 = {}
        var_1 = module_0.rfc2822_date_string(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        connection_error_0 = module_0.ConnectionError()
        str_0 = 'urllib3'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, str_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_connection_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(unix_h_t_t_p_handler_0)
        list_0 = [unix_h_t_t_p_s_connection_0]
        proxy_error_0 = module_0.ProxyError(*list_0)
        var_0 = s_s_l_validation_handler_0.http_request(proxy_error_0)
    except BaseException:
        pass

def test_case_20():
    try:
        connection_error_0 = module_0.ConnectionError()
        request_with_method_0 = None
        float_0 = -911.962
        dict_0 = {}
        str_0 = "l'@w\x0c][2$ir"
        str_1 = '6'
        tuple_0 = (str_1,)
        list_0 = [dict_0, str_0, tuple_0]
        str_2 = 'w2]B-K\x0bdT'
        dict_1 = {str_2: float_0}
        float_1 = 2.0
        request_0 = module_0.Request(dict_1, request_with_method_0, float_1)
        var_0 = request_0.options(list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        str_0 = '0z'
        list_0 = []
        dict_1 = {}
        request_0 = module_0.Request(list_0, dict_1, dict_0, str_0, dict_1)
        var_0 = request_0.put(str_0, **dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        connection_error_0 = module_0.ConnectionError()
        str_0 = 'ftp'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, str_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        list_0 = [str_0, unix_h_t_t_p_connection_0, s_s_l_validation_handler_0]
        var_0 = s_s_l_validation_handler_0.detect_no_proxy(list_0)
        list_1 = []
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_1)
        var_1 = s_s_l_validation_handler_0.make_context(list_0, s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_23():
    try:
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        connection_error_0 = module_0.ConnectionError()
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(parse_result_dotted_dict_0, custom_h_t_t_p_s_handler_0)
        s_s_l_validation_handler_1 = module_0.SSLValidationHandler(s_s_l_validation_handler_0, s_s_l_validation_handler_0, connection_error_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_1)
        s_s_l_validation_handler_2 = module_0.SSLValidationHandler(connection_error_0, unix_h_t_t_p_connection_0)
        list_0 = [s_s_l_validation_error_0, s_s_l_validation_error_0, custom_h_t_t_p_s_handler_0]
        no_s_s_l_error_0 = module_0.NoSSLError()
        set_0 = set()
        unix_h_t_t_p_connection_1 = module_0.UnixHTTPConnection(set_0)
        str_0 = '\x0cx'
        s_s_l_validation_handler_3 = module_0.SSLValidationHandler(no_s_s_l_error_0, unix_h_t_t_p_connection_1, str_0)
        var_0 = s_s_l_validation_handler_3.make_context(s_s_l_validation_handler_2, list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        connection_error_0 = module_0.ConnectionError()
        float_0 = 1480.7267080244671
        dict_0 = {float_0: connection_error_0}
        var_0 = module_0.prepare_multipart(dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        connection_error_0 = module_0.ConnectionError()
        str_0 = 'ftp'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, str_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        list_0 = []
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_connection_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(unix_h_t_t_p_handler_0)
        list_1 = []
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_1)
        var_0 = s_s_l_validation_handler_0.make_context(list_0, s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_26():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        str_0 = 'split'
        list_0 = [str_0, str_0]
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0)
        var_0 = custom_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_27():
    try:
        list_0 = []
        var_0 = module_0.get_channel_binding_cert_hash(list_0)
        connection_error_0 = module_0.ConnectionError()
        str_0 = 'urllib3'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, str_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        list_1 = []
        var_1 = s_s_l_validation_handler_0.detect_no_proxy(list_1)
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_connection_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(unix_h_t_t_p_handler_0)
        connection_error_1 = module_0.ConnectionError()
        missing_module_error_0 = module_0.MissingModuleError(s_s_l_validation_handler_0, connection_error_1)
        dict_0 = {unix_h_t_t_p_handler_0: unix_h_t_t_p_connection_0}
        list_2 = [dict_0]
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict(*list_2)
        var_2 = unix_h_t_t_p_handler_0.http_open(connection_error_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'localhost'
        int_0 = 429
        var_0 = module_0.build_ssl_validation_error(str_0, int_0, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        connection_error_0 = module_0.ConnectionError()
        str_0 = 'ur:lib\\'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, str_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        list_0 = []
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_connection_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(unix_h_t_t_p_handler_0)
        missing_module_error_0 = module_0.MissingModuleError(s_s_l_validation_handler_0, unix_h_t_t_p_s_connection_0)
        tuple_0 = (missing_module_error_0,)
        no_s_s_l_error_0 = None
        bool_0 = True
        request_0 = module_0.Request(list_0, str_0, unix_h_t_t_p_handler_0, tuple_0, no_s_s_l_error_0, bool_0, unix_h_t_t_p_handler_0)
        var_0 = request_0.put(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'L8,ykOY}P\r;u'
        dict_0 = {str_0: str_0}
        request_0 = module_0.Request(dict_0, str_0)
        str_1 = '|1JC=cb\x0cOQ)V-:-'
        var_0 = request_0.put(str_1)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '\n        Initializes this object with a valid Templar() object, as\n        well as several dictionaries of variables representing\n        different scopes (in jinja2 terminology).\n        '
        var_0 = module_0.generic_urlparse(str_0)
        float_0 = 544.5509
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(float_0)
        str_1 = 'OXE6@:\r#z6dx&'
        dict_0 = {str_0: unix_h_t_t_p_connection_0, str_0: var_0, str_1: float_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict(**dict_0)
        set_0 = {str_0}
        int_0 = 834
        request_0 = module_0.Request(parse_result_dotted_dict_0, unix_h_t_t_p_connection_0, set_0, int_0, dict_0)
        var_1 = request_0.put(str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        connection_error_0 = module_0.ConnectionError()
        str_0 = 'jr:lib\\'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, str_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_connection_0)
        s_s_l_validation_error_0 = None
        var_0 = s_s_l_validation_handler_0.make_context(unix_h_t_t_p_connection_0, s_s_l_validation_error_0)
    except BaseException:
        pass

def test_case_33():
    try:
        dict_0 = {}
        str_0 = 'z0B'
        list_0 = []
        dict_1 = {}
        request_0 = module_0.Request(list_0, dict_1, dict_0, str_0, dict_1)
        str_1 = 'C!d/B\x0c<,z"%@\x0bf%4U5%\n'
        str_2 = '2]RoY[A&Ow'
        set_0 = set()
        dict_2 = {str_1: request_0, str_2: set_0, str_1: str_2}
        str_3 = ':Pe;'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_3)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(dict_2, unix_h_t_t_p_handler_0, request_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'F'
        dict_0 = {str_0: str_0, str_0: str_0}
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        list_0 = [custom_h_t_t_p_s_handler_0, str_0, str_0]
        var_0 = module_0.get_channel_binding_cert_hash(list_0)
        set_0 = set()
        no_s_s_l_error_0 = module_0.NoSSLError()
        custom_h_t_t_p_s_handler_1 = module_0.CustomHTTPSHandler(no_s_s_l_error_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(set_0, custom_h_t_t_p_s_handler_1)
        var_1 = s_s_l_validation_handler_0.detect_no_proxy(custom_h_t_t_p_s_handler_0)
        request_0 = module_0.Request(dict_0, str_0)
        missing_module_error_0 = module_0.MissingModuleError(no_s_s_l_error_0, custom_h_t_t_p_s_handler_0)
        var_2 = module_0.build_ssl_validation_error(set_0, s_s_l_validation_handler_0, request_0, missing_module_error_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0}
        request_0 = module_0.Request(dict_0, str_0)
        var_0 = request_0.put(str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        tuple_0 = None
        h_t_t_p_s_client_auth_handler_0 = None
        var_0 = module_0.get_channel_binding_cert_hash(h_t_t_p_s_client_auth_handler_0)
        str_0 = '\t7@z?Z RDqtG2-9EJ'
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        str_1 = '(?'
        list_0 = []
        str_2 = 'P>W'
        dict_0 = {str_0: custom_h_t_t_p_s_handler_0, str_0: list_0, str_2: str_0, str_2: tuple_0}
        bool_0 = False
        request_0 = module_0.Request(bool_0, custom_h_t_t_p_s_handler_0)
        var_1 = request_0.delete(str_1, **dict_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'Rv\n&?%;oeK'
        dict_0 = {str_0: str_0}
        request_0 = module_0.Request(dict_0, str_0)
        list_0 = []
        var_0 = request_0.get(list_0)
    except BaseException:
        pass

def test_case_38():
    try:
        request_0 = None
        bool_0 = False
        float_0 = 3985.632
        set_0 = set()
        bytes_0 = b'*}\xbc\xe5\xe8;\xe8\xe4R\xadRW~A\xc6\xafJ%'
        list_0 = [bytes_0, float_0]
        connection_error_0 = module_0.ConnectionError(*list_0)
        complex_0 = None
        dict_0 = {}
        var_0 = module_0.open_url(request_0, bool_0, float_0, set_0, connection_error_0, complex_0, connection_error_0, dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        request_0 = None
        bool_0 = True
        float_0 = 3985.632
        set_0 = set()
        bytes_0 = b'*}\xbc\xe5\xe8;\xe8\xe4R\xadRW~A\xc6\xafJ%'
        list_0 = [bytes_0, float_0]
        connection_error_0 = module_0.ConnectionError(*list_0)
        complex_0 = None
        dict_0 = {}
        var_0 = module_0.open_url(request_0, bool_0, float_0, set_0, connection_error_0, complex_0, connection_error_0, dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'Rv%K'
        dict_0 = {str_0: str_0, str_0: str_0}
        request_0 = module_0.Request(dict_0, str_0)
        list_0 = []
        var_0 = request_0.post(list_0)
    except BaseException:
        pass

def test_case_41():
    try:
        connection_error_0 = module_0.ConnectionError()
        str_0 = '\neur:lib\\'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(connection_error_0, str_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        list_0 = []
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(unix_h_t_t_p_connection_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(unix_h_t_t_p_handler_0)
        missing_module_error_0 = module_0.MissingModuleError(s_s_l_validation_handler_0, unix_h_t_t_p_s_connection_0)
        tuple_0 = (missing_module_error_0,)
        no_s_s_l_error_0 = None
        bool_0 = True
        request_0 = module_0.Request(list_0, str_0, unix_h_t_t_p_handler_0, tuple_0, no_s_s_l_error_0, bool_0, unix_h_t_t_p_handler_0)
        dict_0 = {}
        str_1 = ',W'
        request_1 = None
        var_1 = module_0.open_url(missing_module_error_0, dict_0, str_1, unix_h_t_t_p_s_connection_0, request_1)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'B{*Cf0b B6\n7\rIbM5c0'
        dict_0 = {}
        request_0 = module_0.Request(dict_0, str_0)
        float_0 = 812.0
        var_0 = request_0.head(float_0)
    except BaseException:
        pass

def test_case_43():
    try:
        dict_0 = {}
        str_0 = 'z0B'
        proxy_error_0 = module_0.ProxyError()
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict(**dict_0)
        missing_module_error_0 = module_0.MissingModuleError(proxy_error_0, parse_result_dotted_dict_0)
        list_0 = []
        dict_1 = {}
        request_0 = module_0.Request(list_0, dict_1, dict_0, str_0, dict_1)
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        unix_h_t_t_p_handler_0 = None
        str_1 = '%~(%v'
        var_0 = module_0.open_url(h_t_t_p_s_client_auth_handler_0, missing_module_error_0, dict_1, unix_h_t_t_p_handler_0, str_1)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = '$'
        dict_0 = {str_0: str_0, str_0: str_0}
        dict_1 = {str_0: str_0, str_0: dict_0}
        var_0 = module_0.prepare_multipart(dict_1)
    except BaseException:
        pass