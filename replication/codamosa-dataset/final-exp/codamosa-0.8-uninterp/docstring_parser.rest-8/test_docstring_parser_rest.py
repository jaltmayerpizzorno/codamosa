# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '    First line of the docstring.\n\n    Second paragraph of the docstring.\n\n    :param arg1: The first argument.\n    :type arg1: int\n    :param arg2: The second argument.\n    :type arg2: str\n    :param arg3: The third argument.\n    :type arg3: bool\n    :return: None\n    :rtype: None\n    :raises AttributeError: If the attribute does not exist.\n    :raises ValueError: If the attribute does not have the correct value.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '@0hkBp0:;+Y1c\r'
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = '\x0b_l;:DkJi\nB;}l/0?\x0c'
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = 'This is a simple function.\n\n:param arg1: Description of first argument.\n:type arg1: str\n:param arg2: List of ints.\n:type arg2: list\n:param arg3: (Optional) A dictionary.\n:type arg3: dict\n:param arg4: (Optional, defaults to 1) An int.\n:type arg4: int\n:returns: Some value.\n:rtype: int\n:raises ValueError: If something goes wrong.\n'
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = '\n    Short description.\n\n    Long\n    description.\n\n    :param foo: Foo arg\n   :param int bar: Bar arg\n    :param int? baz: Baz arg\n    :param int bla: Bla arg\n    :return: Returns something\n    :raises ValueError: Raises this\n    :yields int: Yields this\n   '
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'parent example\n        :param x:\n        :param y:\n        :returns:\n        :rtype:\n        :raises:'
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '\n    Short description.\n\n    Long\n    description.\n\n    :param foo: Foo arg\n    :param int bar: Bar arg\n    :param int? baz: Baz arg\n    :param int bla: Bla arg\n    :return: Returns something\n    :raises ValueError: Raises this\n    :yields int: Yields this\n    '
    docstring_0 = module_0.parse(str_0)