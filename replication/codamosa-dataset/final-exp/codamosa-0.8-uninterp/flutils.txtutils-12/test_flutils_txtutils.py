# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    str_0 = 'e=b:\rdQ\n,N0?*}A\n||)'
    list_0 = [str_0, str_0, str_0]
    int_0 = module_0.len_without_ansi(list_0)

def test_case_1():
    str_0 = '__file__'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_2():
    str_0 = ':$t+Y~r0'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(str_0, str_0, bool_0, bool_0)

def test_case_3():
    str_0 = "5`;d%nVg's$gL[|["
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_4():
    str_0 = 'A0|gF`O|rD&A'
    int_0 = 475
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_5():
    str_0 = '`F!)`Jd9--MW '
    int_0 = 1244
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_6():
    str_0 = 'jN].a%.'
    str_1 = 'NamedTuple'
    set_0 = {str_1, str_1, str_0, str_1}
    int_0 = module_0.len_without_ansi(set_0)
    str_2 = 'zs7fT{0:@}IFs"@Cb]-\x0c'
    int_1 = 1440
    str_3 = '^Y'
    bool_0 = True
    bool_1 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_1, str_3, bool_0, bool_1)
    str_4 = ansi_text_wrapper_0.fill(str_2)
    str_5 = 'OzIlm'
    list_0 = ansi_text_wrapper_0.wrap(str_5)
    str_6 = 'S%-Mp:'
    str_7 = ansi_text_wrapper_0.fill(str_6)
    int_2 = 860
    bool_2 = True
    bool_3 = False
    str_8 = '1'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_2, bool_3, max_lines=int_2, placeholder=str_8)
    str_9 = ''
    list_1 = ansi_text_wrapper_1.wrap(str_9)

def test_case_7():
    str_0 = 'NamedTuple'
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = module_0.len_without_ansi(set_0)
    str_1 = 'zs7fT{0:@}IFs"@Cb]-\x0c'
    str_2 = '$G/Hav8&%\\ecz$'
    str_3 = 'n,>Lj'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_2, str_3, max_lines=int_0)
    bool_0 = True
    str_4 = ansi_text_wrapper_0.fill(str_1)
    str_5 = None
    bool_1 = True
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(str_5, bool_0, bool_1)
    list_0 = ansi_text_wrapper_0.wrap(str_4)

def test_case_8():
    str_0 = 'NamedITule'
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = module_0.len_without_ansi(set_0)
    str_1 = '_;-%UFQT1\r&e1'
    str_2 = '1'
    str_3 = '$G/Hav8&%\\ecz$'
    str_4 = 'nX\x0ccj'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_3, str_4, max_lines=int_0)
    str_5 = ansi_text_wrapper_0.fill(str_2)
    str_6 = ansi_text_wrapper_0.fill(str_1)
    bool_0 = False
    bool_1 = True
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(str_0, bool_0, bool_1)
    list_0 = ansi_text_wrapper_0.wrap(str_6)

def test_case_9():
    str_0 = 'NamedITule'
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = module_0.len_without_ansi(set_0)
    str_1 = '^Y'
    str_2 = 'XY>~v'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_2)
    str_3 = 'eV!`?,\r*m^)O}e-'
    str_4 = 'v/B6"O#'
    str_5 = 'The path: %r must be an absolute path.  A path is considered absolute if it has both a root and (if the flavour allows) a drive.'
    list_0 = ansi_text_wrapper_0.wrap(str_5)
    str_6 = ansi_text_wrapper_0.fill(str_1)
    list_1 = ansi_text_wrapper_0.wrap(str_4)
    str_7 = '"e\r]6V2]gW'
    list_2 = ansi_text_wrapper_0.wrap(str_7)
    str_8 = '$G/Hav8&%\\ecz$'
    str_9 = 'nX\x0ccj'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_8, str_9, max_lines=int_0)
    int_1 = module_0.len_without_ansi(list_1)
    str_10 = ansi_text_wrapper_1.fill(str_3)
    list_3 = ansi_text_wrapper_0.wrap(str_3)
    bool_0 = False
    bool_1 = True
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_10, bool_0, bool_1)
    list_4 = ansi_text_wrapper_1.wrap(str_10)

def test_case_10():
    str_0 = 'NamkT<ITule'
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = module_0.len_without_ansi(set_0)
    str_1 = '^Y'
    str_2 = 'XY>~v'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_2)
    str_3 = '_;-%UFQT1\r&e1'
    str_4 = 'The path: %r must be an absolute path.  A path is considered absolute if it has both a root and (if the flavour allows) a drive.'
    list_0 = ansi_text_wrapper_0.wrap(str_4)
    str_5 = ansi_text_wrapper_0.fill(str_1)
    str_6 = '"e\r]6V2]gW'
    list_1 = ansi_text_wrapper_0.wrap(str_6)
    str_7 = '1'
    str_8 = '$G/Hav8&%\\ecz$'
    str_9 = 'nX\x0ccj'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_8, str_9, max_lines=int_0)
    str_10 = ansi_text_wrapper_1.fill(str_7)
    list_2 = ansi_text_wrapper_1.wrap(str_4)
    int_1 = module_0.len_without_ansi(list_0)
    str_11 = ansi_text_wrapper_1.fill(str_3)
    list_3 = ansi_text_wrapper_0.wrap(str_3)
    bool_0 = False
    bool_1 = True
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_0, bool_0, bool_1)

def test_case_11():
    str_0 = 'NamedITule'
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = module_0.len_without_ansi(set_0)
    str_1 = '^Y'
    str_2 = 'XY>~v'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_2)
    str_3 = '_;-%UFQT1\r&e1'
    str_4 = 'Fs"@Cb]-'
    str_5 = 'The path: %r must be an absolute path.  A path is considered absolute if it has both a root and (if the flavour allows) a drive.'
    list_0 = ansi_text_wrapper_0.wrap(str_5)
    str_6 = ansi_text_wrapper_0.fill(str_1)
    list_1 = ansi_text_wrapper_0.wrap(str_4)
    str_7 = '"e\r]6V2]gW'
    list_2 = ansi_text_wrapper_0.wrap(str_7)
    str_8 = '1'
    str_9 = '$G/Hav8&%\\ecz$'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_9, str_1, max_lines=int_0)
    str_10 = ansi_text_wrapper_1.fill(str_8)
    list_3 = ansi_text_wrapper_1.wrap(str_5)
    int_1 = module_0.len_without_ansi(list_1)
    str_11 = ansi_text_wrapper_1.fill(str_3)
    list_4 = ansi_text_wrapper_0.wrap(str_3)
    bool_0 = False
    bool_1 = True
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_0, bool_0, bool_1)
    list_5 = ansi_text_wrapper_1.wrap(str_11)

def test_case_12():
    str_0 = 'NamedITule'
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = module_0.len_without_ansi(set_0)
    str_1 = '^Y'
    str_2 = 'XY>~v'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_2)
    str_3 = '_;-%UFQT1\r&e1'
    str_4 = 'Fs"@Cb]-'
    str_5 = 'The path: %r must be an absolute path.  A path is considered absolute if it has both a root and (if the flavour allows) a drive.'
    list_0 = ansi_text_wrapper_0.wrap(str_5)
    str_6 = ansi_text_wrapper_0.fill(str_1)
    list_1 = ansi_text_wrapper_0.wrap(str_4)
    str_7 = '"e\r]6V2]gW'
    list_2 = ansi_text_wrapper_0.wrap(str_7)
    str_8 = '1'
    str_9 = '$G/Hav8&%\\ecz$'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_9, str_8, max_lines=int_0)
    str_10 = ansi_text_wrapper_1.fill(str_8)
    list_3 = ansi_text_wrapper_1.wrap(str_5)
    str_11 = ansi_text_wrapper_1.fill(str_3)
    list_4 = ansi_text_wrapper_0.wrap(str_3)
    bool_0 = False
    bool_1 = True
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_0, bool_0, bool_1)
    list_5 = ansi_text_wrapper_1.wrap(str_11)