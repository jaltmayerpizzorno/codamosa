# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    try:
        str_0 = '\\y'
        int_0 = 191
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'C'
        bool_0 = True
        bool_1 = False
        bool_2 = True
        int_0 = 5635
        str_1 = 'exists_as'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_1, bool_2, max_lines=int_0, placeholder=str_1)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "5`;d%nVg's$gL[|["
        bool_0 = False
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1969
        str_0 = '!?d1l% aO!6M54%)>P'
        bool_0 = None
        bool_1 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, bool_0, bool_0, bool_0, bool_1)
        str_1 = '(~b&@'
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_0, str_1, bool_1)
        list_0 = ansi_text_wrapper_1.wrap(str_1)
        str_2 = ' Cannot be a special dunder.'
        str_3 = ansi_text_wrapper_0.fill(str_2)
        str_4 = None
        list_1 = ansi_text_wrapper_1.wrap(str_4)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'XE^g-?O%rs\x0cDb]'
        set_0 = {str_0, str_0, str_0, str_0}
        int_0 = module_0.len_without_ansi(set_0)
        str_1 = 'eV`?,\r*m^)O}e-'
        int_1 = 860
        bool_0 = True
        bool_1 = True
        str_2 = '1'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_1, max_lines=int_1, placeholder=str_2)
        list_0 = ansi_text_wrapper_0.wrap(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0]
        int_0 = module_0.len_without_ansi(list_0)
        bytes_0 = b'\xad\rS\x91\xdcf\xfa\xbd\xbd\xa3\xbe\x87\tT\x14d_/8'
        int_1 = module_0.len_without_ansi(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'NamedTuple'
        set_0 = {str_0, str_0, str_0, str_0}
        int_0 = module_0.len_without_ansi(set_0)
        str_1 = 'zs7fT{0:@}IFs"@Cb]-\x0c'
        int_1 = 1440
        str_2 = 'XY>~v'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_2)
        str_3 = ansi_text_wrapper_0.fill(str_1)
        str_4 = 'Fs"@Cb]-'
        str_5 = 'The path: %r must be an absolute path.  A path is considered absolute if it has both a root and (if the flavour allows) a drive.'
        list_0 = ansi_text_wrapper_0.wrap(str_5)
        list_1 = ansi_text_wrapper_0.wrap(str_4)
        bool_0 = True
        str_6 = ansi_text_wrapper_0.fill(str_1)
        bool_1 = True
        str_7 = '"e\r]6V2]W'
        list_2 = ansi_text_wrapper_0.wrap(str_7)
        bool_2 = True
        str_8 = '1'
        list_3 = ansi_text_wrapper_0.wrap(str_8)
        bool_3 = False
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_1, bool_0, bool_3)
        str_9 = 'uL]1Ihv0_>*E6al^Eo:'
        int_2 = -4316
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(bool_2, bool_0, int_1, max_lines=int_2)
        list_4 = ansi_text_wrapper_2.wrap(str_9)
    except BaseException:
        pass