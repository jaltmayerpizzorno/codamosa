# Automatically generated by Pynguin.
import ansible.plugins.action.validate_argument_spec as module_0

def test_case_0():
    try:
        bytes_0 = b'_\x9e,\x97\x02b\x80\x8f\xbd\x04\xd9\x9d\xc36'
        float_0 = -2046.39
        float_1 = -771.62341
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: float_1}
        str_0 = 'cDu,PfE6lcJ\t0&^T'
        action_module_0 = module_0.ActionModule(float_1, bool_0, dict_0, dict_0, str_0, float_1)
        var_0 = action_module_0.get_args_from_task_vars(bytes_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 0.0001
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        list_0 = []
        str_0 = "'Tj#W,AjuH0Htd"
        action_module_0 = module_0.ActionModule(dict_0, dict_0, list_0, list_0, str_0, dict_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'pKWmO\tgNpYS]\t^{\nE'
        bool_0 = True
        tuple_0 = (bool_0, bool_0)
        float_0 = 0.001
        dict_0 = {tuple_0: bool_0, float_0: float_0}
        bytes_0 = b'\xef\xb7 \x8d\xb3{\xee\xc4\xae1\x1b\xef\xc1\xca\xf3\x96v?\xea\xd8'
        set_0 = {bytes_0, tuple_0, tuple_0}
        bool_1 = False
        action_module_0 = module_0.ActionModule(dict_0, tuple_0, set_0, dict_0, str_0, bool_1)
        str_1 = "[r)14}ol'O\x0cN("
        list_0 = [bool_0, bytes_0]
        int_0 = 82
        action_module_1 = module_0.ActionModule(str_1, list_0, str_1, action_module_0, int_0, action_module_0)
        str_2 = 'pmx(;o;$Sc-,/;So'
        var_0 = action_module_1.run(int_0, str_2)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xf1\xb0\xbf\x80'
        bool_0 = True
        str_0 = 'RoleInclude'
        set_0 = {bool_0}
        dict_0 = {bytes_0: bytes_0}
        tuple_0 = (set_0, bool_0, dict_0)
        tuple_1 = (str_0, tuple_0)
        str_1 = '"1'
        int_0 = -282
        action_module_0 = module_0.ActionModule(str_1, set_0, set_0, str_0, int_0, str_0)
        str_2 = 'Mje-M:'
        action_module_1 = module_0.ActionModule(bytes_0, tuple_1, action_module_0, set_0, int_0, str_2)
        dict_1 = {str_2: str_1}
        action_module_2 = module_0.ActionModule(set_0, dict_0, int_0, set_0, action_module_0, set_0)
        var_0 = action_module_1.get_args_from_task_vars(dict_1, action_module_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'c_l\x0c\x0cN9V\ti?l:#6'
        bytes_0 = b'Y\x07\xe8x\x07u\x1b'
        bool_0 = False
        str_1 = '\n        Return a single named information item from the os-release file data\n        source of the OS distribution.\n\n        For details, see :func:`distro.os_release_attr`.\n        '
        bytes_1 = b'\x9f+\x1ef8\x1d\xe8\\\xc9\xaaX'
        list_0 = [bytes_1]
        float_0 = 799.27
        float_1 = 1167.7697
        action_module_0 = module_0.ActionModule(bytes_1, list_0, list_0, bool_0, float_0, float_1)
        action_module_1 = module_0.ActionModule(bytes_0, str_0, bool_0, str_1, action_module_0, bytes_0)
        dict_0 = {float_0: bytes_1, float_1: str_1, bool_0: action_module_1, bytes_0: bytes_0}
        int_0 = 697
        dict_1 = {int_0: bool_0}
        var_0 = action_module_0.get_args_from_task_vars(dict_0, dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        int_0 = 471
        dict_0 = {bool_0: int_0, int_0: int_0, bool_0: int_0}
        bool_1 = True
        float_0 = 1520.764708
        bytes_0 = None
        list_0 = [bytes_0]
        action_module_0 = module_0.ActionModule(bool_1, float_0, bool_0, list_0, dict_0, list_0)
        float_1 = 773.0
        set_0 = {float_1}
        tuple_0 = (bool_1, float_1, action_module_0, set_0)
        str_0 = "2,K%m\nv{'c<1"
        action_module_1 = module_0.ActionModule(action_module_0, tuple_0, int_0, float_0, str_0, tuple_0)
        float_2 = 0.0001
        tuple_1 = (action_module_1, dict_0, float_2, list_0)
        bool_2 = True
        list_1 = []
        str_1 = 'e(b`*d\t}P'
        int_1 = -620
        action_module_2 = module_0.ActionModule(set_0, str_1, list_0, str_0, int_1, list_0)
        tuple_2 = (tuple_1, bool_2, list_1, action_module_2)
        str_2 = 'U?ZfJ7\\|BR#d%56gmM:='
        str_3 = 'j|VH~\t`(i"i\r'
        bytes_1 = b''
        tuple_3 = ()
        str_4 = 'inode_total'
        list_2 = [str_4, str_2, tuple_3, str_3]
        bool_3 = True
        action_module_3 = module_0.ActionModule(str_2, str_3, bytes_1, tuple_3, list_2, bool_3)
        var_0 = action_module_3.get_args_from_task_vars(dict_0, tuple_2)
    except BaseException:
        pass