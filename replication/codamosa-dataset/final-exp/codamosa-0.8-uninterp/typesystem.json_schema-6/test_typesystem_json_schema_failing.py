# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2

def test_case_0():
    try:
        str_0 = '{"$ref": "#/definitions/Person"}'
        field_0 = module_0.from_json_schema(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        str_0 = '#/definitions/'
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '$ref'
        str_1 = '#/definitions/foo'
        str_2 = {str_0: str_1}
        string_0 = module_2.String()
        string_1 = {str_1: string_0}
        field_0 = module_0.ref_from_json_schema(str_2, string_1)
        var_0 = module_0.to_json_schema()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\\;A\x01\x8d\xe1\x8e\xcf\xaejB\xa3\n\xac\x88#(\xb2'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        field_0 = module_0.from_json_schema(dict_0)
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_1 = module_0.all_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\\;A\x01\x8d\xe1\x8e\xcf\xaejB\xa3\n\xac\x88#(\xb2'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        field_0 = module_0.from_json_schema(dict_0)
        tuple_0 = module_0.get_valid_types(dict_0)
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_1 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        list_0 = []
        schema_definitions_1 = module_1.SchemaDefinitions(*list_0)
        field_2 = module_0.any_of_from_json_schema(dict_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'^\xdc\\\xe9[\xe2\xf7lq\x02`cZ_\x90\x98\x9a\xc0\xfb'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'if'
        str_1 = 'string'
        str_2 = {str_1: str_1}
        str_3 = 'integer'
        str_4 = {str_1: str_3}
        str_5 = {str_0: str_2, str_0: str_4}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.if_then_else_from_json_schema(str_5, schema_definitions_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = None
        var_0 = module_0.to_json_schema(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'const'
        int_0 = 1
        int_1 = {str_0: int_0}
        var_0 = None
        field_0 = module_0.const_from_json_schema(int_1, var_0)
        any_0 = field_0.validate(int_0)
        int_2 = 2
        any_1 = field_0.validate(int_2)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\\;A\x01\x8d\xe1\x8e\xcf\xaejB\xa3\n\xac\x88#(\xb2'
        dict_0 = {bytes_0: bytes_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0)
        field_1 = module_0.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_10():
    try:
        field_0 = module_2.Field()
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'abc/def'
        reference_0 = module_1.Reference(str_0)
        str_1 = '$ref'
        str_2 = '#/definitions/abc/def'
        str_3 = {str_1: str_2}
        reference_1 = {reference_0}
        field_0 = module_0.ref_from_json_schema(str_3, reference_1)
        dict_0 = module_0.get_standard_properties(field_0)
        var_0 = module_0.to_json_schema(field_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '$ref'
        str_1 = '7\x0clOS,BD\nM#'
        str_2 = {str_1: str_1, str_0: str_1, str_0: str_1}
        string_0 = module_2.String()
        string_1 = {str_1: string_0}
        field_0 = module_0.ref_from_json_schema(str_2, string_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'enum'
        str_1 = 'one'
        str_2 = 'two'
        str_3 = [str_1, str_2]
        str_4 = {str_0: str_3}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.enum_from_json_schema(str_4, schema_definitions_0)
        any_0 = field_0.validate(str_1)
        any_1 = field_0.validate(str_2)
        var_0 = module_0.to_json_schema(field_0)
        str_5 = 'three'
        any_2 = field_0.validate(str_5)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1042
        const_0 = module_2.Const(int_0)
        bytes_0 = b'\\;A\x01\x8d\x86\xe1\xd0\xcf\xae\xb6B\xa3\n\x1d\xac\x88\x97]\xb2'
        bool_0 = True
        str_0 = 'U,&j.p`L+(<a$)6Xt'
        string_0 = module_2.String(allow_blank=bool_0, max_length=int_0, format=str_0)
        var_0 = module_0.to_json_schema(string_0)
        dict_0 = {bytes_0: bytes_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        tuple_0 = module_0.get_valid_types(dict_0)
        str_0 = 'type'
        object_0 = module_2.Object(required=str_0)
        var_0 = module_0.to_json_schema(object_0, dict_0)
        field_0 = None
        var_1 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'not'
        str_1 = 'minLength'
        str_2 = 'maxLength'
        str_3 = 'string'
        int_0 = 1
        int_1 = 10
        var_0 = {str_3: str_3, str_1: int_0, str_2: int_1}
        var_1 = {str_0: var_0}
        var_2 = None
        field_0 = module_0.not_from_json_schema(var_1, var_2)
        var_3 = field_0._negated.max_length
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'oneOf'
        str_1 = 'type'
        str_2 = 'inoteger'
        str_3 = {str_1: str_2, str_0: str_0}
        str_4 = [str_2, str_3]
        str_5 = {str_0: str_0, str_2: str_3, str_0: str_4}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.one_of_from_json_schema(str_5, schema_definitions_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'if'
        str_1 = 'else'
        int_0 = 1
        int_1 = {str_0: int_0}
        int_2 = 2
        int_3 = {str_0: int_2}
        int_4 = 3
        int_5 = {str_0: int_4}
        int_6 = {str_0: int_1, str_0: int_3, str_1: int_5}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.if_then_else_from_json_schema(int_6, schema_definitions_0)
    except BaseException:
        pass