# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3
import decimal as module_4

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\\;A\x01\x8d\x86\xe1\x8e\xcf\xaejB\xa3\n\xac\x88#(\xb2'
    dict_0 = {bytes_0: bytes_0}
    field_0 = module_0.from_json_schema(dict_0)

def test_case_2():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    field_1 = module_0.from_json_schema(bool_0)

def test_case_3():
    dict_0 = {}
    str_0 = 'B)Vs'
    dict_1 = {str_0: str_0}
    schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)

def test_case_4():
    dict_0 = {}
    tuple_0 = module_0.get_valid_types(dict_0)

def test_case_5():
    str_0 = 'enum'
    str_1 = 'type'
    str_2 = 'fred'
    str_3 = 'freddy'
    str_4 = [str_2, str_3]
    str_5 = 'string'
    str_6 = {str_0: str_4, str_0: str_4, str_1: str_5}
    field_0 = module_0.from_json_schema(str_6)

def test_case_6():
    bytes_0 = b'\\;A\x01\x8d\x86\xe1\x8e\xcf\xaejB\xa3\n\xac\x88#(\xb2'
    dict_0 = {bytes_0: bytes_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    dict_1 = module_0.get_standard_properties(field_0)
    field_1 = module_0.from_json_schema(dict_1, schema_definitions_0)

def test_case_7():
    bytes_0 = b'\\;A\x01\x8d\x86\xe1\x8e\xcf\xaejB\xa3\n\xac\x88#(\xb2'
    dict_0 = {bytes_0: bytes_0}
    field_0 = module_0.from_json_schema(dict_0)
    var_0 = module_0.to_json_schema(field_0, dict_0)

def test_case_8():
    bool_0 = True
    string_0 = module_2.String()
    var_0 = module_0.to_json_schema(string_0)

def test_case_9():
    schema_definitions_0 = module_1.SchemaDefinitions()
    var_0 = module_0.to_json_schema(schema_definitions_0)
    str_0 = '#/definitions/'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    tuple_0 = module_0.get_valid_types(dict_0)

def test_case_10():
    bytes_0 = b'\\;A\x01\x8d\xe1\x8e\xcf\xaejB\xa3\n\xac\x88#(\xb2'
    dict_0 = {bytes_0: bytes_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_11():
    any_0 = module_2.Any()
    var_0 = module_0.to_json_schema(any_0)
    never_match_0 = module_3.NeverMatch()
    var_1 = module_0.to_json_schema(never_match_0)
    string_0 = module_2.String()
    var_2 = module_0.to_json_schema(string_0)
    bool_0 = True
    string_1 = module_2.String()
    var_3 = module_0.to_json_schema(string_1)
    int_0 = 5
    string_2 = module_2.String(min_length=int_0)
    var_4 = module_0.to_json_schema(string_2)
    int_1 = 10
    string_3 = module_2.String(max_length=int_1)
    var_5 = module_0.to_json_schema(string_2)

def test_case_12():
    str_0 = 'definitions'
    str_1 = '$ref'
    str_2 = 'Defined'
    str_3 = 'type'
    str_4 = 'string'
    str_5 = {str_3: str_4}
    str_6 = {str_2: str_5}
    str_7 = '#/definitions/Defined'
    str_8 = {str_0: str_6, str_1: str_7}
    field_0 = module_0.from_json_schema(str_8)
    var_0 = module_0.to_json_schema(field_0)

def test_case_13():
    str_0 = '$schema'
    str_1 = 'enum'
    str_2 = 'http://json-schema.org/draft-04/schema#'
    str_3 = 'fred'
    str_4 = 'freddy'
    str_5 = [str_3, str_4]
    str_6 = 'string'
    str_7 = {str_0: str_2, str_1: str_5, str_6: str_6}
    field_0 = module_0.from_json_schema(str_7)

def test_case_14():
    str_0 = 'oneOf'
    str_1 = 'type'
    str_2 = 'integer'
    str_3 = {str_1: str_2, str_0: str_0}
    str_4 = [str_2, str_3]
    str_5 = {str_0: str_0, str_2: str_3, str_0: str_4}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.one_of_from_json_schema(str_5, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_15():
    str_0 = '$schema'
    str_1 = '$id'
    str_2 = 'title'
    str_3 = 'type'
    str_4 = 'properties'
    str_5 = 'required'
    str_6 = 'http://json-schema.org/draft-07/schema#'
    str_7 = 'http://example.com/product.schema.json'
    str_8 = 'Product'
    str_9 = 'object'
    str_10 = 'productId'
    str_11 = 'description'
    str_12 = 'The unique identifier for a product'
    str_13 = 'integer'
    str_14 = {str_11: str_12, str_3: str_13}
    str_15 = {str_10: str_14}
    str_16 = [str_10]
    str_17 = {str_0: str_6, str_1: str_7, str_2: str_8, str_3: str_9, str_4: str_15, str_5: str_16}
    field_0 = module_0.from_json_schema(str_17)
    var_0 = module_0.to_json_schema(field_0)

def test_case_16():
    str_0 = 'const'
    int_0 = 1
    int_1 = {str_0: int_0}
    var_0 = None
    field_0 = module_0.const_from_json_schema(int_1, var_0)
    any_0 = field_0.validate(int_0)
    var_1 = module_0.to_json_schema(field_0)

def test_case_17():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'const'
    int_0 = 1
    int_1 = {str_3: int_0}
    int_2 = 2
    int_3 = {str_3: int_2}
    int_4 = 3
    int_5 = {str_3: int_4}
    int_6 = {str_0: int_1, str_1: int_3, str_2: int_5}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.if_then_else_from_json_schema(int_6, schema_definitions_0)

def test_case_18():
    str_0 = 'type'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    str_3 = 'integer'
    str_4 = {str_0: str_3}
    str_5 = [str_2, str_4]
    str_6 = 'foobar'
    var_0 = dict(anyOf=str_5, default=str_6)
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.any_of_from_json_schema(var_0, schema_definitions_0)
    string_0 = module_2.String()
    integer_0 = module_2.Integer()
    var_1 = [string_0, integer_0]
    union_0 = module_2.Union(var_1)

def test_case_19():
    str_0 = 'oneOf'
    str_1 = {str_0: str_0}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.one_of_from_json_schema(str_1, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_20():
    var_0 = {}
    field_0 = module_0.from_json_schema(var_0)
    any_0 = module_2.Any()
    str_0 = 'type'
    str_1 = 'object'
    str_2 = {str_0: str_1}
    field_1 = module_0.from_json_schema(str_2)
    object_0 = module_2.Object()
    str_3 = 'minLength'
    str_4 = 'string'
    int_0 = 3
    var_1 = {str_0: str_4, str_3: int_0}
    field_2 = module_0.from_json_schema(var_1)
    string_0 = module_2.String(min_length=int_0)

def test_case_21():
    bool_0 = True
    string_0 = module_2.String()
    var_0 = module_0.to_json_schema(string_0)
    integer_0 = module_2.Integer()
    var_1 = module_0.to_json_schema(integer_0)

def test_case_22():
    str_0 = 'oneOf'
    str_1 = 'integer'
    str_2 = {str_0: str_1, str_0: str_0}
    str_3 = [str_1, str_2]
    str_4 = {str_0: str_0, str_1: str_2, str_0: str_3}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.one_of_from_json_schema(str_4, schema_definitions_0)
    var_0 = module_0.to_json_schema(field_0)

def test_case_23():
    str_0 = 'anyOf'
    str_1 = 'const'
    str_2 = 'default'
    int_0 = 1
    int_1 = 2
    str_3 = 'number'
    str_4 = 'minimum'
    int_2 = 3
    var_0 = {}
    str_5 = 'not'
    str_6 = 'allOf'
    int_3 = {str_1: int_0, str_2: int_0}
    int_4 = {str_1: int_1}
    int_5 = {str_4: int_2}
    int_6 = {str_3: int_5}
    int_7 = [int_3, int_4, int_6]
    int_8 = {str_0: int_7}
    int_9 = [int_8]
    int_10 = {str_6: int_9}
    int_11 = {str_5: int_10}
    field_0 = module_0.not_from_json_schema(int_11, var_0)
    int_12 = 0
    var_1 = int_11[str_5][str_6][int_12][str_0][int_12]

def test_case_24():
    bool_0 = False
    field_0 = module_0.from_json_schema(bool_0)
    never_match_0 = module_3.NeverMatch()
    bool_1 = True
    field_1 = module_0.from_json_schema(bool_1)
    any_0 = module_2.Any()
    str_0 = 'type'
    str_1 = 'string'
    str_2 = {str_0: str_1}
    field_2 = module_0.from_json_schema(str_2)
    string_0 = module_2.String()
    str_3 = 'items'
    str_4 = 'array'
    str_5 = {str_0: str_1}
    str_6 = {str_0: str_4, str_3: str_5}
    field_3 = module_0.from_json_schema(str_6)
    string_1 = module_2.String()
    array_0 = module_2.Array(string_1)
    str_7 = 'enum'
    str_8 = 'red'
    str_9 = 'green'
    str_10 = 'blue'
    str_11 = [str_8, str_9, str_10]
    str_12 = {str_0: str_1, str_7: str_11}
    field_4 = module_0.from_json_schema(str_12)
    str_13 = [str_8, str_9, str_10]
    choice_0 = module_2.Choice()
    str_14 = 'const'
    str_15 = {str_14: str_8}
    field_5 = module_0.from_json_schema(str_15)
    const_0 = module_2.Const(str_8)
    str_16 = 'allOf'
    str_17 = {str_0: str_1}
    str_18 = [str_17]
    str_19 = {str_16: str_18}
    field_6 = module_0.from_json_schema(str_19)
    string_2 = module_2.String()

def test_case_25():
    str_0 = 'oneOf'
    str_1 = 'type'
    str_2 = 'string'
    str_3 = {str_0: str_1, str_1: str_2}
    decimal_0 = module_4.Decimal()
    float_0 = module_2.Float(maximum=decimal_0)
    var_0 = module_0.to_json_schema(float_0)
    dict_0 = {}
    schema_definitions_0 = module_1.SchemaDefinitions()
    field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
    str_4 = [str_3, str_2]
    str_5 = {str_0: str_4}
    any_0 = field_0.serialize(str_3)
    schema_definitions_1 = module_1.SchemaDefinitions()
    tuple_0 = module_0.get_valid_types(dict_0)
    field_1 = module_0.one_of_from_json_schema(str_5, schema_definitions_1)
    var_1 = module_0.to_json_schema(field_1)
    var_2 = module_0.to_json_schema(field_0, dict_0)