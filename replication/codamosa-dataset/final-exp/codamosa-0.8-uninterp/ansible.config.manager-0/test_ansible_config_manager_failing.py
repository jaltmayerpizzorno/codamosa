# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager()
        config_manager_2 = module_0.ConfigManager()
        str_0 = 'nr<ZUSy4LdbR.'
        float_0 = 0.0001
        var_0 = config_manager_1.get_config_value_and_origin(str_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        var_0 = module_0.resolve_path(list_0)
        str_0 = '--vault-password-file'
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.update_config_data()
        bytes_0 = b'\xe3\xa8y'
        dict_0 = {bytes_0: var_0, var_1: str_0, var_1: var_0}
        var_2 = config_manager_0.get_plugin_vars(list_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1272
        var_0 = module_0.get_config_type(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'float'
        config_manager_0 = module_0.ConfigManager(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        int_0 = 8192
        config_manager_0 = module_0.ConfigManager()
        bool_0 = False
        var_0 = config_manager_0.get_plugin_options(list_0, int_0, config_manager_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -2236
        str_0 = 'ZC"Txqo(Kn>K8\rf2:'
        str_1 = "Don't wait for import validation results."
        str_2 = 'K%u^h<Y\rJX'
        str_3 = 'fKxn8N?X'
        float_0 = None
        list_0 = [float_0, str_0, float_0, str_3]
        list_1 = [str_3, str_0, list_0]
        dict_0 = {str_1: str_0, str_2: int_0, str_1: str_2, str_3: list_1}
        bytes_0 = b'Q\xc4b{\xfe.\xfe\x16\xcc~)'
        list_2 = [int_0, list_1, float_0, str_1]
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definition(dict_0, bytes_0, list_2)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        config_manager_0 = module_0.ConfigManager()
        bool_0 = False
        list_1 = [config_manager_0, list_0, bool_0, list_0]
        var_0 = config_manager_0.get_configuration_definitions(list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        bytes_0 = b'\t\xfd\xc3\x1f\xba\xd8\x14\xeb\x91\xd72tH\x18\xe2b\xaej'
        float_0 = 1198.0
        list_0 = [bytes_0, bool_0, float_0, bytes_0]
        complex_0 = None
        config_manager_0 = module_0.ConfigManager()
        float_1 = None
        str_0 = "*!^dp,lSNp~'`ue6\r)6f"
        str_1 = 'e$^?SQ8~>G,=vwNsyD3R'
        dict_0 = {str_1: complex_0, str_1: float_0}
        str_2 = 'HDL&OH^c:0}U1v'
        int_0 = 259
        int_1 = 32
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(int_0, float_0, int_1)
        set_0 = None
        var_1 = config_manager_0.get_configuration_definition(set_0)
        tuple_0 = (list_0, bool_0, dict_0, str_2)
        var_2 = config_manager_0.get_plugin_options(float_1, str_0, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '<[TZ_@)N'
        list_0 = [str_0, str_0, str_0, str_0]
        setting_0 = module_0.Setting(*list_0)
        str_1 = 'kx&'
        dict_0 = {str_1: str_1}
        var_0 = module_0.find_ini_config_file(list_0)
        var_1 = module_0.ensure_type(str_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        bytes_0 = b'\xb9\x070\x90u\xfc\xfe\xa0\xb4\x88\x98DQ'
        float_0 = 1201.0873875590908
        list_0 = [bytes_0, bool_0, float_0, bytes_0]
        complex_0 = None
        bool_1 = False
        var_0 = module_0.get_ini_config_value(bool_1, bytes_0)
        config_manager_0 = module_0.ConfigManager()
        float_1 = None
        str_0 = "*!^dp,lSNp~'`ue6\r)6f"
        str_1 = 'bZ'
        str_2 = 'EulerOS'
        dict_0 = {str_1: complex_0, str_2: float_0}
        str_3 = 'HDL&OH^c:0}U1v'
        float_2 = -796.262
        var_1 = module_0.get_ini_config_value(float_1, config_manager_0)
        str_4 = 'async_startup_timeout'
        var_2 = config_manager_0.get_plugin_vars(float_2, str_4)
        config_manager_1 = module_0.ConfigManager()
        set_0 = None
        var_3 = config_manager_0.get_configuration_definition(set_0)
        tuple_0 = (list_0, bool_0, dict_0, str_3)
        var_4 = config_manager_0.get_plugin_options(float_1, str_0, dict_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        setting_0 = module_0.Setting(*list_0)
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager(setting_0, config_manager_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        dict_0 = None
        config_manager_0 = module_0.ConfigManager()
        str_0 = None
        int_0 = 30
        config_manager_1 = module_0.ConfigManager()
        float_0 = -101.523
        var_0 = config_manager_1.get_configuration_definition(dict_0, dict_0, float_0)
        var_1 = module_0.find_ini_config_file()
        var_2 = config_manager_1.get_configuration_definition(str_0, int_0)
        list_0 = [bool_0, dict_0, var_1]
        config_manager_2 = module_0.ConfigManager(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(config_manager_0)
    except BaseException:
        pass

def test_case_14():
    try:
        config_manager_0 = module_0.ConfigManager()
        float_0 = 451.9861132749383
        bytes_0 = b'\x81\xecM{O\x7fGGY\xe7\xd9\xb5\x15\x9f6K\xda?q'
        var_0 = config_manager_0.get_config_value(float_0, bytes_0, config_manager_0, config_manager_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\t\xfd\xc3\x1f\xba\xd8\x14\xeb\x91\xd72tH\x18\xe2b\xaej'
        bool_0 = False
        set_0 = None
        var_0 = module_0.get_ini_config_value(bool_0, set_0)
        bool_1 = True
        var_1 = module_0.get_ini_config_value(bool_1, bytes_0)
        config_manager_0 = module_0.ConfigManager()
        set_1 = None
        var_2 = config_manager_0.get_configuration_definition(set_1)
        int_0 = 1836
        var_3 = config_manager_0.update_config_data(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        config_manager_0 = module_0.ConfigManager()
        dict_0 = {config_manager_0: config_manager_0, config_manager_0: config_manager_0}
        list_0 = [config_manager_0]
        var_0 = config_manager_0.update_config_data(dict_0, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        setting_0 = None
        complex_0 = None
        config_manager_0 = module_0.ConfigManager()
        float_0 = -2197.79753
        var_0 = config_manager_0.get_config_value(bool_0, setting_0, float_0, complex_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '~/.ansible.cfg'
        config_manager_0 = module_0.ConfigManager(str_0)
    except BaseException:
        pass