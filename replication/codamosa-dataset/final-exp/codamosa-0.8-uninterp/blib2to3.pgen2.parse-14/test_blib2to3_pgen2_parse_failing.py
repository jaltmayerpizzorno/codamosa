# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        str_0 = 'YoQn~=G@pJYTpkDC1'
        int_0 = 152
        int_1 = 360
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        grammar_1 = module_0.Grammar()
        var_0 = grammar_1.copy()
        tuple_2 = (var_0, grammar_1)
        path_like_0 = None
        bool_0 = False
        tuple_3 = (tuple_2, path_like_0, bool_0, path_like_0)
        tuple_4 = (int_1, str_0, tuple_1, tuple_3)
        var_1 = module_1.lam_sub(grammar_0, tuple_4)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 267
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_3():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_0 = 75
        list_0 = [grammar_0]
        str_0 = 'Kf!uK\\Q2\rmn VR$&s&k'
        int_1 = 10
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        parser_0.shift(int_0, list_0, int_0, tuple_1)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2926
        tuple_0 = (int_0, int_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        list_1 = [list_0, list_0, list_0]
        int_1 = 2
        dict_0 = {int_0: int_0, int_1: int_1}
        tuple_1 = (list_1, dict_0)
        str_0 = 'A0ojr/a*t%dpx#_#\x0c'
        tuple_2 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_1, int_1, tuple_2)
    except BaseException:
        pass

def test_case_5():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'K#Lh&we~'
        grammar_0 = module_0.Grammar()
        int_0 = 4
        str_1 = '.'
        str_2 = '%2F7_nn)RH"F'
        tuple_0 = None
        tuple_1 = (str_2, tuple_0)
        parse_error_0 = module_1.ParseError(str_1, int_0, str_1, tuple_1)
        optional_0 = None
        parser_0 = module_1.Parser(grammar_0)
        tuple_2 = (int_0, str_0, parse_error_0, optional_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_0.Grammar()
        float_0 = 3278.5
        parser_0 = module_1.Parser(grammar_0, float_0)
        float_1 = 2644.6109
        parser_0.setup(float_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1
        str_0 = '    -> %d'
        tuple_0 = (int_0, int_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        tuple_1 = (str_0, tuple_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1
        str_0 = "'?:("
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        none_type_0 = None
        int_1 = parser_0.classify(int_0, none_type_0, tuple_1)
    except BaseException:
        pass