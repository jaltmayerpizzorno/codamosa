# Automatically generated by Pynguin.
import tornado.options as module_0
import typing as module_1

def test_case_0():
    try:
        str_0 = 'Íslenska'
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'xh"8Rq5]Y%2BvlTL({W\r'
        str_1 = 'tiq," `M"K EE+yI'
        list_0 = [str_0, str_0, str_1, str_1]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '}59]E|E$!r'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        str_0 = '8T\x0b9F(MQnHD!Os'
        option_parser_1 = module_0.OptionParser()
        option_parser_1.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Icx\n7,:}-x"~hU{?U'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        str_0 = '--'
        bool_0 = True
        list_0 = module_0.parse_command_line(str_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        str_0 = 'ygGHld5{iq&jXty'
        dict_0 = {str_0: str_0}
        mockable_0 = option_parser_0.mockable()
        error_0 = module_0.Error(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '/input/tornado/log.py'
        module_0.define(str_0)
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_1 = module_0.OptionParser()
        any_0 = option_parser_1.__getitem__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'K-{ETtJP2{zR\x0b'
        list_0 = [str_0, str_0, str_0, str_0]
        option_parser_0 = module_0.OptionParser()
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_1 = module_0.OptionParser()
        option_0 = module_0._Option(str_0, str_0, str_0)
        list_2 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '/input/tornado/log.py'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 's$cK/f\\\rU>)'
        mockable_0 = module_0._Mockable(option_parser_0)
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ':\r\x0cM'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'name'
        var_0 = None
        var_1 = type(str_0)
        bool_0 = True
        option_0 = module_0._Option(str_0, var_0, var_1, var_0, var_0, bool_0, var_0, var_0, var_0)
        any_0 = option_0.parse(str_0)
        any_1 = option_0.parse(str_0)
        str_1 = '0'
        option_1 = module_0._Option(str_1, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        list_0 = []
        option_parser_0 = module_0.OptionParser()
        text_i_o_0 = module_1.TextIO(*list_0)
        text_i_o_1 = text_i_o_0.__enter__()
        option_parser_1 = module_0.OptionParser()
        str_0 = 'register'
        option_0 = module_0._Option(str_0, str_0, str_0)
        option_0.set(text_i_o_1)
        str_1 = '[J&]$'
        any_0 = option_0.parse(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        module_0.print_help()
        str_0 = 'C--'
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        bool_0 = False
        option_0 = module_0._Option(str_0, str_0, bool_0)
        list_0 = [option_0]
        error_0 = module_0.Error(*list_0)
        str_1 = '/input/tornado/options.py'
        option_parser_0.define(str_1, str_1, str_1)
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_0.__setattr__(str_0, option_parser_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '/input/tornado/log.py'
        module_0.define(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = []
        str_0 = 'T'
        list_1 = [str_0, str_0, str_0, str_0]
        option_parser_0 = module_0.OptionParser()
        list_2 = option_parser_0.parse_command_line(list_1)
        text_i_o_0 = module_1.TextIO(*list_0)
        str_1 = 'register'
        option_0 = module_0._Option(str_1, str_1, str_1, str_1)
        any_0 = option_0.value()
        iterator_0 = option_parser_0.__iter__()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.print_help(text_i_o_0)
        option_parser_1.print_help(text_i_o_0)
        option_parser_2 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, option_parser_1)
    except BaseException:
        pass

def test_case_21():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        iterable_0 = option_parser_0.items()
        iterator_0 = option_parser_0.__iter__()
        str_0 = "\\Ri=0By\r'9V?,"
        str_1 = '\r1=bizIUsUd2v@'
        list_0 = [str_1]
        list_1 = option_parser_0.parse_command_line(list_0)
        str_2 = 'C--'
        option_parser_1 = module_0.OptionParser()
        list_2 = [str_0, str_2, str_0]
        list_3 = option_parser_0.parse_command_line(list_2)
        option_parser_2 = module_0.OptionParser()
        iterator_1 = option_parser_1.__iter__()
        bool_0 = False
        option_0 = module_0._Option(str_2, str_2, bool_0)
        option_0.set(iterator_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'name'
        var_0 = None
        var_1 = type(str_0)
        bool_0 = False
        option_0 = module_0._Option(str_0, var_0, var_1, var_0, var_0, bool_0, var_0, var_0, var_0)
        option_0.set(var_0)
        any_0 = option_0.parse(str_0)
        set_0 = set()
        list_0 = [any_0]
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_1 = module_0._Option(str_0, set_0, str_0, str_0, bool_0, str_0, list_0)
        option_1.set(bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        type_0 = None
        str_0 = ''
        str_1 = ''
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        option_parser_1 = module_0.OptionParser()
        bool_0 = option_parser_1.__contains__(str_0)
        dict_1 = option_parser_1.group_dict(str_0)
        iterable_0 = option_parser_1.items()
        bool_1 = True
        option_0 = module_0._Option(str_0, str_0, bool_1)
        option_0.set(type_0)
        list_0 = module_0.parse_command_line(str_1, bool_0)
        option_parser_2 = module_0.OptionParser()
        option_parser_3 = module_0.OptionParser()
        option_0.set(dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '--'
        bool_0 = True
        list_0 = module_0.parse_command_line(str_0, bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '\rY,<ka?l%]sH-'
        type_0 = None
        option_parser_1 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_1)
        option_0 = module_0._Option(str_0, type_0, str_0, str_0, str_0, mockable_0)
        iterable_0 = option_parser_0.items()
        str_1 = '-'
        bool_0 = False
        str_2 = 'zBZj6D@vj('
        str_3 = '`2U"[DtgS=\rHTLEl'
        list_0 = [str_2, str_1, str_3]
        option_1 = module_0._Option(str_1, str_1, bool_0, str_1, str_2, list_0)
        error_0 = module_0.Error()
        option_1.set(iterable_0)
    except BaseException:
        pass

def test_case_26():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        str_0 = '--'
        str_1 = '%a %b %d %H:%M:%S %Y'
        str_2 = '#)}0Z2oT}yifw'
        list_0 = [str_1, str_0, str_2]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'name'
        var_0 = type(str_0)
        bool_0 = False
        option_0 = module_0._Option(str_0, bool_0, var_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
        option_0.set(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ']K'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        var_0 = type(str_0)
        bool_0 = False
        option_0 = module_0._Option(str_0, dict_0, var_0, dict_0, dict_0, bool_0, dict_0, dict_0, dict_0)
        option_parser_1 = module_0.OptionParser()
        dict_1 = option_parser_1.group_dict(str_0)
        option_parser_1.print_help()
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'm'
        var_0 = None
        var_1 = type(str_0)
        bool_0 = True
        option_0 = module_0._Option(str_0, var_0, var_1, var_0, var_0, bool_0, var_0, var_0, var_0)
        any_0 = option_0.parse(str_0)
        option_0.set(any_0)
        any_1 = option_0.value()
        str_1 = 'q%='
        str_2 = "^]#W9eg:U6n|6'L"
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.__setitem__(str_1, str_2)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'm'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        var_0 = None
        var_1 = type(str_0)
        bool_0 = True
        option_0 = module_0._Option(str_0, var_0, var_1, var_0, var_0, bool_0, var_0, var_0, var_0)
        any_0 = option_0.parse(str_0)
        any_1 = option_0.parse(str_0)
        option_parser_1 = module_0.OptionParser()
        option_0.set(any_1)
        dict_1 = option_parser_1.group_dict(str_0)
        iterable_0 = option_parser_1.items()
        list_0 = [str_0, str_0, str_0]
        bool_1 = False
        option_parser_2 = module_0.OptionParser()
        iterable_1 = option_parser_2.items()
        list_1 = module_0.parse_command_line(list_0, bool_1)
        dict_2 = option_parser_1.group_dict(str_0)
        dict_3 = option_parser_2.as_dict()
        option_parser_3 = module_0.OptionParser()
        iterable_2 = option_parser_1.items()
        option_parser_4 = module_0.OptionParser()
        option_0.set(iterable_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = None
        str_1 = 'd/F'
        optional_0 = None
        float_0 = -1045.50714
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_1, optional_0, str_0, str_0, str_0, float_0)
        option_parser_1 = module_0.OptionParser()
        iterator_0 = option_parser_1.__iter__()
        str_2 = "'R|\nQXoO1@"
        any_0 = option_parser_1.__getitem__(str_2)
    except BaseException:
        pass