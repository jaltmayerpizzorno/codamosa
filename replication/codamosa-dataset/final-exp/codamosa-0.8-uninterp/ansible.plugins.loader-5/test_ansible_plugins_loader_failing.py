# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        int_0 = -18
        float_0 = 5189.2325
        set_0 = {float_0, bool_0, float_0, int_0}
        bool_1 = False
        jinja2_loader_0 = module_0.Jinja2Loader(int_0, int_0, float_0, set_0, bool_1)
        var_0 = module_0.add_dirs_to_loader(bool_0, jinja2_loader_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'poies'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        bytes_0 = b'\xcf\xfc\xba\x02\xe3\xfe'
        plugin_path_context_0 = None
        float_0 = 1016.0
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.resolve(dict_0, bytes_0, plugin_path_context_0, float_0)
        str_0 = 'poides'
        var_1 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'2\xa0U\xbf\x85\x9d\x8d$\xac0\xc149d\xdc\x1a\xbf\xd83'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        float_0 = 1342.534
        bool_0 = False
        list_0 = [dict_0, float_0, bool_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.redirect(list_0)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'poides'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = 3218
        plugin_load_context_1 = module_0.PluginLoadContext()
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_1, plugin_load_context_1)
        str_0 = 'I&'
        str_1 = 'IsHidden'
        bool_0 = False
        list_1 = [str_1, str_0, plugin_load_context_0, plugin_load_context_1]
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, str_1, plugin_load_context_1, bool_0, list_1)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, plugin_path_context_0, jinja2_loader_0)
        int_1 = -164
        str_2 = ']'
        dict_0 = {str_0: int_0, str_2: jinja2_loader_0}
        tuple_0 = (dict_0,)
        plugin_loader_1 = module_0.PluginLoader(plugin_load_context_0, plugin_loader_0, int_1, tuple_0)
        bool_1 = False
        dict_1 = None
        plugin_loader_2 = module_0.PluginLoader(bool_1, tuple_0, dict_1, list_0)
        bool_2 = True
        var_0 = plugin_loader_0.has_plugin(bool_2)
        var_1 = plugin_loader_0.format_paths(plugin_path_context_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\rbAP\x0c#N\r'
        str_1 = 'WReV@TmUgRE'
        tuple_0 = ()
        int_0 = 830
        str_2 = '--clear-response-cache'
        list_0 = [tuple_0, int_0, int_0, int_0]
        plugin_loader_0 = module_0.PluginLoader(tuple_0, int_0, str_2, tuple_0, list_0)
        var_0 = plugin_loader_0.format_paths(str_1)
        list_1 = [str_0]
        var_1 = module_0.add_all_plugin_dirs(list_1)
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\x05\x832\x87\xdcB\xde\x08\x8ad\xcf\xb4\x87\x96'
        dict_0 = {}
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, dict_0)
        str_3 = '6Ti<Ss,gT\tRNON[GM) O'
        dict_1 = {str_0: plugin_path_context_0, str_0: plugin_path_context_0, str_3: plugin_path_context_0}
        get_with_context_result_0 = module_0.get_with_context_result(**dict_1)
    except BaseException:
        pass

def test_case_8():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = -3714
        str_0 = '2V-'
        str_1 = 'QE~'
        list_0 = [str_1, plugin_load_context_0]
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, str_0, str_1, list_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Parola'
        dict_0 = {str_0: str_0}
        list_0 = []
        list_1 = []
        bool_0 = True
        tuple_0 = (bool_0, list_1, str_0)
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, dict_0, list_0, list_1, tuple_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Parola'
        list_0 = [str_0, str_0]
        dict_0 = {}
        get_with_context_result_0 = module_0.get_with_context_result(*list_0, **dict_0)
        float_0 = None
        str_1 = '>Z'
        jinja2_loader_0 = module_0.Jinja2Loader(float_0, str_1, list_0, list_0, float_0)
        plugin_path_context_0 = module_0.PluginPathContext(get_with_context_result_0, jinja2_loader_0)
        var_0 = module_0.get_shell_plugin(plugin_path_context_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'jo[de^'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'o'
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        bytes_0 = None
        int_0 = 1908
        var_0 = plugin_load_context_0.record_deprecation(bytes_0, str_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'joide^'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_1, plugin_load_context_1)
        dict_0 = {}
        var_0 = module_0.add_all_plugin_dirs(dict_0)
        str_0 = 'I&'
        str_1 = 'IsHidden'
        bool_0 = False
        list_0 = [str_1, str_0, plugin_load_context_0, plugin_load_context_0]
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, str_1, plugin_load_context_1, bool_0, list_0)
        int_0 = -171
        str_2 = ']'
        dict_1 = {str_0: int_0, str_2: jinja2_loader_0}
        var_1 = plugin_load_context_1.record_deprecation(jinja2_loader_0, dict_1, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = []
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = 3218
        plugin_load_context_1 = module_0.PluginLoadContext()
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_1, plugin_load_context_1)
        str_0 = 'I&'
        str_1 = 'IsHidden'
        bool_0 = False
        list_1 = [str_1, str_0, plugin_load_context_0, plugin_load_context_0]
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, str_1, plugin_load_context_1, bool_0, list_1)
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, int_0, plugin_path_context_0, jinja2_loader_0)
        int_1 = -164
        str_2 = ']'
        dict_0 = {str_0: int_0, str_2: str_2, str_2: jinja2_loader_0, str_0: str_0}
        tuple_0 = (dict_0,)
        plugin_loader_1 = module_0.PluginLoader(plugin_load_context_0, plugin_loader_0, int_1, tuple_0)
        bool_1 = False
        dict_1 = None
        plugin_loader_2 = module_0.PluginLoader(bool_1, tuple_0, dict_1, list_0)
        bool_2 = True
        var_0 = plugin_loader_0.has_plugin(bool_2)
        var_1 = plugin_loader_2.__setstate__(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        tuple_0 = ()
        str_0 = '/input/ansible/plugins/shell/windows'
        float_0 = -1837.0
        plugin_loader_0 = module_0.PluginLoader(tuple_0, str_0, float_0, float_0)
        var_0 = plugin_loader_0.__getstate__()
        str_1 = "Unknown error when attempting to call Galaxy at '%s': %s"
        var_1 = module_0.get_shell_plugin(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = ''
        list_0 = [str_0]
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_1.record_deprecation(str_0, str_0, list_0)
        dict_0 = {str_0: str_0, str_0: str_0}
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, dict_0)
        get_with_context_result_0 = module_0.get_with_context_result()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'M3t]:7"OklDE7!\rc7'
        bool_0 = False
        dict_0 = {str_0: bool_0}
        bytes_0 = b'\x01fW\xe4\xf2jK\xbe\xf0,\x1c\xd2`'
        plugin_loader_0 = module_0.PluginLoader(str_0, bool_0, dict_0, str_0, bytes_0)
        var_0 = plugin_loader_0.all()
        bytes_1 = b'\x13\xb5y<\x1e\xaf6\x84\to\x06f\x88\xb1\xcf7\x84=RW'
        bytes_2 = b'\xb6Ss'
        float_0 = 634.9766
        float_1 = -1311.0
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_1, bytes_2, float_0, float_1)
        var_1 = jinja2_loader_0.find_plugin(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '_$+'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'An exception occurred during task execution. To see the full traceback, use -vvv. The error was: %s'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        float_0 = 1.0
        plugin_load_context_0 = None
        list_0 = []
        plugin_path_context_0 = module_0.PluginPathContext(list_0, list_0)
        list_1 = []
        jinja2_loader_0 = module_0.Jinja2Loader(float_0, plugin_load_context_0, plugin_path_context_0, list_1)
        int_0 = 1314
        dict_0 = {bool_0: int_0}
        float_1 = 176.5
        bytes_0 = b'%\xf9{\x04G'
        jinja2_loader_1 = module_0.Jinja2Loader(int_0, dict_0, float_1, bytes_0)
        var_0 = jinja2_loader_1.find_plugin(jinja2_loader_0)
    except BaseException:
        pass

def test_case_22():
    try:
        dict_0 = None
        var_0 = module_0.add_all_plugin_dirs(dict_0)
        str_0 = ',4GK'
        str_1 = "5'=iI96"
        bytes_0 = b'$\xf6D\xff\x00\xf7\xd2\xf9\x9d:?\xdc\xe53\xeb'
        plugin_load_context_0 = module_0.PluginLoadContext()
        jinja2_loader_0 = module_0.Jinja2Loader(str_1, bytes_0, str_1, plugin_load_context_0)
        var_1 = jinja2_loader_0.get(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'o'
        str_1 = 'CLEANUP TASK'
        list_0 = []
        float_0 = -150.0985
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(str_1, list_0, float_0)
        dict_0 = {str_1: var_0}
        str_2 = 'W\tmc>'
        dict_1 = {str_2: str_1}
        str_3 = 'maPMKr'
        str_4 = '\t$\n|80vI@\tkEp\x0cr'
        dict_2 = {str_3: str_3, str_4: str_0}
        float_1 = 942.673
        tuple_0 = (plugin_load_context_0,)
        plugin_loader_0 = module_0.PluginLoader(str_2, dict_1, dict_2, float_1, tuple_0)
        var_1 = plugin_loader_0.__setstate__(dict_0)
        var_2 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'o'
        bytes_0 = b'\x01\x00\xe1\x80\x88\xab\xde\xb3h$\x10 \xbc\xf5\xf3\xa6'
        int_0 = 1049
        plugin_path_context_0 = module_0.PluginPathContext(int_0, int_0)
        bool_0 = False
        str_1 = 'aC l~ohE?B'
        bool_1 = False
        list_0 = []
        list_1 = [bool_1]
        bool_2 = False
        jinja2_loader_0 = module_0.Jinja2Loader(bool_1, list_0, list_1, int_0, bool_2)
        plugin_loader_0 = module_0.PluginLoader(str_0, bool_0, bytes_0, str_1, jinja2_loader_0)
        float_0 = None
        var_0 = plugin_loader_0.find_plugin_with_context(float_0, list_0, plugin_loader_0, plugin_path_context_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 1150
        list_0 = []
        tuple_0 = ()
        bytes_0 = b'\xb1\xe3\x9a\x81\xed\x01q\xe9\x99\x90\xc38\x925d'
        set_0 = {int_0, bytes_0, tuple_0, int_0}
        str_0 = 'sorted'
        bool_0 = False
        bytes_1 = b'\x9c\xad\xb7\x8f\xefx\x03\x92j<\xe5\xb3\x859\x1e\xc7'
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, bool_0, int_0, bytes_1)
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        float_0 = 712.3
        plugin_path_context_0 = module_0.PluginPathContext(float_0, list_0)
        str_1 = '[QlB'
        str_2 = 'c5OPjuW,lpB0'
        str_3 = 'V'
        plugin_loader_0 = module_0.PluginLoader(tuple_0, str_1, str_2, str_3)
        plugin_loader_1 = module_0.PluginLoader(plugin_load_context_0, plugin_load_context_1, list_0, plugin_path_context_0, plugin_loader_0)
        str_4 = 'qPELZ|$'
        dict_0 = {str_2: str_1, str_4: str_0}
        bytes_2 = b'\x10\xb2\xa5\xcf\x958mH'
        plugin_load_context_2 = module_0.PluginLoadContext()
        list_1 = [float_0, plugin_load_context_2, plugin_path_context_0]
        tuple_1 = (bytes_2, list_1)
        plugin_loader_2 = module_0.PluginLoader(jinja2_loader_0, plugin_loader_1, dict_0, tuple_1, jinja2_loader_0)
        var_0 = plugin_loader_2.get(set_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'o'
        list_0 = []
        plugin_load_context_0 = module_0.PluginLoadContext()
        bool_0 = True
        bytes_0 = b'\xd8\x9b\xbaW3\\\xaf0#\xf9\xdd\x8d?\xc4'
        var_0 = module_0.get_all_plugin_loaders()
        int_0 = -1455
        float_0 = 1316.0
        plugin_loader_0 = module_0.PluginLoader(bytes_0, int_0, float_0, plugin_load_context_0, list_0)
        bool_1 = False
        var_1 = module_0.add_all_plugin_dirs(bool_1)
        var_2 = plugin_loader_0.has_plugin(bool_0)
        var_3 = module_0.get_shell_plugin(bool_1, str_0)
        bytes_1 = b'\xae4\x16K\x01G\xcc'
        var_4 = plugin_loader_0.add_directory(bytes_1)
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_5 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'Anexception occurred during task execution. To see the full traceback, use -vvv. The error was: %'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass