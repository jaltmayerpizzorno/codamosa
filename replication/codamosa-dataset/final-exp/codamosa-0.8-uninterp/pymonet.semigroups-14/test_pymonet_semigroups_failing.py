# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        int_0 = 740
        last_0 = module_0.Last(int_0)
        semigroup_0 = module_0.Semigroup(last_0)
        bytes_0 = b'l\xea\x01'
        one_0 = module_0.One(bytes_0)
        map_0 = module_0.Map(one_0)
        str_0 = 'a'
        var_0 = one_0.concat(str_0)
        sum_0 = module_0.Sum(map_0)
        str_1 = sum_0.__str__()
        max_0 = module_0.Max(int_0)
        var_1 = semigroup_0.fold(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 732
        bytes_0 = b'l\xea\x01'
        one_0 = module_0.One(bytes_0)
        map_0 = module_0.Map(one_0)
        str_0 = 'a'
        var_0 = one_0.concat(str_0)
        sum_0 = module_0.Sum(map_0)
        str_1 = sum_0.__str__()
        max_0 = module_0.Max(int_0)
        float_0 = 2450.910275
        var_1 = max_0.concat(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 732
        last_0 = module_0.Last(int_0)
        semigroup_0 = module_0.Semigroup(last_0)
        bytes_0 = b'l\xea\x01'
        one_0 = module_0.One(bytes_0)
        map_0 = module_0.Map(one_0)
        str_0 = 'a'
        var_0 = one_0.concat(str_0)
        sum_0 = module_0.Sum(map_0)
        str_1 = one_0.__str__()
        max_0 = module_0.Max(int_0)
        all_0 = module_0.All(int_0)
        float_0 = -2998.17
        all_1 = module_0.All(float_0)
        all_2 = all_1.concat(all_0)
        var_1 = max_0.concat(all_2)
        str_2 = max_0.__str__()
        max_1 = module_0.Max(last_0)
        list_0 = [max_0, sum_0]
        str_3 = all_1.__str__()
        first_0 = module_0.First(list_0)
        all_3 = module_0.All(all_0)
        var_2 = map_0.concat(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        one_0 = None
        one_1 = module_0.One(one_0)
        bytes_0 = b''
        set_0 = {one_0, one_0, bytes_0}
        str_0 = one_1.__str__()
        str_1 = ',4s'
        map_0 = module_0.Map(str_1)
        var_0 = one_1.concat(map_0)
        last_0 = module_0.Last(set_0)
        map_1 = module_0.Map(last_0)
        str_2 = map_1.__str__()
        var_1 = one_1.concat(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'K\xff'
        bytes_1 = b"\xd5k\x9e\xd9\xdb\xde\xc6a\x82\xc0'"
        last_0 = module_0.Last(bytes_1)
        var_0 = last_0.concat(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = None
        int_0 = None
        str_0 = '(,=]DRe$\x0c%\t\x0c'
        bool_1 = True
        dict_0 = {bool_1: bool_0, bool_1: bool_1, bool_1: str_0}
        tuple_0 = (bool_0, int_0, str_0, dict_0)
        str_1 = '\n    Task are data-type for handle execution of functions (in lazy way)\n    transform results of this function and handle errors.\n    '
        max_0 = module_0.Max(str_1)
        var_0 = max_0.concat(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        sum_0 = None
        semigroup_0 = module_0.Semigroup(sum_0)
        one_0 = module_0.One(semigroup_0)
        map_0 = module_0.Map(one_0)
        str_0 = map_0.__str__()
        bytes_0 = b'!\xd0u"O\x92\xe0\x10\xbds\xdb\xe9JV'
        semigroup_1 = module_0.Semigroup(bytes_0)
        min_0 = module_0.Min(semigroup_1)
        str_1 = min_0.__str__()
        float_0 = -2391.48
        max_0 = module_0.Max(float_0)
        list_0 = [semigroup_0, min_0]
        var_0 = min_0.concat(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        first_0 = module_0.First(set_0)
        list_0 = [first_0, set_0]
        var_0 = first_0.concat(list_0)
        dict_0 = {}
        min_0 = module_0.Min(dict_0)
        str_0 = min_0.__str__()
        bytes_0 = b'O<\xaa;\x17\xdf?\xc7|\xbc\x01.'
        all_0 = module_0.All(bytes_0)
        all_1 = module_0.All(set_0)
        all_2 = module_0.All(str_0)
        all_3 = all_2.concat(all_1)
        all_4 = all_3.concat(all_0)
        var_1 = min_0.concat(all_4)
    except BaseException:
        pass