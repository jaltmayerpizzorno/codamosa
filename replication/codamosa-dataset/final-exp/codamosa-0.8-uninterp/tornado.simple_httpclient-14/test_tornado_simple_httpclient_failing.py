# Automatically generated by Pynguin.
import tornado.ioloop as module_0
import _asyncio as module_1
import tornado.simple_httpclient as module_2
import tornado.httpclient as module_3
import tornado.tcpclient as module_4
import ssl as module_5
import tornado.httputil as module_6
import tornado.netutil as module_7
import concurrent.futures._base as module_8

def test_case_0():
    try:
        i_o_loop_0 = module_0.IOLoop()
        future_0 = module_1.Future()
        bool_0 = False
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        str_0 = 'Test message'
        int_0 = -5358
        h_t_t_p_request_0 = module_3.HTTPRequest(str_0, str_0, int_0, str_0, str_0, str_0, bool_0)
        h_t_t_p_stream_closed_error_0 = module_2.HTTPStreamClosedError(str_0)
        callable_0 = None
        t_c_p_client_0 = module_4.TCPClient()
        int_1 = None
        h_t_t_p_connection_0 = module_2._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, h_t_t_p_stream_closed_error_0, callable_0, int_0, t_c_p_client_0, int_1, int_0)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_1():
    try:
        i_o_loop_0 = module_0.IOLoop()
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        str_0 = ';;HZ8HZVd!z3'
        future_0 = module_1.Future()
        bool_0 = False
        str_1 = 'tornado.simple_httpclient'
        t_c_p_client_0 = module_4.TCPClient()
        h_t_t_p_request_0 = module_3.HTTPRequest(str_0, future_0, str_0, str_0, bool_0, bool_0, str_0, str_1, t_c_p_client_0)
        s_s_l_context_0 = module_5.SSLContext()
        list_0 = [i_o_loop_0, t_c_p_client_0, str_1]
        request_start_line_0 = module_6.RequestStartLine(*list_0)
        int_0 = 500
        int_1 = 842
        int_2 = 33
        h_t_t_p_connection_0 = module_2._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, s_s_l_context_0, request_start_line_0, int_0, t_c_p_client_0, int_1, int_2)
        h_t_t_p_connection_0.on_connection_close()
    except BaseException:
        pass

def test_case_2():
    try:
        i_o_loop_0 = module_0.IOLoop()
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_1 = module_2.SimpleAsyncHTTPClient()
        future_0 = module_1.Future()
        str_0 = 'tornado.simple_httpclient'
        t_c_p_client_0 = module_4.TCPClient()
        s_s_l_context_0 = module_5.SSLContext()
        list_0 = [i_o_loop_0, t_c_p_client_0, str_0]
        int_0 = 500
        int_1 = 50
        int_2 = None
        dict_0 = {}
        resolver_0 = module_7.Resolver(**dict_0)
        simple_async_h_t_t_p_client_1.initialize(int_0, int_2, resolver_0, int_1)
        str_1 = 'tornado.simple_httpclient'
        str_2 = '3Xo(iW?1+?'
        dict_1 = {str_1: str_2}
        h_t_t_p_headers_0 = module_6.HTTPHeaders(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_3():
    try:
        i_o_loop_0 = module_0.IOLoop()
        int_0 = -688
        executor_0 = module_8.Executor()
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.initialize(int_0, executor_0, int_0)
        simple_async_h_t_t_p_client_1 = module_2.SimpleAsyncHTTPClient()
        str_0 = '2;;HZ8HZVd!z3'
        future_0 = module_1.Future()
        bool_0 = False
        str_1 = 'tornado.simple_httpclient'
        t_c_p_client_0 = module_4.TCPClient()
        h_t_t_p_request_0 = module_3.HTTPRequest(str_0, future_0, str_0, str_0, bool_0, bool_0, str_0, str_1, t_c_p_client_0)
        s_s_l_context_0 = module_5.SSLContext()
        list_0 = [i_o_loop_0, t_c_p_client_0, str_1]
        request_start_line_0 = module_6.RequestStartLine(*list_0)
        callable_0 = None
        simple_async_h_t_t_p_client_1.fetch_impl(h_t_t_p_request_0, callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        i_o_loop_0 = module_0.IOLoop()
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        future_0 = module_1.Future()
        i_o_loop_1 = i_o_loop_0.instance()
        bool_0 = False
        str_0 = 'tornado.simple_httpclient'
        t_c_p_client_0 = module_4.TCPClient()
        h_t_t_p_request_0 = module_3.HTTPRequest(str_0, future_0, str_0, str_0, bool_0, bool_0, str_0, str_0, t_c_p_client_0)
        h_t_t_p_timeout_error_0 = module_2.HTTPTimeoutError(str_0)
        list_0 = [i_o_loop_0, t_c_p_client_0, str_0]
        request_start_line_0 = module_6.RequestStartLine(*list_0)
        callable_0 = None
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
        callable_1 = None
        int_0 = -385
        t_c_p_client_1 = module_4.TCPClient()
        int_1 = -396
        int_2 = -2945
        h_t_t_p_connection_0 = module_2._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_1, callable_0, int_0, t_c_p_client_1, int_1, int_2)
        bytes_0 = b''
        h_t_t_p_connection_0.data_received(bytes_0)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_5():
    try:
        i_o_loop_0 = module_0.IOLoop()
        simple_async_h_t_t_p_client_0 = module_2.SimpleAsyncHTTPClient()
        future_0 = module_1.Future()
        i_o_loop_1 = i_o_loop_0.instance()
        str_0 = 'v'
        bool_0 = None
        h_t_t_p_timeout_error_0 = module_2.HTTPTimeoutError(str_0)
        h_t_t_p_request_0 = module_3.HTTPRequest(str_0, bool_0, h_t_t_p_timeout_error_0, str_0, bool_0, str_0, bool_0, bool_0)
        dict_0 = {}
        s_s_l_context_0 = module_5.SSLContext(**dict_0)
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, s_s_l_context_0)
    except BaseException:
        pass