# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        bool_0 = False
        module_args_parser_0 = module_0.ModuleArgsParser(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'copy src=a dest=b'
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'action'
        str_1 = 'module'
        str_2 = 'args'
        str_3 = {str_1: str_1, str_2: str_0}
        str_4 = {str_0: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'dest'
        str_1 = '/surce/path'
        str_2 = {str_1: str_1, str_0: str_1, str_0: str_0}
        var_0 = dict(action=str_2, delegate_to=str_2, args=str_2)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'TOML file (%s) is invalid: %s'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = dict(action=str_0, delegate_to=str_0, args=str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'localhost'
        var_0 = dict(action=str_0, delegate_to=str_0, args=str_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'aw'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'copy'
        str_1 = 'src'
        str_2 = 'dest'
        str_3 = 'action'
        str_4 = {str_0: str_1, str_3: str_0, str_1: str_2}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'copy'
        str_1 = 'src'
        str_2 = 'dest'
        str_3 = 'atinNjT'
        str_4 = {str_0: str_1, str_3: str_0, str_1: str_2}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'ignore_rerrors'
        str_1 = 'args'
        str_2 = 'command'
        bool_0 = True
        str_3 = 'cdr'
        str_4 = {str_3: str_2}
        str_5 = 'pwd'
        var_0 = {str_0: bool_0, str_1: str_4, str_3: str_1, str_2: str_5}
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'ignore_rerrors'
        str_1 = 'args'
        str_2 = 'command'
        bool_0 = True
        str_3 = 'cdr'
        str_4 = 'tC'
        module_args_parser_0 = module_0.ModuleArgsParser()
        str_5 = {str_3: str_4}
        var_0 = {str_0: bool_0, str_1: str_5, str_3: str_1, str_2: str_4}
        module_args_parser_1 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_1.parse()
        str_6 = 'action'
        module_args_parser_2 = module_0.ModuleArgsParser()
        str_7 = ''
        var_2 = module_args_parser_1.parse(str_7)
        str_8 = 'copy src=a dest=b'
        str_9 = {str_6: str_8, str_4: var_0, str_4: str_3, str_1: var_1, str_2: str_4}
        module_args_parser_3 = module_0.ModuleArgsParser(str_9)
        var_3 = module_args_parser_3.parse()
    except BaseException:
        pass