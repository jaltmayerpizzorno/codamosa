# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        str_0 = '8rQcnU%WyYFOW=dqx7J'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_mapping_0)
        var_1 = ansible_vault_encrypted_unicode_0.expandtabs()
        var_2 = ansible_vault_encrypted_unicode_0.isspace()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        list_0 = [ansible_base_y_a_m_l_object_0, ansible_mapping_0]
        var_3 = ansible_vault_encrypted_unicode_0.__eq__(list_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_4 = ansible_vault_encrypted_unicode_1.swapcase()
        var_5 = ansible_vault_encrypted_unicode_2.isidentifier()
        var_6 = ansible_vault_encrypted_unicode_0.__unicode__()
        var_7 = ansible_vault_encrypted_unicode_1.translate()
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        bool_0 = True
        str_0 = '|\r9iFe?cnJtpeI'
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(str_0)
        var_1 = ansible_vault_encrypted_unicode_0.rjust(bool_0)
        var_2 = ansible_vault_encrypted_unicode_0.title()
        var_3 = ansible_vault_encrypted_unicode_0.__repr__()
        var_4 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_2():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_0 = '8^vcik^IfA4Z[%<07'
        dict_0 = {str_0: ansible_mapping_0}
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        tuple_0 = (dict_0, ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        bytes_0 = b'U3\x11\x0e*\xbd \\\xfa\xff\xba\xb5'
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'QrI0FD\ndi<iKDbri'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\udcab\udc87\udced\x01\udcd15):D\udcf2\udce23\x02\udc9f\u0557\udc9b\udce4\udca6'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '&o \rt@#;D\\'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        str_0 = "wJA'hi{ftlj8l0N(o8Y"
        var_0 = ansible_vault_encrypted_unicode_0.__repr__()
        var_1 = ansible_vault_encrypted_unicode_0.__add__(ansible_vault_encrypted_unicode_0)
        str_1 = 'f\\jSWL[ /^\x0bOIRQ2'
        dict_0 = {str_0: set_0, str_1: set_0, str_1: str_0, str_1: set_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        str_2 = "k2gk'H2h\t"
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_2 = ansible_vault_encrypted_unicode_1.__ge__(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        complex_0 = None
        str_0 = '*l$4{ fQ{L=pE\\*9zC+u'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(complex_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        list_1 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 3787
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.__repr__()
        str_0 = 'La$I$;&c_|wZBK'
        str_1 = 'Zzm?ddyA:~Mi@($'
        dict_0 = {str_0: str_0, str_1: str_0}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        list_0 = []
        list_1 = []
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.center(ansible_sequence_0, *list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        var_1 = ansible_vault_encrypted_unicode_0.endswith(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '`7i'
        str_1 = 'Detected range in host but was asked to ignore ranges'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0, str_1: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        set_0 = {ansible_vault_encrypted_unicode_0, str_1}
        bool_0 = True
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_1.find(set_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.format_map(bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = None
        tuple_1 = (tuple_0,)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_1)
        list_0 = []
        var_0 = ansible_vault_encrypted_unicode_0.index(tuple_1, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = {}
        bytes_0 = b''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.lstrip(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '#/16\nu4]>D}wj<\n'
        dict_0 = {str_0: str_0}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.partition(dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'\xe1\xca\xa8\x9ew\x88\xff\x03\xc5:\xb6\xeb\xeeC\xcf\xfb'
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x0b\\\xcf3\xe2i\xbc\xd4\x11U)f\x99\xddv\xea\x80\x1b'
        str_0 = ']Y]\nsJ88?i7-SVy'
        str_1 = 'aomn/Pw\nj%'
        dict_0 = {str_1: bytes_0, str_1: bytes_0, str_1: str_1}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        tuple_0 = (ansible_sequence_0,)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.__rmod__(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_1 = ansible_vault_encrypted_unicode_2.__reversed__()
        str_2 = 'D"lHNp>\nkj\x0bLni\x0b1'
        str_3 = ':4>Yd!_C3rJ">#C1~J'
        dict_1 = {str_2: str_2, str_3: bytes_0}
        var_2 = ansible_vault_encrypted_unicode_1.rpartition(dict_1)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 521.9
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        int_0 = -350
        str_0 = '>YD/\n09O,B|zErx3f'
        var_0 = ansible_vault_encrypted_unicode_1.startswith(int_0, float_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '$6]b`i1byS5ng^svk'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_mapping_0)
        var_1 = ansible_vault_encrypted_unicode_0.expandtabs()
        var_2 = ansible_vault_encrypted_unicode_0.isspace()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_1.swapcase()
        var_4 = ansible_vault_encrypted_unicode_2.isidentifier()
        var_5 = ansible_vault_encrypted_unicode_1.translate()
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = "FH?6!Bo$G8''+<:2*X"
        int_0 = 1336
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        ansible_unicode_0 = None
        bool_0 = True
        str_0 = 'DR'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.count(ansible_unicode_0, bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'U\xceY\xd2\xfa1'
        str_0 = 'found unacceptable key (%s)'
        str_1 = '{}'
        dict_0 = {str_0: str_0, str_1: bytes_0, str_1: str_1, str_0: bytes_0}
        list_0 = [dict_0, bytes_0, str_1, dict_0]
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.replace(bytes_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'Xysecretpasswor>'
        set_0 = {str_0, str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(set_0)
    except BaseException:
        pass

def test_case_24():
    try:
        set_0 = None
        str_0 = "VVlP@j*u+&\x0b'ybcj"
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        tuple_0 = (set_0, str_0, ansible_vault_encrypted_unicode_0)
        list_0 = [dict_0, str_0, dict_0, dict_0]
        bytes_0 = b'D\xcd\xb4\r\xaf\xa4\xb3'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_1.ljust(tuple_0, *list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'LAd#GgUvM'
        tuple_0 = ()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.rstrip()
        int_0 = 1623
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_1 = ansible_vault_encrypted_unicode_1.__reversed__()
        str_1 = '(<u.KZ!+S`7\tux$^'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        float_0 = -1602.96
        var_2 = ansible_vault_encrypted_unicode_1.rfind(ansible_sequence_0, float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'Not waiting for response to prompt as stdin is not interactive'
        ansible_unicode_0 = module_0.AnsibleUnicode()
        bytes_0 = b'"\x86\x81\xce\xe3\xfcab;\x19?\xd5'
        set_0 = set()
        list_0 = [str_0, str_0]
        list_1 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_0 = ansible_vault_encrypted_unicode_2.isdecimal()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_1 = ansible_vault_encrypted_unicode_3.upper()
        bool_0 = True
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_2 = ansible_vault_encrypted_unicode_4.format()
        ansible_vault_encrypted_unicode_5 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_3 = ansible_vault_encrypted_unicode_5.join(ansible_unicode_0)
        var_4 = ansible_vault_encrypted_unicode_5.__getitem__(bool_0)
        var_5 = ansible_vault_encrypted_unicode_5.format()
        var_6 = ansible_vault_encrypted_unicode_5.count(str_0, ansible_unicode_0, bytes_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = "T^'0U:R"
        str_1 = 'r>b&[E/\x0cwbOw,'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(str_0)
        set_0 = set()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        bool_0 = True
        var_1 = ansible_vault_encrypted_unicode_1.rjust(bool_0)
        str_2 = "wJA'hi{ftlj8l0N(o8Y"
        var_2 = ansible_vault_encrypted_unicode_1.__repr__()
        var_3 = ansible_vault_encrypted_unicode_1.__add__(ansible_vault_encrypted_unicode_1)
        str_3 = 'f\\jSW[ /^\x0bOIRQ:2'
        dict_0 = {str_2: set_0, str_3: set_0, str_3: str_2, str_3: set_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_4 = ansible_vault_encrypted_unicode_1.isprintable()
        var_5 = ansible_vault_encrypted_unicode_1.__eq__(ansible_sequence_0)
        var_6 = ansible_vault_encrypted_unicode_1.is_encrypted()
        list_0 = [var_5, var_2]
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_28():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        bool_0 = True
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(ansible_vault_encrypted_unicode_0)
        str_0 = '|\r9iFe?cnJtpeI'
        var_1 = ansible_vault_encrypted_unicode_0.__contains__(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.rjust(bool_0)
        str_1 = "wJA'Ni{ftlj+l0N(o8Y"
        var_3 = ansible_vault_encrypted_unicode_0.title()
        var_4 = ansible_vault_encrypted_unicode_0.__repr__()
        var_5 = ansible_vault_encrypted_unicode_0.lower()
        var_6 = ansible_vault_encrypted_unicode_0.__add__(ansible_vault_encrypted_unicode_0)
        dict_0 = {str_1: set_0, str_1: set_0, str_1: str_1, str_1: set_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_7 = ansible_vault_encrypted_unicode_0.islower()
        var_8 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '1001.3'
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.find(str_0)
        set_0 = set()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        bool_0 = True
        str_1 = '|\r9iFe?cnJtpeI'
        var_1 = ansible_vault_encrypted_unicode_1.__contains__(str_1)
        var_2 = ansible_vault_encrypted_unicode_1.rjust(bool_0)
        var_3 = ansible_vault_encrypted_unicode_1.title()
        var_4 = ansible_vault_encrypted_unicode_1.__repr__()
        list_1 = [var_0]
        var_5 = ansible_vault_encrypted_unicode_1.rindex(list_1)
    except BaseException:
        pass

def test_case_30():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        bool_0 = False
        str_0 = '|\r9iFe?cnJtpeI'
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(str_0)
        var_1 = ansible_vault_encrypted_unicode_0.rjust(bool_0)
        str_1 = "wJA'Ni{ftlj+l0N(o8Y"
        var_2 = ansible_vault_encrypted_unicode_0.title()
        dict_0 = {str_1: var_2, str_1: str_0}
        var_3 = ansible_vault_encrypted_unicode_0.split(dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'test'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(str_0)
        str_1 = ''
        str_2 = '"\tS86\'ZE(>6*?xG-'
        float_0 = -1497.7488042785374
        str_3 = '0\'~u\'Rwjs "'
        dict_0 = {str_1: var_0, str_2: str_0, str_0: float_0, str_3: ansible_vault_encrypted_unicode_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_1 = ansible_vault_encrypted_unicode_1.count(ansible_vault_encrypted_unicode_1, dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        float_0 = 336.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        bytes_0 = b'Bi\x8bG\xe1\xe8\x7f\xd0\x94\xb1\xd3\xbc\x06D\x1b$R'
        var_0 = ansible_vault_encrypted_unicode_0.rfind(ansible_vault_encrypted_unicode_0, bytes_0)
    except BaseException:
        pass