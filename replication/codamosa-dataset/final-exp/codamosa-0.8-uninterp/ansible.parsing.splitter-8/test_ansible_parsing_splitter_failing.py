# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    try:
        float_0 = -2410.0
        var_0 = module_0.parse_kv(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{{"{{ '
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '`G4_|]L|;"I_'
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '"<{-+\x0b"Wt\'V{\nx--h'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'a=b c="d e" f=g'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'a="b=c d" e"\'f g\' h=i'
        var_1 = module_0.parse_kv(str_0)
        var_2 = module_0.parse_kv(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "\n    This class handles the multiprocessing requirements of Ansible by\n    creating a pool of worker forks, a result handler fork, and a\n    manager object with shared datastructures/queues for coordinating\n    work between all processes.\n\n    The queue manager is responsible for loading the play strategy plugin,\n    which dispatches the Play's tasks to hosts.\n    "
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'ep;\x0cS[['
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'T2fm~!CaJc2\nzd$h\tx'
        var_1 = module_0.parse_kv(str_1)
        str_2 = 'D|lASb(do'
        var_2 = module_0.parse_kv(str_2)
        str_3 = 'f"apI?uX)#}?Z'
        var_3 = module_0.parse_kv(str_3)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'T"Cw|6D#"I1<\\\x0bN'
        var_0 = module_0.split_args(str_0)
        bytes_0 = b'\x9b"\xd9\xa9{#\x9a'
        var_1 = module_0.parse_kv(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '{{{{ '
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '/{%o'
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '}]\t5L\\=&yi+6$;6'
        float_0 = 748.1963
        var_0 = module_0.parse_kv(str_0, float_0)
        str_1 = '"s<_{U+\x0b"nt\'V\nx- h'
        list_0 = [str_1, str_0, var_0]
        var_1 = module_0.split_args(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'foo {{bar}} baz'
        var_0 = module_0.split_args(str_0)
        str_1 = 'foo {{bar\n baz'
        var_1 = module_0.split_args(str_1)
    except BaseException:
        pass