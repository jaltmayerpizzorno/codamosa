# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        str_0 = 'initialization required'
        bool_0 = False
        rule_0 = module_0.Rule(str_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
        command_0 = module_0.Command(str_0, str_0)
        var_0 = rule_0.is_match(command_0)
        dict_0 = {str_0: str_0}
        var_1 = command_0.update(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = set()
        list_0 = []
        bool_0 = False
        command_0 = module_0.Command(list_0, bool_0)
        str_0 = ''
        str_1 = 'Ceu\x0bUAs?47'
        str_2 = '2\\O1W.Z'
        dict_0 = {str_1: str_0, str_1: str_1, str_2: str_2}
        list_1 = [str_0]
        corrected_command_0 = module_0.CorrectedCommand(dict_0, set_0, list_1)
        dict_1 = {}
        corrected_command_1 = module_0.CorrectedCommand(str_0, corrected_command_0, dict_1)
        var_0 = corrected_command_1.__eq__(command_0)
        corrected_command_2 = module_0.CorrectedCommand(set_0, set_0, set_0)
        var_1 = corrected_command_2.__hash__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2284.34062
        bool_0 = True
        list_0 = [float_0, float_0]
        bytes_0 = b'A2/'
        dict_0 = {bytes_0: bytes_0, bytes_0: float_0, bool_0: bool_0, bool_0: bool_0}
        corrected_command_0 = module_0.CorrectedCommand(bytes_0, dict_0, dict_0)
        var_0 = corrected_command_0.run(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'ls'
        var_0 = None
        str_1 = '/bin/ls'
        str_2 = [str_1]
        var_1 = lambda _: str_2
        bool_0 = False
        int_0 = 1
        bool_1 = True
        rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, var_0, int_0, bool_1)
        str_3 = 'stdout'
        command_0 = module_0.Command(str_1, str_3)
        var_2 = rule_0.get_corrected_commands(command_0)
        var_3 = next(var_2)
    except BaseException:
        pass