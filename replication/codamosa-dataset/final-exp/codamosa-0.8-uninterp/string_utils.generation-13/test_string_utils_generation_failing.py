# Automatically generated by Pynguin.
import string_utils.generation as module_0

def test_case_0():
    try:
        int_0 = None
        str_0 = module_0.random_string(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = False
        str_0 = module_0.secure_random_hex(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 255
        generator_0 = module_0.roman_range(int_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2287
        generator_0 = module_0.roman_range(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = None
        int_1 = 4
        str_0 = module_0.secure_random_hex(int_1)
        str_1 = module_0.random_string(int_1)
        str_2 = module_0.uuid()
        generator_0 = module_0.roman_range(int_0, int_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -2229
        str_0 = module_0.random_string(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 639
        str_0 = module_0.secure_random_hex(int_0)
        int_1 = 1991
        int_2 = 1231
        generator_0 = module_0.roman_range(int_1, int_2)
        int_3 = None
        str_1 = module_0.secure_random_hex(int_3)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 255
        int_1 = 709
        generator_0 = module_0.roman_range(int_0, int_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        str_0 = module_0.uuid(bool_0)
        int_0 = 668
        int_1 = 4573
        generator_0 = module_0.roman_range(int_1, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 7
        generator_0 = module_0.roman_range(int_0)
        var_0 = list(generator_0)
        int_1 = 1
        int_2 = -1
        generator_1 = module_0.roman_range(int_1, int_0, int_2)
        var_1 = list(generator_1)
        generator_2 = module_0.roman_range(int_1, int_0, int_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 7
        generator_0 = module_0.roman_range(int_0)
        var_0 = list(generator_0)
        int_1 = 148
        int_2 = -1
        generator_1 = module_0.roman_range(int_1, int_0, int_2)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 92
        generator_0 = module_0.roman_range(int_0)
        var_0 = next(generator_0)
        int_1 = 1
        var_1 = next(generator_0)
        int_2 = 2
        generator_1 = module_0.roman_range(int_1, var_1, int_2)
    except BaseException:
        pass