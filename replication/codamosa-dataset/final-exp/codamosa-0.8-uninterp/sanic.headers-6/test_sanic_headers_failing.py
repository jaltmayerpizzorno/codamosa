# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        list_0 = []
        optional_0 = module_0.parse_forwarded(list_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'hs%}.Mwh='
        str_1 = module_0.fwd_normalize_address(str_0)
        int_0 = 99
        str_2 = 'Gn\\J4n&g\rGPurE'
        optional_0 = module_0.parse_xforwarded(int_0, str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        iterable_0 = None
        dict_0 = module_0.fwd_normalize(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'kW'
        tuple_0 = module_0.parse_host(str_0)
        float_0 = 5472.7
        optional_0 = module_0.parse_xforwarded(tuple_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -799
        str_0 = '6,\\04&Gt{rU\x0buL`;'
        tuple_0 = (str_0, int_0)
        bytes_0 = module_0.format_http1_response(int_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 3168
        iterable_0 = None
        bytes_0 = module_0.format_http1_response(int_0, iterable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '/Ncscq|\\(1;\\ziPtu~XJ'
        tuple_0 = module_0.parse_content_header(str_0)
        str_1 = 'Ik}RKu@.Ie'
        dict_0 = module_0.fwd_normalize(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "x<S}''`/G "
        tuple_0 = module_0.parse_host(str_0)
        str_1 = 'unknown'
        str_2 = module_0.fwd_normalize_address(str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'OQY'
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = 'BW\x0b6Lfl\tE%\x0c\t.A%'
        str_3 = module_0.fwd_normalize_address(str_2)
        str_4 = None
        set_0 = {str_0, str_2, str_0}
        str_5 = 'Fm[FvS!yk>"R]xMjR'
        str_6 = module_0.fwd_normalize_address(str_5)
        tuple_0 = (set_0,)
        dict_0 = module_0.fwd_normalize(tuple_0)
        str_7 = module_0.fwd_normalize_address(str_4)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\n    Test the function parse_forwarded by using the RFC 7230 Forwarded header.\n    '
        str_1 = 'for=192.0.2.60;proto=http;by=203.0.113.43,for=192.0.2.43;proto=http;unknown="unknown"'
        str_2 = 'QY#S=!\rIHDr|)T9630'
        tuple_0 = module_0.parse_host(str_2)
        bool_0 = True
        str_3 = 'eOR&&A9&of5^W3,'
        str_4 = 'connections'
        dict_0 = {str_4: str_1, str_3: str_0}
        tuple_1 = (str_3, dict_0)
        str_5 = '_wpyc'
        str_6 = module_0.fwd_normalize_address(str_5)
        optional_0 = module_0.parse_forwarded(bool_0, tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'by'
        str_1 = (str_0, str_0)
        str_2 = [str_1]
        dict_0 = module_0.fwd_normalize(str_2)
        str_3 = (str_0, str_2)
        str_4 = [str_3, str_3]
        str_5 = (str_0, str_4)
        str_6 = [str_5, str_4]
        dict_1 = module_0.fwd_normalize(str_6)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'x-forwarded-host'
        str_1 = 'x-frward-proto'
        str_2 = '/fp})/\nM1/_'
        str_3 = {str_0: str_1, str_0: str_2, str_1: str_0, str_2: str_2, str_1: str_2}
        var_0 = ()
        str_4 = 'PROXIES_COUNT'
        str_5 = 'FORWARDED_FOR_HEADER'
        str_6 = 'REAL_IP_HEADER'
        int_0 = 2
        var_1 = None
        var_2 = {str_4: int_0, str_5: str_1, str_6: var_1}
        var_3 = type(str_0, var_0, var_2)
        optional_0 = module_0.parse_xforwarded(str_3, var_3)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'x-schem'
        str_1 = 'x-forwarded-host'
        str_2 = 'x-forwarded-proto'
        str_3 = 'x-forwarded-port'
        str_4 = 'x-forwarded-path'
        str_5 = 'https'
        str_6 = '127.0.0.1:8000'
        str_7 = 'http'
        str_8 = '443'
        str_9 = '/'
        str_10 = {str_0: str_5, str_1: str_6, str_2: str_7, str_3: str_8, str_4: str_9}
        str_11 = 'Config'
        var_0 = ()
        str_12 = 'PROXIES_COUNT'
        str_13 = 'FORWARDED_FOR_HEADER'
        str_14 = 'REAL_IP_HEADER'
        int_0 = -11
        str_15 = 'X-Forwarded-For'
        var_1 = None
        var_2 = {str_12: int_0, str_13: str_15, str_14: var_1}
        var_3 = type(str_11, var_0, var_2)
        optional_0 = module_0.parse_xforwarded(str_10, var_3)
    except BaseException:
        pass