# Automatically generated by Pynguin.
import ansible.utils.unsafe_proxy as module_0

def test_case_0():
    try:
        str_0 = "\x0b8TS9<>m6\x0b'H"
        dict_0 = {str_0: str_0}
        var_0 = module_0.to_unsafe_bytes(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '$nd@kie'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.to_unsafe_text(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b"o(\xdb\x89s'O\x19Zt\x90:\xf6\xea"
        native_jinja_unsafe_text_0 = module_0.NativeJinjaUnsafeText()
        list_0 = []
        int_0 = 1720
        list_1 = [int_0]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_1)
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        var_0 = module_0.wrap_var(ansible_unsafe_0)
        var_1 = unsafe_proxy_0.__new__(bytes_0, native_jinja_unsafe_text_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '1aBq='
        list_0 = [str_0, str_0]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        list_1 = [str_0, str_0]
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText()
        str_1 = None
        str_2 = 'IP Address'
        str_3 = "{0}(path='{1}')"
        dict_0 = {str_1: ansible_unsafe_text_0, str_2: str_0, str_3: str_1, str_2: list_1}
        var_0 = module_0.to_unsafe_bytes(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = None
        var_1 = module_0.wrap_var(var_0)
        int_0 = 3
        var_2 = module_0.wrap_var(int_0)
        float_0 = 3.14
        var_3 = module_0.wrap_var(float_0)
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        var_4 = module_0.wrap_var(ansible_unsafe_0)
        bool_0 = False
        float_1 = 1150.20003
        var_5 = module_0.wrap_var(float_1)
        var_6 = module_0.wrap_var(ansible_unsafe_0)
        set_0 = {var_5, var_3, bool_0}
        var_7 = module_0.wrap_var(set_0)
    except BaseException:
        pass