# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        iterator_0 = module_0.split_by(bool_0)
        range_0 = None
        list_0 = [range_0, range_0, range_0]
        lazy_list_0 = module_0.LazyList(list_0)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        float_0 = -1840.3497
        map_list_0 = module_0.MapList(lazy_list_1, float_0)
        var_0 = map_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'm8b}:_o\x0cLi\tK;<<'
        set_0 = {str_0}
        lazy_list_0 = module_0.LazyList(set_0)
        var_0 = lazy_list_0.__iter__()
        dict_0 = {}
        list_0 = [set_0, set_0, lazy_list_0, lazy_list_0]
        bool_0 = True
        iterator_0 = module_0.split_by(list_0, separator=bool_0)
        map_list_0 = module_0.MapList(dict_0, iterator_0)
        int_0 = map_list_0.__len__()
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = None
        str_0 = 'gc+uf'
        tuple_0 = (str_0,)
        var_0 = module_0.scanr(dict_0, tuple_0)
        lazy_list_0 = module_0.LazyList(str_0)
        var_1 = lazy_list_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\\Q.D;!Tne+:GPkJ|$P'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 2316
        iterable_0 = None
        int_1 = 2
        iterator_0 = module_0.take(int_1, iterable_0)
        list_0 = [iterable_0, int_0, iterable_0, int_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '>VJ'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = list(lazy_list_0)
        var_1 = module_0.scanr(lazy_list_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -1992
        var_0 = range(int_0)
        int_1 = 0
        list_0 = [int_1, int_0]
        range_0 = module_0.Range(*list_0)
        int_2 = range_0.__next__()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -2250
        dict_0 = {int_0: int_0, int_0: int_0}
        iterator_0 = module_0.chunk(int_0, dict_0)
        bytes_0 = b'\x9a\x16\xb89\xf5\x07\xc9\x9e\x1c\x0c\x02\x04\r\xf9{'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -637
        bool_0 = True
        str_0 = ']E$8HyTA6,a!"]|@]'
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        dict_0 = {str_0: int_0, str_0: var_0, str_0: bool_0, str_0: str_0}
        lazy_list_0 = module_0.LazyList(dict_0)
        float_0 = 610.7
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_1 = lazy_list_1.__getitem__(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 5
        int_1 = 1000000
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        int_2 = 0
        var_2 = range(int_1)
        iterator_1 = module_0.take(int_2, var_2)
        var_3 = list(iterator_1)
        var_4 = range(int_2)
        iterator_2 = module_0.take(int_0, var_4)
        var_5 = list(iterator_2)
        int_3 = 3
        var_6 = range(int_3)
        iterator_3 = module_0.take(int_0, var_6)
        var_7 = list(iterator_3)
        int_4 = -5
        iterator_4 = module_0.take(int_4, var_7)
        var_8 = list(iterator_4)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 5
        var_0 = lambda x: x > int_0
        int_1 = 10
        var_1 = range(int_1)
        iterator_0 = module_0.drop_until(var_0, var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'a'
        var_0 = []
        iterator_0 = module_0.drop_until(str_0, var_0)
        var_1 = list(iterator_0)
        var_2 = lambda x: x == str_0
        iterator_1 = module_0.drop_until(var_2, str_0)
        var_3 = list(iterator_1)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 3
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        int_2 = 5
        var_2 = range(int_2)
        var_3 = lambda x: x * x
        var_4 = range(int_2, int_1)
        var_5 = map(var_3, var_4)
        int_3 = 0
        int_4 = 100
        var_6 = range(int_4)
        iterator_1 = module_0.take(int_3, var_6)
        var_7 = list(iterator_1)
        var_8 = range(int_0)
        var_9 = list(iterator_1)
        int_5 = 15
        int_6 = 20
        var_10 = range(int_6)
        iterator_2 = module_0.take(int_5, int_2)
        var_11 = list(iterator_2)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 10
        var_0 = range(int_0)
        int_1 = 3
        var_1 = lambda x: x % int_1 == int_0
        iterator_0 = module_0.split_by(var_0, criterion=var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 378
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__next__()
        list_1 = [int_0, int_0, int_0, int_0]
        range_1 = module_0.Range(*list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        list_0 = [bool_0]
        range_0 = module_0.Range(*list_0)
        int_0 = range_0.__len__()
        str_0 = "b68O4oZ2;Pxw0'\n?wK"
        float_0 = 82.45
        iterator_0 = module_0.drop_until(str_0, float_0)
        int_1 = None
        list_1 = [int_1, int_1]
        tuple_0 = ()
        sequence_0 = None
        map_list_0 = module_0.MapList(tuple_0, sequence_0)
        str_1 = 'Fw\x0b384HU,[|S!K6WoS#'
        map_list_1 = module_0.MapList(list_1, str_1)
        var_0 = map_list_1.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'z'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = list(lazy_list_0)
        str_1 = '}%dv\x0c[c1'
        var_1 = lazy_list_0.__getitem__(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = None
        iterator_0 = module_0.split_by(bool_0)
        iterable_0 = None
        bytes_0 = b'7\xc3\xc52\xd84\xad\xdeO=\xc0*\xa5\xb5-/ki'
        set_0 = {bytes_0, iterable_0, bytes_0}
        list_0 = [set_0, set_0, iterable_0]
        var_0 = module_0.scanr(bytes_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '>VJ'
        int_0 = -130
        iterable_0 = None
        iterator_0 = module_0.drop(int_0, iterable_0)
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 3
        iterable_0 = None
        iterator_0 = module_0.drop(int_0, iterable_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 1
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        iterator_0 = range_0.__iter__()
        int_1 = range_0.__next__()
        list_1 = [iterator_0, int_0, list_0]
        var_0 = module_0.scanr(iterator_0, list_1, *list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = -7
        int_1 = 5
        var_0 = range(int_1)
        iterator_0 = module_0.chunk(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 5
        int_1 = 1
        int_2 = 2
        int_3 = 3
        int_4 = 4
        int_5 = 6
        int_6 = 7
        int_7 = 8
        int_8 = 9
        int_9 = 0
        int_10 = [int_1, int_2, int_3, int_4, int_0, int_5, int_6, int_7, int_8, int_9]
        iterator_0 = module_0.drop(int_0, int_10)
        var_0 = list(iterator_0)
        iterator_1 = module_0.drop(int_0, int_2)
        var_1 = list(iterator_1)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = -637
        str_0 = 'dWY<9'
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(int_0)
        bool_0 = True
        range_1 = module_0.Range(*list_0)
        int_1 = range_0.__len__()
        str_1 = ']E$8HyTA6,a!"]|@]'
        var_1 = range_0.__getitem__(bool_0)
        iterator_0 = module_0.split_by(str_1, bool_0, criterion=str_0, separator=str_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass