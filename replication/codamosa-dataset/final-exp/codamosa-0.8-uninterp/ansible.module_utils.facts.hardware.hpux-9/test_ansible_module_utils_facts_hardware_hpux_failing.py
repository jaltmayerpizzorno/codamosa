# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.hpux as module_0

def test_case_0():
    try:
        str_0 = 'done checking for any_errors_fatal'
        h_p_u_x_hardware_0 = module_0.HPUXHardware(str_0)
        var_0 = h_p_u_x_hardware_0.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xae\xd8\x04\xbe\xffh\x7f\xf2\xcf&\x0c#\x10\x04O{'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        h_p_u_x_hardware_0 = module_0.HPUXHardware(dict_0)
        var_0 = h_p_u_x_hardware_0.get_hw_facts()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        h_p_u_x_hardware_0 = module_0.HPUXHardware(str_0)
        float_0 = 1000.0
        var_0 = h_p_u_x_hardware_0.get_memory_facts(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -1671.0
        bool_0 = False
        int_0 = 2210
        h_p_u_x_hardware_0 = module_0.HPUXHardware(bool_0, int_0)
        var_0 = h_p_u_x_hardware_0.get_hw_facts(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = {}
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0)
        str_0 = 'ansible_architecture'
        str_1 = 'ansible_distribution_version'
        str_2 = '9000/800'
        str_3 = 'B.11.31'
        str_4 = {str_0: str_2, str_1: str_3}
        var_1 = h_p_u_x_hardware_0.get_cpu_facts(str_4)
    except BaseException:
        pass