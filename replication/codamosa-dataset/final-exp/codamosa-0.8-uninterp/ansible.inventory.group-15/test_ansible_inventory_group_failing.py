# Automatically generated by Pynguin.
import ansible.inventory.group as module_0

def test_case_0():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__str__()
        list_0 = [group_0, var_0, group_0]
        str_0 = '{0} has been removed.{1}{2}'
        var_1 = group_0.set_variable(list_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Z&loPz2,\x0ct"T+c }O'
        group_0 = module_0.Group(str_0)
        var_0 = group_0.__setstate__(group_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'fuN'
        group_0 = module_0.Group(str_0)
        var_0 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = None
        group_0 = module_0.Group()
        var_0 = group_0.add_child_group(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'.}\xf6\x04Ej'
        group_0 = module_0.Group()
        var_0 = group_0.set_priority(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.get_hosts()
        var_1 = group_0.add_child_group(group_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'test'
        group_0 = module_0.Group(str_0)
        str_1 = 'test_2'
        str_2 = 'value_2'
        var_0 = group_0.set_variable(str_1, str_2)
        str_3 = 'test_2_1'
        str_4 = 'vlue__1'
        str_5 = {str_3: str_4}
        var_1 = group_0.set_variable(str_1, str_5)
        var_2 = group_0.set_variable(str_1, str_2)
        var_3 = group_0.set
    except BaseException:
        pass

def test_case_7():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.get_hosts()
        group_1 = module_0.Group()
        var_1 = group_0.clear_hosts_cache()
        str_0 = '/Gf1$Rf>:!\n'
        var_2 = group_0.serialize()
        var_3 = group_1.__repr__()
        var_4 = group_0.__str__()
        var_5 = group_1.__str__()
        bytes_0 = b'\x10\x0c\xf9\xbb+'
        dict_0 = None
        list_0 = [bytes_0, group_0]
        set_0 = None
        tuple_0 = (dict_0, list_0, list_0, set_0)
        var_6 = module_0.to_safe_group_name(str_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        var_0 = group_1.remove_host(group_1)
        var_1 = group_1.add_child_group(group_0)
        var_2 = group_1.get_vars()
        var_3 = group_0.__str__()
        var_4 = group_0.clear_hosts_cache()
        str_0 = 'z/vu\x0cJ-[gK\t%;'
        var_5 = module_0.to_safe_group_name(str_0)
        var_6 = group_1.add_host(group_1)
    except BaseException:
        pass

def test_case_9():
    try:
        group_0 = module_0.Group()
        str_0 = 'test'
        int_0 = 1
        var_0 = dict(a=int_0)
        str_1 = 'x'
        str_2 = 'y'
        str_3 = [str_1, str_2]
        str_4 = 'c'
        str_5 = [str_3, str_4]
        var_1 = dict(name=str_0, vars=var_0, depth=int_0, hosts=str_3, parent_groups=str_5)
        var_2 = group_0.deserialize(var_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'grp1'
        group_0 = module_0.Group(str_0)
        str_1 = 'grp2'
        group_1 = module_0.Group(str_1)
        str_2 = 'grp3'
        group_2 = module_0.Group(str_2)
        str_3 = 'grp4'
        group_3 = module_0.Group(str_3)
        var_0 = group_0.add_child_group(group_1)
        var_1 = group_1.add_child_group(group_2)
        var_2 = group_2.add_child_group(group_3)
        var_3 = group_2.add_child_group(group_0)
    except BaseException:
        pass

def test_case_11():
    try:
        group_0 = module_0.Group()
        str_0 = 'test'
        str_1 = 'ansible_group_priority'
        int_0 = 3
        var_0 = group_0.set_variable(str_1, int_0)
        str_2 = 'other_var'
        var_1 = dict(test=str_0)
        var_2 = group_0.set_variable(str_2, var_1)
        var_3 = group_0.add_
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'grp1'
        group_0 = module_0.Group(str_0)
        str_1 = 'grp2'
        group_1 = module_0.Group(str_1)
        str_2 = 'grp3'
        group_2 = module_0.Group(str_2)
        str_3 = 'grp4'
        group_3 = module_0.Group(str_3)
        var_0 = group_0.add_child_group(group_1)
        var_1 = group_2.add_child_group(group_3)
        var_2 = group_2.add_child_group(group_0)
        float_0 = 702.03
        var_3 = group_1.add_child_group(float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'gr+p1'
        group_0 = module_0.Group(str_0)
        str_1 = 'grp3'
        group_1 = module_0.Group(str_1)
        str_2 = 'grp4'
        group_2 = module_0.Group(str_2)
        var_0 = group_0.add_child_group(group_1)
        list_0 = [str_2]
        var_1 = group_2.set_priority(list_0)
        bytes_0 = b'\x84?\x19\x12:s\xactF\xc0\x8eJl{\xbe \xcb\xfa\x8c\x8f'
        dict_0 = {group_1: group_1, group_1: str_2}
        var_2 = group_1.__setstate__(dict_0)
        bool_0 = False
        var_3 = group_2.set_variable(bytes_0, bool_0)
        var_4 = group_1.add_child_group(group_2)
        var_5 = group_1.add_child_group(group_0)
    except BaseException:
        pass