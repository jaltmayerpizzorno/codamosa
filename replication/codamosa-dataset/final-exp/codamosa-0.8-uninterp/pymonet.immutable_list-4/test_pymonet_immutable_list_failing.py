# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        var_0 = None
        callable_0 = None
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(var_0, bool_0)
        var_1 = immutable_list_0.map(callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        immutable_list_0 = module_0.ImmutableList()
        object_0 = module_1.object()
        var_0 = immutable_list_0.map(object_0)
    except BaseException:
        pass

def test_case_2():
    try:
        immutable_list_0 = module_0.ImmutableList()
        var_0 = None
        var_1 = immutable_list_0.filter(var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        dict_0 = {bool_0: bool_0}
        optional_0 = immutable_list_0.find(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        var_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_1 = immutable_list_0.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList()
        immutable_list_1 = module_0.ImmutableList(bool_0)
        object_0 = module_1.object()
        bool_1 = immutable_list_0.__eq__(object_0)
        var_0 = immutable_list_1.__len__()
        var_1 = immutable_list_1.unshift(immutable_list_1)
        var_2 = None
        var_3 = immutable_list_0.reduce(var_1, var_2)
        immutable_list_2 = module_0.ImmutableList()
        callable_0 = None
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '>\t)~">,L~PHx'
        var_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_1 = immutable_list_0.reduce(str_0, var_0)
        var_2 = None
        var_3 = immutable_list_0.__add__(var_2)
    except BaseException:
        pass

def test_case_7():
    try:
        immutable_list_0 = module_0.ImmutableList()
        str_0 = immutable_list_0.__str__()
        bytes_0 = b'\x0fh\xcf\xe8\xfaG5\xbfc,\x04Z\x99\x0e\x9c\xf4\x0e\xf0r'
        bool_0 = True
        str_1 = '\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    '
        object_0 = module_1.object()
        optional_0 = immutable_list_0.find(object_0)
        str_2 = "4h|\r'{?_,3pneh$"
        str_3 = '17^^5-pf'
        dict_0 = {str_1: bytes_0, str_1: optional_0, str_2: str_0, str_3: object_0}
        int_0 = None
        var_0 = None
        immutable_list_1 = module_0.ImmutableList()
        var_1 = immutable_list_1.reduce(int_0, var_0)
        str_4 = 'j#~BE8TYMkdB/+'
        var_2 = immutable_list_1.unshift(immutable_list_1)
        immutable_list_2 = module_0.ImmutableList(str_4, var_2)
        var_3 = immutable_list_0.reduce(dict_0, var_1)
        var_4 = immutable_list_0.reduce(dict_0, var_3)
        immutable_list_3 = module_0.ImmutableList(bool_0)
        list_0 = [dict_0, str_0]
        var_5 = immutable_list_0.reduce(list_0, var_0)
        var_6 = immutable_list_1.__len__()
        float_0 = -1327.872
        var_7 = immutable_list_2.reduce(float_0, var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        object_0 = module_1.object()
        int_0 = None
        var_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_1 = immutable_list_0.reduce(int_0, var_0)
        var_2 = immutable_list_0.__len__()
        list_0 = []
        immutable_list_1 = module_0.ImmutableList(list_0, bool_0)
        callable_0 = None
        var_3 = immutable_list_1.filter(callable_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        list_0 = []
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(list_0, bool_0)
        optional_0 = immutable_list_0.find(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        immutable_list_0 = module_0.ImmutableList()
        object_0 = module_1.object()
        var_0 = immutable_list_0.to_list()
        bool_0 = immutable_list_0.__eq__(object_0)
        var_1 = None
        int_0 = -735
        bool_1 = True
        immutable_list_1 = module_0.ImmutableList(int_0, bool_1)
        str_0 = 'Left[T]'
        var_2 = immutable_list_0.reduce(str_0, var_1)
        var_3 = immutable_list_1.__len__()
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        str_0 = immutable_list_0.__str__()
        var_0 = lambda x: x
        var_1 = immutable_list_0.filter(var_0)
        callable_0 = None
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass