# Automatically generated by Pynguin.
import ast as module_0
import apimd.parser as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = '7F"w+ML{B@_~oSP\np KQ'
    expr_0 = module_0.expr()
    int_0 = 7
    dict_0 = {}
    parser_0 = module_1.Parser(int_0, dict_0)
    str_1 = parser_0.resolve(str_0, expr_0, str_0)
    str_2 = '@r/"\\n_t\rWj\n]V<=?g|['
    int_1 = -2221
    str_3 = module_1.parent(str_2, level=int_1)
    bool_0 = module_1.is_public_family(str_0)

def test_case_2():
    str_0 = '^E{[Ns$72o=<mx\x0bCB\\)|'
    bool_0 = module_1.is_public_family(str_0)

def test_case_3():
    str_0 = 'q'
    str_1 = module_1.esc_underscore(str_0)

def test_case_4():
    str_0 = 'G(C.p\n;n-%%o'
    str_1 = module_1.doctest(str_0)

def test_case_5():
    str_0 = 'lT8dg\x0bk}Gh\\.h\\*#~6;'
    list_0 = [str_0, str_0, str_0]
    ann_assign_0 = module_0.AnnAssign(*list_0)
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0}
    bool_1 = False
    parser_0 = module_1.Parser(bool_0, bool_1, dict_0, dict_0, dict_0)
    str_1 = "?8$W_Nu'St"
    expr_0 = module_0.expr()
    list_1 = [expr_0, expr_0, expr_0, expr_0]
    stmt_0 = None
    list_2 = [stmt_0]
    parser_0.class_api(str_1, str_0, list_1, list_2)
    str_2 = 'Qk'
    assign_0 = module_0.Assign()
    parser_0.globals(str_2, ann_assign_0)

def test_case_6():
    expr_0 = None
    str_0 = module_1.const_type(expr_0)

def test_case_7():
    str_0 = 'typing.List[typing.List[int]]'
    var_0 = {}
    resolver_0 = module_1.Resolver(str_0, var_0)
    var_1 = module_0.parse(str_0)
    var_2 = resolver_0.visit(var_1)
    bool_0 = module_1.is_magic(str_0)

def test_case_8():
    parser_0 = module_1.Parser()

def test_case_9():
    str_0 = 'lT8dg\x0bk}Gh\\.h\\*#~6;'
    list_0 = [str_0, str_0, str_0]
    ann_assign_0 = module_0.AnnAssign(*list_0)
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0}
    parser_0 = module_1.Parser(bool_0, dict_0, dict_0, dict_0)
    parser_0.globals(str_0, ann_assign_0)

def test_case_10():
    str_0 = 'typing.Abstract=et'
    parser_0 = module_1.Parser()
    parser_0.parse(str_0, str_0)
    bool_0 = module_1.is_magic(str_0)

def test_case_11():
    str_0 = 'typing.Abstract=et'
    parser_0 = module_1.Parser()
    parser_0.parse(str_0, str_0)
    import_from_0 = module_0.ImportFrom()
    parser_0.imports(str_0, import_from_0)
    assign_0 = module_0.Assign()

def test_case_12():
    list_0 = []
    stmt_0 = None
    list_1 = [stmt_0, stmt_0]
    bool_0 = False
    str_0 = 'typing.AbstractSet'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    parser_0 = module_1.Parser(bool_0, dict_0, dict_0)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_13():
    bool_0 = False
    str_0 = 'P4hB$dN^3+FKQk'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    parser_0 = module_1.Parser(bool_0, dict_0, dict_0)
    str_1 = '`Rv\rbK"Yw3ZsiD'
    module_x_var_0 = None
    parser_0.load_docstring(str_1, module_x_var_0)

def test_case_14():
    bool_0 = True
    dict_0 = {}
    parser_0 = module_1.Parser(bool_0, dict_0, dict_0)
    str_0 = parser_0.compile()

def test_case_15():
    dict_0 = {}
    str_0 = 'nP'
    set_0 = set()
    dict_1 = {}
    parser_0 = module_1.Parser(dict_1)
    dict_2 = {str_0: set_0, str_0: set_0, str_0: set_0}
    str_1 = '7E;486)8Bu\\L<Z\x0c'
    dict_3 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_1}
    parser_1 = module_1.Parser(dict_0, dict_2, dict_3)
    str_2 = parser_1.compile()

def test_case_16():
    str_0 = '~gf\rv~%c/]Jun86V. .'
    str_1 = 'typing.Abstract=et'
    parser_0 = module_1.Parser()
    parser_0.parse(str_0, str_1)
    bool_0 = module_1.is_magic(str_0)

def test_case_17():
    float_0 = 1495.6
    list_0 = [float_0, float_0]
    attribute_0 = module_0.Attribute(*list_0)
    str_0 = 'y\\'
    str_1 = ' O<\x0bG'
    str_2 = '`b#I'
    dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_2}
    resolver_0 = module_1.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)

def test_case_18():
    str_0 = 'l\x0c'
    str_1 = 'b\x0cP'
    int_0 = -448
    parser_0 = module_1.Parser(int_0)
    str_2 = '2G&'
    dict_0 = {str_2: str_2}
    list_0 = [str_1, str_1]
    name_0 = module_0.Name(*list_0)
    resolver_0 = module_1.Resolver(str_2, dict_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    expr_0 = None
    str_3 = module_1.const_type(expr_0)
    parser_0.parse(str_0, str_0)

def test_case_19():
    str_0 = 'I]XDA_'
    str_1 = 'typing.A9bstractSet'
    parser_0 = module_1.Parser()
    parser_0.parse(str_0, str_1)

def test_case_20():
    str_0 = '$e+|;k@J1h$E\n_'
    str_1 = module_1.code(str_0)
    str_2 = 'l\x0c'
    str_3 = 'str'
    dict_0 = {str_3: str_0, str_2: str_3, str_0: str_2}
    arguments_0 = module_0.arguments(**dict_0)
    int_0 = 0
    str_4 = module_1.doctest(str_0)
    parser_0 = module_1.Parser(int_0)
    str_5 = 'typing.re.Pattern'
    list_0 = [str_0, str_3]
    ann_assign_0 = module_0.AnnAssign(*list_0)
    ann_assign_1 = None
    parser_0.globals(str_5, ann_assign_1)
    str_6 = 'HFmD[\nr#y(h9^u'
    dict_1 = {str_0: str_3, str_6: str_5}
    list_1 = [str_0, str_0]
    name_0 = module_0.Name(*list_1)
    resolver_0 = module_1.Resolver(str_5, dict_1)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    expr_0 = None
    str_7 = module_1.const_type(expr_0)
    set_0 = None
    dict_2 = {str_6: set_0}
    parser_1 = module_1.Parser(dict_1, dict_2, dict_1)
    var_0 = parser_1.__repr__()
    parser_0.parse(str_2, str_2)

def test_case_21():
    str_0 = '{~]y.lP'
    bool_0 = module_1.is_public_family(str_0)
    str_1 = 'typing.List[typing.List[int]]'
    str_2 = '\x0b'
    var_0 = {}
    resolver_0 = module_1.Resolver(str_2, var_0)
    var_1 = module_0.parse(str_1)
    list_0 = [str_2]
    constant_0 = module_0.Constant(*list_0)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)
    var_2 = resolver_0.visit(var_1)
    bool_1 = module_1.is_magic(str_1)

def test_case_22():
    str_0 = 'tTqL`_j_Ef\\C{57z'
    str_1 = '|mV5^QR[`z0<4G_A'
    str_2 = '__all__'
    bool_0 = module_1.is_public_family(str_2)
    bool_1 = module_1.is_magic(str_1)
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2}
    dict_1 = {}
    bool_2 = False
    str_3 = '2Z0OGD:/Lo=">"{6 '
    str_4 = 'k2p)"L b&Tw?&'
    str_5 = '6%5\x0cbJ,`8y`Hn*'
    str_6 = '~Vo\x0c~_4n3V()c1#f'
    dict_2 = {str_6: str_2, str_3: str_5, str_2: bool_2, str_0: dict_0}
    import_from_0 = module_0.ImportFrom(**dict_2)
    int_0 = -2323
    str_7 = 'Ipjp*@{y#\nYeCa67^'
    list_0 = []
    expr_0 = None
    str_8 = module_1.const_type(expr_0)
    stmt_0 = None
    list_1 = [stmt_0, stmt_0, stmt_0]
    parser_0 = module_1.Parser(dict_0, dict_0)
    parser_0.class_api(str_5, str_7, list_0, list_1)
    bool_3 = True
    str_9 = 'p8x'
    str_10 = module_1.doctest(str_9)
    int_1 = 0
    bool_4 = True
    parser_1 = module_1.Parser(bool_4, int_1, dict_0)
    str_11 = None
    dict_3 = {str_0: int_1, str_1: int_0, str_11: int_1, str_11: int_1}
    dict_4 = {}
    parser_2 = module_1.Parser(int_0, bool_3, dict_3, dict_0, dict_4, dict_1)
    parser_2.imports(str_6, import_from_0)
    str_12 = '5r2)ee\rcGZ\x0cg;'
    dict_5 = {str_2: str_3, str_4: str_5, str_0: str_12, str_1: str_1}
    parser_3 = module_1.Parser(bool_0, int_0, dict_5)
    str_13 = '#LB.x'
    parser_2.parse(str_13, str_13)

def test_case_23():
    str_0 = 'et:?Ek^1N'
    str_1 = module_1.esc_underscore(str_0)
    str_2 = '3w'
    list_0 = [str_2]
    assign_0 = module_0.Assign(*list_0)
    int_0 = 1358
    str_3 = "f4kA'2S0r\\|o:{"
    str_4 = ''
    dict_0 = {str_3: str_3, str_4: str_4, str_0: str_1}
    parser_0 = module_1.Parser(int_0, dict_0)
    parser_0.globals(str_2, assign_0)

def test_case_24():
    str_0 = 't"tA\tw'
    bytes_0 = b'4H@\x99\x05\xe4\x06\x1e\xda8'
    str_1 = 'Q'
    bool_0 = module_1.is_magic(str_1)
    bool_1 = False
    bool_2 = True
    str_2 = '\ns%k'
    dict_0 = {str_0: str_2}
    str_3 = '`q_!%c)jOS-'
    str_4 = '\n:CG*}qY.WO2'
    set_0 = {str_4, str_3, str_4, str_4}
    str_5 = ')|Ki'
    dict_1 = {str_0: set_0, str_2: set_0, str_5: set_0, str_4: set_0}
    parser_0 = module_1.Parser(bool_1, bool_2, dict_0, dict_0, dict_1, dict_0)
    var_0 = parser_0.__eq__(bytes_0)
    str_6 = '^\\e~j'
    dict_2 = {str_6: str_0}
    resolver_0 = module_1.Resolver(str_0, dict_2)
    bool_3 = module_1.is_public_family(str_6)
    str_7 = 'Ch'
    str_8 = module_1.doctest(str_7)
    str_9 = '`Rv\rbK"Yw3ZsiD'
    module_x_var_0 = None
    parser_0.load_docstring(str_9, module_x_var_0)

def test_case_25():
    str_0 = 'typing.Union'
    str_1 = module_1.doctest(str_0)
    str_2 = '}'
    var_0 = {}
    resolver_0 = module_1.Resolver(str_2, var_0)
    var_1 = module_0.parse(str_1)
    var_2 = resolver_0.visit(var_1)
    str_3 = '}"<1)SRrmF?\x0b*C '
    list_0 = [var_2]
    bool_0 = False
    list_1 = []
    constant_0 = module_0.Constant(*list_0)
    load_0 = module_0.Load()
    attribute_0 = module_0.Attribute()
    list_2 = [constant_0, load_0, attribute_0]
    bool_1 = False
    str_4 = '88ARHvX+3=_'
    str_5 = '%>COlg_9-@S\x0cV2#qVB'
    str_6 = None
    dict_0 = {str_4: str_4, str_4: str_3, str_5: str_6, str_6: str_4}
    parser_0 = module_1.Parser(bool_1, dict_0, dict_0)
    parser_0.class_api(str_3, str_4, list_1, list_2)
    str_7 = module_1.code(str_1)
    parser_1 = module_1.Parser(bool_0, dict_0, dict_0)

def test_case_26():
    str_0 = 'typng.Uni'
    str_1 = module_1.doctest(str_0)
    str_2 = '}'
    var_0 = {}
    resolver_0 = module_1.Resolver(str_2, var_0)
    int_0 = 0
    var_1 = module_0.parse(str_1)
    var_2 = resolver_0.visit(var_1)
    str_3 = '}"<1)SRrmF?\x0b*C '
    list_0 = [var_2]
    bool_0 = True
    list_1 = []
    constant_0 = module_0.Constant(*list_0)
    load_0 = module_0.Load()
    attribute_0 = module_0.Attribute()
    int_1 = 4710
    str_4 = '=B5&0!j+V;H>L1L'
    int_2 = 290
    int_3 = None
    dict_0 = {str_2: int_0, str_4: int_2, str_1: int_3}
    str_5 = 'R2TS|oM@.F0i,'
    str_6 = '.pyi'
    dict_1 = {str_5: str_1, str_3: str_6}
    parser_0 = module_1.Parser(int_1, dict_0, dict_1)
    var_3 = parser_0.__repr__()
    list_2 = [constant_0, load_0, attribute_0]
    bool_1 = False
    str_7 = '88ARHvX+3=_'
    str_8 = '%>COlg_9-@S\x0cV2#qVB'
    str_9 = None
    dict_2 = {str_7: str_7, str_7: str_3, str_8: str_9, str_9: str_7}
    parser_1 = module_1.Parser(bool_1, dict_2, dict_2)
    parser_1.class_api(str_3, str_7, list_1, list_2)
    str_10 = module_1.code(str_1)
    parser_2 = module_1.Parser(bool_0, dict_2, dict_2)