# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        int_0 = -4238
        list_0 = [int_0]
        list_1 = [list_0, list_0]
        int_1 = 2475
        token_0 = module_0.Token(int_0, int_0, int_1)
        bool_0 = token_0.__eq__(list_1)
        token_1 = token_0.lookup_key(list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -4238
        list_0 = [int_0]
        list_1 = [list_0]
        int_1 = 2475
        token_0 = module_0.Token(int_0, int_0, int_1)
        bool_0 = token_0.__eq__(list_1)
        token_1 = token_0.lookup_key(list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'b'
        str_1 = {}
        int_0 = 0
        int_1 = 272
        int_2 = 159
        token_0 = module_0.Token(str_0, int_1, int_2)
        var_0 = (str_1, int_0, int_0)
        str_2 = token_0.__repr__()
        dict_token_0 = module_0.DictToken(*var_0)
        list_0 = [str_1, var_0]
        dict_token_1 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        int_0 = 2475
        token_0 = module_0.Token(int_0, int_0, int_0)
        bool_0 = token_0.__eq__(list_0)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        int_0 = 2475
        token_0 = module_0.Token(int_0, int_0, int_0)
        bool_0 = token_0.__eq__(list_0)
        bool_1 = token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1823.5469
        int_0 = -1773
        str_0 = '9A'
        scalar_token_0 = module_0.ScalarToken(float_0, int_0, int_0, str_0)
        int_1 = 3294
        int_2 = 1
        scalar_token_1 = module_0.ScalarToken(scalar_token_0, int_1, int_2)
        tuple_0 = (scalar_token_1,)
        dict_0 = {scalar_token_1: tuple_0, scalar_token_0: int_0, int_1: int_1}
        dict_1 = {tuple_0: dict_0, scalar_token_1: int_1, int_1: scalar_token_0}
        list_0 = [dict_1]
        scalar_token_2 = module_0.ScalarToken(list_0, int_0, int_0)
        any_0 = scalar_token_2.__hash__()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'b'
        str_1 = {str_0: str_0}
        int_0 = 632
        var_0 = (str_1, int_0, int_0)
        dict_token_0 = module_0.DictToken(*var_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        int_0 = -1550
        scalar_token_0 = module_0.ScalarToken(str_0, int_0, int_0)
        any_0 = scalar_token_0.__hash__()
        str_1 = {scalar_token_0: int_0, scalar_token_0: any_0}
        int_1 = 0
        var_0 = (str_1, int_1, int_1)
        dict_token_0 = module_0.DictToken(*var_0)
        dict_token_1 = module_0.DictToken()
    except BaseException:
        pass