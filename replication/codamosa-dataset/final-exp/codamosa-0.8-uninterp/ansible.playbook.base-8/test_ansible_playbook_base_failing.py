# Automatically generated by Pynguin.
import ansible.playbook.base as module_0
import ansible.parsing.dataloader as module_1
import ansible.playbook.attribute as module_2

def test_case_0():
    try:
        str_0 = 'D_qR~X/n"\'EUca9\rNI'
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.load_data(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.squash()
        field_attribute_base_1 = module_0.FieldAttributeBase()
        var_1 = field_attribute_base_1.copy()
        var_2 = field_attribute_base_1.get_ds()
        base_meta_0 = None
        bytes_0 = b' d\x14\xc7\xa4d\xe7'
        var_3 = field_attribute_base_1.load_data(base_meta_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0, str_0]
        set_0 = {str_0, str_0}
        int_0 = 223
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.load_data(list_0, set_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        set_0 = None
        set_1 = {set_0}
        base_0 = module_0.Base()
        complex_0 = None
        list_0 = [dict_0]
        float_0 = 2188.02
        tuple_0 = (list_0, float_0)
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.get_validated_value(set_1, base_0, complex_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x12\xa5'
        list_0 = [bytes_0]
        field_attribute_base_0 = module_0.FieldAttributeBase()
        tuple_0 = (list_0,)
        var_0 = field_attribute_base_0.validate()
        field_attribute_base_1 = module_0.FieldAttributeBase()
        var_1 = field_attribute_base_1.post_validate(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        base_0 = module_0.Base()
        var_0 = base_0.get_search_path()
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_1 = field_attribute_base_0.deserialize(field_attribute_base_0)
    except BaseException:
        pass

def test_case_6():
    try:
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.validate()
        var_1 = field_attribute_base_0.dump_attrs()
        field_attribute_base_1 = module_0.FieldAttributeBase()
        str_0 = '$zf9/#'
        var_2 = field_attribute_base_0.copy()
        field_attribute_base_2 = module_0.FieldAttributeBase()
        var_3 = field_attribute_base_0.dump_me(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = dict()
        var_1 = dict(task=var_0)
        data_loader_0 = module_1.DataLoader()
        str_0 = 'i!qB=g3,I}'
        list_0 = [str_0, str_0, var_0]
        base_meta_0 = module_0.BaseMeta(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        field_attribute_base_0 = module_0.FieldAttributeBase()
        var_0 = field_attribute_base_0.squash()
        var_1 = field_attribute_base_0.squash()
        var_2 = field_attribute_base_0.validate()
        str_0 = '*`Y~_A"My#gT[Vxe'
        str_1 = 'set'
        str_2 = 'W[IV'
        dict_0 = {str_0: var_2, str_1: field_attribute_base_0, str_0: str_1, str_2: var_0}
        float_0 = -464.0
        field_attribute_0 = module_2.FieldAttribute(float_0, field_attribute_base_0)
        str_3 = '2(I@$qV;eAdi8|o='
        int_0 = 559
        field_attribute_base_1 = module_0.FieldAttributeBase()
        var_3 = field_attribute_base_1.get_validated_value(dict_0, field_attribute_0, str_3, int_0)
        base_0 = module_0.Base()
        var_4 = field_attribute_base_0.preprocess_data(base_0)
        list_0 = []
        data_loader_0 = module_1.DataLoader()
        str_4 = 'P5(x'
        field_attribute_1 = module_2.FieldAttribute(list_0, data_loader_0, str_4)
    except BaseException:
        pass