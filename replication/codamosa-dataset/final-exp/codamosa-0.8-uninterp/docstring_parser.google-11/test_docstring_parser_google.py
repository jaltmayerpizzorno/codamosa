# Automatically generated by Pynguin.
import docstring_parser.google as module_0

def test_case_0():
    pass

def test_case_1():
    google_parser_0 = module_0.GoogleParser()

def test_case_2():
    str_0 = 'Q'
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = ''
    docstring_0 = module_0.parse(str_0)
    str_1 = '        A one-line summary that does not use variable names or the\n        function name.\n\n        Several sentences providing an extended description.\n        Refer to variables like `var1` and `var2`,\n        and to functions like `func1` and `func2`.\n\n        Args:\n            arg1 (int): Description of `arg1`\n            arg2 (str): Description of `arg2`\n            *args: Variable length argumnt list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            bool: Description of return value\n\n        Raises:\n            AttributeError: The ``Raises`` section is a list ofall exceptions\n                that are relevant to the interface.\n            ValueError: If `arg2` is equal to `arg1`.\n\n        '
    docstring_1 = module_0.parse(str_1)

def test_case_4():
    google_parser_0 = module_0.GoogleParser()
    str_0 = '        A one-line summary that does not use variable names or the\n        function name.\n\n        Several sentences providing an extended description.\n        Refer to variables like `var1` and `var2`,\n        and to functions like `func1` and `func2`.\n\n        Args:\n            arg1 (int): Description of `arg1`\n            arg2 (str): Description of `arg2`\n            *args: Variable length argumnt list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            bool: Description of return value\n\n        Raises:\n            AttributeError: The ``Raises`` section is a list ofall exceptions\n                that are relevant to the interface.\n            ValueError: If `arg2` is equal to `arg1`.\n\n        '
    str_1 = 'qaYh1[ER'
    google_parser_1 = module_0.GoogleParser(str_1)
    docstring_0 = google_parser_0.parse(str_0)

def test_case_5():
    str_0 = '    A python decorator and decorator-generator to check docstrings.\n\n    If check_returns, check_raises and check_params are true, check the\n    function arguments using the function annotations and docstring.\n    Otherwise, only check the docstring.\n\n    Returns:\n        A decorator or decorator-generator.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = None
    docstring_0 = module_0.parse(str_0)
    str_1 = 'Example'
    google_parser_0 = module_0.GoogleParser()
    docstring_1 = module_0.parse(str_1)
    list_0 = [docstring_1, str_1, docstring_0]
    section_0 = module_0.Section(*list_0)
    var_0 = google_parser_0.add_section(section_0)

def test_case_7():
    str_0 = '        A one-line summary that does not use variable names or the\n        function name.\n\n        Several sentences providing an extended description.\n        Refer to variables like `var1` and `var2`,\n        and to functions like `func1` and `func2`.\n\n        Args:\n            arg1 (int): Description of `arg1`\n            arg2 (str): Description of `arg2`\n            *args: Variable length argumnt list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            bool: Description of return value\n\n        Raises:\n            AttributeError: The ``Raises`` section is a list ofall exceptions\n                that are relevant to the interface.\n            ValueError: If `arg2` is equal to `arg1`.\n\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = 'examples'
    docstring_0 = module_0.parse(str_0)
    str_1 = 'test_GoogleParser_parse\n    '
    google_parser_0 = module_0.GoogleParser()
    docstring_1 = google_parser_0.parse(str_1)

def test_case_9():
    google_parser_0 = module_0.GoogleParser()
    str_0 = '        A one-line summary that does not use variable names or the\n        function name.\n\n        Several sentences providing an extended descrip}ion.\n        Refer to variables like `var1` and `var2`,\n        and to functions like `fuc1` and `func2`.\n\n        Args:\n            arg1 (int): Description1of `arg1`\n            arg2 (str): Description of `arg2`\n            *args:Variable length argument list.\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            bool: Description of return value\n\n        Rises:\n            AttributeError: The ``Raises`` section is a list of all exceptions\n                that are relevantKto the interface.\n            ValueError: If `arg2` is equal to `arg1`.\n\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_10():
    str_0 = '\n            This is the short description.\n\n            This is the long description.\n\n            Args:\n                arg1 (int): The first argument.\n                arg2 (Union[int, str]): The second argument.\n                arg3 (int, optional): The third argument. Defaults to 3.\n                arg4 (int, optional): The fourth argument. Defaults to 4.\n\n            Raises:\n                ValueError: When any argument is negative.\n                TypeError: When any argument is not an int.\n\n            Returns:\n                int: The return value.\n            '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = 'Function to add two integers.\n    Args:\n      a (int): First integer.\n      b (int): Second integer.\n    Returns:\n      int: Sum of a and b.\n    '
    docstring_0 = module_0.parse(str_0)
    docstring_1 = module_0.parse(str_0)
    var_0 = docstring_1.blank_after_short_description
    docstring_2 = module_0.parse(str_0)
    var_1 = docstring_2.long_description
    docstring_3 = module_0.parse(str_0)
    var_2 = docstring_3.blank_after_long_description
    int_0 = 0
    docstring_4 = module_0.parse(str_0)
    var_3 = docstring_4.meta[int_0]
    var_4 = var_3.description
    int_1 = 1
    docstring_5 = module_0.parse(str_0)
    var_5 = docstring_5.meta[int_1]
    var_6 = var_5.description
    int_2 = 2
    docstring_6 = module_0.parse(str_0)
    var_7 = docstring_6.meta[int_2]
    var_8 = var_7.description