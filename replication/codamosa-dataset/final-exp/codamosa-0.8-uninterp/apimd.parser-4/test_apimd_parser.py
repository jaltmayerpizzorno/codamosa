# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'x=/N[!o52"V>BO\\<f'
    str_1 = module_0.parent(str_0)

def test_case_2():
    str_0 = 'l'
    bool_0 = module_0.is_public_family(str_0)

def test_case_3():
    str_0 = 'W#y"UW\x0bv>'
    str_1 = ''
    dict_0 = {str_0: str_1, str_1: str_0}
    parser_0 = module_0.Parser(dict_0)
    parser_0.parse(str_1, str_1)

def test_case_4():
    str_0 = 'lS%XM;lk'
    int_0 = None
    dict_0 = {str_0: int_0}
    parser_0 = module_0.Parser(dict_0)
    parser_0.parse(str_0, str_0)

def test_case_5():
    str_0 = 're.Match'
    str_1 = module_0.code(str_0)

def test_case_6():
    str_0 = '&#124;'
    str_1 = module_0.esc_underscore(str_0)

def test_case_7():
    str_0 = 'x}CeXo"'
    str_1 = module_0.doctest(str_0)

def test_case_8():
    expr_0 = None
    str_0 = module_0.const_type(expr_0)

def test_case_9():
    str_0 = 'D;5!d)a%G\te91\\tgN?Uw'
    list_0 = [str_0, str_0, str_0]
    subscript_0 = module_1.Subscript(*list_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)

def test_case_10():
    str_0 = '_\n'
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    dict_1 = None
    list_1 = [list_0]
    list_2 = [dict_1, str_0, list_1]
    attribute_0 = module_1.Attribute(*list_2)
    str_1 = ')3q'
    dict_2 = {str_0: str_1, str_0: str_1}
    resolver_0 = module_0.Resolver(str_0, dict_2)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)

def test_case_11():
    parser_0 = module_0.Parser()

def test_case_12():
    bool_0 = False
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, dict_0)
    str_0 = '@_: Ag%:ez{-SIzHI2b?'
    str_1 = module_0.esc_underscore(str_0)
    import_from_0 = module_1.ImportFrom()
    parser_0.imports(str_1, import_from_0)

def test_case_13():
    str_0 = 'N[njk<\x0ba'
    import_0 = module_1.Import()
    list_0 = [import_0, import_0, import_0, import_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    parser_0 = module_0.Parser()
    parser_0.globals(str_0, ann_assign_0)

def test_case_14():
    str_0 = 'Lm54(&zBpH<y]1&5~H'
    list_0 = [str_0]
    assign_0 = module_1.Assign(*list_0)
    bool_0 = False
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, dict_0)
    parser_0.globals(str_0, assign_0)

def test_case_15():
    str_0 = '`E'
    bool_0 = module_0.is_public_family(str_0)
    str_1 = '--version'
    parser_0 = module_0.Parser(bool_0)
    parser_0.parse(str_0, str_1)
    str_2 = parser_0.compile()

def test_case_16():
    str_0 = 'K\x0b2\tY4'
    bool_0 = module_0.is_public_family(str_0)

def test_case_17():
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0, dict_0)
    str_0 = parser_0.compile()

def test_case_18():
    str_0 = 'C&)08 CtxV'
    str_1 = module_0.doctest(str_0)
    bool_0 = False
    str_2 = ';u*7g%\r;Fx+]4g\t~\t-R'
    str_3 = '3{'
    str_4 = 'Wrr(+\\sgDGc4S&r\x0c8'
    dict_0 = {str_2: str_0, str_0: str_3, str_0: str_4, str_4: str_0}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    str_5 = parser_0.compile()
    bool_1 = module_0.is_public_family(str_2)

def test_case_19():
    str_0 = '\x0c-[08[\\2>0JMJ8-DK&'
    list_0 = []
    dict_0 = {}
    list_1 = [dict_0, dict_0]
    dict_1 = {}
    parser_0 = module_0.Parser(dict_1)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_20():
    str_0 = 'Unit test for Parser.class_api'
    list_0 = [str_0]
    constant_0 = module_1.Constant(*list_0)
    str_1 = '+y"\nlu'
    str_2 = None
    dict_0 = {str_0: str_0, str_2: str_1}
    resolver_0 = module_0.Resolver(str_1, dict_0)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)

def test_case_21():
    name_0 = module_1.Name()
    bool_0 = True
    str_0 = 'DjO'
    str_1 = ''
    dict_0 = {str_0: str_1}
    resolver_0 = module_0.Resolver(str_0, dict_0, str_1)
    float_0 = -1.56
    tuple_0 = (name_0, bool_0, resolver_0, float_0)
    iterator_0 = None
    tuple_1 = (tuple_0, dict_0, iterator_0)
    bool_1 = True
    int_0 = 2903
    str_2 = None
    str_3 = ':w\x0c1v'
    str_4 = 'pjaF0f x K`j['
    str_5 = 'l6=DDB\n>?l4\x0bK@o,4cHQ'
    str_6 = module_0.code(str_1)
    dict_1 = {str_2: str_2, str_3: str_4, str_3: str_5, str_5: str_4}
    parser_0 = module_0.Parser(bool_1, int_0, dict_1, dict_1)
    var_0 = parser_0.__eq__(tuple_1)
    expr_0 = module_1.expr()
    str_7 = module_0.const_type(expr_0)
    bool_2 = module_0.is_magic(str_7)

def test_case_22():
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0)
    str_0 = 'collections.abc.Set'
    parser_0.parse(str_0, str_0)
    str_1 = module_0.esc_underscore(str_0)

def test_case_23():
    str_0 = '?[nhk<\x0ba'
    list_0 = [str_0]
    name_0 = module_1.Name(*list_0)
    str_1 = 'l'
    str_2 = '.z-ENpOC$FP0g'
    dict_0 = {str_0: str_0, str_2: str_0}
    resolver_0 = module_0.Resolver(str_1, dict_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    parser_0 = module_0.Parser()

def test_case_24():
    str_0 = '!\\qQ\n>Q}=Py5\\Q)'
    str_1 = '4wIMa[1mUd'
    int_0 = -873
    str_2 = ''
    str_3 = '`-upf.c8o;XH@'
    dict_0 = {str_1: int_0, str_2: int_0, str_3: int_0}
    str_4 = 'Y++i#F'
    str_5 = None
    str_6 = 'uj5$E\t-e{*0\x0cKWMQSt'
    dict_1 = {str_6: str_1, str_1: str_4, str_2: str_0}
    parser_0 = module_0.Parser(dict_1, dict_1, dict_1)
    str_7 = 'J\tSI'
    dict_2 = {str_4: str_5, str_7: str_3, str_7: str_4, str_4: str_4}
    list_0 = [str_7, dict_0]
    name_0 = module_1.Name(*list_0)
    str_8 = ''
    resolver_0 = module_0.Resolver(str_8, dict_2, str_1)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    var_0 = parser_0.__post_init__()

def test_case_25():
    str_0 = '\x0c-[08[\\2>0JMJ8-DK&'
    list_0 = []
    dict_0 = {}
    dict_1 = {}
    parser_0 = module_0.Parser(dict_1)
    list_1 = [dict_1, list_0, dict_0]
    import_from_0 = module_1.ImportFrom(*list_1)
    parser_1 = module_0.Parser(dict_1)
    parser_1.imports(str_0, import_from_0)

def test_case_26():
    int_0 = 2079
    bool_0 = False
    dict_0 = {}
    str_0 = 'H'
    set_0 = {str_0, str_0, str_0, str_0}
    dict_1 = {str_0: set_0, str_0: set_0, str_0: set_0, str_0: set_0}
    dict_2 = {}
    parser_0 = module_0.Parser(int_0, bool_0, dict_0, dict_1, dict_2)
    str_1 = parser_0.compile()
    str_2 = '&#124;'
    list_0 = [str_1, str_0]
    assign_0 = module_1.Assign(*list_0)
    bool_1 = False
    parser_1 = module_0.Parser(bool_1, dict_2)
    parser_1.globals(str_2, assign_0)

def test_case_27():
    str_0 = 'O9tD%Hm%r'
    list_0 = [str_0]
    constant_0 = module_1.Constant(*list_0)
    str_1 = 'f5'
    str_2 = '`m1[oHRN!~l<m=,Mi|\n'
    dict_0 = {str_0: str_1, str_2: str_1}
    str_3 = '$OK>5N+0]1fKFO<E0#5F'
    resolver_0 = module_0.Resolver(str_1, dict_0, str_3)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)
    str_4 = 'W#y"UW\x0bv>'
    str_5 = 'uO'
    str_6 = ''
    dict_1 = {str_0: str_6, str_5: str_4, str_6: str_5}
    parser_0 = module_0.Parser(dict_1)
    parser_0.parse(str_0, str_0)

def test_case_28():
    str_0 = 'Sx'
    bool_0 = module_0.is_public_family(str_0)
    str_1 = 'gG@R.8+cUJn'
    str_2 = 'typingFozenSet'
    parser_0 = module_0.Parser(bool_0)
    parser_0.parse(str_0, str_2)
    module_x_var_0 = None
    parser_0.load_docstring(str_0, module_x_var_0)
    assign_0 = None
    parser_0.globals(str_1, assign_0)
    str_3 = '&'
    parser_0.globals(str_3, assign_0)
    var_0 = parser_0.__post_init__()
    expr_0 = module_1.expr()

def test_case_29():
    str_0 = '!\\qQ\n>Q}=Py5\\Q)'
    str_1 = '4wIMa[1mUd'
    int_0 = -873
    str_2 = ''
    str_3 = '`-upf.c8o;XH@'
    dict_0 = {str_1: int_0, str_2: int_0, str_3: int_0}
    str_4 = 'Y++i#F'
    str_5 = None
    str_6 = 'uj5$E\t-e{*0\x0cKWMQSt'
    dict_1 = {str_6: str_1, str_1: str_4, str_2: str_0}
    parser_0 = module_0.Parser(dict_1, dict_1, dict_1)
    str_7 = 'J\tSI'
    str_8 = 'h+'
    dict_2 = {str_4: str_5, str_7: str_3, str_7: str_8, str_8: str_8}
    list_0 = [str_8, dict_0]
    name_0 = module_1.Name(*list_0)
    str_9 = ''
    resolver_0 = module_0.Resolver(str_9, dict_2, str_1)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    var_0 = parser_0.__post_init__()

def test_case_30():
    str_0 = '_r'
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0)
    bool_0 = module_0.is_public_family(str_0)

def test_case_31():
    str_0 = '\n>>> print("Hello world.")\nHello world.\n'
    str_1 = module_0.doctest(str_0)
    str_2 = '\n>>> print("Hello world.")\nHello world.\nNo sign.'
    str_3 = module_0.doctest(str_2)
    str_4 = 'No sign.\n>>> print("Hello world.")\nHello world.\n'
    str_5 = module_0.doctest(str_4)

def test_case_32():
    parser_0 = module_0.Parser()
    str_0 = 'a'
    var_0 = []
    bool_0 = True
    bool_1 = False
    iterator_0 = parser_0.func_ann(str_0, var_0, has_self=bool_0, cls_method=bool_1)
    var_1 = list(iterator_0)
    var_2 = []
    iterator_1 = parser_0.func_ann(str_0, var_2, has_self=bool_0, cls_method=bool_0)
    var_3 = list(iterator_1)
    var_4 = []
    iterator_2 = parser_0.func_ann(str_0, var_4, has_self=bool_1, cls_method=bool_1)
    var_5 = list(iterator_2)
    var_6 = []
    iterator_3 = parser_0.func_ann(str_0, var_6, has_self=bool_1, cls_method=bool_0)
    var_7 = list(iterator_3)