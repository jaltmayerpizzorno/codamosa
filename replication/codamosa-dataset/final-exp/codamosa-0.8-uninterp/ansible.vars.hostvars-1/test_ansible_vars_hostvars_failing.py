# Automatically generated by Pynguin.
import ansible.vars.hostvars as module_0

def test_case_0():
    try:
        int_0 = 362
        str_0 = 'pdn#_/.,\tK5)SH'
        set_0 = {str_0, int_0}
        bool_0 = True
        host_vars_vars_0 = module_0.HostVarsVars(set_0, bool_0)
        host_vars_0 = module_0.HostVars(int_0, str_0, host_vars_vars_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 943
        bool_0 = False
        list_0 = [int_0, int_0]
        dict_0 = {}
        host_vars_vars_0 = module_0.HostVarsVars(list_0, dict_0)
        var_0 = host_vars_vars_0.__getitem__(bool_0)
        tuple_0 = ()
        bool_1 = False
        host_vars_0 = module_0.HostVars(tuple_0, tuple_0, bool_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xe6tD\xd8\x88m\x00@\x1c\xf9\xe9\xf0\x1a('
        float_0 = 319.02443
        host_vars_vars_0 = module_0.HostVarsVars(bytes_0, float_0)
        var_0 = host_vars_vars_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        int_0 = -575
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, int_0)
        float_0 = 0.1
        var_0 = host_vars_vars_0.__contains__(float_0)
        bool_0 = True
        host_vars_vars_1 = module_0.HostVarsVars(host_vars_vars_0, bool_0)
        bool_1 = True
        bytes_0 = b'\xc8zjVO\xe6\x99\xe4pYu\x82;'
        bytes_1 = b'\x15\xef\xdd*\x9e\xe2\xb65g\x9f\xa8\xcfvu'
        float_1 = 0.5
        str_0 = ''
        dict_0 = {tuple_0: bool_1, float_1: bytes_0, float_1: str_0, int_0: float_1}
        host_vars_0 = module_0.HostVars(bytes_1, dict_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = None
        str_0 = 'vzzo9SZU@?:\n6{Q'
        list_0 = [str_0, str_0, str_0]
        str_1 = '6\n.85maOH9jsYoG'
        bytes_0 = b'\t\x7f\xa28"S\xb5\xd8}3\xa7\x7f)\xd0\xf8\x9a.'
        host_vars_vars_0 = module_0.HostVarsVars(str_1, bytes_0)
        int_0 = 396
        host_vars_0 = module_0.HostVars(list_0, host_vars_vars_0, int_0)
        var_0 = host_vars_0.set_inventory(host_vars_vars_0)
        float_1 = 40.87612322934552
        dict_0 = {str_0: float_1, float_0: host_vars_0}
        var_1 = host_vars_0.__setstate__(dict_0)
        var_2 = host_vars_0.__deepcopy__(list_0)
        var_3 = host_vars_0.raw_get(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\ndQ2/6]V'
        dict_0 = {str_0: str_0}
        bytes_0 = b'/\x91\x89\xe0\xca'
        float_0 = 1.0
        dict_1 = {float_0: str_0, bytes_0: str_0, float_0: float_0, str_0: str_0}
        host_vars_vars_0 = module_0.HostVarsVars(bytes_0, dict_1)
        str_1 = ']fEXR\nQ225Vl'
        host_vars_vars_1 = module_0.HostVarsVars(host_vars_vars_0, str_1)
        int_0 = 3765
        host_vars_0 = module_0.HostVars(host_vars_vars_1, host_vars_vars_0, int_0)
        var_0 = host_vars_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        int_0 = -575
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, int_0)
        float_0 = 0.1
        var_0 = host_vars_vars_0.__contains__(float_0)
        bool_0 = True
        host_vars_vars_1 = module_0.HostVarsVars(host_vars_vars_0, bool_0)
        bool_1 = True
        dict_0 = {}
        float_1 = -3155.694289
        bool_2 = False
        host_vars_0 = module_0.HostVars(float_1, host_vars_vars_1, bool_2)
        var_1 = host_vars_0.set_host_variable(tuple_0, dict_0, bool_1)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = None
        list_0 = [dict_0]
        str_0 = 'Validation of arguments failed:\n%s'
        bool_0 = False
        host_vars_vars_0 = module_0.HostVarsVars(bool_0, list_0)
        host_vars_vars_1 = module_0.HostVarsVars(str_0, host_vars_vars_0)
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_0, host_vars_vars_0)
        var_0 = host_vars_0.__repr__()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\ndQ2/6]V'
        bytes_0 = b'/\x91\x89\xe0\xca'
        float_0 = 1.0
        dict_0 = {float_0: str_0, bytes_0: str_0, float_0: float_0, str_0: str_0}
        host_vars_vars_0 = module_0.HostVarsVars(bytes_0, dict_0)
        str_1 = ']fEXR\nQ225Vl'
        host_vars_vars_1 = module_0.HostVarsVars(host_vars_vars_0, str_1)
        int_0 = 3765
        host_vars_0 = module_0.HostVars(host_vars_vars_1, host_vars_vars_0, int_0)
        bool_0 = True
        var_0 = host_vars_0.__contains__(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'vzzo9SZU@?:\n6{Q'
        list_0 = [str_0, str_0, str_0]
        bytes_0 = b'\t\x7f\xa28"S\xb5\xd8}\xa7\x7f)\xf8\x9a.'
        host_vars_vars_0 = module_0.HostVarsVars(str_0, bytes_0)
        int_0 = 396
        host_vars_0 = module_0.HostVars(list_0, host_vars_vars_0, int_0)
        float_0 = 64.66969200074914
        dict_0 = {str_0: float_0, float_0: host_vars_0}
        var_0 = host_vars_0.__setstate__(dict_0)
        var_1 = host_vars_0.set_nonpersistent_facts(bytes_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\ndQ2/6]V'
        bytes_0 = b'/\x91\x89\xe0\xca'
        float_0 = 1.0
        dict_0 = {float_0: str_0, bytes_0: str_0, float_0: float_0, str_0: str_0}
        bytes_1 = b'\xc3\x95\x9b\x03})\x13\xa6]\x99\xdb\xd2I\xfcv\xef'
        complex_0 = None
        str_1 = 'Ha&4Z]4lCUh'
        list_0 = []
        tuple_0 = (list_0,)
        host_vars_vars_0 = module_0.HostVarsVars(tuple_0, tuple_0)
        str_2 = 'K*7'
        host_vars_0 = module_0.HostVars(str_2, host_vars_vars_0, dict_0)
        host_vars_1 = module_0.HostVars(str_1, host_vars_vars_0, host_vars_0)
        var_0 = host_vars_1.set_host_facts(bytes_1, complex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'vzzo9SZU@?:\n6{Q'
        list_0 = [str_0, str_0, str_0]
        str_1 = '-2/rDYq0!a>\n'
        bytes_0 = b'\t\x7f\xa28"S\xb5\xd8}3\xa7\x7f)\xd0\xf8\x9a.'
        host_vars_vars_0 = module_0.HostVarsVars(str_1, bytes_0)
        int_0 = 396
        host_vars_0 = module_0.HostVars(list_0, host_vars_vars_0, int_0)
        var_0 = host_vars_0.set_inventory(host_vars_vars_0)
        str_2 = 'b64encode'
        var_1 = host_vars_0.set_variable_manager(str_2)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = None
        str_0 = '^C'
        list_0 = [str_0, str_0, str_0]
        str_1 = '-2/rDYq0!a>\n'
        bytes_0 = b'\t\x7f\xa28"S\xb5\xd8}3\xa7\x7f)\xd0\xf8\x9a.'
        host_vars_vars_0 = module_0.HostVarsVars(str_1, bytes_0)
        int_0 = 369
        host_vars_0 = module_0.HostVars(list_0, host_vars_vars_0, int_0)
        var_0 = host_vars_0.set_inventory(host_vars_vars_0)
        float_1 = 41.0
        dict_0 = {str_0: float_1, float_0: host_vars_0}
        var_1 = host_vars_0.__setstate__(dict_0)
        var_2 = host_vars_0.__len__()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'vzzo9SZU@?:\n6{Q'
        list_0 = [str_0, str_0, str_0]
        str_1 = '6\n.85maOH9jsYoG'
        bytes_0 = b'\t\x7f\xa28"S\xb5\xd8}3\xa7\x7f)\xd0\xf8\x9a.'
        host_vars_vars_0 = module_0.HostVarsVars(str_1, bytes_0)
        int_0 = 396
        host_vars_0 = module_0.HostVars(list_0, host_vars_vars_0, int_0)
        var_0 = host_vars_0.set_inventory(host_vars_vars_0)
        var_1 = host_vars_0.__setstate__(host_vars_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = None
        str_0 = 'vzzo9SZU@?:\n6{Q'
        list_0 = [str_0, str_0, str_0]
        bytes_0 = None
        host_vars_vars_0 = module_0.HostVarsVars(list_0, bytes_0)
        int_0 = 365
        host_vars_0 = module_0.HostVars(list_0, host_vars_vars_0, int_0)
        var_0 = host_vars_0.set_inventory(host_vars_vars_0)
        float_1 = 41.0
        bool_0 = True
        dict_0 = {str_0: float_1, float_0: host_vars_0}
        var_1 = host_vars_0.__setstate__(dict_0)
        tuple_0 = (bool_0,)
        str_1 = '\rBQ'
        var_2 = host_vars_0.__deepcopy__(str_1)
        bytes_1 = b']\x9c\xe5$\xbc\xd1'
        var_3 = host_vars_0.set_nonpersistent_facts(tuple_0, bytes_1)
    except BaseException:
        pass