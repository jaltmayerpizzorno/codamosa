# Automatically generated by Pynguin.
import pymonet.lazy as module_0
import builtins as module_1

def test_case_0():
    try:
        bool_0 = True
        lazy_0 = module_0.Lazy(bool_0)
        var_0 = lazy_0.to_validation()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -31
        var_0 = lambda x: x * int_0
        lazy_0 = module_0.Lazy(var_0)
        var_1 = lazy_0 == lazy_0
        float_0 = -1114.6
        var_2 = lazy_0.map(float_0)
        lazy_1 = module_0.Lazy(var_0)
        callable_0 = None
        lazy_2 = module_0.Lazy(callable_0)
        str_0 = lazy_2.__str__()
        lazy_3 = module_0.Lazy(callable_0)
        var_3 = lazy_3.ap(lazy_2)
        lazy_4 = module_0.Lazy(callable_0)
        var_4 = lazy_3.to_maybe()
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = lambda x, y: x * y
        lazy_0 = module_0.Lazy(var_0)
        var_1 = lazy_0 == lazy_0
        var_2 = lazy_0.to_box()
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        lazy_0 = module_0.Lazy(list_0)
        bool_0 = True
        var_0 = lazy_0.map(bool_0)
        var_1 = lazy_0.to_either()
    except BaseException:
        pass

def test_case_4():
    try:
        object_0 = module_1.object()
        str_0 = '1~k'
        dict_0 = {str_0: str_0}
        lazy_0 = module_0.Lazy(dict_0)
        var_0 = lazy_0.to_maybe()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = lambda x, y: x * y
        int_0 = 1
        var_1 = lambda : int_0
        lazy_0 = module_0.Lazy(var_1)
        lazy_1 = module_0.Lazy(var_1)
        var_2 = lazy_0 == lazy_1
        lazy_2 = module_0.Lazy(int_0)
        var_3 = lambda x: x * int_0
        var_4 = lazy_2.map(var_3)
        var_5 = lazy_0.to_try()
        lazy_3 = module_0.Lazy(lazy_1)
        var_6 = lazy_1.to_box()
    except BaseException:
        pass