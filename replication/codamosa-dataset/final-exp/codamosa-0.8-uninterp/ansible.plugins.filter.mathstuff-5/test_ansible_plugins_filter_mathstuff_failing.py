# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        bool_0 = None
        int_0 = -3426
        var_0 = module_0.unique(bool_0, bool_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        set_0 = set()
        var_0 = module_0.symmetric_difference(dict_0, set_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'salt_exact'
        list_0 = [str_0, str_0, str_0, str_0]
        bytes_0 = b'.,\xe2\xd9d\xaf\xf8&\x17\xdfd\xf1\x14B*\xb0\x1e\xb6\xab\xeb'
        float_0 = -1803.346
        bytes_1 = b'&\xf4(\xfe'
        var_0 = module_0.intersect(float_0, bytes_1, str_0)
        str_1 = '--%s'
        int_0 = 1475
        str_2 = 'G_6 '
        list_1 = [int_0, str_2, list_0, str_0, bytes_0]
        var_1 = module_0.symmetric_difference(bytes_0, list_0, list_1)
        float_1 = 516.148
        var_2 = module_0.unique(bytes_0, str_1, float_1)
        tuple_0 = (list_0, str_0)
        bool_0 = False
        var_3 = module_0.rekey_on_member(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'salt_exact'
        list_0 = [str_0, str_0, str_0, str_0]
        str_1 = '9LCKD9SEl&S MKML'
        float_0 = 473.7776097096135
        list_1 = None
        var_0 = module_0.min(list_1, list_0)
        set_0 = set()
        var_1 = module_0.unique(list_0, str_1, float_0, set_0)
        filter_module_0 = module_0.FilterModule()
        str_2 = "\n            Takes a path and returns it's mount point\n\n        :param path: a string type with a filesystem path\n        :returns: the path to the mount point as a text type\n        "
        var_2 = module_0.difference(filter_module_0, str_2, filter_module_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b"\x8d\x8a\xbbP\xc1\x0f\xae'g;"
        list_0 = []
        list_1 = None
        var_0 = module_0.symmetric_difference(list_0, list_1, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'salt_exact'
        list_0 = [str_0, str_0, str_0, str_0, str_0]
        bytes_0 = b'.,\xe2\xd9d\xaf\xf8&\x17\xdfd\xf1\x14B*\xb0\x1e\xb6\xab\xeb'
        bytes_1 = b'\xbd\xd9\x93\x85\x9cgr4\xa9U\x9f\xf1\xd5\xd6EyM'
        var_0 = module_0.symmetric_difference(bytes_1, list_0, list_0)
        float_0 = 516.148
        var_1 = module_0.unique(bytes_0, str_0, float_0)
        tuple_0 = (list_0, str_0)
        bool_0 = False
        var_2 = module_0.rekey_on_member(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        float_0 = -651.490473
        var_0 = module_0.power(bool_0, float_0)
        filter_module_0 = module_0.FilterModule()
        str_0 = 'QglWMA[T}>m'
        var_1 = filter_module_0.filters()
        str_1 = 'Eh4e8b&"Q"'
        str_2 = '/t+sk5|&k)HiNQB5(P'
        var_2 = module_0.difference(str_0, str_1, str_2)
        str_3 = '9_DhSYg|Lu5sV#t'
        dict_0 = {str_1: str_0, str_3: filter_module_0}
        str_4 = '`{R&t.'
        list_0 = None
        var_3 = module_0.union(dict_0, str_4, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'E'
        var_0 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'G?SMv>=)gye \nB'
        list_0 = [str_0, str_0, str_0]
        int_0 = 1163
        var_0 = module_0.power(list_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'sallt_exact'
        dict_0 = {str_0: str_0}
        var_0 = module_0.inversepower(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'|\x04\x88\xb1y?8\x18s\x1b\t\xd79z:\xa3'
        list_0 = []
        var_0 = module_0.inversepower(bytes_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xfcR\xa8\\\xe4-\xd8\xdc'
        var_0 = module_0.human_readable(bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tuple_0 = None
        var_0 = module_0.human_to_bytes(tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '/<\x0bfL\tyV!.^hw^M6fNX0'
        var_0 = module_0.rekey_on_member(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '9LCKD9SEl&S M-KML_'
        float_0 = 516.148
        set_0 = {str_0}
        var_0 = module_0.rekey_on_member(set_0, float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        str_0 = '%s failed while attempting to parse %s'
        var_0 = module_0.min(bool_0, str_0)
        list_0 = None
        dict_0 = {}
        var_1 = module_0.rekey_on_member(list_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        str_1 = '<p/rcK>t,B`fbCN'
        list_0 = [str_0, str_0]
        str_2 = '.*(Intel.*)'
        dict_0 = {str_1: list_0, str_2: list_0, str_0: str_2}
        tuple_0 = ()
        set_0 = {str_2}
        var_0 = module_0.symmetric_difference(dict_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = 2081.0
        list_0 = [float_0, float_0, float_0, float_0]
        set_0 = set()
        var_0 = module_0.intersect(float_0, list_0, set_0)
        bool_0 = False
        var_1 = module_0.human_to_bytes(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = None
        list_0 = [int_0, int_0]
        str_0 = ''
        dict_0 = {str_0: list_0}
        str_1 = '*c?\n\n8X85s\n*u\x0c%'
        var_0 = module_0.difference(list_0, dict_0, str_1)
        list_1 = [int_0, int_0, int_0, int_0]
        str_2 = 'P'
        str_3 = 'N>_^6C\x0c8KqR^qvU/'
        dict_1 = {str_2: list_1, str_2: list_1, str_3: int_0, str_3: int_0}
        var_1 = module_0.union(int_0, list_1, dict_1)
    except BaseException:
        pass

def test_case_19():
    try:
        filter_module_0 = None
        var_0 = module_0.rekey_on_member(filter_module_0, filter_module_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 1
        var_0 = module_0.human_readable(int_0, int_0, int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -1161
        var_0 = module_0.logarithm(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = 'Invalid variable name in vars specified for %s: %s'
        var_0 = module_0.max(filter_module_0, str_0)
        str_1 = 'Ws\r1Z*:j'
        float_0 = 2.718281828459045
        tuple_0 = None
        tuple_1 = (tuple_0,)
        dict_0 = {float_0: tuple_1, str_1: tuple_0, str_1: float_0}
        dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1, str_1: dict_0}
        list_0 = [float_0, str_1, str_1, float_0]
        var_1 = module_0.unique(float_0, dict_1, dict_1, list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'name'
        int_0 = 1
        var_0 = {str_0: str_0, str_0: int_0}
        var_1 = {str_0: str_0, str_0: int_0}
        var_2 = {str_0: var_0, str_0: var_1}
        var_3 = module_0.rekey_on_member(var_2, str_0)
        var_4 = var_2[str_0]
        var_5 = var_2[str_0]
        var_6 = [var_4, var_5]
        var_7 = module_0.rekey_on_member(var_6, str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = 1647.76623
        float_1 = 222.0
        var_0 = module_0.power(float_0, float_1)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'salt_exact'
        list_0 = [str_0, str_0]
        bytes_0 = b'.,\xe2\xd9d\xaf\xf8&\x17\xdfd\xf1\x14B*\xb0\x1e\xb6\xab\xeb'
        str_1 = '9LCKD9SEl&S M-KML'
        int_0 = 1475
        list_1 = [int_0, str_1, list_0, str_0, bytes_0]
        var_0 = module_0.symmetric_difference(bytes_0, list_0, list_1)
        float_0 = 516.148
        var_1 = module_0.unique(bytes_0, str_1, float_0)
        float_1 = 413.29585
        bool_0 = True
        var_2 = module_0.human_to_bytes(float_1, bool_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'name'
        int_0 = 1
        var_0 = {str_2: str_0, str_0: int_0}
        var_1 = {str_2: str_1, str_2: int_0}
        var_2 = {str_0: var_0, str_1: var_1}
        var_3 = module_0.rekey_on_member(var_2, str_2)
        var_4 = var_2[str_0]
        var_5 = var_2[str_1]
        var_6 = [var_4, var_5]
        var_7 = module_0.rekey_on_member(var_6, str_2)
        var_8 = module_0.rekey_on_member(var_2, str_1)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'nVe'
        int_0 = 1
        var_0 = {str_2: str_0, str_0: int_0}
        var_1 = {str_2: str_1, str_2: int_0}
        var_2 = {str_0: var_0, str_1: var_1}
        var_3 = var_2[str_0]
        var_4 = var_2[str_1]
        list_0 = None
        str_3 = 'k|'
        str_4 = '_i(n4Qf,p\x0cy?Y'
        dict_0 = {str_4: var_0, str_1: var_0}
        list_1 = [int_0, dict_0, var_0, str_3, list_0]
        var_5 = module_0.rekey_on_member(dict_0, list_1)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'b'
        str_1 = 'naGe'
        int_0 = 1
        bytes_0 = b'[p\x8d'
        str_2 = '1$Bsx"sS'
        str_3 = '&sU/:)1&Pd\nf'
        var_0 = module_0.union(str_2, str_1, str_3)
        dict_0 = {}
        dict_1 = {int_0: str_0, bytes_0: str_0, str_0: dict_0, str_0: str_1}
        var_1 = module_0.min(dict_1, bytes_0)
        list_0 = [str_1, str_1]
        bytes_1 = b''
        dict_2 = {int_0: str_0, int_0: int_0}
        int_1 = 480
        var_2 = module_0.logarithm(int_1)
        list_1 = [dict_2, dict_2]
        var_3 = module_0.difference(list_0, bytes_1, list_1)
        str_4 = '--\x0c"18!B)%&C\t$L"'
        tuple_0 = (str_4,)
        var_4 = module_0.max(list_1, tuple_0)
        var_5 = {str_1: str_0, str_0: int_0}
        var_6 = {str_1: int_0}
        var_7 = {str_0: var_5, str_0: var_6}
        var_8 = module_0.rekey_on_member(var_7, str_1)
        var_9 = var_7[str_0]
        list_2 = None
        bool_0 = False
        var_10 = module_0.inversepower(list_2, bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = b'\x84\xfb '
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        tuple_0 = (set_0,)
        bool_0 = False
        var_0 = module_0.unique(tuple_0, bool_0, bool_0)
    except BaseException:
        pass