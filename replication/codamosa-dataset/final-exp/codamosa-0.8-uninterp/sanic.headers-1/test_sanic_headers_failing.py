# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        str_0 = 'w'
        str_1 = 'XW'
        int_0 = -2703
        tuple_0 = (str_1, int_0)
        dict_0 = {str_0: tuple_0, int_0: str_1}
        optional_0 = module_0.parse_forwarded(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'abc.com:80'
        tuple_0 = module_0.parse_host(str_0)
        dict_0 = None
        bool_0 = False
        optional_0 = module_0.parse_xforwarded(dict_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        iterable_0 = None
        dict_0 = module_0.fwd_normalize(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 413
        iterable_0 = None
        bytes_0 = module_0.format_http1_response(int_0, iterable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 601
        tuple_0 = None
        str_0 = 'n.uipv\rW'
        str_1 = ''
        str_2 = '\roWsb2;\x0bP'
        dict_0 = {str_0: str_1, str_2: int_0}
        tuple_1 = (tuple_0, dict_0)
        tuple_2 = (tuple_1,)
        bytes_0 = module_0.format_http1_response(int_0, tuple_2)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 16
        tuple_0 = ()
        bytes_0 = module_0.format_http1_response(int_0, tuple_0)
        int_1 = -2717
        set_0 = set()
        dict_0 = module_0.fwd_normalize(set_0)
        str_0 = '_\x0bz`'
        tuple_1 = module_0.parse_content_header(str_0)
        str_1 = None
        dict_1 = {str_1: int_1, str_1: str_1, str_1: str_1}
        bytes_1 = module_0.format_http1_response(int_1, dict_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        str_0 = "us=y'Vhn2+J]R9>e{/"
        tuple_0 = module_0.parse_content_header(str_0)
        int_0 = 2196
        tuple_1 = (bool_0, int_0)
        dict_0 = module_0.fwd_normalize(tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'for'
        str_1 = 'unknown'
        str_2 = (str_0, str_1)
        str_3 = 'proto'
        str_4 = 'https'
        str_5 = (str_3, str_4)
        str_6 = 'host'
        str_7 = 'test.com'
        str_8 = (str_6, str_7)
        str_9 = 'port'
        str_10 = '8080'
        str_11 = (str_9, str_10)
        str_12 = 'path'
        str_13 = '/login'
        str_14 = (str_12, str_13)
        str_15 = (str_2, str_5, str_8, str_11, str_14)
        dict_0 = module_0.fwd_normalize(str_15)
        dict_1 = module_0.fwd_normalize(str_7)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '192.168.1.1'
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = '_123'
        str_3 = module_0.fwd_normalize_address(str_2)
        str_4 = '[::1]'
        str_5 = module_0.fwd_normalize_address(str_4)
        str_6 = 'UNKNOWN'
        str_7 = module_0.fwd_normalize_address(str_6)
        str_8 = 'unknown'
        str_9 = module_0.fwd_normalize_address(str_8)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'for'
        str_1 = 'unknown'
        str_2 = (str_0, str_1)
        str_3 = 'proto'
        str_4 = (str_3, str_1)
        str_5 = 'host'
        str_6 = 'test.com'
        str_7 = (str_5, str_6)
        str_8 = 'port'
        str_9 = '8080'
        str_10 = (str_8, str_9)
        str_11 = 'path'
        str_12 = (str_11, str_10)
        str_13 = (str_2, str_4, str_7, str_10, str_12)
        dict_0 = module_0.fwd_normalize(str_13)
    except BaseException:
        pass