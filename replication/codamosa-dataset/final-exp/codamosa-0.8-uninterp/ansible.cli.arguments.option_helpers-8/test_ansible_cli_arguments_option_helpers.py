# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    var_0 = module_0.version()

def test_case_1():
    str_0 = 'test'
    ansible_version_0 = module_0.AnsibleVersion(str_0, str_0, str_0)
    argument_parser_0 = module_1.ArgumentParser(str_0)
    str_1 = 'test'
    var_0 = ansible_version_0.__call__(argument_parser_0, str_1, str_1)

def test_case_2():
    bytes_0 = b')\\la\xec\xd3\xbb\x96\xb3\xc2&\x14\xf7=\x8c(q'
    list_0 = [bytes_0]
    str_0 = "No hosts matched the subscripted pattern '%s'"
    prepend_list_action_0 = module_0.PrependListAction(bytes_0, list_0, str_0)
    var_0 = module_0.version()

def test_case_3():
    str_0 = 'test'
    argument_parser_0 = module_1.ArgumentParser(str_0)
    var_0 = module_0.add_module_options(argument_parser_0)
    str_1 = '-M'
    str_2 = '/path1:/path2'
    str_3 = [str_0, str_1, str_2, str_1, str_2]
    var_1 = argument_parser_0.parse_args(str_3)
    var_2 = argument_parser_0.parse_args(str_1)

def test_case_4():
    var_0 = module_0.unfrack_path()

def test_case_5():
    var_0 = module_0.version()
    list_0 = [var_0]
    var_1 = module_0.create_base_parser(list_0)

def test_case_6():
    str_0 = '--playbook-dir'
    str_1 = [str_0, str_0]
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_basedir_options(argument_parser_0)
    var_1 = argument_parser_0.parse_args(str_1)

def test_case_7():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_connect_options(argument_parser_0)

def test_case_8():
    str_0 = 'test'
    argument_parser_0 = module_1.ArgumentParser(str_0)
    var_0 = module_0.add_output_options(argument_parser_0)
    var_1 = argument_parser_0.parse_args()

def test_case_9():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_vault_options(argument_parser_0)

def test_case_10():
    int_0 = -335
    var_0 = module_0.version(int_0)
    var_1 = module_0.version()

def test_case_11():
    var_0 = module_0.version()
    str_0 = '7F\r'
    var_1 = module_0.maybe_unfrack_path(str_0)

def test_case_12():
    str_0 = 'xG&7wc-"}m'
    var_0 = module_0.version(str_0)
    float_0 = None
    sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0)
    int_0 = -793
    bytes_0 = b'\xdd\xb8'
    var_1 = module_0.maybe_unfrack_path(bytes_0)
    int_1 = -361
    list_0 = [bytes_0, int_0, int_0]
    str_1 = '?'
    float_1 = 4551.905
    bytes_1 = b'\xc8\xe1\xef\xa6\x02S\x91\xfa\xe6\xd4\xc6\x80\n\xd5'
    prepend_list_action_0 = None
    tuple_0 = (bytes_1, prepend_list_action_0, sorting_help_formatter_0)
    prepend_list_action_1 = module_0.PrependListAction(float_1, int_0, tuple_0)
    prepend_list_action_2 = module_0.PrependListAction(int_1, list_0, str_1, prepend_list_action_1, list_0, float_1)

def test_case_13():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_meta_options(argument_parser_0)
    str_0 = '--flush-cache'
    var_1 = argument_parser_0.parse_args(str_0)

def test_case_14():
    str_0 = '--playbook-dir'
    attrgetter_0 = None
    argument_parser_0 = module_1.ArgumentParser(attrgetter_0, attrgetter_0)
    var_0 = module_0.add_fork_options(argument_parser_0)
    str_1 = 'teht'
    str_2 = [str_0, str_1]
    var_1 = module_0.unfrack_path()
    argument_parser_1 = module_1.ArgumentParser()
    var_2 = module_0.add_basedir_options(argument_parser_1)
    var_3 = argument_parser_1.parse_args(str_2)

def test_case_15():
    str_0 = '--playbook-dir'
    str_1 = 'test'
    str_2 = [str_0, str_1]
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_basedir_options(argument_parser_0)
    var_1 = argument_parser_0.parse_args(str_2)

def test_case_16():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_async_options(argument_parser_0)
    var_1 = argument_parser_0.parse_args()

def test_case_17():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_inventory_options(argument_parser_0)
    str_0 = '-i'
    str_1 = 'foo'
    str_2 = 'bar'
    str_3 = 'baz'
    str_4 = 'bam,-l'
    str_5 = 'blip'
    str_6 = [str_0, str_1, str_0, str_2, str_0, str_3, str_0, str_4, str_5]
    var_1 = argument_parser_0.parse_args(str_6)

def test_case_18():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_runas_options(argument_parser_0)
    var_1 = []
    var_2 = argument_parser_0.parse_args(var_1)
    str_0 = '-b'
    str_1 = 'sudo'
    str_2 = '--become-user'
    str_3 = 'admin'
    str_4 = [str_0, str_1, str_1, str_2, str_3]
    var_3 = argument_parser_0.parse_args(str_4)

def test_case_19():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_check_options(argument_parser_0)

def test_case_20():
    str_0 = []
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_subset_options(argument_parser_0)
    var_1 = argument_parser_0.parse_args(str_0)

def test_case_21():
    var_0 = module_0.unfrack_path()
    var_1 = module_0.version()
    str_0 = 'test'
    argument_parser_0 = module_1.ArgumentParser(str_0)
    var_2 = module_0.add_module_options(argument_parser_0)
    str_1 = '-M'
    str_2 = ''
    str_3 = [str_0, str_1, str_2, str_1, str_2]
    var_3 = argument_parser_0.parse_args(str_3)
    str_4 = '/th1'
    str_5 = '/path2'
    var_4 = module_0.unfrack_path()
    str_6 = [str_5, str_1, str_4, str_1, str_5]
    var_5 = argument_parser_0.parse_args(str_6)