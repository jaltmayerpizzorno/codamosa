# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = None
        bytes_0 = b'\xc4\xfc\x14'
        tuple_0 = (str_0, str_0, bytes_0)
        int_0 = True
        bool_0 = False
        maybe_0 = module_0.Maybe(int_0, bool_0)
        var_0 = maybe_0.map(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        object_0 = module_1.object()
        str_0 = "tPQ8zP\\k'"
        bool_0 = True
        maybe_0 = module_0.Maybe(str_0, bool_0)
        object_1 = module_1.object()
        bool_1 = maybe_0.__eq__(object_1)
        bool_2 = maybe_0.__eq__(object_0)
        maybe_1 = module_0.Maybe(str_0, bool_2)
        var_0 = maybe_1.bind(bool_2)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        str_0 = '\n        Take mapper function and return value of Left.\n\n        :returns: Stored value\n        :rtype: A\n        '
        float_0 = 1190.57246
        list_0 = [str_0]
        list_1 = [callable_0, callable_0, str_0, list_0]
        bool_0 = False
        maybe_0 = module_0.Maybe(list_1, bool_0)
        var_0 = maybe_0.ap(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        object_0 = module_1.object()
        float_0 = -2223.7
        bool_0 = False
        maybe_0 = module_0.Maybe(float_0, bool_0)
        bool_1 = maybe_0.__eq__(object_0)
        maybe_1 = module_0.Maybe(object_0, bool_1)
        var_0 = maybe_1.to_either()
        str_0 = '\n    Max is a Monoid that will combines 2 numbers, resulting in the largest of the two.\n    '
        var_1 = maybe_0.filter(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        object_0 = module_1.object()
        str_0 = '~P7!"UU!9'
        bool_0 = True
        var_0 = None
        bool_1 = True
        bytes_0 = b'e5\xc0\xe5P\xd4\xb38\xef\x9d'
        maybe_0 = module_0.Maybe(bytes_0, bool_0)
        var_1 = maybe_0.to_either()
        var_2 = maybe_0.map(bytes_0)
        var_3 = maybe_0.filter(maybe_0)
        maybe_1 = module_0.Maybe(bytes_0, bool_1)
        var_4 = None
        bool_2 = maybe_1.__eq__(object_0)
        maybe_2 = module_0.Maybe(var_4, bool_2)
        bool_3 = False
        var_5 = maybe_0.get_or_else(var_0)
        maybe_3 = module_0.Maybe(var_4, bool_3)
        var_6 = maybe_2.to_lazy()
        str_1 = '\n        Create empty maybe.\n\n        :returns: Maybe[None]\n        '
        dict_0 = {str_0: bool_3, str_1: bool_2, str_0: maybe_3, str_1: maybe_3}
        var_7 = maybe_2.filter(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        object_0 = module_1.object()
        float_0 = -261.2
        bool_0 = False
        maybe_0 = module_0.Maybe(float_0, bool_0)
        bool_1 = maybe_0.__eq__(object_0)
        bytes_0 = b'\xd5!\xe6\x1c_\xd7\x9e'
        str_0 = '\ny.xLv\x0c{D4b*'
        list_0 = [str_0, str_0, str_0]
        bool_2 = False
        maybe_1 = module_0.Maybe(list_0, bool_2)
        var_0 = maybe_1.to_validation()
        var_1 = maybe_1.to_box()
        bool_3 = True
        dict_0 = {}
        var_2 = maybe_1.get_or_else(list_0)
        var_3 = maybe_1.to_either()
        maybe_2 = module_0.Maybe(dict_0, bool_3)
        var_4 = maybe_2.to_validation()
        maybe_3 = module_0.Maybe(bytes_0, bool_3)
        var_5 = maybe_3.to_try()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        bool_1 = False
        maybe_0 = module_0.Maybe(bool_0, bool_1)
        var_0 = maybe_0.to_lazy()
        float_0 = 3776.0
        tuple_0 = ()
        bool_2 = True
        maybe_1 = module_0.Maybe(tuple_0, bool_2)
        var_1 = maybe_1.filter(float_0)
        dict_0 = None
        object_0 = module_1.object(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n    Min is a Monoid that will combines 2 numbers, resulting in the smallest of the two.\n    '
        int_0 = False
        set_0 = {int_0, int_0}
        bool_0 = False
        maybe_0 = module_0.Maybe(set_0, bool_0)
        var_0 = maybe_0.to_lazy()
        var_1 = maybe_0.to_try()
        var_2 = maybe_0.ap(str_0)
    except BaseException:
        pass