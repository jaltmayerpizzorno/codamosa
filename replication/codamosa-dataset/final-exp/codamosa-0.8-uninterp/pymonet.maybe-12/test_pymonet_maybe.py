# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = None
    bool_0 = False
    maybe_0 = module_0.Maybe(var_0, bool_0)

def test_case_2():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)

def test_case_3():
    list_0 = []
    float_0 = -913.0
    object_0 = module_1.object()
    object_1 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_1, bool_0)
    bool_1 = maybe_0.__eq__(object_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(float_0, bool_2)
    var_0 = maybe_1.ap(list_0)

def test_case_4():
    callable_0 = None
    str_0 = '\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    '
    str_1 = 's$Tdz?Uw>@p '
    str_2 = 'U}z;@;'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    bool_1 = True
    maybe_1 = module_0.Maybe(maybe_0, bool_1)
    var_0 = maybe_1.map(callable_0)

def test_case_5():
    callable_0 = None
    float_0 = 1289.6
    bool_0 = True
    bool_1 = False
    maybe_0 = module_0.Maybe(float_0, bool_1)
    int_0 = -249
    str_0 = '1y]>\r`GE5e-I|vv]'
    str_1 = '\rrV\\/)7~G:[L^'
    var_0 = maybe_0.get_or_else(str_1)
    tuple_0 = (int_0, str_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(tuple_0, bool_2)
    var_1 = maybe_1.get_or_else(maybe_0)
    maybe_2 = module_0.Maybe(float_0, bool_0)
    var_2 = maybe_2.bind(callable_0)

def test_case_6():
    object_0 = module_1.object()
    float_0 = -2223.7
    bool_0 = True
    maybe_0 = module_0.Maybe(float_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)
    bool_2 = False
    maybe_1 = module_0.Maybe(object_0, bool_2)
    var_0 = maybe_1.to_either()
    str_0 = '\n    Max is a Monoid that will combines 2 numbers, resulting in the largest of the two.\n    '
    var_1 = maybe_0.filter(str_0)

def test_case_7():
    var_0 = None
    str_0 = 'T'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_1 = maybe_0.get_or_else(var_0)
    dict_0 = {var_1: var_1, var_1: str_0}
    list_0 = [dict_0, str_0]
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_2 = maybe_1.to_validation()

def test_case_8():
    str_0 = '7'
    str_1 = '|iosrN]a?>fI'
    str_2 = 'xgI|O{Pf'
    dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1, str_2: str_1}
    bool_0 = True
    maybe_0 = module_0.Maybe(dict_0, bool_0)
    var_0 = maybe_0.get_or_else(str_0)

def test_case_9():
    str_0 = 'j\\ysazG`F^w/'
    bool_0 = False
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_either()

def test_case_10():
    object_0 = module_1.object()
    int_0 = -400
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)
    var_0 = None
    bool_2 = True
    maybe_1 = module_0.Maybe(var_0, bool_2)
    bool_3 = True
    bool_4 = True
    maybe_2 = module_0.Maybe(bool_3, bool_4)
    var_1 = maybe_2.to_box()

def test_case_11():
    str_0 = 'Validation.fail[{}, {}]'
    int_0 = -4068
    bool_0 = True
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_lazy()
    list_0 = [str_0, str_0, str_0]
    bool_1 = True
    maybe_1 = module_0.Maybe(list_0, bool_1)

def test_case_12():
    object_0 = module_1.object()
    str_0 = "tPQ8zP\\k'"
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    object_1 = module_1.object()
    list_0 = [object_0, str_0]
    str_1 = '\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        '
    maybe_1 = module_0.Maybe(str_1, bool_0)
    var_0 = maybe_1.ap(list_0)
    bool_1 = maybe_0.__eq__(object_1)
    bool_2 = maybe_0.__eq__(object_0)
    maybe_2 = module_0.Maybe(str_0, bool_2)
    int_0 = -983
    var_1 = maybe_0.ap(int_0)
    var_2 = maybe_2.to_lazy()
    var_3 = maybe_1.to_try()

def test_case_13():
    var_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(var_0, bool_0)
    var_1 = maybe_0.to_validation()
    bool_1 = False
    maybe_1 = module_0.Maybe(var_0, bool_1)