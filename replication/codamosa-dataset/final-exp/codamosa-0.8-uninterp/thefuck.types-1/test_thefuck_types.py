# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\x97\xf8o\xea1'
    list_0 = []
    command_0 = module_0.Command(bytes_0, list_0)

def test_case_2():
    bool_0 = True
    bytes_0 = b'\xa0EL%'
    str_0 = 'G|<Z7H#J\'rp\\w]n"Tc\x0b*'
    int_0 = 4
    int_1 = -696
    list_0 = [bytes_0, bytes_0, int_0, bool_0]
    str_1 = '[&cu12s'
    rule_0 = module_0.Rule(bool_0, bytes_0, str_0, int_0, int_1, list_0, str_1)
    str_2 = 'OV-:R~W>P|"RMSmkg$'
    list_1 = [str_2, str_2]
    tuple_0 = (list_1,)
    command_0 = module_0.Command(str_2, tuple_0)
    set_0 = set()
    str_3 = 't'
    corrected_command_0 = module_0.CorrectedCommand(command_0, set_0, str_3)
    var_0 = corrected_command_0.__eq__(rule_0)
    list_2 = []
    str_4 = 'apt list --upgradable'
    command_1 = module_0.Command(list_2, str_4)
    var_1 = command_1.__eq__(bool_0)

def test_case_3():
    set_0 = set()
    dict_0 = {}
    bytes_0 = b''
    tuple_0 = ()
    dict_1 = {}
    corrected_command_0 = module_0.CorrectedCommand(tuple_0, dict_1, set_0)
    command_0 = module_0.Command(corrected_command_0, dict_1)
    command_1 = module_0.Command(dict_0, bytes_0)
    var_0 = command_1.__eq__(command_0)
    int_0 = 2
    tuple_1 = (int_0,)
    command_2 = module_0.Command(set_0, tuple_1)

def test_case_4():
    bytes_0 = b'\x97\xf8o\xea1'
    list_0 = []
    command_0 = module_0.Command(bytes_0, list_0)
    var_0 = command_0.__repr__()

def test_case_5():
    corrected_command_0 = None
    list_0 = [corrected_command_0, corrected_command_0, corrected_command_0]
    str_0 = 'tag --force'
    dict_0 = {str_0: corrected_command_0, str_0: str_0, str_0: str_0}
    command_0 = module_0.Command(corrected_command_0, dict_0)
    command_1 = module_0.Command(str_0, command_0)
    command_2 = module_0.Command(list_0, command_1)
    var_0 = command_2.update()

def test_case_6():
    var_0 = None
    str_0 = 'echo a'
    bool_0 = False
    rule_0 = module_0.Rule(var_0, var_0, var_0, bool_0, var_0, bool_0, bool_0)
    command_0 = module_0.Command(str_0, var_0)
    var_1 = rule_0.is_match(command_0)

def test_case_7():
    bool_0 = True
    bytes_0 = b'\xa0EL%'
    str_0 = 'G|<Z7H#J\'rp\\w]n"Tc\x0b*'
    int_0 = 4
    int_1 = -696
    list_0 = [bytes_0, bytes_0, int_0, bool_0]
    str_1 = '[&cu12s'
    rule_0 = module_0.Rule(bool_0, bytes_0, str_0, int_0, int_1, list_0, str_1)
    str_2 = 'OV-:R~W>P|"RMSmkg$'
    list_1 = [str_2, str_2]
    tuple_0 = (list_1,)
    command_0 = module_0.Command(str_2, tuple_0)
    set_0 = set()
    str_3 = 't'
    corrected_command_0 = module_0.CorrectedCommand(command_0, set_0, str_3)
    var_0 = corrected_command_0.__eq__(rule_0)
    command_1 = module_0.Command(rule_0, list_0)
    var_1 = command_1.__repr__()
    var_2 = command_0.__eq__(corrected_command_0)

def test_case_8():
    list_0 = []
    str_0 = '?#\n\n!oaWl_Pf1]+s.\t'
    list_1 = [str_0]
    corrected_command_0 = module_0.CorrectedCommand(list_0, str_0, list_1)

def test_case_9():
    var_0 = None
    str_0 = 'echo a'
    bool_0 = False
    rule_0 = module_0.Rule(var_0, var_0, var_0, bool_0, var_0, bool_0, bool_0)
    command_0 = module_0.Command(str_0, str_0)
    var_1 = rule_0.is_match(command_0)
    command_1 = module_0.Command(str_0, var_0)
    var_2 = rule_0.is_match(command_0)

def test_case_10():
    str_0 = 'echo a'
    var_0 = None
    int_0 = 0
    corrected_command_0 = module_0.CorrectedCommand(str_0, var_0, int_0)
    corrected_command_1 = module_0.CorrectedCommand(str_0, var_0, int_0)
    corrected_command_2 = module_0.CorrectedCommand(str_0, var_0, int_0)
    int_1 = 1
    corrected_command_3 = module_0.CorrectedCommand(str_0, var_0, int_0)
    corrected_command_4 = module_0.CorrectedCommand(str_0, var_0, int_1)
    var_1 = corrected_command_3 == corrected_command_4

def test_case_11():
    var_0 = None
    str_0 = 'echo a'
    bool_0 = False
    bool_1 = True
    rule_0 = module_0.Rule(var_0, var_0, var_0, bool_0, var_0, bool_0, bool_1)
    str_1 = 'a\n'
    command_0 = module_0.Command(str_0, str_1)
    var_1 = rule_0.is_match(command_0)
    command_1 = module_0.Command(str_0, var_0)
    var_2 = rule_0.is_match(command_1)
    var_3 = rule_0.is_match(command_0)