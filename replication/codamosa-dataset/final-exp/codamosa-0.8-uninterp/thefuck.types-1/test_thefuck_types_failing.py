# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        set_0 = set()
        float_0 = 0.85
        dict_0 = {}
        list_0 = [set_0]
        list_1 = [dict_0, dict_0]
        bytes_0 = b''
        int_0 = -2356
        str_0 = "b2,762'"
        str_1 = '&Akw&$/3\x0c9+T-1gdx'
        command_0 = module_0.Command(dict_0, bytes_0)
        bytes_1 = b'q\x91USOt\xd6\x18\xe9\xc1\x94-\x9ag'
        dict_1 = {str_0: list_1, str_1: bytes_1, str_0: list_0}
        rule_0 = module_0.Rule(dict_0, list_0, list_1, bytes_0, int_0, dict_1, list_0)
        var_0 = rule_0.__eq__(int_0)
        var_1 = rule_0.is_match(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = None
        set_0 = None
        tuple_0 = ()
        complex_0 = None
        rule_0 = None
        list_0 = [set_0, dict_0, rule_0]
        corrected_command_0 = module_0.CorrectedCommand(list_0, dict_0, tuple_0)
        bool_0 = False
        command_0 = module_0.Command(bool_0, tuple_0)
        var_0 = corrected_command_0.__eq__(command_0)
        var_1 = corrected_command_0.__repr__()
        var_2 = corrected_command_0.run(complex_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x90&F\x19E\xf6}c\xe3\xf8\xa4\n'
        set_0 = {bytes_0, bytes_0, bytes_0}
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = 'DDq'
        corrected_command_0 = module_0.CorrectedCommand(list_0, str_0, list_0)
        list_1 = []
        tuple_0 = ()
        float_0 = -1181.0
        tuple_1 = (list_1, tuple_0, float_0, list_1)
        corrected_command_1 = module_0.CorrectedCommand(set_0, corrected_command_0, tuple_1)
        var_0 = corrected_command_1.__hash__()
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = None
        set_0 = None
        tuple_0 = ()
        complex_0 = None
        rule_0 = None
        list_0 = [set_0, dict_0, rule_0]
        corrected_command_0 = module_0.CorrectedCommand(list_0, dict_0, tuple_0)
        var_0 = corrected_command_0.run(complex_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = None
        str_0 = ' for usage.'
        var_1 = lambda c: c.script == str_0
        bool_0 = False
        bool_1 = True
        rule_0 = module_0.Rule(var_0, var_1, var_0, bool_0, var_0, bool_0, bool_1)
        command_0 = module_0.Command(str_0, str_0)
        var_2 = rule_0.is_match(command_0)
        command_1 = module_0.Command(str_0, var_0)
        var_3 = rule_0.is_match(command_1)
        bool_2 = False
        tuple_0 = ()
        float_0 = 72.0
        dict_0 = None
        corrected_command_0 = module_0.CorrectedCommand(tuple_0, float_0, dict_0)
        dict_1 = {var_0: bool_2}
        var_4 = corrected_command_0.run(dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        bytes_0 = b'\xa0EL%'
        int_0 = 4
        list_0 = [bytes_0, bytes_0, int_0, bool_0]
        str_0 = '[&cu12s'
        rule_0 = module_0.Rule(bool_0, bytes_0, str_0, int_0, int_0, list_0, str_0)
        str_1 = 'OV-:R~W>P|"RMSmkg$'
        list_1 = [str_1, str_1]
        tuple_0 = (list_1,)
        command_0 = module_0.Command(str_1, tuple_0)
        set_0 = set()
        var_0 = command_0.__repr__()
        str_2 = 't'
        var_1 = command_0.__eq__(int_0)
        corrected_command_0 = module_0.CorrectedCommand(command_0, set_0, str_2)
        var_2 = rule_0.is_match(command_0)
        list_2 = []
        str_3 = 'apt list --upgradable'
        str_4 = '40B*\x0bF\x0b`GT'
        str_5 = '"J\x0b,6YP;'
        dict_0 = {str_1: list_1, str_4: list_2, str_5: str_0, str_1: str_3}
        corrected_command_1 = module_0.CorrectedCommand(bytes_0, dict_0, tuple_0)
        var_3 = rule_0.__eq__(rule_0)
        bytes_1 = None
        corrected_command_2 = module_0.CorrectedCommand(command_0, bytes_1, bool_0)
        var_4 = corrected_command_0.run(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'test'
        var_0 = None
        rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, var_0)
        str_1 = 'test_command'
        command_0 = module_0.Command(str_1, var_0)
        var_1 = rule_0.get_corrected_commands(command_0)
        var_2 = list(var_1)
    except BaseException:
        pass