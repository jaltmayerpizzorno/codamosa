# Automatically generated by Pynguin.
import ansible.plugins.shell.powershell as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'C:\\Users\\myuser\\myfile.ps1'
    shell_module_0 = module_0.ShellModule()
    var_0 = shell_module_0.get_remote_filename(str_0)
    str_1 = 'C:\\Users\\myuser\\myfile.ps1.ps1'
    var_1 = shell_module_0.get_remote_filename(str_1)

def test_case_2():
    shell_module_0 = module_0.ShellModule()
    var_0 = shell_module_0.remove(shell_module_0)

def test_case_3():
    str_0 = ']%".nE,~|\x0cV'
    shell_module_0 = module_0.ShellModule()
    var_0 = shell_module_0.expand_user(str_0)

def test_case_4():
    int_0 = -890
    shell_module_0 = module_0.ShellModule()
    var_0 = shell_module_0.exists(int_0)

def test_case_5():
    bool_0 = None
    shell_module_0 = module_0.ShellModule()
    var_0 = shell_module_0.checksum(bool_0)

def test_case_6():
    shell_module_0 = module_0.ShellModule()
    str_0 = '#!powershell'
    var_0 = shell_module_0.build_module_command(str_0, str_0, str_0, str_0)

def test_case_7():
    shell_module_0 = module_0.ShellModule()
    str_0 = '#!powersh\x0bell'
    list_0 = []
    var_0 = shell_module_0.expand_user(list_0)
    var_1 = shell_module_0.build_module_command(str_0, str_0, str_0, str_0)

def test_case_8():
    tuple_0 = ()
    list_0 = [tuple_0]
    shell_module_0 = module_0.ShellModule()
    var_0 = shell_module_0.exists(list_0)
    shell_module_1 = module_0.ShellModule()
    shell_module_2 = module_0.ShellModule()
    str_0 = ">\t*#Q_-(C'\\Kkxj=8"
    var_1 = shell_module_1.build_module_command(shell_module_2, str_0, str_0)

def test_case_9():
    shell_module_0 = module_0.ShellModule()
    shell_module_1 = module_0.ShellModule()
    str_0 = None
    list_0 = [shell_module_0, shell_module_0, str_0, shell_module_1]
    int_0 = -1306
    shell_module_2 = module_0.ShellModule()
    var_0 = shell_module_2.remove(list_0, int_0)
    shell_module_3 = module_0.ShellModule()
    dict_0 = None
    var_1 = shell_module_2.wrap_for_exec(dict_0)
    shell_module_4 = module_0.ShellModule()
    str_1 = '\n            If (Test-Path -PathType Leaf \'-1516\')\n            {\n                $sp = new-object -TypeName System.Security.Cryptography.SHA1CryptoServiceProvider;\n                $fp = [System.IO.File]::Open(\'-1516\', [System.IO.Filemode]::Open, [System.IO.FileAccess]::Read);\n                [System.BitConverter]::ToString($sp.ComputeHash($fp)).Replace("-", "").ToLower();\n                $fp.Dispose();\n            }\n            ElseIf (Test-Path -PathType Container \'-1516\')\n            {\n                Write-Output "3";\n            }\n            Else\n            {\n                Write-Output "1";\n            }\n        '
    int_1 = 4
    dict_1 = {var_0: list_0, int_1: str_1}
    dict_2 = {}
    tuple_0 = (shell_module_4, dict_1, dict_2)
    list_1 = [str_0, dict_2, dict_2]
    bytes_0 = b'\x81'
    tuple_1 = (int_1, tuple_0, list_1, bytes_0)
    bytes_1 = b'\xfbOG\x80D4'
    str_2 = ''
    float_0 = -2531.526587
    var_2 = shell_module_0.build_module_command(tuple_1, bytes_1, str_2, float_0)

def test_case_10():
    shell_module_0 = module_0.ShellModule()
    str_0 = '~'
    var_0 = shell_module_0.expand_user(str_0)

def test_case_11():
    shell_module_0 = module_0.ShellModule()
    str_0 = '~\\abc'
    var_0 = shell_module_0.expand_user(str_0)