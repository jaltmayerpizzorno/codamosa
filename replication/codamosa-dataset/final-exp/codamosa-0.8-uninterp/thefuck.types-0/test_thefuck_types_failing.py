# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        str_0 = 'ls>'
        str_1 = None
        command_0 = module_0.Command(str_1, str_1)
        str_2 = '>me'
        bool_0 = True
        var_0 = lambda c: str_0
        var_1 = None
        var_2 = command_0.update()
        bool_1 = False
        var_3 = lambda c: str_0
        bool_2 = False
        rule_0 = module_0.Rule(str_2, str_2, var_3, bool_0, var_1, bool_1, bool_2)
        var_4 = rule_0.is_match(command_0)
        bool_3 = False
        var_5 = rule_0.__repr__()
        set_0 = set()
        corrected_command_0 = module_0.CorrectedCommand(bool_3, bool_1, set_0)
        var_6 = corrected_command_0.run(bool_1)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = None
        str_0 = ':F/(2qAbQuS?_b'
        int_0 = 226
        float_1 = 2450.536713
        command_0 = module_0.Command(float_0, float_1)
        float_2 = -585.9
        corrected_command_0 = module_0.CorrectedCommand(int_0, command_0, float_2)
        var_0 = corrected_command_0.__eq__(str_0)
        float_3 = 2504.1
        list_0 = [float_3, float_3]
        corrected_command_1 = module_0.CorrectedCommand(float_3, float_3, list_0)
        command_1 = module_0.Command(list_0, corrected_command_1)
        var_1 = command_1.__eq__(float_0)
        str_1 = None
        var_2 = corrected_command_1.run(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ls>Y'
        str_1 = None
        command_0 = module_0.Command(str_1, str_1)
        str_2 = 'name'
        bool_0 = False
        var_0 = None
        var_1 = command_0.update()
        var_2 = lambda c: str_0
        bool_1 = False
        rule_0 = module_0.Rule(str_2, str_2, var_2, bool_0, var_0, bool_1, bool_1)
        var_3 = rule_0.__eq__(rule_0)
        var_4 = rule_0.is_match(command_0)
        bool_2 = False
        set_0 = set()
        bool_3 = False
        str_3 = '``[4'
        dict_0 = {str_1: bool_2}
        command_1 = module_0.Command(dict_0, dict_0)
        set_1 = set()
        dict_1 = {str_1: bool_1, str_3: bool_3, str_0: dict_0, str_0: set_1}
        bytes_0 = b'P\xaaP8\xd5\xcb'
        rule_1 = module_0.Rule(bool_3, dict_1, bool_3, command_0, str_1, command_0, bytes_0)
        corrected_command_0 = module_0.CorrectedCommand(bool_2, bool_3, set_0)
        var_5 = rule_1.is_match(command_0)
        str_4 = 'Î­'
        var_6 = corrected_command_0.run(str_4)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'ls>'
        str_1 = None
        command_0 = module_0.Command(str_1, str_1)
        str_2 = 'name'
        bool_0 = True
        var_0 = lambda c: str_0
        var_1 = None
        bool_1 = True
        var_2 = command_0.update()
        var_3 = command_0.__eq__(command_0)
        bool_2 = False
        var_4 = lambda c: str_0
        bool_3 = False
        rule_0 = module_0.Rule(str_2, str_2, var_4, bool_0, var_1, bool_2, bool_3)
        var_5 = rule_0.is_match(command_0)
        bool_4 = None
        set_0 = set()
        bool_5 = True
        str_3 = '``[4'
        str_4 = "1\n_']Cxod[N<t,R0+]S"
        dict_0 = {str_4: bool_2}
        set_1 = set()
        dict_1 = {str_1: bool_2, str_3: bool_5, str_0: dict_0, str_0: set_1}
        bytes_0 = b'P\xaaP8\xd5\xcb'
        rule_1 = module_0.Rule(bool_5, dict_1, bool_1, command_0, str_1, command_0, bytes_0)
        corrected_command_0 = module_0.CorrectedCommand(bool_1, bool_2, set_0)
        var_6 = corrected_command_0.run(bool_4)
    except BaseException:
        pass