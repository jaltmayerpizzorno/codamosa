# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = module_0.unfrack_path()

def test_case_2():
    bool_0 = False
    var_0 = module_0.maybe_unfrack_path(bool_0)

def test_case_3():
    var_0 = module_0.version()

def test_case_4():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_inventory_options(argument_parser_0)

def test_case_5():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_meta_options(argument_parser_0)

def test_case_6():
    var_0 = module_0.version()
    var_1 = module_0.version()
    bytes_0 = b'\x0c\x03'
    int_0 = 0
    dict_0 = {bytes_0: var_0, int_0: var_0, var_0: var_0, bytes_0: int_0}
    set_0 = {int_0, bytes_0}
    list_0 = [int_0, var_1]
    tuple_0 = (list_0,)
    argument_parser_0 = module_1.ArgumentParser(tuple_0, list_0, set_0)
    var_2 = module_0.add_vault_options(argument_parser_0)
    sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
    float_0 = -3065.9
    prepend_list_action_0 = module_0.PrependListAction(dict_0, sorting_help_formatter_0, float_0)
    bytes_1 = b'\xec\x140YliT\x10k\x0b\xa7\x7f\x9e\x7f\n\\\x98\x88m\xd3'
    var_3 = module_0.maybe_unfrack_path(bytes_1)

def test_case_7():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_tasknoplay_options(argument_parser_0)
    var_1 = []
    var_2 = argument_parser_0.parse_args(var_1)
    str_0 = '--task-timeout'
    str_1 = 'None'
    str_2 = [str_0, str_1]
    var_3 = argument_parser_0.parse_args(str_2)
    str_3 = [str_0, str_0]
    var_4 = argument_parser_0.parse_args(str_3)
    str_4 = '--task-timeout'
    str_5 = '-1'
    str_6 = [str_4, str_5]
    var_5 = argument_parser_0.parse_args(str_6)

def test_case_8():
    tuple_0 = ()
    complex_0 = None
    bool_0 = False
    argument_parser_0 = module_1.ArgumentParser(tuple_0, complex_0, bool_0)
    complex_1 = None
    float_0 = 1325.35
    var_0 = module_0.create_base_parser(complex_1, float_0)
    var_1 = module_0.add_connect_options(argument_parser_0)

def test_case_9():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_output_options(argument_parser_0)
    str_0 = '-o'
    str_1 = '-t'
    str_2 = 'tree_path'
    str_3 = [str_0, str_1, str_2]
    var_1 = argument_parser_0.parse_args(str_3)

def test_case_10():
    float_0 = -1504.063
    var_0 = module_0.version(float_0)

def test_case_11():
    namespace_0 = module_1.Namespace()
    str_0 = 'attr'
    var_0 = None
    var_1 = setattr(namespace_0, str_0, var_0)
    int_0 = 1
    var_2 = module_0.ensure_value(namespace_0, str_0, int_0)
    var_3 = getattr(namespace_0, str_0, var_0)
    int_1 = 2
    var_4 = module_0.ensure_value(namespace_0, str_0, int_1)
    var_5 = getattr(namespace_0, str_0, var_0)
    str_1 = 'another_attr'
    var_6 = module_0.ensure_value(namespace_0, str_1, int_1)
    var_7 = getattr(namespace_0, str_1, var_0)

def test_case_12():
    var_0 = module_0.version()
    bytes_0 = b'\x0c\x03'
    complex_0 = None
    list_0 = [var_0]
    float_0 = 2.0
    dict_0 = {complex_0: complex_0, float_0: complex_0, bytes_0: float_0}
    var_1 = module_0.create_base_parser(list_0, float_0, dict_0, dict_0)
    str_0 = 'q'
    var_2 = module_0.create_base_parser(complex_0, str_0)
    int_0 = -14
    dict_1 = {bytes_0: complex_0, int_0: complex_0, complex_0: complex_0, bytes_0: int_0}
    set_0 = {int_0, bytes_0}
    sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
    float_1 = -3065.9
    prepend_list_action_0 = module_0.PrependListAction(dict_1, sorting_help_formatter_0, float_1)
    str_1 = 'pTJ1Ngx#h.{m9.'
    set_1 = set()
    tuple_0 = (set_1,)
    list_1 = [complex_0, set_0, tuple_0]
    ansible_version_0 = module_0.AnsibleVersion(list_1, int_0, list_1, list_1)
    str_2 = '\r;(K'
    str_3 = 'fA+5RdLxw'
    dict_2 = {str_2: set_0, str_1: str_1, str_3: tuple_0}
    str_4 = '?'
    prepend_list_action_1 = module_0.PrependListAction(dict_2, tuple_0, str_4, dict_2)