# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        int_0 = -1036
        tuple_0 = None
        bytes_0 = b'\x86,\xf8\xde\x1e'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(tuple_0, bytes_0)
        int_1 = -87
        ansible_version_0 = module_0.AnsibleVersion(int_0, unrecognized_argument_0, int_1, unrecognized_argument_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.version()
        bytes_0 = b'l\x97\xef'
        int_0 = 0
        dict_0 = {bytes_0: var_0, int_0: var_0, var_0: var_0, bytes_0: int_0}
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_0 = -3065.9
        prepend_list_action_0 = module_0.PrependListAction(dict_0, sorting_help_formatter_0, float_0)
        str_0 = '%*bPz]/5BFMj-+\x0bWG'
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(bytes_0, prepend_list_action_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.version()
        var_1 = module_0.unfrack_path()
        bytes_0 = b'\x0c\x14\x03\xef'
        int_0 = 0
        dict_0 = {bytes_0: var_0, int_0: var_0, var_0: var_0, bytes_0: int_0}
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        prepend_list_action_0 = module_0.PrependListAction(dict_0, sorting_help_formatter_0, bytes_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '*@1IY~QRUL?lg4WL._K"'
        var_0 = module_0.ensure_value(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\t%'
        var_0 = module_0.add_verbosity_options(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        var_0 = module_0.add_async_options(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        var_0 = module_0.add_basedir_options(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        var_0 = module_0.add_check_options(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xd2Q\xf3Y{\xd50\xa7W'
        var_0 = module_0.add_connect_options(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        argument_parser_0 = module_1.ArgumentParser()
        var_0 = module_0.add_fork_options(argument_parser_0)
        var_1 = argument_parser_0.parse_args(argument_parser_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -278
        set_0 = {int_0}
        float_0 = 730.4
        float_1 = -289.0
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0, float_0, float_1)
        var_0 = module_0.add_module_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "T;qYY:')Uv="
        var_0 = module_0.add_output_options(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -5507
        var_0 = module_0.add_runas_options(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -3065.9
        var_0 = module_0.add_runas_prompt_options(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        tuple_0 = None
        var_0 = module_0.add_runtask_options(tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\x0b\x99\xa0\xc7G'
        var_0 = module_0.add_subset_options(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'var: %s'
        prepend_list_action_0 = None
        dict_0 = {str_0: prepend_list_action_0, prepend_list_action_0: str_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(dict_0)
        str_1 = 'q99J7):N/j\x0cO.\x0cRiN\x0c'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(str_0, sorting_help_formatter_0, str_1)
        var_0 = module_0.version()
        str_2 = "Could not recursively set attributes on %s. Original error was: '%s'"
        prepend_list_action_1 = None
        int_0 = -767
        tuple_0 = (int_0, prepend_list_action_1)
        bool_0 = True
        float_0 = -847.35734
        bool_1 = False
        set_0 = set()
        ansible_version_0 = module_0.AnsibleVersion(tuple_0, bool_0, float_0, bool_1, set_0, str_2)
        bytes_0 = None
        bool_2 = True
        var_1 = unrecognized_argument_0.__call__(bytes_0, ansible_version_0, float_0, bool_2)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x0c\x03\xef'
        float_0 = -3065.785389822714
        list_0 = []
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, list_0, bytes_0)
        str_0 = '%foZ+-%8Y?\'N"CinC'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0)
        var_1 = sorting_help_formatter_0.add_arguments(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x0c\x03\xef'
        int_0 = 0
        dict_0 = {bytes_0: var_0, int_0: var_0, var_0: var_0, bytes_0: int_0}
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_0 = -3065.9
        prepend_list_action_0 = module_0.PrependListAction(dict_0, sorting_help_formatter_0, float_0)
        str_0 = '%*bPzZ/5BFMj-+\x0bWG'
        float_1 = -3065.9
        int_1 = -1042
        tuple_0 = ()
        unrecognized_argument_0 = module_0.UnrecognizedArgument(int_0, tuple_0, int_1, sorting_help_formatter_0)
        bytes_1 = b'\xd0\xf6\x1b\xeas^{\xcd5\xfb\x0bh'
        unrecognized_argument_1 = module_0.UnrecognizedArgument(bytes_1, str_0)
        str_1 = '\\.\nWN=P\x0cY>O$OOdFyOO'
        ansible_version_0 = module_0.AnsibleVersion(bytes_0, unrecognized_argument_1, str_1)
        var_1 = ansible_version_0.__call__(float_1, bytes_0, int_1, unrecognized_argument_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x0c\x03\xef'
        int_0 = 0
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_0 = -3065.9
        str_0 = 'S_O^6@dmIdoK"t'
        list_0 = []
        bool_0 = False
        str_1 = 'g4?{\\9x\x0bZ'
        prepend_list_action_0 = module_0.PrependListAction(str_0, list_0, bool_0, str_1, float_0)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x0c\x03'
        int_0 = 0
        dict_0 = {bytes_0: var_0, int_0: var_0, var_0: var_0, bytes_0: int_0}
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_0 = -3065.9
        prepend_list_action_0 = module_0.PrependListAction(dict_0, sorting_help_formatter_0, float_0)
        bool_0 = None
        tuple_0 = (float_0, bool_0)
        bytes_1 = b'\xa2^'
        var_1 = prepend_list_action_0.__call__(prepend_list_action_0, tuple_0, tuple_0, bytes_1)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x0c\x03\xef'
        int_0 = 0
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        var_1 = module_0.add_runtask_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = module_0.version()
        var_1 = module_0.version()
        bytes_0 = b'\x0c\x03'
        int_0 = 0
        dict_0 = {bytes_0: var_0, int_0: var_0, var_0: var_0, bytes_0: int_0}
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_0 = -3065.9
        prepend_list_action_0 = module_0.PrependListAction(dict_0, sorting_help_formatter_0, float_0)
        str_0 = 'pTJ1Ngx#h.{m9.'
        list_0 = []
        var_2 = sorting_help_formatter_0.add_arguments(list_0)
        int_1 = 483
        bool_0 = True
        set_1 = set()
        tuple_0 = (set_1,)
        int_2 = -473
        bool_1 = True
        ansible_version_0 = module_0.AnsibleVersion(dict_0, bool_0, tuple_0, int_2, bool_1)
        str_1 = ':.[[K:SQW.sKfnRH#r\\'
        tuple_1 = (ansible_version_0, sorting_help_formatter_0, str_1, ansible_version_0)
        prepend_list_action_1 = module_0.PrependListAction(str_0, int_1, int_1, tuple_1)
    except BaseException:
        pass

def test_case_23():
    try:
        var_0 = module_0.version()
        var_1 = module_0.version()
        bytes_0 = b'\x0c\x03'
        int_0 = 0
        dict_0 = {bytes_0: var_0, int_0: var_0, var_0: var_0, bytes_0: int_0}
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_0 = -3065.9
        prepend_list_action_0 = module_0.PrependListAction(dict_0, sorting_help_formatter_0, float_0)
        var_2 = module_0.add_check_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = None
        float_0 = 1270.516692
        list_0 = [float_0, int_0, int_0]
        str_0 = 'nqPO_},!w\r'
        str_1 = 'M\x0cDgmX(6\x0cd4)w'
        list_1 = []
        ansible_version_0 = module_0.AnsibleVersion(list_0, str_0, str_1, list_1)
        argument_parser_0 = module_1.ArgumentParser(int_0, float_0, ansible_version_0)
        var_0 = module_0.add_async_options(argument_parser_0)
        int_1 = -521
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(int_1)
        dict_0 = {}
        str_2 = '?UEEuF^L'
        dict_1 = None
        prepend_list_action_0 = module_0.PrependListAction(dict_0, str_2, ansible_version_0, list_0, dict_1)
    except BaseException:
        pass

def test_case_25():
    try:
        var_0 = module_0.version()
        var_1 = module_0.version()
        str_0 = 'H("lTUWU,N'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_0)
        var_2 = module_0.add_basedir_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_26():
    try:
        var_0 = module_0.version()
        bytes_0 = b'\x0c\x03'
        complex_0 = None
        str_0 = 'Bq'
        var_1 = module_0.create_base_parser(complex_0, str_0)
        int_0 = 0
        list_0 = None
        float_0 = -4373.0
        dict_0 = {bytes_0: int_0}
        unrecognized_argument_0 = module_0.UnrecognizedArgument(dict_0, list_0, bytes_0, list_0, float_0)
        prepend_list_action_0 = module_0.PrependListAction(list_0, float_0, unrecognized_argument_0)
        tuple_0 = (dict_0,)
        bool_0 = True
        unrecognized_argument_1 = module_0.UnrecognizedArgument(prepend_list_action_0, tuple_0, unrecognized_argument_0, bool_0)
        var_2 = module_0.add_runas_prompt_options(bytes_0, unrecognized_argument_1)
    except BaseException:
        pass

def test_case_27():
    try:
        argument_parser_0 = module_1.ArgumentParser()
        var_0 = module_0.add_runas_options(argument_parser_0)
        str_0 = '--become-method'
        str_1 = [str_0, str_0]
        str_2 = 'test'
        str_3 = [str_1, str_2]
        var_1 = argument_parser_0.parse_args(str_3)
    except BaseException:
        pass

def test_case_28():
    try:
        var_0 = module_0.version()
        var_1 = module_0.version()
        bytes_0 = b'\x0c\x03'
        int_0 = 0
        dict_0 = {bytes_0: var_0, int_0: var_0, var_0: var_0, bytes_0: int_0}
        set_0 = {int_0, bytes_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_0 = -3065.9
        prepend_list_action_0 = module_0.PrependListAction(dict_0, sorting_help_formatter_0, float_0)
        str_0 = ''
        str_1 = 'BeV-_<2`\n?*C^\x0b75\\tua'
        argument_parser_0 = module_1.ArgumentParser(prepend_list_action_0, str_0, str_1)
        var_2 = module_0.add_check_options(argument_parser_0)
        bytes_1 = b']\x1e=!\xaf\x9f\x9f\x0co\xb2$\xbf\xac\xa2`'
        var_3 = module_0.maybe_unfrack_path(bytes_1)
        str_2 = 'pTJ1NgxLh.{U9.'
        bool_0 = False
        set_1 = set()
        tuple_0 = (set_1,)
        str_3 = 'I`O&U\t>S\x0bL$>BD\n:IbmS'
        bytes_2 = b'\x11\xd9&\xee\x91\x8aP\x85\xd4\x9e\xea0\xb9\x0c\xe7n\xdd\xbf\xc8'
        str_4 = '(xG~BsgYCA?kD\n\x0c'
        dict_1 = {str_4: bool_0, str_2: var_1, str_3: int_0}
        list_0 = [bytes_2, dict_1]
        float_1 = 1774.0
        ansible_version_0 = module_0.AnsibleVersion(dict_1, prepend_list_action_0, set_0, list_0, float_1, str_4)
        prepend_list_action_1 = module_0.PrependListAction(list_0, tuple_0, dict_1, prepend_list_action_0)
    except BaseException:
        pass

def test_case_29():
    try:
        var_0 = []
        argument_parser_0 = module_1.ArgumentParser()
        var_1 = module_0.add_subset_options(argument_parser_0)
        var_2 = argument_parser_0.parse_args(var_0)
        var_3 = var_2.tags
        var_4 = var_2.skip_tags
        str_0 = 't'
        var_5 = str_0 + var_4
    except BaseException:
        pass