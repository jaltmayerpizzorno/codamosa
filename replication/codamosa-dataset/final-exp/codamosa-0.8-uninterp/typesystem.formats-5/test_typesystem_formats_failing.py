# Automatically generated by Pynguin.
import typesystem.formats as module_0
import datetime as module_1

def test_case_0():
    try:
        time_format_0 = module_0.TimeFormat()
        bytes_0 = b'{I\xcc:\x16\x19\x9d1\x86\xc9\x9a\xca\x97'
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2009-01-12T01:30:00Z'
        datetime_0 = date_time_format_0.validate(str_0)
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'y\xd5\x0f\xbc;>\xd3\x9a\x10\xc5\x92\xa1H*\xf2z'
        list_0 = [bytes_0]
        base_format_0 = module_0.BaseFormat()
        optional_0 = base_format_0.serialize(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        date_format_0 = module_0.DateFormat(*list_0)
        bool_0 = date_format_0.is_native_type(list_0)
        date_format_1 = module_0.DateFormat()
        optional_0 = date_format_1.serialize(date_format_0)
    except BaseException:
        pass

def test_case_4():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-04-31'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'items'
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'MNe\\sObww-aC'
        date_time_format_0 = module_0.DateTimeFormat()
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = 'U)<{KZh@v[\tg8b`f('
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'MNe\\sObw-aC'
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'YvkTvp'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'MNe\\sObw-aC'
        date_time_format_0 = module_0.DateTimeFormat()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(str_0)
        bool_1 = date_time_format_0.is_native_type(date_time_format_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = 'b5ea5b53-e0e6-4b3a-b3f2-5cf5f0f0d736'
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
        str_1 = 'b5ea5b53-e0e6-4b3a-b3f2s-5cf5f0f0d736'
        u_u_i_d_1 = u_u_i_d_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 161
        str_0 = ':bWe8'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_1 = u_u_i_d_format_0.serialize(int_0)
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = None
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(list_0)
        dict_0 = {}
        date_time_format_0 = module_0.DateTimeFormat(**dict_0)
        bool_0 = date_time_format_0.is_native_type(list_0)
        list_1 = [list_0, date_time_format_0, optional_0, list_0]
        base_format_0 = module_0.BaseFormat(*list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = None
        str_0 = '5\rG_)-rC/g[&t%d{I'
        dict_0 = {}
        date_format_0 = module_0.DateFormat(**dict_0)
        optional_0 = date_format_0.serialize(int_0)
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'items'
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = None
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(float_0)
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(optional_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '2009-01-12T01:30:00Z'
        list_0 = []
        date_time_format_0 = module_0.DateTimeFormat(*list_0)
        datetime_0 = date_time_format_0.validate(str_0)
        optional_0 = date_time_format_0.serialize(datetime_0)
        date_format_0 = module_0.DateFormat()
        optional_1 = date_format_0.serialize(datetime_0)
        optional_2 = date_time_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '09:15:57'
        time_0 = time_format_0.validate(str_0)
        str_1 = '2009-01-12T01:30:00+01:00'
        dict_0 = {}
        date_time_format_0 = module_0.DateTimeFormat(**dict_0)
        datetime_0 = date_time_format_0.validate(str_1)
        timedelta_0 = module_1.timedelta(**dict_0)
        optional_0 = date_time_format_0.serialize(datetime_0)
        datetime_1 = date_time_format_0.validate(time_format_0)
    except BaseException:
        pass

def test_case_20():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '24:00:00'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '2009-0-12T01:30:00+01:00'
        dict_0 = {}
        date_time_format_0 = module_0.DateTimeFormat(**dict_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass