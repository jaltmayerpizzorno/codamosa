# Automatically generated by Pynguin.
import typesystem.formats as module_0
import datetime as module_1

def test_case_0():
    try:
        str_0 = ''
        base_format_0 = module_0.BaseFormat()
        validation_error_0 = base_format_0.validation_error(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = '7F1F0985-C7B0-4A34-BAA1-C163975EAE02'
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'sR:1}uLOT'
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 955
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(int_0)
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'max_properties'
        dict_0 = {str_0: str_0}
        base_format_0 = module_0.BaseFormat()
        optional_0 = base_format_0.serialize(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2002-10-27'
        date_0 = date_format_0.validate(str_0)
        str_1 = '2010-10-27T14:01:02Z'
        date_1 = date_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass

def test_case_7():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '25:02'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        base_format_0 = module_0.BaseFormat()
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(base_format_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'v'
        date_time_format_0 = module_0.DateTimeFormat()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_1 = u_u_i_d_format_0.serialize(str_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        time_format_0 = module_0.TimeFormat()
        int_0 = 2
        bool_0 = time_format_0.is_native_type(int_0)
        str_0 = '25:02'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'yl14%iZC<T2]\tySW^Qyo'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        date_time_format_1 = module_0.DateTimeFormat()
        date_time_format_2 = module_0.DateTimeFormat()
        var_0 = None
        optional_0 = date_time_format_2.serialize(var_0)
        date_time_format_3 = module_0.DateTimeFormat()
        int_0 = 44
        list_0 = []
        date_format_0 = module_0.DateFormat(*list_0)
        optional_1 = date_format_0.serialize(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '01giMC<T2]\tyS^Qyo'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        time_format_0 = module_0.TimeFormat()
        int_0 = 1
        time_0 = module_1.time()
        optional_0 = time_format_0.serialize(time_0)
        int_1 = 111
        time_1 = module_1.time()
        optional_1 = time_format_0.serialize(time_1)
        date_0 = module_1.date()
    except BaseException:
        pass

def test_case_16():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2018-02-01T23:59:59-06:00'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2018-02-01'
        datetime_1 = date_time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2018-02-01T23:59:59Z'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2018-02-01'
        datetime_1 = date_time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2018-02-01T23:59:59'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2018-02-01T23:59:59Z'
        datetime_1 = date_time_format_0.validate(str_1)
        datetime_2 = date_time_format_0.validate(str_1)
        str_2 = '2018-02-01T23:59:59-06'
        datetime_3 = date_time_format_0.validate(str_2)
        datetime_4 = date_time_format_0.validate(str_2)
        datetime_5 = date_time_format_0.validate(datetime_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        date_time_format_1 = module_0.DateTimeFormat()
        str_0 = '2018-02-01T23:59:59'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2018-02-01T23:59:59Z'
        datetime_1 = date_time_format_0.validate(str_1)
        optional_0 = date_time_format_0.serialize(datetime_0)
        datetime_2 = date_time_format_1.validate(datetime_0)
    except BaseException:
        pass

def test_case_20():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        date_time_format_1 = module_0.DateTimeFormat()
        str_0 = '2018-02-01T23:59:59Z'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2018-02-01T23:59:59-06:00'
        datetime_1 = date_time_format_0.validate(str_1)
        optional_0 = date_time_format_1.serialize(datetime_0)
        datetime_2 = date_time_format_1.validate(date_time_format_0)
    except BaseException:
        pass

def test_case_21():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '01:02'
        var_0 = print(str_0)
        optional_0 = time_format_0.serialize(var_0)
        str_1 = '25:02'
        time_0 = time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_22():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2018-02-0T23:9'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2018-02-01T23:59:59'
        bool_0 = date_time_format_0.is_native_type(str_0)
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '2018-12-31'
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(datetime_0)
        optional_1 = date_format_0.serialize(str_1)
    except BaseException:
        pass

def test_case_24():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-13-1'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass