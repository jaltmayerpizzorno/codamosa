# Automatically generated by Pynguin.
import pypara.monetary as module_0
import pypara.currencies as module_1
import decimal as module_2
import datetime as module_3

def test_case_0():
    try:
        currency_0 = None
        str_0 = "'?&$SR,roR<w:\nQ&"
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.multiply(var_0)
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        monetary_operation_exception_0 = module_0.MonetaryOperationException()
        money_1 = some_money_0.multiply(monetary_operation_exception_0)
    except BaseException:
        pass

def test_case_2():
    try:
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.as_boolean()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_3():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.abs()
        int_0 = money_0.as_integer()
    except BaseException:
        pass

def test_case_4():
    try:
        none_money_0 = module_0.NoneMoney()
        int_0 = none_money_0.as_integer()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'd~H]a>jr$I4pd?'
        dict_0 = {str_0: str_0}
        list_0 = []
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.scalar_subtract(list_0)
        money_1 = module_0.Money(**dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.multiply(var_0)
        price_1 = price_0.subtract(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = none_money_0.multiply(var_0)
        price_2 = none_price_0.abs()
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_0 = price_2.__bool__()
        money_1 = some_money_1.floor_divide(var_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.subtract(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        price_2 = none_price_0.multiply(var_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_0 = price_2.__bool__()
        money_0 = some_money_1.floor_divide(var_0)
    except BaseException:
        pass

def test_case_8():
    try:
        monetary_operation_exception_0 = module_0.MonetaryOperationException()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.divide(monetary_operation_exception_0)
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'd~H]a>jr$I4pd?'
        list_0 = []
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.scalar_subtract(list_0)
        money_1 = money_0.__pos__()
        list_1 = [money_0, money_0, str_0]
        price_0 = module_0.Price(*list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
    except BaseException:
        pass

def test_case_11():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        dict_0 = None
        none_money_1 = module_0.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        none_money_1 = module_0.NoneMoney()
        money_1 = none_money_1.subtract(money_0)
        str_0 = "8(}s]B\r@+RA7W[3'\njXL"
        list_0 = [str_0]
        monetary_operation_exception_0 = module_0.MonetaryOperationException(*list_0)
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 365
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        var_0 = price_0.__round__(int_0)
        list_0 = [var_0, none_price_0, var_0]
        none_money_0 = module_0.NoneMoney(*list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        none_money_1 = module_0.NoneMoney()
        str_0 = ''
        int_0 = None
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = money_1.convert(currency_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.__sub__(price_0)
        bool_0 = price_0.gte(price_1)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        price_2 = none_price_0.abs()
        some_money_1 = module_0.SomeMoney(*list_0)
        money_0 = some_money_1.floor_divide(var_0)
    except BaseException:
        pass

def test_case_16():
    try:
        list_0 = []
        str_0 = None
        int_0 = 406
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_money_0 = module_0.NoneMoney(*list_0)
        money_0 = none_money_0.round()
        str_1 = '5U$HVngG<%<5gJ'
        dict_0 = {str_1: list_0}
        none_money_1 = module_0.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x8d'
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_subtract(bytes_0)
        list_0 = []
        none_money_0 = module_0.NoneMoney(*list_0)
        price_1 = none_price_0.scalar_subtract(none_money_0)
        float_0 = price_0.as_float()
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 3878.849
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.floor_divide(float_0)
        bool_0 = none_money_0.gt(money_0)
        dict_0 = None
        monetary_operation_exception_0 = module_0.MonetaryOperationException(**dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        currency_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.with_ccy(currency_0)
        dict_0 = None
        none_money_1 = module_0.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = []
        none_money_0 = module_0.NoneMoney(*list_0)
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        none_price_0 = module_0.NonePrice(**dict_0)
        price_0 = none_price_0.with_qty(decimal_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'\x8d'
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = ';x) ?Nj\\kp\\7\\<'
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        int_0 = 365
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        decimal_1 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -670
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_1)
        var_0 = None
        money_0 = some_money_0.with_ccy(currency_0)
        money_1 = money_0.divide(var_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'K\x18'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        some_money_0 = module_0.SomeMoney(*list_0)
        decimal_1 = module_2.Decimal()
        str_0 = 's{'
        str_1 = '\n    Defines a currency registry model.\n\n    >>> "USD" in Currencies\n    True\n    >>> Currencies.has("USD")\n    True\n    >>> "XXX" in Currencies\n    False\n    >>> Currencies.has("XXX")\n    False\n    >>> Currencies["USD"].code\n    \'USD\'\n    >>> Currencies["USD"].name\n    \'US Dollar\'\n    >>> Currencies["USD"].type.name\n    \'MONEY\'\n    >>> Currencies.get("USD") == Currencies["USD"]\n    True\n    >>> Currencies.get("XXX")\n    >>> Currencies.get("XXX", default=Currencies["USD"]) == Currencies["USD"]\n    True\n    >>> assert len(Currencies) == len(Currencies.all)\n    >>> assert Currencies.codes == [currency.code for currency in Currencies.all]\n    >>> assert Currencies.codenames == [(currency.code, currency.name) for currency in Currencies.all]\n    '
        int_0 = -298
        currency_type_0 = module_1.CurrencyType.METAL
        int_1 = 2222
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_1)
        money_0 = some_money_0.with_ccy(currency_0)
        money_1 = some_money_0.subtract(money_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        some_money_0 = module_0.SomeMoney(*list_0)
        none_money_0 = module_0.NoneMoney()
        str_0 = ';7) oNj\\kp\\7\\<'
        currency_type_0 = module_1.CurrencyType.MONEY
        str_1 = 'Xb_`GBTNS==Tpoo~'
        int_0 = 30
        int_1 = 2736
        currency_0 = module_1.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        str_2 = None
        decimal_1 = module_2.Decimal()
        var_0 = None
        money_0 = none_money_0.divide(var_0)
        money_1 = money_0.scalar_add(var_0)
        bool_0 = money_1.is_equal(str_2)
        bool_1 = True
        money_2 = some_money_0.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_24():
    try:
        currency_type_0 = module_1.CurrencyType.METAL
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(currency_type_0)
        str_0 = 'CZK'
        str_1 = '3eLrbvNm\t+)P+\t#g'
        int_0 = None
        decimal_0 = module_2.Decimal()
        int_1 = 936
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        price_0 = module_0.Price()
        price_1 = price_0.round()
    except BaseException:
        pass

def test_case_25():
    try:
        bytes_0 = b'\x8d'
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_subtract(bytes_0)
        list_0 = [none_price_0, none_price_0, none_price_0]
        str_0 = 'j{*I'
        int_0 = 2401
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.round(int_0)
        var_0 = money_0.__round__()
        str_1 = '$.\nT^7:!FaY3'
        dict_0 = {str_0: price_0, str_0: var_0, str_1: str_0, str_1: money_0}
        decimal_0 = module_2.Decimal(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.__sub__(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_27():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        bool_0 = none_money_0.gte(money_0)
        date_0 = module_3.date()
    except BaseException:
        pass

def test_case_28():
    try:
        list_0 = []
        str_0 = None
        int_0 = 406
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_0 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_money_0 = module_0.NoneMoney(*list_0)
        money_0 = none_money_0.with_qty(decimal_0)
        str_1 = '5U$HVngG<%<5gJ'
        dict_0 = {str_1: list_0}
        none_money_1 = module_0.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = b'\x8d'
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.round()
        price_1 = none_price_0.scalar_subtract(bytes_0)
        list_0 = [bytes_0, none_price_0, price_1]
        some_money_0 = module_0.SomeMoney(*list_0)
        list_1 = [price_1, bytes_0]
        bool_0 = price_1.__bool__()
        some_price_0 = module_0.SomePrice(*list_1)
    except BaseException:
        pass

def test_case_30():
    try:
        decimal_0 = module_2.Decimal()
        str_0 = 'CurrencyRegistry'
        str_1 = 'Actual/365 Leap Year'
        int_0 = -1125
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = module_2.Decimal()
        int_1 = -2829
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_1)
        decimal_2 = currency_0.quantize(decimal_0)
        str_2 = ''
        int_2 = 1128
        currency_type_1 = module_1.CurrencyType.MONEY
        list_0 = []
        decimal_3 = module_2.Decimal(*list_0)
        currency_1 = module_1.Currency(str_2, str_2, int_2, currency_type_1, decimal_3, int_2)
        decimal_4 = currency_1.quantize(decimal_2)
        price_0 = module_0.Price()
        price_1 = price_0.__pos__()
        price_2 = price_1.with_qty(decimal_4)
    except BaseException:
        pass

def test_case_31():
    try:
        none_money_0 = module_0.NoneMoney()
        float_0 = none_money_0.as_float()
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        str_1 = 'Laa.l}dm\x0b|j\\O\x0bHG'
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_0 = None
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        list_0 = [currency_0, currency_type_0, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        price_1 = none_price_0.abs()
        price_2 = none_price_0.add(price_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_3 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.subtract(price_0)
        int_2 = price_1.as_integer()
    except BaseException:
        pass

def test_case_34():
    try:
        bytes_0 = b'\x8d'
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.__sub__(price_0)
        bool_0 = price_0.__lt__(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        price_2 = none_price_0.abs()
        some_money_1 = module_0.SomeMoney(*list_0)
        var_1 = currency_0.__delattr__(bytes_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        str_1 = 'Laa.l}dm\x0b|j\\O\x0bHG'
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        str_2 = 'DateTime'
        currency_1 = module_1.Currency(str_2, str_1, int_1, currency_type_0, decimal_0, int_0)
        tuple_0 = None
        price_1 = price_0.convert(currency_1, tuple_0)
        price_2 = price_0.subtract(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        price_3 = none_price_0.abs()
        some_money_1 = module_0.SomeMoney(*list_0)
        money_0 = some_money_1.floor_divide(var_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.with_qty(decimal_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 354
        currency_type_0 = module_1.CurrencyType.CRYPTO
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.subtract(price_0)
        list_0 = [none_price_0, none_money_0, currency_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.with_qty(decimal_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = -692
        decimal_0 = None
        date_0 = None
        set_0 = {int_0, str_0}
        money_0 = none_money_0.scalar_subtract(set_0)
        money_1 = money_0.positive()
        money_2 = money_1.with_dov(date_0)
        money_3 = none_money_0.round()
        bool_0 = none_money_0.as_boolean()
        currency_type_0 = module_1.CurrencyType.MONEY
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        money_4 = money_0.add(money_1)
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.__sub__(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_5 = some_money_0.with_ccy(currency_0)
        money_6 = money_5.divide(var_0)
    except BaseException:
        pass

def test_case_39():
    try:
        bytes_0 = b'K\x18'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        decimal_1 = module_2.Decimal()
        bool_0 = money_0.__le__(money_0)
        money_1 = some_money_0.add(money_0)
        none_money_0 = module_0.NoneMoney()
        money_2 = none_money_0.round()
        bool_1 = money_2.__lt__(money_2)
        price_2 = None
        money_3 = money_1.__truediv__(price_2)
    except BaseException:
        pass

def test_case_40():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = price_0.__gt__(price_0)
        bool_1 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        none_money_1 = module_0.NoneMoney()
        price_2 = some_price_0.with_qty(decimal_0)
        str_0 = ''
        int_0 = None
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        int_1 = -2458
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_2 = money_1.convert(currency_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        bool_0 = price_0.lt(price_0)
        none_money_0 = module_0.NoneMoney()
        bool_1 = price_0.__gt__(price_0)
        decimal_1 = module_2.Decimal()
        money_0 = none_money_0.with_qty(decimal_1)
        money_1 = none_money_0.add(money_0)
        price_1 = price_0.abs()
        money_2 = none_money_0.round()
        bool_2 = none_money_0.as_boolean()
        price_2 = price_1.add(price_1)
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_3 = some_money_0.gt(money_2)
        bool_4 = none_money_0.lt(money_2)
        price_3 = price_0.__sub__(price_0)
        money_3 = some_money_0.add(money_2)
        none_money_1 = module_0.NoneMoney()
        money_4 = none_money_0.round()
        money_5 = some_price_0.times(decimal_0)
    except BaseException:
        pass

def test_case_42():
    try:
        none_money_0 = module_0.NoneMoney()
        str_0 = 'gDi6BLmi\x0biOwmy<O'
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.subtract(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        dict_0 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_0)
        bool_0 = some_price_0.is_equal(int_1)
        price_2 = none_price_0.add(price_1)
        some_price_1 = module_0.SomePrice(*list_0)
        price_3 = some_price_1.divide(var_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = ';) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        str_1 = 'Jd*>eAm d'
        int_0 = -692
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        date_0 = None
        set_0 = {int_0, str_0}
        money_0 = none_money_0.scalar_subtract(set_0)
        money_1 = money_0.positive()
        money_2 = money_1.with_dov(date_0)
        money_3 = none_money_0.round()
        bool_0 = none_money_0.as_boolean()
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.__sub__(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_4 = some_money_0.with_ccy(currency_0)
        money_5 = none_money_0.subtract(money_4)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.subtract(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        price_2 = none_price_0.abs()
        money_1 = none_money_0.with_qty(decimal_0)
        money_2 = money_1.__floordiv__(var_0)
        money_3 = money_2.__floordiv__(var_0)
        price_3 = none_price_0.add(price_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_4 = some_price_0.with_ccy(currency_0)
        price_5 = price_4.__pos__()
    except BaseException:
        pass

def test_case_45():
    try:
        bytes_0 = b'\xba\xe0\xcc\xc6\xc4\ni\xb2\x03\xe7-I%J\x98\xd6\xaf\xfd\xec'
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = some_price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.subtract(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        price_2 = none_price_0.abs()
        dict_0 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_0)
        bool_0 = some_price_0.is_equal(int_1)
        price_3 = some_price_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.METAL
        decimal_0 = None
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.subtract(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        price_2 = none_price_0.abs()
        dict_0 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_0)
        bool_0 = some_price_0.is_equal(int_1)
        price_3 = none_price_0.add(price_1)
        price_4 = some_price_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_48():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.__abs__()
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_49():
    try:
        bytes_0 = b'K\x18'
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        none_money_0 = module_0.NoneMoney()
        price_0 = none_price_0.positive()
        some_money_0 = module_0.SomeMoney(*list_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        bool_0 = price_0.__eq__(some_money_0)
        bool_1 = price_1.__lt__(price_0)
        bool_2 = some_price_0.gte(price_0)
        price_2 = price_1.__add__(price_0)
        price_3 = price_1.__sub__(price_2)
    except BaseException:
        pass

def test_case_50():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = -692
        set_0 = {int_0, str_0}
        money_0 = none_money_0.scalar_subtract(set_0)
        price_1 = price_0.__neg__()
        money_1 = money_0.positive()
        money_2 = none_money_0.round()
        bool_0 = none_money_0.as_boolean()
        int_1 = 343
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = None
        str_1 = '~Q2f$y^|"V0'
        int_2 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_1, currency_type_0, decimal_1, int_2)
        money_3 = none_money_0.subtract(money_0)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_2 = price_1.positive()
        price_3 = price_2.__sub__(price_2)
        currency_type_1 = None
        list_1 = [currency_0, currency_type_1, price_2]
        some_price_1 = module_0.SomePrice(*list_1)
        bool_1 = some_price_1.is_equal(int_1)
        some_money_0 = module_0.SomeMoney(*list_1)
        money_4 = money_2.divide(var_0)
        price_4 = price_0.__mul__(var_0)
    except BaseException:
        pass

def test_case_51():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        bool_0 = price_0.lt(price_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        bool_1 = price_0.__gt__(price_0)
        date_0 = None
        price_1 = price_0.with_dov(date_0)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = None
        decimal_2 = module_2.Decimal()
        money_0 = none_money_0.with_qty(decimal_2)
        money_1 = none_money_0.add(money_0)
        price_2 = price_0.abs()
        money_2 = none_money_0.round()
        bool_2 = none_money_0.as_boolean()
        price_3 = price_2.add(price_2)
        int_0 = 324
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_3 = some_money_0.gt(money_2)
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_1)
        bool_4 = none_money_0.lt(money_2)
        price_4 = price_0.__sub__(price_0)
        var_0 = None
        price_5 = price_3.__abs__()
        bool_5 = price_4.lte(price_0)
        price_6 = price_2.__truediv__(var_0)
    except BaseException:
        pass

def test_case_52():
    try:
        some_price_0 = None
        list_0 = [some_price_0, some_price_0, some_price_0]
        dict_0 = {}
        some_price_1 = module_0.SomePrice(*list_0, **dict_0)
        int_0 = some_price_1.as_integer()
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        set_0 = None
        money_0 = none_money_0.floor_divide(set_0)
        int_0 = 365
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_0 = None
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        var_0 = None
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.subtract(price_0)
        currency_type_1 = None
        list_0 = [currency_0, currency_type_1, price_0]
        price_2 = none_price_0.abs()
        dict_0 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_0)
        price_3 = some_price_0.round()
    except BaseException:
        pass

def test_case_54():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        int_0 = -692
        bool_0 = price_0.__gt__(price_0)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = None
        float_0 = price_0.__float__()
        decimal_2 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        price_1 = price_0.__neg__()
        price_2 = price_1.add(price_1)
        currency_type_1 = module_1.CurrencyType.MONEY
        decimal_3 = None
        str_1 = '~Q2f$y^|"V0'
        currency_1 = module_1.Currency(str_0, str_1, int_0, currency_type_1, decimal_3, int_0)
        var_0 = None
        price_3 = price_1.positive()
        price_4 = price_3.__sub__(price_3)
        currency_type_2 = None
        list_1 = [currency_1, currency_type_2, price_3]
        some_price_1 = module_0.SomePrice(*list_1)
        bool_1 = some_price_1.is_equal(int_0)
        price_5 = price_4.add(price_3)
        price_6 = price_5.__abs__()
        bool_2 = price_0.lte(price_6)
        price_7 = price_3.__truediv__(var_0)
    except BaseException:
        pass

def test_case_55():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = -692
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = None
        decimal_2 = module_2.Decimal()
        money_0 = none_money_0.with_qty(decimal_2)
        var_0 = money_0.__round__(int_0)
        money_1 = none_money_0.add(money_0)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        set_0 = {int_0, str_0}
        money_2 = none_money_0.scalar_subtract(set_0)
        price_1 = price_0.__neg__()
        money_3 = money_2.positive()
        money_4 = none_money_0.round()
        bool_0 = none_money_0.as_boolean()
        int_1 = 343
        currency_type_1 = module_1.CurrencyType.MONEY
        decimal_3 = None
        str_1 = '~Q2f$y^|"V0'
        int_2 = -697
        currency_1 = module_1.Currency(str_0, str_1, int_1, currency_type_1, decimal_3, int_2)
        none_price_0 = module_0.NonePrice()
        var_1 = None
        price_2 = price_1.positive()
        price_3 = price_2.__sub__(price_2)
        currency_type_2 = None
        list_1 = [currency_1, currency_type_2, price_2]
        some_price_1 = module_0.SomePrice(*list_1)
        bool_1 = some_price_1.is_equal(int_1)
        some_money_0 = module_0.SomeMoney(*list_1)
        money_5 = some_money_0.with_ccy(currency_1)
        money_6 = money_5.divide(var_1)
    except BaseException:
        pass

def test_case_56():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        int_0 = -692
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        decimal_1 = None
        decimal_2 = module_2.Decimal()
        money_0 = none_money_0.with_qty(decimal_2)
        money_1 = none_money_0.round()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        set_0 = {int_0, str_0}
        money_2 = none_money_0.scalar_subtract(set_0)
        price_1 = price_0.__neg__()
        money_3 = money_2.positive()
        money_4 = none_money_0.round()
        bool_0 = none_money_0.as_boolean()
        int_1 = 2171
        currency_type_1 = module_1.CurrencyType.MONEY
        decimal_3 = None
        str_1 = '~Q2f$y^|"V0'
        int_2 = -697
        currency_1 = module_1.Currency(str_0, str_1, int_1, currency_type_1, decimal_3, int_2)
        none_price_0 = module_0.NonePrice()
        price_2 = price_1.positive()
        price_3 = price_2.__sub__(price_2)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_1 = some_price_0.is_equal(price_2)
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_57():
    try:
        var_0 = None
        price_0 = module_0.Price()
        price_1 = price_0.__floordiv__(var_0)
        currency_0 = None
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
    except BaseException:
        pass

def test_case_58():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_1 = module_0.NoneMoney()
        int_0 = -692
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = None
        decimal_2 = module_2.Decimal()
        money_2 = none_money_1.with_qty(decimal_2)
        money_3 = none_money_1.add(money_2)
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        price_2 = price_1.__neg__()
        money_4 = money_1.positive()
    except BaseException:
        pass

def test_case_59():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_0 = module_0.NoneMoney()
        decimal_1 = module_2.Decimal()
        money_0 = none_money_0.with_qty(decimal_1)
        money_1 = none_money_0.add(money_0)
        money_2 = none_money_0.round()
        bool_0 = none_money_0.as_boolean()
        int_0 = 343
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_1 = some_money_0.gt(money_2)
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        decimal_2 = None
        str_1 = '~Q2f$y^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_2, int_1)
        bool_2 = none_money_0.lt(money_2)
        some_money_1 = module_0.SomeMoney(*list_0)
        money_3 = some_money_1.with_ccy(currency_0)
        money_4 = money_3.round()
    except BaseException:
        pass

def test_case_60():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_1 = module_0.NoneMoney()
        int_0 = -692
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = None
        decimal_2 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        money_2 = money_1.__abs__()
    except BaseException:
        pass

def test_case_61():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        none_money_1 = module_0.NoneMoney()
        price_2 = some_price_0.with_qty(decimal_0)
        price_3 = some_price_0.subtract(price_0)
        price_4 = none_price_0.positive()
        price_5 = price_4.add(price_3)
        price_6 = price_0.__abs__()
        bool_1 = price_3.lte(price_2)
    except BaseException:
        pass

def test_case_62():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        price_1 = price_0.abs()
        price_2 = price_1.abs()
        var_0 = price_2.__round__()
    except BaseException:
        pass

def test_case_63():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_0)
        float_0 = some_money_0.as_float()
    except BaseException:
        pass

def test_case_64():
    try:
        bytes_0 = b'K\x18'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        money_1 = some_money_0.subtract(money_0)
        decimal_1 = module_2.Decimal()
        bool_0 = money_1.__le__(money_1)
        money_2 = some_money_0.add(money_1)
        price_2 = none_price_0.negative()
        price_3 = price_1.__sub__(price_2)
        none_money_0 = module_0.NoneMoney()
        money_3 = none_money_0.round()
        bool_1 = none_money_0.as_boolean()
        bool_2 = money_1.__lt__(money_1)
        bool_3 = money_0.__lt__(money_3)
        bool_4 = some_money_0.lt(money_0)
        str_0 = 'q~|a}3t-QA'
        bool_5 = money_1.__le__(money_2)
        money_4 = some_money_0.add(money_3)
        none_money_1 = module_0.NoneMoney()
        money_5 = none_money_1.round()
        str_1 = 'gDi6BLmi\x0biOwmy<O'
        bool_6 = money_2.__lt__(money_2)
        none_price_1 = module_0.NonePrice()
        price_4 = none_price_0.positive()
        list_1 = [money_3, str_0, str_1]
        price_5 = module_0.Price()
        price_6 = price_5.__truediv__(list_1)
        float_0 = -1380.4
        money_6 = money_4.scalar_subtract(float_0)
    except BaseException:
        pass

def test_case_65():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        int_0 = money_1.__int__()
    except BaseException:
        pass

def test_case_66():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        bool_0 = False
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(bytes_0)
        price_1 = price_0.scalar_subtract(bool_0)
        list_0 = [bytes_0, bytes_0, bytes_0]
        price_2 = price_0.__neg__()
        money_0 = price_2.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        decimal_1 = module_2.Decimal()
        money_2 = some_money_0.add(money_1)
        money_3 = none_money_0.round()
        bool_1 = none_money_0.as_boolean()
        bool_2 = money_2.__lt__(money_3)
        bool_3 = some_money_0.lt(money_1)
        bool_4 = money_1.gte(money_1)
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_67():
    try:
        bytes_0 = b'K\x18'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        decimal_1 = module_2.Decimal()
        bool_0 = money_1.__le__(money_1)
        money_2 = some_money_0.add(money_1)
        price_1 = none_price_0.negative()
        bool_1 = money_2.__lt__(money_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        money_3 = some_money_1.subtract(money_2)
    except BaseException:
        pass

def test_case_68():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_1 = module_0.NoneMoney()
        decimal_1 = module_2.Decimal()
        money_2 = none_money_1.add(money_0)
        price_2 = price_1.__neg__()
        money_3 = some_money_0.add(money_1)
        money_4 = none_money_1.round()
        bool_1 = none_money_0.as_boolean()
        int_0 = 353
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_2 = None
        bool_2 = money_1.gte(money_3)
        str_1 = '~2fy^|"V0'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_2, int_1)
        price_3 = price_2.add(price_1)
        price_4 = price_0.positive()
        price_5 = none_price_0.with_qty(decimal_0)
        price_6 = price_5.__sub__(price_3)
        bool_3 = some_price_0.is_equal(decimal_1)
        bool_4 = price_3.as_boolean()
        some_money_1 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_69():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        none_money_0 = module_0.NoneMoney()
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        none_money_1 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = module_2.Decimal()
        price_1 = price_0.__neg__()
        money_0 = none_money_1.round()
        str_0 = 'r:+J'
        int_0 = 3060
        int_1 = 2410
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_1)
        bool_0 = True
        price_2 = price_1.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_70():
    try:
        var_0 = None
        price_0 = module_0.Price()
        price_1 = price_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_71():
    try:
        money_0 = module_0.Money()
        int_0 = None
        money_1 = money_0.round(int_0)
    except BaseException:
        pass

def test_case_72():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        some_money_0 = module_0.SomeMoney(*list_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = module_2.Decimal()
        price_1 = price_0.__neg__()
        price_2 = price_1.__add__(price_0)
        bool_0 = price_1.__ge__(price_2)
        decimal_2 = None
        str_0 = '}q41B?=uh'
        str_1 = None
        int_0 = None
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_2, int_0)
        price_3 = price_2.convert(currency_0)
    except BaseException:
        pass

def test_case_73():
    try:
        decimal_0 = module_2.Decimal()
        money_0 = module_0.Money()
        money_1 = money_0.negative()
    except BaseException:
        pass

def test_case_74():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        money_0 = price_0.times(decimal_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_1 = module_0.NoneMoney()
        bool_1 = none_money_1.lt(money_1)
        none_money_2 = module_0.NoneMoney()
        bool_2 = money_1.__le__(money_0)
        var_0 = None
        money_2 = money_1.divide(var_0)
    except BaseException:
        pass

def test_case_75():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_money_0 = module_0.NoneMoney()
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        str_0 = ';7) oNj\\kp\\7\\<'
        none_money_1 = module_0.NoneMoney()
        decimal_1 = module_2.Decimal()
        price_2 = price_1.__abs__()
        money_0 = none_money_1.round()
        bool_0 = none_money_0.as_boolean()
        int_0 = 353
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_2 = None
        bool_1 = price_2.gt(price_1)
        str_1 = '[#)Tz%D'
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_2, int_0)
        price_3 = price_2.add(price_1)
        var_0 = None
        price_4 = price_0.__abs__()
        bool_2 = price_3.lte(price_4)
        price_5 = price_2.__truediv__(var_0)
    except BaseException:
        pass

def test_case_76():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        none_money_0 = module_0.NoneMoney()
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        none_money_1 = module_0.NoneMoney()
        decimal_1 = module_2.Decimal()
        price_1 = price_0.__abs__()
        bool_0 = none_money_0.as_boolean()
        int_0 = 366
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_2 = None
        str_0 = '[#)Tz%D'
        int_1 = -697
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_2, int_1)
        price_2 = price_1.add(price_0)
        var_0 = None
        price_3 = price_0.__add__(price_2)
        bool_1 = price_2.lte(price_3)
        price_4 = price_1.__truediv__(var_0)
    except BaseException:
        pass

def test_case_77():
    try:
        decimal_0 = module_2.Decimal()
        none_price_0 = module_0.NonePrice()
        str_0 = 'D\nR]'
        str_1 = '\r]rN'
        int_0 = -453
        currency_type_0 = module_1.CurrencyType.METAL
        int_1 = 628
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        price_0 = module_0.Price()
        price_1 = price_0.with_ccy(currency_0)
        price_2 = price_1.abs()
    except BaseException:
        pass

def test_case_78():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        some_money_0 = module_0.SomeMoney(*list_0)
        none_money_0 = module_0.NoneMoney()
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        none_money_1 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = module_2.Decimal()
        price_1 = price_0.__neg__()
        price_2 = price_0.__floordiv__(str_0)
        money_0 = none_money_1.round()
        bool_0 = none_money_0.as_boolean()
        decimal_2 = None
        price_3 = price_0.__add__(price_1)
        bool_1 = price_0.__ge__(price_3)
        int_0 = -697
        str_1 = None
        str_2 = 'q\x0c'
        int_1 = 365
        currency_0 = module_1.Currency(str_1, str_2, int_0, currency_type_0, decimal_1, int_1)
        price_4 = price_1.add(price_1)
        var_0 = None
        price_5 = price_4.positive()
        price_6 = none_price_0.with_qty(decimal_2)
        price_7 = some_price_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_79():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        none_money_1 = module_0.NoneMoney()
        price_2 = price_1.add(price_1)
        var_0 = None
        price_3 = price_1.with_qty(decimal_0)
        price_4 = price_3.__abs__()
        bool_1 = price_0.lte(price_2)
        price_5 = price_2.__truediv__(var_0)
    except BaseException:
        pass

def test_case_80():
    try:
        decimal_0 = module_2.Decimal()
        monetary_operation_exception_0 = module_0.MonetaryOperationException()
        dict_0 = {}
        money_0 = module_0.Money(**dict_0)
        money_1 = money_0.divide(monetary_operation_exception_0)
    except BaseException:
        pass

def test_case_81():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        none_money_1 = module_0.NoneMoney()
        bool_1 = money_1.__bool__()
    except BaseException:
        pass

def test_case_82():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        str_0 = ';7) oNj\\kp\\7\\<'
        none_money_1 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.MONEY
        bool_1 = money_0.__le__(money_1)
        decimal_1 = module_2.Decimal()
        money_2 = none_money_0.add(money_1)
        price_2 = price_1.__abs__()
        str_1 = 'Qm@'
        money_3 = some_money_0.floor_divide(str_1)
        money_4 = some_money_0.add(money_3)
        money_5 = none_money_1.round()
        none_money_2 = module_0.NoneMoney()
        bool_2 = none_money_2.as_boolean()
        bool_3 = money_3.gte(money_5)
        int_0 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        price_3 = price_1.add(price_0)
        var_0 = None
        price_4 = price_1.__abs__()
        bool_4 = price_2.lte(price_3)
        price_5 = price_2.__truediv__(var_0)
    except BaseException:
        pass

def test_case_83():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        str_0 = ';7) oNj\\kp\\7\\<'
        none_money_1 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.MONEY
        bool_1 = money_0.__le__(money_1)
        decimal_1 = module_2.Decimal()
        money_2 = none_money_0.add(money_1)
        price_2 = price_1.__abs__()
        str_1 = 'Qm@'
        money_3 = some_money_0.floor_divide(str_1)
        money_4 = some_money_0.add(money_3)
        money_5 = none_money_1.round()
        none_money_2 = module_0.NoneMoney()
        bool_2 = none_money_2.as_boolean()
        date_0 = None
        price_3 = none_price_0.with_dov(date_0)
        bool_3 = money_3.gte(money_5)
        int_0 = -697
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        price_4 = price_1.add(price_0)
        var_0 = None
        price_5 = price_1.__abs__()
        bool_4 = price_2.lte(price_4)
        price_6 = price_2.__truediv__(var_0)
    except BaseException:
        pass

def test_case_84():
    try:
        int_0 = 10
        currency_type_0 = module_1.CurrencyType.CRYPTO
        money_0 = module_0.Money()
        money_1 = money_0.__add__(money_0)
        money_2 = money_0.__pos__()
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.gt(money_2)
        str_0 = '6=X\n``bCM2p'
        bool_1 = money_0.__ge__(money_0)
        int_1 = 825
        list_0 = []
        decimal_0 = module_2.Decimal(*list_0)
        currency_0 = module_1.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_1)
        str_1 = 'day is out of range for month'
        dict_0 = {str_1: int_0}
        some_price_0 = module_0.SomePrice(**dict_0)
    except BaseException:
        pass

def test_case_85():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        none_money_0 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = None
        bool_0 = money_1.__le__(money_0)
        decimal_2 = module_2.Decimal()
        date_0 = None
        money_2 = some_money_0.with_dov(date_0)
        price_2 = price_1.__abs__()
        price_3 = price_2.__add__(price_1)
        bool_1 = price_2.__ge__(price_3)
        str_0 = None
        int_0 = 365
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        bool_2 = True
        price_4 = price_1.convert(currency_0, bool_2)
    except BaseException:
        pass

def test_case_86():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = ';x) ?Nj\\kp\\7\\<'
        int_0 = -692
        bool_0 = price_0.__gt__(price_0)
        currency_type_0 = module_1.CurrencyType.MONEY
        decimal_1 = None
        decimal_2 = module_2.Decimal()
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        price_1 = price_0.__neg__()
        price_2 = price_0.add(price_1)
        currency_type_1 = module_1.CurrencyType.ALTERNATIVE
        decimal_3 = None
        str_1 = '~Q2f$y^|"V0'
        currency_1 = module_1.Currency(str_0, str_1, int_0, currency_type_1, decimal_3, int_0)
        none_price_0 = module_0.NonePrice()
        price_3 = price_1.positive()
        price_4 = price_3.__sub__(price_3)
        price_5 = price_2.with_ccy(currency_0)
        price_6 = price_5.add(price_1)
    except BaseException:
        pass

def test_case_87():
    try:
        decimal_0 = module_2.Decimal()
        price_0 = module_0.Price()
        bool_0 = price_0.is_equal(price_0)
    except BaseException:
        pass

def test_case_88():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.lt(money_1)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        str_0 = ';7) oNj\\kp\\7\\<'
        none_money_1 = module_0.NoneMoney()
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        decimal_1 = None
        bool_1 = money_1.__le__(money_0)
        decimal_2 = module_2.Decimal()
        money_2 = none_money_1.add(money_0)
        price_2 = none_price_0.add(price_0)
        bool_2 = money_1.gte(money_0)
        price_3 = price_1.__abs__()
        money_3 = some_money_0.add(money_1)
        str_1 = ''
        money_4 = none_money_1.scalar_add(some_money_0)
        int_0 = None
        decimal_3 = module_2.Decimal()
        int_1 = -3539
        currency_0 = module_1.Currency(str_1, str_0, int_1, currency_type_0, decimal_1, int_0)
        price_4 = module_0.Price()
        price_5 = price_4.__abs__()
        price_6 = price_3.__sub__(price_2)
        bool_3 = price_6.lte(price_5)
    except BaseException:
        pass

def test_case_89():
    try:
        bytes_0 = b'\xee\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        dict_0 = {}
        monetary_operation_exception_0 = module_0.MonetaryOperationException(**dict_0)
        none_money_0 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        none_money_1 = module_0.NoneMoney()
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = 'mvQV\n0QEZuz/\x0bZ<`c'
        str_1 = None
        int_0 = 2244
        currency_type_0 = module_1.CurrencyType.MONEY
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = price_0.with_ccy(currency_0)
        bool_0 = price_0.__ge__(price_1)
    except BaseException:
        pass

def test_case_90():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        bool_0 = True
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(bytes_0)
        price_1 = price_0.scalar_subtract(bool_0)
        list_0 = [bytes_0, bytes_0, bytes_0]
        price_2 = price_0.__neg__()
        price_3 = price_1.abs()
        money_0 = price_2.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        none_money_0 = module_0.NoneMoney()
        bool_1 = none_money_0.lt(money_1)
        none_money_1 = module_0.NoneMoney()
        decimal_1 = None
        decimal_2 = module_2.Decimal()
        money_2 = some_money_0.add(money_1)
        money_3 = none_money_1.round()
        str_0 = 'gDi6BLmi\x0biOwmy<O'
        bool_2 = none_money_0.as_boolean()
        bool_3 = money_3.__lt__(money_0)
        bool_4 = money_2.__lt__(money_3)
        bool_5 = some_money_0.lt(money_1)
        bool_6 = some_money_0.is_equal(bool_0)
        int_0 = 2056
        currency_type_0 = module_1.CurrencyType.CRYPTO
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_0)
        price_4 = price_1.__abs__()
        money_4 = some_money_0.with_ccy(currency_0)
        bool_7 = money_1.gte(money_4)
    except BaseException:
        pass

def test_case_91():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.abs()
    except BaseException:
        pass

def test_case_92():
    try:
        decimal_0 = module_2.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = module_0.Money()
        money_1 = money_0.positive()
    except BaseException:
        pass

def test_case_93():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        bool_0 = price_0.lt(price_0)
        none_money_0 = module_0.NoneMoney()
        bool_1 = price_0.__gt__(price_0)
        decimal_1 = None
        decimal_2 = module_2.Decimal()
        money_0 = none_money_0.with_qty(decimal_2)
        money_1 = none_money_0.add(money_0)
        price_1 = price_0.abs()
        money_2 = none_money_0.round()
        bool_2 = none_money_0.as_boolean()
        price_2 = price_1.add(price_1)
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_3 = some_money_0.gt(money_2)
        bool_4 = none_money_0.lt(money_2)
        price_3 = price_0.__sub__(price_0)
        price_4 = price_3.__abs__()
        price_5 = price_2.negative()
        price_6 = price_1.__sub__(price_3)
        str_0 = 'fFJfPR+MN6R<d'
        int_0 = 801
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        int_1 = 3
        currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_1, int_1)
        price_7 = some_price_0.with_ccy(currency_0)
        bool_5 = price_0.lte(price_7)
    except BaseException:
        pass

def test_case_94():
    try:
        bytes_0 = b'K\x18'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        money_1 = some_money_0.subtract(money_0)
        decimal_1 = module_2.Decimal()
        bool_0 = money_1.__le__(money_1)
        price_2 = none_price_0.negative()
        price_3 = price_2.__sub__(price_2)
        dict_0 = {}
        none_money_0 = module_0.NoneMoney(**dict_0)
        money_2 = none_money_0.abs()
        money_3 = none_money_0.round()
        str_0 = '\nThis module defines type definitions and functions for various purposes.\n'
        money_4 = money_1.divide(str_0)
        none_money_1 = module_0.NoneMoney(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_95():
    try:
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        price_1 = price_0.__neg__()
        bool_0 = price_0.__ge__(price_1)
        str_0 = 'C'
        bool_1 = price_0.__gt__(price_1)
        str_1 = '30/360 US Municipal'
        dict_0 = {str_0: price_0, str_1: str_1, str_1: str_1}
        some_money_0 = module_0.SomeMoney(**dict_0)
    except BaseException:
        pass

def test_case_96():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.negative()
    except BaseException:
        pass

def test_case_97():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        money_0 = module_0.Money()
        bool_0 = money_0.__eq__(price_0)
        none_money_0 = module_0.NoneMoney()
        bool_1 = price_0.__gt__(price_0)
        money_1 = none_money_0.with_qty(decimal_0)
        money_2 = none_money_0.add(money_1)
        price_1 = price_0.abs()
        money_3 = none_money_0.round()
        bool_2 = none_money_0.as_boolean()
        price_2 = price_1.add(price_1)
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_3 = some_money_0.gt(money_3)
        currency_0 = None
        money_4 = none_money_0.convert(currency_0, bool_2)
        str_0 = '~Q2f$y^|"V0'
        int_0 = -697
        bool_4 = none_money_0.lt(money_3)
        price_3 = price_0.__sub__(price_0)
        int_1 = 365
        price_4 = price_2.__abs__()
        price_5 = price_4.__abs__()
        bool_5 = price_5.gte(price_3)
        bool_6 = money_2.__lt__(money_2)
        str_1 = None
        currency_type_0 = module_1.CurrencyType.ALTERNATIVE
        currency_1 = module_1.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        money_5 = some_money_0.convert(currency_1)
    except BaseException:
        pass

def test_case_98():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_money_0 = module_0.NoneMoney()
        decimal_1 = None
        money_0 = none_money_0.with_qty(decimal_0)
        money_1 = none_money_0.add(money_0)
        money_2 = none_money_0.positive()
        bool_0 = none_money_0.as_boolean()
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_1 = some_money_0.gt(money_2)
        bool_2 = none_money_0.lt(money_2)
        money_3 = module_0.Money()
        int_0 = -1724
        str_0 = 'NAD'
        str_1 = '\x0bJG(L&`E`>'
        currency_type_0 = module_1.CurrencyType.METAL
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        bool_3 = money_3.__lt__(money_3)
        money_4 = money_3.subtract(money_2)
    except BaseException:
        pass

def test_case_99():
    try:
        money_0 = module_0.Money()
        str_0 = 'HOqHrb2'
        str_1 = '~SJAp"ZwSev'
        int_0 = None
        currency_type_0 = module_1.CurrencyType.CRYPTO
        list_0 = []
        decimal_0 = module_2.Decimal(*list_0)
        int_1 = 1464
        currency_0 = module_1.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_1 = money_0.with_ccy(currency_0)
        dict_0 = {str_0: str_0}
        none_money_0 = module_0.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_100():
    try:
        bytes_0 = b'\xb1\x18'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.with_qty(decimal_0)
        money_0 = price_0.times(decimal_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        decimal_1 = module_2.Decimal()
        bool_0 = money_1.__le__(money_1)
        money_2 = some_money_0.add(money_1)
        none_money_0 = module_0.NoneMoney()
        money_3 = none_money_0.round()
        str_0 = 'gDi6BLmi\x0biOwmy<O'
        bool_1 = none_money_0.as_boolean()
        bool_2 = money_1.__lt__(money_1)
        bool_3 = money_0.__lt__(money_3)
        int_0 = 353
        bool_4 = some_money_0.lt(money_0)
        currency_type_0 = module_1.CurrencyType.METAL
        str_1 = 'q~|a}3t-QA'
        price_1 = none_price_0.multiply(str_1)
        price_2 = none_price_0.positive()
        money_4 = some_money_0.add(money_0)
        int_1 = -520
        money_5 = none_money_0.round(int_1)
        bool_5 = none_money_0.as_boolean()
        str_2 = '5JJ3'
        currency_0 = module_1.Currency(str_2, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_6 = some_money_0.with_ccy(currency_0)
        bool_6 = money_1.__lt__(money_6)
    except BaseException:
        pass

def test_case_101():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        bool_0 = price_0.lt(price_0)
        none_money_0 = module_0.NoneMoney()
        bool_1 = price_0.__gt__(price_0)
        money_0 = none_money_0.with_qty(decimal_0)
        money_1 = none_money_0.add(money_0)
        bool_2 = none_money_0.as_boolean()
        price_1 = price_0.add(price_0)
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_3 = some_money_0.gt(money_1)
        str_0 = '~Q2f$y^|"V0'
        int_0 = -697
        bool_4 = none_money_0.lt(money_1)
        price_2 = price_0.__sub__(price_0)
        money_2 = some_money_0.add(money_1)
        bool_5 = money_2.is_equal(money_2)
        price_3 = price_1.__abs__()
        price_4 = price_3.__abs__()
        bool_6 = money_2.__lt__(money_2)
        bool_7 = money_2.lte(money_2)
        str_1 = None
        currency_type_0 = module_1.CurrencyType.CRYPTO
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        date_0 = None
        price_5 = price_4.convert(currency_0, date_0)
    except BaseException:
        pass

def test_case_102():
    try:
        var_0 = None
        money_0 = module_0.Money()
        bool_0 = money_0.is_equal(var_0)
    except BaseException:
        pass

def test_case_103():
    try:
        bytes_0 = b'\x8d'
        decimal_0 = module_2.Decimal()
        list_0 = [bytes_0, bytes_0, bytes_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        bool_0 = price_0.lt(price_0)
        none_money_0 = module_0.NoneMoney()
        bool_1 = price_0.__gt__(price_0)
        money_0 = none_money_0.with_qty(decimal_0)
        money_1 = none_money_0.add(money_0)
        price_1 = price_0.abs()
        money_2 = none_money_0.positive()
        bool_2 = none_money_0.as_boolean()
        price_2 = price_1.add(price_1)
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_3 = some_money_0.gt(money_2)
        str_0 = '~Q2f$y^|"V0'
        int_0 = -697
        bool_4 = none_money_0.lt(money_2)
        price_3 = price_0.__sub__(price_0)
        money_3 = some_money_0.add(money_2)
        bool_5 = money_3.is_equal(money_2)
        price_4 = price_2.__abs__()
        price_5 = module_0.Price()
        bool_6 = price_5.gte(price_3)
        bool_7 = money_3.__lt__(money_3)
        bool_8 = money_3.lte(money_2)
        str_1 = None
        currency_type_0 = module_1.CurrencyType.CRYPTO
        currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        date_0 = None
        price_6 = price_5.convert(currency_0, date_0)
    except BaseException:
        pass

def test_case_104():
    try:
        list_0 = []
        money_0 = module_0.Money(*list_0)
        bool_0 = money_0.lt(money_0)
        date_0 = module_3.date()
    except BaseException:
        pass

def test_case_105():
    try:
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        price_1 = price_0.__neg__()
        bool_0 = price_0.__ge__(price_1)
        int_0 = price_0.as_integer()
    except BaseException:
        pass

def test_case_106():
    try:
        price_0 = module_0.Price()
        var_0 = None
        money_0 = price_0.times(var_0)
    except BaseException:
        pass

def test_case_107():
    try:
        list_0 = []
        money_0 = module_0.Money(*list_0)
        var_0 = None
        money_1 = money_0.__mul__(var_0)
        bool_0 = money_0.lt(money_0)
        date_0 = module_3.date()
    except BaseException:
        pass