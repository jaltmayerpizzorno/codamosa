# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        var_0 = None
        var_1 = module_0.identity(var_0)
        list_0 = [callable_1]
        bool_0 = True
        var_2 = module_0.pipe(bool_0, *list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        int_0 = 2897
        int_1 = module_0.increase(int_0)
        list_0 = [callable_1]
        var_0 = module_0.pipe(callable_1, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1]
        var_0 = module_0.pipe(callable_1, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        var_0 = module_0.cond(list_0)
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_1 = [callable_1, callable_1, callable_0, callable_0, callable_0, callable_0]
        var_1 = module_0.pipe(list_1, *list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_1]
        str_0 = ''
        var_0 = module_0.curry(list_0, str_0)
        str_1 = 'DA|'
        var_1 = module_0.pipe(str_1, *list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_1, callable_1, callable_0, callable_1, callable_1]
        dict_0 = {callable_1: list_0}
        var_0 = module_0.compose(dict_0, *list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callable_0 = None
        list_0 = []
        var_0 = module_0.cond(list_0)
        set_0 = {callable_0, var_0}
        list_1 = [set_0, callable_0]
        list_2 = [list_1, callable_0, set_0, callable_0, var_0]
        var_1 = module_0.compose(set_0, *list_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'oZH2\n;}xw(^oNPX77'
        callable_0 = None
        tuple_0 = (str_0, callable_0)
        list_0 = [tuple_0, tuple_0, tuple_0]
        var_0 = module_0.cond(list_0)
        set_0 = {str_0, callable_0, callable_0}
        list_1 = [callable_0, set_0, var_0]
        var_1 = module_0.compose(set_0, *list_1)
    except BaseException:
        pass