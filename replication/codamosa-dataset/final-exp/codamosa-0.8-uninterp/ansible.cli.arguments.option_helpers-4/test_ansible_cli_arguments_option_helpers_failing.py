# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        str_0 = 'O^j%qA+\x0b>;&g,cY'
        set_0 = set()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        var_0 = sorting_help_formatter_0.add_arguments(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = None
        dict_1 = {dict_0: dict_0, dict_0: dict_0, dict_0: dict_0}
        bytes_0 = b'*\x05R\x0b{\xfa\x19\xd9\xec\xa2'
        bytes_1 = b'\xe8,X'
        float_0 = -1584.0
        int_0 = 31
        str_0 = '5'
        bool_0 = True
        float_1 = -1618.02
        float_2 = -2295.6
        unrecognized_argument_0 = module_0.UnrecognizedArgument(str_0, bool_0, float_1, float_2)
        prepend_list_action_0 = module_0.PrependListAction(int_0, unrecognized_argument_0)
        bytes_2 = b'\x9a\x98y\xf1?u'
        unrecognized_argument_1 = module_0.UnrecognizedArgument(bytes_1, float_0, prepend_list_action_0, bytes_2)
        var_0 = unrecognized_argument_1.__call__(dict_1, bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        dict_0 = None
        prepend_list_action_0 = module_0.PrependListAction(sorting_help_formatter_0, sorting_help_formatter_0, dict_0, sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        str_0 = 'R'
        list_0 = [dict_0, dict_0, dict_0, str_0]
        complex_0 = None
        list_1 = None
        bytes_0 = None
        set_0 = {list_1}
        str_1 = '_%DF8%vra"'
        var_0 = module_0.version()
        tuple_0 = ()
        unrecognized_argument_0 = module_0.UnrecognizedArgument(list_0, set_0, str_1, tuple_0, bytes_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(complex_0)
        str_2 = 'm,EH{xD^EN'
        ansible_version_0 = module_0.AnsibleVersion(dict_0, str_2)
        int_0 = -2041
        bool_0 = False
        prepend_list_action_0 = module_0.PrependListAction(tuple_0, int_0, bool_0, ansible_version_0, ansible_version_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -2566.6817
        dict_0 = {}
        set_0 = None
        float_1 = 1.5
        complex_0 = None
        ansible_version_0 = module_0.AnsibleVersion(dict_0, set_0, float_0, float_1, complex_0)
        list_0 = [float_0]
        tuple_0 = None
        bool_0 = True
        prepend_list_action_0 = module_0.PrependListAction(float_0, list_0, tuple_0)
        ansible_version_1 = module_0.AnsibleVersion(float_0, list_0, tuple_0, bool_0, prepend_list_action_0)
        var_0 = module_0.add_fork_options(ansible_version_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1533
        var_0 = module_0.add_verbosity_options(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 0.2
        var_0 = module_0.add_async_options(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = None
        var_0 = module_0.add_basedir_options(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '-:%'
        dict_0 = {str_0: str_0}
        str_1 = '9D]C=xUo'
        list_0 = [dict_0, str_0, str_1]
        str_2 = 'GID3ch?o'
        ansible_version_0 = module_0.AnsibleVersion(list_0, str_2)
        bytes_0 = b'\xf1\xa5\x9b/\x8cA\xbd\x92\x1f\x03\xf2z\xbcdW\x17\xf5'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(ansible_version_0, ansible_version_0, bytes_0)
        ansible_version_1 = module_0.AnsibleVersion(ansible_version_0, bytes_0, unrecognized_argument_0, bytes_0)
        list_1 = [ansible_version_1]
        var_0 = module_0.maybe_unfrack_path(list_1)
        str_3 = '- %s %s was created successfully'
        set_0 = {str_3}
        bool_0 = False
        dict_1 = None
        dict_2 = {bool_0: bool_0, dict_1: dict_1, str_3: set_0, bool_0: dict_1}
        str_4 = 'N~qgc'
        argument_parser_0 = module_1.ArgumentParser(dict_2, str_4, dict_2)
        var_1 = module_0.add_inventory_options(argument_parser_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = module_0.version()
        sorting_help_formatter_0 = None
        str_0 = 'd'
        set_0 = set()
        bytes_0 = b'\x95@\xd6-\x8f\xc3\xfc\xaa\x89\xa2\xc1\xfb\x06\x17\xbc\xabr'
        int_0 = -151
        unrecognized_argument_0 = module_0.UnrecognizedArgument(int_0, bytes_0, int_0, set_0)
        str_1 = '\x0bJZd@m3)j'
        set_1 = {sorting_help_formatter_0, str_0, str_1}
        ansible_version_0 = module_0.AnsibleVersion(sorting_help_formatter_0, str_0, set_1)
        dict_0 = {ansible_version_0: var_0}
        var_1 = module_0.add_meta_options(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        str_0 = 'R'
        list_0 = [dict_0, dict_0, dict_0, str_0]
        complex_0 = None
        list_1 = None
        bytes_0 = None
        set_0 = {list_1}
        var_0 = module_0.version()
        tuple_0 = ()
        unrecognized_argument_0 = module_0.UnrecognizedArgument(list_0, set_0, str_0, tuple_0, bytes_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(complex_0)
        var_1 = module_0.add_module_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = None
        var_0 = module_0.add_output_options(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        var_0 = module_0.add_runas_prompt_options(bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        str_0 = 'R'
        list_0 = [dict_0, dict_0, dict_0, str_0]
        complex_0 = None
        list_1 = None
        bytes_0 = None
        set_0 = {list_1}
        str_1 = '_%DF8%vra"'
        var_0 = module_0.version()
        tuple_0 = ()
        unrecognized_argument_0 = module_0.UnrecognizedArgument(list_0, set_0, str_1, tuple_0, bytes_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(complex_0)
        var_1 = module_0.add_runtask_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = []
        var_0 = module_0.add_subset_options(list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 86
        var_0 = module_0.add_vault_options(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        sorting_help_formatter_0 = None
        var_0 = module_0.add_runas_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        var_0 = module_0.add_tasknoplay_options(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = {}
        str_0 = 'R'
        list_0 = [dict_0, dict_0, dict_0, str_0]
        complex_0 = None
        list_1 = None
        bytes_0 = None
        set_0 = {list_1}
        str_1 = '_%DF8%vra"'
        var_0 = module_0.version()
        tuple_0 = ()
        unrecognized_argument_0 = module_0.UnrecognizedArgument(list_0, set_0, str_1, tuple_0, bytes_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(complex_0)
        var_1 = sorting_help_formatter_0.add_arguments(dict_0)
        str_2 = 'm,EH{xD^EN'
        ansible_version_0 = module_0.AnsibleVersion(dict_0, str_2)
        int_0 = -2041
        bool_0 = False
        prepend_list_action_0 = module_0.PrependListAction(tuple_0, int_0, bool_0, ansible_version_0, ansible_version_0, tuple_0)
    except BaseException:
        pass

def test_case_19():
    try:
        set_0 = set()
        bytes_0 = b'\x89\xe4m\x8a'
        var_0 = module_0.create_base_parser(set_0, bytes_0)
        str_0 = "E'wX,rD].#i"
        float_0 = -1986.4
        tuple_0 = (str_0, float_0)
        float_1 = -612.487
        var_1 = module_0.add_runas_prompt_options(tuple_0, float_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = None
        float_0 = -1064.747454
        dict_0 = None
        set_0 = {int_0, float_0, dict_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        var_0 = module_0.add_fork_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = True
        int_0 = -1049
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bool_0, int_0)
        int_1 = 720
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(sorting_help_formatter_0, int_1)
        var_0 = module_0.add_tasknoplay_options(sorting_help_formatter_1)
    except BaseException:
        pass

def test_case_22():
    try:
        dict_0 = {}
        str_0 = 'R'
        list_0 = [dict_0, dict_0, dict_0, str_0]
        complex_0 = None
        list_1 = None
        bytes_0 = None
        set_0 = {list_1}
        var_0 = module_0.version()
        tuple_0 = ()
        unrecognized_argument_0 = module_0.UnrecognizedArgument(list_0, set_0, str_0, tuple_0, bytes_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(complex_0)
        prepend_list_action_0 = module_0.PrependListAction(bytes_0, tuple_0, list_0, list_1)
        bytes_1 = b'\xa4\xbc;(\xee(4\\\xd8\xabw\xe4P\xbb\x07d\xfbc'
        int_0 = -3654
        ansible_version_0 = module_0.AnsibleVersion(unrecognized_argument_0, int_0)
        var_1 = module_0.version(bytes_1)
        int_1 = -913
        var_2 = module_0.unfrack_path(int_1)
        var_3 = module_0.add_basedir_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_23():
    try:
        complex_0 = None
        dict_0 = {}
        list_0 = [complex_0, dict_0]
        float_0 = 376.94997
        bool_0 = False
        argument_parser_0 = module_1.ArgumentParser(dict_0, list_0, float_0, bool_0)
        str_0 = 'K!iq'
        argument_parser_1 = module_1.ArgumentParser(argument_parser_0, str_0)
        var_0 = module_0.add_runas_options(argument_parser_1)
        str_1 = '`mQEDwhBki\r{aHG'
        dict_1 = {str_1: str_1, str_1: str_1, str_1: complex_0, str_1: str_1}
        var_1 = module_0.add_vault_options(dict_1)
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        str_0 = ''
        list_0 = [dict_0, dict_0, dict_0, str_0]
        complex_0 = None
        list_1 = None
        bytes_0 = None
        set_0 = {list_1}
        var_0 = module_0.version()
        tuple_0 = ()
        unrecognized_argument_0 = module_0.UnrecognizedArgument(list_0, set_0, str_0, tuple_0, bytes_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(complex_0)
        prepend_list_action_0 = module_0.PrependListAction(bytes_0, tuple_0, list_0, list_1)
        var_1 = module_0.add_meta_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = {}
        str_0 = '?'
        list_0 = [dict_0, dict_0, dict_0, str_0]
        complex_0 = None
        list_1 = None
        bytes_0 = None
        set_0 = {list_1}
        var_0 = module_0.version()
        tuple_0 = ()
        unrecognized_argument_0 = module_0.UnrecognizedArgument(list_0, set_0, str_0, tuple_0, bytes_0)
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(complex_0)
        bytes_1 = b'f\x80os\xb4L\xeb\xddXxT\xb2\xec\x19n\x92]\xf4'
        prepend_list_action_0 = module_0.PrependListAction(bytes_0, tuple_0, list_0, list_1)
        complex_1 = None
        float_0 = -894.2
        int_0 = -913
        var_1 = module_0.unfrack_path(int_0)
        float_1 = -639.19929
        prepend_list_action_1 = module_0.PrependListAction(float_0, float_1, str_0, tuple_0, str_0, bytes_0, str_0)
        prepend_list_action_2 = module_0.PrependListAction(bytes_1, set_0, set_0, complex_1)
        ansible_version_0 = None
        prepend_list_action_3 = module_0.PrependListAction(ansible_version_0, list_1, list_1, prepend_list_action_0)
    except BaseException:
        pass