# Automatically generated by Pynguin.
import argparse as module_0
import ansible.cli.arguments.option_helpers as module_1

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\x9f\x81\xc3\xfa\xb62\xabp'
    list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_1 = None
    tuple_0 = (list_1,)
    argument_parser_0 = module_0.ArgumentParser(list_0, tuple_0)
    list_2 = [bytes_0, bytes_0, bytes_0, bytes_0]
    list_3 = [bytes_0, bytes_0, bytes_0]
    bytes_1 = b'\xf1v\xb8\rRQ\xc7\x8c\xbb'
    bytes_2 = b'\x03\x97\xe1\xf86\xd69\xd3\xee\xc0EU\xdax;\xa4'
    tuple_1 = (list_2,)
    set_0 = set()
    float_0 = 97.53342
    ansible_version_0 = module_1.AnsibleVersion(list_3, list_3, bytes_1, bytes_0, bytes_2, tuple_1, set_0, float_0)
    ansible_version_1 = module_1.AnsibleVersion(list_2, list_3, list_3, ansible_version_0)
    var_0 = ansible_version_1.__call__(argument_parser_0, tuple_0, list_0)
    var_1 = module_1.add_tasknoplay_options(bytes_0)

def test_case_2():
    namespace_0 = module_0.Namespace()
    str_0 = 'dt'
    str_1 = 'a'
    str_2 = 'b'
    str_3 = 'c'
    str_4 = [str_1, str_2, str_3]
    var_0 = setattr(namespace_0, str_0, str_4)
    str_5 = ''
    int_0 = 2
    prepend_list_action_0 = module_1.PrependListAction(str_5, str_0, int_0)
    var_1 = None
    str_6 = '1'
    str_7 = 'Mc3z:epm'
    str_8 = [str_6, str_7]
    var_2 = prepend_list_action_0.__call__(var_1, namespace_0, str_8)
    var_3 = getattr(namespace_0, str_0)

def test_case_3():
    namespace_0 = module_0.Namespace()
    str_0 = 'foo'
    var_0 = []
    var_1 = module_1.ensure_value(namespace_0, str_0, var_0)
    var_2 = []
    var_3 = module_1.ensure_value(namespace_0, str_0, var_2)
    var_4 = []
    var_5 = module_1.ensure_value(namespace_0, str_0, var_4)
    var_6 = []
    var_7 = module_1.ensure_value(namespace_0, str_0, var_6)
    var_8 = getattr(namespace_0, str_0)

def test_case_4():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_vault_options(argument_parser_0)

def test_case_5():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_vault_options(argument_parser_0)
    bytes_0 = b'\x92\xf1\x0c$8\xaaH\x92\xa8\xadw\x15'
    var_1 = module_1.maybe_unfrack_path(bytes_0)
    namespace_0 = module_0.Namespace()
    var_2 = module_1.maybe_unfrack_path(namespace_0)

def test_case_6():
    str_0 = '/usr/bin/ansible'
    var_0 = module_1.create_base_parser(str_0)
    var_1 = module_1.add_async_options(var_0)

def test_case_7():
    str_0 = 'Test the add_check_options function'
    str_1 = 'resolve'
    argument_parser_0 = module_0.ArgumentParser(str_0, str_1)
    var_0 = module_1.add_check_options(argument_parser_0)
    str_2 = '-C'
    str_3 = '--syntax-check'
    str_4 = '-D'
    str_5 = [str_2, str_3, str_4]
    var_1 = argument_parser_0.parse_args(str_5)
    str_6 = [str_3, str_4, str_2]
    var_2 = argument_parser_0.parse_args(str_6)

def test_case_8():
    str_0 = 'ansible-runner'
    bool_0 = False
    argument_parser_0 = module_0.ArgumentParser(str_0, bool_0)
    var_0 = module_1.add_connect_options(argument_parser_0)

def test_case_9():
    var_0 = module_1.version()

def test_case_10():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_runas_prompt_options(argument_parser_0)
    str_0 = '--become-password-file=test'
    str_1 = [str_0, str_0]
    var_1 = argument_parser_0.parse_args(str_1)

def test_case_11():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_output_options(argument_parser_0)
    str_0 = '-t'
    str_1 = 'log'
    str_2 = [str_0, str_1]
    var_1 = argument_parser_0.parse_args(str_2)
    str_3 = '~/logs'
    str_4 = [str_0, str_3]
    var_2 = argument_parser_0.parse_args(str_4)
    var_3 = []
    var_4 = argument_parser_0.parse_args(var_3)

def test_case_12():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_subset_options(argument_parser_0)
    var_1 = argument_parser_0.print_help()
    str_0 = 'tag1'
    str_1 = '--skip-tags'
    str_2 = [str_1, str_0, str_1, str_1]
    var_2 = argument_parser_0.parse_args(str_2)

def test_case_13():
    dict_0 = {}
    str_0 = 'R'
    list_0 = [dict_0, dict_0, dict_0, str_0]
    complex_0 = None
    list_1 = None
    bytes_0 = None
    set_0 = set()
    var_0 = module_1.version()
    tuple_0 = ()
    unrecognized_argument_0 = module_1.UnrecognizedArgument(list_0, set_0, str_0, tuple_0, bytes_0)
    sorting_help_formatter_0 = module_1.SortingHelpFormatter(complex_0)
    float_0 = 1030.52775
    prepend_list_action_0 = module_1.PrependListAction(bytes_0, tuple_0, list_0, list_1)
    var_1 = module_1.version(float_0)
    int_0 = -913
    var_2 = module_1.unfrack_path()
    argument_parser_0 = module_0.ArgumentParser(sorting_help_formatter_0, int_0)
    var_3 = module_1.add_meta_options(argument_parser_0)
    str_1 = '%j\'"gRiU'
    prepend_list_action_1 = module_1.PrependListAction(set_0, sorting_help_formatter_0, str_1)