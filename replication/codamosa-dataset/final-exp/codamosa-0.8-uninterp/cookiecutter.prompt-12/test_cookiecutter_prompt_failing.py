# Automatically generated by Pynguin.
import cookiecutter.prompt as module_0

def test_case_0():
    try:
        bytes_0 = None
        str_0 = ',4G'
        tuple_0 = (str_0,)
        var_0 = module_0.read_user_variable(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = None
        int_0 = 227
        var_0 = module_0.read_user_yes_no(float_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -572.11
        int_0 = None
        str_0 = '!'
        tuple_0 = (float_0, int_0, str_0)
        var_0 = module_0.read_repo_password(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        var_0 = module_0.read_user_choice(bool_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 2942.0
        set_0 = {float_0, float_0, float_0, float_0}
        bytes_0 = b'\xe3\xa8\xfcr\x0b2\xd0\x17(\xd7\xe4p+'
        var_0 = module_0.read_user_choice(set_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'H<5:X\n!'
        var_0 = module_0.process_json(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'bT'
        var_0 = module_0.read_user_dict(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        set_0 = {tuple_0, tuple_0}
        list_0 = None
        var_0 = module_0.render_variable(tuple_0, set_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'r'
        template_0 = None
        list_0 = [str_0]
        var_0 = module_0.render_variable(str_0, template_0, list_0)
        str_1 = '3w:oKx'
        var_1 = module_0.process_json(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 3114.2
        str_0 = None
        str_1 = '&OTxfU,'
        set_0 = {str_0}
        var_0 = module_0.prompt_choice_for_config(float_0, str_0, str_1, set_0, set_0)
        str_2 = 's'
        var_1 = module_0.read_user_dict(set_0, str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        int_0 = -397
        str_0 = 'w(=="\x0c*pn3gic^O>Y'
        var_0 = module_0.prompt_choice_for_config(bool_0, set_0, int_0, set_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '{"dict_key": "dict_val"}'
        var_0 = module_0.process_json(str_0)
        str_1 = '{"dict_key": {"sub_key": "sub_val"}}'
        var_1 = module_0.process_json(str_1)
        bool_0 = True
        tuple_0 = ()
        var_2 = module_0.prompt_for_config(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -403.0
        bool_0 = True
        tuple_0 = (bool_0,)
        set_0 = {float_0}
        str_0 = '`LE,6'
        bytes_0 = b'A|\xdch\xd8\x8a\xe3\xe2\x99b\xe4\xb0\x9a@5J@xu\xbe'
        tuple_1 = (bytes_0, float_0)
        var_0 = module_0.prompt_choice_for_config(float_0, tuple_0, set_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 372
        list_0 = []
        template_0 = None
        var_0 = module_0.render_variable(int_0, list_0, template_0)
        strict_environment_0 = None
        var_1 = module_0.process_json(strict_environment_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xd9G\x17\x92]Z0\xd4W>\xfdd\x03o\xaf\x97\xd2\xef\x1e\x18'
        bool_0 = False
        dict_0 = {bool_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = [dict_0, bool_0]
        float_0 = -1169.34
        var_0 = module_0.prompt_choice_for_config(bytes_0, bool_0, dict_0, list_0, float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 1651.7123
        bool_0 = True
        tuple_0 = (bool_0,)
        complex_0 = None
        set_0 = set()
        var_0 = module_0.prompt_choice_for_config(float_0, tuple_0, complex_0, set_0, set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        bool_0 = True
        list_0 = []
        list_1 = [list_0]
        var_0 = module_0.prompt_choice_for_config(str_0, bool_0, list_0, list_1, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        bool_0 = True
        list_0 = [bool_0, str_0]
        list_1 = [list_0]
        var_0 = module_0.prompt_choice_for_config(str_0, bool_0, list_0, list_1, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'destructive_tests'
        var_0 = {}
        var_1 = module_0.read_user_dict(str_0, var_0)
    except BaseException:
        pass

def test_case_19():
    try:
        float_0 = 3114.2
        str_0 = None
        set_0 = {str_0}
        var_0 = module_0.prompt_choice_for_config(float_0, str_0, str_0, set_0, set_0)
        bytes_0 = b'j\x94'
        set_1 = None
        dict_0 = {set_1: bytes_0}
        var_1 = module_0.render_variable(set_1, dict_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '2'
        var_0 = module_0.process_json(str_0)
    except BaseException:
        pass