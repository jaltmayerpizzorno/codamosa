# Automatically generated by Pynguin.
import ansible.vars.manager as module_0

def test_case_0():
    pass

def test_case_1():
    variable_manager_0 = module_0.VariableManager()

def test_case_2():
    list_0 = []
    vars_with_sources_0 = module_0.VarsWithSources(*list_0)
    str_0 = 'q+,%vOySX'
    variable_manager_0 = module_0.VariableManager(str_0)
    var_0 = variable_manager_0.set_inventory(vars_with_sources_0)

def test_case_3():
    bool_0 = True
    vars_with_sources_0 = module_0.VarsWithSources()
    str_0 = 'b0m\t^/cd=WuQ|y'
    variable_manager_0 = module_0.VariableManager()
    var_0 = variable_manager_0.set_host_variable(bool_0, str_0, variable_manager_0)

def test_case_4():
    vars_with_sources_0 = module_0.VarsWithSources()
    var_0 = vars_with_sources_0.copy()

def test_case_5():
    variable_manager_0 = module_0.VariableManager()
    str_0 = '='
    str_1 = 'my_varname'
    vars_with_sources_0 = module_0.VarsWithSources()
    int_0 = -1790
    var_0 = vars_with_sources_0.get_source(int_0)
    var_1 = variable_manager_0.__setstate__(vars_with_sources_0)
    list_0 = None
    var_2 = vars_with_sources_0.get_source(list_0)
    var_3 = variable_manager_0.set_host_variable(str_0, str_1, str_1)
    str_2 = 'some_value'
    bytes_0 = b'\xb6'
    str_3 = '\n[\\e3C'
    bytes_1 = b'y\xac\x16'
    str_4 = ".'#M S`\tsgXi"
    str_5 = 'Xd9/$p,'
    dict_0 = {str_3: bytes_1, str_4: var_1, str_2: bytes_1, str_5: str_3}
    var_4 = variable_manager_0.set_nonpersistent_facts(str_1, dict_0)
    vars_with_sources_1 = module_0.VarsWithSources()
    var_5 = variable_manager_0.set_host_facts(bytes_0, vars_with_sources_1)
    variable_manager_1 = module_0.VariableManager()

def test_case_6():
    int_0 = 939
    bool_0 = True
    vars_with_sources_0 = module_0.VarsWithSources()
    var_0 = vars_with_sources_0.__setitem__(int_0, bool_0)

def test_case_7():
    dict_0 = None
    vars_with_sources_0 = module_0.VarsWithSources()
    str_0 = ',:iDuk4mB'
    list_0 = None
    bytes_0 = b'\x12\x0e\x83\xf3\x0b\x831\xce\x15I\xd0\xf7j\x92\x93\x1c\t\xee\tf'
    variable_manager_0 = module_0.VariableManager(vars_with_sources_0, bytes_0)
    var_0 = variable_manager_0.set_host_variable(str_0, dict_0, list_0)
    variable_manager_1 = module_0.VariableManager(str_0)
    var_1 = variable_manager_0.__getstate__()

def test_case_8():
    variable_manager_0 = module_0.VariableManager()
    var_0 = dict()
    str_0 = 'localhost'
    var_1 = variable_manager_0.set_host_facts(str_0, var_0)
    var_2 = dict()
    var_3 = variable_manager_0.set_host_facts(str_0, var_2)

def test_case_9():
    variable_manager_0 = module_0.VariableManager()
    str_0 = 'ok'
    str_1 = 'my_varname'
    vars_with_sources_0 = module_0.VarsWithSources()
    var_0 = variable_manager_0.__setstate__(vars_with_sources_0)
    str_2 = 'my_value'
    var_1 = variable_manager_0.set_host_variable(str_0, str_1, str_2)
    bytes_0 = b'N'
    vars_with_sources_1 = module_0.VarsWithSources()
    var_2 = variable_manager_0.set_host_facts(bytes_0, vars_with_sources_1)

def test_case_10():
    dict_0 = None
    vars_with_sources_0 = module_0.VarsWithSources()
    variable_manager_0 = module_0.VariableManager()
    bool_0 = False
    variable_manager_1 = module_0.VariableManager(bool_0, dict_0)
    str_0 = "g\n1[mH#LG2b3'1f7'"
    list_0 = None
    bytes_0 = b'\x12\x0e\x83\xf3\x0b\x831\xce\x15I\xd0\xf7j\x92\x93\x1c\t\xee\tf'
    variable_manager_2 = module_0.VariableManager(vars_with_sources_0, bytes_0)
    var_0 = variable_manager_2.set_host_variable(str_0, dict_0, list_0)
    str_1 = '\n- name: Install apache httpd  (state=present is optional)\n  apt:\n    name: apache2\n    state: present\n\n- name: Update repositories cache and install "foo" package\n  apt:\n    name: foo\n    update_cache: yes\n\n- name: Remove "foo" package\n  apt:\n    name: foo\n    state: absent\n\n- name: Install the package "foo"\n  apt:\n    name: foo\n\n- name: Install a list of packages\n  apt:\n    pkg:\n    - foo\n    - foo-tools\n\n- name: Install the version \'1.00\' of package "foo"\n  apt:\n    name: foo=1.00\n\n- name: Update the repository cache and update package "nginx" to latest version using default release squeeze-backport\n  apt:\n    name: nginx\n    state: latest\n    default_release: squeeze-backports\n    update_cache: yes\n\n- name: Install the version \'1.18.0\' of package "nginx" and allow potential downgrades\n  apt:\n    name: nginx=1.18.0\n    state: present\n    allow_downgrade: yes\n\n- name: Install zfsutils-linux with ensuring conflicted packages (e.g. zfs-fuse) will not be removed.\n  apt:\n    name: zfsutils-linux\n    state: latest\n    fail_on_autoremove: yes\n\n- name: Install latest version of "openjdk-6-jdk" ignoring "install-recommends"\n  apt:\n    name: openjdk-6-jdk\n    state: latest\n    install_recommends: no\n\n- name: Update all packages to their latest version\n  apt:\n    name: "*"\n    state: latest\n\n- name: Upgrade the OS (apt-get dist-upgrade)\n  apt:\n    upgrade: dist\n\n- name: Run the equivalent of "apt-get update" as a separate step\n  apt:\n    update_cache: yes\n\n- name: Only run "update_cache=yes" if the last one is more than 3600 seconds ago\n  apt:\n    update_cache: yes\n    cache_valid_time: 3600\n\n- name: Pass options to dpkg on run\n  apt:\n    upgrade: dist\n    update_cache: yes\n    dpkg_options: \'force-confold,force-confdef\'\n\n- name: Install a .deb package\n  apt:\n    deb: /tmp/mypackage.deb\n\n- name: Install the build dependencies for package "foo"\n  apt:\n    pkg: foo\n    state: build-dep\n\n- name: Install a .deb package from the internet\n  apt:\n    deb: https://example.com/python-ppq_0.1-1_all.deb\n\n- name: Remove useless packages from the cache\n  apt:\n    autoclean: yes\n\n- name: Remove dependencies that are no longer required\n  apt:\n    autoremove: yes\n'
    str_2 = 'Ec4~AkO'
    str_3 = '7-'
    dict_1 = {str_1: var_0, str_2: bytes_0, str_3: str_1}
    vars_with_sources_1 = module_0.VarsWithSources(**dict_1)
    var_1 = vars_with_sources_0.__setitem__(bytes_0, vars_with_sources_1)
    tuple_0 = None
    var_2 = module_0.preprocess_vars(tuple_0)

def test_case_11():
    variable_manager_0 = module_0.VariableManager()
    str_0 = 'test'
    str_1 = 'my_varname'
    str_2 = 'my_value'
    var_0 = variable_manager_0.set_host_variable(str_0, str_1, str_2)
    str_3 = 'new_value'
    var_1 = variable_manager_0.set_host_variable(str_0, str_1, str_3)