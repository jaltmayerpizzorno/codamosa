# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        dict_0 = {module_args_parser_0: module_args_parser_0}
        module_args_parser_1 = module_0.ModuleArgsParser(dict_0)
        module_args_parser_2 = module_0.ModuleArgsParser(module_args_parser_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1278.38162
        list_0 = None
        dict_0 = {float_0: list_0, list_0: list_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'e7cho hi'
        var_0 = dict(action=str_0)
        var_1 = dict(local_action=var_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_1)
        var_2 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'UlQ'
        str_1 = '\\p9OwL|g]'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(dict_0)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_5():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = dict(shell=module_args_parser_0)
        module_args_parser_1 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'shellcho hi'
        var_0 = dict(local_action=str_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'j+\x0b\t/s^;sp6O\r/9)-'
        var_0 = dict(shell=str_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
        var_2 = dict(action=str_0)
        var_3 = dict(local_action=module_args_parser_0)
        module_args_parser_1 = module_0.ModuleArgsParser(var_3)
        var_4 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'j+\x0b\t/s^;sp6O\r/9)-'
        var_0 = dict(shell=str_0)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse(str_0)
        var_2 = dict(action=str_0)
        var_3 = dict(local_action=module_args_parser_0)
        module_args_parser_1 = module_0.ModuleArgsParser(var_3)
        var_4 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'action'
        str_1 = 'connection'
        str_2 = 'args'
        str_3 = 'test'
        str_4 = 'local'
        str_5 = 'creates'
        str_6 = {str_0: str_2, str_5: str_2}
        str_7 = {str_4: str_3, str_0: str_1, str_1: str_4, str_2: str_6}
        module_args_parser_0 = module_0.ModuleArgsParser(str_7)
        bool_0 = True
        var_0 = module_args_parser_0.parse(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'shell wc'
        str_1 = 'shell echo'
        var_0 = dict(action=str_0, local_action=str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        bool_0 = True
        var_1 = module_args_parser_0.parse(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'echo hi'
        var_0 = dict(chdir=str_0)
        var_1 = [var_0]
        var_2 = dict(with_items=var_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_2)
        var_3 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_12():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        list_0 = None
        module_args_parser_1 = module_0.ModuleArgsParser(list_0)
        var_0 = dict(shell=list_0)
        module_args_parser_2 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_2.parse()
        var_2 = module_args_parser_0.parse()
    except BaseException:
        pass