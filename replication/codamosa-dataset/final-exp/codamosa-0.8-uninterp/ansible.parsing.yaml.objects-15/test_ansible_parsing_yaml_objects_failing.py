# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.format_map(dict_0)
        str_0 = 'call {0} on an instance'
        bytes_0 = b'T\xa6@uG\xdf\xb8\xdb\xd8\xae'
        set_0 = {ansible_vault_encrypted_unicode_0, var_0, ansible_unicode_0, bytes_0}
        ansible_base_y_a_m_l_object_0 = None
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        float_0 = 0.0
        tuple_0 = (bytes_0, set_0, ansible_vault_encrypted_unicode_0, float_0)
        var_1 = ansible_vault_encrypted_unicode_0.replace(str_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.isidentifier()
        var_1 = ansible_vault_encrypted_unicode_0.__lt__(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        list_0 = [ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0]
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = None
        float_1 = 4395.94099
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_1)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_vault_encrypted_unicode_0 = None
        list_0 = [ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_1.swapcase()
        var_1 = ansible_vault_encrypted_unicode_1.__reversed__()
        var_2 = ansible_vault_encrypted_unicode_1.islower()
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_3 = ansible_vault_encrypted_unicode_1.__add__(ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b"\x89\x11\xf8\x0e\x19\xd8\x1d\xb1U\x1a\n\xd5\x18\xad\xe4'"
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_0.lstrip()
        int_0 = 10240
        bytes_0 = b'\xbd8\x0e\x9a\x9e\xf8[\xd4\xd71aHBD\x1d\xc7+'
        tuple_0 = (int_0, bytes_0)
        var_2 = ansible_vault_encrypted_unicode_0.count(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'pvz9f'
        bytes_0 = b'\xf5e\t'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__repr__()
        var_1 = ansible_vault_encrypted_unicode_0.expandtabs()
        var_2 = ansible_vault_encrypted_unicode_0.zfill(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = None
        str_0 = 'V08n30q-~7/m4\x0bBe 5)'
        list_0 = [str_0, str_0]
        float_0 = -720.3171
        bytes_0 = b'\x922\x1d\x9b~\x867A\x85'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.partition(str_0)
        tuple_0 = (list_0, float_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_1.find(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "Noc-=~+\x0cCZ9E{- +Pa'Q"
        str_1 = "Fgn}f'.*~5)\t}}:"
        str_2 = 'cHPuziFtwf`p\r9Nd{3'
        list_0 = [str_2]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.join(str_1)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__reversed__()
        str_0 = 'u!\\&v_G]1*'
        var_1 = ansible_vault_encrypted_unicode_0.__le__(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        dict_0 = None
        var_3 = ansible_vault_encrypted_unicode_0.__ne__(list_0)
        str_1 = 'The Python 2 yum module is needed for this module. If you require Python 3 support use the `dnf` Ansible module instead.'
        var_4 = ansible_vault_encrypted_unicode_0.swapcase()
        var_5 = ansible_vault_encrypted_unicode_0.__eq__(dict_0)
        ansible_sequence_1 = module_0.AnsibleSequence()
        str_2 = 'PP.fh!*GdpCb'
        var_6 = ansible_vault_encrypted_unicode_0.__ge__(str_2)
        var_7 = ansible_vault_encrypted_unicode_0.swapcase()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_8 = ansible_vault_encrypted_unicode_1.ljust(ansible_vault_encrypted_unicode_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_0.lstrip()
        bytes_0 = b'\x81\xaa\xf3\xa9\xfc\xe2R7x\xf3T\xa8\xe7\xf9\x14D'
        int_0 = -108
        set_0 = {ansible_vault_encrypted_unicode_0, var_0, var_1}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_2 = ansible_vault_encrypted_unicode_1.isnumeric()
        list_0 = [int_0, bytes_0, bytes_0]
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'pQ#2Ul18gn61XInD09'
        dict_0 = {str_0: str_0}
        str_1 = "]w7d60'jCAtH(-"
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.replace(dict_0, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'XIiC)|0fXPP\x0cKS50-bJ['
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.swapcase()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        set_0 = set()
        str_1 = 'S)'
        dict_0 = {str_1: str_0, str_0: str_0}
        tuple_0 = (set_0, dict_0)
        var_1 = ansible_vault_encrypted_unicode_0.rindex(ansible_base_y_a_m_l_object_0, tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 7
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdecimal()
        list_0 = [int_0, int_0, int_0, int_0]
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.rjust(int_0, *list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 3046
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_1.__reversed__()
        str_0 = 'u!\\&v_G]1*'
        var_2 = ansible_vault_encrypted_unicode_1.__le__(str_0)
        float_0 = -297.0550844869885
        str_1 = '-3476'
        var_3 = ansible_vault_encrypted_unicode_1.__lt__(str_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_4 = ansible_vault_encrypted_unicode_2.capitalize()
        var_5 = ansible_vault_encrypted_unicode_1.is_encrypted()
        var_6 = ansible_vault_encrypted_unicode_2.isdigit()
        var_7 = ansible_vault_encrypted_unicode_2.isascii()
        dict_0 = None
        str_2 = 'The Python 2 yum module is needed for this module. If you require Python 3 support use the `dnf` Ansible module instead.'
        bytes_0 = b'\xff\xb8\xce:5\xd7\xf8\x17\xa7\xfc\xd3:j\x07\xd1\x8d\x1b6\xac'
        var_8 = ansible_vault_encrypted_unicode_1.swapcase()
        var_9 = ansible_vault_encrypted_unicode_1.__eq__(dict_0)
        ansible_sequence_1 = module_0.AnsibleSequence()
        int_1 = 0
        var_10 = ansible_vault_encrypted_unicode_2.center(int_1)
        var_11 = ansible_vault_encrypted_unicode_1.__ge__(str_2)
        var_12 = ansible_vault_encrypted_unicode_1.swapcase()
        var_13 = ansible_vault_encrypted_unicode_2.rindex(bytes_0, ansible_sequence_1)
    except BaseException:
        pass

def test_case_19():
    try:
        dict_0 = {}
        ansible_mapping_0 = module_0.AnsibleMapping()
        int_0 = -5245
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mod__(ansible_mapping_0)
        float_0 = -1169.18
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_1.__lt__(dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = -365.283
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__rmod__(float_0)
        var_1 = ansible_vault_encrypted_unicode_0.__int__(list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        ansible_sequence_0 = None
        float_0 = -414.0727
        str_0 = 'wV.x"9nHp+bJ'
        list_0 = [ansible_sequence_0, float_0, str_0]
        str_1 = ">]x64ApA,]d';lFh)"
        dict_0 = None
        dict_1 = {str_0: list_0, str_1: ansible_sequence_0, str_1: dict_0}
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_2 = '%*}>>}yM_8TF4v0'
        tuple_0 = (dict_1, ansible_mapping_0, str_2)
        str_3 = '}!c&}LdlKj_yI(Os-H+'
        set_0 = {str_3}
        float_1 = 1405.306045
        str_4 = None
        str_5 = None
        str_6 = 'is_Identifier'
        dict_2 = {str_4: str_4, str_4: ansible_sequence_0, str_5: str_4, str_6: float_0}
        list_1 = None
        tuple_1 = (float_1, dict_2, list_1)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_1)
        var_0 = ansible_vault_encrypted_unicode_0.index(tuple_0, set_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = -59.6098
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.isascii()
        var_1 = ansible_vault_encrypted_unicode_0.isdecimal()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        int_0 = 4153
        bool_0 = False
        var_2 = ansible_vault_encrypted_unicode_1.endswith(int_0, bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'ססמה'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.format()
    except BaseException:
        pass

def test_case_25():
    try:
        bool_0 = True
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        float_0 = -2458.36
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_1.__getslice__(bool_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = -296.4
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.capitalize()
        list_0 = []
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0)
        var_1 = ansible_vault_encrypted_unicode_0.__contains__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_27():
    try:
        tuple_0 = None
        str_0 = ''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(tuple_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '\tYa`h%xxdW'
        bytes_0 = b's\xa8\xb0\xaf\xd7'
        str_1 = '(\rMRt>}]%'
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_2 = "0a'n0Dgl_\r"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        ansible_mapping_1 = None
        list_0 = [str_1, str_0, ansible_mapping_1, bytes_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_1.__contains__(ansible_vault_encrypted_unicode_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        list_1 = None
        var_1 = ansible_vault_encrypted_unicode_2.__add__(list_1)
        ansible_mapping_2 = module_0.AnsibleMapping()
        var_2 = ansible_vault_encrypted_unicode_2.__radd__(ansible_mapping_2)
        var_3 = ansible_vault_encrypted_unicode_2.upper()
        int_0 = -1297
        var_4 = ansible_vault_encrypted_unicode_2.swapcase()
        float_0 = 1712.9256
        var_5 = ansible_vault_encrypted_unicode_2.replace(int_0, float_0)
    except BaseException:
        pass

def test_case_29():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.splitlines(ansible_sequence_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = False
        float_0 = -296.4
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.capitalize()
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        var_1 = ansible_vault_encrypted_unicode_0.__add__(list_0)
        var_2 = ansible_vault_encrypted_unicode_0.isdigit()
        str_0 = ''
        var_3 = ansible_vault_encrypted_unicode_0.replace(bool_0, ansible_vault_encrypted_unicode_0, str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = -2659
        set_0 = {int_0, int_0, int_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_1.is_encrypted()
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        list_0 = None
        var_1 = ansible_vault_encrypted_unicode_2.format_map(set_0)
        int_1 = -1297
        float_0 = 1712.9256
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_2 = ansible_vault_encrypted_unicode_2.__gt__(ansible_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_2.replace(int_1, float_0)
    except BaseException:
        pass

def test_case_32():
    try:
        dict_0 = {}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
        str_0 = 'Added integration for %s %s/%s'
        float_0 = 512.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.casefold()
        var_1 = ansible_vault_encrypted_unicode_0.rfind(str_0)
        str_1 = '\tHdCPJ.r.`!6]'
        str_2 = '+)'
        var_2 = ansible_vault_encrypted_unicode_0.find(ansible_vault_encrypted_unicode_0)
        str_3 = 'Jr&Tb}b|/\\[-{Oi\\'
        var_3 = ansible_vault_encrypted_unicode_0.isprintable()
        dict_1 = {str_1: str_1, str_2: str_1, str_2: str_1, str_3: str_2}
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_1)
    except BaseException:
        pass

def test_case_33():
    try:
        float_0 = 60.0
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.isalpha()
        var_1 = ansible_vault_encrypted_unicode_0.count(ansible_vault_encrypted_unicode_1)
        list_0 = [ansible_vault_encrypted_unicode_0, float_0, set_0]
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = -2659
        set_0 = {int_0, int_0, int_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_1.is_encrypted()
        str_0 = '\tYa`h%xxdW'
        str_1 = '(3S!$s} ?2)}hPN'
        str_2 = '(\rMRt>}]%'
        ansible_mapping_0 = module_0.AnsibleMapping()
        dict_0 = {str_2: str_1, str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = b'>K<\xa9\xba\x17\x82\xa0@'
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        list_0 = None
        var_1 = ansible_vault_encrypted_unicode_2.__add__(list_0)
        var_2 = ansible_vault_encrypted_unicode_1.__add__(ansible_mapping_0)
        str_3 = 'A\t\x0coPX,h.qf7PJQD*\r'
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_3 = ansible_vault_encrypted_unicode_3.__radd__(str_3)
        tuple_0 = (list_0,)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_4 = ansible_vault_encrypted_unicode_4.format_map(dict_0)
        var_5 = ansible_vault_encrypted_unicode_1.upper()
        var_6 = ansible_vault_encrypted_unicode_0.__eq__(set_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_7 = ansible_vault_encrypted_unicode_4.__gt__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = -2659
        set_0 = {int_0, int_0, int_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_1.is_encrypted()
        str_0 = '(\rMRt>}]%'
        set_1 = {str_0}
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        list_0 = None
        var_1 = ansible_vault_encrypted_unicode_2.__add__(list_0)
        var_2 = ansible_vault_encrypted_unicode_2.__radd__(ansible_mapping_0)
        var_3 = ansible_vault_encrypted_unicode_2.format_map(set_0)
        var_4 = ansible_vault_encrypted_unicode_2.upper()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_5 = ansible_vault_encrypted_unicode_3.__eq__(set_1)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_6 = ansible_vault_encrypted_unicode_2.__gt__(ansible_unicode_0)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_7 = ansible_vault_encrypted_unicode_1.__gt__(ansible_vault_encrypted_unicode_4)
        dict_0 = None
        var_8 = ansible_vault_encrypted_unicode_3.replace(ansible_vault_encrypted_unicode_2, dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = -2659
        set_0 = {int_0, int_0, int_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_1.is_encrypted()
        str_0 = '(\rMRt>}]%'
        set_1 = {str_0}
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        list_0 = None
        var_1 = ansible_vault_encrypted_unicode_2.__add__(list_0)
        bool_0 = False
        tuple_0 = (bool_0,)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_2 = ansible_vault_encrypted_unicode_0.__add__(ansible_vault_encrypted_unicode_3)
        list_1 = [set_1]
        var_3 = ansible_vault_encrypted_unicode_1.__radd__(list_1)
        bool_1 = False
        var_4 = ansible_vault_encrypted_unicode_0.format_map(bool_1)
    except BaseException:
        pass

def test_case_37():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        str_0 = 'FO'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_1.__le__(ansible_vault_encrypted_unicode_0)
        str_1 = ''
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_1 = ansible_vault_encrypted_unicode_2.__repr__()
        str_2 = '--list-tags'
        str_3 = "h'r$7"
        var_2 = ansible_vault_encrypted_unicode_1.rfind(str_3)
        list_0 = []
        str_4 = 'u|)3JT;u<b:?'
        dict_0 = {str_4: var_1, str_2: str_1}
        ansible_sequence_1 = module_0.AnsibleSequence(*list_0, **dict_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_0)
    except BaseException:
        pass