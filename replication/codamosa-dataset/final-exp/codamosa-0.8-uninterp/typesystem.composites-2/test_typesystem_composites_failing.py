# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        never_match_0 = module_0.NeverMatch()
        list_0 = None
        all_of_0 = module_0.AllOf(list_0)
        any_0 = never_match_0.validate(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\t%'
        field_0 = module_1.Field(title=str_0, default=str_0)
        str_1 = ''
        field_1 = module_1.Field(title=str_1, default=str_1)
        union_0 = field_1.__or__(field_0)
        bool_0 = True
        field_2 = module_1.Field(allow_null=bool_0)
        any_0 = field_1.get_default_value()
        list_0 = [field_2, field_2]
        dict_0 = {}
        all_of_0 = module_0.AllOf(list_0, **dict_0)
        any_1 = all_of_0.validate(union_0)
    except BaseException:
        pass

def test_case_3():
    try:
        any_0 = module_1.Any()
        not_0 = module_0.Not(any_0)
        bool_0 = False
        any_1 = not_0.validate(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        field_0 = None
        not_0 = module_0.Not(field_0)
        field_1 = module_1.Field(default=not_0)
        any_0 = module_1.Any()
        bool_0 = True
        list_0 = []
        all_of_0 = module_0.AllOf(list_0)
        any_1 = all_of_0.validate(field_1, bool_0)
        any_2 = [any_0]
        str_0 = 'OnQOe'
        one_of_0 = module_0.OneOf(any_2)
        any_3 = one_of_0.validate(any_2)
        field_2 = module_1.Field()
        dict_0 = {str_0: any_2, str_0: any_3, str_0: field_2}
        if_then_else_0 = module_0.IfThenElse(field_2, field_2, field_2, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0, any_0, any_0]
        str_0 = '[^Td!\x0cFo'
        one_of_0 = module_0.OneOf(any_1)
        any_2 = one_of_0.validate(any_1)
    except BaseException:
        pass

def test_case_6():
    try:
        field_0 = None
        not_0 = module_0.Not(field_0)
        any_0 = module_1.Any()
        list_0 = []
        all_of_0 = module_0.AllOf(list_0)
        any_1 = any_0.get_default_value()
        never_match_0 = module_0.NeverMatch()
        any_2 = [never_match_0, never_match_0, field_0, any_0]
        str_0 = 'OnQOe'
        one_of_0 = module_0.OneOf(any_2)
        any_3 = one_of_0.validate(any_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'allow_null'
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        dict_0 = {str_0: field_0}
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, field_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'allow_null'
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        dict_0 = {str_0: field_0}
        field_1 = None
        list_0 = [field_0, field_0, field_1, field_0]
        one_of_0 = module_0.OneOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'allow_null'
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        dict_0 = {str_0: field_0}
        not_0 = module_0.Not(field_0, **dict_0)
    except BaseException:
        pass