# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.ioloop as module_1
import tornado.httpclient as module_2
import datetime as module_3
import tornado.tcpclient as module_4

def test_case_0():
    try:
        str_0 = 'ct058Hc1` d%s0/n'
        h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
        str_1 = 'The ``ssl_options`` keyword argument may either be an\n        `ssl.SSLContext` object or a dictionary of keywords arguments\n        for `ssl.wrap_socket`\n        '
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_1)
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        bool_0 = True
        list_0 = []
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient(*list_0)
        str_3 = '&XBA$@oK\nLyE!'
        int_0 = 9
        selectable_0 = None
        str_4 = None
        dict_0 = {}
        str_5 = 'U\x0bw9a'
        str_6 = 'tornado.simple_httpclient'
        dict_1 = {str_4: dict_0, str_5: i_o_loop_1, str_6: bool_0, str_4: simple_async_h_t_t_p_client_0}
        h_t_t_p_request_0 = module_2.HTTPRequest(str_3, str_3, int_0, selectable_0, str_2, dict_1)
        callable_0 = None
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ct058Hc1` d%s0/n'
        h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        str_2 = h_t_t_p_timeout_error_0.__str__()
        str_3 = 'The ``ssl_options`` keyword argument may either be an\n        `ssl.SSLContext` object or a dictionary of keywords arguments\n        for `ssl.wrap_socket`\n        '
        h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_3)
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        i_o_loop_3 = i_o_loop_1.instance()
        h_t_t_p_stream_closed_error_2 = module_0.HTTPStreamClosedError(str_3)
        list_0 = []
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient(*list_0)
        simple_async_h_t_t_p_client_0.close()
        simple_async_h_t_t_p_client_1 = module_0.SimpleAsyncHTTPClient(*list_0)
        callable_0 = None
        str_4 = 'ZZ\t[r9p:7O[|DWw4\x0b4vr'
        str_5 = '&@D-\x0bBPN\x0bl&-:!'
        callable_1 = None
        bool_0 = False
        datetime_0 = None
        h_t_t_p_request_0 = module_2.HTTPRequest(str_4, str_0, str_4, datetime_0, bool_0, str_5, callable_1, bool_0)
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        h_t_t_p_headers_0 = None
        str_0 = 'n1CJkZk;O/foMI'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        dict_0 = {str_0: str_0, str_0: str_0}
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_0.instance()
        i_o_loop_3 = i_o_loop_1.instance()
        list_0 = []
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient(*list_0)
        str_1 = '&XBA$@oK\nLyE!'
        simple_async_h_t_t_p_client_0.close()
        callable_0 = None
        str_2 = ''
        str_3 = '&@D-\x0bBPN\x0bl&-:!'
        i_o_loop_1.initialize()
        str_4 = '91Sx'
        callable_1 = None
        bool_0 = False
        dict_1 = {str_1: simple_async_h_t_t_p_client_0, str_4: str_4, str_3: dict_0}
        h_t_t_p_request_0 = module_2.HTTPRequest(str_3, str_4, h_t_t_p_headers_0, str_1, str_2, str_4, str_2, str_1, str_4, callable_1, bool_0, dict_1)
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
        int_0 = 1503
        timedelta_0 = module_3.timedelta()
        t_c_p_client_0 = module_4.TCPClient()
        int_1 = 1276
        h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, timedelta_0, callable_0, int_0, t_c_p_client_0, int_1, int_0)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'ct058Hc1` d%s0/n'
        h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        str_1 = h_t_t_p_stream_closed_error_0.__str__()
        str_2 = h_t_t_p_timeout_error_0.__str__()
        h_t_t_p_headers_0 = None
        h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_0)
        dict_0 = {str_1: str_1, str_1: str_1}
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        list_0 = []
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient(*list_0)
        simple_async_h_t_t_p_client_0.close()
        callable_0 = None
        str_3 = '&@D-\x0bBPN\x0bl&-:!'
        i_o_loop_1.initialize()
        str_4 = '91Sx'
        callable_1 = None
        bool_0 = True
        str_5 = '_3Wi;MX2}'
        dict_1 = {str_5: simple_async_h_t_t_p_client_0, str_4: str_4, str_3: dict_0}
        h_t_t_p_request_0 = module_2.HTTPRequest(str_3, str_4, h_t_t_p_headers_0, str_0, str_0, str_4, str_0, str_0, str_4, callable_1, bool_0, dict_1)
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
        int_0 = 1096
        t_c_p_client_0 = module_4.TCPClient()
        int_1 = -216
        h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, i_o_loop_2, callable_0, int_0, t_c_p_client_0, int_1, int_1)
        h_t_t_p_connection_0.on_connection_close()
        t_c_p_client_1 = module_4.TCPClient()
        callable_2 = None
        h_t_t_p_connection_1 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_2, callable_0, int_1, t_c_p_client_1, int_1, int_1)
        h_t_t_p_connection_1.finish()
    except BaseException:
        pass