# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        list_0 = [iterator_0]
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0, **dict_0)
        list_1 = []
        schema_definitions_1 = module_0.SchemaDefinitions(*list_1)
        any_0 = schema_definitions_1.__getitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        schema_definitions_0.__delitem__(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        list_0 = []
        str_0 = '4NlK,VOVQzQ=2oK>'
        str_1 = "'"
        dict_0 = {str_0: int_0, str_1: str_1, str_1: str_0}
        schema_0 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = '&'
        field_0 = module_1.Field(title=str_0, default=schema_definitions_0)
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = None
        reference_0 = module_0.Reference(var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        str_0 = '5!\rK\\#>l('
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = None
        str_0 = '#c#bJ:pM*6>kBuV"U;'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(dict_0)
        str_1 = '.=v\x0bk[/e'
        str_2 = '\x0c3C'
        dict_1 = {str_0: any_0, str_1: dict_0, str_2: str_1}
        reference_1 = module_0.Reference(str_0, **dict_1)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -2325.4
        list_0 = [float_0, float_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Foo'
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(str_0)
        reference_0 = module_0.Reference(str_0)
        str_1 = '_target'
        field_0 = module_1.Field()
        field_1 = {str_0: field_0}
        var_0 = reference_0.definitions
        module_0.set_definitions(reference_0, var_0)
        var_1 = hasattr(reference_0, str_1)
        int_0 = schema_0.__len__()
        reference_1 = module_0.Reference(str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_1, schema_definitions_0)
        array_0 = module_1.Array(reference_1)
        var_2 = hasattr(reference_1, str_1)
        var_3 = reference_1.definitions
        module_0.set_definitions(array_0, var_3)
        any_0 = reference_1.serialize(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_1 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_1.__len__()
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_10():
    try:
        field_0 = None
        str_0 = 'H"e'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(field_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tuple_0 = ()
        str_0 = 'h'
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_0.__setitem__(tuple_0, tuple_0)
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        schema_definitions_1 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_1.__iter__()
        str_1 = '\ntB\x0bX4c{!vw)}H,oFgn'
        str_2 = 'jb^N{F`@i+{H1TxsJ'
        field_0 = module_1.Field(title=str_1, description=str_2)
        int_1 = schema_definitions_1.__len__()
        schema_definitions_2 = module_0.SchemaDefinitions()
        any_0 = schema_definitions_0.__getitem__(tuple_0)
        module_0.set_definitions(field_0, schema_definitions_2)
        iterator_1 = schema_definitions_2.__iter__()
        schema_metaclass_0 = None
        schema_definitions_0.__setitem__(tuple_0, schema_metaclass_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        str_0 = '\t\\N\tbROf1\rZ(f'
        dict_0 = {str_0: str_0, str_0: str_0}
        reference_0 = module_0.Reference(str_0, dict_0)
        any_0 = reference_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        str_0 = 'h'
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_0.__setitem__(tuple_0, tuple_0)
        list_0 = [dict_0]
        schema_0 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        schema_metaclass_0 = module_0.SchemaMetaclass(*list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'h]'
        list_0 = [str_0]
        schema_0 = module_0.Schema(*list_0)
        str_1 = schema_0.__repr__()
        dict_0 = {str_1: schema_0}
        schema_1 = module_0.Schema()
        int_0 = schema_1.__len__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_1 = schema_definitions_0.__len__()
        str_2 = 'jb^N{F`@i+\x0c{H1TxsJ'
        field_0 = module_1.Field(title=str_0, description=str_2)
        int_2 = schema_definitions_0.__len__()
        schema_definitions_1 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_1)
        iterator_0 = schema_definitions_1.__iter__()
        iterator_1 = schema_definitions_1.__iter__()
        bool_0 = schema_1.__eq__(schema_1)
        schema_2 = module_0.Schema()
        bool_1 = True
        reference_0 = module_0.Reference(str_1, dict_0)
        any_0 = reference_0.validate(bool_0, strict=bool_1)
    except BaseException:
        pass