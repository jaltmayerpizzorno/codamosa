# Automatically generated by Pynguin.
import pysnooper.tracer as module_0

def test_case_0():
    try:
        bool_0 = False
        var_0 = module_0.get_path_and_source_from_frame(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        bytes_0 = b'\xfdz\x01\x06\xa8x[\xed'
        var_0 = module_0.get_write_function(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '{F<}{\x0b^1*'
        tracer_0 = module_0.Tracer(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{indent}Call ended by exception'
        tracer_0 = module_0.Tracer()
        tracer_1 = module_0.Tracer(tracer_0, tracer_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        str_0 = '~iR<&\x0c<}c7*!\x0bIr2UAX'
        str_1 = 'D'
        dict_0 = {}
        tracer_0 = module_0.Tracer(list_0, str_0, str_1, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        unavailable_source_0 = module_0.UnavailableSource()
        dict_0 = {}
        list_0 = []
        list_1 = [dict_0]
        file_writer_0 = module_0.FileWriter(list_0, list_1)
        file_writer_1 = module_0.FileWriter(dict_0, file_writer_0)
        float_0 = 697.8813
        tracer_0 = module_0.Tracer(file_writer_1, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -2065.73351
        list_0 = []
        int_0 = 1
        file_writer_0 = module_0.FileWriter(list_0, int_0)
        var_0 = file_writer_0.write(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'TPI:|sc'
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        bool_0 = False
        bool_1 = True
        file_writer_0 = module_0.FileWriter(bool_1, tracer_0)
        var_1 = file_writer_0.write(str_0)
        var_2 = tracer_0.__exit__(str_0, bool_0, file_writer_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tracer_0 = module_0.Tracer()
        dict_0 = {}
        var_0 = tracer_0.__call__(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tracer_0 = module_0.Tracer()
        complex_0 = None
        str_0 = 'V`}bU\x0cqRMU'
        var_0 = tracer_0.__exit__(complex_0, str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        float_0 = 1032.9404
        dict_0 = None
        file_writer_0 = module_0.FileWriter(float_0, dict_0)
        int_0 = 208
        var_1 = file_writer_0.write(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        var_1 = tracer_0.__enter__()
        dict_0 = {}
        var_2 = tracer_0.__call__(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        unavailable_source_0 = module_0.UnavailableSource()
        bytes_0 = b'\x83\xe3\xdaO\x1e\x91\xd1\xf1\xe2\x8b'
        var_1 = tracer_0.__exit__(bytes_0, tracer_0, bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\x0cl3'
        dict_0 = {str_0: str_0}
        int_0 = -1508
        bytes_0 = b'\xc8@w\x0bW\xd0\xf5Y\xb5'
        tracer_0 = module_0.Tracer(str_0, dict_0, int_0, bytes_0, dict_0, int_0)
    except BaseException:
        pass