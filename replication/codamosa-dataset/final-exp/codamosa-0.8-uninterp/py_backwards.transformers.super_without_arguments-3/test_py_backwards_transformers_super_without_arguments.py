# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.transformers.super_without_arguments as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = 'sluper()'
    var_0 = module_0.parse(str_0)
    super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(var_0)
    var_1 = super_without_arguments_transformer_0.visit(var_0)

def test_case_2():
    bytes_0 = b'%\xa3D(k\xa6a\xf3\xb2\xd9'
    list_0 = [bytes_0, bytes_0, bytes_0]
    call_0 = module_2.Call(*list_0)
    a_s_t_0 = module_2.AST()
    super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(a_s_t_0)
    call_1 = super_without_arguments_transformer_0.visit_Call(call_0)
    super_without_arguments_transformer_1 = module_1.SuperWithoutArgumentsTransformer(a_s_t_0)

def test_case_3():
    str_0 = 'super(self)'
    var_0 = module_0.parse(str_0)
    str_1 = 'super().foo()'
    var_1 = module_0.parse(str_1)
    str_2 = 'super(self).foo()'
    var_2 = module_0.parse(str_2)
    str_3 = 'self.super()'
    var_3 = module_0.parse(str_3)
    str_4 = 'cls.super()'
    var_4 = module_0.parse(str_4)
    super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(var_0)
    var_5 = super_without_arguments_transformer_0.visit(var_0)
    var_6 = str(var_0)