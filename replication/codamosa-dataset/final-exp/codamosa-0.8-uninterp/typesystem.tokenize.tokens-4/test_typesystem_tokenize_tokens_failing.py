# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        int_0 = -2729
        list_0 = [int_0, int_0]
        int_1 = -232
        token_0 = module_0.Token(int_0, int_1, int_0)
        token_1 = token_0.lookup(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = None
        list_0 = [float_0, float_0]
        int_0 = -2219
        list_1 = [list_0]
        int_1 = -3202
        str_0 = 'tICtc$s'
        token_0 = module_0.Token(list_0, int_1, int_1, str_0)
        bool_0 = token_0.__eq__(int_0)
        list_2 = [float_0, list_0, float_0]
        int_2 = -2041
        str_1 = 'ZdB5btF"nqZ#-Vz'
        token_1 = module_0.Token(list_2, int_0, int_0, str_1)
        bool_1 = token_1.__eq__(list_0)
        token_2 = module_0.Token(list_2, int_2, int_0)
        token_3 = token_2.lookup_key(list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        int_0 = -243
        token_0 = module_0.Token(list_0, int_0, int_0)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_token_0 = module_0.DictToken()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 0
        str_0 = '\x0b!8!"?~i'
        token_0 = module_0.Token(str_0, int_0, int_0, str_0)
        var_0 = token_0 == str_0
        var_1 = token_0 == token_0
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'value'
        str_1 = 'start_index'
        str_2 = 'end_index'
        str_3 = 'content'
        str_4 = {str_1: str_1}
        int_0 = 0
        int_1 = 1
        var_0 = {str_0: str_4, str_1: int_0, str_2: int_1, str_3: str_1}
        scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0)
        dict_token_0 = module_0.DictToken(**var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'value'
        str_1 = 'start_index'
        int_0 = -446
        token_0 = module_0.Token(str_1, int_0, int_0, str_0)
        str_2 = 'end_index'
        int_1 = 2
        int_2 = 999
        scalar_token_0 = module_0.ScalarToken(str_2, int_1, int_2)
        str_3 = token_0.__repr__()
        str_4 = {scalar_token_0: str_1}
        int_3 = 1
        scalar_token_1 = module_0.ScalarToken(str_2, int_0, int_3, str_3)
        str_5 = token_0.__repr__()
        any_0 = scalar_token_1.__hash__()
        var_0 = {str_0: str_4, str_1: int_0, str_2: int_3, str_1: str_1}
        bool_0 = token_0.__eq__(int_3)
        any_1 = scalar_token_1.__hash__()
        dict_token_0 = module_0.DictToken(**var_0)
        var_1 = dict_token_0.value
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1
        str_0 = '0gf 62~A2[0mi('
        list_token_0 = module_0.ListToken(str_0, int_0, int_0, str_0)
        scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0, str_0)
        var_0 = list_token_0 == scalar_token_0
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = {}
        int_0 = 0
        int_1 = 10
        list_0 = [int_0, var_0]
        int_2 = 1444
        int_3 = -1787
        list_token_0 = module_0.ListToken(int_1, int_2, int_3)
        token_0 = list_token_0.lookup_key(list_0)
    except BaseException:
        pass