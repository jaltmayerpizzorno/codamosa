# Automatically generated by Pynguin.
import builtins as module_0
import dataclasses_json.mm as module_1
import marshmallow.fields as module_2

def test_case_0():
    try:
        bytearray_0 = module_0.bytearray()
        float_0 = 737.435978
        int_0 = 1807
        float_1 = 3846.1
        union_field_0 = module_1._UnionField(float_0, int_0, float_1)
        schema_f_0 = module_1.SchemaF()
    except BaseException:
        pass

def test_case_1():
    try:
        schema_f_0 = module_1.SchemaF()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        str_0 = 'decoder'
        bytearray_0 = module_0.bytearray()
        var_0 = module_1.build_type(dict_0, str_0, dict_0, str_0, bytearray_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -669.563
        float_1 = -1488.0
        str_0 = '}'
        str_1 = "\n    This is a tricky situation where we need to check both the annotated\n    type info (which is usually a type from `typing`) and check the\n    value's type directly using `type()`.\n\n    If the type_arg is a generic we can use the annotated type, but if the\n    type_arg is a typevar we need to extract the reified type information\n    hence the check of `is_dataclass(vs)`\n    "
        str_2 = '>Z6J>ud5'
        str_3 = '5bkMZn[IZ.pzn'
        str_4 = 'N4K^0Fsi\t%j.='
        str_5 = ")q4@F}'UE5ei;y@B"
        dict_0 = {str_2: float_1, str_3: float_0, str_4: float_1, str_5: str_3}
        var_0 = module_1.schema(str_0, str_1, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'YC'
        str_1 = ''
        str_2 = '<pHNcrGV'
        str_3 = 'T'
        dict_0 = {str_1: str_1, str_2: str_0, str_0: str_2, str_3: str_0}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        bytearray_0 = module_0.bytearray()
        str_4 = 'u4g\ro%0t3K/J6Q\r?5'
        type_0 = module_1.build_schema(str_0, list_0, bytearray_0, str_4)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        iso_field_0 = module_1._IsoField(default=dict_0)
        str_0 = 'vB`B"CbPD9zAMsn3'
        var_0 = iso_field_0.serialize(str_0, str_0)
        type_0 = None
        str_1 = ''
        bool_0 = True
        bool_1 = False
        list_0 = [iso_field_0]
        timestamp_field_0 = module_1._TimestampField(missing=type_0, dump_default=str_1, default=var_0, required=bool_0, dump_only=bool_1, error_messages=list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        iso_field_0 = module_1._IsoField()
        bool_0 = False
        iso_field_1 = module_1._IsoField()
        dict_0 = None
        constant_0 = None
        timestamp_field_0 = module_1._TimestampField(dump_only=bool_0, error_messages=dict_0, metadata=constant_0)
        bool_1 = True
        iso_field_2 = module_1._IsoField(missing=bool_0, dump_default=bool_0, default=iso_field_1, load_only=bool_1)
        str_0 = '2019-11-02T11:36:20.158213'
        var_0 = iso_field_0.deserialize(str_0)
        str_1 = '))G]N\r\n_w.'
        var_1 = iso_field_2.serialize(str_1, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        iso_field_0 = module_1._IsoField()
        str_0 = '2019-11-02T11:36:20.158213'
        var_0 = iso_field_0.deserialize(str_0)
        bool_0 = False
        timestamp_field_0 = module_1._TimestampField(load_default=var_0, dump_default=var_0, default=var_0, allow_none=bool_0, load_only=bool_0)
        int_0 = -2086
        int_1 = 11
        dict_0 = {str_0: int_1, str_0: int_0}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        bytearray_0 = module_0.bytearray()
        list_1 = None
        optional_0 = None
        timestamp_field_1 = module_1._TimestampField(missing=int_1, default=iso_field_0, allow_none=bool_0, load_only=bool_0, metadata=optional_0)
        union_field_0 = module_1._UnionField(list_0, bytearray_0, list_1)
        constant_0 = module_2.Constant(var_0)
        var_1 = timestamp_field_1.deserialize(list_0, str_0)
    except BaseException:
        pass