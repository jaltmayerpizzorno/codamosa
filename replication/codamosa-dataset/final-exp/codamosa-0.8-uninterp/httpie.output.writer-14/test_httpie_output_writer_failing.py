# Automatically generated by Pynguin.
import requests.models as module_0
import httpie.context as module_1
import httpie.output.writer as module_2
import argparse as module_3
import typing as module_4
import httpie.models as module_5
import httpie.output.streams as module_6

def test_case_0():
    try:
        response_0 = module_0.Response()
        environment_0 = module_1.Environment()
        bool_0 = True
        var_0 = module_2.write_message(response_0, environment_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_stream_0 = None
        prepared_request_0 = module_0.PreparedRequest()
        environment_0 = module_1.Environment()
        namespace_0 = module_3.Namespace()
        var_0 = module_2.write_message(prepared_request_0, environment_0, namespace_0)
        text_i_o_0 = module_4.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        bool_0 = True
        var_1 = module_2.write_stream(base_stream_0, text_i_o_1, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_stream_0 = None
        text_i_o_0 = module_4.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        bool_0 = True
        var_0 = module_2.write_stream(base_stream_0, text_i_o_1, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        namespace_0 = module_3.Namespace(**dict_0)
        environment_0 = module_1.Environment(**dict_0)
        prepared_request_0 = module_0.PreparedRequest()
        bool_0 = False
        var_0 = module_2.build_output_stream_for_message(namespace_0, environment_0, prepared_request_0, bool_0, bool_0)
        environment_1 = module_1.Environment()
        list_0 = [environment_1]
        h_t_t_p_message_0 = module_5.HTTPMessage(list_0)
        base_stream_0 = module_6.BaseStream(h_t_t_p_message_0)
        response_0 = module_0.Response()
        float_0 = 1952.912
        dict_1 = {}
        environment_2 = module_1.Environment(float_0, **dict_1)
        namespace_1 = module_3.Namespace()
        var_1 = module_2.write_message(response_0, environment_2, namespace_1)
        namespace_2 = module_3.Namespace(**dict_1)
        bool_1 = False
        var_2 = module_2.build_output_stream_for_message(namespace_2, environment_2, prepared_request_0, bool_0, bool_1)
        text_i_o_0 = module_4.TextIO()
        bool_2 = True
        var_3 = module_2.write_stream_with_colors_win_py3(base_stream_0, text_i_o_0, bool_2)
    except BaseException:
        pass

def test_case_4():
    try:
        namespace_0 = module_3.Namespace()
        environment_0 = module_1.Environment()
        prepared_request_0 = module_0.PreparedRequest()
        bool_0 = True
        dict_0 = {bool_0: environment_0}
        h_t_t_p_message_0 = module_5.HTTPMessage(dict_0)
        float_0 = 4672.824
        base_stream_0 = module_6.BaseStream(h_t_t_p_message_0, float_0)
        text_i_o_0 = None
        base_stream_1 = module_6.BaseStream(h_t_t_p_message_0)
        bool_1 = True
        var_0 = module_2.write_stream_with_colors_win_py3(base_stream_0, text_i_o_0, bool_1)
    except BaseException:
        pass

def test_case_5():
    try:
        environment_0 = module_1.Environment()
        namespace_0 = module_3.Namespace()
        tuple_0 = module_2.get_stream_type_and_kwargs(environment_0, namespace_0)
    except BaseException:
        pass

def test_case_6():
    try:
        prepared_request_0 = module_0.PreparedRequest()
        environment_0 = module_1.Environment()
        namespace_0 = module_3.Namespace()
        str_0 = 'For every `--no-OPTION` in `no_options`, set `args.OPTION` to\n        its default value. This allows for un-setting of options, e.g.,\n        specified in config.\n\n        '
        dict_0 = {str_0: str_0}
        var_0 = module_2.write_message(prepared_request_0, environment_0, namespace_0, dict_0, environment_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'abc'
        str_0 = 'g7\nq'
        bool_0 = True
        var_0 = module_2.write_stream(bytes_0, str_0, bool_0)
    except BaseException:
        pass