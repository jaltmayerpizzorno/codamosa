# Automatically generated by Pynguin.
import requests.models as module_0
import httpie.uploads as module_1
import httpie.cli.dicts as module_2
import typing as module_3
import requests_toolbelt.multipart.encoder as module_4

def test_case_0():
    try:
        prepared_request_0 = module_0.PreparedRequest()
        bool_0 = False
        var_0 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        request_data_dict_0 = module_2.RequestDataDict()
        list_0 = []
        i_o_0 = module_3.IO(*list_0)
        var_0 = i_o_0.__enter__()
        int_0 = 1
        var_1 = module_1.prepare_request_body(request_data_dict_0, var_0, int_0, var_0)
        prepared_request_0 = module_0.PreparedRequest()
        bool_0 = True
        var_2 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        multipart_encoder_0 = module_4.MultipartEncoder(dict_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        str_0 = '\n    Prints the exception traceback should one occur, as well as other\n    information useful for debugging HTTPie itself and for reporting bugs.\n\n    '
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        multipart_request_data_dict_0 = module_2.MultipartRequestDataDict(**dict_1)
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0)
        tuple_1 = ()
        var_0 = None
        var_1 = module_1.prepare_request_body(multipart_encoder_0, dict_0, var_0)
        request_data_dict_0 = module_2.RequestDataDict()
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(tuple_1, request_data_dict_0)
        multipart_encoder_1 = None
        chunked_multipart_upload_stream_1 = module_1.ChunkedMultipartUploadStream(multipart_encoder_1)
        chunked_multipart_upload_stream_2 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        request_data_dict_1 = module_2.RequestDataDict()
        var_2 = multipart_encoder_0.read()
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        multipart_encoder_0 = module_4.MultipartEncoder(dict_0)
        str_0 = '\n    Prints the exception traceback should one occur, as well as other\n    information useful for debugging HTTPie itself and for reporting bugs.\n\n    '
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = multipart_encoder_0.to_string()
        multipart_request_data_dict_0 = module_2.MultipartRequestDataDict(**dict_1)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        prepared_request_0 = module_0.PreparedRequest()
        int_0 = 1752
        var_1 = module_1.prepare_request_body(multipart_encoder_0, int_0, multipart_request_data_dict_0, prepared_request_0)
        bool_0 = True
        var_2 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        list_1 = [list_0, bool_0]
        request_data_dict_0 = module_2.RequestDataDict()
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(list_1, request_data_dict_0)
        multipart_encoder_0 = module_4.MultipartEncoder(chunked_upload_stream_0)
    except BaseException:
        pass