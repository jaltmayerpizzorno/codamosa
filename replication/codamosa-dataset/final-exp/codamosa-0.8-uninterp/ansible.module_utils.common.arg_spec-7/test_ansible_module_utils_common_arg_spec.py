# Automatically generated by Pynguin.
import ansible.module_utils.common.arg_spec as module_0

def test_case_0():
    pass

def test_case_1():
    dict_0 = None
    validation_result_0 = module_0.ValidationResult(dict_0)

def test_case_2():
    str_0 = 'str'
    var_0 = dict(type=str_0)
    str_1 = 'int'
    var_1 = dict(type=str_1)
    var_2 = dict(name=var_0, age=var_1)
    argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_2)

def test_case_3():
    dict_0 = {}
    list_0 = []
    float_0 = 0.1
    argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0, float_0)
    var_0 = argument_spec_validator_0.validate(dict_0, *list_0)

def test_case_4():
    var_0 = {}
    argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_0)
    var_1 = {}
    var_2 = argument_spec_validator_0.validate(var_1)

def test_case_5():
    dict_0 = {}
    list_0 = []
    float_0 = -28.207438617679415
    argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0, float_0, float_0)
    var_0 = argument_spec_validator_0.validate(dict_0, *list_0)

def test_case_6():
    str_0 = 'Process aliases from an argument_spec including warnings and deprecations.\n\n    Modify ``parameters`` by adding a new key for each alias with the supplied\n    value from ``parameters``.\n\n    If a list is provided to the alias_warnings parameter, it will be filled with tuples\n    (option, alias) in every case where both an option and its alias are specified.\n\n   If a list is provided to alias_deprecations, it will be populated with dictionaries,\n    each containing deprecation information for each alias found in argument_spec.\n\n    :param argument_spec: Dictionary of parameters, their type, and valid values.\n    :type argument_spec: dict\n\n    :param parameters: Dictionary of parameters.\n    :type parameters: dict\n\n    :param alias_warnings:\n    :type alias_warnings: list\n\n    :paramalias_deprecations:\n    :type alias_deprecations: list\n    '
    dict_0 = {}
    float_0 = -36.29423190896959
    argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0, float_0)
    dict_1 = {str_0: float_0, str_0: str_0}
    var_0 = argument_spec_validator_0.validate(dict_1)

def test_case_7():
    str_0 = 'age'
    str_1 = 'type'
    str_2 = 'str'
    str_3 = {str_1: str_2}
    str_4 = 'int'
    str_5 = {str_1: str_4}
    str_6 = {str_4: str_3, str_0: str_5}
    str_7 = [str_6]
    str_8 = 'mutually_exclusive'
    str_9 = 'required_together'
    str_10 = 'required_one_of'
    str_11 = 'required_if'
    str_12 = 'required_by'
    var_0 = None
    var_1 = {str_8: var_0, str_9: var_0, str_10: var_0, str_11: var_0, str_12: var_0}
    module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*str_7, **var_1)
    str_13 = 'bo'
    str_14 = '42'
    str_15 = {str_9: str_13, str_0: str_14}
    var_2 = module_argument_spec_validator_0.validate(str_15)

def test_case_8():
    str_0 = 'name'
    str_1 = 'age'
    str_2 = 'type'
    str_3 = 'str'
    str_4 = {str_2: str_3}
    str_5 = 'int'
    str_6 = {str_2: str_5}
    str_7 = {str_0: str_4, str_1: str_6}
    str_8 = 'bo'
    str_9 = {str_0: str_8, str_1: str_7}
    argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_7)
    var_0 = argument_spec_validator_0.validate(str_9)
    var_1 = var_0.validated_parameters
    var_2 = var_1[str_0]
    var_3 = var_1[str_1]

def test_case_9():
    str_0 = 'bo'
    str_1 = '42'
    var_0 = dict(name=str_0, age=str_1)
    var_1 = None
    var_2 = None
    var_3 = None
    var_4 = None
    str_2 = 'str'
    var_5 = dict(type=str_2)
    str_3 = 'int'
    var_6 = dict(type=str_3)
    var_7 = dict(name=var_5, age=var_6)
    argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_7, var_6, var_1, var_2, var_3, var_4)
    var_8 = argument_spec_validator_0.validate(var_0)
    var_9 = var_8.error_messages
    var_10 = print(var_9)

def test_case_10():
    str_0 = 'name'
    str_1 = 'age'
    str_2 = 'legacy'
    str_3 = 'nested'
    str_4 = 'type'
    str_5 = 'str'
    str_6 = {str_4: str_5}
    str_7 = 'int'
    str_8 = {str_4: str_7}
    str_9 = 'required'
    str_10 = 'aliases'
    str_11 = 'bool'
    bool_0 = False
    str_12 = 'value'
    str_13 = [str_12]
    var_0 = {str_4: str_11, str_9: bool_0, str_10: str_13}
    str_14 = 'options'
    str_15 = 'dict'
    str_16 = 'first'
    str_17 = 'second'
    str_18 = {str_4: str_5}
    str_19 = 'elements'
    str_20 = 'list'
    str_21 = {str_4: str_20, str_19: str_5}
    str_22 = {str_16: str_18, str_17: str_21}
    str_23 = {str_4: str_15, str_14: str_22}
    var_1 = {str_0: str_6, str_1: str_8, str_2: var_0, str_3: str_23}
    str_24 = 'bo'
    str_25 = '42'
    str_26 = {str_0: str_24, str_1: str_25, str_3: str_14}
    argument_spec_validator_0 = module_0.ArgumentSpecValidator(var_1)
    var_2 = argument_spec_validator_0.validate(str_26)