# Automatically generated by Pynguin.
import tornado.log as module_0
import logging as module_1

def test_case_0():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = log_formatter_0.format(log_formatter_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'G+[Z<voX(QjCMWq7oV0o'
        bool_0 = None
        log_formatter_0 = module_0.LogFormatter(str_0, bool_0)
        module_0.enable_pretty_logging()
        str_1 = 'Q#s'
        log_formatter_1 = module_0.LogFormatter(str_1)
        module_0.enable_pretty_logging()
        bytes_0 = b'R\x81\xef\xfa\xbe\x89\xc2\x95\x94\xa7\x9b\xcex\x86\xf9pa\x97'
        str_2 = log_formatter_1.format(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 722
        list_0 = [int_0, int_0]
        module_0.enable_pretty_logging(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0}
        module_0.define_logging_options(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        optional_0 = None
        int_0 = 1622
        logger_0 = module_1.Logger(int_0)
        module_0.enable_pretty_logging(optional_0, logger_0)
        str_0 = 'P7i( WThUu+-+h'
        log_formatter_0 = module_0.LogFormatter(str_0)
        str_1 = log_formatter_0.format(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        str_1 = 'S:jeKZoP\\'
        log_formatter_0 = module_0.LogFormatter(str_0, str_1)
        logger_0 = None
        module_0.enable_pretty_logging(logger_0)
        str_2 = "tUg'XC<3hj'\\"
        str_3 = ',G!c$'
        log_formatter_1 = module_0.LogFormatter(str_3)
        dict_0 = {}
        log_formatter_2 = module_0.LogFormatter()
        str_4 = 'tt[NV$p{_eRHFdy[3tT'
        str_5 = 'ubi,RY,V'
        log_formatter_3 = module_0.LogFormatter(str_4, str_3, str_5, dict_0)
        str_6 = log_formatter_2.format(str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = 'X~n'
        str_1 = {str_0: str_0, str_0: str_0}
        var_0 = module_1.makeLogRecord(str_1)
        str_2 = log_formatter_0.format(var_0)
    except BaseException:
        pass

def test_case_8():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = 'X~n'
        str_1 = {str_0: str_0, str_0: str_0}
        var_0 = module_1.makeLogRecord(str_1)
        str_2 = log_formatter_0.format(var_0)
        str_3 = 'exc_info'
        str_4 = 'error'
        str_5 = {str_3: str_1, str_4: str_0, str_3: str_4}
        var_1 = module_1.makeLogRecord(str_5)
        str_6 = log_formatter_0.format(var_1)
    except BaseException:
        pass