# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        distribution_fact_collector_0 = None
        dict_0 = {distribution_fact_collector_0: distribution_fact_collector_0, distribution_fact_collector_0: distribution_fact_collector_0, distribution_fact_collector_0: distribution_fact_collector_0, distribution_fact_collector_0: distribution_fact_collector_0}
        distribution_0 = module_0.Distribution(dict_0)
        bytes_0 = b'\x18\x06\xf5;\xbaAE\xb8&\x8eH\xbd\xfa\x12X\x84|>\x00'
        dict_1 = {distribution_0: bytes_0, distribution_fact_collector_0: dict_0}
        var_0 = module_0.get_uname(dict_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'jo'
        distribution_0 = module_0.Distribution(str_0)
        bool_0 = True
        set_0 = {str_0}
        str_1 = '*xYe+=C&/'
        int_0 = -196
        set_1 = {bool_0, bool_0, distribution_0}
        distribution_files_0 = module_0.DistributionFiles(set_1)
        var_0 = distribution_files_0.parse_distribution_file_OpenWrt(set_0, str_1, set_0, int_0)
        distribution_fact_collector_0 = None
        list_0 = [str_0, str_1, distribution_0]
        var_1 = distribution_files_0.parse_distribution_file_NA(distribution_fact_collector_0, int_0, list_0, distribution_files_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'S\xdeu\x88\x93\xcd\xf1I\x08\xc8\\ex\xd5\x7f\xc2\x81'
        int_0 = 1500
        dict_0 = {bytes_0: bytes_0, int_0: bytes_0, int_0: bytes_0, bytes_0: bytes_0}
        set_0 = set()
        dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0}
        distribution_files_0 = module_0.DistributionFiles(dict_1)
        var_0 = distribution_files_0.parse_distribution_file_Slackware(bytes_0, dict_0, set_0, dict_0)
        bool_0 = False
        bool_1 = False
        distribution_files_1 = module_0.DistributionFiles(bool_1)
        set_1 = set()
        float_0 = -498.79564
        dict_2 = {}
        float_1 = -1760.78
        distribution_files_2 = module_0.DistributionFiles(float_1)
        var_1 = distribution_files_2.process_dist_files()
        var_2 = distribution_files_2.parse_distribution_file_Mandriva(distribution_files_1, set_1, float_0, dict_2)
        distribution_files_3 = module_0.DistributionFiles(bool_0)
        distribution_0 = module_0.Distribution(distribution_files_3)
        dict_3 = {bytes_0: distribution_files_3}
        bytes_1 = b'\x92w<\xb5\x86(M\xa6m%P\x90^'
        distribution_files_4 = module_0.DistributionFiles(bytes_1)
        var_3 = distribution_files_4.parse_distribution_file_ClearLinux(bytes_0, distribution_0, dict_3, distribution_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        bytes_0 = b'h[\x85\xfcf\xc9'
        bool_1 = False
        distribution_fact_collector_0 = None
        distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_fact_collector_0)
        str_0 = ''
        distribution_files_0 = module_0.DistributionFiles(str_0)
        var_0 = distribution_files_0.parse_distribution_file_ClearLinux(bool_0, bytes_0, bool_1, distribution_fact_collector_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'<A\x19\x94\xc0xx\xb9\x92j\xdf,\xa9b\xf0\x99'
        bool_0 = False
        set_0 = {bool_0}
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, tuple_0]
        distribution_files_0 = module_0.DistributionFiles(list_0)
        var_0 = distribution_files_0.parse_distribution_file_CentOS(bytes_0, bool_0, set_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        distribution_files_0 = None
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        dict_0 = {distribution_files_1: distribution_files_1}
        distribution_0 = module_0.Distribution(dict_0)
        var_0 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 65.0
        distribution_0 = module_0.Distribution(float_0)
        str_0 = '\x0cG%dTDJ`xr;._'
        distribution_files_0 = module_0.DistributionFiles(float_0)
        set_0 = {str_0, distribution_files_0, distribution_files_0, distribution_files_0}
        bool_0 = None
        set_1 = set()
        distribution_files_1 = module_0.DistributionFiles(set_1)
        var_0 = distribution_files_1.parse_distribution_file_ClearLinux(str_0, distribution_files_0, set_0, bool_0)
        str_1 = 'u7`rDJHZ!ev'
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1, str_1: str_1}
        distribution_1 = module_0.Distribution(dict_0)
        var_1 = distribution_1.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'XU+8t[dQk'
        str_1 = 's}y2HvZwB~Jr><W"BG'
        bool_0 = True
        distribution_files_0 = module_0.DistributionFiles(bool_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_1, distribution_files_0)
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        var_0 = distribution_0.get_distribution_facts()
        distribution_1 = module_0.Distribution(str_0)
        var_1 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_8():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        int_0 = -347
        tuple_0 = ()
        set_0 = {tuple_0, int_0}
        complex_0 = None
        distribution_files_0 = module_0.DistributionFiles(complex_0)
        list_0 = [int_0, int_0, int_0, set_0]
        bool_0 = False
        distribution_files_1 = module_0.DistributionFiles(bool_0)
        var_0 = distribution_files_1.parse_distribution_file_Flatcar(tuple_0, int_0, list_0, tuple_0)
        tuple_1 = ()
        list_1 = [tuple_1, tuple_1, tuple_1, tuple_1]
        distribution_0 = module_0.Distribution(list_1)
        var_1 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 511
        tuple_0 = (int_0,)
        distribution_0 = module_0.Distribution(tuple_0)
        var_0 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        distribution_files_0 = module_0.DistributionFiles(dict_0)
        list_0 = [distribution_files_0, distribution_files_0, distribution_files_0, distribution_files_0]
        distribution_0 = module_0.Distribution(list_0)
        var_0 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'X+8gt[dQk'
        str_1 = 's}y2HvZwB~Jr><W"BG'
        bool_0 = True
        distribution_files_0 = module_0.DistributionFiles(bool_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_1, distribution_files_0)
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        var_0 = distribution_0.get_distribution_facts()
        distribution_1 = module_0.Distribution(str_0)
        bytes_0 = b'\xf8\x15\x03Y\x9e\xcb|@\x9e'
        str_2 = '@fdzrQN53'
        float_0 = 1423.7984890497746
        dict_0 = {bytes_0: bool_0, float_0: distribution_files_0, bool_0: str_0}
        str_3 = 'debian'
        var_1 = distribution_fact_collector_0.collect(str_3)
        var_2 = distribution_files_0.parse_distribution_file_NA(bytes_0, str_2, float_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ' %s'
        dict_0 = {}
        distribution_fact_collector_0 = module_0.DistributionFactCollector(dict_0)
        bool_0 = False
        str_1 = '|'
        float_0 = 1948.0
        set_0 = {str_0, bool_0, str_0, float_0}
        bytes_0 = b'\xcfx\t\x84R\xf45i\xff\xf9\xa7D\x8ai\x940\xf7:'
        bool_1 = False
        tuple_0 = ()
        bool_2 = True
        distribution_0 = module_0.Distribution(bool_2)
        distribution_1 = module_0.Distribution(set_0)
        distribution_files_0 = module_0.DistributionFiles(distribution_1)
        var_0 = distribution_files_0.parse_distribution_file_OpenWrt(bool_1, tuple_0, distribution_fact_collector_0, distribution_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector(dict_0)
        distribution_files_1 = module_0.DistributionFiles(float_0)
        tuple_1 = None
        var_1 = distribution_files_1.parse_distribution_file_Alpine(bytes_0, str_1, distribution_fact_collector_1, tuple_1)
        var_2 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'X63Fx2zE:;\r@,<T\tN'
        bool_0 = False
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        list_0 = [bool_0]
        tuple_0 = (bool_0, distribution_fact_collector_0, list_0)
        str_1 = 'K38^n!_['
        distribution_fact_collector_1 = module_0.DistributionFactCollector()
        int_0 = 1896
        str_2 = 'k(8s1hMA:+3O8FF'
        int_1 = -1715
        float_0 = 0.001
        distribution_files_0 = module_0.DistributionFiles(float_0)
        var_0 = distribution_files_0.parse_distribution_file_Slackware(int_0, str_2, int_1, str_1)
        distribution_0 = module_0.Distribution(distribution_fact_collector_1)
        distribution_files_1 = module_0.DistributionFiles(distribution_0)
        var_1 = distribution_files_1.parse_distribution_file_Coreos(str_0, tuple_0, tuple_0, str_1)
        str_3 = '`Y'
        distribution_1 = module_0.Distribution(str_3)
        var_2 = distribution_1.get_distribution_SMGL()
        var_3 = distribution_1.get_distribution_AIX()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '!j7RZ\\CL0N{p'
        float_0 = -1936.684
        int_0 = 232
        distribution_files_0 = module_0.DistributionFiles(int_0)
        float_1 = -3869.7177
        distribution_0 = module_0.Distribution(str_0)
        bool_0 = True
        set_0 = {float_1, str_0, float_0, bool_0}
        bool_1 = True
        tuple_0 = (set_0, bool_1, set_0)
        var_0 = module_0.get_uname(distribution_files_0, tuple_0)
    except BaseException:
        pass