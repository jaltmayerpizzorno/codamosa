# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0
import collections as module_1

def test_case_0():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = 'Np'
        dict_0 = {str_0: var_0, str_0: var_0}
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_1 = module_0.find_unresolved_requires(dict_0, unresolved_fact_dep_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = 's)T\rljj\tX-|m01Dqg`'
        base_fact_collector_0 = module_0.BaseFactCollector(str_0)
        list_0 = [str_0, str_0, var_0]
        int_0 = None
        tuple_0 = (base_fact_collector_0, int_0)
        tuple_1 = (list_0, tuple_0)
        var_1 = module_0.resolve_requires(tuple_1, tuple_1)
    except BaseException:
        pass

def test_case_2():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        bool_0 = False
        base_fact_collector_0 = module_0.BaseFactCollector(bool_0)
        var_0 = module_0.collector_classes_from_gather_subset(collector_not_found_error_0, base_fact_collector_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '--9fisB/\x0c<vG'
        set_0 = None
        dict_0 = {str_0: set_0}
        var_0 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = 's)T\rljj\tX-|m01Dqg`'
        base_fact_collector_0 = module_0.BaseFactCollector(str_0)
        var_1 = base_fact_collector_0.collect()
        str_1 = None
        str_2 = '\n        many modules deal with files, this encapsulates common\n        options that the file module accepts such that it is directly\n        available to all modules and they can share code.\n\n        Allows to overwrite the path/dest module argument by providing path.\n        '
        dict_0 = {str_1: var_1, str_0: str_0, str_0: str_0, str_2: var_1}
        dict_1 = {}
        var_2 = module_0.resolve_requires(dict_0, dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect(dict_0)
        var_1 = module_0.collector_classes_from_gather_subset()
        bool_1 = False
        var_2 = module_0.collector_classes_from_gather_subset(bool_1)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_0 = [unresolved_fact_dep_0, unresolved_fact_dep_0, var_1]
        base_fact_collector_1 = module_0.BaseFactCollector(list_0, bool_0)
        var_3 = base_fact_collector_1.collect_with_namespace()
        unresolved_fact_dep_1 = module_0.UnresolvedFactDep()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        str_0 = 'uptime_seconds'
        var_4 = module_0.find_unresolved_requires(str_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ')12lvw\nxmpG'
        str_1 = 'collector-B'
        str_2 = 'collector-C'
        str_3 = {str_1}
        str_4 = {str_2}
        str_5 = {str_0}
        str_6 = {str_0: str_3, str_1: str_4, str_2: str_5}
        var_0 = module_0.tsort(str_6)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '1'
        str_1 = '2'
        str_2 = '3'
        str_3 = '4'
        str_4 = '5'
        str_5 = '6'
        str_6 = '7'
        str_7 = '8'
        str_8 = '9'
        str_9 = '10'
        str_10 = '11'
        str_11 = [str_3, str_6]
        var_0 = set(str_11)
        str_12 = [str_2, str_7]
        var_1 = set(str_12)
        str_13 = [str_7, str_8]
        var_2 = set(str_13)
        str_14 = [str_6, str_8]
        var_3 = set(str_14)
        str_15 = [str_10]
        var_4 = set(str_15)
        str_16 = [str_4]
        var_5 = set(str_16)
        str_17 = [str_10]
        var_6 = set(str_17)
        str_18 = [str_10]
        var_7 = set(str_18)
        str_19 = [str_9]
        var_8 = set(str_19)
        str_20 = [str_10]
        var_9 = set(str_20)
        var_10 = set()
        var_11 = {str_0: var_0, str_1: var_1, str_2: var_2, str_3: var_3, str_4: var_4, str_5: var_5, str_6: var_6, str_7: var_7, str_8: var_8, str_9: var_9, str_10: var_10}
        var_12 = module_0.tsort(var_11)
        int_0 = 0
        var_13 = [x[int_0] for x in var_12]
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'F,\x0cY!9d\'\n"p=1tQ<B'
        str_1 = 'c'
        str_2 = 'd'
        str_3 = [str_0, str_1]
        str_4 = [str_0, str_2]
        var_0 = module_0.get_collector_names(str_3, str_4, str_3)
        var_1 = set(str_0)
        str_5 = 'all'
        str_6 = [str_5]
        var_2 = module_0.get_collector_names(str_4, str_6, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        dict_0 = {}
        list_0 = None
        defaultdict_0 = module_1.defaultdict()
        base_fact_collector_0 = module_0.BaseFactCollector(defaultdict_0)
        int_0 = 200
        var_0 = module_0.get_collector_names(dict_0, list_0, base_fact_collector_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        str_0 = "Vt8'sybE4Je\x0cX+AW7yC"
        str_1 = '<'
        str_2 = "D{$\x0cTvMT'ehE"
        base_fact_collector_0 = module_0.BaseFactCollector(str_1, str_2)
        var_0 = base_fact_collector_0.collect_with_namespace()
        str_3 = 'j$S.`Ym=<z~\x0cPXM\x0b{'
        dict_0 = {str_0: str_2, str_3: str_0}
        var_1 = module_0.select_collector_classes(dict_0, dict_0)
        var_2 = module_0.find_collectors_for_platform(collector_not_found_error_0, collector_not_found_error_0)
    except BaseException:
        pass

def test_case_11():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect()
        set_0 = set()
        list_0 = [base_fact_collector_0, base_fact_collector_0]
        str_0 = '!D\x0bUsvc]\r\\c{D'
        var_1 = module_0.collector_classes_from_gather_subset(list_0, str_0, set_0)
        var_2 = module_0.collector_classes_from_gather_subset(set_0, set_0)
        var_3 = module_0.get_collector_names(str_0, str_0, str_0)
        var_4 = module_0.find_collectors_for_platform(set_0, base_fact_collector_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -392.585
        float_1 = -1490.7947
        tuple_0 = (float_0, float_1)
        set_0 = set()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_0 = []
        var_0 = module_0.collector_classes_from_gather_subset(tuple_0, set_0, unresolved_fact_dep_0, list_0, unresolved_fact_dep_0)
    except BaseException:
        pass