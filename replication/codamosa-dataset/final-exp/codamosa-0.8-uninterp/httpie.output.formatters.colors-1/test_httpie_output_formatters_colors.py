# Automatically generated by Pynguin.
import httpie.output.formatters.colors as module_0
import httpie.context as module_1

def test_case_0():
    solarized256_style_0 = module_0.Solarized256Style()

def test_case_1():
    str_0 = '\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '
    optional_0 = module_0.get_lexer(str_0)

def test_case_2():
    str_0 = 'j*Rk+% Xpp}/E4h(G'
    optional_0 = module_0.get_lexer(str_0, str_0)

def test_case_3():
    str_0 = '\tW<pI\x0b/da$D5\tr+~->i'
    optional_0 = module_0.get_lexer(str_0, str_0, str_0)

def test_case_4():
    str_0 = 'application/json'
    optional_0 = module_0.get_lexer(str_0)

def test_case_5():
    str_0 = 'applicatipn/json-rpc'
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    optional_0 = module_0.get_lexer(str_0, simplified_h_t_t_p_lexer_0, str_0)

def test_case_6():
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    environment_0 = module_1.Environment()
    dict_0 = None
    var_0 = environment_0.log_error(dict_0)
    str_0 = 'format_options'
    dict_1 = {str_0: str_0, str_0: environment_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, simplified_h_t_t_p_lexer_0, **dict_1)
    simplified_h_t_t_p_lexer_1 = module_0.SimplifiedHTTPLexer()
    var_1 = environment_0.__str__()
    str_1 = '--no-unsorted'
    type_0 = color_formatter_0.get_style_class(str_1)

def test_case_7():
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    environment_0 = module_1.Environment()
    str_0 = 'format_options'
    dict_0 = {str_0: str_0, str_0: environment_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, simplified_h_t_t_p_lexer_0, **dict_0)
    simplified_h_t_t_p_lexer_1 = module_0.SimplifiedHTTPLexer()
    str_1 = 'TCsa#~xVb/'
    optional_0 = color_formatter_0.get_lexer_for_body(str_1, str_0)

def test_case_8():
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    environment_0 = module_1.Environment()
    str_0 = 'format_options'
    dict_0 = {str_0: str_0, str_0: environment_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, simplified_h_t_t_p_lexer_0, **dict_0)
    str_1 = "/o\x0b6AO}?'.x\r"
    str_2 = color_formatter_0.format_body(str_1, str_1)

def test_case_9():
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    environment_0 = module_1.Environment()
    dict_0 = None
    var_0 = environment_0.log_error(dict_0)
    str_0 = 'format_options'
    dict_1 = {str_0: str_0, str_0: environment_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, simplified_h_t_t_p_lexer_0, **dict_1)
    str_1 = 'Nd'
    type_0 = color_formatter_0.get_style_class(str_1)
    str_2 = "_Q'[Q:z3b).h"
    type_1 = color_formatter_0.get_style_class(str_2)
    str_3 = '^[a-z][a-z0-9.+-]*://'
    str_4 = '2'
    optional_0 = color_formatter_0.get_lexer_for_body(str_3, str_4)

def test_case_10():
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()
    environment_0 = module_1.Environment()
    str_0 = 'format_options'
    dict_0 = {str_0: str_0, str_0: environment_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, simplified_h_t_t_p_lexer_0, **dict_0)
    str_1 = '\x0b!~s9\\A[-blB'
    str_2 = color_formatter_0.format_headers(str_1)
    type_0 = color_formatter_0.get_style_class(str_2)
    str_3 = '#C#JF\x0b/'
    str_4 = 'applicMtion/json'
    str_5 = color_formatter_0.format_body(str_2, str_4)
    optional_0 = module_0.get_lexer(str_3, color_formatter_0)