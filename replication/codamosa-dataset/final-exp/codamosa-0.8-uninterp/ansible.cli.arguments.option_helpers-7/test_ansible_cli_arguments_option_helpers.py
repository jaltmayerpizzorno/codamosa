# Automatically generated by Pynguin.
import argparse as module_0
import ansible.cli.arguments.option_helpers as module_1

def test_case_0():
    pass

def test_case_1():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_connect_options(argument_parser_0)

def test_case_2():
    var_0 = module_1.version()

def test_case_3():
    str_0 = 'wp+1{@9'
    var_0 = module_1.version(str_0)

def test_case_4():
    str_0 = 'test'
    var_0 = module_1.create_base_parser(str_0)
    var_1 = module_1.add_runas_options(var_0)

def test_case_5():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_fork_options(argument_parser_0)
    str_0 = ''
    var_1 = argument_parser_0.parse_args(str_0)

def test_case_6():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_inventory_options(argument_parser_0)

def test_case_7():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_output_options(argument_parser_0)
    var_1 = []
    var_2 = argument_parser_0.parse_args(var_1)
    str_0 = '--one-line'
    str_1 = [str_0]
    var_3 = argument_parser_0.parse_args(str_1)

def test_case_8():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_vault_options(argument_parser_0)
    str_0 = '--vault-password-file'
    str_1 = '/foo'
    str_2 = [str_0, str_1]
    var_1 = argument_parser_0.parse_args(str_2)

def test_case_9():
    str_0 = 'test'
    str_1 = 'resolve'
    argument_parser_0 = module_0.ArgumentParser(str_0, str_0, str_1)
    var_0 = module_1.add_check_options(argument_parser_0)
    var_1 = []
    var_2 = argument_parser_0.parse_args(var_1)
    str_2 = '--syntax-check'
    str_3 = [str_2]
    var_3 = argument_parser_0.parse_args(str_3)
    str_4 = '--check'
    str_5 = [str_4]
    var_4 = argument_parser_0.parse_args(str_5)
    str_6 = '--diff'
    str_7 = [str_6]
    var_5 = argument_parser_0.parse_args(str_7)

def test_case_10():
    namespace_0 = module_0.Namespace()
    str_0 = 'test'
    var_0 = []
    var_1 = module_1.ensure_value(namespace_0, str_0, var_0)
    int_0 = 1
    var_2 = module_1.ensure_value(namespace_0, str_0, int_0)

def test_case_11():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_meta_options(argument_parser_0)
    str_0 = '--force-handlers'
    str_1 = '--flush-cache'
    str_2 = [str_0, str_1]
    var_1 = argument_parser_0.parse_args(str_2)
    var_2 = vars(var_1)

def test_case_12():
    argument_parser_0 = module_0.ArgumentParser()
    var_0 = module_1.add_async_options(argument_parser_0)
    str_0 = '-P'
    str_1 = '5'
    str_2 = '-B'
    str_3 = '10'
    str_4 = [str_0, str_1, str_2, str_3]
    var_1 = argument_parser_0.parse_args(str_4)

def test_case_13():
    str_0 = 'r'
    var_0 = module_1.create_base_parser(str_0)
    var_1 = module_1.add_subset_options(var_0)

def test_case_14():
    int_0 = -2359
    str_0 = 'u\x0cS/h8;t$'
    var_0 = module_1.create_base_parser(str_0)
    var_1 = module_1.version()
    float_0 = 833.01
    bytes_0 = b'*\xf7\x8e\xf0\x8d'
    int_1 = 0
    var_2 = module_1.unfrack_path(int_1)
    str_1 = 'd'
    var_3 = module_1.maybe_unfrack_path(str_1)
    prepend_list_action_0 = module_1.PrependListAction(int_1, bytes_0, float_0)
    set_0 = {int_0, float_0}
    str_2 = 'uo!lwBk/r'
    list_0 = None
    unrecognized_argument_0 = module_1.UnrecognizedArgument(list_0, float_0, str_2)
    bytes_1 = b'\x9a\xc6_\xbd\x18\xfcZS%cgW\tJ\xd1'
    str_3 = ';\t7\x0cHQ~\tp'
    argument_parser_0 = module_0.ArgumentParser(str_3)
    argument_parser_1 = module_0.ArgumentParser(bytes_1, argument_parser_0, set_0)
    var_4 = module_1.add_basedir_options(argument_parser_1)