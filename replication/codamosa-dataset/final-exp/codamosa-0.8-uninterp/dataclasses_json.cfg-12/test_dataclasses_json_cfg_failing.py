# Automatically generated by Pynguin.
import dataclasses_json.cfg as module_0
import marshmallow.fields as module_1
import dataclasses_json.undefined as module_2

def test_case_0():
    try:
        global_config_0 = module_0._GlobalConfig()
        none_type_0 = None
        list_0 = [global_config_0]
        dict_0 = module_0.config(none_type_0, encoder=list_0)
        bool_0 = True
        optional_0 = None
        field_0 = module_1.Field(missing=global_config_0, default=global_config_0, required=bool_0, error_messages=optional_0, metadata=global_config_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 's;jz:t4P'
        dict_0 = {str_0: str_0, str_0: str_0}
        dict_1 = module_0.config(dict_0, undefined=str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Qm{0|n|)o*<aqZ\nU(!C'
        dict_0 = module_0.config(encoder=str_0, undefined=str_0, field_name=str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0]
        list_1 = [dict_0, dict_0, list_0]
        str_0 = 'O\n4ncv!Y@t6'
        str_1 = 'n{#{'
        dict_1 = {str_1: str_1, str_0: dict_0, str_1: list_1, str_0: list_0}
        field_0 = module_1.Field(missing=list_0, attribute=list_1, **dict_1)
        list_2 = [field_0, dict_1]
        str_2 = 'sB\tJVN8d(O\x0cEOQuqR'
        str_3 = ">HIS1'\t="
        dict_2 = {str_0: str_2, str_0: str_3}
        int_0 = -1736
        global_config_0 = module_0._GlobalConfig()
        dict_3 = module_0.config(encoder=list_2, decoder=dict_2, mm_field=field_0, letter_case=int_0, field_name=str_2, exclude=global_config_0)
        global_config_1 = module_0._GlobalConfig()
        str_4 = ' detected when decoding '
        dict_4 = {str_3: str_0, str_4: str_4}
        exclude_0 = module_0.Exclude(**dict_4)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '7;~hksa7);:Z'
        int_0 = 2176
        dict_0 = module_0.config(mm_field=int_0, undefined=str_0, field_name=str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        undefined_0 = module_2.Undefined.RAISE
        dict_0 = module_0.config(undefined=undefined_0)
        str_0 = 'LXN`U"$['
        str_1 = '). Value cannot be deserialized properly.'
        bool_0 = True
        bool_1 = False
        field_0 = module_1.Field(dump_default=str_0, default=undefined_0, required=bool_0, dump_only=bool_1)
        validation_error_0 = field_0.make_error(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'exclude'
        int_0 = 2189
        dict_0 = module_0.config(mm_field=int_0, undefined=str_0, field_name=str_0)
        bool_0 = False
        str_1 = 'B'
        global_config_0 = module_0._GlobalConfig()
        str_2 = '!]Y{*#|8"lvQCN(_ePBZ'
        dict_1 = {str_0: str_0, str_0: str_0, str_1: str_2}
        field_0 = module_1.Field(missing=str_0, default=str_0, required=bool_0, error_messages=dict_1)
        bool_1 = True
        bool_2 = True
        dict_2 = None
        field_1 = module_1.Field(dump_default=global_config_0, default=dict_1, data_key=str_2, attribute=str_1, validate=dict_0, required=bool_1, dump_only=bool_2, error_messages=dict_1, **dict_2)
    except BaseException:
        pass