# Automatically generated by Pynguin.
import tornado.netutil as module_0
import socket as module_1
import ssl as module_2

def test_case_0():
    try:
        int_0 = -827
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'finally'
        int_0 = -1165
        socket_0 = module_0.bind_unix_socket(str_0, int_0, int_0)
        resolver_0 = module_0.Resolver()
        callable_0 = module_0.add_accept_handler(socket_0, resolver_0)
    except BaseException:
        pass

def test_case_2():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ">hh qT'I7!2\ro"
        str_1 = 'Malformed WebSocket request received'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
        resolver_0 = module_0.Resolver(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        blocking_resolver_0 = module_0.BlockingResolver()
    except BaseException:
        pass

def test_case_5():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        socket_0 = module_0.bind_unix_socket(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'hp2`f)E'
        int_0 = -1476
        socket_0 = module_0.bind_unix_socket(str_0, int_0, int_0)
        str_1 = 'If true (default), ctrl-c raises a KeyboardInterrupt exception.  This prints a stack trace but cannot interrupt certain operations.  If false, the process is more reliably killed, but does not print a stack trace.'
        str_2 = 'V}heX6W`s/H{b}Eg'
        str_3 = "(4(a0'P8~\x0b"
        dict_0 = {str_0: int_0, str_1: int_0, str_2: int_0, str_3: str_1}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -1788
        address_family_0 = module_1.AddressFamily.AF_ATMSVC
        list_0 = [int_0, address_family_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1975
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'f#IYk\t'
        int_0 = 138
        str_1 = 'DQOK%'
        bool_0 = module_0.is_valid_ip(str_1)
        default_executor_resolver_0 = module_0.DefaultExecutorResolver()
        resolver_0 = module_0.Resolver()
        resolver_0.close()
        list_0 = default_executor_resolver_0.resolve(str_0, int_0)
        socket_0 = module_0.bind_unix_socket(str_0)
        address_family_0 = module_1.AddressFamily.AF_IRDA
        list_1 = module_0.bind_sockets(int_0, str_1, address_family_0, int_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '@L&oS8R\x0cB<Ls7k'
        socket_0 = module_0.bind_unix_socket(str_0)
        s_s_l_context_0 = None
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'If true (default), ctrl-c raises a KeyboardInterrupt exception.  This prints a stack trace but cannot interrupt certain operations.  If false, the process is more reliably killed, but does not print a stack trace.'
        bool_0 = module_0.is_valid_ip(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        bool_0 = module_0.is_valid_ip(str_0)
        list_0 = []
        default_executor_resolver_0 = module_0.DefaultExecutorResolver(*list_0)
        str_1 = 'oEi%vz\x0bISsViW7~'
        socket_0 = module_0.bind_unix_socket(str_1)
        int_0 = 1299
        list_1 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "'GB$F\t]duu[q:,$WDL4T"
        int_0 = -2118
        resolver_0 = module_0.Resolver()
        awaitable_0 = resolver_0.resolve(str_0, int_0)
        socket_0 = module_0.bind_unix_socket(str_0)
        str_1 = ''
        list_0 = module_0.bind_sockets(int_0, str_1, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        str_1 = '~LSEA^Ts|]qM(_2DW'
        int_0 = 1750
        address_family_0 = module_1.AddressFamily.AF_AX25
        list_0 = [str_1, str_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        awaitable_0 = override_resolver_0.resolve(str_0, int_0, address_family_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ':;tUnj\r.'
        dict_0 = {}
        s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
        int_0 = -816
        socket_0 = module_0.bind_unix_socket(str_0, int_0)
        bool_0 = module_0.is_valid_ip(str_0)
        list_0 = []
        default_executor_resolver_0 = module_0.DefaultExecutorResolver(*list_0)
        socket_1 = module_0.bind_unix_socket(str_0)
        int_1 = 1975
        s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
        list_1 = default_executor_resolver_0.resolve(str_0, int_1)
        default_executor_resolver_1 = module_0.DefaultExecutorResolver()
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_1, s_s_l_context_1, str_0)
        int_2 = 0
        list_2 = module_0.bind_sockets(int_2)
        var_0 = s_s_l_context_0.load_default_certs()
        s_s_l_context_2 = module_2.SSLContext()
        s_s_l_context_3 = module_0.ssl_options_to_context(dict_0)
        str_1 = '\rf\tCx0xo'
        dict_1 = {str_0: str_0, str_1: s_s_l_context_0}
        s_s_l_socket_1 = module_0.ssl_wrap_socket(socket_1, dict_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '.'
        socket_0 = module_0.bind_unix_socket(str_0)
    except BaseException:
        pass