# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        bytes_0 = b'NMm\x8e\x10\xa9\xbe\xe3w\x9d\xbcb\xaeE\xc8\xb7'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.isascii()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_1 = ansible_vault_encrypted_unicode_1.split()
        ansible_base_y_a_m_l_object_1 = module_0.AnsibleBaseYAMLObject()
        str_0 = '.*'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_2.lower()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_1)
        var_3 = ansible_vault_encrypted_unicode_3.isspace()
        var_4 = ansible_vault_encrypted_unicode_3.__float__()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xa7t\xb9\x7fX/\x02An\xa9\xda\xffv\xc1\xbc\xf7'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2.0
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Qr6('
        list_0 = [str_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        set_0 = set()
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'i'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        bytes_1 = b'Y\xb4a\xd2\xe9\x0c\x05\xc7BD0\xd5\x1b\xf1\x1f:'
        str_0 = '8IA?V`z (Eku$Zo'
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(bytes_1, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        str_1 = 'Z|*>@Zp(lhYP5Fgl'
        dict_0 = {str_0: str_0, str_1: str_1}
        bytes_0 = b'\x90\xd0\xffu\xea\xd8*\xc7\x9cT\x9a\xdd'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mod__(dict_0)
        dict_1 = None
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_1)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -1613.03
        float_1 = -807.306914
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_1)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(float_0)
        bool_0 = True
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [bool_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_1.__ne__(ansible_unicode_0)
        var_2 = ansible_vault_encrypted_unicode_1.isascii()
        dict_0 = {}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_3 = ansible_vault_encrypted_unicode_1.isidentifier()
        var_4 = ansible_vault_encrypted_unicode_2.islower()
        var_5 = ansible_vault_encrypted_unicode_2.center(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -503.4467
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.format_map(float_0)
        int_0 = 80
        ansible_vault_encrypted_unicode_1 = None
        dict_0 = {int_0: int_0, ansible_vault_encrypted_unicode_1: ansible_vault_encrypted_unicode_1}
        str_0 = 'SelectorError'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_2.endswith(ansible_vault_encrypted_unicode_1, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        ansible_unicode_0 = None
        dict_0 = {ansible_unicode_0: ansible_unicode_0}
        ansible_vault_encrypted_unicode_0 = None
        list_0 = [ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0]
        int_0 = 208
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_1.format_map(int_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_1 = ansible_vault_encrypted_unicode_2.__gt__(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '=4%_s(m2\x0cPVAhT]'
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.title()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_1.lstrip()
        str_1 = '/xW'
        tuple_0 = ()
        list_0 = None
        var_2 = ansible_vault_encrypted_unicode_0.startswith(tuple_0, list_0)
        list_1 = [str_1, str_1, var_1, str_1]
        var_3 = ansible_vault_encrypted_unicode_1.index(str_1, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_sequence_0 = module_0.AnsibleSequence()
        float_0 = 2954.88
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.partition(float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'cQ.L\x0bMXl8g SiNY6?xP'
        list_0 = [str_0, str_0, str_0, str_0]
        ansible_unicode_0 = None
        str_1 = 'J8`,~Xu]`%eD4|jgyz;_'
        str_2 = "\t ??GG'a<"
        dict_0 = {str_1: str_1, str_0: list_0, str_2: str_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        list_1 = [str_2, list_0, ansible_unicode_0, list_0, ansible_unicode_0, list_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.rindex(ansible_unicode_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 1115
        bytes_0 = b'>[\x88=\xea'
        list_0 = [bytes_0, bytes_0, bytes_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__radd__(int_0)
        str_0 = 'not found'
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.split()
        var_3 = ansible_vault_encrypted_unicode_1.find(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = []
        str_0 = '^g\n\to'
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        list_1 = [ansible_base_y_a_m_l_object_0, str_0, list_0, list_0]
        dict_0 = {ansible_base_y_a_m_l_object_0: list_1, ansible_base_y_a_m_l_object_0: list_0, str_0: str_0}
        tuple_0 = (dict_0, ansible_base_y_a_m_l_object_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_14():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = '4E;RRyZ5]aD5Qj\x0cc'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        var_1 = ansible_vault_encrypted_unicode_0.index(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_15():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        bool_0 = False
        ansible_unicode_0 = module_0.AnsibleUnicode()
        bool_1 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.count(ansible_sequence_0, bool_0, ansible_unicode_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [bool_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_unicode_0)
        bytes_0 = b'\xcf\x1cKS\x05\x81\xb1\x8dS8\xefJ'
        var_1 = ansible_vault_encrypted_unicode_0.replace(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [bool_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_unicode_0)
        dict_0 = {}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_0.rpartition(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_19():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        float_0 = -1045.9806
        str_0 = 'HiddenUsersList'
        dict_0 = {str_0: str_0}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        list_0 = [ansible_sequence_0]
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.join(float_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'i'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        bytes_1 = b'Y\xb4a\xd2\xe9\x0c\x05\xc7BD0\xd5\x1b\xf1\x1f:'
        int_0 = 1830
        var_0 = ansible_vault_encrypted_unicode_0.ljust(int_0)
        str_0 = '8IA?V`z (Eku$Zo'
        var_1 = ansible_vault_encrypted_unicode_0.__getslice__(bytes_1, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'definitely encrypted {}'
        int_0 = 2792
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'Yp+_z\'TbGv.J~"UJnK^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'Qr6('
        str_1 = "5T{F=6+\x0bpq->'P"
        list_0 = [str_1]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.__add__(str_0)
        list_1 = [str_1, var_1, ansible_vault_encrypted_unicode_0]
        var_2 = ansible_vault_encrypted_unicode_0.encode(list_1)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 903
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        bytes_0 = b'\x95\x12u'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_1.format(**dict_0)
        var_1 = ansible_vault_encrypted_unicode_0.__contains__(int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        list_0 = []
        float_0 = 1107.3
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = True
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [bool_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        list_1 = [bool_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.format(*list_1)
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(ansible_unicode_0)
        dict_0 = {}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        ansible_unicode_1 = module_0.AnsibleUnicode(*list_1)
        str_0 = None
        set_0 = set()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_2 = ansible_vault_encrypted_unicode_3.replace(str_0, ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = True
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.rstrip()
        list_0 = [bool_0, bool_0, ansible_sequence_0]
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'>[\x88=\xea'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        bytes_1 = b'\x95\xd9@1\x1d\xf7\xc5\xc2\x1c\xa4\xc8@\x04\rl\x80\x14\x0bZ='
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(bytes_1)
        str_0 = 'not found'
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        str_1 = ''
        var_2 = ansible_vault_encrypted_unicode_0.__radd__(str_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_3 = ansible_vault_encrypted_unicode_0.__repr__()
        bool_0 = True
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_4 = ansible_vault_encrypted_unicode_2.rfind(bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = -931
        bool_0 = True
        int_1 = 899
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_1)
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(int_0, bool_0)
        tuple_0 = ()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_1 = ansible_vault_encrypted_unicode_1.ljust(ansible_unicode_0)
    except BaseException:
        pass

def test_case_30():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        list_0 = [ansible_mapping_0, ansible_mapping_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        float_0 = -1083.59945
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_1.split()
        var_1 = ansible_vault_encrypted_unicode_0.isidentifier()
        str_0 = 'm/WC1MK}"IK'
        dict_0 = {}
        tuple_0 = (dict_0, ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_2 = ansible_vault_encrypted_unicode_2.__eq__(list_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_3 = ansible_vault_encrypted_unicode_0.islower()
        var_4 = ansible_vault_encrypted_unicode_3.__add__(str_0)
        int_0 = -3835
        var_5 = ansible_vault_encrypted_unicode_3.__le__(int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        float_0 = -1613.03
        float_1 = -807.306914
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_1)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(float_0)
        bool_0 = True
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [bool_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_1.__ne__(ansible_unicode_0)
        var_2 = ansible_vault_encrypted_unicode_1.isascii()
        dict_0 = {}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        bytes_0 = b'\xcf\x1cKS\x05\x81\xb1\x8dS8\xefJ'
        var_3 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        var_4 = ansible_vault_encrypted_unicode_2.islower()
        var_5 = ansible_vault_encrypted_unicode_1.replace(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 1115
        bytes_0 = b'>[\x88=\xea'
        list_0 = [bytes_0, bytes_0, bytes_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        var_1 = ansible_vault_encrypted_unicode_0.__radd__(int_0)
        str_0 = 'not found'
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        dict_0 = {int_0: ansible_vault_encrypted_unicode_1, str_0: list_0, ansible_vault_encrypted_unicode_1: var_2}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_3 = ansible_vault_encrypted_unicode_1.__radd__(ansible_base_y_a_m_l_object_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        dict_1 = {}
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_4 = ansible_vault_encrypted_unicode_3.lstrip()
        ansible_base_y_a_m_l_object_1 = module_0.AnsibleBaseYAMLObject()
        var_5 = ansible_vault_encrypted_unicode_0.split(str_0, int_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_6 = ansible_vault_encrypted_unicode_0.replace(ansible_vault_encrypted_unicode_2, ansible_sequence_0)
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = None
        int_0 = -2312
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(bool_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'definitely encrypted {}'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bytes_0 = b'}\xb4\x94\xa4\xdcj\x1b\xb2\x14\xc0\xf8\xc9\xa2\x06\xef\xecC\xdaB'
        var_0 = ansible_vault_encrypted_unicode_0.find(ansible_vault_encrypted_unicode_0, bytes_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 1088
        list_0 = [int_0, int_0, int_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__unicode__()
        bytes_0 = b'\xac\xda\x8ez\xce\x15\xbd'
        list_1 = [bytes_0, bytes_0, bytes_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        bytes_1 = b'\x95\xd9@1\x1d\xf7\xc5\xc2\x1c\xa4\xc8@\x04\rl\x80\x14\x0bZ='
        var_1 = ansible_vault_encrypted_unicode_1.__ne__(bytes_1)
        var_2 = ansible_vault_encrypted_unicode_1.__radd__(int_0)
        str_0 = 'not found'
        var_3 = ansible_vault_encrypted_unicode_1.is_encrypted()
        str_1 = ''
        var_4 = ansible_vault_encrypted_unicode_1.__radd__(str_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_5 = ansible_vault_encrypted_unicode_1.__repr__()
        dict_0 = {str_0: list_1, ansible_vault_encrypted_unicode_2: var_3}
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        str_2 = 'W&X '
        var_6 = ansible_vault_encrypted_unicode_2.__ge__(str_2)
        str_3 = 'Yb'
        var_7 = ansible_vault_encrypted_unicode_1.__radd__(str_3)
        var_8 = ansible_vault_encrypted_unicode_3.rfind(ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0, int_0)
    except BaseException:
        pass