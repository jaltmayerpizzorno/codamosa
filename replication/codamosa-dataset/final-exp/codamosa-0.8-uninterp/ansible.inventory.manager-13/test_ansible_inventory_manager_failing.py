# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    try:
        str_0 = 'JBtd4?\ta^j z%#'
        bool_0 = False
        bytes_0 = None
        tuple_0 = (bool_0, bytes_0, bytes_0, bytes_0)
        dict_0 = None
        set_0 = {str_0, bytes_0, bool_0, dict_0}
        var_0 = module_0.order_patterns(set_0)
        list_0 = [tuple_0]
        str_1 = ':0'
        bytes_1 = None
        var_1 = module_0.split_host_pattern(bytes_1)
        inventory_manager_0 = module_0.InventoryManager(list_0, str_1)
        inventory_manager_1 = module_0.InventoryManager(str_0, tuple_0, inventory_manager_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\n        Takes a list of patterns and returns a list of matching host names,\n        taking into account any negative and intersection patterns.\n        '
        bool_0 = False
        inventory_manager_0 = module_0.InventoryManager(str_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        str_0 = 'service_enablercconf() reuires rcconf_file, rcconf_key and rcconf_value'
        inventory_manager_0 = module_0.InventoryManager(dict_0, str_0)
        var_0 = inventory_manager_0.add_host(dict_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        tuple_0 = (bool_0,)
        str_0 = '\'7/d\rh"f.'
        str_1 = 'Skipping "%s" %s plugin, as we cannot load plugin to check config due to : %s'
        inventory_manager_0 = module_0.InventoryManager(str_0, str_1)
        var_0 = inventory_manager_0.add_group(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = set()
        inventory_manager_0 = module_0.InventoryManager(set_0)
        bool_0 = True
        bool_1 = False
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0, bool_0, bool_1)
        var_0 = inventory_manager_1.get_groups_dict()
        bool_2 = True
        list_0 = [bool_2, bool_2, bool_2, bool_2]
        int_0 = 716
        inventory_manager_2 = module_0.InventoryManager(list_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xcb6\xaf'
        bytes_1 = b'\x89\xcb\x02\xfc\xc3\x1e!\x11\x9b)\x05\x135'
        bool_0 = False
        inventory_manager_0 = module_0.InventoryManager(bool_0)
        var_0 = inventory_manager_0.get_hosts(bytes_1)
        var_1 = inventory_manager_0.remove_restriction()
        var_2 = inventory_manager_0.reconcile_inventory()
        var_3 = module_0.split_host_pattern(bool_0)
        inventory_manager_1 = module_0.InventoryManager(bytes_0, inventory_manager_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1088.0
        str_0 = 'j&3)'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_0 = inventory_manager_0.parse_source(float_0)
        float_1 = -609.357191
        tuple_0 = (float_1, inventory_manager_0)
        tuple_1 = (tuple_0, inventory_manager_0, float_1)
        var_1 = inventory_manager_0.restrict_to_hosts(tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0, set_0]
        inventory_manager_0 = module_0.InventoryManager(set_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        float_0 = 512.0
        inventory_manager_0 = module_0.InventoryManager(float_0)
        var_0 = inventory_manager_0.restrict_to_hosts(list_0)
        dict_0 = {inventory_manager_0: float_0, float_0: float_0}
        var_1 = inventory_manager_0.get_host(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'-=\x85]8\x18o|\xa3'
        str_0 = 'rzLohS6'
        inventory_manager_0 = module_0.InventoryManager(bytes_0, str_0)
        float_0 = -546.541791
        bytes_1 = b'h_J\xf4\xf2_\xe8\x10\xc0nH\xa3OA\xb9'
        str_1 = '.F(tcV7V[sLa,~(oBQ\tM'
        inventory_manager_1 = module_0.InventoryManager(bytes_1, str_1)
        var_0 = inventory_manager_0.list_hosts()
        var_1 = inventory_manager_0.get_hosts(str_1, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'J'
        var_0 = None
        inventory_manager_0 = module_0.InventoryManager(var_0, str_0)
        var_1 = inventory_manager_0.list_hosts()
        var_2 = inventory_manager_0.get_hosts()
        str_1 = 'host[01]'
        var_3 = inventory_manager_0.get_hosts(str_1)
        str_2 = 'host[!01]'
        var_4 = inventory_manager_0.get_hosts(str_2)
        var_5 = inventory_manager_0.subset(inventory_manager_0)
        var_6 = inventory_manager_0.get_hosts()
        list_0 = None
        bytes_0 = b'\xfa\xbeDl\x96\xb7\xdc'
        dict_0 = {}
        var_7 = inventory_manager_0.get_hosts(list_0, bytes_0, dict_0)
        float_0 = -207.7
        var_8 = inventory_manager_0.subset(float_0)
        bytes_1 = b',\x0e\xe9@'
        var_9 = inventory_manager_0.get_hosts(bytes_1, list_0, str_1, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '1f'
        set_0 = {str_0}
        int_0 = -2128
        dict_0 = {}
        tuple_0 = ()
        set_1 = {int_0, int_0, tuple_0}
        list_0 = [set_1, int_0, int_0, dict_0]
        list_1 = [set_1, set_1, set_0, list_0]
        bytes_0 = b"`\x98\xe9\xa8Z:\x17d?[E\x1e'K"
        inventory_manager_0 = module_0.InventoryManager(dict_0, list_1, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xe2=\x85\x19\xd1NP|.'
        inventory_manager_0 = module_0.InventoryManager(bytes_0)
        dict_0 = None
        var_0 = inventory_manager_0.list_hosts()
        var_1 = inventory_manager_0.get_host(dict_0)
        var_2 = inventory_manager_0.reconcile_inventory()
        var_3 = inventory_manager_0.list_groups()
        tuple_0 = (dict_0,)
        var_4 = inventory_manager_0.reconcile_inventory()
        bytes_1 = b'V\xa1M\xec\x1b2}\xf0\x7fT\x0b\x17\x1f!\x86H\x1e'
        var_5 = inventory_manager_0.get_hosts(bytes_1)
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0)
        complex_0 = None
        list_0 = [inventory_manager_1, dict_0, complex_0]
        var_6 = inventory_manager_0.parse_source(var_0)
        var_7 = inventory_manager_0.subset(list_0)
        str_0 = "_%fSjZhR:_\x0b>0'"
        var_8 = inventory_manager_0.list_hosts(str_0)
        inventory_manager_2 = module_0.InventoryManager(bytes_0, str_0)
        var_9 = inventory_manager_1.clear_caches()
        set_0 = set()
        inventory_manager_3 = module_0.InventoryManager(set_0, tuple_0)
        var_10 = inventory_manager_3.remove_restriction()
        var_11 = inventory_manager_1.subset(inventory_manager_2)
        float_0 = -546.541791
        inventory_manager_4 = module_0.InventoryManager(float_0, tuple_0)
        str_1 = "^F~3\tO'uYz-6nhS. ~"
        var_12 = inventory_manager_3.get_hosts(str_1, inventory_manager_2)
        inventory_manager_5 = module_0.InventoryManager(complex_0)
        var_13 = inventory_manager_2.reconcile_inventory()
        var_14 = inventory_manager_3.restrict_to_hosts(set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '^(wH0F@\r@O'
        int_0 = 1668
        inventory_manager_0 = module_0.InventoryManager(int_0)
        var_0 = inventory_manager_0.subset(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'x?w,RaNCmk8:&LLQ\rT'
        var_0 = None
        inventory_manager_0 = module_0.InventoryManager(var_0, str_0)
        var_1 = inventory_manager_0.get_hosts()
        var_2 = inventory_manager_0.get_groups_dict()
        var_3 = inventory_manager_0.get_hosts(var_1)
        var_4 = len(var_3)
        var_5 = inventory_manager_0.list_groups()
        str_1 = 'hos[01]'
        var_6 = inventory_manager_0.get_hosts(str_1)
        var_7 = len(var_3)
        var_8 = inventory_manager_0.clear_pattern_cache()
        var_9 = len(var_8)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '!x??w,R3aCmk8:&LLQ\rT'
        var_0 = None
        inventory_manager_0 = module_0.InventoryManager(var_0, str_0)
        var_1 = inventory_manager_0.get_hosts()
        var_2 = inventory_manager_0.parse_sources(str_0)
        var_3 = inventory_manager_0.get_hosts(var_1)
        var_4 = len(var_3)
        var_5 = inventory_manager_0.list_groups()
        str_1 = 'h@1'
        var_6 = inventory_manager_0.get_hosts(str_1)
        str_2 = 'hos[01]'
        var_7 = inventory_manager_0.get_hosts(str_2)
        str_3 = 'G=G}I'
        var_8 = inventory_manager_0.parse_source(str_3)
        str_4 = '0x7f78b412bbe0>'
        var_9 = inventory_manager_0.clear_pattern_cache()
        var_10 = inventory_manager_0.subset(str_1)
        var_11 = inventory_manager_0.refresh_inventory()
        int_0 = None
        var_12 = inventory_manager_0.subset(inventory_manager_0)
        var_13 = inventory_manager_0.get_hosts(var_5, var_6, var_6)
        bytes_0 = b'qG\xb3\x89\\\xca\xe5\xd8\xeb'
        var_14 = inventory_manager_0.parse_source(bytes_0)
        dict_0 = {}
        var_15 = inventory_manager_0.add_group(str_4)
        inventory_manager_1 = module_0.InventoryManager(dict_0)
        var_16 = inventory_manager_1.list_hosts()
        var_17 = inventory_manager_0.list_hosts(int_0)
        var_18 = inventory_manager_0.clear_caches()
        var_19 = len(var_13)
        var_20 = inventory_manager_0.restrict_to_hosts(int_0)
        set_0 = set()
        var_21 = inventory_manager_0.get_host(set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '@T8P;3D'
        str_1 = '.'
        str_2 = ''
        inventory_manager_0 = module_0.InventoryManager(str_2, str_1)
        int_0 = 4231
        inventory_manager_1 = module_0.InventoryManager(int_0)
        tuple_0 = (str_1, inventory_manager_0, str_2, inventory_manager_1)
        inventory_manager_2 = module_0.InventoryManager(tuple_0)
        inventory_manager_3 = module_0.InventoryManager(str_0, str_0)
        var_0 = inventory_manager_3.list_hosts()
        var_1 = len(var_0)
        var_2 = inventory_manager_3.remove_restriction()
        set_0 = {var_2, inventory_manager_3}
        str_3 = '"_,"t<U*`|d'
        inventory_manager_4 = module_0.InventoryManager(set_0, str_3)
        bytes_0 = b'a\xdf[\x12f\xd2\xcf\xc2{=\xb5\xc2b\xb4\x00o'
        var_3 = inventory_manager_3.subset(bytes_0)
        var_4 = len(str_3)
        var_5 = inventory_manager_3.remove_restriction()
        var_6 = inventory_manager_4.parse_sources()
        str_4 = '&qqH'
        float_0 = -2132.632107
        var_7 = inventory_manager_3.parse_source(float_0)
        var_8 = inventory_manager_3.get_hosts(str_4)
        var_9 = inventory_manager_3.get_hosts(str_4)
        var_10 = inventory_manager_3.subset(str_0)
    except BaseException:
        pass