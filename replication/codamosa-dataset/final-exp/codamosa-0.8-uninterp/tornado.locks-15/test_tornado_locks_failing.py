# Automatically generated by Pynguin.
import tornado.locks as module_0
import builtins as module_1
import datetime as module_2

def test_case_0():
    try:
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_1():
    try:
        event_0 = module_0.Event()
        semaphore_0 = module_0.Semaphore()
        str_0 = semaphore_0.__repr__()
        event_1 = module_0.Event()
        event_0.clear()
        releasing_context_manager_0 = module_0._ReleasingContextManager(event_0)
        lock_0 = module_0.Lock()
        semaphore_1 = module_0.Semaphore()
        event_2 = module_0.Event()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_2():
    try:
        event_0 = module_0.Event()
        bool_0 = event_0.is_set()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = None
        releasing_context_manager_0 = module_0._ReleasingContextManager(float_0)
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        event_0 = module_0.Event()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -2713
        str_0 = 'Wait for a watched file to change, then restart the process.\n\n    Intended to be used at the end of scripts like unit test runners,\n    to run the tests again after any source file changes (but see also\n    the command-line interface in `main`)\n    '
        dict_0 = {}
        base_exception_0 = module_1.BaseException(**dict_0)
        timedelta_0 = module_2.timedelta()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__aexit__(str_0, base_exception_0, timedelta_0)
        semaphore_1 = module_0.Semaphore(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        lock_0 = module_0.Lock()
        lock_0.__aenter__()
        str_0 = lock_0.__repr__()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        lock_0.__aenter__()
        event_0 = module_0.Event()
        releasing_context_manager_0 = module_0._ReleasingContextManager(semaphore_0)
        event_1 = module_0.Event()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        awaitable_0 = lock_2.acquire()
    except BaseException:
        pass

def test_case_6():
    try:
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_7():
    try:
        lock_0 = module_0.Lock()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -2055
        base_exception_0 = module_1.BaseException()
        traceback_0 = None
        lock_0 = module_0.Lock()
        lock_0.__exit__(int_0, base_exception_0, traceback_0)
    except BaseException:
        pass

def test_case_9():
    try:
        event_0 = module_0.Event()
        event_0.set()
        event_0.set()
        str_0 = event_0.__repr__()
        lock_0 = module_0.Lock()
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 0.5
        list_0 = [float_0, float_0, float_0]
        base_exception_0 = module_1.BaseException(*list_0)
        optional_0 = None
        bytes_0 = b'\xc2'
        releasing_context_manager_0 = module_0._ReleasingContextManager(bytes_0)
        releasing_context_manager_0.__exit__(float_0, base_exception_0, optional_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = None
        lock_0 = module_0.Lock()
        lock_0.__aenter__()
        str_0 = lock_0.__repr__()
        lock_1 = module_0.Lock()
        lock_1.__aenter__()
        semaphore_0 = module_0.Semaphore()
        lock_0.__aenter__()
        str_1 = 'FNyw\x0c'
        str_2 = None
        semaphore_0.__exit__(dict_0, str_1, str_2)
    except BaseException:
        pass