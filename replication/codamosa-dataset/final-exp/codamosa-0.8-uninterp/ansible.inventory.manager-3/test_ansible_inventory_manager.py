# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    pass

def test_case_1():
    var_0 = object()
    inventory_manager_0 = module_0.InventoryManager(var_0)
    var_1 = inventory_manager_0.list_hosts()

def test_case_2():
    str_0 = '9"pD|9j'
    var_0 = module_0.split_host_pattern(str_0)

def test_case_3():
    var_0 = object()
    inventory_manager_0 = module_0.InventoryManager(var_0)
    list_0 = [var_0, inventory_manager_0]
    var_1 = inventory_manager_0.list_hosts(list_0)

def test_case_4():
    float_0 = 2244.1882
    var_0 = module_0.split_host_pattern(float_0)

def test_case_5():
    bytes_0 = b'b\x95g\n,\xe1d\x02\xf6'
    str_0 = "\n        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('%s')\n        $tmp = New-Item -Type Directory -Path $tmp_path -Name '%s'\n        Write-Output -InputObject $tmp.FullName\n        "
    inventory_manager_0 = module_0.InventoryManager(str_0)
    var_0 = inventory_manager_0.subset(bytes_0)

def test_case_6():
    str_0 = ')'
    inventory_manager_0 = module_0.InventoryManager(str_0, str_0)

def test_case_7():
    str_0 = '..'
    set_0 = {str_0, str_0}
    inventory_manager_0 = module_0.InventoryManager(set_0, set_0)

def test_case_8():
    dict_0 = {}
    inventory_manager_0 = module_0.InventoryManager(dict_0)

def test_case_9():
    var_0 = None
    str_0 = 'localhost,'
    inventory_manager_0 = module_0.InventoryManager(str_0)
    float_0 = -999.8
    str_1 = 'B'
    inventory_manager_1 = module_0.InventoryManager(float_0, str_1)
    var_1 = inventory_manager_1.get_host(inventory_manager_0)
    inventory_manager_2 = module_0.InventoryManager(var_0, str_0)
    str_2 = 'nonexistent.pattern'
    var_2 = inventory_manager_2.subset(str_2)

def test_case_10():
    int_0 = 3678
    float_0 = 215.9178
    inventory_manager_0 = module_0.InventoryManager(float_0)
    var_0 = inventory_manager_0.parse_source(int_0)

def test_case_11():
    str_0 = '^JG\\T/H7JiF4_g'
    inventory_manager_0 = module_0.InventoryManager(str_0, str_0)
    var_0 = inventory_manager_0.clear_caches()

def test_case_12():
    str_0 = '\n---\nmodule: script\nversion_added: "0.9"\nshort_description: Runs a local script on a remote node after transferring it\ndescription:\n  - The C(script) module takes the script name followed by a list of space-delimited arguments.\n  - Either a free form command or C(cmd) parameter is required, see the examples.\n  - The local script at path will be transferred to the remote node and then executed.\n  - The given script will be processed through the shell environment on the remote node.\n  - This module does not require python on the remote system, much like the M(ansible.builtin.raw) module.\n  - This module is also supported for Windows targets.\noptions:\n  free_form:\n    description:\n      - Path to the local script file followed by optional arguments.\n  cmd:\n    type: str\n    description:\n      - Path to the local script to run followed by optional arguments.\n  creates:\n    description:\n      - A filename on the remote node, when it already exists, this step will B(not) be run.\n    version_added: "1.5"\n  removes:\n    description:\n      - A filename on the remote node, when it does not exist, this step will B(not) be run.\n    version_added: "1.5"\n  chdir:\n    description:\n      - Change into this directory on the remote node before running the script.\n    version_added: "2.4"\n  executable:\n    description:\n      - Name or path of a executable to invoke the script with.\n    version_added: "2.6"\nnotes:\n  - It is usually preferable to write Ansible modules rather than pushing scripts. Convert your script to an Ansible module for bonus points!\n  - The C(ssh) connection plugin will force pseudo-tty allocation via C(-tt) when scripts are executed. Pseudo-ttys do not have a stderr channel and all\n    stderr is sent to stdout. If you depend on separated stdout and stderr result keys, please switch to a copy+command set of tasks instead of using script.\n  - If the path to the local script contains spaces, it needs to be quoted.\n  - This module is also supported for Windows targets.\nseealso:\n  - module: ansible.builtin.shell\n  - module: ansible.windows.win_shell\nauthor:\n  - Ansible Core Team\n  - Michael DeHaan\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.files\n    - action_common_attributes.raw\n    - decrypt\nattributes:\n    check_mode:\n        support: none\n    diff_mode:\n        support: none\n    platform:\n        details: This action is one of the few that requires no Python on the remote as it passes the command directly into the connection string\n        platforms: all\n    raw:\n      support: full\n    safe_file_operations:\n        support: none\n    vault:\n        support: full\n'
    str_1 = '0bSkpvV!Ib-~aj^'
    dict_0 = {str_1: str_0, str_1: str_0, str_1: str_0, str_1: str_0}
    inventory_manager_0 = module_0.InventoryManager(dict_0)
    inventory_manager_1 = module_0.InventoryManager(str_0, str_1, inventory_manager_0)
    var_0 = inventory_manager_1.list_groups()

def test_case_13():
    str_0 = 've8u}I(VOhxT*'
    dict_0 = {}
    inventory_manager_0 = module_0.InventoryManager(dict_0)
    var_0 = inventory_manager_0.subset(str_0)

def test_case_14():
    int_0 = -561
    inventory_manager_0 = module_0.InventoryManager(int_0)
    var_0 = inventory_manager_0.remove_restriction()

def test_case_15():
    float_0 = -2851.405
    set_0 = {float_0, float_0, float_0, float_0}
    inventory_manager_0 = module_0.InventoryManager(set_0)
    var_0 = inventory_manager_0.clear_pattern_cache()
    var_1 = inventory_manager_0.get_hosts(inventory_manager_0, float_0)
    var_2 = inventory_manager_0.parse_sources()

def test_case_16():
    str_0 = '\n=================='
    var_0 = print(str_0)
    str_1 = 'test_InventoryManager_parse_source:'
    var_1 = print(str_1)
    str_2 = '==================\n'
    var_2 = print(str_2)
    str_3 = 'localhost,'
    int_0 = 99
    list_0 = [var_1, str_3, str_1, var_2]
    inventory_manager_0 = module_0.InventoryManager(int_0, list_0)

def test_case_17():
    str_0 = '\n---\nmodule: script\nversion_added: "0.9"\nshort_description: Runs a local script on a remote node after transferring it\ndescription:\n  - The C(script) module takes the script name followed by a list of space-delimited arguments.\n  - Either a free form command or C(cmd) parameter is required, see the examples.\n  - The local script at path will be transferred to the remote node and then executed.\n  - The given script will be processed through the shell environment on the remote node.\n  - This module does not require python on the remote system, much like the M(ansible.builtin.raw) module.\n  - This module is also supported for Windows targets.\noptions:\n  free_form:\n    description:\n      - Path to the local script file followed by optional arguments.\n  cmd:\n    type: str\n    description:\n      - Path to the local script to run followed by optional arguments.\n  creates:\n    description:\n      - A filename on the remote node, when it already exists, this step will B(not) be run.\n    version_added: "1.5"\n  removes:\n    description:\n      - A filename on the remote node, when it does not exist, this step will B(not) be run.\n    version_added: "1.5"\n  chdir:\n    description:\n      - Change into this directory on the remote node before running the script.\n    version_added: "2.4"\n  executable:\n    description:\n      - Name or path of a executable to invoke the script with.\n    version_added: "2.6"\nnotes:\n  - It is usually preferable to write Ansible modules rather than pushing scripts. Convert your script to an Ansible module for bonus points!\n  - The C(ssh) connection plugin will force pseudo-tty allocation via C(-tt) when scripts are executed. Pseudo-ttys do not have a stderr channel and all\n    stderr is sent to stdout. If you depend on separated stdout and stderr result keys, please switch to a copy+command set of tasks instead of using script.\n  - If the path to the local script contains spaces, it needs to be quoted.\n  - This module is also supported for Windows targets.\nseealso:\n  - module: ansible.builtin.shell\n  - module: ansible.windows.win_shell\nauthor:\n  - Ansible Core Team\n  - Michael DeHaan\nextens_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.files\n    - action_common_attributes.raw\n    - decrypt\nattributes:\n    check_mode:\n        support: none\n    diff_mode:\n        support: none\n    platform:\n        details: This action is one of the few that requires no Python on the remote as it passes the command directly into the connection string\n        platforms: all\n    raw:\n      support: full\n    safe_file_operations:\n        support: none\n    vault:\n        support: full\n'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    inventory_manager_0 = module_0.InventoryManager(dict_0)
    inventory_manager_1 = module_0.InventoryManager(str_0, str_0, inventory_manager_0)

def test_case_18():
    float_0 = 80.00258166649432
    str_0 = 't'
    bool_0 = False
    inventory_manager_0 = module_0.InventoryManager(float_0, str_0, bool_0)
    var_0 = inventory_manager_0.refresh_inventory()

def test_case_19():
    float_0 = -2851.405
    set_0 = {float_0, float_0, float_0, float_0}
    inventory_manager_0 = module_0.InventoryManager(set_0)
    var_0 = inventory_manager_0.clear_pattern_cache()
    var_1 = module_0.split_host_pattern(inventory_manager_0)
    var_2 = inventory_manager_0.get_hosts(inventory_manager_0, float_0)
    str_0 = 'q6t%9N38i5/oV|'
    var_3 = inventory_manager_0.get_hosts(inventory_manager_0, str_0)

def test_case_20():
    var_0 = None
    inventory_manager_0 = module_0.InventoryManager(var_0, var_0)
    bool_0 = True
    var_1 = inventory_manager_0.subset(bool_0)
    str_0 = 'foo'
    var_2 = inventory_manager_0.get_hosts(str_0)
    var_3 = inventory_manager_0.get_hosts(str_0)

def test_case_21():
    str_0 = '<Fg6kyF\\wAMxOstt'
    bytes_0 = None
    tuple_0 = (str_0, bytes_0)
    inventory_manager_0 = module_0.InventoryManager(tuple_0)
    str_1 = ' return flat configuration settings from file(s) '
    str_2 = "G'4*6'd"
    inventory_manager_1 = module_0.InventoryManager(str_2)
    var_0 = inventory_manager_1.get_hosts(inventory_manager_0, str_1)
    var_1 = inventory_manager_0.restrict_to_hosts(bytes_0)

def test_case_22():
    var_0 = None
    str_0 = 'localhost,'
    inventory_manager_0 = module_0.InventoryManager(var_0, str_0)
    str_1 = 'nonexistent.pattern'
    var_1 = inventory_manager_0.subset(str_1)

def test_case_23():
    list_0 = []
    inventory_manager_0 = module_0.InventoryManager(list_0)
    str_0 = ')h.,EMgu\x0ciP'
    var_0 = inventory_manager_0.parse_source(str_0)
    var_1 = inventory_manager_0.list_hosts()
    inventory_manager_1 = module_0.InventoryManager(list_0)

def test_case_24():
    str_0 = 'webservers'
    str_1 = '&dbservers'
    str_2 = '!192.168.1.1'
    str_3 = '192.168.2.*'
    str_4 = [str_0, str_1, str_2, str_3]
    var_0 = module_0.order_patterns(str_4)

def test_case_25():
    str_0 = '\n    Test for method get_hosts of class InventoryManager\n    '
    inventory_manager_0 = module_0.InventoryManager(str_0)
    str_1 = 'localhost'
    var_0 = inventory_manager_0.add_host(str_1)
    str_2 = 'all'
    var_1 = inventory_manager_0.add_group(str_2)
    str_3 = 'db1'
    var_2 = inventory_manager_0.add_host(str_3, str_2)
    str_4 = 'group2'
    var_3 = inventory_manager_0.add_group(str_4)
    str_5 = 'db2'
    var_4 = inventory_manager_0.add_host(str_5, str_4)
    var_5 = inventory_manager_0.get_hosts(str_5)
    var_6 = inventory_manager_0.get_host(str_1)
    var_7 = inventory_manager_0.get_host(str_3)
    var_8 = inventory_manager_0.get_hosts(str_2)
    var_9 = inventory_manager_0.get_hosts(str_4)
    var_10 = inventory_manager_0.get_hosts(str_4)

def test_case_26():
    str_0 = '> 0>\x0b&RRa'
    bytes_0 = b'\xa9f\xf0iC5*\xe9*\x1b\xeb\xd0\x97\xef\x99_'
    inventory_manager_0 = module_0.InventoryManager(bytes_0)
    var_0 = inventory_manager_0.list_hosts(str_0)
    var_1 = inventory_manager_0.clear_caches()
    var_2 = inventory_manager_0.clear_pattern_cache()
    str_1 = ')h.,/EMgu\x0ciP'
    var_3 = inventory_manager_0.parse_source(str_1)
    var_4 = inventory_manager_0.parse_source(bytes_0)

def test_case_27():
    int_0 = 3679
    inventory_manager_0 = module_0.InventoryManager(int_0)
    str_0 = 'lZ\tL`D]Z\rp'
    str_1 = '!yM{+[dSZ=QPo'
    var_0 = inventory_manager_0.subset(str_1)
    var_1 = inventory_manager_0.list_hosts()
    var_2 = inventory_manager_0.clear_pattern_cache()
    str_2 = '^Zq,(\x0c'
    inventory_manager_1 = module_0.InventoryManager(str_2, str_0)
    var_3 = inventory_manager_1.reconcile_inventory()

def test_case_28():
    var_0 = None
    inventory_manager_0 = module_0.InventoryManager(var_0, var_0)
    bool_0 = True
    var_1 = inventory_manager_0.subset(bool_0)
    str_0 = 'foo'
    var_2 = inventory_manager_0.get_hosts(str_0)
    str_1 = '*'
    var_3 = inventory_manager_0.get_hosts(str_1)