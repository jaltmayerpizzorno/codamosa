# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0
import ansible.module_utils.common.text.converters as module_1

def test_case_0():
    try:
        float_0 = 101.17497519270424
        set_0 = {float_0, float_0}
        str_0 = '166yjWZU_7Hk\x0b2)gfh\\'
        list_0 = [str_0, str_0, str_0, str_0]
        float_1 = 804.0
        tuple_0 = (list_0, float_1)
        str_1 = 'jDC>*[g'
        inventory_manager_0 = module_0.InventoryManager(tuple_0, str_1)
        var_0 = inventory_manager_0.add_host(float_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 90
        inventory_manager_0 = module_0.InventoryManager(int_0)
        str_0 = '<)s"@Tfz.y!V3)\r v]'
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0, str_0)
        dict_0 = {inventory_manager_1: inventory_manager_1, inventory_manager_1: int_0, int_0: inventory_manager_0, inventory_manager_0: int_0}
        inventory_manager_2 = module_0.InventoryManager(dict_0)
        bool_0 = False
        inventory_manager_3 = module_0.InventoryManager(bool_0)
        inventory_manager_4 = module_0.InventoryManager(inventory_manager_3)
        var_0 = inventory_manager_4.add_group(inventory_manager_2)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x92\x1aS\x9f:\xe7\xed\x92'
        int_0 = 90
        bytes_1 = b''
        var_0 = module_0.split_host_pattern(bytes_1)
        str_0 = 'Yv\r'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_1 = inventory_manager_0.reconcile_inventory()
        inventory_manager_1 = module_0.InventoryManager(bytes_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2359.5
        tuple_0 = (float_0,)
        inventory_manager_0 = module_0.InventoryManager(tuple_0)
        var_0 = inventory_manager_0.remove_restriction()
        var_1 = inventory_manager_0.restrict_to_hosts(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1428
        inventory_manager_0 = module_0.InventoryManager(int_0)
        var_0 = inventory_manager_0.get_groups_dict()
        str_0 = '*$'
        inventory_manager_1 = module_0.InventoryManager(str_0, str_0)
        int_1 = 0
        var_1 = inventory_manager_0.add_group(int_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'localhost'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_0 = None
        var_1 = inventory_manager_0.subset(var_0)
        str_1 = 'all'
        var_2 = inventory_manager_0.subset(str_1)
        str_2 = '@'
        var_3 = module_1.to_text(var_2)
        var_4 = str_2 + var_3
        var_5 = inventory_manager_0.subset(var_4)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = None
        inventory_manager_0 = module_0.InventoryManager(var_0, var_0)
        str_0 = 'all'
        var_1 = inventory_manager_0.get_hosts(str_0)
        str_1 = 'foo'
        var_2 = inventory_manager_0.get_hosts(str_1)
        str_2 = '*'
        var_3 = inventory_manager_0.get_hosts(str_2)
        var_4 = []
        var_5 = inventory_manager_0.get_hosts(var_4)
        var_6 = inventory_manager_0._inventory.get
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '1 0>\x0b?RRZ'
        bytes_0 = b'\xa9f\xf0iC5*\xe9*\x1b\x9f\xd0\x97\xef\x99_'
        inventory_manager_0 = module_0.InventoryManager(bytes_0)
        var_0 = inventory_manager_0.list_hosts(str_0)
        var_1 = inventory_manager_0.parse_sources()
        var_2 = inventory_manager_0.get_hosts()
        var_3 = inventory_manager_0.clear_caches()
        list_0 = []
        var_4 = inventory_manager_0.restrict_to_hosts(list_0)
        str_1 = ')h.,/EMgu\x0ciP'
        str_2 = 'form_factor'
        var_5 = inventory_manager_0.get_host(str_2)
        str_3 = 'Fy="wa~<+STT1*/.'
        str_4 = 'f0Nr}`#Pjdz\tfvmM'
        bytes_1 = b'.\x8b\x1a\xc9\xf5\xe1\xac3@P\x162\xd6\xf5\xe4\xc9'
        inventory_manager_1 = module_0.InventoryManager(str_3, str_4, bytes_1)
        var_6 = inventory_manager_0.subset(inventory_manager_1)
        bool_0 = False
        tuple_0 = (bool_0, str_1)
        var_7 = inventory_manager_0.restrict_to_hosts(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = None
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        var_0 = module_0.order_patterns(dict_0)
        bool_1 = True
        inventory_manager_0 = module_0.InventoryManager(bool_1)
        var_1 = inventory_manager_0.clear_pattern_cache()
        tuple_0 = None
        bool_2 = True
        var_2 = inventory_manager_0.add_host(tuple_0, bool_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '1 0>\x0b?RRZ'
        bytes_0 = b'\xa9f\xf0iC5*\xe9*\x1b\xeb\xd0\x97\xef\x99_'
        inventory_manager_0 = module_0.InventoryManager(bytes_0)
        var_0 = inventory_manager_0.list_hosts(str_0)
        var_1 = inventory_manager_0.get_groups_dict()
        var_2 = inventory_manager_0.reconcile_inventory()
        str_1 = "(\tYj\x0b)C'3\r~lN$j-j(U3"
        str_2 = 'Fy="wa~<+STT1*/.'
        str_3 = 'f0Nr}`#Pjdz\tfvm'
        bytes_1 = b'.\x8b\x1a\xc9\xf5\xe1\xac3@P\x162\xd6\xf5\xe4\xc9'
        inventory_manager_1 = module_0.InventoryManager(str_2, str_3, bytes_1)
        var_3 = inventory_manager_1.list_hosts(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 3679
        set_0 = {int_0, int_0, int_0}
        inventory_manager_0 = module_0.InventoryManager(int_0)
        list_0 = []
        var_0 = inventory_manager_0.get_hosts(int_0, set_0)
        var_1 = inventory_manager_0.reconcile_inventory()
        bool_0 = False
        inventory_manager_1 = module_0.InventoryManager(list_0)
        float_0 = 100.0
        set_1 = {inventory_manager_1, float_0}
        var_2 = inventory_manager_0.parse_source(set_1, float_0)
        str_0 = 'yM{+[dSZ=Q5o'
        var_3 = inventory_manager_1.subset(str_0)
        str_1 = 'Ex|K\\"va4'
        dict_0 = {bool_0: inventory_manager_1, str_1: bool_0}
        var_4 = inventory_manager_1.subset(dict_0)
        var_5 = inventory_manager_1.parse_source(float_0)
        var_6 = inventory_manager_0.reconcile_inventory()
        var_7 = inventory_manager_1.list_hosts()
        var_8 = inventory_manager_1.remove_restriction()
        var_9 = inventory_manager_1.list_groups()
        var_10 = inventory_manager_1.get_groups_dict()
        var_11 = inventory_manager_1.clear_pattern_cache()
        var_12 = module_0.split_host_pattern(inventory_manager_0)
        var_13 = inventory_manager_1.subset(inventory_manager_1)
        var_14 = inventory_manager_0.clear_pattern_cache()
        var_15 = inventory_manager_1.list_hosts()
        int_1 = -895
        bytes_0 = b'\xa1\x9c\xb1\xf9'
        float_1 = 2036.8184
        var_16 = inventory_manager_0.get_hosts(bool_0, bytes_0, float_1)
        inventory_manager_2 = module_0.InventoryManager(float_1)
        var_17 = inventory_manager_0.restrict_to_hosts(int_1)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 3679
        set_0 = {int_0, int_0, int_0, int_0}
        inventory_manager_0 = module_0.InventoryManager(int_0)
        list_0 = []
        str_0 = 'lZ\tL`D]Z\rp'
        var_0 = inventory_manager_0.get_hosts(int_0, set_0)
        var_1 = inventory_manager_0.reconcile_inventory()
        bool_0 = False
        inventory_manager_1 = module_0.InventoryManager(list_0)
        var_2 = inventory_manager_1.subset(int_0)
        float_0 = 100.0
        set_1 = {inventory_manager_1, float_0}
        dict_0 = {bool_0: inventory_manager_1, str_0: bool_0}
        var_3 = inventory_manager_1.subset(dict_0)
        str_1 = ')h.,EMgu\x0ciP'
        var_4 = inventory_manager_1.parse_source(str_1)
        var_5 = inventory_manager_1.list_hosts()
        var_6 = inventory_manager_0.parse_sources(str_0)
        var_7 = inventory_manager_1.list_groups()
        int_1 = -1348
        inventory_manager_2 = module_0.InventoryManager(set_1, int_1)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = None
        inventory_manager_0 = module_0.InventoryManager(var_0, var_0)
        str_0 = '@test'
        str_1 = [str_0]
        var_1 = inventory_manager_0.subset(str_1)
    except BaseException:
        pass