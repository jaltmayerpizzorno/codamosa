# Automatically generated by Pynguin.
import semantic_release.hvcs as module_0

def test_case_0():
    try:
        list_0 = []
        str_0 = 'gqER{ZZ?+'
        str_1 = 'IAHyK4m0%NFu` S"(T'
        str_2 = 'jv9H\ts'
        github_0 = module_0.Github()
        bool_0 = github_0.check_build_status(str_0, str_1, str_2)
        github_1 = module_0.Github(*list_0)
        str_3 = github_1.domain()
        github_2 = module_0.Github()
        dict_0 = {}
        gitlab_0 = module_0.Gitlab(**dict_0)
        str_4 = gitlab_0.domain()
        optional_0 = github_2.token()
        bool_1 = True
        session_0 = github_2.session(bool_1)
        token_auth_0 = module_0.TokenAuth(session_0)
        bool_2 = True
        session_1 = github_1.session(bool_2)
        optional_1 = github_1.token()
        base_0 = module_0.Base(*list_0)
        str_5 = base_0.domain()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = module_0.check_token()
        str_0 = '"9d{'
        base_0 = module_0.Base()
        str_1 = 'tag_name'
        github_0 = module_0.Github()
        str_2 = github_0.domain()
        str_3 = github_0.api_url()
        base_1 = module_0.Base()
        bool_1 = base_1.check_build_status(str_0, str_0, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'r\n'
        str_1 = '\n    Returns the domain for the current VCS\n\n    :return: The domain in string form\n    '
        bool_0 = module_0.post_changelog(str_0, str_1, str_1, str_1)
        int_0 = -1825
        token_auth_0 = module_0.TokenAuth(int_0)
        list_0 = [str_0, token_auth_0]
        dict_0 = {}
        var_0 = token_auth_0.__ne__(dict_0)
        gitlab_0 = module_0.Gitlab(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'r\n'
        str_1 = '\n    Returns the domain for the current VCS\n\n    :return: The domain in string form\n    '
        bool_0 = module_0.post_changelog(str_0, str_1, str_1, str_1)
        int_0 = -1825
        token_auth_0 = module_0.TokenAuth(int_0)
        str_2 = '|]|5Q'
        var_0 = token_auth_0.__call__(str_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'yJzbOq'
        str_1 = '[n hD\ntovd[R,'
        gitlab_0 = module_0.Gitlab()
        bool_0 = gitlab_0.check_build_status(str_0, str_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = module_0.check_token()
        str_0 = '"9d{'
        base_0 = module_0.Base()
        github_0 = module_0.Github()
        str_1 = github_0.domain()
        str_2 = github_0.api_url()
        base_1 = module_0.get_hvcs()
        bool_1 = base_1.check_build_status(str_0, str_0, str_1)
        str_3 = base_0.api_url()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\x0cM87|ioZDs9O>iOq&]'
        str_1 = "X'6*uRRWFhqB\rF{;8zQM"
        str_2 = 'Fwff@Y6KzJn'
        str_3 = 'P>WJNTVz'
        bool_0 = module_0.check_build_status(str_2, str_3, str_1)
        bytes_0 = b'pj5|'
        github_0 = module_0.Github()
        token_auth_0 = module_0.TokenAuth(github_0)
        var_0 = token_auth_0.__ne__(bytes_0)
        str_4 = None
        str_5 = '}hQ>[bnTY\x0bnv'
        bool_1 = module_0.check_build_status(str_2, str_4, str_5)
        set_0 = {str_0, str_4, str_2}
        dict_0 = {}
        token_auth_1 = module_0.TokenAuth(dict_0)
        var_1 = token_auth_1.__ne__(set_0)
        base_0 = module_0.Base()
        optional_0 = base_0.token()
    except BaseException:
        pass

def test_case_7():
    try:
        github_0 = module_0.Github()
        str_0 = 'K\t1w$M*Os'
        int_0 = 530
        session_0 = github_0.session(int_0)
        session_1 = github_0.session(session_0, int_0)
        dict_0 = {}
        token_auth_0 = module_0.TokenAuth(dict_0)
        var_0 = token_auth_0.__call__(session_1)
        str_1 = "kltt-z@`J\tXQ'"
        bool_0 = github_0.check_build_status(str_0, str_1, str_1)
        optional_0 = github_0.auth()
        optional_1 = None
        token_auth_1 = module_0.TokenAuth(optional_1)
        str_2 = '\\\r;zV_|3P3/$K'
        token_auth_2 = module_0.TokenAuth(str_2)
        var_1 = token_auth_2.__eq__(token_auth_1)
        bool_1 = False
        optional_2 = module_0.get_domain()
        var_2 = token_auth_2.__call__(bool_1)
    except BaseException:
        pass