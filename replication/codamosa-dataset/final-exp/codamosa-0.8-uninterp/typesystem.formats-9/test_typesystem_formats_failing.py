# Automatically generated by Pynguin.
import typesystem.formats as module_0

def test_case_0():
    try:
        str_0 = 'boolean_schema'
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = None
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        optional_0 = base_format_0.serialize(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '2019-05-10T12:30:54+0100'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(datetime_0)
        datetime_1 = date_time_format_0.validate(datetime_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'n=<MtAbvG%58K|<kL9'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'b=SzU5'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'b=SzU5'
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'n=<MtAbvG%58K|<kL9'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        list_1 = []
        dict_0 = {}
        u_u_i_d_format_0 = module_0.UUIDFormat(*list_1, **dict_0)
        bool_0 = u_u_i_d_format_0.is_native_type(list_0)
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_10():
    try:
        u_u_i_d_format_0 = None
        dict_0 = {}
        time_format_0 = module_0.TimeFormat(**dict_0)
        bool_0 = time_format_0.is_native_type(dict_0)
        time_format_1 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(u_u_i_d_format_0)
        list_0 = [dict_0, time_format_0, optional_0]
        date_time_format_0 = module_0.DateTimeFormat(*list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        date_format_0 = module_0.DateFormat()
        tuple_0 = None
        str_0 = 'UuX-)L5=e\n;aFb8\n6@>'
        bool_0 = date_format_0.is_native_type(date_format_0)
        bool_1 = date_format_0.is_native_type(date_format_0)
        optional_0 = date_format_0.serialize(tuple_0)
        base_format_0 = module_0.BaseFormat()
        validation_error_0 = base_format_0.validation_error(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 4
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2018-06-13'
        date_0 = date_format_0.validate(str_0)
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(date_format_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '12:45:78'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = '12:45:78.123456-05:00'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-03-03T14:16:08'
        datetime_0 = date_time_format_0.validate(str_0)
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(date_time_format_0)
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(datetime_0)
        optional_1 = date_time_format_0.serialize(u_u_i_d_format_0)
    except BaseException:
        pass

def test_case_17():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2018-0-01'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2019-95-10T12:30:54+0100'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-11-27T22:00:00.123456'
        str_1 = '2019-05-10T12:30:54+0100'
        datetime_0 = date_time_format_0.validate(str_0)
        datetime_1 = date_time_format_0.validate(str_1)
        datetime_2 = date_time_format_0.validate(date_time_format_0)
    except BaseException:
        pass