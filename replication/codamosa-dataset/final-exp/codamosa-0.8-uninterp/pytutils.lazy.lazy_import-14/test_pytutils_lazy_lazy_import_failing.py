# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = 'foo name'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'extra'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = str(illegal_use_of_scope_replacer_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'foo name'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        import_processor_0 = module_0.ImportProcessor()
        var_0 = module_0.disallow_proxying()
        str_0 = '+hxEKi#_}UR['
        float_0 = -51.966142
        var_1 = module_0.disallow_proxying()
        import_replacer_0 = module_0.ImportReplacer(import_processor_0, str_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'nq*Ib1'
        float_0 = -2271.34
        scope_replacer_0 = None
        list_0 = [float_0, float_0, scope_replacer_0]
        import_processor_0 = module_0.ImportProcessor(list_0)
        list_1 = [import_processor_0]
        import_replacer_0 = module_0.ImportReplacer(str_0, float_0, scope_replacer_0, import_processor_0, list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x84c\x82/\r\xf8\xaeKc\xb6\xa7\xc8\x80\xaf'
        str_0 = 'c?P<1.r:'
        var_0 = module_0.lazy_import(bytes_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -1828.0
        str_0 = 'RX@T,\x0blXs\x0cu{x0jKn%y'
        str_1 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
        str_2 = 'finditer'
        str_3 = '|7\r^eivup'
        dict_0 = {str_0: str_0, str_2: str_0, str_3: str_1}
        import_processor_0 = None
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_3, import_processor_0, float_0)
        var_0 = module_0.lazy_import(float_0, import_replacer_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = module_0.disallow_proxying()
        dict_0 = {var_0: var_0, var_0: var_0, var_0: var_0, var_0: var_0}
        str_0 = "HGt{e.zk~\n3' T]xW"
        int_0 = -1168
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, str_0, int_0)
        var_1 = scope_replacer_0.__call__()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -1828.0
        str_0 = 'RX@T,\x0blXs\x0cu{x0jKn%y'
        str_1 = "\n    Fetch arbitrary node from a tree-like mapping structure with traversal help:\n    Dimension can be specified via ':'\n\n    Arguments:\n        mapping collections.Mapping: Mapping to fetch from\n        key str|unicode: Key to lookup, allowing for : notation\n        default object: Default value. If set to `:module:_sentinel`, raise KeyError if not found.\n        parent bool: If True, return parent node. Defaults to False.\n\n    Returns:\n        object: Value at specified key\n    "
        str_2 = 'finditer'
        str_3 = '|7\r^eivup'
        dict_0 = {str_0: str_0, str_1: float_0, str_2: str_0, str_3: str_1}
        import_processor_0 = None
        import_replacer_0 = module_0.ImportReplacer(dict_0, import_processor_0, import_processor_0)
        var_0 = module_0.lazy_import(float_0, import_replacer_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = module_0.disallow_proxying()
        str_0 = 'W\t(|O`oj|'
        bytes_0 = b'\x84c\x82/\r\xf8\xaeKc\xb6\xa7\xc8E\x80\xaf'
        var_1 = module_0.lazy_import(bytes_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        import_processor_0 = module_0.ImportProcessor()
        float_0 = 1137.0
        str_0 = 'Q.v/cBml\'\\"&#,'
        var_0 = module_0.lazy_import(float_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\nfrom bzrlib import (\n    errors,\n    )\n'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        set_0 = set()
        str_0 = '(debugshell)'
        var_0 = module_0.lazy_import(set_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        list_0 = []
        float_0 = 2384.49
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, float_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        var_1 = illegal_use_of_scope_replacer_0.__eq__(str_0)
        int_0 = 4644
        str_1 = '$bNQ2)'
        var_2 = module_0.lazy_import(int_0, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = {}
        var_1 = lambda self, scope, name: self
        str_0 = ''
        scope_replacer_0 = module_0.ScopeReplacer(var_0, var_1, str_0)
        int_0 = 2
        str_1 = '-Er7_.'
        import_processor_0 = module_0.ImportProcessor()
        str_2 = '&!N|R%$MX2pZb'
        str_3 = '__copy__'
        dict_0 = {str_1: int_0, import_processor_0: str_2, str_3: var_0, scope_replacer_0: int_0}
        bool_0 = None
        list_0 = [str_1]
        bytes_0 = b'\xaf\x8dhh~})\x1c\xab(g\x7f\x7f\xcbQ\xbe\xfd'
        tuple_0 = (bool_0, list_0, import_processor_0, bytes_0)
        tuple_1 = (dict_0, import_processor_0, str_3, tuple_0)
        str_4 = None
        var_2 = scope_replacer_0.__setattr__(tuple_1, str_4)
    except BaseException:
        pass