# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        module_0.register()
        str_0 = '9lU8^b|:EIsTYd\rx'
        tuple_0 = module_0.encode(str_0)
        bytes_0 = b'a\xa8\x19\x10\x00Fc\xbd'
        list_0 = [bytes_0, bytes_0, bytes_0]
        user_string_0 = module_1.UserString(list_0)
        user_string_1 = module_1.UserString(user_string_0)
        tuple_1 = module_0.encode(user_string_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'V-YW2NG625c'
        tuple_0 = module_0.encode(str_0)
        module_0.register()
        tuple_1 = module_0.encode(str_0, str_0)
        module_0.register()
        module_0.register()
        module_0.register()
        bytes_0 = b'QAr\xcdR\x1c\x96\x8b,\x9b7@\x0e'
        tuple_2 = module_0.decode(bytes_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        module_0.register()
        str_0 = '7\x0boG\\9iPE'
        str_1 = 'MLide'
        str_2 = '7&[6pL~=$;xi|x4'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_1}
        user_string_0 = module_1.UserString(dict_0)
        tuple_0 = module_0.encode(user_string_0)
        bool_0 = False
        tuple_1 = (bool_0,)
        tuple_2 = module_0.decode(tuple_1)
        module_0.register()
        tuple_3 = module_0.encode(str_1)
        tuple_4 = module_0.encode(str_1)
        module_0.register()
        bytes_0 = b'R%\xd3\xa1\xb8\xa4\xe8\xd3\xe5'
        tuple_5 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{Rp.39=iOf3M_\n{0'
        tuple_0 = module_0.decode(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        module_0.register()
        bytes_0 = b'&\x0f\xc1\xf2\x03j\xf5A+y\xc8'
        int_0 = 200
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        tuple_1 = module_0.encode(user_string_0, user_string_0)
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.register()
        str_0 = 'eutf8h'
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'abcùåÜùåÜ'
        str_1 = 'unicode_escape'
        tuple_0 = module_0.encode(str_0, str_1)
        tuple_1 = module_0.decode(tuple_0, str_1)
    except BaseException:
        pass