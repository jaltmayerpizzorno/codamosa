# Automatically generated by Pynguin.
import tornado.netutil as module_0
import ssl as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 8888
    list_0 = module_0.bind_sockets(int_0)

def test_case_2():
    str_0 = '\x0cQ5@jclT!<'
    socket_0 = module_0.bind_unix_socket(str_0)

def test_case_3():
    s_s_l_context_0 = module_1.SSLContext()
    str_0 = '\rgn8Cq0oJff*'
    int_0 = 1406
    socket_0 = module_0.bind_unix_socket(str_0, int_0)
    s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0)
    s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)

def test_case_4():
    str_0 = 'Cros origin websockets not llowed'
    bool_0 = module_0.is_valid_ip(str_0)

def test_case_5():
    str_0 = 'Cross origin websockets not allowed'
    bool_0 = module_0.is_valid_ip(str_0)
    resolver_0 = module_0.Resolver()
    str_1 = 'UEBkA2?^a5@}Ijw2".'
    bool_1 = module_0.is_valid_ip(str_1)

def test_case_6():
    resolver_0 = module_0.Resolver()
    resolver_0.close()
    str_0 = '\x0cQT@jclT!l,'
    s_s_l_context_0 = module_1.SSLContext()
    s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
    default_executor_resolver_0 = module_0.DefaultExecutorResolver()
    bool_0 = module_0.is_valid_ip(str_0)
    int_0 = 2436
    list_0 = module_0.bind_sockets(int_0)

def test_case_7():
    dict_0 = {}
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)

def test_case_8():
    s_s_l_context_0 = module_1.SSLContext()
    str_0 = "a`%='"
    int_0 = 12
    socket_0 = module_0.bind_unix_socket(str_0, int_0)
    s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0)
    s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)

def test_case_9():
    str_0 = None
    bool_0 = module_0.is_valid_ip(str_0)
    resolver_0 = module_0.Resolver()
    str_1 = 'UEBkA2?^a5@}Ijw2".'
    bool_1 = module_0.is_valid_ip(str_1)

def test_case_10():
    str_0 = '192.168.0.1'
    bool_0 = module_0.is_valid_ip(str_0)
    str_1 = '::1'
    bool_1 = module_0.is_valid_ip(str_1)
    str_2 = '::'
    bool_2 = module_0.is_valid_ip(str_2)
    var_0 = None
    bool_3 = module_0.is_valid_ip(var_0)
    str_3 = ''
    bool_4 = module_0.is_valid_ip(str_3)
    str_4 = '192.168.0.1\x00'
    bool_5 = module_0.is_valid_ip(str_4)
    str_5 = 'foo'
    bool_6 = module_0.is_valid_ip(str_5)
    str_6 = 'foo.bar.baz'
    bool_7 = module_0.is_valid_ip(str_6)