# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    pass

def test_case_1():
    string_compressor_0 = module_0.__StringCompressor()
    int_0 = 1436
    str_0 = module_0.roman_encode(int_0)
    str_1 = 'LD'
    str_2 = module_0.snake_case_to_camel(str_1)

def test_case_2():
    str_0 = 'y:y}}`kN4o,x0\nplWx`]'
    str_1 = module_0.compress(str_0)

def test_case_3():
    str_0 = 'TzSl+oEZrH+!m/eqJ9'
    str_1 = module_0.prettify(str_0)

def test_case_4():
    str_0 = '\n    Custom error raised when received object is not a string as expected.\n    '
    str_1 = module_0.prettify(str_0)
    str_2 = '{\tpefi7yA'
    str_3 = module_0.snake_case_to_camel(str_2)
    str_4 = 'H`/ZM~'
    bool_0 = module_0.booleanize(str_4)

def test_case_5():
    str_0 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()
    str_2 = module_0.snake_case_to_camel(str_0, str_0)
    str_3 = 'h#T1Ja;F*0P0&B'
    bool_0 = False
    str_4 = module_0.snake_case_to_camel(str_3, bool_0)

def test_case_6():
    str_0 = '<fS\\n2R '
    str_1 = module_0.reverse(str_0)

def test_case_7():
    str_0 = 'the_snake_is_green'
    str_1 = module_0.snake_case_to_camel(str_0)

def test_case_8():
    str_0 = 'ThisIsAStringWithAnAcronymLikeHTTP'
    var_0 = module_0.camel_case_to_snake(str_0)
    str_1 = ' ThisIsAStringWithAnAcronymLikeHTTP '
    str_2 = module_0.snake_case_to_camel(str_0, str_1)

def test_case_9():
    str_0 = 'Cd,<\rP28~UB~<3c~.o m'
    str_1 = module_0.shuffle(str_0)
    str_2 = ''
    str_3 = module_0.strip_html(str_2)

def test_case_10():
    str_0 = ''
    str_1 = module_0.strip_html(str_0)

def test_case_11():
    str_0 = '\n1gXEY=|Qy\rN{O70'
    str_1 = module_0.asciify(str_0)

def test_case_12():
    str_0 = 'QlBE'
    bool_0 = module_0.booleanize(str_0)

def test_case_13():
    str_0 = 'PXCi}'
    str_1 = module_0.prettify(str_0)
    str_2 = ';'
    roman_numbers_0 = module_0.__RomanNumbers()
    str_3 = module_0.strip_margin(str_2)

def test_case_14():
    str_0 = 'ThisIsACaelStringTest'
    var_0 = module_0.camel_case_to_snake(str_0)

def test_case_15():
    str_0 = 'the_snake_is_green'
    str_1 = module_0.snake_case_to_camel(str_0)
    str_2 = '1'
    var_0 = module_0.camel_case_to_snake(str_2)

def test_case_16():
    str_0 = 'this is a test. 1234. test@test.com'
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()
    str_2 = 'test      here'
    string_formatter_1 = module_0.__StringFormatter(str_2)
    str_3 = string_formatter_1.format()
    str_4 = 'https://google.it'
    string_formatter_2 = module_0.__StringFormatter(str_4)
    str_5 = string_formatter_2.format()
    str_6 = '(test) http://something here'
    string_formatter_3 = module_0.__StringFormatter(str_6)
    str_7 = string_formatter_3.format()
    string_formatter_4 = module_0.__StringFormatter(str_6)
    str_8 = string_formatter_4.format()
    str_9 = 'hello\tworld'
    string_formatter_5 = module_0.__StringFormatter(str_9)
    str_10 = string_formatter_5.format()
    str_11 = 'hello\tworld\n'
    string_formatter_6 = module_0.__StringFormatter(str_11)
    str_12 = string_formatter_6.format()

def test_case_17():
    str_0 = 'the-snake-is-green'
    bool_0 = False
    str_1 = '-'
    str_2 = module_0.snake_case_to_camel(str_0, bool_0, str_1)

def test_case_18():
    str_0 = '"8\rZ_yn'
    str_1 = module_0.snake_case_to_camel(str_0)
    str_2 = 'T7cm:'
    bool_0 = False
    str_3 = module_0.snake_case_to_camel(str_2, bool_0)
    str_4 = 'THE__SNAKE__IS__GREEN'
    str_5 = module_0.snake_case_to_camel(str_4)