# Automatically generated by Pynguin.
import typesystem.formats as module_0

def test_case_0():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-15-19'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '[3B1.(rfd-'
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0}
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        base_format_0 = module_0.BaseFormat()
        optional_0 = base_format_0.serialize(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'LkBB^P7e;i2Fv'
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '|zP$DA\n"vk6/r$![HH4'
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(str_0)
        date_format_0 = module_0.DateFormat()
        str_1 = '2020-15-19'
        date_0 = date_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\x0c*Hzr#`'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'const'
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(str_0)
        optional_0 = date_time_format_0.serialize(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xb9\x08\x7f\xe7\xc8\x17\x8f\x1e\x92\xcf\xf4\xf7\x95\xdf\xf2.\x07'
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        complex_0 = None
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(complex_0)
        list_0 = [bool_0, complex_0, bool_0, date_time_format_0]
        datetime_0 = date_time_format_0.validate(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-05-12T15:32:38+08:00'
        datetime_0 = date_time_format_0.validate(str_0)
        str_1 = '01:10:01.17'
        time_format_0 = module_0.TimeFormat()
        dict_0 = {}
        u_u_i_d_format_0 = module_0.UUIDFormat(**dict_0)
        bool_0 = u_u_i_d_format_0.is_native_type(str_1)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tuple_0 = ()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\x0c*Hzr`'
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(time_format_0)
        u_u_i_d_format_0 = module_0.UUIDFormat()
        date_time_format_0 = module_0.DateTimeFormat()
        str_1 = u_u_i_d_format_0.serialize(u_u_i_d_format_0)
        optional_0 = date_time_format_0.serialize(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'lkBBIP7e;i2Fv'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass

def test_case_16():
    try:
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = 'e081afbb-e804-4f7d-8d88-577a3efbb27b'
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
        u_u_i_d_format_1 = module_0.UUIDFormat()
        str_1 = 'tis is not a UUID'
        u_u_i_d_1 = u_u_i_d_format_1.validate(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        time_format_0 = module_0.TimeFormat()
        date_format_0 = module_0.DateFormat()
        str_0 = '2x-?\x0c@)eRqYE"G+o*\'Tp'
        bool_0 = date_format_0.is_native_type(str_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '15:01'
        time_0 = time_format_0.validate(str_0)
        str_1 = '01:10:01.17'
        time_1 = time_format_0.validate(str_1)
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '10:15:30'
        time_0 = time_format_0.validate(str_0)
        var_0 = str(time_0)
        time_format_1 = module_0.TimeFormat()
        str_1 = '13:65'
        time_1 = time_format_1.validate(str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-05-12T15:62:38+08:00'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-05-12T15:32:38+08:00'
        datetime_0 = date_time_format_0.validate(str_0)
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(datetime_0)
        optional_1 = date_time_format_0.serialize(datetime_0)
        dict_0 = {str_0: datetime_0, str_0: datetime_0, str_0: optional_1}
        time_format_0 = module_0.TimeFormat(**dict_0)
    except BaseException:
        pass