# Automatically generated by Pynguin.
import ansible.playbook.role_include as module_0
import ansible.playbook.role as module_1
import ansible.playbook.block as module_2
import ansible.playbook.task_include as module_3
import ansible.utils.display as module_4
import ansible.template as module_5

def test_case_0():
    try:
        bool_0 = None
        float_0 = 1091.136892
        include_role_0 = module_0.IncludeRole(float_0)
        var_0 = include_role_0.get_block_list(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        include_role_0 = module_0.IncludeRole()
        var_0 = include_role_0.get_name()
        bool_0 = False
        include_role_1 = module_0.IncludeRole(bool_0)
        set_0 = {include_role_1}
        var_1 = include_role_1.get_block_list(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1640
        bool_0 = False
        tuple_0 = ()
        include_role_0 = module_0.IncludeRole(tuple_0)
        var_0 = include_role_0.load(int_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -270
        include_role_0 = module_0.IncludeRole(int_0)
        var_0 = include_role_0.copy()
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        int_0 = 335
        include_role_0 = module_0.IncludeRole(tuple_0, int_0)
        var_0 = include_role_0.get_include_params()
    except BaseException:
        pass

def test_case_5():
    try:
        role_0 = module_1.Role()
        block_0 = module_2.Block(role_0)
        include_role_0 = module_0.IncludeRole(block_0, role_0)
        bytes_0 = b'\x16\x8d]6\x98\x1f\xb3\xf6\xdf\xd3'
        list_0 = None
        task_include_0 = module_3.TaskInclude()
        task_include_1 = module_3.TaskInclude(bytes_0, list_0, task_include_0)
        var_0 = role_0.validate(task_include_1)
        var_1 = include_role_0.get_include_params()
        bool_0 = True
        task_include_2 = module_3.TaskInclude()
        var_2 = task_include_2.all_parents_static()
        bool_1 = False
        display_0 = module_4.Display()
        tuple_0 = (bool_0, task_include_2, bool_1, display_0)
        float_0 = 0.5
        templar_0 = module_5.Templar(tuple_0, float_0)
    except BaseException:
        pass