# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 1
    str_0 = 'valu'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_2():
    int_0 = 3441
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    iterator_0 = node_1.pre_order()
    str_0 = node_1.__str__()

def test_case_3():
    str_0 = '.'
    int_0 = 2408
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_0.optimize()
    list_0 = []
    node_0 = module_0.Node(int_0, list_0, any_0, str_0)

def test_case_4():
    int_0 = 32
    str_0 = '9'
    str_1 = '5|hBY-?T'
    int_1 = 123
    tuple_0 = (int_1, int_1)
    tuple_1 = (str_1, tuple_0)
    list_0 = [int_1, tuple_1, tuple_1]
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
    str_2 = leaf_0.__repr__()

def test_case_5():
    int_0 = 5
    str_0 = 'n|'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_6():
    str_0 = '_'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_7():
    str_0 = '_'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_8():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_9():
    str_0 = "_31<\r'b"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_10():
    str_0 = '~\r'
    optional_0 = None
    leaf_pattern_0 = module_0.LeafPattern(optional_0, str_0)

def test_case_11():
    int_0 = 50
    str_0 = 'TgyK^'
    negated_pattern_0 = module_0.NegatedPattern()
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)

def test_case_12():
    str_0 = '_'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bytes_0 = b''
    bool_0 = wildcard_pattern_0.match_seq(bytes_0)

def test_case_13():
    str_0 = '_'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    bytes_0 = b''
    str_1 = '=4_Wv{eFJoK7&,y>,`(:'
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    bool_0 = negated_pattern_0.match(str_1)
    bool_1 = wildcard_pattern_0.match_seq(bytes_0)
    grammar_0 = module_1.Grammar()

def test_case_14():
    leaf_pattern_0 = module_0.LeafPattern()
    str_0 = '_'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bytes_0 = b''
    bool_0 = wildcard_pattern_0.match_seq(bytes_0)

def test_case_15():
    str_0 = '_'
    dict_0 = {}
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bool_0 = wildcard_pattern_0.match_seq(dict_0, dict_0)

def test_case_16():
    int_0 = 20
    str_0 = '\x0c.Wr'
    str_1 = 'awnu{S@<sAs'
    tuple_0 = (int_0, int_0)
    tuple_1 = (str_1, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()
    leaf_3 = leaf_2.clone()
    leaf_4 = leaf_3.clone()
    leaf_5 = leaf_4.clone()
    leaf_6 = leaf_5.clone()
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(leaf_6)

def test_case_17():
    int_0 = 50
    str_0 = '^'
    var_0 = None
    negated_pattern_0 = module_0.NegatedPattern()
    bool_0 = negated_pattern_0.match(var_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    list_0 = []
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.post_order()
    str_1 = leaf_0.__repr__()
    grammar_0 = module_1.Grammar()
    var_1 = grammar_0.copy()
    var_2 = grammar_0.copy()
    leaf_1 = leaf_0.clone()
    var_3 = leaf_pattern_0.match(leaf_0, var_1)
    iterator_1 = negated_pattern_0.generate_matches(var_3)
    bool_1 = wildcard_pattern_0.match_seq(list_0)
    any_1 = wildcard_pattern_0.optimize()
    any_2 = wildcard_pattern_0.optimize()
    iterator_2 = leaf_0.leaves()
    int_1 = 286
    list_1 = [leaf_1]
    node_0 = module_0.Node(int_1, list_1, any_2)
    node_1 = node_0.clone()
    node_1.update_sibling_maps()

def test_case_18():
    int_0 = 50
    str_0 = '^'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    int_1 = None
    leaf_pattern_0 = module_0.LeafPattern(int_1, str_0)
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.leaves()
    grammar_0 = module_1.Grammar()
    var_0 = grammar_0.copy()
    leaf_1 = leaf_0.clone()
    var_1 = leaf_pattern_0.match(leaf_0, var_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_19():
    int_0 = 50
    str_0 = '^'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    int_1 = None
    leaf_pattern_0 = module_0.LeafPattern(int_1, str_0)
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.leaves()
    str_1 = leaf_0.__repr__()
    grammar_0 = module_1.Grammar()
    var_0 = grammar_0.copy()
    leaf_1 = leaf_0.clone()
    var_1 = leaf_pattern_0.match(leaf_0, var_0)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern()
    leaf_pattern_1 = module_0.LeafPattern(int_0, str_0)
    bytes_0 = b'\xf0\xfb\xbfm'
    bool_0 = negated_pattern_0.match(bytes_0)
    var_2 = leaf_pattern_1.match(leaf_0)