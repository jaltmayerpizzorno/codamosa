# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 53
        str_0 = None
        list_0 = [int_0, int_0]
        leaf_0 = module_0.Leaf(int_0, str_0, str_0, list_0)
        int_1 = 2200
        list_1 = [leaf_0, leaf_0, leaf_0]
        node_0 = module_0.Node(int_1, list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 34
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_4():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        negated_pattern_1 = module_0.NegatedPattern()
        bool_0 = negated_pattern_1.match_seq(negated_pattern_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "_31<\r'b"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -560
        list_0 = None
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '_'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 1468
        str_1 = 'd|>i5Mb\t!WP 5"'
        leaf_0 = module_0.Leaf(int_0, str_1, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '_'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = -2211
        list_0 = []
        tuple_0 = (int_0, str_0, grammar_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'q{}\x0cSS'
        int_0 = 21
        none_type_0 = None
        leaf_pattern_0 = module_0.LeafPattern(none_type_0, str_0)
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
        str_1 = leaf_0.__str__()
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '_'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bytes_0 = b'\xc4O\x9aN\xe8W\xae\xa5'
        bool_0 = wildcard_pattern_0.match_seq(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -1917
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '_'
        int_0 = 2391
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        any_1 = wildcard_pattern_0.optimize()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, any_0, str_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_2.append_child(node_0)
        grammar_0 = module_1.Grammar()
        bool_0 = wildcard_pattern_0.match_seq(node_1, grammar_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 4292
        list_0 = []
        list_1 = [list_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        node_0.invalidate_sibling_maps()
        str_0 = '?gyMK^'
        int_1 = -874
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 1019
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '_'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bytes_0 = b'('
        bool_0 = wildcard_pattern_0.match(bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '_'
        int_0 = 286
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        bytes_0 = b''
        str_1 = 'Vagu'
        bool_0 = wildcard_pattern_0.match_seq(bytes_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = ''
        int_0 = -537
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 1
        str_0 = 'valu'
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.leaves()
        grammar_0 = module_1.Grammar()
        optional_0 = None
        tuple_0 = (int_0, str_0, optional_0, int_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '?gyMK^'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        grammar_0 = module_1.Grammar()
        int_0 = 6
        optional_0 = None
        str_1 = 'bare_name'
        leaf_0 = module_0.Leaf(int_0, str_1)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        list_0 = [leaf_2]
        tuple_0 = (int_0, str_0, optional_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
        bytes_0 = b'01\x1e\xdaP\xa0\r]\xde'
        bool_0 = wildcard_pattern_0.match_seq(bytes_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 50
        str_0 = '^'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.leaves()
        str_1 = leaf_0.__repr__()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        leaf_1 = leaf_0.clone()
        var_1 = leaf_pattern_0.match(leaf_0, var_0)
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 675
        grammar_0.report()
        leaf_2 = leaf_1.clone()
        list_1 = [leaf_2, leaf_0]
        node_0 = module_0.Node(int_1, list_1, any_0, str_0, leaf_pattern_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 3500
        list_0 = []
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        node_0 = module_0.Node(int_0, list_0, var_0)
        node_1 = node_0.clone()
        int_1 = -4432
        node_0.set_child(int_1, node_1)
    except BaseException:
        pass

def test_case_24():
    try:
        grammar_0 = module_1.Grammar()
        float_0 = 1659.551
        negated_pattern_0 = module_0.NegatedPattern(float_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 50
        str_0 = 'g^'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        iterator_0 = leaf_1.leaves()
        str_1 = leaf_0.__repr__()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        leaf_2 = leaf_0.clone()
        var_1 = leaf_pattern_0.match(leaf_0, var_0)
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        any_0 = wildcard_pattern_0.optimize()
        iterator_1 = leaf_0.leaves()
        negated_pattern_0 = module_0.NegatedPattern()
        int_1 = 1216
        list_1 = [leaf_1]
        node_0 = module_0.Node(int_1, list_1)
        node_1 = node_0.clone()
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '_'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = None
        int_1 = 187
        int_2 = -2442
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_0, tuple_0)
        node_0 = None
        list_0 = [node_0, node_0, node_0]
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 3000
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        leaf_pattern_0 = module_0.LeafPattern()
        node_1 = node_0.clone()
        node_1.update_sibling_maps()
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '_'
        int_0 = 2408
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        dict_0 = {}
        bool_0 = wildcard_pattern_0.match_seq(dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = -460
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 50
        str_0 = 'NX<+8W>\x0c\x0b.PF%V8'
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        node_0 = None
        grammar_0 = module_1.Grammar()
        var_0 = leaf_pattern_0.match(node_0, grammar_0)
        grammar_1 = module_1.Grammar()
        var_1 = grammar_1.copy()
        leaf_pattern_1 = module_0.LeafPattern(int_0, str_0, str_0)
        str_1 = 'bar_n>e'
        none_type_0 = None
        node_pattern_0 = module_0.NodePattern(none_type_0, str_1)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 50
        str_0 = '^'
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.leaves()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        leaf_1 = leaf_0.clone()
        var_1 = leaf_pattern_0.match(leaf_0, var_0)
        iterator_1 = leaf_0.leaves()
        wildcard_pattern_0 = module_0.WildcardPattern(int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = -147
        grammar_0 = module_1.Grammar()
        optional_0 = None
        set_0 = {grammar_0, grammar_0, optional_0}
        optional_1 = None
        tuple_0 = (int_0, optional_0, set_0, optional_1)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = '_'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        optional_0 = None
        node_pattern_0 = module_0.NodePattern(optional_0, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'test'
        int_0 = 2770
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, str_0, str_0)
        str_1 = node_0.__repr__()
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '_'
        int_0 = 2391
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        any_1 = wildcard_pattern_0.optimize()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, any_0, str_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_2.append_child(node_0)
        node_3 = node_1.clone()
        iterator_0 = node_1.pre_order()
        node_2.append_child(node_3)
        grammar_0 = module_1.Grammar()
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = wildcard_pattern_0.match_seq(negated_pattern_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '_'
        int_0 = 2382
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, any_0, str_0)
        node_0.invalidate_sibling_maps()
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        negated_pattern_0 = module_0.NegatedPattern()
        iterator_0 = negated_pattern_0.generate_matches(node_2)
        str_1 = node_2.__str__()
        node_0.insert_child(int_0, node_1)
        int_1 = 1880
        node_pattern_0 = module_0.NodePattern(int_1, str_1)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 321
        node_pattern_0 = module_0.NodePattern(int_0, int_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 50
        str_0 = '^'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        int_1 = None
        leaf_pattern_0 = module_0.LeafPattern(int_1, str_0)
        str_1 = None
        leaf_0 = module_0.Leaf(int_0, str_1)
        iterator_0 = leaf_0.post_order()
        str_2 = leaf_0.__repr__()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        var_1 = leaf_pattern_0.match(leaf_0)
        leaf_1 = leaf_0.clone()
        var_2 = leaf_pattern_0.match(leaf_0, var_0)
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        int_2 = 1216
        list_1 = [leaf_1]
        node_0 = module_0.Node(int_2, list_1)
        leaf_pattern_1 = module_0.LeafPattern(int_0, str_0)
        bytes_0 = b'\xf0\xbfm'
        bool_1 = negated_pattern_0.match(bytes_0)
        node_1 = node_0.clone()
        str_3 = node_1.__repr__()
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 25
        str_0 = 'a'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        var_0 = repr(leaf_pattern_0)
    except BaseException:
        pass