# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0
import typesystem.base as module_1

def test_case_0():
    try:
        int_0 = 294
        str_0 = ''
        token_0 = module_0.Token(int_0, int_0, int_0, str_0)
        token_1 = module_0.Token(str_0, int_0, int_0)
        bool_0 = token_1.__eq__(token_1)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -2200.348231
        set_0 = {float_0, float_0, float_0, float_0}
        list_0 = [set_0, float_0, float_0, set_0]
        bytes_0 = b"\xaa'\xcdW\xca\x85\xfb\x8c}\xb1\x91"
        int_0 = -2013
        int_1 = -640
        token_0 = module_0.Token(bytes_0, int_0, int_1)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1556.0
        list_0 = [float_0]
        int_0 = 190
        int_1 = -2776
        token_0 = module_0.Token(float_0, int_0, int_1)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        float_0 = -2350.964
        int_0 = 2147
        token_0 = module_0.Token(float_0, int_0, int_0)
        bool_0 = token_0.__eq__(float_0)
        int_1 = 1
        token_1 = module_0.Token(float_0, int_1, int_1)
        token_2 = token_1.lookup_key(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '?OPiOR*T-r.S^Mm+.'
        int_0 = -1688
        list_token_0 = module_0.ListToken(str_0, int_0, int_0)
        int_1 = 2801
        int_2 = 6
        list_token_1 = module_0.ListToken(str_0, int_1, int_2)
        list_0 = []
        token_0 = list_token_1.lookup(list_0)
        bool_0 = token_0.__eq__(list_token_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'$\x01\x98\xa6\xce^d}\x0b\xce\xd7'
        list_0 = [bytes_0, bytes_0, bytes_0]
        int_0 = 4
        scalar_token_0 = module_0.ScalarToken(list_0, int_0, int_0)
        any_0 = scalar_token_0.__hash__()
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        dict_token_0 = module_0.DictToken(*list_0, **dict_0)
        dict_token_1 = module_0.DictToken(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'9\xa9\xb6\x1d1w\x89\x04&\xf9\x14'
        int_0 = -3998
        int_1 = 25
        str_0 = '#$_ uP^;~=FyTg='
        scalar_token_0 = module_0.ScalarToken(bytes_0, int_0, int_1, str_0)
        any_0 = scalar_token_0.__hash__()
        dict_0 = {scalar_token_0: any_0}
        list_0 = [dict_0, dict_0, dict_0]
        list_1 = [dict_0, dict_0, list_0]
        dict_token_0 = module_0.DictToken(*list_1)
        int_2 = 2372
        any_1 = scalar_token_0.__hash__()
        list_2 = [any_1, scalar_token_0, int_2]
        int_3 = None
        list_token_0 = module_0.ListToken(scalar_token_0, int_3, int_3)
        int_4 = 529
        int_5 = 1
        token_0 = module_0.Token(int_4, int_1, int_5)
        str_1 = None
        bool_0 = token_0.__eq__(str_1)
        str_2 = token_0.__repr__()
        token_1 = token_0.lookup(list_2)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'test_Token___eq__'
        var_0 = print(str_0)
        int_0 = 5
        var_1 = None
        int_1 = 5
        int_2 = -874
        token_0 = module_0.Token(int_1, int_0, int_2, str_0)
        list_0 = [var_1, str_0]
        int_3 = 6
        list_token_0 = module_0.ListToken(int_1, int_3, int_3, str_0)
        token_1 = list_token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = []
        int_0 = 0
        int_1 = 10
        str_0 = 'hello'
        list_token_0 = module_0.ListToken(var_0, int_0, int_1, str_0)
        int_2 = 1
        position_0 = module_1.Position(int_2, int_2, int_0)
        int_3 = 11
        position_1 = module_1.Position(int_2, int_3, int_1)
        var_1 = []
        token_0 = list_token_0.lookup(var_1)
        bool_0 = token_0.__eq__(list_token_0)
        bool_1 = False
        list_0 = [position_1, var_0, bool_1]
        token_1 = list_token_0.lookup_key(list_0)
    except BaseException:
        pass