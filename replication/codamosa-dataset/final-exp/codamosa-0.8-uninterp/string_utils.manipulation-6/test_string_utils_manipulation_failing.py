# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        str_0 = '3RI0\\Yl>RR3X'
        int_0 = 1550
        str_1 = module_0.roman_encode(int_0)
        bool_0 = module_0.booleanize(str_1)
        str_2 = module_0.snake_case_to_camel(str_1, bool_0, str_0)
        str_3 = "'zd\x0c^sJ@)\nT/J"
        str_4 = '~Q}'
        str_5 = module_0.compress(str_4)
        str_6 = module_0.slugify(str_3)
        str_7 = '(h%_kpP~4_S^P@UZJi\t/'
        str_8 = 'f\x0c7('
        str_9 = module_0.prettify(str_8)
        int_1 = module_0.roman_decode(str_7)
    except BaseException:
        pass

def test_case_1():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        int_0 = 4228
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'u=8vFv@Ud\\2d'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        str_1 = module_0.strip_html(str_0)
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'hS"z8Y)'
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'G1:;DOYC'
        str_1 = module_0.compress(str_0)
        str_2 = 'GDwb+Mk$77\'vx"7&'
        str_3 = module_0.asciify(str_2)
        str_4 = module_0.decompress(str_3)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        str_1 = module_0.prettify(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'u=8vFv@Ud\\2d'
        str_1 = module_0.prettify(str_0)
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = None
        var_0 = module_0.camel_case_to_snake(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        str_1 = module_0.snake_case_to_camel(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        str_1 = module_0.shuffle(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        str_1 = module_0.reverse(str_0)
        str_2 = None
        bool_0 = module_0.booleanize(str_2)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = None
        str_1 = module_0.strip_margin(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '{.2jpc{B.7!7%I\x0b'
        str_1 = ''
        str_2 = module_0.snake_case_to_camel(str_1, str_0)
        str_3 = '0'
        str_4 = module_0.strip_html(str_3)
        str_5 = '%NPt,\\J4e62lT )u'
        str_6 = module_0.slugify(str_5)
        str_7 = module_0.roman_encode(str_4)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '@|sfvWg]H'
        bool_0 = True
        str_1 = module_0.strip_html(str_0, bool_0)
        str_2 = '*asG\t"\n&a{v&!L6U'
        str_3 = module_0.decompress(str_1, str_2)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        str_1 = '<TN'
        str_2 = module_0.shuffle(str_1)
        str_3 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'IC-tA;#n`u\t'
        str_1 = module_0.compress(str_0)
        str_2 = module_0.asciify(str_1)
        str_3 = module_0.decompress(str_2)
        str_4 = '^([+\\-]?)((\\d+)(\\.\\d+)?(e\\d+)?|\\.\\d+)$'
        int_0 = 688
        str_5 = None
        dict_0 = {str_4: str_2, str_5: int_0, str_2: str_3}
        tuple_0 = (int_0, dict_0)
        string_formatter_0 = module_0.__StringFormatter(tuple_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '"HaR"Ld^5bh2\\^v6Xm'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'T}uNyop'
        str_1 = 'Zzo!s&CT"G'
        str_2 = ''
        str_3 = module_0.prettify(str_2)
        bool_0 = module_0.booleanize(str_1)
        str_4 = module_0.asciify(str_0)
        str_5 = None
        str_6 = module_0.reverse(str_5)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'K\x0czaEC'
        roman_numbers_0 = module_0.__RomanNumbers()
        dict_0 = {}
        roman_numbers_1 = module_0.__RomanNumbers(**dict_0)
        str_1 = 'R `l5a\r{MN'
        str_2 = module_0.strip_margin(str_1)
        str_3 = ' <5iJ;TblDQd\x0c'
        int_0 = 3007
        str_4 = module_0.compress(str_0, str_3, int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'Input must be a non empty string'
        str_1 = module_0.compress(str_0)
        str_2 = 'Q'
        str_3 = module_0.slugify(str_2, str_1)
        str_4 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
        str_5 = module_0.prettify(str_4)
        str_6 = 'itcZ3t/q3[~{X'
        str_7 = module_0.strip_margin(str_6)
        str_8 = module_0.shuffle(str_7)
        str_9 = 'gT\tbJky"b/,r$'
        str_10 = module_0.reverse(str_9)
        str_11 = '\'r-O0A3^%%>"}#8M <%'
        int_0 = module_0.roman_decode(str_11)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 1533
        str_0 = module_0.roman_encode(int_0)
        bool_0 = module_0.booleanize(str_0)
        str_1 = 'pm"'
        str_2 = '9T,{\rBr\\QV/; {XJ'
        str_3 = module_0.snake_case_to_camel(str_1, bool_0, str_2)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_4 = "'zd\x0c^sJ@)\nT/J"
        str_5 = '~Q}'
        str_6 = module_0.compress(str_5)
        str_7 = module_0.slugify(str_4)
        str_8 = module_0.prettify(str_7)
        str_9 = ']4js.?L|R<!VF\x0ci'
        str_10 = module_0.slugify(str_9)
        str_11 = 'n!:<'
        str_12 = module_0.prettify(str_11)
        int_1 = module_0.roman_decode(str_9)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'k=\r}r#!\rPgP/(v"W'
        str_1 = 'A:a?P_[-Z(3&Gj'
        int_0 = -2148
        str_2 = module_0.compress(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'd\\'
        str_1 = module_0.slugify(str_0)
        str_2 = None
        str_3 = module_0.strip_html(str_2)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '(_)([a-z\\d])'
        str_1 = module_0.snake_case_to_camel(str_0)
        int_0 = 3282
        str_2 = module_0.roman_encode(int_0)
        str_3 = module_0.compress(str_2, int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'SPACES_INSIDE'
        str_1 = "(FO@D'4Mm^\t1ZAoMwcn&"
        bytes_0 = None
        var_0 = module_0.camel_case_to_snake(str_1, bytes_0)
        str_2 = module_0.snake_case_to_camel(str_0)
        str_3 = '^3[47]\\d{13}$'
        bool_0 = True
        str_4 = module_0.strip_html(str_3, bool_0)
        str_5 = '3RI0\\Yl>RR3X'
        int_0 = 1533
        str_6 = module_0.roman_encode(int_0)
        str_7 = 'i$QM\\OOsUR\naO\n*R\n7'
        str_8 = module_0.compress(str_7)
        str_9 = '3Q'
        str_10 = module_0.slugify(str_8, str_9)
        str_11 = module_0.compress(str_5)
        str_12 = None
        str_13 = module_0.slugify(str_12, str_9)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 1533
        str_0 = module_0.roman_encode(int_0)
        bool_0 = module_0.booleanize(str_0)
        str_1 = ''
        str_2 = module_0.compress(str_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'SPACES_INSIDE'
        str_1 = "(FO@D'4Mm^\t1ZAoMwcn&"
        bytes_0 = None
        var_0 = module_0.camel_case_to_snake(str_1, bytes_0)
        str_2 = module_0.snake_case_to_camel(str_0)
        str_3 = '^3[47]\\d{13}$'
        bool_0 = True
        str_4 = module_0.strip_html(str_3, bool_0)
        int_0 = 1533
        str_5 = module_0.roman_encode(int_0)
        str_6 = '|O5aj|=2TF`fB\x0bD_Q'
        str_7 = '{pY?Ob5\njY)^}'
        int_1 = None
        str_8 = module_0.compress(str_6, str_7, int_1)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'SPACES_INSIDE'
        str_1 = "(FO@D'4Mm^\t1ZAoMwcn&"
        bytes_0 = None
        var_0 = module_0.camel_case_to_snake(str_1, bytes_0)
        str_2 = module_0.snake_case_to_camel(str_0)
        str_3 = '^3[47]\\d{13}$'
        bool_0 = True
        str_4 = module_0.strip_html(str_3, bool_0)
        int_0 = 1534
        str_5 = module_0.roman_encode(int_0)
        str_6 = 'BMr@,{A9<5XU_~3g\x0cB]'
        str_7 = module_0.compress(str_6)
        str_8 = 'g_[$%F:Kh^wqcvS,'
        str_9 = module_0.slugify(str_8, str_5)
        str_10 = "\n    Checks if the string is an isogram (https://en.wikipedia.org/wiki/Isogram).\n\n    *Examples:*\n\n    >>> is_isogram('dermatoglyphics') # returns true\n    >>> is_isogram('hello') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if isogram, false otherwise.\n    "
        str_11 = module_0.prettify(str_10)
        str_12 = module_0.strip_html(str_6)
        str_13 = '~fS5kIQ(w\x0biYbYk+\tc|'
        int_1 = module_0.roman_decode(str_13)
    except BaseException:
        pass