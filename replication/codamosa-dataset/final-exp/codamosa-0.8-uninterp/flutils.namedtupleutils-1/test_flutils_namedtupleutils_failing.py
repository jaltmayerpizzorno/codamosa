# Automatically generated by Pynguin.
import flutils.namedtupleutils as module_0
import types as module_1
import collections.abc as module_2

def test_case_0():
    try:
        var_0 = None
        var_1 = module_0.to_namedtuple(var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ';\n'
        str_1 = 'Q!*It/d)d}n'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        var_0 = module_0.to_namedtuple(dict_0)
        simple_namespace_0 = module_1.SimpleNamespace()
        var_1 = module_0.to_namedtuple(simple_namespace_0)
        var_2 = module_0.to_namedtuple(simple_namespace_0)
        var_3 = module_0.to_namedtuple(simple_namespace_0)
        var_4 = module_0.to_namedtuple(simple_namespace_0)
        var_5 = module_0.to_namedtuple(simple_namespace_0)
        var_6 = module_0.to_namedtuple(simple_namespace_0)
        var_7 = module_0.to_namedtuple(simple_namespace_0)
        var_8 = module_0.to_namedtuple(simple_namespace_0)
        var_9 = module_0.to_namedtuple(simple_namespace_0)
        dict_1 = {var_4: simple_namespace_0}
        var_10 = module_0.to_namedtuple(simple_namespace_0)
        var_11 = module_0.to_namedtuple(dict_1)
        var_12 = module_0.to_namedtuple(simple_namespace_0)
        mapping_0 = module_2.Mapping()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'author_email'
        var_0 = module_0.to_namedtuple(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'c3aHLRi j-i0y'
        str_1 = 'b64'
        str_2 = 'q'
        dict_0 = {str_1: str_1, str_2: str_2, str_2: str_1}
        simple_namespace_0 = module_1.SimpleNamespace()
        var_0 = module_0.to_namedtuple(simple_namespace_0)
        list_0 = [str_2, dict_0, var_0, str_2, dict_0, str_2]
        float_0 = -2533.7
        tuple_0 = (str_0, list_0, list_0, float_0)
        var_1 = module_0.to_namedtuple(tuple_0)
        tuple_1 = None
        var_2 = module_0.to_namedtuple(tuple_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xado\xe0\xdae\x01B\x9e\xa7\xa8\x99\x86o\x03^$b\x8b\xb7'
        dict_0 = {bytes_0: bytes_0}
        list_0 = [dict_0]
        list_1 = [list_0, list_0]
        var_0 = module_0.to_namedtuple(list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'c3aHLRi j-i0y'
        str_1 = '(n+Lg<]q8|%..Cp'
        dict_0 = {}
        simple_namespace_0 = module_1.SimpleNamespace(**dict_0)
        var_0 = module_0.to_namedtuple(simple_namespace_0)
        str_2 = 'V\x0c'
        dict_1 = {str_0: str_0, str_1: str_0, str_2: str_2, str_0: str_0}
        simple_namespace_1 = module_1.SimpleNamespace(**dict_1)
        var_1 = module_0.to_namedtuple(simple_namespace_1)
        var_2 = module_0.to_namedtuple(simple_namespace_1)
        str_3 = 'b64'
        str_4 = 'q'
        dict_2 = {str_3: str_3, str_4: str_4, str_4: str_3}
        simple_namespace_2 = module_1.SimpleNamespace()
        var_3 = module_0.to_namedtuple(simple_namespace_2)
        var_4 = module_0.to_namedtuple(simple_namespace_2)
        str_5 = 'VCv{7CG+\rGEv3'
        list_0 = [str_5, dict_2, str_5, dict_2, str_4]
        float_0 = -2533.7
        tuple_0 = (str_5, list_0, list_0, float_0)
        var_5 = module_0.to_namedtuple(tuple_0)
        tuple_1 = None
        list_1 = [var_5, dict_2, dict_2, float_0]
        var_6 = module_0.to_namedtuple(list_1)
        var_7 = module_0.to_namedtuple(tuple_1)
    except BaseException:
        pass