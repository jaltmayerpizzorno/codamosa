# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = '!s"qb7s>Mb1?@U:OX'
    str_1 = module_0.parent(str_0)

def test_case_2():
    str_0 = "0'"
    bool_0 = module_0.is_public_family(str_0)

def test_case_3():
    str_0 = 'typing.Tuple'
    int_0 = 3
    bool_0 = True
    parser_0 = module_0.Parser(int_0, bool_0)
    parser_0.parse(str_0, str_0)

def test_case_4():
    str_0 = 'typing.Tuple'
    int_0 = 3
    bool_0 = True
    parser_0 = module_0.Parser(int_0, bool_0)
    parser_0.parse(str_0, str_0)
    str_1 = "aBByI.y`VqW'HzOFc"
    expr_0 = module_1.expr()
    list_0 = [expr_0, expr_0]
    list_1 = []
    parser_0.class_api(str_1, str_0, list_0, list_1)

def test_case_5():
    str_0 = 'D'
    str_1 = module_0.esc_underscore(str_0)

def test_case_6():
    str_0 = 'RTWR'
    str_1 = module_0.doctest(str_0)

def test_case_7():
    str_0 = 'g<FI'
    list_0 = [str_0]
    str_1 = '--version'
    dict_0 = {str_0: str_0, str_0: list_0, str_0: list_0, str_1: str_1}
    import_from_0 = module_1.ImportFrom(**dict_0)
    dict_1 = {}
    str_2 = '4IKn8!'
    str_3 = 'Uz\x0ct.J:|\\l#ySrKSDt>'
    dict_2 = {str_2: str_3}
    parser_0 = module_0.Parser(dict_1, dict_2, dict_2)
    parser_0.imports(str_0, import_from_0)

def test_case_8():
    str_0 = 'JHn]J~KPY*~'
    import_from_0 = module_1.ImportFrom()
    bool_0 = False
    int_0 = 933
    parser_0 = module_0.Parser(bool_0, int_0)
    parser_0.imports(str_0, import_from_0)

def test_case_9():
    str_0 = '\x0cNL'
    assign_0 = None
    bool_0 = False
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    parser_0.globals(str_0, assign_0)

def test_case_10():
    parser_0 = module_0.Parser()
    str_0 = parser_0.compile()
    str_1 = 'collections.ChainMap'
    str_2 = module_0.parent(str_1)

def test_case_11():
    expr_0 = module_1.expr()
    str_0 = module_0.const_type(expr_0)

def test_case_12():
    int_0 = 3
    bool_0 = True
    parser_0 = module_0.Parser(int_0, bool_0)
    str_0 = '<Yr~+|%zr#6<sh(\x0c'
    str_1 = '=Bb)6K$'
    list_0 = []
    stmt_0 = None
    list_1 = [stmt_0, stmt_0]
    parser_0.class_api(str_0, str_1, list_0, list_1)

def test_case_13():
    str_0 = '1 + 2'
    var_0 = module_1.parse(str_0)
    str_1 = ''
    var_1 = {}
    resolver_0 = module_0.Resolver(str_1, var_1, str_1)
    var_2 = resolver_0.visit(var_0)
    var_3 = module_1.unparse(var_2)

def test_case_14():
    str_0 = 'S\tna66 '
    list_0 = [str_0]
    dict_0 = {}
    str_1 = '#7\x0bx'
    str_2 = 'm='
    str_3 = module_0.doctest(str_2)
    resolver_0 = module_0.Resolver(str_0, dict_0, str_1)
    subscript_0 = module_1.Subscript(*list_0)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
    str_4 = module_0.parent(str_0)

def test_case_15():
    str_0 = '^\tna66c'
    list_0 = [str_0]
    attribute_0 = module_1.Attribute(*list_0)
    dict_0 = {}
    str_1 = '#7\x0bx'
    str_2 = 'b='
    str_3 = module_0.doctest(str_2)
    resolver_0 = module_0.Resolver(str_0, dict_0, str_1)
    subscript_0 = module_1.Subscript(*list_0)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
    str_4 = module_0.parent(str_0)

def test_case_16():
    int_0 = 3103
    str_0 = "[`nMm'&4WL\r\x0b^^\n"
    str_1 = module_0.code(str_0)
    dict_0 = {}
    dict_1 = {}
    parser_0 = module_0.Parser(int_0, dict_0, dict_1)
    str_2 = parser_0.compile()
    dict_2 = {str_0: str_0, str_2: str_2, str_0: str_0}
    str_3 = 'a\\C'
    bool_0 = module_0.is_magic(str_3)
    list_0 = [dict_2]
    parser_1 = module_0.Parser()
    ann_assign_0 = module_1.AnnAssign(*list_0)
    parser_0.globals(str_2, ann_assign_0)

def test_case_17():
    int_0 = 3103
    dict_0 = {}
    dict_1 = {}
    parser_0 = module_0.Parser(int_0, dict_0, dict_1)
    str_0 = parser_0.compile()
    dict_2 = {str_0: str_0, str_0: str_0, str_0: str_0}
    str_1 = 'k7p|q'
    bool_0 = module_0.is_magic(str_1)
    list_0 = [dict_2]
    parser_1 = module_0.Parser()
    ann_assign_0 = module_1.AnnAssign(*list_0)
    parser_0.globals(str_0, ann_assign_0)

def test_case_18():
    str_0 = 'typing.Tuple'
    int_0 = 3
    bool_0 = True
    parser_0 = module_0.Parser(int_0, bool_0)
    parser_0.parse(str_0, str_0)
    str_1 = '{Ec]t).(ct_+x?,'
    expr_0 = module_1.expr()
    list_0 = [str_1]
    str_2 = '\rE+Cf`'
    str_3 = '|q!Fe('
    dict_0 = {str_1: int_0, str_2: parser_0, str_3: str_1, str_2: expr_0}
    name_0 = module_1.Name(*list_0, **dict_0)
    str_4 = 'show the result instead write the file'
    str_5 = None
    str_6 = '!6`yU'
    str_7 = 'YM)fiWwgZ(li52'
    dict_1 = {str_5: str_5, str_6: str_0, str_7: str_6, str_0: str_6}
    resolver_0 = module_0.Resolver(str_4, dict_1)
    a_s_t_0 = resolver_0.visit_Name(name_0)

def test_case_19():
    str_0 = ' <= E'
    str_1 = module_0.code(str_0)
    str_2 = '4gvE\n_KW)iS(g\x0c\x0b'
    dict_0 = {str_1: str_2, str_0: str_2, str_0: str_1, str_0: str_0, str_1: str_1}
    parser_0 = module_0.Parser(dict_0)
    str_3 = module_0.doctest(str_0)
    str_4 = '*'
    list_0 = [str_4]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    dict_1 = {}
    assign_0 = module_1.Assign(*list_0, **dict_1)
    parser_0.globals(str_1, assign_0)

def test_case_20():
    str_0 = 'bzA~&=TG8X;L^&re(:cg'
    str_1 = ' <= '
    list_0 = []
    str_2 = module_0.code(str_1)
    list_1 = []
    str_3 = '44gvE\n_KW)iSg\x0c\x0b'
    str_4 = "6%K&S\\i+'EIRxhm?r"
    dict_0 = {str_0: str_3, str_4: str_3, str_4: str_0, str_4: str_4, str_1: str_0}
    parser_0 = module_0.Parser(dict_0)
    parser_0.class_api(str_3, str_0, list_0, list_1)
    attribute_0 = module_1.Attribute()
    dict_1 = {str_0: str_0}
    str_5 = 'H5l6"a'
    import_from_0 = module_1.ImportFrom()
    parser_0.imports(str_5, import_from_0)
    str_6 = ''
    str_7 = module_0.parent(str_1)
    list_2 = [str_6]
    ann_assign_0 = module_1.AnnAssign(*list_2)
    parser_0.globals(str_3, ann_assign_0)
    dict_2 = {}
    assign_0 = module_1.Assign(*list_2, **dict_2)
    name_0 = module_1.Name(*list_2, **dict_2)
    resolver_0 = module_0.Resolver(str_5, dict_1)
    a_s_t_0 = resolver_0.visit_Name(name_0)

def test_case_21():
    str_0 = ' <= '
    str_1 = '4`vE\n_KW)iSg\x0c\x0b'
    dict_0 = {str_0: str_1, str_0: str_1, str_0: str_0, str_0: str_0, str_0: str_0}
    str_2 = module_0.doctest(str_0)
    str_3 = "<'CVXl1Epl11R\\27u>"
    str_4 = module_0.code(str_3)
    import_from_0 = module_1.ImportFrom()
    str_5 = module_0.parent(str_0)
    list_0 = [str_2]
    bool_0 = module_0.is_public_family(str_5)
    ann_assign_0 = module_1.AnnAssign(*list_0)
    dict_1 = {}
    assign_0 = module_1.Assign(*list_0, **dict_1)
    name_0 = module_1.Name(*list_0, **dict_1)
    str_6 = ''
    resolver_0 = module_0.Resolver(str_6, dict_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)

def test_case_22():
    str_0 = 'D'
    str_1 = module_0.esc_underscore(str_0)
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0)
    parser_0.parse(str_1, str_1)

def test_case_23():
    var_0 = None
    parser_0 = module_0.Parser(var_0)
    str_0 = ''
    var_1 = []
    bool_0 = False
    iterator_0 = parser_0.func_ann(str_0, var_1, has_self=bool_0, cls_method=bool_0)
    var_2 = list(iterator_0)