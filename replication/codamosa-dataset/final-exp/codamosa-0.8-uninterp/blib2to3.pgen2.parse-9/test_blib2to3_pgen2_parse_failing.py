# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -1179
        str_0 = 'U9Pa1ZvgYn(\n)W!lA<-'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        bytes_0 = b'\xda\xf9\t\x9b\x1d\x81\x02\x83\xc1\x81\np\x80q\xf8r\x1ci'
        node_0 = None
        list_0 = [bytes_0, node_0, node_0, node_0]
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 46
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 654
        str_0 = 'RG'
        int_1 = -1469
        int_2 = -1219
        tuple_0 = (int_0, int_2)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        dict_0 = {grammar_0: grammar_0, grammar_0: grammar_0}
        parser_0 = module_1.Parser(grammar_0, dict_0)
        parser_0.shift(int_0, str_0, int_1, tuple_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 110
        tuple_0 = None
        str_0 = 'umwT,"\x0bB>{q?MY5/'
        int_1 = 374
        int_2 = 49
        tuple_1 = (int_1, int_2)
        tuple_2 = (str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_0, int_0, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        var_0 = grammar_0.copy()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'V,\tT|i'
        int_0 = 12
        tuple_0 = None
        parse_error_0 = module_1.ParseError(str_0, int_0, str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        path_like_0 = None
        tuple_1 = (int_0, str_0, tuple_0, path_like_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -1250
        str_0 = 'Leaf'
        int_1 = -890
        tuple_0 = None
        parse_error_0 = module_1.ParseError(str_0, int_0, str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0, grammar_0)
        parser_0.setup(int_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        str_0 = None
        int_1 = parser_0.classify(int_0, str_0, tuple_0)
    except BaseException:
        pass