# Automatically generated by Pynguin.
import pypara.dcc as module_0
import datetime as module_1
import pypara.currencies as module_2

def test_case_0():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        date_0 = None
        float_0 = -1877.047
        decimal_0 = module_0.dcfc_act_365_a(date_0, date_0, date_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 2
        list_0 = [int_0, int_0, int_0]
        date_0 = module_1.date(*list_0)
        decimal_0 = module_0.dcfc_30_360_german(date_0, date_0, date_0)
        decimal_1 = module_0.dcfc_30_e_360(date_0, date_0, date_0)
        decimal_2 = module_0.dcfc_act_365_l(date_0, date_0, date_0)
        date_1 = module_1.date()
    except BaseException:
        pass

def test_case_2():
    try:
        date_0 = None
        decimal_0 = module_0.dcfc_30_360_isda(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 12
        list_0 = [int_0, int_0, int_0]
        date_0 = module_1.date(*list_0)
        decimal_0 = module_0.dcfc_30_e_plus_360(date_0, date_0, date_0)
        decimal_1 = module_0.dcfc_30_e_360(date_0, date_0, date_0, decimal_0)
        decimal_2 = module_0.dcfc_nl_365(date_0, date_0, date_0, decimal_0)
        decimal_3 = module_0.dcfc_30_360_isda(date_0, date_0, date_0)
        decimal_4 = module_0.dcfc_act_360(date_0, date_0, date_0)
        date_1 = module_1.date()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 12
        list_0 = [int_0, int_0, int_0]
        date_0 = module_1.date(*list_0)
        decimal_0 = module_0.dcfc_30_e_plus_360(date_0, date_0, date_0)
        decimal_1 = module_0.dcfc_30_e_360(date_0, date_0, date_0, decimal_0)
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        decimal_2 = module_0.dcfc_nl_365(date_0, date_0, date_0, decimal_1)
        decimal_3 = module_0.dcfc_30_360_german(date_0, date_0, date_0)
        dict_0 = {}
        date_1 = module_1.date(**dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        date_0 = None
        bytes_0 = b'\x8f\r\x02\xdf\xc9<f\x89\xd9\xe3\xd6d\x9c\xba\x06\xb3B'
        decimal_0 = module_0.dcfc_30_e_plus_360(date_0, date_0, date_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'a-A1Znb3("-^FXv'
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_1 = 'Q4?pW[u\tow,YHt*yYs^c'
        list_0 = [d_c_c_registry_machinery_0, str_1, str_1, str_0]
        d_c_c_0 = module_0.DCC(*list_0)
        d_c_c_registry_machinery_0.register(d_c_c_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\x0c'
        str_1 = 'vD*\n?'
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        optional_0 = d_c_c_registry_machinery_0.find(str_1)
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        str_2 = "OHHz!g/\rS'Yy"
        float_0 = -1168.7066
        list_0 = [str_2, str_0, float_0, str_0]
        d_c_c_0 = module_0.DCC(*list_0)
        d_c_c_registry_machinery_1.register(d_c_c_0)
        optional_1 = d_c_c_registry_machinery_1.find(str_2)
        dict_0 = {str_0: optional_1}
        date_0 = module_1.date(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '^I'
        date_0 = None
        list_0 = [str_0]
        decimal_0 = module_0.dcfc_30_360_german(date_0, date_0, date_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 7
        int_1 = 1
        list_0 = [int_0, int_0, int_1]
        date_0 = module_1.date(*list_0)
        decimal_0 = module_0.dcfc_act_act(date_0, date_0, date_0)
        decimal_1 = module_0.dcfc_act_act_icma(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Y5+6U-Z9Obn'
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        list_0 = [d_c_c_registry_machinery_0, str_0, d_c_c_registry_machinery_0, str_0]
        d_c_c_0 = module_0.DCC(*list_0)
        date_0 = None
        decimal_0 = d_c_c_0.calculate_fraction(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\x0c'
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        list_0 = [str_0, str_0, str_0, d_c_c_registry_machinery_0]
        d_c_c_0 = module_0.DCC(*list_0)
        d_c_c_registry_machinery_0.register(d_c_c_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\x0c'
        str_1 = 'vD*\n?'
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        optional_0 = d_c_c_registry_machinery_0.find(str_1)
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        str_2 = "OHHz!g/\rS'Yy"
        float_0 = -1168.7066
        list_0 = [str_2, str_0, float_0, str_0]
        d_c_c_0 = module_0.DCC(*list_0)
        d_c_c_registry_machinery_1.register(d_c_c_0)
        d_c_c_registry_machinery_1.register(d_c_c_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '^I'
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_1 = '"_l]c:I=BA5+q'
        optional_0 = d_c_c_registry_machinery_0.find(str_1)
        date_0 = None
        float_0 = 2798.43365
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        int_0 = 305
        decimal_0 = None
        int_1 = 3402
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_1)
        set_0 = {currency_0, currency_0, currency_0}
        callable_0 = module_0.dcc(str_0, set_0)
        tuple_0 = (float_0, currency_type_0, callable_0, int_0)
        list_0 = [d_c_c_registry_machinery_0, optional_0, str_0, tuple_0]
        d_c_c_0 = module_0.DCC(*list_0)
        decimal_1 = d_c_c_0.calculate_daily_fraction(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 7
        int_1 = 1
        list_0 = [int_0, int_0, int_1]
        date_0 = module_1.date(*list_0)
        decimal_0 = module_0.dcfc_act_act(date_0, date_0, date_0)
        decimal_1 = module_0.dcfc_30_360_isda(date_0, date_0, date_0)
        d_c_c_0 = module_0.DCC(*list_0)
    except BaseException:
        pass