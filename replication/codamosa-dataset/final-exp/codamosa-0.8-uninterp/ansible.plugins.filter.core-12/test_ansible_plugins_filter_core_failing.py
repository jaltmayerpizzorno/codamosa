# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0

def test_case_0():
    try:
        bool_0 = None
        str_0 = '#'
        list_0 = [bool_0, str_0, str_0]
        dict_0 = {str_0: bool_0, str_0: bool_0, str_0: bool_0}
        var_0 = module_0.to_yaml(bool_0, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 129.4543
        set_0 = set()
        var_0 = module_0.to_yaml(set_0)
        tuple_0 = (float_0,)
        set_1 = set()
        var_1 = module_0.to_datetime(tuple_0, set_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "`bL']o2Gis3b"
        dict_0 = {str_0: str_0}
        bytes_0 = b'\xdd\x8f\xcey*_d'
        list_0 = [bytes_0, dict_0]
        var_0 = module_0.to_nice_yaml(dict_0, bytes_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'KZV5>uK!'
        var_0 = module_0.to_nice_json(str_0)
        bytes_0 = b'x '
        bytes_1 = b'=\xe6B8\x15\xed/g\xc6u\x17'
        var_1 = module_0.b64decode(bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'O!bj}s-C'
        var_0 = module_0.strftime(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 86415
        float_0 = 2049.3514
        var_0 = module_0.regex_escape(float_0)
        var_1 = module_0.strftime(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2
        dict_0 = {}
        var_0 = module_0.randomize_list(int_0, dict_0)
        bytes_0 = b'0\x11'
        dict_1 = {}
        var_1 = module_0.from_yaml_all(dict_1)
        var_2 = module_0.path_join(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ',2w$P@mDR$8h=n/p _uI'
        set_0 = {str_0, str_0}
        bytes_0 = b'\xaeD0\x8d?"\xa0\xe0z-\xc7V\x87\xa3\x9a\x9dU'
        var_0 = module_0.rand(str_0, set_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 1.0
        str_0 = 'tQ_'
        var_0 = module_0.get_hash(float_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = module_0.combine()
        dict_0 = None
        var_1 = module_0.get_hash(dict_0)
        str_0 = None
        var_2 = module_0.comment(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -978
        str_0 = 'g~[S{'
        var_0 = module_0.get_encrypted_password(int_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = module_0.combine()
        bytes_0 = b'\x95y\x7f.\xd9\nf\xc27_'
        float_0 = None
        var_1 = module_0.to_uuid(bytes_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -144.1
        set_0 = {float_0, float_0, float_0, float_0}
        set_1 = set()
        var_0 = module_0.to_uuid(set_0, set_1)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -2929.34
        var_0 = module_0.comment(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        tuple_0 = ()
        filter_module_0 = module_0.FilterModule()
        int_0 = -1384
        var_0 = module_0.extract(tuple_0, filter_module_0, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0]
        var_0 = module_0.to_json(list_1)
        var_1 = module_0.flatten(list_0)
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_2 = module_0.randomize_list(list_1)
        bool_0 = None
        set_0 = {bool_0}
        str_0 = '@'
        var_3 = module_0.do_groupby(filter_module_0, set_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = -236.733496
        list_0 = [float_0, float_0]
        var_0 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        complex_0 = None
        bytes_0 = b"2a\xd4\x90Zo\r\x9a~~\xb2\xe4wN'~("
        var_0 = module_0.subelements(complex_0, bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 86415
        dict_0 = {}
        list_0 = [dict_0, int_0]
        tuple_0 = None
        var_0 = module_0.rand(dict_0, list_0, dict_0, tuple_0)
        var_1 = module_0.dict_to_list_of_dict_key_value_elements(int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        complex_0 = None
        list_0 = [complex_0, complex_0]
        bytes_0 = b'\x16*\xaf*'
        str_0 = 'E2g0>IPw${Jj"_I'
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(list_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'\x9c\x9c\x9em\x916\x99\x8e\xf2\xd0\xa6@\xac\x11I!'
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '_syslog_facility'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.get_encrypted_password(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        list_0 = []
        str_0 = '=>'
        dict_0 = {}
        var_0 = module_0.regex_search(list_0, str_0, **dict_0)
        str_1 = ''
        var_1 = module_0.to_uuid(str_1)
        bytes_0 = b''
        str_2 = "4^G(z}rK z1Q>}%_'6"
        tuple_0 = (str_2,)
        var_2 = module_0.rand(bytes_0, tuple_0, list_0)
        float_0 = 926.59692
        var_3 = module_0.dict_to_list_of_dict_key_value_elements(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        float_0 = 4953.9
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.regex_escape(float_0, filter_module_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 2
        str_0 = ':class:`set` of values marked as ``no_log`` in the argument spec. This\n        is a temporary holding place for these values and may move in the future.\n        '
        tuple_0 = ()
        bool_0 = True
        var_0 = module_0.randomize_list(tuple_0, bool_0)
        var_1 = module_0.subelements(int_0, str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '={J@7B8H6<6yg\\i['
        dict_0 = {str_0: str_0}
        float_0 = -235.73
        var_0 = module_0.regex_findall(dict_0, float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'Z'
        float_0 = -1269.0
        var_0 = module_0.to_bool(float_0)
        set_0 = {str_0, str_0, str_0, str_0, str_0, str_0, str_0, str_0}
        var_1 = module_0.regex_search(str_0, set_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '\n  _raw:\n    description:\n      - random item\n    type: raw\n'
        list_0 = [str_0]
        dict_0 = {str_0: list_0, str_0: list_0, str_0: list_0}
        var_0 = module_0.regex_search(dict_0, str_0, *list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'py'
        var_0 = module_0.comment(str_0)
        filter_module_0 = None
        var_1 = module_0.to_bool(filter_module_0)
        list_0 = [str_0, str_0, str_0]
        str_1 = 'y(%~y^sB^WEe'
        var_2 = module_0.from_yaml_all(str_1)
        dict_0 = {var_0: var_0}
        str_2 = '{\x0blFLF1(tOZAI'
        str_3 = "x2E<'(f1]_Y@*/"
        list_1 = None
        str_4 = '8oHaw!o`D|Agv_ 8'
        dict_1 = {str_0: list_0, str_2: str_2, str_3: list_1, str_4: str_0}
        var_3 = module_0.regex_replace(list_0, dict_0, dict_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'I/Rs&\\ \\}l'
        str_1 = 'Amoyv+x"'
        bytes_0 = b''
        var_0 = module_0.from_yaml(bytes_0)
        var_1 = module_0.to_json(str_1)
        list_0 = [var_1, str_1, str_0]
        var_2 = module_0.to_uuid(list_0)
        int_0 = 425
        var_3 = module_0.rand(int_0, int_0, int_0, int_0)
    except BaseException:
        pass

def test_case_30():
    try:
        filter_module_0 = module_0.FilterModule()
        tuple_0 = None
        list_0 = [tuple_0]
        str_0 = 'cm\rHOf\x0b'
        dict_0 = {str_0: str_0, str_0: list_0}
        var_0 = module_0.combine(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'python python python'
        str_1 = 'y'
        var_0 = module_0.regex_search(str_0, str_1)
        list_0 = [var_0]
        int_0 = 1429
        var_1 = module_0.subelements(list_0, int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        float_0 = -236.733496
        str_0 = 'Op\t.2-\t:DV'
        bool_0 = False
        var_0 = module_0.extract(float_0, str_0, bool_0, float_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 632
        bool_0 = True
        list_0 = [bool_0, int_0]
        str_0 = ':$2&\\gCho{H'
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bytes_0 = b'{'
        complex_0 = None
        tuple_0 = (bytes_0, complex_0)
        var_0 = module_0.path_join(tuple_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'u*MW~x*2X}7'
        var_0 = module_0.path_join(str_0)
        list_0 = None
        float_0 = 667.829752
        bytes_0 = b'\xd51\xc3\xf8C\x9ab\x9b\xb2\x87\xb8'
        str_1 = 'i!c\ne'
        tuple_0 = (float_0, bytes_0, str_1)
        var_1 = module_0.mandatory(tuple_0)
        var_2 = module_0.randomize_list(list_0)
        str_2 = 'O!bj}s-C'
        var_3 = module_0.strftime(str_2, str_2)
    except BaseException:
        pass

def test_case_36():
    try:
        dict_0 = {}
        str_0 = 'EBhPA|Q"\'[A#{EYz'
        float_0 = None
        str_1 = "K,l\\pgZm'{$"
        var_0 = module_0.regex_replace(dict_0, str_0, float_0, str_1)
    except BaseException:
        pass

def test_case_37():
    try:
        bytes_0 = b'IF\x9c\xa8\n\xe3\xe0 Ar\xbe\xdc\xf3\xfc\xef\xa7'
        bool_0 = False
        list_0 = None
        float_0 = 2494.3
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.ternary(list_0, float_0, filter_module_0)
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 655
        bool_0 = False
        list_0 = [bool_0, int_0]
        str_0 = '7$2&\nCJetho&'
        str_1 = ''
        str_2 = "^\n;D2'i2n4Z{5f_`"
        dict_0 = {str_1: str_1, str_0: int_0, str_0: str_2}
        var_0 = module_0.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = '+1'
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.rand(filter_module_0, filter_module_0, str_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = '$'
        dict_0 = {}
        list_0 = [dict_0, dict_0, str_0]
        var_0 = module_0.subelements(list_0, str_0, str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 32686
        bool_0 = True
        filter_module_0 = None
        str_0 = '_v`a|N2\r'
        float_0 = -1615.6609664011596
        dict_0 = {str_0: bool_0, str_0: float_0, str_0: bool_0, str_0: str_0}
        list_0 = [dict_0, float_0, int_0, bool_0, float_0, filter_module_0, int_0]
        str_1 = ''
        var_0 = module_0.subelements(list_0, str_1)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 632
        bool_0 = True
        list_0 = [bool_0, int_0]
        str_0 = ':$2&\\gCho{H'
        bytes_0 = b"P'\xb10\xb6\x98Hm\x7fB"
        str_1 = '\n'
        var_0 = module_0.rand(bytes_0, bytes_0, str_0, list_0, str_1)
    except BaseException:
        pass

def test_case_43():
    try:
        complex_0 = None
        list_0 = None
        filter_module_0 = None
        str_0 = '?E?HNG^7lL/um}k|yzw '
        str_1 = 'Re&\nm75'
        str_2 = 'G[\\h)alzC^%dyJx=;_x&'
        dict_0 = {str_1: list_0, str_0: filter_module_0, str_2: str_1}
        var_0 = module_0.ternary(list_0, filter_module_0, str_0, dict_0)
        list_1 = [complex_0, complex_0]
        bytes_0 = b'\x16*\xaf*'
        str_3 = 'E2g0>IPw${Jj"_I'
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(list_1, bytes_0, str_3)
    except BaseException:
        pass

def test_case_44():
    try:
        bool_0 = False
        float_0 = -2250.5233
        str_0 = '_v`a|N2\rg'
        dict_0 = {str_0: bool_0, str_0: float_0, str_0: bool_0, str_0: str_0}
        list_0 = [dict_0, float_0, str_0, bool_0, float_0]
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'python python python'
        bool_0 = False
        var_0 = module_0.to_bool(bool_0)
        dict_0 = {}
        list_0 = [str_0, dict_0, dict_0, str_0]
        var_1 = module_0.regex_search(str_0, dict_0, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_46():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0, dict_0]
        str_0 = '@UDZ67\\J'
        tuple_0 = (list_0, str_0)
        float_0 = -1269.0
        var_0 = module_0.flatten(tuple_0, float_0)
        bool_0 = False
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.do_groupby(tuple_0, bool_0, filter_module_0)
    except BaseException:
        pass

def test_case_47():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        float_0 = -2250.5233
        str_0 = 'W'
        dict_0 = None
        var_0 = module_0.rand(str_0, list_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_48():
    try:
        bool_0 = True
        str_0 = '?V\x0cZ'
        bytes_0 = b'\x00\x96R\xc4\x07'
        int_0 = 1813
        int_1 = 29
        dict_0 = {int_0: int_0, bool_0: int_1}
        var_0 = module_0.regex_findall(str_0, bytes_0, int_0, dict_0)
    except BaseException:
        pass

def test_case_49():
    try:
        var_0 = None
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'H7+$(yaWIs!hST0xZ@0T'
        var_1 = {str_2: var_0}
        var_2 = {str_1: var_1}
        var_3 = {str_0: var_2}
        str_3 = [str_1, str_2]
        var_4 = module_0.extract(var_0, var_0, var_3, str_3)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = '//'
        var_0 = module_0.fileglob(str_0)
        filter_module_0 = module_0.FilterModule()
        bool_0 = True
        var_1 = module_0.to_bool(bool_0)
        dict_0 = {}
        var_2 = module_0.strftime(dict_0)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = 'domain'
        tuple_0 = (str_0, str_0)
        set_0 = {tuple_0}
        var_0 = module_0.flatten(set_0)
        str_1 = 'X'
        list_0 = []
        var_1 = module_0.from_yaml(str_0)
        var_2 = module_0.regex_search(str_1, str_1)
        bytes_0 = b'\xf9\xb1y2p27\x82pW\xc5'
        var_3 = module_0.regex_replace(bytes_0)
        bytes_1 = b'W\x82\xb6\x10\xd0\x07\x11\xcc\x84\xce'
        var_4 = module_0.strftime(bytes_1, list_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'foo\\+bar[1]'
        var_0 = module_0.regex_escape(str_0)
        str_1 = 'posix_basic'
        var_1 = module_0.regex_escape(str_0, str_1)
        str_2 = 'posix_extended'
        var_2 = module_0.regex_escape(str_0, str_2)
    except BaseException:
        pass