# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        str_0 = 'M'
        distribution_files_0 = None
        distribution_0 = module_0.Distribution(distribution_files_0)
        bytes_0 = b'\xe9'
        tuple_0 = None
        list_0 = [bytes_0, bytes_0, tuple_0, tuple_0]
        distribution_files_1 = module_0.DistributionFiles(list_0)
        var_0 = distribution_files_1.parse_distribution_file_SUSE(str_0, str_0, distribution_0, distribution_0)
        tuple_1 = ()
        var_1 = module_0.get_uname(list_0, tuple_1)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xbe\xb1\xe1bg\xe7\xc5)'
        distribution_files_0 = module_0.DistributionFiles(bytes_0)
        distribution_0 = None
        str_0 = '*aD @L\rt}\\9A?]'
        set_0 = set()
        var_0 = distribution_files_0.parse_distribution_file_Debian(distribution_0, str_0, distribution_files_0, set_0)
        int_0 = 5552
        distribution_1 = module_0.Distribution(int_0)
        var_1 = module_0.get_uname(distribution_1)
    except BaseException:
        pass

def test_case_2():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bytes_0 = b'\xbc\xf2'
        bool_0 = None
        tuple_0 = (bool_0, distribution_fact_collector_0, distribution_fact_collector_0)
        str_0 = 'Y'
        distribution_files_0 = module_0.DistributionFiles(str_0)
        str_1 = '\\i]"h_1I'
        list_0 = [str_1, str_1, str_1]
        distribution_files_1 = module_0.DistributionFiles(list_0)
        var_0 = distribution_files_1.parse_distribution_file_Slackware(distribution_fact_collector_0, bytes_0, tuple_0, distribution_files_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 22
        set_0 = {int_0, int_0, int_0}
        bool_0 = True
        dict_0 = {bool_0: int_0, bool_0: bool_0, int_0: int_0}
        list_0 = [int_0]
        tuple_0 = (dict_0, list_0)
        distribution_0 = module_0.Distribution(tuple_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        set_1 = {int_0, distribution_fact_collector_0, distribution_fact_collector_0, distribution_fact_collector_0}
        distribution_files_0 = module_0.DistributionFiles(set_1)
        bytes_0 = b''
        float_0 = 0.0
        var_1 = distribution_files_0.parse_distribution_file_Alpine(bytes_0, dict_0, distribution_files_0, float_0)
        var_2 = distribution_files_0.parse_distribution_file_SUSE(set_0, bool_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '|7\\~P@CT)'
        bytes_0 = b'\xcb\x95)\xb4\r\xdb\x9e\x03(\x1f\r\x03'
        bytes_1 = b'pSb\xe7p\xe7t\xd4l.\xa5'
        bytes_2 = b'\x95\xff\xfb\xca\xb6'
        distribution_files_0 = module_0.DistributionFiles(bytes_2)
        var_0 = distribution_files_0.parse_distribution_file_NA(str_0, bytes_0, str_0, bytes_1)
    except BaseException:
        pass

def test_case_5():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        int_0 = 998
        list_0 = [distribution_fact_collector_0, distribution_fact_collector_0, int_0]
        distribution_0 = module_0.Distribution(list_0)
        distribution_files_0 = module_0.DistributionFiles(distribution_0)
        bool_0 = False
        distribution_1 = module_0.Distribution(bool_0)
        var_0 = distribution_1.get_distribution_AIX()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'M'
        distribution_files_0 = None
        distribution_0 = module_0.Distribution(distribution_files_0)
        bytes_0 = b'\xe9'
        tuple_0 = None
        list_0 = [bytes_0, bytes_0, tuple_0, tuple_0]
        distribution_files_1 = module_0.DistributionFiles(list_0)
        var_0 = distribution_files_1.parse_distribution_file_SUSE(str_0, str_0, distribution_0, distribution_0)
        bytes_1 = b'a0\xea\x8d\xcdz\x98\xbfL\xdd\xcb'
        distribution_fact_collector_0 = module_0.DistributionFactCollector(bytes_1)
        distribution_1 = module_0.Distribution(distribution_fact_collector_0)
        var_1 = distribution_1.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'v 53aS+|Z)j'
        set_0 = {str_0, str_0, str_0, str_0}
        distribution_0 = module_0.Distribution(set_0)
        var_0 = distribution_0.get_distribution_facts()
        var_1 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -6022.28528
        str_0 = 'c'
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0)
        distribution_0 = module_0.Distribution(float_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        var_1 = distribution_0.get_distribution_SMGL()
        var_2 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -516
        distribution_fact_collector_0 = module_0.DistributionFactCollector(int_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_fact_collector_0)
        int_1 = -963
        distribution_0 = module_0.Distribution(int_1)
        var_0 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        distribution_0 = module_0.Distribution(bool_0)
        var_0 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -6022.28528
        set_0 = None
        float_1 = -398.838943
        bytes_0 = b'\x17\xf3\xd3YX)\xfba\t("\x97\xd3\x9f\xe9\x8f\xf5>'
        dict_0 = {float_1: set_0, bytes_0: bytes_0}
        str_0 = 'Ic'
        distribution_fact_collector_0 = module_0.DistributionFactCollector(str_0)
        var_0 = distribution_fact_collector_0.collect(set_0, dict_0)
        distribution_0 = module_0.Distribution(float_0)
        var_1 = distribution_0.get_distribution_FreeBSD()
        var_2 = distribution_0.get_distribution_SMGL()
        var_3 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 65001
        distribution_files_0 = module_0.DistributionFiles(int_0)
        float_0 = 1.0
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_files_1 = module_0.DistributionFiles(float_0)
        set_0 = {float_0}
        list_0 = [float_0, set_0, set_0, set_0]
        str_0 = " found in '%s'"
        str_1 = ''
        distribution_files_2 = module_0.DistributionFiles(str_1)
        var_0 = distribution_files_2.parse_distribution_file_Coreos(set_0, list_0, str_0, list_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        var_1 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass