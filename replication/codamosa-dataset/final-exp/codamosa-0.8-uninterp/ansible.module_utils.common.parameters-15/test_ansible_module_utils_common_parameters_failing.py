# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        str_0 = 'ecB/.kO74i>:\x0b-yc%s'
        var_0 = module_0.remove_values(str_0, str_0)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = 'C$\x0bSS~'
        dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0}
        str_1 = '`'
        int_0 = -2700
        list_0 = [str_0, dict_0, str_1]
        var_0 = module_0.remove_values(int_0, list_0)
        int_1 = 1206
        dict_1 = {}
        tuple_0 = (str_1, int_1, dict_1, list_0)
        var_1 = module_0.sanitize_keys(tuple_0, str_1)
        var_2 = module_0.set_fallbacks(dict_1, int_1)
        bytes_0 = b'\xb0gd^/\x16\xb9\xba\xf2'
        var_3 = module_0.remove_values(bytes_0, dict_0)
        var_4 = module_0.env_fallback(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        list_1 = [list_0, list_0, list_0]
        var_0 = module_0.env_fallback(*list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -827.457
        list_0 = [float_0, float_0, float_0]
        list_1 = [float_0, float_0]
        var_0 = module_0.remove_values(list_0, list_1)
        bytes_0 = b';\xfbg'
        list_2 = [bytes_0, bytes_0, bytes_0, bytes_0]
        var_1 = module_0.set_fallbacks(bytes_0, list_2)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x818\x05^?@\x87&`\xa3\xe6\xfb'
        str_0 = 'G4'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: bytes_0}
        var_0 = module_0.remove_values(bytes_0, dict_0)
        str_1 = '<9+|'
        dict_1 = {str_1: str_1, str_1: str_1}
        var_1 = module_0.remove_values(str_1, dict_1)
        list_0 = [str_1, var_1, var_1, dict_1]
        list_1 = [str_1, list_0, str_1]
        var_2 = module_0.env_fallback(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Unit test for function set_fallbacks'
        dict_0 = {}
        tuple_0 = ()
        var_0 = module_0.remove_values(dict_0, tuple_0)
        str_1 = '$qN{==RIR/g{w'
        str_2 = ';2`c=fM4inlfVv<_o'
        dict_1 = {str_1: var_0, str_2: str_0, str_0: var_0}
        list_0 = [str_1, tuple_0, dict_1]
        var_1 = module_0.set_fallbacks(dict_1, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'param'
        str_1 = 'fallback'
        str_2 = 'string'
        str_3 = 'DEFAULT_INPUT'
        str_4 = (str_3,)
        str_5 = (str_2, str_4)
        str_6 = {str_1: str_5}
        str_7 = {str_0: str_6}
        var_0 = {}
        var_1 = module_0.set_fallbacks(str_7, var_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "3}O'GN4"
        bool_0 = True
        str_1 = "A path is requied to load argument specs for role '%s'"
        str_2 = 'D^+hn"~^WQ)~ho1I'
        str_3 = '\x0b:<'
        dict_0 = {str_0: str_1, str_2: str_3, str_2: str_3}
        str_4 = 'P_G,\x0b~SZ'
        dict_1 = {bool_0: str_1}
        float_0 = 0.0001
        var_0 = module_0.sanitize_keys(str_4, dict_1, float_0)
        dict_2 = {str_1: dict_1, str_0: dict_0, str_1: dict_0, str_3: str_1}
        list_0 = [dict_1, dict_2, dict_2]
        str_5 = '\t-)4\t'
        var_1 = module_0.sanitize_keys(str_5, dict_2)
        var_2 = module_0.set_fallbacks(dict_2, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        str_0 = 'C$\x0bSS'
        dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0}
        int_0 = -2700
        list_0 = [str_0, dict_0, str_0]
        var_0 = module_0.remove_values(int_0, list_0)
        int_1 = 1206
        dict_1 = {}
        tuple_0 = (str_0, int_1, dict_1, list_0)
        var_1 = module_0.sanitize_keys(tuple_0, str_0)
        complex_0 = None
        var_2 = module_0.set_fallbacks(dict_1, int_1)
        list_1 = [tuple_0, complex_0, var_2]
        set_0 = {str_0}
        var_3 = module_0.remove_values(list_1, set_0)
        var_4 = module_0.sanitize_keys(list_1, str_0, tuple_0)
        bytes_0 = b'\x90\xfc\xa7\xc7\xad&\xaa\x82\x828Jn\xe1\xc9\xeb\xc2ff\xba'
        float_0 = 968.503
        str_1 = 'HbW<'
        var_5 = module_0.remove_values(float_0, str_1)
        var_6 = module_0.set_fallbacks(bytes_0, list_0)
    except BaseException:
        pass