# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 694
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    int_0 = 16
    str_0 = 'j0:%e$T\nYS(793N!};'
    leaf_0 = module_0.Leaf(int_0, str_0)

def test_case_3():
    int_0 = 16
    str_0 = 'j0:%e$T\nYS(793N!};'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_4():
    str_0 = 'abcdebfg'
    negated_pattern_0 = module_0.NegatedPattern()
    iterator_0 = negated_pattern_0.generate_matches(str_0)
    var_0 = list(iterator_0)

def test_case_5():
    str_0 = '8,'
    int_0 = 14
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    negated_pattern_0 = module_0.NegatedPattern()
    leaf_pattern_1 = module_0.LeafPattern(int_0, str_0)
    grammar_0 = module_1.Grammar()

def test_case_6():
    int_0 = 427
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_7():
    str_0 = 'bare_name'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_8():
    str_0 = 'bare_name'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_9():
    int_0 = 16
    str_0 = 'j0:%e$T\nYS(793N!};'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_10():
    int_0 = None
    str_0 = 'Ibare_name'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_11():
    str_0 = 'H'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_12():
    str_0 = "M4)K(jq{MqY@ C}36'Rf"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    iterator_0 = wildcard_pattern_0.generate_matches(negated_pattern_0)

def test_case_13():
    str_0 = 'bare_name'
    int_0 = 2303
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_14():
    str_0 = '/z:<e@l/Dg'
    int_0 = 0
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(leaf_0, leaf_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_15():
    str_0 = 'bare_name'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)

def test_case_16():
    str_0 = 'bare_name'
    bytes_0 = b''
    dict_0 = {}
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bool_0 = wildcard_pattern_0.match_seq(bytes_0, dict_0)

def test_case_17():
    int_0 = 56
    str_0 = 'some_value'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.leaves()
    var_0 = list(iterator_0)

def test_case_18():
    int_0 = 1
    str_0 = ']h2e<[C'
    leaf_0 = module_0.Leaf(int_0, str_0)
    optional_0 = leaf_0.get_lineno()
    leaf_pattern_0 = module_0.LeafPattern()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_19():
    negated_pattern_0 = module_0.NegatedPattern()
    var_0 = []
    iterator_0 = negated_pattern_0.generate_matches(var_0)
    var_1 = list(iterator_0)

def test_case_20():
    str_0 = 'bare_name'
    int_0 = 1671
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
    list_0 = []
    bool_0 = wildcard_pattern_0.match_seq(list_0)

def test_case_21():
    int_0 = 1
    str_0 = ']h2e<[C'
    leaf_0 = module_0.Leaf(int_0, str_0)
    optional_0 = leaf_0.get_lineno()
    leaf_pattern_0 = module_0.LeafPattern()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_0.optimize()