# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 1869
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '}p'
        grammar_0 = module_1.Grammar()
        int_0 = -2265
        tuple_0 = (int_0, str_0, int_0, grammar_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -3743
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_5():
    try:
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        negated_pattern_0 = module_0.NegatedPattern(var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = None
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match_seq(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '^Wa_s\rn'
        str_1 = '\r'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
        base_0 = module_0.Base(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1
        str_0 = 'abc'
        leaf_0 = module_0.Leaf(int_0, str_0)
        optional_0 = leaf_0.get_lineno()
        var_0 = None
        leaf_1 = [leaf_0]
        node_0 = module_0.Node(int_0, var_0, leaf_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 969
        str_0 = '}t\\,a/ni?f2\x0cEX~d\x0c\n'
        leaf_0 = module_0.Leaf(int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -2497
        optional_0 = None
        none_type_0 = None
        list_0 = []
        tuple_0 = (int_0, optional_0, none_type_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '/z:<e@l/Dg'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0, leaf_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_1 = -2522
        int_2 = -714
        wildcard_pattern_1 = module_0.WildcardPattern(int_1, int_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "'\x0czX"
        grammar_0 = module_1.Grammar()
        int_0 = 314
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        dict_0 = {str_0: tuple_0, str_0: str_0, int_0: grammar_0, tuple_1: tuple_0}
        tuple_2 = (int_0, str_0, tuple_1, dict_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'are_nme'
        int_0 = 1643
        list_0 = []
        int_1 = 565
        node_0 = module_0.Node(int_0, list_0, str_0)
        list_1 = [node_0, node_0]
        bool_0 = False
        list_2 = [bool_0, int_1]
        node_1 = module_0.Node(int_1, list_1, list_2)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 1349
        list_0 = []
        list_1 = [int_0, int_0, int_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -1085
        str_0 = 'I'
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        bool_0 = negated_pattern_0.match(var_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'H'
        grammar_0 = module_1.Grammar()
        int_0 = None
        optional_0 = None
        tuple_0 = (int_0, str_0, int_0, optional_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'bare_name'
        grammar_0 = module_1.Grammar()
        int_0 = 314
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        dict_0 = {str_0: tuple_0, str_0: str_0}
        tuple_2 = (int_0, str_0, tuple_1, dict_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'H'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = -207
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        str_0 = '/nzg:2e7l=/D'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 345
        leaf_pattern_0 = module_0.LeafPattern(int_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '/z:<e7l/D'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0, leaf_0)
        str_2 = leaf_0.__str__()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_pattern_1 = module_0.LeafPattern(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        leaf_0 = None
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0)
        str_0 = 'bare_name'
        int_0 = 1671
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '\x0carnHe'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        base_pattern_0 = None
        bool_0 = wildcard_pattern_0.match(base_pattern_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 190
        str_0 = 'bare_Kame'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = [tuple_1]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0, list_0)
        leaf_1 = leaf_0.clone()
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_1)
        int_1 = -49
        var_1 = module_0.type_repr(int_1)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '}hUaw'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        dict_0 = {}
        leaf_pattern_0 = module_0.LeafPattern()
        bool_0 = wildcard_pattern_0.match_seq(dict_0, leaf_pattern_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 877
        list_0 = []
        list_1 = []
        node_0 = module_0.Node(int_0, list_0, list_1)
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'pib'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 971
        list_0 = []
        grammar_0 = module_1.Grammar()
        str_1 = ''
        node_0 = module_0.Node(int_0, list_0, grammar_0, str_1)
        node_1 = node_0.clone()
        str_2 = node_1.__str__()
        bool_0 = wildcard_pattern_0.match_seq(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'n'
        int_0 = 1917
        list_0 = []
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        list_1 = [wildcard_pattern_0, int_0, int_0, any_0]
        node_0 = module_0.Node(int_0, list_0, any_0, str_0, list_1)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_2.clone()
        list_2 = [any_0, any_0, wildcard_pattern_0, node_3]
        base_0 = module_0.Base(*list_2)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 1581
        list_0 = [int_0, int_0, int_0]
        str_0 = 'DRp;F.'
        node_pattern_0 = module_0.NodePattern(int_0, list_0, str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 427
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = ')h*Nt'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.pre_order()
        leaf_1 = leaf_0.clone()
        int_1 = 942
        list_0 = [leaf_1, leaf_0]
        bytes_0 = b'\x91\x1a\xf4\x08\xe2]S\x86\xb7wz\xc7\x03\x17$ah\xb8'
        node_0 = module_0.Node(int_1, list_0, bytes_0)
        node_1 = node_0.clone()
        str_1 = leaf_0.__repr__()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_0.append_child(leaf_0)
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = '/z:<e7l/D'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.leaves()
        leaf_1 = leaf_0.clone()
        int_1 = 972
        list_0 = [leaf_1, leaf_0]
        bytes_0 = b'\x91\x1a\xf4\x08\xe2]S\x86\xb7wz\xc7\x03\x17$ah\xb8'
        node_0 = module_0.Node(int_1, list_0, bytes_0)
        node_1 = node_0.clone()
        str_1 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern()
        node_0.update_sibling_maps()
        var_0 = leaf_pattern_0.match(leaf_0, leaf_1)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        int_2 = 877
        bool_0 = wildcard_pattern_0.match(negated_pattern_0, int_2)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = ''
        leaf_pattern_0 = module_0.LeafPattern()
        str_1 = '3= O; '
        wildcard_pattern_0 = module_0.WildcardPattern(str_1)
        str_2 = None
        bool_0 = wildcard_pattern_0.match_seq(str_0, str_2)
        list_0 = []
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 3144
        negated_pattern_0 = module_0.NegatedPattern()
        node_0 = module_0.Node(int_0, list_0, negated_pattern_0)
        node_1 = node_0.clone()
        node_0.append_child(node_1)
        int_1 = -565
        str_3 = '-v~A0(}61'
        list_1 = [leaf_pattern_0, str_2]
        leaf_0 = module_0.Leaf(int_1, str_3, list_1)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '/z:<e7l/D'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.leaves()
        leaf_1 = leaf_0.clone()
        int_1 = 648
        list_0 = [leaf_1, leaf_0]
        bytes_0 = b'\x91\x1a\xf4\x08\xe2]S\x86\xb7wz\xc7\x03\x17$ah\xb8'
        node_0 = module_0.Node(int_1, list_0, bytes_0)
        node_1 = node_0.clone()
        str_1 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern()
        node_0.update_sibling_maps()
        var_0 = leaf_pattern_0.match(leaf_0, leaf_1)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        node_0.set_child(int_0, node_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = ')h*Nt'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.leaves()
        leaf_1 = leaf_0.clone()
        int_1 = 970
        list_0 = [leaf_1, leaf_0]
        list_1 = [leaf_1, int_1, leaf_1]
        node_0 = module_0.Node(int_1, list_0, str_0, list_1)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_2.clone()
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(node_0)
        str_1 = leaf_0.__repr__()
        leaf_pattern_1 = module_0.LeafPattern()
        var_1 = leaf_pattern_1.match(leaf_0, leaf_1)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = wildcard_pattern_0.match(negated_pattern_0, int_1)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = ')h*Nt'
        none_type_0 = None
        node_pattern_0 = module_0.NodePattern(none_type_0, str_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 0
        str_0 = '\n\n@"= ~&\\[nk\'S8o\x0ce$'
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = [tuple_0, int_0]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0, list_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        str_1 = leaf_2.__repr__()
        var_0 = leaf_pattern_0.match(leaf_0)
        leaf_3 = leaf_0.clone()
        leaf_4 = leaf_3.clone()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, str_1)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'bare_name'
        int_0 = 1644
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = ')h*Nt'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.pre_order()
        leaf_1 = leaf_0.clone()
        int_1 = 964
        list_0 = [leaf_1, leaf_0]
        bytes_0 = b'\x91\x1a\xf4\x08\xe2]S\x86\xb7wz\xc7\x03\x17$ah\xb8'
        node_0 = module_0.Node(int_1, list_0, bytes_0)
        node_1 = node_0.clone()
        str_1 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern()
        node_0.insert_child(int_1, leaf_0)
        var_0 = leaf_pattern_0.match(leaf_0, leaf_1)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_0.append_child(leaf_0)
        var_1 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '/z:<e@l/Dg'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0, leaf_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_1 = leaf_0.depth()
        int_2 = 792
        var_1 = module_0.type_repr(int_2)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = ')h*Nt'
        int_0 = 0
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.pre_order()
        leaf_1 = leaf_0.clone()
        int_1 = 964
        list_0 = [leaf_1, leaf_0]
        bytes_0 = b'\x91\x1a\xf4\x08\xe2]S\x86\xb7wz\xc7\x03\x17$ah\xb8'
        node_0 = module_0.Node(int_1, list_0, bytes_0)
        int_2 = leaf_1.depth()
        node_1 = node_0.clone()
        str_1 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern()
        node_0.insert_child(int_1, leaf_0)
        var_0 = leaf_pattern_0.match(leaf_0, leaf_1)
        node_0.append_child(leaf_0)
        negated_pattern_0 = module_0.NegatedPattern()
        var_1 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'bare_name'
        int_0 = 3251
        int_1 = -1071
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'bare_name'
        int_0 = 1671
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_46():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 19
        str_0 = 'Q4\'>"Bmp,c'
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.pre_order()
        wildcard_pattern_0 = module_0.WildcardPattern(iterator_0)
    except BaseException:
        pass

def test_case_47():
    try:
        int_0 = 42
        str_0 = 'bar'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
        var_0 = repr(leaf_pattern_0)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = ','
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = [wildcard_pattern_0]
        tuple_0 = (list_0,)
        negated_pattern_0 = module_0.NegatedPattern(tuple_0)
    except BaseException:
        pass

def test_case_49():
    try:
        int_0 = 42
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        str_0 = 'foo'
        str_1 = 'bar'
        leaf_pattern_1 = module_0.LeafPattern(int_0, str_0, str_1)
        int_1 = 2
        str_2 = '+kF(~pj<~c4N"9jA^'
        int_2 = 1394
        tuple_0 = (int_2, int_2)
        tuple_1 = (str_2, tuple_0)
        leaf_0 = module_0.Leaf(int_1, str_1, tuple_1)
        var_0 = leaf_pattern_1.match(leaf_0)
        var_1 = repr(leaf_pattern_1)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = 'bare_name'
        int_0 = 1671
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        dict_0 = {}
        bool_0 = wildcard_pattern_0.match_seq(dict_0)
    except BaseException:
        pass