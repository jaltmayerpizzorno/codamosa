# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.aix as module_0

def test_case_0():
    try:
        a_i_x_hardware_collector_0 = module_0.AIXHardwareCollector()
        a_i_x_hardware_collector_1 = None
        tuple_0 = (a_i_x_hardware_collector_1,)
        list_0 = [tuple_0, a_i_x_hardware_collector_1, tuple_0, tuple_0]
        a_i_x_hardware_0 = module_0.AIXHardware(list_0)
        var_0 = a_i_x_hardware_0.populate(a_i_x_hardware_collector_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b"\xd1'\x17\xb8\xdc\x02\x1b\xf6\xa0\x17o"
        dict_0 = {}
        dict_1 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: dict_0}
        int_0 = 1572
        tuple_0 = (bytes_0, dict_1, int_0)
        a_i_x_hardware_0 = module_0.AIXHardware(tuple_0)
        str_0 = '\\B`..o5.!->1BT'
        a_i_x_hardware_1 = module_0.AIXHardware(a_i_x_hardware_0, str_0)
        var_0 = a_i_x_hardware_1.get_memory_facts()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        float_0 = -1362.0
        dict_0 = {}
        str_0 = 'b!K$$qL}?hP]'
        tuple_0 = (bool_0, float_0, dict_0, str_0)
        a_i_x_hardware_0 = module_0.AIXHardware(tuple_0)
        var_0 = a_i_x_hardware_0.get_dmi_facts()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -2413.3826
        str_0 = 'x=g(349VA\x0b$v&%/@)>'
        a_i_x_hardware_0 = module_0.AIXHardware(float_0, str_0)
        var_0 = a_i_x_hardware_0.get_vgs_facts()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Q|aQ1,Ol(%g2'
        a_i_x_hardware_0 = module_0.AIXHardware(str_0)
        var_0 = a_i_x_hardware_0.get_mount_facts()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\rUq*z+mD5*\\+g.'
        str_1 = 'g9>j{6X71{;?t'
        a_i_x_hardware_0 = module_0.AIXHardware(str_1)
        a_i_x_hardware_1 = module_0.AIXHardware(str_0)
        var_0 = a_i_x_hardware_1.get_device_facts()
    except BaseException:
        pass