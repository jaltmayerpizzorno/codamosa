# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.hpux as module_0

def test_case_0():
    try:
        bytes_0 = b'|-6]\x14\x97?4\xb9P\x01'
        h_p_u_x_hardware_0 = module_0.HPUXHardware(bytes_0)
        var_0 = h_p_u_x_hardware_0.populate()
    except BaseException:
        pass

def test_case_1():
    try:
        h_p_u_x_hardware_collector_0 = module_0.HPUXHardwareCollector()
        bool_0 = True
        h_p_u_x_hardware_0 = module_0.HPUXHardware(bool_0)
        h_p_u_x_hardware_1 = module_0.HPUXHardware(h_p_u_x_hardware_0)
        var_0 = h_p_u_x_hardware_1.get_cpu_facts()
        var_1 = h_p_u_x_hardware_0.get_hw_facts()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1462.029
        list_0 = [float_0, float_0, float_0]
        h_p_u_x_hardware_collector_0 = module_0.HPUXHardwareCollector()
        h_p_u_x_hardware_0 = module_0.HPUXHardware(h_p_u_x_hardware_collector_0)
        var_0 = h_p_u_x_hardware_0.get_cpu_facts(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -3519.0
        str_0 = '***** VALUES ENTERED DO NOT MATCH ****'
        set_0 = {float_0}
        h_p_u_x_hardware_0 = module_0.HPUXHardware(str_0, set_0)
        float_1 = 172.297
        h_p_u_x_hardware_1 = module_0.HPUXHardware(float_1)
        var_0 = h_p_u_x_hardware_1.get_memory_facts(h_p_u_x_hardware_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0]
        float_0 = 1688.5699
        h_p_u_x_hardware_0 = module_0.HPUXHardware(float_0)
        var_0 = h_p_u_x_hardware_0.get_hw_facts(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'module'
        h_p_u_x_hardware_0 = module_0.HPUXHardware(str_0)
        str_1 = 'ansible_architecture'
        str_2 = 'ansible_distribution_version'
        str_3 = 'ia64'
        str_4 = 'B.11.23'
        str_5 = {str_1: str_3, str_2: str_4}
        var_0 = h_p_u_x_hardware_0.populate(str_5)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'use_unsafe_shell'
        var_0 = {str_0: str_0, str_0: str_0}
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0)
        str_1 = 'ansible_architecture'
        str_2 = 'ansible_distribution_version'
        str_3 = 'ia64'
        str_4 = {str_1: str_3, str_2: str_0}
        var_1 = h_p_u_x_hardware_0.populate(str_4)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'ansible_architecture'
        str_1 = 'ansible_distribution_version'
        str_2 = '9000/800'
        str_3 = 'B.11.31'
        str_4 = {str_0: str_2, str_1: str_3}
        var_0 = None
        h_p_u_x_hardware_0 = module_0.HPUXHardware(var_0)
        var_1 = h_p_u_x_hardware_0.get_cpu_facts(str_4)
    except BaseException:
        pass