# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    immutable_list_0 = module_0.ImmutableList()

def test_case_1():
    object_0 = module_1.object()
    immutable_list_0 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(object_0)

def test_case_2():
    immutable_list_0 = module_0.ImmutableList()
    str_0 = immutable_list_0.__str__()

def test_case_3():
    immutable_list_0 = module_0.ImmutableList()
    var_0 = immutable_list_0.to_list()
    str_0 = '\n    Return the first element of the list which matches the keys, or None if no element matches.\n\n    :param collection: collection to search\n    :type collection: List[A]\n    :param key: function to decide witch element should be found\n    :type key: Function(A) -> Boolean\n    :returns: element of collection or None\n    :rtype: A | None\n    '
    var_1 = immutable_list_0.append(str_0)
    var_2 = immutable_list_0.__add__(var_1)

def test_case_4():
    object_0 = module_1.object()
    tuple_0 = (object_0, object_0)
    immutable_list_0 = module_0.ImmutableList()
    optional_0 = immutable_list_0.find(tuple_0)

def test_case_5():
    int_0 = 1
    int_1 = 3025
    var_0 = None
    immutable_list_0 = module_0.ImmutableList(int_1, var_0)
    immutable_list_1 = module_0.ImmutableList(int_0, immutable_list_0)
    bool_0 = immutable_list_1.__eq__(immutable_list_1)

def test_case_6():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_2 = module_0.ImmutableList()
    bool_1 = True
    immutable_list_3 = module_0.ImmutableList(bool_1)
    bool_2 = immutable_list_2.__eq__(immutable_list_3)
    immutable_list_4 = module_0.ImmutableList(bool_1)
    immutable_list_5 = module_0.ImmutableList()
    bool_3 = immutable_list_4.__eq__(immutable_list_5)
    immutable_list_6 = module_0.ImmutableList(bool_1)
    immutable_list_7 = module_0.ImmutableList(bool_1)
    bool_4 = immutable_list_6.__eq__(immutable_list_7)
    immutable_list_8 = module_0.ImmutableList(bool_1)
    immutable_list_9 = module_0.ImmutableList()
    immutable_list_10 = module_0.ImmutableList(bool_1, immutable_list_9)
    bool_5 = immutable_list_8.__eq__(immutable_list_10)

def test_case_7():
    immutable_list_0 = module_0.ImmutableList()
    immutable_list_1 = module_0.ImmutableList()
    bool_0 = immutable_list_0.__eq__(immutable_list_1)
    immutable_list_2 = module_0.ImmutableList()
    bool_1 = True
    immutable_list_3 = module_0.ImmutableList(bool_1)
    bool_2 = immutable_list_2.__eq__(immutable_list_3)
    immutable_list_4 = module_0.ImmutableList(bool_1)
    immutable_list_5 = module_0.ImmutableList()
    bool_3 = immutable_list_4.__eq__(immutable_list_5)
    immutable_list_6 = module_0.ImmutableList(bool_1)

def test_case_8():
    var_0 = lambda x: x
    var_1 = lambda x: not x
    int_0 = 1
    immutable_list_0 = module_0.ImmutableList(int_0)
    var_2 = lambda x: x
    var_3 = immutable_list_0.filter(var_2)
    immutable_list_1 = module_0.ImmutableList(int_0)
    var_4 = lambda x: not x
    var_5 = immutable_list_1.filter(var_4)
    immutable_list_2 = module_0.ImmutableList(int_0)
    immutable_list_3 = module_0.ImmutableList(int_0, immutable_list_2)
    var_6 = lambda x: x
    var_7 = immutable_list_3.filter(var_6)
    immutable_list_4 = module_0.ImmutableList(int_0, immutable_list_1)
    immutable_list_5 = module_0.ImmutableList(int_0)
    immutable_list_6 = module_0.ImmutableList(int_0, immutable_list_5)
    var_8 = lambda x: not x
    var_9 = immutable_list_6.filter(var_8)