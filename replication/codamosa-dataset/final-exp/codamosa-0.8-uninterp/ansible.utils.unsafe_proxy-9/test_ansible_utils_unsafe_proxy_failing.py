# Automatically generated by Pynguin.
import ansible.utils.unsafe_proxy as module_0

def test_case_0():
    try:
        str_0 = 'SC5]K{kLP'
        dict_0 = {str_0: str_0, str_0: str_0}
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        var_0 = module_0.wrap_var(ansible_unsafe_0)
        var_1 = ansible_unsafe_bytes_0.decode(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        str_0 = 'M7~\nt1c{hD'
        str_1 = '))\te2hD'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: list_0, str_1: str_0}
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText()
        var_0 = ansible_unsafe_text_0.encode(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        ansible_unsafe_bytes_1 = module_0.AnsibleUnsafeBytes()
        var_0 = ansible_unsafe_bytes_1.decode()
        native_jinja_unsafe_text_0 = module_0.NativeJinjaUnsafeText()
        str_0 = None
        dict_0 = {str_0: ansible_unsafe_bytes_1, str_0: ansible_unsafe_bytes_0}
        list_0 = [ansible_unsafe_bytes_1]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
        var_1 = unsafe_proxy_0.__new__(native_jinja_unsafe_text_0, native_jinja_unsafe_text_0, **dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'SC5]K{kLP$'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.to_unsafe_text(*list_0)
        list_1 = [dict_0]
        var_1 = module_0.to_unsafe_text(*list_1)
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
        native_jinja_unsafe_text_0 = module_0.NativeJinjaUnsafeText(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '"}l\rhRv_#S#K3^Z~sI/"'
        dict_0 = {str_0: str_0}
        list_0 = None
        var_0 = module_0.wrap_var(list_0)
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        var_1 = module_0.to_unsafe_bytes(**dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.to_unsafe_text()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 0.5
        var_0 = module_0.wrap_var(float_0)
        list_0 = [var_0, var_0]
        str_0 = "$< l\n'IKN3kyza"
        str_1 = '}BF)kw?GX'
        dict_0 = {str_0: float_0, str_1: list_0, str_0: float_0}
        var_1 = module_0.to_unsafe_bytes(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        list_0 = [bool_0]
        var_0 = module_0.to_unsafe_bytes(*list_0)
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        var_1 = ansible_unsafe_bytes_0.decode()
        list_1 = []
        dict_0 = {}
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText(**dict_0)
        var_2 = ansible_unsafe_text_0.encode(*list_1)
        ansible_unsafe_text_1 = module_0.AnsibleUnsafeText()
        var_3 = ansible_unsafe_text_1.encode(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "'S{0(rN8\tG*2-\x0bv"
        bytes_0 = b'\x0c\xa2w>S\xf32c\x02\x96\x9e\x96'
        list_0 = [bytes_0, str_0, str_0, str_0]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
        tuple_0 = ()
        list_1 = []
        var_0 = unsafe_proxy_0.__new__(unsafe_proxy_0, tuple_0, *list_1)
    except BaseException:
        pass