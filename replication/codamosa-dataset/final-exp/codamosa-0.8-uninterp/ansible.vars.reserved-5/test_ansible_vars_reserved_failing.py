# Automatically generated by Pynguin.
import ansible.vars.reserved as module_0

def test_case_0():
    try:
        var_0 = module_0.get_reserved_names()
        var_1 = module_0.get_reserved_names()
        bytes_0 = b'l'
        var_2 = module_0.is_reserved_name(bytes_0)
        var_3 = module_0.get_reserved_names()
        int_0 = 930
        int_1 = 500
        var_4 = module_0.warn_if_reserved(int_0, int_1)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'7\xf8\x17\xb5\x93\xac\xc3\x95\xf74'
        bool_0 = None
        str_0 = 'c%'
        tuple_0 = (bytes_0, bool_0, str_0)
        set_0 = {tuple_0}
        var_0 = module_0.get_reserved_names()
        var_1 = module_0.warn_if_reserved(set_0)
        float_0 = None
        var_2 = module_0.warn_if_reserved(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2731.0
        var_0 = module_0.warn_if_reserved(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "T'MGA/e)T 0`t{:*5"
        str_1 = '--no-tty'
        var_0 = module_0.warn_if_reserved(str_0, str_1)
        bytes_0 = b'\xb3\x08\xa5\xe8\xdd\xf1\xfc\xe0I\xcc'
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        var_1 = module_0.warn_if_reserved(set_0)
        var_2 = module_0.get_reserved_names()
        str_2 = "\nchanged:\n  description: Whether the module affected changes on the target.\n  returned: always\n  type: bool\n  sample: false\nfailed:\n  description: Whether the module failed to execute.\n  returned: always\n  type: bool\n  sample: true\nmsg:\n  description: Human-readable message.\n  returned: as needed\n  type: str\n  sample: all ok\nskipped:\n  description: Whether the module was skipped.\n  returned: always\n  type: bool\n  sample: false\nresults:\n  description: List of module results,\n  returned: when using a loop.\n  type: list\n  sample: [{changed: True, msg: 'first item changed'}, {changed: False, msg: 'second item ok'}]\nexception:\n  description: Optional information from a handled error.\n  returned: on some errors\n  type: str\n  sample: Unknown error\n"
        var_3 = module_0.is_reserved_name(str_2)
        var_4 = module_0.get_reserved_names()
        bytes_1 = b"\x1e^'\xfa\xe0\xda)\xb0\x95\xb6\xf0\\\x15\x02\xbc\x06\x8f=\xe2"
        float_0 = -772.59566
        var_5 = module_0.warn_if_reserved(bytes_1, float_0)
    except BaseException:
        pass