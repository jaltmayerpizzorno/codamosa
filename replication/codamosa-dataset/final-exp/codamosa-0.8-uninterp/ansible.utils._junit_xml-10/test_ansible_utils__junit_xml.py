# Automatically generated by Pynguin.
import ansible.utils._junit_xml as module_0

def test_case_0():
    pass

def test_case_1():
    test_error_0 = module_0.TestError()

def test_case_2():
    test_failure_0 = module_0.TestFailure()

def test_case_3():
    str_0 = '\n    该测试用例用于测试TestSuite类的get_xml_element方法，\n    通过获取该方法生成的xml元素，\n    判断生成的xml元素属性是否符合标准要求\n    '
    test_case_0 = module_0.TestCase(str_0, str_0, str_0)
    element_0 = test_case_0.get_xml_element()

def test_case_4():
    str_0 = 'my testsuite'
    test_suite_0 = module_0.TestSuite(str_0)
    element_0 = test_suite_0.get_xml_element()

def test_case_5():
    test_suites_0 = module_0.TestSuites()
    element_0 = test_suites_0.get_xml_element()

def test_case_6():
    str_0 = ''
    str_1 = 'file %s is empty and had no tasks to include'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    test_suites_0 = module_0.TestSuites(dict_0)
    str_2 = test_suites_0.to_pretty_xml()

def test_case_7():
    str_0 = 'Donn ij/kid B.'
    test_suite_0 = module_0.TestSuite(str_0, str_0, str_0)
    element_0 = test_suite_0.get_xml_element()
    test_case_0 = module_0.TestCase(str_0, str_0)
    element_1 = test_case_0.get_xml_element()
    test_suites_0 = module_0.TestSuites(str_0)
    var_0 = test_suites_0.__repr__()
    str_1 = test_suites_0.to_pretty_xml()
    test_error_0 = module_0.TestError(str_1, str_0, str_0)
    var_1 = test_suites_0.__repr__()

def test_case_8():
    str_0 = '3>#oG?LQ$V_23T.'
    test_error_0 = module_0.TestError()
    dict_0 = {}
    test_suite_0 = module_0.TestSuite(str_0, str_0, dict_0)
    element_0 = test_suite_0.get_xml_element()
    test_case_0 = module_0.TestCase(str_0, str_0)
    element_1 = test_case_0.get_xml_element()
    list_0 = [test_suite_0, test_suite_0]
    test_suites_0 = module_0.TestSuites(str_0, list_0)
    var_0 = test_suites_0.__repr__()
    str_1 = test_suites_0.to_pretty_xml()
    dict_1 = test_suite_0.get_attributes()
    test_error_1 = module_0.TestError()
    var_1 = test_suites_0.__repr__()