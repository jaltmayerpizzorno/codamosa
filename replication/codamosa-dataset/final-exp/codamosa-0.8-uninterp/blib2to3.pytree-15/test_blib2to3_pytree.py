# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 57
    str_0 = ''
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_2():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_3():
    str_0 = 'bare_name'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_4():
    int_0 = 35
    str_0 = 'lj'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_5():
    str_0 = 'rule %s is ambiguous; %s is in the first sets of %s as well as %s'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    bool_0 = negated_pattern_0.match(str_0)

def test_case_6():
    int_0 = 889
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    grammar_0 = module_1.Grammar()
    var_0 = grammar_0.copy()

def test_case_7():
    int_0 = 2963
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    list_1 = [node_2]
    negated_pattern_0 = module_0.NegatedPattern()
    bool_0 = negated_pattern_0.match(list_1)

def test_case_8():
    str_0 = '\x0chvfU}xP{&$'
    int_0 = 9
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    int_1 = 1389
    list_0 = [leaf_0]
    node_0 = module_0.Node(int_1, list_0, int_1)
    node_0.append_child(leaf_0)

def test_case_9():
    str_0 = 'a'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_10():
    str_0 = '\x0cj\nN`WnIV-\x0b%AR2zd_x'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_11():
    int_0 = 14
    str_0 = "UAEJZ4'}7#\rs|"
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_12():
    int_0 = 10
    str_0 = '(\\\x0bHUYH'
    leaf_0 = module_0.Leaf(int_0, str_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_13():
    int_0 = 864
    str_0 = '!!CD+9r;f'
    list_0 = []
    dict_0 = {}
    node_0 = module_0.Node(int_0, list_0, str_0, dict_0)
    node_1 = node_0.clone()
    node_2 = node_0.clone()
    iterator_0 = node_1.post_order()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)

def test_case_14():
    bytes_0 = b''
    str_0 = "\n9^'.39sQKKFs"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bool_0 = wildcard_pattern_0.match_seq(bytes_0)

def test_case_15():
    int_0 = 0
    str_0 = '!!CD+9r;f'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    bool_0 = wildcard_pattern_0.match(str_0)

def test_case_16():
    int_0 = 0
    int_1 = 884
    str_0 = '!!CD+9r;f'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    negated_pattern_0 = module_0.NegatedPattern()
    any_0 = wildcard_pattern_0.optimize()
    wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_1)
    dict_0 = {}
    node_pattern_0 = module_0.NodePattern(int_1, dict_0)

def test_case_17():
    str_0 = 'A'
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = 9
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 1152
    list_0 = [leaf_0]
    node_0 = module_0.Node(int_1, list_0)
    node_1 = node_0.clone()
    node_1.insert_child(int_1, leaf_0)
    leaf_1 = leaf_0.clone()
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    grammar_0 = module_1.Grammar()
    grammar_1 = module_1.Grammar()
    var_0 = leaf_pattern_0.match(leaf_0)
    leaf_0.replace(leaf_0)

def test_case_18():
    negated_pattern_0 = module_0.NegatedPattern()
    var_0 = [negated_pattern_0]
    iterator_0 = negated_pattern_0.generate_matches(var_0)
    var_1 = [(c, r) for (c, r) in iterator_0]

def test_case_19():
    int_0 = 1
    str_0 = "\x0cj\nN'}`WnIV-\x0b%Azd_x"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_20():
    int_0 = 1
    str_0 = 'a'
    var_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0, var_0, var_0)
    str_1 = leaf_0.get_suffix()

def test_case_21():
    int_0 = 2128
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    int_1 = node_0.depth()