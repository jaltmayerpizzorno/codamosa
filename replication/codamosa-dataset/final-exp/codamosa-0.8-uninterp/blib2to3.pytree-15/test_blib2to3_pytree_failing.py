# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 412
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1
        str_0 = 'AD'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_0.replace(leaf_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1291
        leaf_0 = None
        list_0 = [leaf_0, leaf_0]
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 37
        str_0 = 'Ur'
        grammar_0 = module_1.Grammar()
        tuple_0 = None
        tuple_1 = (int_0, str_0, tuple_0, grammar_0)
        var_0 = module_0.convert(grammar_0, tuple_1)
    except BaseException:
        pass

def test_case_5():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        str_0 = '_rdY6b>zJ;2[#'
        leaf_pattern_0 = module_0.LeafPattern(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1685
        str_0 = 'CXmsg'
        leaf_0 = module_0.Leaf(int_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -1477
        str_0 = None
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        str_0 = 'a'
        var_0 = None
        leaf_0 = module_0.Leaf(int_0, str_0, var_0, var_0)
        str_1 = leaf_0.get_suffix()
        int_1 = leaf_0.depth()
        leaf_1 = leaf_0.clone()
        int_2 = -1723
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_2, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '&j\x0bA\\z]$'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = set()
        bool_0 = wildcard_pattern_0.match_seq(set_0)
        node_pattern_0 = module_0.NodePattern(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'a'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        path_like_0 = None
        any_1 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_1)
        bool_0 = negated_pattern_0.match_seq(path_like_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -2245
        negated_pattern_0 = module_0.NegatedPattern(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 257
        str_0 = 'hello'
        int_1 = 1
        leaf_0 = module_0.Leaf(int_1, str_0)
        str_1 = 'world'
        leaf_1 = module_0.Leaf(int_1, str_1)
        leaf_2 = [leaf_0, leaf_1]
        node_0 = module_0.Node(int_0, leaf_2)
        str_2 = node_0.__repr__()
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 51
        str_0 = 'r}_s)\x0cAZ\\{'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        iterator_0 = leaf_0.pre_order()
        int_1 = None
        node_pattern_0 = module_0.NodePattern(int_1, iterator_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 0
        str_0 = 'Z\t\r,9[lx'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        leaf_pattern_0 = module_0.LeafPattern()
        iterator_0 = None
        str_1 = 'Io:d8^j\x0c"~e\t}LW;R'
        node_pattern_0 = module_0.NodePattern(iterator_0, str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 51
        str_0 = 'r}_s)\x0cAZ\\{'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        iterator_0 = leaf_0.post_order()
        int_1 = None
        node_pattern_0 = module_0.NodePattern(int_1, iterator_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 280
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        leaf_pattern_0 = module_0.LeafPattern()
        node_0.insert_child(int_0, node_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 1512
        str_0 = 'a'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 1358
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        list_1 = [node_0, node_0]
        str_0 = 'AoBw&'
        node_1 = module_0.Node(int_0, list_1, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 914
        str_0 = 'N!pCDc9r;rF\\uO'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '&j\x0bA\\zJ${'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = "\x0c\nN'}cX`WnIV-.%Az(_x"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 0
        str_0 = '!!CD+9r;f'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match_seq(str_0)
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1
        str_0 = "\x0cj\nN'}`WnIV-\x0b%Azd_x"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        leaf_pattern_0 = module_0.LeafPattern()
        bool_0 = wildcard_pattern_0.match_seq(leaf_pattern_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '!pCD+9r;rFf\rO'
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 2840
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        var_0 = leaf_pattern_0.match(node_0, str_0)
        grammar_0 = module_1.Grammar()
        var_1 = grammar_0.copy()
        int_1 = 216
        var_2 = module_0.type_repr(int_1)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 51
        str_0 = 'kGOd:x:\\KG]SwZ7rk+'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        iterator_0 = leaf_0.leaves()
        int_1 = None
        node_pattern_0 = module_0.NodePattern(int_1, iterator_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '*o\x0bA\\zJ${'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = set()
        bool_0 = wildcard_pattern_0.match_seq(set_0)
        int_0 = 7
        str_1 = None
        none_type_0 = None
        list_0 = [str_1, set_0]
        leaf_0 = module_0.Leaf(int_0, str_1, none_type_0, list_0)
        list_1 = [leaf_0, leaf_0, leaf_0]
        node_0 = module_0.Node(int_0, list_1)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 317
        int_1 = -1985
        dict_0 = {}
        leaf_pattern_0 = module_0.LeafPattern(int_0, int_1, dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 1
        str_0 = "0TJBYq)@W'Weq"
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_0, leaf_1]
        int_1 = 2934
        node_0 = module_0.Node(int_1, list_0)
        node_1 = node_0.clone()
        int_2 = 3
        iterator_0 = leaf_0.pre_order()
        leaf_pattern_0 = module_0.LeafPattern(int_2, str_1)
        var_0 = leaf_pattern_0.match(leaf_0)
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_32():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = []
        iterator_0 = negated_pattern_0.generate_matches(var_0)
        var_1 = [(c, r) for (c, r) in iterator_0]
        int_0 = -1687
        str_0 = "8U@R}W.;L:Se\x0bA\t'"
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 914
        str_0 = 'N!pCDc9r;rF\\uO'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        any_1 = wildcard_pattern_0.optimize()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = module_0.Node(int_0, list_0, str_0)
        list_1 = [node_0, node_1]
        list_2 = [str_0, str_0, wildcard_pattern_0]
        node_2 = module_0.Node(int_0, list_1, list_2)
        node_3 = node_2.clone()
        node_4 = node_3.clone()
        node_5 = node_4.clone()
        node_5.update_sibling_maps()
        node_6 = node_5.clone()
        node_7 = node_5.clone()
        node_2.insert_child(int_0, node_5)
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        bool_0 = wildcard_pattern_0.match(int_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 264
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_2.update_sibling_maps()
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'I*'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = -5407
        int_1 = -1607
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        optional_0 = None
        tuple_2 = (int_0, str_0, tuple_1, optional_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 1
        str_0 = 'a'
        var_0 = None
        leaf_0 = module_0.Leaf(int_0, str_0, var_0, var_0)
        str_1 = leaf_0.get_suffix()
        optional_0 = leaf_0.get_lineno()
        wildcard_pattern_0 = module_0.WildcardPattern(str_1)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '&j\x0bA\\z]$'
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 14
        leaf_0 = module_0.Leaf(int_0, str_0)
        float_0 = -1107.01
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        var_0 = leaf_pattern_0.match(leaf_0, float_0)
        wildcard_pattern_0 = module_0.WildcardPattern(int_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 1
        str_0 = "\x0cj\nN'}`WnIV-\x0b%Azd_x"
        leaf_0 = module_0.Leaf(int_0, str_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        grammar_0 = module_1.Grammar()
        list_0 = [leaf_0, leaf_0]
        int_1 = 1938
        float_0 = -1068.0677
        tuple_0 = (int_1, str_0, float_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 1
        str_0 = "\x0cj\nN'}`WnIV-\x0b%Azd_x"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        bool_0 = wildcard_pattern_0.match_seq(int_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 914
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_0 = node_0.__str__()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        str_1 = ']{%(vp9j5\t'
        leaf_0 = module_0.Leaf(int_0, str_1)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 959
        str_0 = '&'
        grammar_0 = module_1.Grammar()
        int_1 = 8
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        optional_0 = None
        int_2 = 22
        leaf_0 = module_0.Leaf(int_2, str_0, tuple_1, str_0)
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_1]
        tuple_2 = (int_1, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        tuple_3 = (int_1, str_0, tuple_1, optional_0)
        var_1 = module_0.convert(grammar_0, tuple_3)
        leaf_2 = leaf_1.clone()
        leaf_0.replace(leaf_1)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 198
        bool_0 = False
        leaf_pattern_0 = module_0.LeafPattern(int_0, bool_0)
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = 954
        str_0 = None
        int_1 = 895
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1)
    except BaseException:
        pass

def test_case_44():
    try:
        bytes_0 = b''
        set_0 = {bytes_0}
        int_0 = 138
        wildcard_pattern_0 = module_0.WildcardPattern(set_0, int_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = "&jaA\\z']$iD"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = set()
        bool_0 = wildcard_pattern_0.match_seq(set_0)
        str_1 = 'bare_name'
        bool_1 = wildcard_pattern_0.match_seq(set_0, str_1)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = '5+q\n'
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 14
        leaf_0 = module_0.Leaf(int_0, str_0)
        float_0 = -1107.01
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
        var_0 = leaf_pattern_0.match(leaf_0, float_0)
    except BaseException:
        pass

def test_case_47():
    try:
        int_0 = 914
        str_0 = '"I[='
        grammar_0 = module_1.Grammar()
        int_1 = 8
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        optional_0 = None
        int_2 = 22
        leaf_0 = module_0.Leaf(int_2, str_0, tuple_1, str_0)
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_1]
        tuple_2 = (int_1, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        tuple_3 = (int_1, str_0, tuple_1, optional_0)
        var_1 = module_0.convert(grammar_0, tuple_3)
        leaf_2 = leaf_1.clone()
        str_1 = leaf_1.__repr__()
        node_0 = module_0.Node(int_0, list_0)
        node_0.set_child(int_0, leaf_2)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = '&j\x0bvWA\\zJ${'
        int_0 = 13
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__repr__()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 1389
        list_0 = [leaf_0]
        node_0 = module_0.Node(int_1, list_0, str_0, int_1)
        node_0.append_child(leaf_0)
        int_2 = 32
        leaf_pattern_0 = module_0.LeafPattern(int_2, str_0)
        any_1 = wildcard_pattern_0.optimize()
        node_pattern_0 = module_0.NodePattern(str_0)
    except BaseException:
        pass

def test_case_49():
    try:
        int_0 = 914
        str_0 = '"I[='
        grammar_0 = module_1.Grammar()
        int_1 = 8
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        optional_0 = None
        int_2 = 22
        leaf_0 = module_0.Leaf(int_2, str_0, tuple_1, str_0)
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_1]
        tuple_2 = (int_1, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
        int_3 = 26
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        tuple_3 = (int_1, str_0, tuple_1, optional_0)
        var_1 = module_0.convert(grammar_0, tuple_3)
        int_4 = 2362
        list_1 = [tuple_0, int_3]
        node_0 = module_0.Node(int_4, list_0, any_0, str_0, list_1)
        iterator_0 = node_0.pre_order()
        wildcard_pattern_1 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_50():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -1657
        str_0 = None
        int_1 = None
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        iterator_0 = None
        tuple_2 = (int_0, str_0, tuple_1, iterator_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_51():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = []
        iterator_0 = negated_pattern_0.generate_matches(var_0)
        var_1 = [(c, r) for (c, r) in iterator_0]
        int_0 = 1
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        negated_pattern_1 = module_0.NegatedPattern(leaf_pattern_0)
        negated_pattern_2 = module_0.NegatedPattern(leaf_pattern_0)
        int_1 = 2
        leaf_0 = module_0.Leaf(int_1)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'AD'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = set()
        bool_0 = wildcard_pattern_0.match_seq(set_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 9
        str_1 = None
        leaf_0 = module_0.Leaf(int_0, str_1)
        leaf_1 = leaf_0.clone()
        str_2 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        var_0 = leaf_pattern_0.match(leaf_0)
        int_1 = 3593
        var_1 = module_0.type_repr(int_1)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = 'A'
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 9
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 1152
        list_0 = [leaf_0]
        node_0 = module_0.Node(int_1, list_0)
        node_0.insert_child(int_1, leaf_0)
        leaf_1 = leaf_0.clone()
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        grammar_0 = module_1.Grammar()
        var_0 = leaf_pattern_0.match(leaf_0)
        leaf_0.replace(leaf_0)
    except BaseException:
        pass

def test_case_54():
    try:
        int_0 = 1
        str_0 = 'Z='
        leaf_0 = module_0.Leaf(int_0, str_0)
        optional_0 = leaf_0.remove()
        int_1 = 2
        int_2 = 3
        leaf_1 = leaf_0.clone()
        int_3 = 4
        node_0 = module_0.Node(int_3, int_1, int_2)
    except BaseException:
        pass