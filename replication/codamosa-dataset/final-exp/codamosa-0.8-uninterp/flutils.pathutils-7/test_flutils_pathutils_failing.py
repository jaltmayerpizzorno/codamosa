# Automatically generated by Pynguin.
import flutils.pathutils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = 'G\x0cA|^Nu3*Zek7S!L40P4'
        int_0 = 128
        path_0 = module_0.directory_present(str_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -4929
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 448
        str_0 = '/root'
        path_0 = module_0.directory_present(str_0)
        bool_0 = True
        module_0.chown(str_0, bool_0)
        module_0.path_absent(str_0)
        module_0.path_absent(str_0)
        path_1 = module_0.normalize_path(str_0)
        generator_0 = module_0.find_paths(str_0)
        module_0.path_absent(str_0)
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '*d4<c"sU[H`H,\x0b]@(b'
        str_1 = "Convert any escaped UTF-8 hexadecimal character bytes into the proper\n    string characters(s).\n\n    This function will convert a string, that may contain escaped UTF-8\n    literal hexadecimal bytes, into a string with the proper characters.\n\n    Args:\n        text (:obj:`str`): The string that may have escaped UTF8 hexadecimal.\n\n    Raises:\n         UnicodeDecodeError: if any of the escaped hexadecimal characters\n            are not proper UTF8 bytes.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each escaped UTF8 hexadecimal character converted\n            into the proper character.\n\n    Examples:\n\n        Basic usage:\n\n            >>> from flutils.strutils import convert_raw_utf8_escape\n            >>> a = 'test\\\\xc2\\\\xa9'\n            >>> convert_escaped_utf8_literal(a)\n            'test©'\n\n        This function is intended for cases when the value of an environment\n        variable contains escaped UTF-8 literal characters (bytes) that need\n        to be converted to proper characters::\n\n            $ export TEST='test\\\\xc2\\\\xa9'\n            $ python\n\n        ::\n\n            >>> import os\n            >>> from flutils.strutils import convert_raw_utf8_escape\n            >>> a = os.getenv('TEST')\n            >>> a\n            'test\\\\xc2\\\\xa9'\n            >>> convert_escaped_utf8_literal(a)\n            'test©'\n    "
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_0}
        posix_path_0 = module_1.PosixPath(**dict_0)
        str_2 = module_0.exists_as(posix_path_0)
        str_3 = '_xW;4Km97gi'
        struct_group_0 = module_0.get_os_group(str_3)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'test'
        struct_passwd_0 = module_0.get_os_user(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        path_like_0 = None
        path_0 = module_0.normalize_path(path_like_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xe4\\\x0f\x04<\x82EN\x878YN&\xf1\xda\xb3\x8d}'
        str_0 = module_0.exists_as(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '/tp/es_cown'
        int_0 = 451
        str_1 = '/>t'
        path_0 = module_0.directory_present(str_1)
        var_0 = path_0.rmdir()
        path_1 = module_0.directory_present(str_0)
        path_2 = module_0.directory_present(str_0, int_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'G\x0cA|^Nu3*Zek7S!L40P4'
        int_0 = -1709
        module_0.chmod(str_0)
        module_0.chmod(str_0, int_0)
        struct_passwd_0 = module_0.get_os_user()
        module_0.chmod(str_0, int_0)
        bytes_0 = b'\xa5\xf4'
        generator_0 = module_0.find_paths(str_0)
        module_0.chmod(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '~/tmp'
        str_1 = module_0.exists_as(str_0)
        path_0 = module_0.directory_present(str_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'G\x0cA|^Nu3*Zek7S!L40P4'
        path_0 = module_0.normalize_path(str_0)
        int_0 = -1709
        module_0.chmod(str_0)
        module_0.chmod(str_0, int_0)
        bool_0 = True
        module_0.chown(str_0, bool_0)
        struct_passwd_0 = module_0.get_os_user()
        module_0.chmod(str_0, int_0)
        bytes_0 = b'\xa5\xf4'
        generator_0 = module_0.find_paths(str_0)
        module_0.chmod(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -1202
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xbco\xac-\xdc\xf1\xbc\\\x0c\x05&O\x94'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        struct_group_0 = module_0.get_os_group(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        struct_passwd_0 = module_0.get_os_user(dict_0)
    except BaseException:
        pass