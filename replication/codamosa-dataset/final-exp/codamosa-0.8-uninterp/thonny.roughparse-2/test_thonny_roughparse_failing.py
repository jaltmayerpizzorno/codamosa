# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(tuple_0, tuple_0)
        var_0 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_1():
    try:
        hyper_parser_0 = None
        tuple_0 = (hyper_parser_0,)
        int_0 = -927
        float_0 = 0.7
        complex_0 = None
        set_0 = {int_0, tuple_0, tuple_0, int_0}
        bytes_0 = b'A\xda\x9a\xf1\x03Y\xd4y\xb3\xf3\xe9'
        rough_parser_0 = module_0.RoughParser(set_0, bytes_0)
        var_0 = rough_parser_0.find_good_parse_start(float_0, complex_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 2309
        bytes_0 = b'Q\x07\xf8&\xe5\xb9\xe8\x18+\x11\xaa`n\xef\x05\x99D\xfe\xde\xf6'
        rough_parser_0 = module_0.RoughParser(int_0, bytes_0)
        bool_0 = False
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        tuple_0 = ()
        str_0 = '^!\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, var_0]
        set_0 = {float_0}
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_1 = rough_parser_0.set_str(str_0)
        bool_0 = False
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_0.set_lo(bool_0)
        var_4 = rough_parser_0.get_continuation_type()
        var_5 = rough_parser_0.set_lo(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1813.5699
        str_0 = "~6zbeZ,n5J'M+6$j:"
        rough_parser_0 = module_0.RoughParser(float_0, str_0)
        var_0 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -2005.7372
        dict_0 = {}
        list_0 = [float_0]
        bytes_0 = b'|\xae\x10\x85/\x81B\xc3\xd6\x11\x97\xd3\xa8\xf5\xc4\x91\xaa'
        rough_parser_0 = module_0.RoughParser(list_0, bytes_0)
        var_0 = rough_parser_0.set_str(dict_0)
        bytes_1 = b'\xf64\x1f_K\x06\x0c'
        rough_parser_1 = module_0.RoughParser(float_0, bytes_1)
        var_1 = rough_parser_1.is_block_opener()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2309
        hyper_parser_0 = None
        bytes_0 = b'Q\x07\xf8&\xe5\xb9\xe8\x18+\x11\xaa`n\xef\x05\x99D\xfe\xde\xf6'
        rough_parser_0 = module_0.RoughParser(int_0, bytes_0)
        bool_0 = False
        var_0 = rough_parser_0.set_lo(bool_0)
        string_translate_pseudo_mapping_0 = None
        rough_parser_1 = module_0.RoughParser(hyper_parser_0, string_translate_pseudo_mapping_0)
        var_1 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '$'
        set_0 = {str_0}
        dict_0 = {}
        rough_parser_0 = module_0.RoughParser(set_0, dict_0)
        var_0 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'B'
        float_0 = 1324.554209
        hyper_parser_0 = module_0.HyperParser(str_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0}
        list_0 = [set_0, set_0, bool_0, set_0]
        float_0 = -2666.1244
        rough_parser_0 = module_0.RoughParser(list_0, float_0)
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        str_0 = '#\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, float_0]
        set_0 = set()
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.is_block_closer()
        var_3 = rough_parser_0.get_last_stmt_bracketing()
        var_4 = rough_parser_0.find_good_parse_start()
        var_5 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_11():
    try:
        hyper_parser_0 = None
        list_0 = [hyper_parser_0]
        bytes_0 = b'\xef\x0e\xef\xd1\xcd~\xe8\xd0\x90\xac<\xaey\x8d\xb6\xe4\xae\xca'
        rough_parser_0 = module_0.RoughParser(list_0, bytes_0)
        var_0 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '$'
        set_0 = {str_0}
        dict_0 = {}
        rough_parser_0 = module_0.RoughParser(set_0, dict_0)
        list_0 = [rough_parser_0, set_0, str_0]
        var_0 = rough_parser_0.set_str(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        rough_parser_0 = None
        set_0 = set()
        bytes_0 = b'a{\xce*&\xc4e\xc4\x15<B\xddP\n\xd0\x89\x15^'
        rough_parser_1 = module_0.RoughParser(set_0, bytes_0)
        var_0 = rough_parser_1.set_lo(rough_parser_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = None
        bool_0 = True
        rough_parser_0 = None
        list_0 = [bool_0, rough_parser_0]
        rough_parser_1 = module_0.RoughParser(bool_0, list_0)
        str_0 = 'TED \x0c0(Y'
        bytes_0 = b'Vl\xaa\xf1\xa2`L\xf6\xb1\x02\x9d\x8f\xf7\xe3b\xfcF'
        dict_0 = {bytes_0: rough_parser_1, int_0: str_0, bool_0: rough_parser_0}
        int_1 = 2885
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, rough_parser_1)
        var_0 = string_translate_pseudo_mapping_0.get(int_1)
        var_1 = rough_parser_1.set_lo(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        bytes_0 = b'Q\x07\xf8&\xe5\xb9\xe8\x18+\x11\xaa`n\xef\x05\x99D\xfe\xde\xf6'
        rough_parser_0 = module_0.RoughParser(int_0, bytes_0)
        bool_0 = False
        var_1 = rough_parser_0.set_lo(bool_0)
        str_0 = 'o=Hy65jC<B:_y'
        var_2 = rough_parser_0.set_lo(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        var_1 = string_translate_pseudo_mapping_1.__len__()
        bytes_0 = b'Q\x07\xf8&\xe5\xb9\xe8\x18+\x11\xaa`n\xef\x05\x99D\xfe\xde\xf6'
        rough_parser_0 = module_0.RoughParser(int_0, bytes_0)
        bool_0 = False
        var_2 = rough_parser_0.set_lo(bool_0)
        int_1 = -577
        var_3 = rough_parser_0.set_lo(int_1)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.7
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        str_0 = '^!\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, var_0]
        set_0 = {float_0}
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_1 = rough_parser_0.set_str(str_0)
        bytes_0 = b'Q\x07\xf8&\xe5\xb9\xe8\x18+\x11\xaa`n\xef\x05\x99D\xfe\xde\xf6'
        rough_parser_1 = module_0.RoughParser(int_0, bytes_0)
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_1.set_lo(set_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        str_0 = '^!\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, var_0]
        set_0 = {float_0}
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_1 = rough_parser_0.set_str(str_0)
        bool_0 = True
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_0.set_lo(bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        str_0 = 'L#\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, float_0]
        set_0 = set()
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.get_last_open_bracket_pos()
        var_3 = string_translate_pseudo_mapping_1.__getitem__(str_0)
        var_4 = rough_parser_0.get_base_indent_string()
        str_1 = "Used when an instance in a with statement doesn't implement the context manager protocol(__enter__/__exit__)."
        var_5 = rough_parser_0.find_good_parse_start(str_1)
        var_6 = rough_parser_0.is_block_closer()
        var_7 = rough_parser_0.find_good_parse_start()
        string_translate_pseudo_mapping_2 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_8 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = 888.373
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        str_0 = '#\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, float_0]
        set_0 = set()
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        str_1 = 'gp8te0E'
        var_2 = string_translate_pseudo_mapping_1.__getitem__(str_1)
        var_3 = rough_parser_0.find_good_parse_start(float_0)
        var_4 = rough_parser_0.get_base_indent_string()
        var_5 = rough_parser_0.find_good_parse_start()
        var_6 = rough_parser_0.is_block_closer()
        var_7 = rough_parser_0.get_last_stmt_bracketing()
        var_8 = rough_parser_0.find_good_parse_start()
        var_9 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.7
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        str_0 = '^!\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, var_0]
        set_0 = {float_0}
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.is_block_opener()
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        str_0 = '^!\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, var_0]
        set_0 = {float_0}
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        tuple_0 = ()
        str_0 = '\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, tuple_0]
        set_0 = {float_0, string_translate_pseudo_mapping_0, tuple_0}
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.is_block_closer()
        var_2 = rough_parser_0.get_last_stmt_bracketing()
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        tuple_0 = ()
        str_0 = '\n'
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, tuple_0]
        set_0 = {float_0, string_translate_pseudo_mapping_0, tuple_0}
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.is_block_closer()
        var_2 = rough_parser_0.get_base_indent_string()
        var_3 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_4 = rough_parser_0.is_block_closer()
        var_5 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2610.0
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        tuple_0 = ()
        str_0 = ''
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, tuple_0]
        set_0 = {float_0}
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.is_block_closer()
        var_4 = rough_parser_0.get_base_indent_string()
        var_5 = rough_parser_0.find_good_parse_start(list_0)
        var_6 = rough_parser_0.is_block_closer()
        var_7 = rough_parser_0.get_last_stmt_bracketing()
        var_8 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 2309
        string_translate_pseudo_mapping_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: int_0}
        float_0 = -2609.685886
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        str_0 = '\n'
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        list_0 = [string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_1, string_translate_pseudo_mapping_1, int_0]
        set_0 = set()
        rough_parser_0 = module_0.RoughParser(list_0, set_0)
        var_1 = rough_parser_0.set_str(str_0)
        bool_0 = True
        var_2 = rough_parser_0.set_lo(bool_0)
        var_3 = string_translate_pseudo_mapping_1.__iter__()
        var_4 = rough_parser_0.get_base_indent_string()
        var_5 = rough_parser_0.find_good_parse_start(set_0)
        var_6 = rough_parser_0.get_base_indent_string()
        var_7 = rough_parser_0.find_good_parse_start(str_0)
        var_8 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass