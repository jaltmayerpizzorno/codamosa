# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.metaclass as module_1

def test_case_0():
    try:
        module_x_var_0 = module_0.Module()
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        module_x_var_1 = metaclass_transformer_0.visit_Module(module_x_var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        class_def_0 = module_0.ClassDef()
        str_0 = "*'>0"
        str_1 = 'nc?q5;F'
        dict_0 = {str_0: str_0, str_1: str_0}
        a_s_t_0 = module_0.AST(**dict_0)
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_2():
    try:
        module_x_var_0 = module_0.Module()
        module_x_var_1 = module_0.Module()
        module_x_var_2 = module_0.Module()
        list_0 = [module_x_var_0, module_x_var_1, module_x_var_1, module_x_var_2]
        class_def_0 = module_0.ClassDef(*list_0)
        list_1 = []
        a_s_t_0 = module_0.AST(*list_1)
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_3():
    try:
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        a_s_t_1 = module_0.AST()
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_1)
        bool_0 = True
        tuple_0 = ()
        list_0 = [metaclass_transformer_1, a_s_t_0, tuple_0]
        str_0 = '\t8='
        dict_0 = {str_0: a_s_t_1}
        class_def_0 = module_0.ClassDef(*list_0, **dict_0)
        class_def_1 = metaclass_transformer_1.visit_ClassDef(class_def_0)
        class_def_2 = metaclass_transformer_1.visit_ClassDef(class_def_1)
        list_1 = [a_s_t_1, bool_0, a_s_t_1, metaclass_transformer_1]
        class_def_3 = module_0.ClassDef(*list_1)
        class_def_4 = metaclass_transformer_1.visit_ClassDef(class_def_3)
    except BaseException:
        pass

def test_case_4():
    try:
        a_s_t_0 = module_0.AST()
        list_0 = [a_s_t_0, a_s_t_0, a_s_t_0]
        list_1 = [list_0, a_s_t_0]
        module_x_var_0 = module_0.Module(*list_1)
        a_s_t_1 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_1)
        module_x_var_1 = metaclass_transformer_0.visit_Module(module_x_var_0)
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_1)
        module_x_var_2 = metaclass_transformer_1.visit_Module(module_x_var_0)
        metaclass_transformer_2 = module_1.MetaclassTransformer(a_s_t_0)
        bool_0 = True
        list_2 = [a_s_t_0, bool_0, a_s_t_0, metaclass_transformer_2]
        class_def_0 = module_0.ClassDef(*list_2)
        class_def_1 = metaclass_transformer_2.visit_ClassDef(class_def_0)
    except BaseException:
        pass