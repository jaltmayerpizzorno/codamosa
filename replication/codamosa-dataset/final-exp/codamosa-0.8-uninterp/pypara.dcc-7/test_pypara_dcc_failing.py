# Automatically generated by Pynguin.
import pypara.dcc as module_0
import datetime as module_1

def test_case_0():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        date_0 = None
        decimal_0 = module_0.dcfc_30_e_360(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_1.date(*list_0)
        decimal_0 = module_0.dcfc_30_360_german(date_0, date_0, date_0, bool_0)
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_0 = '#8HkJwf221R\x0cXu{?uv='
        date_1 = module_1.date(*list_0)
        decimal_1 = module_0.dcfc_act_365_l(date_0, date_1, date_0)
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        optional_0 = d_c_c_registry_machinery_1.find(str_0)
        decimal_2 = module_0.dcfc_30_360_us(date_0, date_0, date_0)
        decimal_3 = module_0.dcfc_act_365_f(date_1, date_0, date_0)
        date_2 = module_1.date()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_1.date(*list_0)
        decimal_0 = module_0.dcfc_nl_365(date_0, date_0, date_0)
        decimal_1 = module_0.dcfc_act_365_a(date_0, date_0, date_0)
        date_1 = module_1.date()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_1.date(*list_0)
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        decimal_0 = module_0.dcfc_nl_365(date_0, date_0, date_0)
        decimal_1 = module_0.dcfc_act_365_a(date_0, date_0, date_0)
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        decimal_2 = module_0.dcfc_act_act_icma(date_0, date_0, date_0, decimal_1)
    except BaseException:
        pass

def test_case_4():
    try:
        date_0 = None
        list_0 = [date_0, date_0, date_0, date_0]
        d_c_c_0 = module_0.DCC(*list_0)
        decimal_0 = d_c_c_0.calculate_fraction(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        date_0 = module_1.date(*list_0)
        decimal_0 = module_0.dcfc_30_e_360(date_0, date_0, date_0)
        decimal_1 = module_0.dcfc_30_360_german(date_0, date_0, date_0, decimal_0)
        decimal_2 = module_0.dcfc_30_360_isda(date_0, date_0, date_0, decimal_0)
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        decimal_3 = module_0.dcfc_30_e_plus_360(date_0, date_0, date_0, decimal_0)
        decimal_4 = module_0.dcfc_nl_365(date_0, date_0, date_0)
        decimal_5 = module_0.dcfc_act_365_a(date_0, date_0, date_0)
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        str_0 = 'K8M/t2gw\x0cNfvd\x0bUXz"7H'
        optional_0 = d_c_c_registry_machinery_1.find(str_0)
        decimal_6 = module_0.dcfc_30_360_us(date_0, date_0, date_0, decimal_2)
        decimal_7 = module_0.dcfc_act_365_l(date_0, date_0, date_0, decimal_6)
        list_1 = [str_0, decimal_7, decimal_2, decimal_7]
        d_c_c_0 = module_0.DCC(*list_1)
        decimal_8 = d_c_c_0.calculate_fraction(date_0, date_0, date_0, decimal_3)
    except BaseException:
        pass