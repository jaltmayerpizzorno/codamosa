# Automatically generated by Pynguin.
import tornado.options as module_0
import typing as module_1

def test_case_0():
    try:
        str_0 = '1\x0cjuA|\rN;E'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '9&O>;\nEY=pF'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "Q<FM>>Ro'CB"
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = 'WNCI2)(6d#st\t\x0c6moq'
        option_parser_1 = module_0.OptionParser()
        iterator_0 = option_parser_1.__iter__()
        mockable_0 = module_0._Mockable(option_parser_0)
        set_0 = option_parser_1.groups()
        str_2 = 'Reset the internal flag to ``False``.\n\n        Calls to `.wait` will block until `.set` is called.\n        '
        bool_0 = option_parser_0.__contains__(str_2)
        bytes_0 = b'\xb9\xe2\x18\xfa\xba\xf4\xf6\xf5\xb6\x8c'
        module_0.define(str_1, bytes_0, str_0)
        str_3 = 'D'
        str_4 = 'H\x0bs@'
        dict_1 = {str_3: mockable_0, str_4: str_3}
        error_0 = module_0.Error(**dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        str_1 = '=?%hhp:K#'
        bool_0 = False
        module_0.define(str_1, str_0, bool_0)
        error_0 = module_0.Error()
        option_parser_0 = module_0.OptionParser()
        bool_1 = option_parser_0.__contains__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'fyOB%$TtzS'
        bool_0 = option_parser_0.__contains__(str_0)
        str_1 = 'Kvrt(|\tp*'
        module_0.define(str_1)
        error_0 = module_0.Error()
        mockable_0 = option_parser_0.mockable()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_7():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        option_parser_1 = module_0.OptionParser()
        str_0 = '"\\iorPk3"|+*7Kgk'
        bool_0 = False
        option_parser_0.parse_config_file(str_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'size'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '/n\x0c'
        module_0.define(str_0, str_0)
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        option_parser_0.print_help()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '`d=ssGtyJ{jLOX5'
        option_0 = module_0._Option(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '/input/tornado/log.py'
        text_i_o_0 = module_1.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        bool_0 = True
        option_0 = module_0._Option(str_0, str_0, bool_0)
        option_0.set(text_i_o_1)
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        str_1 = 'H5b(JaR]AuZBo\tKrUE'
        any_0 = option_0.parse(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '1Sa@n'
        str_1 = 'wf;>D3'
        bool_0 = True
        option_0 = module_0._Option(str_1, str_0, bool_0)
        any_0 = option_0.value()
        option_1 = module_0._Option(str_0, any_0, str_0, str_1, str_0, str_0)
        any_1 = option_1.parse(str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = {}
        module_0.add_parse_callback(dict_0)
        str_0 = 'p+9jL".aOzFO'
        str_1 = 'l[CI'
        option_0 = module_0._Option(str_1, str_0, str_0, str_1)
        option_0.set(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'e"e\niK'
        str_1 = 'q'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        list_0 = [str_1, str_0, str_1, str_1]
        option_parser_1 = module_0.OptionParser()
        list_1 = option_parser_1.parse_command_line(list_0)
        str_2 = '/input/tornado/log.py'
        option_parser_2 = module_0.OptionParser()
        dict_1 = option_parser_1.group_dict(str_1)
        option_parser_2.parse_config_file(str_2)
        option_parser_2.define(str_2, dict_1)
        option_parser_3 = module_0.OptionParser()
        text_i_o_0 = module_1.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        option_parser_3.print_help(text_i_o_0)
        option_parser_4 = module_0.OptionParser()
        option_parser_2.print_help(text_i_o_0)
        bool_0 = True
        module_0.parse_config_file(str_2, bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        module_0.print_help()
    except BaseException:
        pass

def test_case_17():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        str_0 = '-\tDql0'
        list_0 = [str_0, str_0]
        list_1 = option_parser_1.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '/n\x0c'
        module_0.define(str_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = ';GFb=W|pWIRNG+)h[X1Q'
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_1.group_dict(str_0)
        module_0.print_help()
        option_parser_1.print_help()
        option_parser_2 = module_0.OptionParser()
        option_parser_3 = module_0.OptionParser()
        mockable_0 = option_parser_3.mockable()
        str_1 = None
        str_2 = ''
        list_0 = [str_1, str_2, str_1, str_1]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.print_help()
        str_0 = '.'
        error_0 = module_0.Error()
        int_0 = -2767
        bool_0 = False
        option_parser_0.define(str_0, error_0, int_0, str_0, bool_0, str_0, option_parser_0)
        option_parser_2 = module_0.OptionParser()
        set_1 = option_parser_2.groups()
        option_parser_3 = module_0.OptionParser()
        str_1 = '/input/tornado/options.py'
        bool_1 = option_parser_3.__contains__(str_1)
        option_parser_4 = module_0.OptionParser()
        mockable_0 = option_parser_4.mockable()
        bool_2 = None
        list_0 = module_0.parse_command_line(bool_2)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0)
        text_i_o_0 = module_1.TextIO()
        option_parser_0.print_help(text_i_o_0)
        iterator_0 = option_parser_0.__iter__()
        option_parser_1 = module_0.OptionParser()
        str_1 = 'VwX,$V4t{#-'
        list_0 = [str_0, str_1]
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_1.add_parse_callback(text_i_o_0)
        str_2 = 'ZN&{'
        option_parser_1.__setattr__(str_2, iterator_0)
    except BaseException:
        pass

def test_case_22():
    try:
        option_parser_0 = module_0.OptionParser()
        callable_0 = None
        module_0.add_parse_callback(callable_0)
        dict_0 = option_parser_0.as_dict()
        str_0 = '+Gs2V6\tq=)\n-K`bAZ?'
        option_parser_1 = module_0.OptionParser()
        option_parser_1.run_parse_callbacks()
        mockable_0 = module_0._Mockable(option_parser_1)
        mockable_1 = option_parser_0.mockable()
        list_0 = [str_0]
        bool_0 = True
        list_1 = module_0.parse_command_line(list_0, bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        option_parser_0 = module_0.OptionParser()
        module_0.print_help()
        text_i_o_0 = module_1.TextIO()
        option_parser_0.print_help(text_i_o_0)
        option_parser_1 = module_0.OptionParser()
        str_0 = 'Starts multiple worker processes.\n\n    If ``num_processes`` is None or <= 0, we detect the number of cores\n    available on this machine and fork that number of child\n    processes. If ``num_processes`` is given and > 0, we fork that\n    specific number of sub-processes.\n\n    Since we use processes and not threads, there is no shared memory\n    between any server code.\n\n    Note that multiple processes are not compatible with the autoreload\n    module (or the ``autoreload=True`` option to `tornado.web.Application`\n    which defaults to True when ``debug=True``).\n    When using multiple processes, no IOLoops can be created or\n    referenced until after the call to ``fork_processes``.\n\n    In each child process, ``fork_processes`` returns its *task id*, a\n    number between 0 and ``num_processes``.  Processes that exit\n    abnormally (due to a signal or non-zero exit status) are restarted\n    with the same id (up to ``max_restarts`` times).  In the parent\n    process, ``fork_processes`` calls ``sys.exit(0)`` after all child\n    processes have exited normally.\n\n    max_restarts defaults to 100.\n\n    Availability: Unix\n    '
        dict_0 = option_parser_1.group_dict(str_0)
        bool_0 = False
        list_0 = option_parser_1.parse_command_line(bool_0)
    except BaseException:
        pass

def test_case_24():
    try:
        option_parser_0 = None
        str_0 = '?'
        bool_0 = False
        option_0 = module_0._Option(str_0, str_0, bool_0)
        option_0.set(option_parser_0)
        str_1 = 'n\x0c'
        dict_0 = option_parser_0.group_dict(str_1)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'q'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        list_0 = [str_0, str_0, str_0, str_0]
        option_parser_1 = module_0.OptionParser()
        option_parser_0.print_help()
        list_1 = option_parser_1.parse_command_line(list_0)
        str_1 = '/input/tornado/log.py'
        dict_1 = option_parser_1.group_dict(str_0)
        option_parser_0.parse_config_file(str_1)
        option_parser_0.define(str_1, dict_1)
        text_i_o_0 = module_1.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        option_parser_0.print_help(text_i_o_0)
        mockable_0 = option_parser_0.mockable()
        set_0 = option_parser_1.groups()
        mockable_1 = option_parser_0.mockable()
        mockable_1.__setattr__(str_1, dict_0)
        option_parser_2 = module_0.OptionParser()
        mockable_2 = option_parser_2.mockable()
        option_parser_3 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_2 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'q'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_0 = [str_0, str_0, str_0, str_0]
        option_parser_0.print_help()
        list_1 = option_parser_0.parse_command_line(list_0)
        str_1 = '/input/tornado/log.py'
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_0.parse_config_file(str_1)
        option_parser_0.define(str_1, dict_0)
        text_i_o_0 = module_1.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        option_parser_0.print_help(text_i_o_0)
        mockable_0 = option_parser_0.mockable()
        mockable_1 = option_parser_0.mockable()
        mockable_1.__setattr__(str_1, dict_0)
        option_parser_1 = module_0.OptionParser()
        mockable_1.__setattr__(str_1, mockable_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'i'
        list_0 = [str_0, str_0, str_0, str_0]
        option_parser_0 = module_0.OptionParser()
        list_1 = option_parser_0.parse_command_line(list_0)
        str_1 = '/input/tornado/log.py'
        bool_0 = False
        option_parser_0.parse_config_file(str_1, bool_0)
        dict_0 = option_parser_0.as_dict()
        option_parser_0.define(str_1, dict_0)
        text_i_o_0 = module_1.TextIO()
        option_parser_1 = module_0.OptionParser()
        option_parser_0.print_help(text_i_o_0)
        option_parser_2 = module_0.OptionParser()
        option_parser_3 = module_0.OptionParser()
        set_0 = option_parser_3.groups()
        any_0 = None
        option_0 = module_0._Option(str_1, any_0, str_0, bool_0, str_0, str_1)
        option_0.set(bool_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'i'
        option_parser_0 = module_0.OptionParser()
        list_0 = [str_0, str_0, str_0, str_0]
        option_parser_1 = module_0.OptionParser()
        list_1 = option_parser_1.parse_command_line(list_0)
        str_1 = '/input/tornado/log.py'
        bool_0 = False
        option_parser_0.parse_config_file(str_1, bool_0)
        dict_0 = option_parser_1.group_dict(str_0)
        option_parser_0.parse_config_file(str_1)
        option_parser_0.define(str_1, dict_0)
        option_parser_2 = module_0.OptionParser()
        mockable_0 = option_parser_2.mockable()
        set_0 = option_parser_1.groups()
        bool_1 = True
        str_2 = 'g[d'
        list_2 = option_parser_2.parse_command_line(list_1)
        str_3 = ''
        mockable_1 = module_0._Mockable(option_parser_2)
        iterable_0 = option_parser_2.items()
        option_0 = module_0._Option(str_1, str_3, str_2, bool_1, str_2, str_2, iterable_0)
        option_0.set(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'q'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_0.define(str_0, iterable_0, str_0)
        dict_0 = option_parser_0.group_dict(str_0)
        list_0 = [str_0, str_0, str_0, str_0]
        option_parser_1 = module_0.OptionParser()
        option_parser_0.print_help()
        list_1 = option_parser_1.parse_command_line(list_0)
        str_1 = '/input/tornado/log.py'
        dict_1 = option_parser_1.group_dict(str_0)
        option_parser_0.parse_config_file(str_1)
        option_parser_0.define(str_1, dict_1)
        text_i_o_0 = module_1.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        option_parser_0.print_help(text_i_o_0)
        mockable_0 = option_parser_0.mockable()
        set_0 = option_parser_1.groups()
        bool_0 = True
        option_0 = module_0._Option(str_0, str_1, bool_0)
        option_0.set(text_i_o_1)
        list_2 = []
        module_0.add_parse_callback(list_2)
        str_2 = 'ZO?073EV_rxQHT73c`'
        mockable_1 = option_parser_0.mockable()
        none_type_0 = None
        none_type_1 = None
        option_parser_2 = module_0.OptionParser()
        option_parser_2.define(str_0, none_type_0, none_type_1, str_2, bool_0, str_0, set_0)
        mockable_1.__setattr__(str_1, dict_0)
        option_parser_3 = module_0.OptionParser()
        mockable_2 = option_parser_3.mockable()
        option_parser_4 = module_0.OptionParser()
        iterable_1 = option_parser_4.items()
        str_3 = ',Yv/#n_GB^r~}'
        any_0 = option_0.parse(str_3)
    except BaseException:
        pass