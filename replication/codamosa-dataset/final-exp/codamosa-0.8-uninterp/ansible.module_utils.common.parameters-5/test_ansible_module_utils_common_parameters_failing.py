# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "(cq#, :.#@l'L9,HmR;"
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.remove_values(list_0, str_0)
        dict_0 = {str_0: str_0}
        bool_0 = False
        var_1 = module_0.set_fallbacks(dict_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b':&"r'
        list_0 = [bytes_0, bytes_0, bytes_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        var_0 = module_0.set_fallbacks(bool_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        str_0 = '6g;'
        dict_1 = {str_0: dict_0}
        str_1 = '!&]uX\n@&O\r#sIk+N]#'
        var_0 = module_0.set_fallbacks(dict_1, str_1)
        var_1 = module_0.env_fallback(**dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'F5\x0bqc=8NXV~&@Ii\x0bVhr'
        list_0 = [str_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 723
        str_0 = 'ho8Ks=e9a$9H'
        float_0 = None
        str_1 = 't2D>RoHu<\x0c!)X&'
        list_0 = [float_0, float_0, str_1, int_0]
        var_0 = module_0.remove_values(int_0, list_0)
        list_1 = [float_0, float_0]
        var_1 = module_0.remove_values(str_1, list_1)
        str_2 = 'T/dO8(mA6D$\r\x0c'
        str_3 = 'C;BWRtK&.<-hYCaVB'
        list_2 = [var_0, list_0, str_1, str_1]
        dict_0 = {str_1: str_3, float_0: str_2, str_2: str_0, float_0: list_0}
        int_1 = None
        bool_0 = False
        tuple_0 = (dict_0, int_1, int_1, bool_0)
        var_2 = module_0.remove_values(tuple_0, dict_0)
        var_3 = module_0.env_fallback(*list_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'create inventory graph, if supplying pattern it must be a valid group name'
        float_0 = 1000.0
        list_0 = [float_0, str_0]
        var_0 = module_0.remove_values(float_0, list_0)
        list_1 = [str_0]
        dict_0 = {str_0: list_1, str_0: str_0}
        bool_0 = False
        tuple_0 = (dict_0, bool_0)
        var_1 = module_0.sanitize_keys(tuple_0, tuple_0)
        var_2 = module_0.sanitize_keys(dict_0, dict_0)
        var_3 = module_0.remove_values(str_0, list_1)
        var_4 = module_0.env_fallback(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "(cq#, :.#@l'L9,HmR;"
        dict_0 = {str_0: str_0}
        bool_0 = False
        var_0 = module_0.set_fallbacks(dict_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        str_0 = '..~zjqxr3&46@@`0,'
        dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0}
        var_0 = module_0.sanitize_keys(str_0, dict_0)
        var_1 = dict(required=bool_0, type=str_0, fallback=str_0)
        var_2 = dict(test=var_1)
        str_1 = 'M\\-;SD\rdnq^5xr5Pe\n'
        var_3 = module_0.remove_values(str_1, dict_0)
        var_4 = module_0.set_fallbacks(var_2, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = None
        list_1 = [list_0, list_0]
        dict_0 = {list_0: list_1, list_0: list_1, list_0: list_0}
        str_0 = '\rAJ-@33#}'
        var_0 = module_0.sanitize_keys(dict_0, str_0, dict_0)
    except BaseException:
        pass