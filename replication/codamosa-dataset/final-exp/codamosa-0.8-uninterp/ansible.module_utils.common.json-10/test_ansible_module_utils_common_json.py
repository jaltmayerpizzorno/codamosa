# Automatically generated by Pynguin.
import ansible.module_utils.common.json as module_0

def test_case_0():
    pass

def test_case_1():
    list_0 = []
    int_0 = 623
    ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(int_0)
    var_0 = ansible_j_s_o_n_encoder_0.iterencode(list_0)

def test_case_2():
    list_0 = None
    int_0 = 2671
    ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(int_0)
    var_0 = ansible_j_s_o_n_encoder_0.iterencode(list_0)

def test_case_3():
    str_0 = 'YP5P>\x0c'
    ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(str_0)
    str_1 = 'OW160\r'
    dict_0 = {str_0: str_1}
    var_0 = ansible_j_s_o_n_encoder_0.iterencode(dict_0)
    set_0 = set()
    var_1 = ansible_j_s_o_n_encoder_0.iterencode(set_0)
    ansible_j_s_o_n_encoder_1 = module_0.AnsibleJSONEncoder()
    float_0 = -3051.183
    var_2 = ansible_j_s_o_n_encoder_0.iterencode(float_0)

def test_case_4():
    ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder()

def test_case_5():
    str_0 = '-^>?WY3'
    str_1 = '\n    Combine ABCMeta based classes with Singleton based classes\n\n    Combine Singleton and ABCMeta so we have a metaclass that unambiguously knows which can override\n    the other.  Useful for making new types of containers which are also Singletons.\n    '
    dict_0 = {str_0: str_0, str_1: str_0}
    float_0 = -1633.0
    ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(float_0)
    var_0 = ansible_j_s_o_n_encoder_0.default(dict_0)

def test_case_6():
    ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder()
    bytes_0 = b'\x03d\x11\xae\xca\xcfW)\xae'
    var_0 = ansible_j_s_o_n_encoder_0.iterencode(bytes_0)

def test_case_7():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    int_0 = 623
    ansible_j_s_o_n_encoder_0 = module_0.AnsibleJSONEncoder(int_0)
    var_0 = ansible_j_s_o_n_encoder_0.iterencode(list_1)