# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        int_0 = None
        list_0 = [int_0, int_0, int_0, int_0]
        str_0 = "w5ap(boC1`Lh>Rm/M'S"
        str_1 = '\x0cnR>\x0b N b(5K'
        either_0 = module_0.Either(str_1)
        var_0 = either_0.case(list_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        object_0 = module_1.object(**dict_0)
        str_0 = '\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        '
        bytes_0 = b'(\x00c?\xe3\r$\x9e\xf5'
        float_0 = 959.504
        left_0 = module_0.Left(float_0)
        var_0 = left_0.bind(bytes_0)
        either_0 = module_0.Either(var_0)
        var_1 = either_0.to_lazy()
        either_1 = module_0.Either(either_0)
        var_2 = either_1.ap(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = None
        list_0 = [int_0, int_0, int_0, int_0]
        str_0 = "w5ap(boC1`Lh>Rm/M'S"
        str_1 = '\x0cnR>\x0b N b(5K'
        either_0 = module_0.Either(str_1)
        var_0 = either_0.to_box()
        var_1 = either_0.case(list_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        str_0 = '&[h_\nd!5AaKBVSRYlh\rO'
        str_1 = 'c@f9\\D~jL{%w '
        tuple_0 = (set_0,)
        either_0 = module_0.Either(tuple_0)
        var_0 = either_0.to_lazy()
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
        object_0 = module_1.object(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        object_0 = module_1.object()
        left_0 = module_0.Left(object_0)
        bool_1 = left_0.is_right()
        var_0 = left_0.map(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '>#&CxK]uxX}E'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {str_0: str_0, str_0: str_0}
        left_0 = module_0.Left(dict_1)
        object_0 = module_1.object()
        bool_0 = False
        either_0 = module_0.Either(bool_0)
        bool_1 = either_0.__eq__(object_0)
        var_0 = left_0.bind(dict_0)
        var_1 = either_0.to_box()
        right_0 = module_0.Right(str_0)
        list_0 = [left_0, bool_1, dict_0, var_1]
        var_2 = right_0.map(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '1:\x0c 1``>-s5'
        set_0 = {str_0, str_0, str_0, str_0}
        int_0 = 12
        dict_0 = {}
        object_0 = module_1.object()
        str_1 = '%Lq\n+'
        dict_1 = {str_1: dict_0}
        either_0 = module_0.Either(dict_1)
        bool_0 = either_0.__eq__(object_0)
        right_0 = module_0.Right(dict_0)
        bool_1 = right_0.is_left()
        list_0 = [str_0, str_0, int_0]
        left_0 = module_0.Left(list_0)
        bool_2 = left_0.is_left()
        var_0 = left_0.ap(set_0)
        right_1 = module_0.Right(str_0)
        str_2 = 'z'
        var_1 = right_1.map(str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        right_0 = module_0.Right(var_0)
        list_0 = [right_0]
        right_1 = module_0.Right(list_0)
        var_1 = right_1.to_maybe()
        bytes_0 = b'\xf6J'
        right_2 = module_0.Right(bytes_0)
        left_0 = module_0.Left(right_2)
        var_2 = left_0.to_maybe()
        int_0 = -1289
        var_3 = left_0.to_validation()
        right_3 = module_0.Right(int_0)
        var_4 = right_3.to_maybe()
        var_5 = right_3.to_validation()
        bool_0 = right_3.is_left()
        float_0 = None
        list_1 = [float_0, var_3]
        var_6 = left_0.map(list_1)
        var_7 = right_3.map(left_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        str_0 = ',rTW;*T5*S1L}v@'
        right_0 = module_0.Right(str_0)
        var_0 = right_0.map(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        object_0 = module_1.object()
        either_0 = module_0.Either(object_0)
        float_0 = -1113.258626
        bytes_0 = b'iG\x17\xd2N\x97\x91\xcax\xb7\xa7\xa6sU'
        right_0 = module_0.Right(bytes_0)
        var_0 = right_0.bind(float_0)
    except BaseException:
        pass