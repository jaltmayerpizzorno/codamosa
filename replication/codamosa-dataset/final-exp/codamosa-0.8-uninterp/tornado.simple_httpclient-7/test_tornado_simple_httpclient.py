# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.ioloop as module_1
import tornado.tcpclient as module_2
import tornado.netutil as module_3
import tornado.httputil as module_4

def test_case_0():
    pass

def test_case_1():
    str_0 = '\rB"Q\'bBj?\',hR(>se'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = h_t_t_p_timeout_error_0.__str__()

def test_case_2():
    str_0 = 'd`%.Iq3^o\x0ca/ \tt'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)

def test_case_3():
    str_0 = ':uM\t-7w{:}'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_4():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    h_t_t_p_request_0 = None
    callable_0 = None
    int_0 = 1270
    tuple_0 = (int_0, int_0)
    int_1 = 616
    t_c_p_client_0 = module_2.TCPClient()
    int_2 = -2089
    int_3 = -1055
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_0, tuple_0, int_1, t_c_p_client_0, int_2, int_3)

def test_case_5():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    h_t_t_p_request_0 = None
    callable_0 = None
    int_0 = 1270
    int_1 = 616
    int_2 = -500
    resolver_0 = module_3.Resolver()
    str_0 = '__main__'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    simple_async_h_t_t_p_client_0.initialize(int_2, resolver_0, h_t_t_p_stream_closed_error_0, int_1)
    str_1 = ''
    str_2 = None
    dict_0 = {str_1: str_1, str_1: str_2}
    h_t_t_p_headers_0 = module_4.HTTPHeaders(**dict_0)
    h_t_t_p_headers_1 = h_t_t_p_headers_0.copy()
    h_t_t_p_headers_2 = h_t_t_p_headers_1.copy()
    resolver_1 = module_3.Resolver()
    t_c_p_client_0 = module_2.TCPClient(resolver_1)
    int_3 = 101
    int_4 = -4648
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_0, t_c_p_client_0, int_0, t_c_p_client_0, int_3, int_4)
    str_3 = 'MQ8rt\n9]08s%rw7n@W'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_3)
    str_4 = h_t_t_p_timeout_error_0.__str__()
    str_5 = h_t_t_p_timeout_error_0.__str__()
    str_6 = h_t_t_p_timeout_error_0.__str__()
    str_7 = h_t_t_p_timeout_error_0.__str__()

def test_case_6():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    str_0 = '__main__'
    simple_async_h_t_t_p_client_0.close()
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = 'milliseconds'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_1)
    str_2 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_7():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    h_t_t_p_request_0 = None
    callable_0 = None
    int_0 = 616
    t_c_p_client_0 = module_2.TCPClient()
    str_0 = 'B$J'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = 'x}^p(i\ty\x0ceSDLia7&'
    t_c_p_client_1 = module_2.TCPClient()
    int_1 = -1909
    t_c_p_client_2 = module_2.TCPClient()
    int_2 = 473
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, callable_0, h_t_t_p_request_0, int_0, t_c_p_client_0, int_2, int_1)
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_1)
    str_2 = h_t_t_p_timeout_error_0.__str__()
    str_3 = None
    h_t_t_p_timeout_error_1 = module_0.HTTPTimeoutError(str_3)
    h_t_t_p_connection_0.on_connection_close()
    str_4 = None
    h_t_t_p_timeout_error_2 = module_0.HTTPTimeoutError(str_4)
    str_5 = h_t_t_p_timeout_error_1.__str__()