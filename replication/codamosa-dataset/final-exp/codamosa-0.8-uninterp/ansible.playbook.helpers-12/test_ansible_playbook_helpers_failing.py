# Automatically generated by Pynguin.
import ansible.playbook.helpers as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        bytes_0 = b'\x06x\xec-"\xb8\xba\xe6\x98\xa4\xdf#\xdf\x98f\xbb!'
        list_0 = [bytes_0, bytes_0, bytes_0]
        dict_0 = {}
        int_0 = -2215
        var_0 = module_0.load_list_of_blocks(list_0, bytes_0, dict_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -663.03
        dict_0 = {}
        str_0 = '\n"@YqWI<Bbb&WsF<5'
        list_0 = [str_0, float_0]
        var_0 = module_0.load_list_of_blocks(float_0, dict_0, str_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        complex_0 = None
        bool_0 = None
        dict_0 = {complex_0: complex_0, bool_0: bool_0, complex_0: bool_0, complex_0: complex_0}
        var_0 = module_0.load_list_of_tasks(complex_0, bool_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0c=yYt\rM6"rw@'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.load_list_of_roles(str_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ' U\r+wYb\x0c/=^0RrNG'
        bytes_0 = b'\x06x\x17\xec-"\xb8\xba\xe6\x98\xa4\xdf#\xdf\x98f\xbb!'
        dict_0 = {}
        list_0 = [dict_0, str_0]
        var_0 = module_0.load_list_of_roles(list_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'include'
        str_1 = 'include.yaml'
        str_2 = {str_0: str_1}
        str_3 = 'nameG'
        str_4 = None
        float_0 = None
        list_0 = []
        int_0 = -5271
        str_5 = 'U[o@s|77Mcuq_*(hO\t'
        var_0 = module_0.load_list_of_roles(list_0, int_0, str_3, str_5)
        float_1 = -347.5704174787024
        float_2 = 169.0
        var_1 = module_0.load_list_of_blocks(str_4, float_0, float_1, float_1, float_2)
        list_1 = [str_2, str_2]
        float_3 = 506.4355
        bytes_0 = b'+\x08\xb6=\xc4\xc6'
        float_4 = 1628.7224903371437
        tuple_0 = (bytes_0, float_4)
        var_2 = module_0.load_list_of_blocks(list_1, float_3, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x06x\xec-"\xb8\xba\xe6\x98\xa4\xdf#\xdf\x98f\xbb!'
        list_0 = []
        set_0 = set()
        str_0 = "N-@P\x0bj|*Fc'dT  `$2y~"
        bool_0 = False
        int_0 = -3936
        var_0 = module_0.load_list_of_tasks(list_0, set_0, str_0, bool_0, int_0, str_0)
        list_1 = [bytes_0, bytes_0, bytes_0]
        bytes_1 = b'\xd8\x94\xe6\xc2\x81\x9c\rB\x1a\xe3\x0bm\xad'
        dict_0 = {}
        var_1 = module_0.load_list_of_blocks(list_1, bytes_1, dict_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'include'
        str_1 = {str_0: str_0}
        str_2 = [str_1, str_1]
        bool_0 = False
        var_0 = module_0.load_list_of_tasks(str_2, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'inYclude'
        str_1 = {str_0: str_0}
        str_2 = [str_1, str_1]
        var_0 = None
        bool_0 = True
        var_1 = module_0.load_list_of_tasks(str_2, var_0, var_0, var_0, var_0, bool_0, var_0, var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = {}
        str_1 = 'name'
        str_2 = 'test task'
        str_3 = {str_1: str_2}
        str_4 = [str_0, str_3]
        var_0 = None
        bool_0 = True
        var_1 = module_0.load_list_of_tasks(str_4, var_0, var_0, var_0, var_0, bool_0, var_0, var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'include'
        str_1 = {str_0: str_0}
        str_2 = [str_1, str_1]
        var_0 = None
        bool_0 = True
        var_1 = module_0.load_list_of_tasks(str_2, var_0, var_0, var_0, var_0, bool_0, var_0, var_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        str_1 = {str_0: str_0}
        float_0 = 142.70708032398173
        str_2 = {}
        str_3 = [str_1, float_0, str_2]
        var_0 = None
        bool_0 = False
        var_1 = module_0.load_list_of_tasks(str_3, var_0, var_0, var_0, var_0, bool_0, var_0, var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'include'
        str_1 = {str_0: str_0}
        float_0 = -347.5704174787024
        dict_0 = None
        list_0 = [dict_0, str_1, str_1]
        float_1 = 960.10569
        bytes_0 = b'+\xbc\xb6=\xc4\xc6'
        tuple_0 = (bytes_0, float_0)
        var_0 = module_0.load_list_of_blocks(list_0, float_1, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        str_1 = {str_0: str_0}
        str_2 = None
        float_0 = None
        str_3 = [str_1, float_0, str_2]
        var_0 = None
        bool_0 = True
        var_1 = module_0.load_list_of_tasks(str_3, var_0, var_0, var_0, var_0, bool_0, var_0, var_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'include'
        str_1 = 'nme'
        str_2 = 'test task'
        str_3 = None
        float_0 = None
        float_1 = -348.0
        float_2 = 169.0
        var_0 = module_0.load_list_of_blocks(str_3, float_0, float_1, float_1, float_2)
        str_4 = {str_1: str_2, float_0: var_0}
        str_5 = [str_4, str_0]
        var_1 = None
        bool_0 = False
        var_2 = module_0.load_list_of_tasks(str_5, var_1, var_1, var_1, var_1, bool_0, var_1, var_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ''
        display_0 = module_1.Display()
        int_0 = None
        str_1 = 'WB'
        bytes_0 = None
        bool_0 = False
        bytes_1 = None
        list_0 = [str_0, bytes_1, int_0]
        var_0 = display_0.system_warning(list_0)
        var_1 = module_0.load_list_of_blocks(int_0, str_1, bytes_0, bool_0, bytes_1)
        set_0 = {str_0}
        var_2 = module_0.load_list_of_roles(list_0, set_0)
    except BaseException:
        pass