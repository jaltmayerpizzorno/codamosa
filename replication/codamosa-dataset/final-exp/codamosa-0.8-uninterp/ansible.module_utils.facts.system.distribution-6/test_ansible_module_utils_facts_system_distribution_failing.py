# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        bool_0 = None
        var_0 = module_0.get_uname(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 4069
        distribution_files_0 = module_0.DistributionFiles(int_0)
        float_0 = 668.5322
        distribution_0 = module_0.Distribution(float_0)
        str_0 = '/Users'
        bytes_0 = b'\xd9RE\xb3\x91(\xce+\xa6,'
        var_0 = distribution_files_0.parse_distribution_file_Mandriva(distribution_0, str_0, bytes_0, str_0)
        list_0 = [str_0, distribution_files_0, int_0, int_0]
        dict_0 = {float_0: str_0, str_0: var_0}
        var_1 = distribution_files_0.parse_distribution_file_Slackware(list_0, distribution_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = None
        distribution_fact_collector_0 = module_0.DistributionFactCollector(tuple_0)
        str_0 = "xDj'?-a?L_\nP'"
        dict_0 = {str_0: distribution_fact_collector_0}
        float_0 = 4283.884
        distribution_0 = module_0.Distribution(float_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        str_1 = "a&\x0cq(8xi^u'"
        int_0 = -961
        list_0 = [dict_0, float_0]
        distribution_files_0 = module_0.DistributionFiles(distribution_0)
        var_1 = distribution_files_0.parse_distribution_file_CentOS(str_0, str_1, int_0, list_0)
        var_2 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        distribution_0 = module_0.Distribution(set_0)
        var_0 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_4():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        dict_0 = {}
        str_0 = '=ddpeBe@4aXq'
        var_0 = distribution_fact_collector_0.collect(str_0)
        var_1 = distribution_fact_collector_0.collect()
        str_1 = '\rLd6K5$De'
        distribution_0 = module_0.Distribution(str_1)
        bytes_0 = b'\x1aG@\xb7t\xe7\xda\x0c\xb4'
        bool_0 = False
        tuple_0 = (bytes_0, bool_0, dict_0)
        list_0 = [distribution_fact_collector_0, bool_0]
        bytes_1 = b'\xb1\x1e\xdax\xbf\xfd\x98f\x8e\xca'
        distribution_files_0 = module_0.DistributionFiles(bytes_1)
        var_2 = distribution_files_0.parse_distribution_file_Coreos(distribution_0, tuple_0, list_0, distribution_0)
        distribution_1 = module_0.Distribution(dict_0)
        bytes_2 = b''
        distribution_2 = module_0.Distribution(bytes_2)
        distribution_3 = module_0.Distribution(distribution_1)
        var_3 = distribution_1.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        distribution_0 = module_0.Distribution(bool_0)
        var_0 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x9d\x01\x03\xdb\x02>DEeC\x02\xdd\xedN'
        distribution_0 = module_0.Distribution(bytes_0)
        distribution_1 = module_0.Distribution(distribution_0)
        var_0 = distribution_1.get_distribution_FreeBSD()
        var_1 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        distribution_0 = module_0.Distribution(bool_0)
        distribution_1 = module_0.Distribution(distribution_0)
        var_0 = distribution_1.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 0.5
        dict_0 = {}
        distribution_files_0 = None
        distribution_0 = module_0.Distribution(distribution_files_0)
        set_0 = {float_0, distribution_files_0}
        float_1 = 538.668
        tuple_0 = (dict_0, distribution_0, set_0, float_1)
        distribution_1 = module_0.Distribution(tuple_0)
        var_0 = distribution_1.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Lin0x'
        str_1 = '9KN\rW\r'
        str_2 = 'Eyv2>L!~=2vENb\tWeaHq'
        dict_0 = {str_1: str_0, str_2: str_2, str_1: str_0}
        str_3 = '88.Ly&VZqVlV3>vBYk'
        set_0 = {str_3, str_3, str_3}
        distribution_files_0 = module_0.DistributionFiles(set_0)
        var_0 = distribution_files_0.parse_distribution_file_NA(str_0, str_1, dict_0, str_0)
        bool_0 = True
        tuple_0 = None
        distribution_0 = module_0.Distribution(tuple_0)
        var_1 = module_0.get_uname(bool_0, distribution_0)
    except BaseException:
        pass