# Automatically generated by Pynguin.
import collections as module_0
import flutils.codecs.raw_utf8_escape as module_1
import codecs as module_2

def test_case_0():
    try:
        bytes_0 = b'k\xe3\xbea\x96R\x7f\x1d\x8dY\r\xd5'
        int_0 = 1547
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_0.UserString(tuple_0)
        list_0 = [bytes_0, tuple_0]
        str_0 = '&k,elQ$b[FN'
        tuple_1 = (list_0, str_0)
        tuple_2 = (user_string_0, tuple_1)
        user_string_1 = module_0.UserString(tuple_2)
        tuple_3 = module_1.encode(user_string_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "Check if the given ``obj`` has **ANY** of the given ``attrs`` and are\n    callable.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if ANY of the given ``*attrs`` exist on the given ``obj``\n          and ANY are callable;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_any_callables\n        >>> has_any_callables(dict(),'get','keys','items','values','foo')\n        True\n    "
        tuple_0 = module_1.encode(str_0)
        module_1.register()
        tuple_1 = module_1.encode(str_0, str_0)
        module_1.register()
        module_1.register()
        tuple_2 = module_1.encode(str_0)
        module_1.register()
        module_1.register()
        module_1.register()
        tuple_3 = module_1.encode(str_0)
        tuple_4 = module_1.encode(str_0)
        module_1.register()
        tuple_5 = module_1.encode(str_0)
        bytes_0 = b'\x1b\xaf\xc6M\x9f\x1b\x0b\xd9\xfaz\xf2\x83'
        module_1.register()
        tuple_6 = module_1.decode(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        module_1.register()
        tuple_1 = module_1.decode(tuple_0)
        str_0 = ' is not a proper bas64 character string: '
        tuple_2 = module_1.decode(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -3145
        str_0 = 'N\nY+l]'
        tuple_0 = module_1.decode(int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        module_1.register()
        module_1.register()
        module_1.register()
        module_1.register()
        user_string_0 = None
        module_1.register()
        module_1.register()
        tuple_0 = module_1.encode(user_string_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'test_eutf8h'
        module_1.register()
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '[do+AK| t6Kd(t!.a;'
        str_1 = "S\\k\x0b][Y'u"
        dict_0 = {str_1: str_0, str_1: str_1, str_1: str_1}
        tuple_0 = module_1.encode(str_0)
        float_0 = None
        tuple_1 = None
        tuple_2 = (dict_0, float_0, tuple_1)
        user_string_0 = module_0.UserString(tuple_2)
        tuple_3 = module_1.encode(user_string_0)
        str_2 = ',WU|l\x0b72XoV)FB4Pn['
        tuple_4 = module_1.encode(str_2)
        var_0 = user_string_0.rstrip()
        module_1.register()
        module_1.register()
        module_1.register()
        module_1.register()
        bool_0 = False
        user_string_1 = module_0.UserString(bool_0)
        tuple_5 = module_1.encode(str_0)
        module_1.register()
        tuple_6 = module_1.encode(user_string_0, str_2)
        bytes_0 = b'\x1b\xaf\xc6M\x9f\x1b\x0b\xd9\xfaz\xf2\x83'
        module_1.register()
        tuple_7 = module_1.decode(bytes_0, user_string_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'h\xe8\x90Hi\x904\xe7D\xf3\xb8\xf5\tWR\xde\xdb'
        int_0 = None
        tuple_0 = (bytes_0, int_0)
        module_1.register()
        module_1.register()
        str_0 = 'raw_utf8_escape'
        tuple_1 = (str_0, int_0)
        list_0 = None
        dict_0 = {tuple_0: bytes_0, tuple_1: list_0, tuple_0: list_0}
        user_string_0 = module_0.UserString(dict_0)
        list_1 = [user_string_0, tuple_0, dict_0, list_0]
        var_0 = user_string_0.__mod__(list_1)
        tuple_2 = module_1.encode(user_string_0, str_0)
    except BaseException:
        pass