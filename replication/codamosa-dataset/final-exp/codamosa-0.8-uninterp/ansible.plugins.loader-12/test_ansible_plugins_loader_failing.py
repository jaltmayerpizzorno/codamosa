# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'rwxstah-'
        list_0 = [str_0, str_0, str_0]
        str_1 = '/input/ansible/plugins/shell/windows'
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = -1564
        plugin_path_context_0 = module_0.PluginPathContext(int_0, list_0)
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, list_0, str_1, plugin_load_context_0, plugin_path_context_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x16'
        str_0 = 's\r`f:jG7'
        set_0 = {bytes_0, bytes_0, str_0}
        int_0 = -2792
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(bytes_0, set_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\xe8 F\xf0\xc9Q\x8b'
        bool_0 = False
        tuple_0 = (bytes_0, bool_0)
        var_0 = plugin_load_context_0.redirect(tuple_0)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'at1<'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1.5
        set_0 = None
        dict_0 = {}
        bool_0 = True
        jinja2_loader_0 = module_0.Jinja2Loader(set_0, float_0, dict_0, bool_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        list_0 = [bool_0]
        str_0 = '\\+:DJ-i#$8E/Z!w%?E'
        bool_1 = True
        set_0 = {bool_1}
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, list_0, str_0, bool_1, set_0)
        list_1 = [bool_0, bool_0]
        jinja2_loader_1 = module_0.Jinja2Loader(jinja2_loader_0, jinja2_loader_0, list_1, list_1)
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.redirect(jinja2_loader_1)
    except BaseException:
        pass

def test_case_7():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'MsN'
        dict_0 = {}
        bool_0 = True
        plugin_loader_0 = module_0.PluginLoader(str_0, dict_0, str_0, bool_0)
        var_0 = plugin_loader_0.__getstate__()
        set_0 = set()
        var_1 = plugin_load_context_0.nope(set_0)
        var_2 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_8():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = ''
        float_0 = 862.9126238156159
        dict_0 = {str_0: str_0}
        dict_1 = {str_0: float_0, float_0: float_0}
        plugin_loader_0 = module_0.PluginLoader(str_0, float_0, dict_0, dict_1)
        var_0 = plugin_loader_0.has_plugin(plugin_load_context_0)
        set_0 = {float_0}
        var_1 = module_0.add_all_plugin_dirs(dict_1)
        str_1 = '$8B]/SaX~QPOs3'
        var_2 = plugin_loader_0.add_directory(str_1)
        var_3 = plugin_loader_0.format_paths(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = None
        str_0 = 'Zeg/Y'
        list_0 = [str_0, str_0, dict_0, dict_0]
        bytes_0 = None
        str_1 = 'ansible_machine'
        bool_0 = True
        int_0 = -223
        int_1 = 69
        dict_1 = {}
        str_2 = 'W+H+\te@8EN'
        plugin_loader_0 = module_0.PluginLoader(bool_0, bool_0, int_0, int_1, dict_1, str_2)
        var_0 = plugin_loader_0.format_paths(str_1)
        str_3 = 'I@\x0b_9IhRI'
        set_0 = {str_3}
        plugin_loader_1 = module_0.PluginLoader(bytes_0, set_0, list_0, str_0)
        str_4 = ''
        dict_2 = {str_0: set_0, str_4: str_0, str_4: str_3}
        get_with_context_result_0 = module_0.get_with_context_result(**dict_2)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 4
        dict_0 = {int_0: int_0, int_0: int_0}
        list_0 = [dict_0]
        str_0 = "'iPWXPS\t,N\x0ct0~QwD"
        str_1 = '<zN'
        dict_1 = {str_0: dict_0, str_1: dict_0, str_0: str_1}
        plugin_loader_0 = module_0.PluginLoader(int_0, dict_0, list_0, str_0, list_0, dict_1)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_11():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = ''
        dict_0 = {plugin_load_context_0: str_0}
        bool_0 = False
        get_with_context_result_0 = None
        plugin_loader_0 = module_0.PluginLoader(str_0, dict_0, bool_0, bool_0, get_with_context_result_0)
        set_0 = set()
        var_0 = plugin_loader_0.__setstate__(set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0]
        var_0 = plugin_load_context_0.nope(list_0)
        str_0 = ''
        float_0 = 862.9126238156159
        dict_0 = {}
        dict_1 = {str_0: float_0, float_0: float_0}
        plugin_loader_0 = module_0.PluginLoader(str_0, float_0, dict_0, dict_1)
        var_1 = plugin_loader_0.has_plugin(plugin_load_context_0)
        var_2 = module_0.add_all_plugin_dirs(dict_1)
        bool_0 = False
        var_3 = plugin_load_context_0.nope(bool_0)
        var_4 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_13():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0]
        var_0 = plugin_load_context_0.nope(list_0)
        str_0 = ''
        float_0 = 862.9126238156159
        dict_0 = {}
        dict_1 = {str_0: float_0, float_0: float_0}
        plugin_loader_0 = module_0.PluginLoader(str_0, float_0, dict_0, dict_1)
        var_1 = plugin_loader_0.has_plugin(plugin_load_context_0)
        list_1 = [plugin_loader_0, str_0, plugin_loader_0]
        int_0 = False
        var_2 = module_0.add_all_plugin_dirs(dict_1)
        int_1 = None
        str_1 = '$8B]/SaX~QPOs3'
        var_3 = plugin_loader_0.add_directory(str_1)
        bytes_0 = b'a"\x8e\xa7 \xeb\xae\x1c\xd1\x06\xd2'
        str_2 = '^>Wf:?V+J@)$V,I!*QGK'
        jinja2_loader_0 = module_0.Jinja2Loader(int_1, str_1, bytes_0, str_2, dict_1)
        str_3 = 'I'
        bytes_1 = b'\x15:r\xd14\x19"I.\x93\x01\x1b'
        str_4 = '/input/ansible/plugins/shell/windows'
        float_1 = -4331.36
        jinja2_loader_1 = module_0.Jinja2Loader(str_3, int_0, bytes_1, str_3, str_4, float_1)
        var_4 = jinja2_loader_1.all()
        complex_0 = None
        var_5 = plugin_loader_0.find_plugin_with_context(complex_0, plugin_load_context_0, list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'L'
        str_1 = '\t[RQ8(Ej|`K7*'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
        list_0 = [dict_0, str_0]
        bytes_0 = b'\xa7\x05On\xb3\x82a[SP\x86\xb9U\x18\xf8L:$#'
        str_2 = 'xaw+MJKwG)uWsR'
        str_3 = 'cookies_string'
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, str_2, bytes_0, str_3)
        var_0 = jinja2_loader_0.get(dict_0, *list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'V\ne&`W 6m'
        float_0 = 862.9126238156159
        dict_0 = {str_0: str_0}
        dict_1 = {str_0: float_0, float_0: float_0}
        plugin_loader_0 = module_0.PluginLoader(str_0, float_0, dict_0, dict_1)
        var_0 = plugin_loader_0.has_plugin(plugin_load_context_0)
        int_0 = -4301
        var_1 = module_0.get_shell_plugin(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '/pynguin/\x15:r\udcd14\x19"I.\udc93\x01\x1b/windows'
        str_1 = '80m>lpOD73m5}'
        list_0 = [str_1, str_1]
        dict_0 = {}
        get_with_context_result_0 = module_0.get_with_context_result(*list_0, **dict_0)
        bool_0 = False
        list_1 = [str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, get_with_context_result_0, bool_0, list_1)
        var_0 = plugin_loader_0.add_directory(str_0)
        bytes_0 = b'\x06\xe1t\xcf\x0b,\x08\xbe\xcc'
        str_2 = '~l2%-w*}#'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, bytes_0)
        str_3 = 'LHx#'
        plugin_load_context_0 = module_0.PluginLoadContext()
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_path_context_0, list_1, list_0, str_3, plugin_load_context_0)
        var_1 = jinja2_loader_0.find_plugin(str_2, get_with_context_result_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        str_0 = '7!TyKMHd7}3aK7'
        dict_0 = {str_0: str_0}
        float_0 = 918.597975
        str_1 = '"S*!'
        plugin_load_context_0 = module_0.PluginLoadContext()
        float_1 = -1806.05
        dict_1 = {plugin_load_context_0: plugin_load_context_0, str_1: str_1, float_1: float_0}
        int_0 = -313
        bool_1 = False
        plugin_loader_0 = None
        tuple_0 = (int_0, bool_1, plugin_loader_0, bool_1)
        plugin_loader_1 = module_0.PluginLoader(float_0, str_1, plugin_load_context_0, dict_1, tuple_0)
        var_0 = plugin_loader_1.get_with_context(bool_0, **dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '/pynguin/\x15:r\udcd14\x19"I.\udc93\x01\x1b/windows'
        str_1 = '80m>lD73m5}x'
        list_0 = [str_1, str_1]
        dict_0 = {}
        get_with_context_result_0 = module_0.get_with_context_result(*list_0, **dict_0)
        bool_0 = True
        list_1 = [str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, get_with_context_result_0, bool_0, list_1)
        var_0 = plugin_loader_0.add_directory(str_0)
        bool_1 = False
        tuple_0 = None
        float_0 = -2803.0612
        dict_1 = None
        plugin_loader_1 = module_0.PluginLoader(bool_1, tuple_0, float_0, str_1, dict_1)
        str_2 = 'p)-B'
        var_1 = plugin_loader_1.has_plugin(str_2, str_1)
        var_2 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'l'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'b"a{.3-H,pq1x3`[='
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0]
        var_0 = plugin_load_context_0.nope(list_0)
        int_0 = 64
        tuple_0 = None
        str_0 = '<tjd@k^fl?sj9'
        bytes_0 = b'\x05w\x9dM2\x83\xe8\xb2\x10\xbf\xd5a\x18\xf0\xbe\xfd\xba\x06,\xaa'
        var_1 = plugin_load_context_0.resolve(int_0, tuple_0, str_0, bytes_0)
        str_1 = ''
        float_0 = 1956.4383
        dict_0 = {}
        dict_1 = {str_1: float_0, float_0: float_0}
        plugin_loader_0 = module_0.PluginLoader(str_1, float_0, dict_0, dict_1)
        var_2 = plugin_loader_0.has_plugin(plugin_load_context_0)
        var_3 = module_0.add_all_plugin_dirs(dict_1)
        bool_0 = True
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, plugin_load_context_0, bool_0, tuple_0)
        str_2 = '\x0cPuH#'
        str_3 = 'F5&)\x0cGg'
        plugin_loader_1 = module_0.PluginLoader(plugin_loader_0, bytes_0, str_0, dict_1)
        set_0 = set()
        jinja2_loader_1 = module_0.Jinja2Loader(str_2, str_3, plugin_loader_1, set_0)
        var_4 = jinja2_loader_1.find_plugin(jinja2_loader_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '/pynguin/\x15:r\udcd14\x19"I.\udc93\x01\x1b/windows'
        list_0 = [str_0, str_0]
        dict_0 = {}
        get_with_context_result_0 = module_0.get_with_context_result(*list_0, **dict_0)
        str_1 = 'V\ne&W 6'
        bool_0 = False
        tuple_0 = None
        float_0 = -2803.0612
        dict_1 = None
        plugin_loader_0 = module_0.PluginLoader(bool_0, tuple_0, float_0, str_0, dict_1)
        var_0 = plugin_loader_0.has_plugin(str_0, str_1)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '80m>lD73m5}x'
        list_0 = [str_0, str_0]
        dict_0 = {}
        get_with_context_result_0 = module_0.get_with_context_result(*list_0, **dict_0)
        bool_0 = False
        tuple_0 = None
        float_0 = -2803.0612
        dict_1 = None
        plugin_loader_0 = module_0.PluginLoader(bool_0, tuple_0, float_0, str_0, dict_1)
        str_1 = 'p)-B'
        var_0 = plugin_loader_0.has_plugin(str_1, str_0)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_24():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0]
        var_0 = plugin_load_context_0.nope(list_0)
        str_0 = ''
        plugin_load_context_1 = module_0.PluginLoadContext()
        float_0 = 860.3965580935005
        dict_0 = {}
        dict_1 = {str_0: float_0, float_0: float_0}
        plugin_loader_0 = module_0.PluginLoader(str_0, float_0, dict_0, dict_1)
        var_1 = plugin_loader_0.has_plugin(plugin_load_context_0)
        list_1 = [plugin_loader_0, str_0, plugin_loader_0]
        int_0 = 13
        int_1 = 1974
        var_2 = plugin_loader_0.find_plugin_with_context(int_0, float_0, list_1, int_1)
    except BaseException:
        pass

def test_case_25():
    try:
        bytes_0 = b'%\xf8/y\xbb\xf8\x9a\xb8*Z\xf3RB:\x95\xcan\xcf\xb8\x8a'
        str_0 = 'U'
        list_0 = [bytes_0, bytes_0, bytes_0, str_0]
        plugin_path_context_0 = module_0.PluginPathContext(list_0, bytes_0)
        str_1 = ''
        list_1 = [str_0, list_0]
        plugin_loader_0 = module_0.PluginLoader(plugin_path_context_0, str_1, list_1, list_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = ''
        bool_0 = True
        list_0 = [str_0]
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, list_0, list_0, bool_0)
        dict_0 = {}
        var_0 = jinja2_loader_0.all(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '/pynguin/\x15:r\udcd14\x19"I.\udc93\x01\x1b/windows'
        str_1 = '80m>lpOD73m5}'
        list_0 = [str_1, str_1]
        dict_0 = {}
        get_with_context_result_0 = module_0.get_with_context_result(*list_0, **dict_0)
        bool_0 = False
        list_1 = [str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, get_with_context_result_0, bool_0, list_1)
        var_0 = plugin_loader_0.add_directory(str_0)
        str_2 = 'Ve&W6'
        str_3 = "_,4\x0b Sv}hWm`\r3')nn 1"
        var_1 = module_0.get_shell_plugin(str_3, str_2)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '/pynguin/\x15:r\udcd14\x19"I.\udc93\x01\x1bfwindoYs'
        str_1 = '80m>lpOD73m5}'
        list_0 = [str_1, str_1]
        dict_0 = {}
        get_with_context_result_0 = module_0.get_with_context_result(*list_0, **dict_0)
        bool_0 = False
        list_1 = [str_1]
        plugin_loader_0 = module_0.PluginLoader(str_1, get_with_context_result_0, bool_0, list_1)
        var_0 = plugin_loader_0.add_directory(str_0)
        bytes_0 = b'\x06\xe1t\xcf\x0b,\x08\xbe\xcc'
        bytes_1 = b'\x8c\x05\x96\xe0\xd9'
        var_1 = plugin_loader_0.all(**dict_0)
        set_0 = {bytes_1}
        set_1 = {str_0}
        list_2 = [var_0, set_1, str_1]
        plugin_loader_1 = module_0.PluginLoader(bytes_0, plugin_loader_0, dict_0, set_1, list_2)
        var_2 = plugin_loader_1.get(set_0)
    except BaseException:
        pass