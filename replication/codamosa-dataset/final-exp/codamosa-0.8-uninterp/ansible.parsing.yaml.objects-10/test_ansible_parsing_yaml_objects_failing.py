# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        str_0 = 'kB0M&DF#F\n0'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        float_0 = 1.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 3619
        set_0 = {int_0}
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.__reversed__()
        var_1 = ansible_vault_encrypted_unicode_0.__getslice__(int_0, bool_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_0 = '# DO NOT EDIT THIS FILE - edit the master and reinstall.'
        var_2 = ansible_vault_encrypted_unicode_0.__mod__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        set_0 = None
        list_0 = [set_0, set_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = ';>D+,ncx.u7aCd/s`'
        str_1 = 'U\tb'
        dict_0 = {str_0: set_0, str_0: list_0, str_1: ansible_vault_encrypted_unicode_0, str_0: str_0}
        tuple_0 = (ansible_vault_encrypted_unicode_0, list_0, dict_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_1.capitalize()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_2.__complex__()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Q\x0c;UN=EVbZ1:'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.count(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_7():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        float_0 = 120.3
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.endswith(ansible_mapping_0)
    except BaseException:
        pass

def test_case_8():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        dict_0 = {ansible_unicode_0: ansible_unicode_0, ansible_unicode_0: ansible_unicode_0, ansible_unicode_0: ansible_unicode_0, ansible_unicode_0: ansible_unicode_0}
        str_0 = '@~2\n<3[is'
        float_0 = 1940.365108
        str_1 = '3\najUU#db;'
        str_2 = 'board_name'
        dict_1 = {str_1: float_0, str_2: ansible_unicode_0}
        tuple_0 = (float_0, dict_1, dict_1)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.title()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_1.join(dict_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_2)
        var_2 = ansible_vault_encrypted_unicode_1.isprintable()
        var_3 = ansible_vault_encrypted_unicode_3.lstrip()
        tuple_1 = None
        var_4 = ansible_vault_encrypted_unicode_3.__le__(tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__repr__()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [ansible_unicode_0]
        list_1 = []
        str_0 = '^SU^ '
        str_1 = "\ngid:\n  description: Group ID of the group.\n  returned: When C(state) is 'present'\n  type: int\n  sample: 1001\nname:\n  description: Group name.\n  returned: always\n  type: str\n  sample: users\nstate:\n  description: Whether the group is present or not.\n  returned: always\n  type: str\n  sample: 'absent'\nsystem:\n  description: Whether the group is a system group or not.\n  returned: When C(state) is 'present'\n  type: bool\n  sample: False\n"
        str_2 = '8K7@z)b0OU\tMp'
        bool_1 = True
        str_3 = "'?5/QoHp3h.4gJ,\t_("
        dict_0 = {str_0: ansible_unicode_0, str_1: list_0, str_2: bool_1, str_3: str_2}
        ansible_mapping_0 = module_0.AnsibleMapping(*list_1, **dict_0)
        tuple_0 = (ansible_unicode_0, list_0, ansible_mapping_0)
        var_1 = ansible_vault_encrypted_unicode_0.ljust(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = 't[8fPY8O*:L'
        str_1 = 'j7GBr(6H'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_1.partition(ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        float_0 = 1246.206313
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        str_0 = ')g_B'
        dict_0 = {str_0: ansible_vault_encrypted_unicode_1}
        ansible_sequence_1 = module_0.AnsibleSequence()
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        bytes_0 = b'qq\xe2\x90\x9c'
        var_0 = ansible_vault_encrypted_unicode_1.replace(ansible_mapping_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'nB>\x0bC6*c{'
        dict_0 = {str_0: str_0}
        float_0 = 389.04197
        tuple_0 = (dict_0, float_0)
        list_0 = []
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
        bytes_0 = None
        tuple_1 = (tuple_0, ansible_mapping_0, bytes_0)
        float_1 = -2015.1682
        set_0 = {float_1, float_1, float_1, float_1}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.rindex(tuple_1, list_0, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        str_0 = 'st_rdev'
        str_1 = 'UdP'
        bytes_0 = b'e\xf3d\xe1\xe2\xdf\xf7\xa2\xb1}{\xec\x85'
        str_2 = 'sAMlbv5\\VA3!%I!_l'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: bytes_0, str_2: str_1}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(ansible_sequence_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = []
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
        float_0 = -2213.0
        bytes_0 = b'\x88\xf6pn\xc1\xfc\xfa\xa9\x1d\xbcFkW'
        tuple_0 = (float_0, bytes_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(ansible_mapping_0)
        var_1 = ansible_vault_encrypted_unicode_0.zfill(ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_15():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_0 = '[0.0, 0.0, 0.0, 0.0]'
        str_1 = 'K+!26n<]2t"A;M&\t'
        str_2 = 'qH=nx'
        str_3 = ']xow^v,}?}'
        str_4 = '>G1PiO$w&'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_3, str_4: str_3}
        str_5 = 'S'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_5)
        var_0 = ansible_vault_encrypted_unicode_0.count(ansible_mapping_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '--purge'
        float_0 = 1.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__len__()
        var_1 = ansible_vault_encrypted_unicode_1.lstrip()
        var_2 = ansible_vault_encrypted_unicode_1.strip()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        float_1 = -1615.9
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_1)
        var_3 = ansible_vault_encrypted_unicode_1.zfill(float_1)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b't\x89\xfa\xbe\xdf\xd3\xe4\xd3X\xd4*\xac\x01\x9e9\x9aJ\xf5\x10\x90'
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.index(bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        str_1 = 'nC64O)2oV)%Y)<*Cu'
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0, str_1: str_0}
        str_2 = 'sJm:;4]%4\nuJlkH>P'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'i_f@]{d'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = 'O[ttD0NG]\x0b"*$jNtg6'
        set_0 = {str_1, str_1}
        bytes_0 = b'Yd\xa4\x1f\x96\x02e\x18'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(ansible_vault_encrypted_unicode_1)
        float_0 = 2.0
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_2.__reversed__()
        str_2 = 'JuL"'
        dict_0 = {str_2: str_2, str_2: set_0, str_2: str_1}
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_2 = ansible_vault_encrypted_unicode_2.expandtabs()
        bytes_1 = b'\x17\x82\x88e\x80\xc0\x14\xcf\xfeqp\x16\x19\xee\xcb'
        var_3 = ansible_vault_encrypted_unicode_0.rindex(bytes_1, dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_1.rstrip()
        var_1 = ansible_vault_encrypted_unicode_1.__rmod__(ansible_sequence_0)
        float_0 = 1246.206313
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        str_0 = ')g_B'
        var_2 = ansible_vault_encrypted_unicode_1.expandtabs()
        var_3 = ansible_vault_encrypted_unicode_0.__le__(str_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_4 = ansible_vault_encrypted_unicode_3.__mul__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_21():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        list_0 = [ansible_sequence_0]
        float_0 = -3717.49
        list_1 = [ansible_sequence_0, float_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_1.is_encrypted()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_1 = ansible_vault_encrypted_unicode_1.title()
        var_2 = ansible_vault_encrypted_unicode_1.__rmod__(ansible_unicode_0)
        set_0 = {ansible_unicode_0, ansible_unicode_0, ansible_unicode_0, ansible_unicode_0}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_3 = ansible_vault_encrypted_unicode_2.isascii()
        var_4 = ansible_vault_encrypted_unicode_2.format()
    except BaseException:
        pass

def test_case_22():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        tuple_0 = ()
        float_0 = 2397.1307
        var_0 = ansible_vault_encrypted_unicode_0.find(tuple_0, float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 3400
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        list_0 = [ansible_vault_encrypted_unicode_0, var_0, var_0, int_0]
        var_1 = ansible_vault_encrypted_unicode_0.translate(*list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'X^?t^yK`M'
        str_1 = ';A#YxdG\\z^'
        dict_0 = {str_0: str_0, str_1: str_1}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        list_0 = []
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0)
        list_1 = [ansible_sequence_0, list_0, list_0, ansible_sequence_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.rjust(ansible_mapping_0)
    except BaseException:
        pass

def test_case_25():
    try:
        ansible_mapping_0 = None
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_mapping_0)
        dict_0 = {}
        ansible_sequence_1 = module_0.AnsibleSequence(**dict_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_1)
        var_1 = ansible_vault_encrypted_unicode_1.capitalize()
        ansible_sequence_2 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_2)
        var_2 = ansible_vault_encrypted_unicode_2.isalpha()
        ansible_mapping_1 = module_0.AnsibleMapping()
        var_3 = ansible_vault_encrypted_unicode_2.__add__(ansible_mapping_1)
        var_4 = ansible_vault_encrypted_unicode_2.is_encrypted()
        var_5 = ansible_vault_encrypted_unicode_2.is_encrypted()
        var_6 = ansible_vault_encrypted_unicode_2.__unicode__()
        str_0 = '{(N?Ww^Ih\r~(_'
        var_7 = ansible_vault_encrypted_unicode_1.count(str_0, ansible_mapping_0, dict_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'k\\i#S1'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__len__()
        str_1 = 'Yd\udca4\x1f\udc96\x02e\x18'
        var_1 = ansible_vault_encrypted_unicode_0.startswith(str_1, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b'\x83\xfbN\xcd*U\xe7\xbd\x13\xa882\x82\xbb\xddM\xb0m\x04'
        ansible_unicode_0 = module_0.AnsibleUnicode()
        set_0 = {bytes_0, bytes_0, bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.expandtabs()
        var_2 = ansible_vault_encrypted_unicode_0.isidentifier()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_3 = ansible_vault_encrypted_unicode_1.capitalize()
        dict_0 = {}
        var_4 = ansible_vault_encrypted_unicode_0.encode(dict_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = None
        str_1 = ''
        str_2 = 'Uz=`v.iaDjT'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
        list_0 = [dict_0]
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.isidentifier()
        str_3 = 'iso8601_basic'
        ansible_sequence_1 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_1)
        var_1 = ansible_vault_encrypted_unicode_1.format_map(str_3)
        var_2 = ansible_vault_encrypted_unicode_1.casefold()
        var_3 = ansible_vault_encrypted_unicode_1.isalpha()
        var_4 = ansible_vault_encrypted_unicode_1.__repr__()
        str_4 = "5\\'\x0c_\tO\tZpuvpxy'RZ;T"
        dict_1 = {str_3: ansible_sequence_1}
        var_5 = ansible_vault_encrypted_unicode_1.count(str_4, dict_1)
    except BaseException:
        pass

def test_case_29():
    try:
        tuple_0 = ()
        ansible_mapping_0 = None
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_mapping_0)
        dict_0 = {}
        ansible_sequence_1 = module_0.AnsibleSequence(**dict_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_1)
        var_1 = ansible_vault_encrypted_unicode_1.capitalize()
        ansible_sequence_2 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_2)
        var_2 = ansible_vault_encrypted_unicode_2.isalpha()
        var_3 = ansible_vault_encrypted_unicode_2.__add__(ansible_mapping_0)
        var_4 = ansible_vault_encrypted_unicode_2.is_encrypted()
        str_0 = 'RH*]?'
        var_5 = ansible_vault_encrypted_unicode_1.__eq__(str_0)
        var_6 = ansible_vault_encrypted_unicode_2.is_encrypted()
        var_7 = ansible_vault_encrypted_unicode_2.__unicode__()
        var_8 = ansible_vault_encrypted_unicode_2.strip()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_9 = ansible_vault_encrypted_unicode_3.__repr__()
        var_10 = ansible_vault_encrypted_unicode_3.isdecimal()
        ansible_sequence_3 = module_0.AnsibleSequence()
        var_11 = ansible_vault_encrypted_unicode_2.isalnum()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_12 = ansible_vault_encrypted_unicode_4.isidentifier()
        var_13 = ansible_vault_encrypted_unicode_1.replace(dict_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_30():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        list_0 = [ansible_sequence_0]
        float_0 = 498.4688
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.center(ansible_sequence_0, *list_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 756
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(int_0)
        ansible_mapping_0 = None
        int_1 = -1275
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_1 = ansible_vault_encrypted_unicode_2.capitalize()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_2 = ansible_vault_encrypted_unicode_3.__ne__(ansible_mapping_0)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_3 = ansible_vault_encrypted_unicode_4.capitalize()
        ansible_sequence_1 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_5 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_1)
        var_4 = ansible_vault_encrypted_unicode_5.isalpha()
        ansible_mapping_1 = module_0.AnsibleMapping()
        var_5 = ansible_vault_encrypted_unicode_5.__add__(ansible_mapping_1)
        var_6 = ansible_vault_encrypted_unicode_5.is_encrypted()
        str_0 = 'RH*]?'
        var_7 = ansible_vault_encrypted_unicode_4.__eq__(str_0)
        var_8 = ansible_vault_encrypted_unicode_5.is_encrypted()
        var_9 = ansible_vault_encrypted_unicode_1.find(ansible_vault_encrypted_unicode_1)
        var_10 = ansible_vault_encrypted_unicode_5.__unicode__()
        var_11 = ansible_vault_encrypted_unicode_5.strip()
        var_12 = ansible_vault_encrypted_unicode_3.__repr__()
        var_13 = ansible_vault_encrypted_unicode_5.isdecimal()
        list_0 = [var_13, ansible_vault_encrypted_unicode_3]
        var_14 = ansible_vault_encrypted_unicode_5.upper()
        ansible_sequence_2 = module_0.AnsibleSequence()
        str_1 = '%Y-%m-%d %H:%M:%S'
        var_15 = ansible_vault_encrypted_unicode_5.isalnum()
        var_16 = ansible_vault_encrypted_unicode_4.isidentifier()
        var_17 = ansible_vault_encrypted_unicode_4.replace(list_0, str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = "H8'R%O"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        int_0 = 355
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_1.__ge__(ansible_vault_encrypted_unicode_0)
        float_0 = -1299.76567
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_2.splitlines()
        dict_0 = {var_0: var_0, float_0: ansible_vault_encrypted_unicode_0}
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_2 = ansible_vault_encrypted_unicode_3.isidentifier()
        list_0 = [ansible_vault_encrypted_unicode_3, ansible_vault_encrypted_unicode_2, var_0, var_2]
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
    except BaseException:
        pass

def test_case_33():
    try:
        tuple_0 = ()
        ansible_mapping_0 = None
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_mapping_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_1.capitalize()
        ansible_sequence_1 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_1)
        var_2 = ansible_vault_encrypted_unicode_2.casefold()
        ansible_mapping_1 = module_0.AnsibleMapping()
        var_3 = ansible_vault_encrypted_unicode_2.__add__(ansible_mapping_1)
        var_4 = ansible_vault_encrypted_unicode_2.is_encrypted()
        str_0 = 'RH*]?'
        var_5 = ansible_vault_encrypted_unicode_1.__eq__(str_0)
        var_6 = ansible_vault_encrypted_unicode_2.__unicode__()
        var_7 = ansible_vault_encrypted_unicode_2.strip()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_8 = ansible_vault_encrypted_unicode_3.__repr__()
        var_9 = ansible_vault_encrypted_unicode_3.isdecimal()
        ansible_sequence_2 = module_0.AnsibleSequence()
        var_10 = ansible_vault_encrypted_unicode_2.isalnum()
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_1)
        int_0 = 1512
        var_11 = ansible_vault_encrypted_unicode_0.__radd__(int_0)
        var_12 = ansible_vault_encrypted_unicode_1.isidentifier()
        int_1 = -1537
        ansible_unicode_0 = None
        var_13 = ansible_vault_encrypted_unicode_1.replace(ansible_vault_encrypted_unicode_2, int_1, ansible_unicode_0)
    except BaseException:
        pass

def test_case_34():
    try:
        tuple_0 = ()
        ansible_mapping_0 = None
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.format()
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(ansible_mapping_0)
        dict_0 = {}
        ansible_sequence_1 = module_0.AnsibleSequence(**dict_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_1)
        var_2 = ansible_vault_encrypted_unicode_1.capitalize()
        ansible_sequence_2 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_2)
        var_3 = ansible_vault_encrypted_unicode_2.isalpha()
        ansible_mapping_1 = module_0.AnsibleMapping()
        var_4 = ansible_vault_encrypted_unicode_2.__add__(ansible_mapping_1)
        var_5 = ansible_vault_encrypted_unicode_2.is_encrypted()
        str_0 = 'RH*]?'
        var_6 = ansible_vault_encrypted_unicode_1.__eq__(str_0)
        var_7 = ansible_vault_encrypted_unicode_2.is_encrypted()
        var_8 = ansible_vault_encrypted_unicode_2.__unicode__()
        var_9 = ansible_vault_encrypted_unicode_2.strip()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_10 = ansible_vault_encrypted_unicode_3.__repr__()
        var_11 = ansible_vault_encrypted_unicode_3.isdecimal()
        ansible_sequence_3 = module_0.AnsibleSequence()
        var_12 = ansible_vault_encrypted_unicode_2.isalnum()
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_1)
        int_0 = 1512
        str_1 = 'B,BdZkN#\x0c 7/}!*Y`U'
        var_13 = ansible_vault_encrypted_unicode_4.__radd__(str_1)
        float_0 = -524.9
        var_14 = ansible_vault_encrypted_unicode_2.rfind(int_0, float_0)
    except BaseException:
        pass