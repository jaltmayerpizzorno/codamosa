# Automatically generated by Pynguin.
import builtins as module_0
import pymonet.immutable_list as module_1

def test_case_0():
    try:
        object_0 = module_0.object()
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(bool_0)
        bool_1 = immutable_list_0.__eq__(object_0)
        optional_0 = immutable_list_0.find(object_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        bool_0 = False
        immutable_list_0 = module_1.ImmutableList(bool_0, bool_0)
        var_1 = immutable_list_0.append(var_0)
        list_0 = [immutable_list_0, var_1]
        optional_0 = immutable_list_0.find(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        object_0 = module_0.object()
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(bool_0)
        var_0 = immutable_list_0.__len__()
        optional_0 = immutable_list_0.find(object_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'me<Fg%pP[M\r|\x0cQ<gr&k'
        str_1 = "RDFmV3'S*9"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        immutable_list_0 = module_1.ImmutableList()
        immutable_list_1 = module_1.ImmutableList()
        var_0 = immutable_list_1.unshift(immutable_list_1)
        optional_0 = immutable_list_1.find(dict_0)
        immutable_list_2 = module_1.ImmutableList()
        immutable_list_3 = module_1.ImmutableList(dict_0, var_0)
        str_2 = immutable_list_3.__str__()
        var_1 = immutable_list_2.to_list()
        callable_0 = None
        optional_1 = immutable_list_3.find(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        immutable_list_0 = module_1.ImmutableList()
        str_0 = immutable_list_0.__str__()
        var_0 = immutable_list_0.__len__()
        list_0 = [var_0, immutable_list_0, immutable_list_0, immutable_list_0]
        var_1 = immutable_list_0.map(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        immutable_list_0 = module_1.ImmutableList()
        var_0 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        object_0 = module_0.object()
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(bool_0)
        optional_0 = immutable_list_0.find(object_0)
    except BaseException:
        pass

def test_case_7():
    try:
        immutable_list_0 = module_1.ImmutableList()
        float_0 = -859.154
        bool_0 = True
        immutable_list_1 = module_1.ImmutableList(float_0, bool_0)
        optional_0 = immutable_list_1.find(immutable_list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = None
        immutable_list_0 = module_1.ImmutableList()
        optional_0 = immutable_list_0.find(var_0)
        object_0 = module_0.object()
        bool_0 = True
        immutable_list_1 = module_1.ImmutableList(bool_0)
        optional_1 = immutable_list_1.find(object_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = None
        object_0 = module_0.object()
        bool_0 = True
        immutable_list_0 = module_1.ImmutableList(object_0, bool_0)
        float_0 = -1201.76
        immutable_list_1 = module_1.ImmutableList(float_0)
        var_0 = immutable_list_0.unshift(dict_0)
        callable_0 = None
        var_1 = None
        var_2 = immutable_list_0.reduce(callable_0, var_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 129
        var_0 = None
        immutable_list_0 = module_1.ImmutableList()
        var_1 = immutable_list_0.reduce(int_0, var_0)
        list_0 = []
        bool_0 = False
        immutable_list_1 = module_1.ImmutableList(list_0, bool_0)
        immutable_list_2 = module_1.ImmutableList()
        var_2 = immutable_list_2.filter(immutable_list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        optional_0 = None
        immutable_list_0 = module_1.ImmutableList(optional_0)
        immutable_list_1 = module_1.ImmutableList()
        var_0 = immutable_list_1.unshift(immutable_list_0)
        bool_0 = False
        immutable_list_2 = module_1.ImmutableList(bool_0, bool_0)
        str_0 = '\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        '
        var_1 = immutable_list_2.map(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'me<Fg%pP[M\r|\x0cQ<gr&k'
        str_1 = "RDFmV3'S*9"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        immutable_list_0 = module_1.ImmutableList()
        optional_0 = immutable_list_0.find(dict_0)
        immutable_list_1 = module_1.ImmutableList()
        str_2 = immutable_list_1.__str__()
        bool_0 = False
        var_0 = immutable_list_0.append(bool_0)
        optional_1 = None
        bool_1 = False
        immutable_list_2 = module_1.ImmutableList(var_0, bool_1)
        var_1 = immutable_list_2.filter(optional_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'me<Fg%pP[M\r|\x0cQ<gr&k'
        str_1 = "RDFmV3'S*9"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        immutable_list_0 = module_1.ImmutableList()
        var_0 = immutable_list_0.unshift(immutable_list_0)
        optional_0 = immutable_list_0.find(dict_0)
        immutable_list_1 = module_1.ImmutableList(var_0)
        str_2 = immutable_list_1.__str__()
        var_1 = None
        var_2 = immutable_list_1.reduce(var_1, var_1)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = None
        immutable_list_0 = module_1.ImmutableList(var_0)
        var_1 = immutable_list_0.__add__(var_0)
    except BaseException:
        pass