# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'V(6\xd4\x1f\xae\xfc\\\xb1\x9f\xbd^\xfb_'
    float_0 = 293.565007
    validation_0 = module_0.Validation(bytes_0, float_0)

def test_case_2():
    bytes_0 = b''
    bool_0 = True
    list_0 = [bytes_0]
    validation_0 = module_0.Validation(bool_0, list_0)
    var_0 = validation_0.to_try()
    str_0 = "?hY8'!Uz{{m1Rus!c}\x0b\t"
    set_0 = {bytes_0, str_0, str_0}
    validation_1 = module_0.Validation(bytes_0, set_0)
    var_1 = validation_1.to_try()
    var_2 = validation_1.to_either()

def test_case_3():
    str_0 = 'aiJ#M'
    list_0 = [str_0]
    set_0 = {str_0}
    validation_0 = module_0.Validation(set_0, list_0)
    var_0 = validation_0.to_try()
    tuple_0 = (list_0,)
    validation_1 = module_0.Validation(str_0, tuple_0)
    validation_2 = module_0.Validation(validation_1, tuple_0)
    var_1 = validation_2.to_maybe()
    int_0 = 1707
    validation_3 = module_0.Validation(int_0, tuple_0)

def test_case_4():
    bytes_0 = b'\xe2o8\xd7_i\x12$\xac\xa2\x1c'
    bool_0 = False
    tuple_0 = (bytes_0, bool_0)
    dict_0 = {}
    tuple_1 = ()
    validation_0 = module_0.Validation(dict_0, tuple_1)
    var_0 = validation_0.__eq__(tuple_0)
    str_0 = '\n        Take function (A) -> b and applied this function on current box value and returns new box with mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: Box[B]\n        '
    var_1 = validation_0.to_lazy()
    bool_1 = None
    tuple_2 = (str_0, bool_1)
    dict_1 = {tuple_2: str_0, str_0: bool_0}
    validation_1 = module_0.Validation(bool_1, str_0)
    validation_2 = module_0.Validation(dict_1, validation_0)
    var_2 = validation_2.to_lazy()
    var_3 = validation_0.to_maybe()
    int_0 = 1707
    list_0 = [validation_1, int_0, tuple_0]
    validation_3 = module_0.Validation(list_0, list_0)

def test_case_5():
    int_0 = 288
    str_0 = 'Qp('
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.to_lazy()